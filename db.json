{"meta":{"version":1,"warehouse":"3.0.1"},"models":{"Asset":[{"_id":"themes/archer/source/404.md","path":"404.md","modified":1,"renderable":1},{"_id":"themes/archer/source/assets/algolia_logo.svg","path":"assets/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/archer/source/assets/example_qr.png","path":"assets/example_qr.png","modified":1,"renderable":1},{"_id":"themes/archer/source/assets/favicon.ico","path":"assets/favicon.ico","modified":1,"renderable":1},{"_id":"themes/archer/source/assets/loading.svg","path":"assets/loading.svg","modified":1,"renderable":1},{"_id":"themes/archer/source/avatar/Misaka.jpg","path":"avatar/Misaka.jpg","modified":1,"renderable":1},{"_id":"themes/archer/source/css/mobile.css","path":"css/mobile.css","modified":1,"renderable":1},{"_id":"themes/archer/source/css/style.css","path":"css/style.css","modified":1,"renderable":1},{"_id":"themes/archer/source/font/Source Sans Pro.woff","path":"font/Source Sans Pro.woff","modified":1,"renderable":1},{"_id":"themes/archer/source/font/Source Sans Pro.woff2","path":"font/Source Sans Pro.woff2","modified":1,"renderable":1},{"_id":"themes/archer/source/lib/webfontloader.min.js","path":"lib/webfontloader.min.js","modified":1,"renderable":1},{"_id":"themes/archer/source/scripts/search.js","path":"scripts/search.js","modified":1,"renderable":1},{"_id":"themes/archer/source/scripts/share.js","path":"scripts/share.js","modified":1,"renderable":1},{"_id":"themes/archer/source/scripts/main.js","path":"scripts/main.js","modified":1,"renderable":1},{"_id":"themes/archer/source/avatar/mine.jpeg","path":"avatar/mine.jpeg","modified":1,"renderable":1},{"_id":"themes/archer/source/font/Oswald-Regular.ttf","path":"font/Oswald-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff","path":"font/SourceCodePro-Regular.ttf.woff","modified":1,"renderable":1},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff2","path":"font/SourceCodePro-Regular.ttf.woff2","modified":1,"renderable":1},{"_id":"themes/archer/source/intro/404-bg.jpg","path":"intro/404-bg.jpg","modified":1,"renderable":1},{"_id":"themes/archer/source/lib/jquery.min.js","path":"lib/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/archer/source/intro/post-bg.jpg","path":"intro/post-bg.jpg","modified":1,"renderable":1},{"_id":"themes/archer/source/intro/about-bg.jpg","path":"intro/about-bg.jpg","modified":1,"renderable":1},{"_id":"themes/archer/source/intro/index-bg.jpg","path":"intro/index-bg.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"b9806e9f2a409be793c05f378064530660ea1476","modified":1583305738000},{"_id":"source/404.md","hash":"4c9d9dafe0f3f8457b921a96a9260e09de6ad0ab","modified":1580892208000},{"_id":"source/test.html","hash":"9b80e45cf6d28c52b6c79299c2f3b737ab26c7e8","modified":1584528895000},{"_id":"source/test.js","hash":"a3cee6bbe056a6c447892a8f06c82674982c68e5","modified":1584528895000},{"_id":"themes/archer/.DS_Store","hash":"2c3f2d0cc71171fc8d22b7f9468bdb8cce95eb24","modified":1578964906000},{"_id":"themes/archer/.eslintrc.json","hash":"35eeca97fa5a2d0c6d78ef1257c58f03c42d43df","modified":1553725894000},{"_id":"themes/archer/.gitattributes","hash":"82c1a621642d5b620275ae1ed59845c3f7015a64","modified":1553725894000},{"_id":"themes/archer/.gitignore","hash":"e2d7fa953bade3b94ed1cab25ffcf442c7540433","modified":1553725894000},{"_id":"themes/archer/.prettierignore","hash":"58caf761f07e5df9cdc21f7f19f0670fde41089b","modified":1553725894000},{"_id":"themes/archer/.prettierrc.js","hash":"875b0b95f6eb24a23e4ea83a75709b97897135e0","modified":1553725894000},{"_id":"themes/archer/LICENSE","hash":"0da0c361bf299375739c6b668a44af0f5faf37bb","modified":1553725894000},{"_id":"themes/archer/README.md","hash":"97edb54cb7aecff714f132110ed4ba8215da7136","modified":1553725894000},{"_id":"themes/archer/_config.yml","hash":"d174522f3f24d25673695bad1fec3ead7f9377e9","modified":1579072074000},{"_id":"themes/archer/gulpfile.js","hash":"46dfe693b00ac4dea4d1b1af56f5ced4ee095c10","modified":1553725894000},{"_id":"themes/archer/package.json","hash":"67872d7647b43cc341b0ad9744b4b89819c07834","modified":1579877231000},{"_id":"themes/archer/webpack.config.js","hash":"d20b6350c50e2981484cb9356a3e21a2124bcd72","modified":1553725894000},{"_id":"themes/archer/webpack.prod.js","hash":"48de76cfa6274895801d3afc89ecbf04ee182a1c","modified":1553725894000},{"_id":"source/_posts/AMD、CMD、CommonJS、ES6Module的区别.md","hash":"b53e0ba716b834bfb0e62736e0fe462cfbf79c2a","modified":1590488509000},{"_id":"source/_posts/CSRF和XSS.md","hash":"1dcbb4227402431a13b59f918a1e0cf20d4668bf","modified":1587800704000},{"_id":"source/_posts/DOM事件流.md","hash":"2ea3db1eb30ab8d10d71e0604fa08f64a3ad2a5a","modified":1583923781000},{"_id":"source/_posts/DOM级别与DOM事件.md","hash":"fe2556803ead30356f85be45fb9963a9be1a7c96","modified":1583378580000},{"_id":"source/_posts/ES6中的Proxy、Reflect以及Vue3-0中的应用原理.md","hash":"b526557cf48cc2fbdb7da3bf941b08a707a76494","modified":1589525166000},{"_id":"source/_posts/Event事件常见应用.md","hash":"05dda590a122f96bff3f5d4a46cfc5373bc5815a","modified":1584004888000},{"_id":"source/_posts/VueRouter.md","hash":"08db2e868918b97dc3fcbfdbcff1ed0fed9bdf77","modified":1588772046000},{"_id":"source/_posts/Vue和MVVM.md","hash":"9a883d161bba532ca80d7e34cd6d16fbb72e9d85","modified":1589350082000},{"_id":"source/_posts/Vuex.md","hash":"2414eabddbd402210e81f203f106a18436e4560a","modified":1588771992000},{"_id":"source/_posts/HTTP协议.md","hash":"2eb9a7f2487812f5b27b24e168b06875efc8b4b2","modified":1584096007000},{"_id":"source/_posts/Vue基础二.md","hash":"0a3fad346bcc5abea03780abe558cc4277c42ce1","modified":1588759130000},{"_id":"source/_posts/Vue模板编译.md","hash":"a5e3ab7a8db299a086526a3bf4847ddba9767e98","modified":1589349948000},{"_id":"source/_posts/Vue基础一.md","hash":"7883837f37f2a4d7d109025e6a9a0ea1deb4a118","modified":1588758945000},{"_id":"source/_posts/Vue的响应式.md","hash":"b818a873ca6117339441b5423bb6df86ce654d93","modified":1589340888000},{"_id":"source/_posts/Vue组件的高级特性.md","hash":"feec6ddfb1c9e319777f25c52ac47909ca6a465e","modified":1588758827000},{"_id":"source/_posts/Vue组件渲染过程.md","hash":"7928a787720254cde9060f510349526b985c83c0","modified":1589349927000},{"_id":"source/_posts/Vue组件通讯.md","hash":"c301236bab547162805e448b69b350bc913a13bf","modified":1588758748000},{"_id":"source/_posts/Vue虚拟DOM.md","hash":"d44c654a74e47a4d5a64ca2b2b29b567b7e5f2c5","modified":1589340888000},{"_id":"source/_posts/css盒子模型.md","hash":"f5dbfc991a3217894e9e0533f456a22cd3624e8b","modified":1583308422000},{"_id":"source/_posts/css之BFC.md","hash":"8113ebace00f58cc7fee59c25fbbbf8e51b10494","modified":1583321143000},{"_id":"source/_posts/js柯里化.md","hash":"4a5a875a6f9076feabb68c9d085c5419f3c3542b","modified":1589962917000},{"_id":"source/_posts/call、apply、bind.md","hash":"5a031b3f85c6a50dc1dcd2a4271da2b74c185aab","modified":1591170555000},{"_id":"source/_posts/js栈.md","hash":"cb2ad7a03027b20783bdb50eeef03d75d073eb28","modified":1587958888000},{"_id":"source/_posts/js的面向对象.md","hash":"a8a7b13fb54484b9eb7d2d69df1e17f62d664bf7","modified":1586827311000},{"_id":"source/_posts/meta标签使用总结.md","hash":"a6f056b3da4a3e78dd1fb22a4253dfa3765ba20f","modified":1551485255000},{"_id":"source/_posts/tree-shaking.md","hash":"c24098537d0621ed6a4b148aaa17e4a420c65113","modified":1590393445000},{"_id":"source/_posts/promose-all和promise-race.md","hash":"f810014fb28698f31afa663a5ab808cd9573e5ee","modified":1579877710000},{"_id":"source/_posts/promise原理和实现.md","hash":"06773cf1e5b945b25c2f649178edd95c4f1efcf7","modified":1579877713000},{"_id":"source/_posts/vue生命周期以及nextTick应用.md","hash":"fa75689ad16851b6c840fcd69a3e523107bd8fdd","modified":1588758696000},{"_id":"source/_posts/webpack中module-chunk和bundle的区别是什么.md","hash":"3052161d8511946859707189b106c8a7ff60ae1c","modified":1589873490000},{"_id":"source/_posts/webpack相关问题.md","hash":"102205c295ab2de38f2ec19c2715d31e9161dcba","modified":1589525166000},{"_id":"source/_posts/webpack配置.md","hash":"82c238f82b31d12ea770dbad94ce9a75350a235d","modified":1589797481000},{"_id":"source/_posts/webpack动态懒加载.md","hash":"338bd8910e1398ac6dd5876eb0e493e438e51e2b","modified":1589797487000},{"_id":"source/_posts/webp在项目中的应用.md","hash":"4e3e36bb8b09e9442da6764a29d6ae85753be3d6","modified":1580722199000},{"_id":"source/_posts/事件循环EventLoop.md","hash":"f16c305ddaae5373c51859e3155df6f816b80986","modified":1588217338000},{"_id":"source/_posts/前端性能优化——DNS预解析.md","hash":"9c7e670203b672166b7c3c0701e4cc2400148e6d","modified":1580869313000},{"_id":"source/_posts/初尝hexo.md","hash":"82fc2da8e88fd595378a3695a3b1803eefb9ce11","modified":1579877886000},{"_id":"source/_posts/函数的防抖和节流.md","hash":"6d0a0bbba8cf105a8a0419a715343edd14d15de5","modified":1580888557000},{"_id":"source/_posts/前端错误监控.md","hash":"37dd301749cb35dae0fdc1e57d1943203940e6f8","modified":1588607695000},{"_id":"source/_posts/原型链.md","hash":"050965cfde15eb8c08fd71fd61049b2d5f460be9","modified":1584095925000},{"_id":"source/_posts/实现call.md","hash":"24f100cea6f9008e9fb4cf432ac844112c24a88b","modified":1591170558000},{"_id":"source/_posts/如何实现一个深拷贝.md","hash":"d84dd22f82c83a2df8f1297356d80a3d701c9d19","modified":1590564151000},{"_id":"source/_posts/手撕代码.md","hash":"52e7c2ff4fdaec137aeadf48021917522a1da995","modified":1591867284000},{"_id":"source/_posts/浏览器渲染原理与过程.md","hash":"38c9cd178cc6ecf12fea9490d690b087a8f66925","modified":1587973730000},{"_id":"source/_posts/路由原理.md","hash":"9622d0598d7da0c694621775acb6725080fe2938","modified":1589349899000},{"_id":"source/_posts/算法高频问题.md","hash":"d34399c8591ecaa26a7efbf579c4491acd3cea1f","modified":1590473902000},{"_id":"source/_posts/通信相关问题.md","hash":"a72f344dbcc0057ec222defbcf69e67c97d3d7ff","modified":1587024886000},{"_id":"source/_posts/页面布局.md","hash":"03137abe9e6cec065c6e4b88ce72bc91a81dd98b","modified":1581501794000},{"_id":"source/about/index.md","hash":"45e21d80f01cd72b3393602ae556828d2f78e7e9","modified":1578986204000},{"_id":"source/_posts/页面性能优化.md","hash":"392ce733236c21cbbd9a3f8be1b9e6c8b47f5764","modified":1588600985000},{"_id":"themes/archer/dev/archer.sh","hash":"4065c4e55462d5ecf016464adea0d1db967ef4b4","modified":1578905288000},{"_id":"themes/archer/docs/README-en.md","hash":"f325565c0bb94501fd046268659c7752709895d1","modified":1578905288000},{"_id":"themes/archer/docs/develop-guide-en.md","hash":"0bb09c3c9d5f56820cb84e3316f60352b731d70c","modified":1578905288000},{"_id":"themes/archer/docs/develop-guide-zh.md","hash":"effc2bc9e0cecfd228b19283337ff29649ea5985","modified":1578905288000},{"_id":"themes/archer/languages/en.yml","hash":"ad75d3e5f7f5f0463d3077e1b5a26f40938a1faa","modified":1578905288000},{"_id":"themes/archer/languages/default.yml","hash":"d56b6923c70efdef09cd1f0270d7adc9cc338f6b","modified":1578905288000},{"_id":"themes/archer/layout/404.ejs","hash":"879641b1b5e49c43f2e096cad281f7d74df05127","modified":1578905288000},{"_id":"themes/archer/layout/index.ejs","hash":"716ba4a30860e36077dfdfffa02c1cd60301d8a3","modified":1578905288000},{"_id":"themes/archer/layout/about.ejs","hash":"06019d835c0a51fed8aa086d1dfcf368f9921b42","modified":1578905288000},{"_id":"themes/archer/layout/layout.ejs","hash":"08ebd10c1b2bfc11be8f5115a836a98e6c6ba13c","modified":1578905288000},{"_id":"themes/archer/layout/post.ejs","hash":"b61156aff41641a14d5e4e45d9fd776309f2801a","modified":1578905288000},{"_id":"themes/archer/layout/site-meta.ejs","hash":"d866aa1a892d4bfe3368f6dbd0f1baa8c5831947","modified":1578905288000},{"_id":"themes/archer/source/.DS_Store","hash":"7c7eb3a712f76ac51e7786fc218f5bcdeb11424d","modified":1578964878000},{"_id":"themes/archer/source/404.md","hash":"3fb58e3ebd8e0961a3af837ff8e7395ef9092cb4","modified":1578906418000},{"_id":"themes/archer/src/.DS_Store","hash":"72720482c4291a6e91510301a6ae4b67b0b062c8","modified":1578964878000},{"_id":"source/_posts/HTTP协议/qingqiuti.png","hash":"b7b26c845c04013bef1513270b0c279fc93e1f0f","modified":1584009800000},{"_id":"source/_posts/HTTP协议/xiangying.jpg","hash":"11a3601c3b3c30400007d53b6725d652ece9f93f","modified":1584010087000},{"_id":"source/_posts/VueRouter/luyou2.png","hash":"0067a14eabf89250f04ee16755d92821959dbf28","modified":1588771905000},{"_id":"source/_posts/VueRouter/luyou3.png","hash":"a4a767bea7ecd325d7938efe2f187c1574f7539d","modified":1588771905000},{"_id":"source/_posts/css之BFC/float.png","hash":"bc3d6012419c506cd97e17128172e54436377208","modified":1583321083000},{"_id":"source/_posts/css之BFC/bfc.png","hash":"e772b86e17f557dae7eac673b115afafdb3768b2","modified":1583319715000},{"_id":"source/_posts/css之BFC/margin.png","hash":"5844c6e7cb183a9485b20cfb70ab7328fdfb2301","modified":1583321088000},{"_id":"source/_posts/css之BFC/wubfc.png","hash":"20d781a1edf2c4f9e655f98f2d654df0a16dccc6","modified":1583319518000},{"_id":"source/_posts/css盒子模型/ie.jpg","hash":"10836afcaf1bfc8e0c51e6e3f10fe8c158af3913","modified":1583288533000},{"_id":"source/_posts/js栈/duizhan1.webp","hash":"7d52bc8f99fbecf880bbca354f60c8cb1056d769","modified":1587958809000},{"_id":"source/_posts/vue生命周期以及nextTick应用/biaoge.webp","hash":"88aa25471288da771d62ab51ee7c9fd1305c6b46","modified":1580869395000},{"_id":"source/_posts/webpack中module-chunk和bundle的区别是什么/module1.jpg","hash":"532c90fa28b6e87c2b52ad6e7d3ebd7a7691619e","modified":1589873409000},{"_id":"source/_posts/webpack中module-chunk和bundle的区别是什么/module2.jpg","hash":"7a2b222a555cdb0a2ada4d056c80fc0efbbb135b","modified":1589873409000},{"_id":"source/_posts/webpack相关问题/webpack3.png","hash":"59201efb4e50ce55042d7db01bf232848a24c631","modified":1589525166000},{"_id":"source/_posts/webpack相关问题/webpack2.jpeg","hash":"4e28dbc3d1a55251eae8eafa1dff8af610cbea4d","modified":1589525166000},{"_id":"source/_posts/webp在项目中的应用/jianrong.webp","hash":"9fd19fedb37fe15ab8e79ee5968b0489653c0a7b","modified":1580700082000},{"_id":"source/_posts/webp在项目中的应用/liucheng.webp","hash":"29fb994c83bb701f895f149177e04c6f7ea4f450","modified":1580700319000},{"_id":"source/_posts/webp在项目中的应用/taobao.webp","hash":"bbfa44c19551573a9d915babea32a5ac024d4a03","modified":1580700203000},{"_id":"source/_posts/webp在项目中的应用/yasuo.webp","hash":"6919a10f5c95993e136b21c6ff2e990029413a4b","modified":1580699903000},{"_id":"source/_posts/事件循环EventLoop/eventloop1.png","hash":"fed3abd4769f3a247d66922637ee943fbed5a6da","modified":1588217274000},{"_id":"source/_posts/事件循环EventLoop/eventloop2.png","hash":"a33ed65a240c7ffc5d9cd732e37733315f416f8e","modified":1588217274000},{"_id":"source/_posts/事件循环EventLoop/eventloop5.png","hash":"4d2b36ffe8d720062aa37dd5364c0442e87c9b71","modified":1588217274000},{"_id":"source/_posts/事件循环EventLoop/eventloop4.png","hash":"d6d971cf65bbf011bb3430f210794f8a4cfee439","modified":1588217274000},{"_id":"source/_posts/原型链/gouzao.png","hash":"76c59d3f727046806cc72bcefe0e111181ab8519","modified":1584088356000},{"_id":"source/_posts/原型链/yuanxing1.png","hash":"4d30d56367fe9cb2966c1e5ac331bacdff11a951","modified":1584091395000},{"_id":"source/_posts/浏览器渲染原理与过程/liulanqi1.webp","hash":"33f97300e890423d143627be4f168106bdd34e70","modified":1587973703000},{"_id":"source/_posts/浏览器渲染原理与过程/liulanqi2.webp","hash":"cb1d6fce9653a7b4b7f736231bdaa8fd0d3ecf89","modified":1587973703000},{"_id":"source/_posts/浏览器渲染原理与过程/liulanqi4.webp","hash":"82186a2cfc98643591b9d865f15f641f5a7c4b46","modified":1587973703000},{"_id":"source/_posts/浏览器渲染原理与过程/liulanqi3.webp","hash":"66444f9b305059a4b6657438ac0eb0800c8b4fb1","modified":1587973703000},{"_id":"themes/archer/.github/ISSUE_TEMPLATE/-----------bug--help-wanted-or-bug-report-.md","hash":"012bd3afea5565204f75d8c89048ad33b9c2f948","modified":1553725894000},{"_id":"themes/archer/.github/ISSUE_TEMPLATE/-----feature-request-.md","hash":"886fb1252702d46c89536b579d35ce49e53ec54d","modified":1553725894000},{"_id":"themes/archer/.github/ISSUE_TEMPLATE/-----other-issue-.md","hash":"4bf3c8ebef14a81bb55e8e0468d816e83c4133ac","modified":1553725894000},{"_id":"themes/archer/layout/_partial/algolia.ejs","hash":"2f5f9073378f628a9124792b5301c1540bc5a264","modified":1578905288000},{"_id":"themes/archer/layout/_partial/base-background-image.ejs","hash":"82203d9a1c6e16ef2d37b8b587f56bf6d16edaf2","modified":1578905288000},{"_id":"themes/archer/layout/_partial/base-head.ejs","hash":"f2e8d4dfd11d879491a4b10f74f8c886cd392240","modified":1578905288000},{"_id":"themes/archer/layout/_partial/base-footer.ejs","hash":"a9f0f831a7c48553b109dbada60c797aa03b43d8","modified":1578905939000},{"_id":"themes/archer/layout/_partial/base-header.ejs","hash":"12e28693dc53cab5f6fd389f15ea0f811c9c37e9","modified":1578905288000},{"_id":"themes/archer/layout/_partial/base-profile.ejs","hash":"743d97452d4ac358e631c43c9c2120aafdfd3e24","modified":1578905288000},{"_id":"themes/archer/layout/_partial/base-social.ejs","hash":"2d068432031b3bebf9438c775370a2d1b4492d6b","modified":1578905288000},{"_id":"themes/archer/layout/_partial/base-preload-polyfill.ejs","hash":"2aea84cb43f4479131620b3c3dfd7cebe9be36ba","modified":1578905288000},{"_id":"themes/archer/layout/_partial/base-title-tags.ejs","hash":"418559ab11726f69621c3a58cd21903adff1e48e","modified":1578905288000},{"_id":"themes/archer/layout/_partial/intro-height.ejs","hash":"cd0d34a811dc4666980d57c00d70dd82bd5450eb","modified":1578905288000},{"_id":"themes/archer/source/assets/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1578905288000},{"_id":"themes/archer/source/assets/example_qr.png","hash":"cce20432c34875f4d9c6df927ede0fc0f00bb194","modified":1578905288000},{"_id":"themes/archer/source/assets/favicon.ico","hash":"25d327edb1a95957606731ca725ad7a41aa86832","modified":1578908703000},{"_id":"themes/archer/source/assets/loading.svg","hash":"45be17d07697d604d8981890eb21e308530c7a38","modified":1578905288000},{"_id":"themes/archer/source/avatar/Misaka.jpg","hash":"74a0372523f98dfbba992bf80642e160d04dc9b1","modified":1578905288000},{"_id":"themes/archer/source/css/mobile.css","hash":"51d7b5cf26c8f82a3daad4bc55518673fdf281f5","modified":1578905288000},{"_id":"themes/archer/source/css/style.css","hash":"5d5e869db0c62957d59c6865baaecd1428c51804","modified":1578905288000},{"_id":"themes/archer/source/font/Source Sans Pro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1578905288000},{"_id":"themes/archer/source/font/Source Sans Pro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1578905288000},{"_id":"themes/archer/source/lib/webfontloader.min.js","hash":"bc6ffe9c0d8b3285564619a445c6ca575eb9d0f5","modified":1578905288000},{"_id":"themes/archer/src/js/browser.js","hash":"ce061db99db5b880db0ddb768246352ca885b13c","modified":1578905288000},{"_id":"themes/archer/source/scripts/search.js","hash":"d5f739e261e8ce74f993c6157b248663bda122bf","modified":1578905288000},{"_id":"themes/archer/source/scripts/share.js","hash":"bb5bb37ce7f47f8c084b232df3e5fe2378d7ca01","modified":1578905288000},{"_id":"themes/archer/src/js/initSidebar.js","hash":"b25615ff254913db83e2a20263d445f35083843b","modified":1578905288000},{"_id":"themes/archer/src/js/fancybox.js","hash":"0daf0e83deca055102268e3bd95cb1962acc2264","modified":1578905288000},{"_id":"themes/archer/source/scripts/main.js","hash":"e89a9651131684204118fa74bd19cb781d76a372","modified":1578905288000},{"_id":"themes/archer/src/js/scroll.js","hash":"aa2315a80daaa183a7e462c7e879ff9d2f050933","modified":1578905288000},{"_id":"themes/archer/src/js/mobile.js","hash":"228a68d851517b5e47d2132f1d499cb812a64171","modified":1578905288000},{"_id":"themes/archer/src/js/main.js","hash":"e1a48d5822326792e38d44efee86e01473549eba","modified":1578905288000},{"_id":"themes/archer/src/js/share.js","hash":"1314b19a852e291e35d6809f7f58652d3e7c524c","modified":1578905288000},{"_id":"themes/archer/src/js/init.js","hash":"346c6ef75ae85e4350c1b0811985172fdaa0d3a5","modified":1578905288000},{"_id":"themes/archer/src/js/toc.js","hash":"b3482031e4c8728535d480bfaec76229469e3aba","modified":1578905288000},{"_id":"themes/archer/src/js/search.js","hash":"2e59ac745da7c22801d9029cf9904a4fc3c384f1","modified":1578905288000},{"_id":"themes/archer/src/js/tag.js","hash":"e0f0a914c02922e42977d78dc4993b3855167cd8","modified":1578905288000},{"_id":"themes/archer/src/js/util.js","hash":"27de6446892bcf399430dd5776df0b8759ca0eea","modified":1578905288000},{"_id":"themes/archer/src/scss/_mixin.scss","hash":"e7deb20a16868ae9d3e35ba3c5693de71fdf6999","modified":1578905288000},{"_id":"themes/archer/src/scss/_common.scss","hash":"dedc313b082e0a16daf87213badd21b13be11af8","modified":1578905288000},{"_id":"themes/archer/src/scss/_normalize.scss","hash":"a2dbeb38ad08bb8975856d75954cc697bf8e5ff7","modified":1578905288000},{"_id":"themes/archer/src/js/sidebar.js","hash":"68d5fe0ee5e86df810d304e5efe11e5e1fddc46d","modified":1578905288000},{"_id":"themes/archer/src/scss/style.scss","hash":"78e31370d45089b97fa91929345f1a29f2e6a0a2","modified":1578905288000},{"_id":"themes/archer/src/scss/mobile.scss","hash":"aadc2fbf37fefc2ad391d8172d5b61817f9db0c5","modified":1578905288000},{"_id":"themes/archer/src/scss/_variables.scss","hash":"136e5d990c4f8eadf6cabdfa5a053941e90bcd20","modified":1579071861000},{"_id":"source/_posts/HTTP协议/qingqiudemo.jpg","hash":"eb7d5a99e337010949017c5771d3d451be607f05","modified":1584009799000},{"_id":"source/_posts/VueRouter/luyou1.png","hash":"30726838040c41ad883108b714bd1e115a208494","modified":1588771905000},{"_id":"source/_posts/css盒子模型/biaozhun.jpg","hash":"2e38705c1f2bbf04182ce788a33f276825529929","modified":1583288533000},{"_id":"source/_posts/webpack动态懒加载/webplan1.png","hash":"8adad7c388cb326d38cdf08d3537627628c6cbf5","modified":1589797406000},{"_id":"source/_posts/webpack动态懒加载/webplan2.png","hash":"67ef5de1842b915dd0f57ab8ec7b2a57b9b0f5dc","modified":1589797406000},{"_id":"source/_posts/webpack动态懒加载/webplan3.png","hash":"712e28d8e797db0497fddc56bc842c32793ef370","modified":1589797406000},{"_id":"source/_posts/webpack相关问题/webpack1.jpeg","hash":"1e4b641e8f1841b2a2cc8511367620cab4341703","modified":1589525166000},{"_id":"source/_posts/事件循环EventLoop/eventloop3.png","hash":"25525ac83038fdac33412beb110205b17b8f90e6","modified":1588217274000},{"_id":"themes/archer/layout/_partial/comment/custom.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1578905288000},{"_id":"themes/archer/source/avatar/mine.jpeg","hash":"1b4eccdbeb9a87e66ddad3569b16e0b3b9bbbd5d","modified":1578908374000},{"_id":"themes/archer/source/font/Oswald-Regular.ttf","hash":"965d729546a43a8490ad4cf33c25ac475682100c","modified":1578905288000},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff","hash":"12eef75e1ad3eca9dae42b65505010ce4464a315","modified":1578905288000},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff2","hash":"f5991289ec17884cb641da0646d278d36702a190","modified":1578905288000},{"_id":"themes/archer/source/intro/404-bg.jpg","hash":"3afb5bb26f4ff0bd0e0a28df955c8aa7d746d3c5","modified":1578905288000},{"_id":"themes/archer/source/lib/jquery.min.js","hash":"0dc32db4aa9c5f03f3b38c47d883dbd4fed13aae","modified":1578905288000},{"_id":"source/_posts/vue生命周期以及nextTick应用/shengming.webp","hash":"ceb669b5a12f77fdb6207e0382a3d629def72680","modified":1580869026000},{"_id":"themes/archer/layout/_partial/comment/changyan.ejs","hash":"7691642fb9375607e0ac988a7420999e242cb2c9","modified":1578905288000},{"_id":"themes/archer/layout/_partial/comment/disqus.ejs","hash":"cadd97820a23d01d8b7e2f19a86e5290cef5a8a6","modified":1578905288000},{"_id":"themes/archer/layout/_partial/comment/valine.ejs","hash":"2154360e330dab94540e168e9d301c7b7091968e","modified":1578905288000},{"_id":"themes/archer/layout/_partial/comment/livere.ejs","hash":"b27469f19f35ec2037c7bce736a12e9dfb5e360b","modified":1578905288000},{"_id":"themes/archer/layout/_partial/comment/gitment.ejs","hash":"794647a8a4ac9e1d01d74c07717175a141b1e01c","modified":1578905288000},{"_id":"themes/archer/layout/_partial/comment/youyan.ejs","hash":"790d76f2667377db78a7d04bad8d629e47e7aab0","modified":1578905288000},{"_id":"themes/archer/layout/_partial/critical-css/critical-style.ejs","hash":"c03e16a7741908c207bf58363dcd1349cb639ef8","modified":1578905288000},{"_id":"themes/archer/layout/_partial/script/font-loader.ejs","hash":"291cc0a4a444a93b93c32e2c39383c70e36e46de","modified":1578905288000},{"_id":"themes/archer/layout/_partial/sidebar/base-sidebar.ejs","hash":"2d38af7cb5aabc0af99de239bd180c516ec4c56c","modified":1578905288000},{"_id":"themes/archer/layout/_partial/sidebar/sidebar-archives.ejs","hash":"daa78b17a773bca569f1c8ca2c916495ca138da6","modified":1578905288000},{"_id":"themes/archer/layout/_partial/sidebar/sidebar-categories.ejs","hash":"147214469c4909eb94943599883f9fa0f3cc090d","modified":1578905288000},{"_id":"themes/archer/layout/_partial/sidebar/sidebar-tags.ejs","hash":"d6e1a192cac5dcf365ce1a52df4f23feafeeb849","modified":1578905288000},{"_id":"themes/archer/src/scss/_partial/_404.scss","hash":"a2b56f441a9a44d7f5b9b41eaa8136321328d7e9","modified":1578905288000},{"_id":"themes/archer/src/scss/_partial/_algolia.scss","hash":"c679578d2feb0bd7d3f80c2f693ba58cbca4428b","modified":1578905288000},{"_id":"themes/archer/src/scss/_partial/_index-page.scss","hash":"fa993cf0bbe0086cd8ec3d9a639b2d5b28ccfa8e","modified":1578905288000},{"_id":"themes/archer/src/scss/_partial/_post-page.scss","hash":"7c557844850d53cc4fc36aaf6d59847d8f238947","modified":1578905288000},{"_id":"themes/archer/package-lock.json","hash":"89a3b67d32f6916cdc21d590d87e43d8a44be8c3","modified":1553725894000},{"_id":"source/_posts/CSRF和XSS/csrf.png","hash":"9082e53767d90d9e3a3f4c68124f5e40823d923d","modified":1587800571000},{"_id":"themes/archer/docs/snap.png","hash":"0b2a8bf016f6eed576abfdcdb7dcf8de51c12562","modified":1578905288000},{"_id":"themes/archer/source/intro/post-bg.jpg","hash":"525fafb2238c27754d8fa751f143ff1de9b8482d","modified":1578905288000},{"_id":"themes/archer/src/scss/_partial/_partial/_footer.scss","hash":"726c543ee066e0b3222b236d9b4ef0109c0bdddf","modified":1578905288000},{"_id":"themes/archer/src/scss/_partial/_partial/_intro.scss","hash":"a1569f39eccd64a12425d81b794c53df126a4d87","modified":1578905288000},{"_id":"themes/archer/src/scss/_partial/_partial/_header.scss","hash":"77003ff22b1a10fae2d2768938277959b3f93a72","modified":1578905288000},{"_id":"themes/archer/src/scss/_partial/_partial/_paginator.scss","hash":"67c2e697a5fbb3b8006cf358ea45eb7f75b496f8","modified":1578905288000},{"_id":"themes/archer/src/scss/_partial/_partial/_profile.scss","hash":"0c986b52ce9083f08c37c5c9b5de045ac5e1d2fa","modified":1578905288000},{"_id":"themes/archer/src/scss/_partial/_partial/_scrollbar.scss","hash":"f2514031f9d7e4ed4a126694e78618ce6ff3a574","modified":1578905288000},{"_id":"themes/archer/src/scss/_partial/_post/_code.scss","hash":"9c9a4e470da8732c9a3be3d5ce0d2f80f53714fe","modified":1578905288000},{"_id":"themes/archer/src/scss/_partial/_sidebar/_sidebar-archive.scss","hash":"14bc42292873880c61b5fa9f47ee9d2e08d46871","modified":1578905288000},{"_id":"themes/archer/src/scss/_partial/_sidebar/_sidebar-tags.scss","hash":"9ab6f96d0df0c4ad4c72e2515fa2599d487d8f1a","modified":1578905288000},{"_id":"themes/archer/src/scss/_partial/_sidebar/_sidebar.scss","hash":"981a94978535769cb51c29e12b627f83c6fcedc5","modified":1578905288000},{"_id":"source/_posts/页面性能优化/youhua1.png","hash":"d5e4fb7eeb64480c51660d2dce6a9ccf3f36cc28","modified":1588600938000},{"_id":"source/_posts/原型链/yuanxing.png","hash":"0003715c80652574deba4378b28089731a1f1898","modified":1584087593000},{"_id":"themes/archer/source/intro/about-bg.jpg","hash":"ab388276822417cc4e703312c14e20280ec783b3","modified":1578905288000},{"_id":"themes/archer/source/intro/index-bg.jpg","hash":"96b52e177b8bc53e64ec6ee1e10b2b6a4e13083b","modified":1578905288000},{"_id":"public/test.js","hash":"a3cee6bbe056a6c447892a8f06c82674982c68e5","modified":1592184596973},{"_id":"public/content.json","hash":"eee106b8450f0a232a9940f25be6aac9f8e22fb7","modified":1592184596973},{"_id":"public/404.html","hash":"740471e084aa4ab50d8487aff76910e50a64026d","modified":1592184596973},{"_id":"public/test.html","hash":"2a362fa69f4bedfef935f8c9abd2a9ad67e0d20f","modified":1592184596973},{"_id":"public/about/index.html","hash":"f10928cd93309baffb3ae5b0feda70341647faf5","modified":1592184596973},{"_id":"public/2020/05/30/手撕代码/index.html","hash":"6be810076d99beb5fa1e1221d9e99db70f7e163f","modified":1592184596973},{"_id":"public/2020/05/21/实现call/index.html","hash":"ec9dd4b5b5082d2df1acae4f23db12ff5d5b5c03","modified":1592184596973},{"_id":"public/2020/05/20/call、apply、bind/index.html","hash":"458cd02d9b58006ba57821e4baed224542f8b8aa","modified":1592184596973},{"_id":"public/2020/05/14/如何实现一个深拷贝/index.html","hash":"9090a3bce79a060fc767386b58a349d11e926ae1","modified":1592184596973},{"_id":"public/2020/05/11/AMD、CMD、CommonJS、ES6Module的区别/index.html","hash":"98cdf160d3b7e10fc43ac875b66828d53a29d575","modified":1592184596973},{"_id":"public/2020/05/07/算法高频问题/index.html","hash":"81f0cb3a86a67af3fc7402d6cf67a67eddd6783c","modified":1592184596973},{"_id":"public/2020/05/03/tree-shaking/index.html","hash":"4ccf8a5245a84c80fda9df5d39d0d508698708ec","modified":1592184596973},{"_id":"public/2020/05/01/js柯里化/index.html","hash":"4297448d42e8f4f1889d692f6317655635677109","modified":1592184596973},{"_id":"public/2020/04/30/webpack中module-chunk和bundle的区别是什么/index.html","hash":"6c0eee562262f9ba03c158eeb9bea1fd6f5e0e1d","modified":1592184596973},{"_id":"public/2020/04/24/webpack动态懒加载/index.html","hash":"4395f09d89d25a4341c076fcc47bfcc508f0a5e3","modified":1592184596973},{"_id":"public/2020/04/17/webpack配置/index.html","hash":"409984bbd190d59b3793b5b2caa799bafa309c9c","modified":1592184596973},{"_id":"public/2020/04/11/webpack相关问题/index.html","hash":"03d81c17ad3c261b38557d1ba3512d8649bb5e87","modified":1592184596973},{"_id":"public/2020/04/02/ES6中的Proxy、Reflect以及Vue3-0中的应用原理/index.html","hash":"ad042d4390b25f5e2ecc7d5bb02c52362e523baa","modified":1592184596973},{"_id":"public/2020/03/22/路由原理/index.html","hash":"05aa5389ccd9f2d7a1f177d3d148aca2471d55f5","modified":1592184596973},{"_id":"public/2020/03/11/Vue组件渲染过程/index.html","hash":"8f0df89c3f3f6b70e713bd9e51e343f241f39f70","modified":1592184596973},{"_id":"public/2020/02/28/Vue模板编译/index.html","hash":"8c74e4cd68f14a3f342fda136251dda4c1f45f05","modified":1592184596973},{"_id":"public/2020/02/12/Vue虚拟DOM/index.html","hash":"8947b52dcf58d7068047dc8e35e8ceda8393687d","modified":1592184596973},{"_id":"public/2020/01/23/Vue的响应式/index.html","hash":"80ff8f6025216a1e083ca2f068cec50b85309298","modified":1592184596973},{"_id":"public/2020/01/12/Vue和MVVM/index.html","hash":"b0554df59f8aee6c234e3d2f919f2dbce613bb50","modified":1592184596973},{"_id":"public/2020/01/01/VueRouter/index.html","hash":"7a3c036bc73f8a13320536b5ab2ede684a71c134","modified":1592184596973},{"_id":"public/2019/12/06/Vuex/index.html","hash":"989cdbf4fb6f990986e8078ae64ef6540e9f6870","modified":1592184596973},{"_id":"public/2019/11/21/Vue组件的高级特性/index.html","hash":"576e2f1848ab689044d07e539fb2138619a6d5c2","modified":1592184596973},{"_id":"public/2019/11/11/Vue组件通讯/index.html","hash":"fdd4e26151c7f97cf1c1b6f4b113415ea471cbe7","modified":1592184596973},{"_id":"public/2019/11/01/Vue基础二/index.html","hash":"df91416009c9fd363ccdbdd0a968d014e0896f79","modified":1592184596973},{"_id":"public/2019/10/21/前端错误监控/index.html","hash":"ce0c22913946c62adb80a2a7d61c115dd1d5bd6c","modified":1592184596973},{"_id":"public/2019/10/20/Vue基础一/index.html","hash":"f4ef11b16cab7c4c518b85901ca61895f5dc25d7","modified":1592184596973},{"_id":"public/2019/10/11/页面性能优化/index.html","hash":"e38f5f1b086e9291cc06b6702fd11e123f49e235","modified":1592184596973},{"_id":"public/2019/10/07/事件循环EventLoop/index.html","hash":"fd81e1cbc1b79ccd44636fb5ac5c06447141258c","modified":1592184596973},{"_id":"public/2019/09/27/浏览器渲染原理与过程/index.html","hash":"d70580093949577226dddd8a1b046340561f2d1c","modified":1592184596973},{"_id":"public/2019/09/03/CSRF和XSS/index.html","hash":"5d81eb407ac8d7cd5556b8e4244dd2769e8c1a77","modified":1592184596973},{"_id":"public/2019/08/22/通信相关问题/index.html","hash":"2617ac8e129e5a66121be3e543b8ab8e73b31479","modified":1592184596973},{"_id":"public/2019/08/19/js栈/index.html","hash":"4fbba47b6eb173d94091828eca3e1b30ef861e25","modified":1592184596973},{"_id":"public/2019/07/25/js的面向对象/index.html","hash":"2b741522929c47364d6ea6a00c3588a8c2190fb0","modified":1592184596973},{"_id":"public/2019/07/24/原型链/index.html","hash":"0d949634dc4e379a4bf0a953e3a237bf7e7c7eef","modified":1592184596973},{"_id":"public/2019/07/02/HTTP协议/index.html","hash":"70f62ab01b8945e59d94309de6451f3c61be15de","modified":1592184596973},{"_id":"public/2019/06/25/Event事件常见应用/index.html","hash":"fe272475bc1bb49189660468f39a8d86b638fffe","modified":1592184596973},{"_id":"public/2019/06/11/DOM事件流/index.html","hash":"77bd582f5519983482bdbc4fc105a1c97d5e5a93","modified":1592184596973},{"_id":"public/2019/06/01/DOM级别与DOM事件/index.html","hash":"1f219a96114eb40d502388d5df592c9ae6de6dfc","modified":1592184596973},{"_id":"public/2019/05/03/css之BFC/index.html","hash":"1f0b09af2980cdb4d0ca0efa9621fa3ccc77cd8d","modified":1592184596973},{"_id":"public/2019/05/01/css盒子模型/index.html","hash":"eb3eb209d6960f5073100c166d69bc082de1be2e","modified":1592184596973},{"_id":"public/2019/04/19/页面布局/index.html","hash":"3aa33d37c648503633eba10f53bfb17f83b1e17d","modified":1592184596973},{"_id":"public/2019/04/07/函数的防抖和节流/index.html","hash":"5ed28d3b1fa1599178e8fa7d2c21f07370463c3f","modified":1592184596973},{"_id":"public/2019/04/01/vue生命周期以及nextTick应用/index.html","hash":"95e9439962ee4bc704090bdab72c2751bfb2e625","modified":1592184596973},{"_id":"public/2019/03/22/webp在项目中的应用/index.html","hash":"886d04b09a54702ecafe2f081d90880136534faf","modified":1592184596973},{"_id":"public/2019/03/02/meta标签使用总结/index.html","hash":"44db3f096faff02e69bcb51208d38d77811bd6b8","modified":1592184596973},{"_id":"public/2019/02/21/前端性能优化——DNS预解析/index.html","hash":"0ab19a35c68a61a65f69c8f14352e38611edb294","modified":1592184596973},{"_id":"public/2019/02/17/promose-all和promise-race/index.html","hash":"9361bfda196e590d0bab357427ae198a806dbaf8","modified":1592184596973},{"_id":"public/2019/02/05/promise原理和实现/index.html","hash":"0dc25cdb6ce52adc272f76963fa478679dce4fbb","modified":1592184596973},{"_id":"public/2019/01/14/初尝hexo/index.html","hash":"65a855a6e0b75b2d238713e27beaadb504b388bb","modified":1592184596973},{"_id":"public/archives/index.html","hash":"7d072d6516f0532d7a5bc19ce8a5b2cc2badd47e","modified":1592184596973},{"_id":"public/archives/page/2/index.html","hash":"ca5c389abaab2f02960cfaebc2457e70ce9666d5","modified":1592184596973},{"_id":"public/archives/page/3/index.html","hash":"ca8d37d1b7ce4a0e692608162d6c8983d11e24b2","modified":1592184596973},{"_id":"public/archives/page/4/index.html","hash":"b1ad1a5c7e1fdbebca6be964b62b6d334b1a0209","modified":1592184596973},{"_id":"public/archives/page/5/index.html","hash":"6e95c85b8c2be4c8b05a95daa0083d45aaf81133","modified":1592184596973},{"_id":"public/archives/2019/index.html","hash":"987df4a703cf0773de674408732437a391bcd41e","modified":1592184596973},{"_id":"public/archives/2019/page/2/index.html","hash":"c7cb61478d20caa97525941e62245fadb13d476f","modified":1592184596973},{"_id":"public/archives/2019/page/3/index.html","hash":"7aa310d52904d093c5a44633e87cbaee1e060a32","modified":1592184596973},{"_id":"public/archives/2019/01/index.html","hash":"462278cd7a8fce5d6ae287a0223e13dac06a3d02","modified":1592184596973},{"_id":"public/archives/2019/02/index.html","hash":"8444d0a6d1d911996c863c1465b6e04ba790b855","modified":1592184596973},{"_id":"public/archives/2019/03/index.html","hash":"ef4764080eef9e91454eb51b81275336ee884b6c","modified":1592184596973},{"_id":"public/archives/2019/04/index.html","hash":"8748ea27dc064cd227b925f66d79020b2610af11","modified":1592184596973},{"_id":"public/archives/2019/05/index.html","hash":"873039a3276de30c48dbad41c7beab48d7a353a5","modified":1592184596973},{"_id":"public/archives/2019/06/index.html","hash":"68c4be922c10035dbe8bb48f519736f721565cba","modified":1592184596973},{"_id":"public/archives/2019/07/index.html","hash":"c3768631fc932d2088e7e47c132a6d059e6ff97c","modified":1592184596973},{"_id":"public/archives/2019/08/index.html","hash":"f46a257caf1225656b3d9bd7edf51ba6a509b975","modified":1592184596973},{"_id":"public/archives/2019/09/index.html","hash":"80bc22425fb7f2b767240af7b50e61594559cb8a","modified":1592184596973},{"_id":"public/archives/2019/10/index.html","hash":"e4feda3f45cb4b53941e5874dbd0f9395c2692ec","modified":1592184596973},{"_id":"public/archives/2019/11/index.html","hash":"0080f3ef4d2af3f6ce8dd7aae5cbe742b3ae1b70","modified":1592184596973},{"_id":"public/archives/2019/12/index.html","hash":"23523ce4d23a0ee4932ea201c327e8e5bca5e62a","modified":1592184596973},{"_id":"public/archives/2020/index.html","hash":"4ff05e908cff5a5ec8aa9ff7349de7e7d28f1cfe","modified":1592184596973},{"_id":"public/archives/2020/page/2/index.html","hash":"257db7489637ad4170feb645c2dc765ffcfc272d","modified":1592184596973},{"_id":"public/archives/2020/01/index.html","hash":"de02d096fd30d15959907a5d625c1222576a8e45","modified":1592184596973},{"_id":"public/archives/2020/02/index.html","hash":"6ddba1ccd5bfadf632a460f8f674dccfbc04f207","modified":1592184596973},{"_id":"public/archives/2020/03/index.html","hash":"677c32ee9b1de2e98e70d70b410cbba6913cb7ab","modified":1592184596973},{"_id":"public/archives/2020/04/index.html","hash":"554c450f3022fa35eda52ae8d9d02e1588a093b3","modified":1592184596973},{"_id":"public/archives/2020/05/index.html","hash":"e7ea92f3120bb824fe4da352436659667a40a392","modified":1592184596973},{"_id":"public/index.html","hash":"468c6b764307596c6b79a10fb903909613a33ca1","modified":1592184596973},{"_id":"public/page/2/index.html","hash":"5cfd1fd98627b4046069159d1c1ef2e29e22def8","modified":1592184596973},{"_id":"public/page/3/index.html","hash":"e46f35185fef270c2c286109960a8844f261b593","modified":1592184596973},{"_id":"public/page/4/index.html","hash":"9bd5602b24b1553757f9a3023d018a49a18bc556","modified":1592184596973},{"_id":"public/page/5/index.html","hash":"8708de413f4e04cb1b63f42f4d979377e57df3bc","modified":1592184596973},{"_id":"public/tags/javascript/index.html","hash":"3757225480c964fb25f6f970c357bf7ba283e774","modified":1592184596973},{"_id":"public/tags/网络安全/index.html","hash":"9a2f7ca68417523444dc577475593898efd00a00","modified":1592184596973},{"_id":"public/tags/html/index.html","hash":"7597d3f3af44f7b8551689cdb705ccbea8fe0ad3","modified":1592184596973},{"_id":"public/tags/Vue/index.html","hash":"65e0f87ddc4bec260043367a4322ca493a964d96","modified":1592184596973},{"_id":"public/tags/Vue/page/2/index.html","hash":"6dd1557d48919bdb0ba0abd270c0c3ea6e6c73fa","modified":1592184596973},{"_id":"public/tags/http/index.html","hash":"50996f1d89b3ad62b1daebdb0a2819d38815068f","modified":1592184596973},{"_id":"public/tags/css/index.html","hash":"873039a3276de30c48dbad41c7beab48d7a353a5","modified":1592184596973},{"_id":"public/tags/webpack/index.html","hash":"189bf15e2bca5283ae8282ffc17743c9ebf9ad74","modified":1592184596973},{"_id":"public/tags/Promise/index.html","hash":"567696a3fc076eb5960b7afc39fe0abe362fd2bf","modified":1592184596973},{"_id":"public/tags/前端性能优化/index.html","hash":"a934206858b188918e0f0b60bedc75e261aec155","modified":1592184596973},{"_id":"public/tags/hexo/index.html","hash":"462278cd7a8fce5d6ae287a0223e13dac06a3d02","modified":1592184596973},{"_id":"public/tags/面试/index.html","hash":"5e3837cd84d1f5de4146e95fcec4d439197c8eb2","modified":1592184596973},{"_id":"public/tags/浏览器/index.html","hash":"a03d6057ba90e09b5034a4c7f674eff03f48dad7","modified":1592184596973},{"_id":"public/tags/通信/index.html","hash":"fea404d0a8fd5783c65a1847c9c869fe028646ec","modified":1592184596973},{"_id":"public/assets/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1592184596973},{"_id":"public/assets/example_qr.png","hash":"cce20432c34875f4d9c6df927ede0fc0f00bb194","modified":1592184596973},{"_id":"public/assets/favicon.ico","hash":"25d327edb1a95957606731ca725ad7a41aa86832","modified":1592184596973},{"_id":"public/assets/loading.svg","hash":"45be17d07697d604d8981890eb21e308530c7a38","modified":1592184596973},{"_id":"public/avatar/Misaka.jpg","hash":"74a0372523f98dfbba992bf80642e160d04dc9b1","modified":1592184596973},{"_id":"public/font/Source Sans Pro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1592184596973},{"_id":"public/font/Source Sans Pro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1592184596973},{"_id":"public/2019/08/19/js栈/duizhan1.webp","hash":"7d52bc8f99fbecf880bbca354f60c8cb1056d769","modified":1592184596973},{"_id":"public/2019/04/01/vue生命周期以及nextTick应用/biaoge.webp","hash":"88aa25471288da771d62ab51ee7c9fd1305c6b46","modified":1592184596973},{"_id":"public/2020/04/30/webpack中module-chunk和bundle的区别是什么/module1.jpg","hash":"532c90fa28b6e87c2b52ad6e7d3ebd7a7691619e","modified":1592184596973},{"_id":"public/2020/04/30/webpack中module-chunk和bundle的区别是什么/module2.jpg","hash":"7a2b222a555cdb0a2ada4d056c80fc0efbbb135b","modified":1592184596973},{"_id":"public/2020/01/01/VueRouter/luyou2.png","hash":"0067a14eabf89250f04ee16755d92821959dbf28","modified":1592184596973},{"_id":"public/2019/07/02/HTTP协议/qingqiuti.png","hash":"b7b26c845c04013bef1513270b0c279fc93e1f0f","modified":1592184596973},{"_id":"public/2019/07/02/HTTP协议/xiangying.jpg","hash":"11a3601c3b3c30400007d53b6725d652ece9f93f","modified":1592184596973},{"_id":"public/2020/04/11/webpack相关问题/webpack3.png","hash":"59201efb4e50ce55042d7db01bf232848a24c631","modified":1592184596973},{"_id":"public/2019/07/24/原型链/gouzao.png","hash":"76c59d3f727046806cc72bcefe0e111181ab8519","modified":1592184596973},{"_id":"public/2019/07/24/原型链/yuanxing1.png","hash":"4d30d56367fe9cb2966c1e5ac331bacdff11a951","modified":1592184596973},{"_id":"public/2019/05/03/css之BFC/bfc.png","hash":"e772b86e17f557dae7eac673b115afafdb3768b2","modified":1592184596973},{"_id":"public/2019/05/03/css之BFC/float.png","hash":"bc3d6012419c506cd97e17128172e54436377208","modified":1592184596973},{"_id":"public/2019/05/03/css之BFC/margin.png","hash":"5844c6e7cb183a9485b20cfb70ab7328fdfb2301","modified":1592184596973},{"_id":"public/2019/05/03/css之BFC/wubfc.png","hash":"20d781a1edf2c4f9e655f98f2d654df0a16dccc6","modified":1592184596973},{"_id":"public/2019/03/22/webp在项目中的应用/jianrong.webp","hash":"9fd19fedb37fe15ab8e79ee5968b0489653c0a7b","modified":1592184596973},{"_id":"public/2019/03/22/webp在项目中的应用/liucheng.webp","hash":"29fb994c83bb701f895f149177e04c6f7ea4f450","modified":1592184596973},{"_id":"public/2019/03/22/webp在项目中的应用/yasuo.webp","hash":"6919a10f5c95993e136b21c6ff2e990029413a4b","modified":1592184596973},{"_id":"public/2019/03/22/webp在项目中的应用/taobao.webp","hash":"bbfa44c19551573a9d915babea32a5ac024d4a03","modified":1592184596973},{"_id":"public/2019/09/27/浏览器渲染原理与过程/liulanqi1.webp","hash":"33f97300e890423d143627be4f168106bdd34e70","modified":1592184596973},{"_id":"public/2019/09/27/浏览器渲染原理与过程/liulanqi2.webp","hash":"cb1d6fce9653a7b4b7f736231bdaa8fd0d3ecf89","modified":1592184596973},{"_id":"public/2019/09/27/浏览器渲染原理与过程/liulanqi3.webp","hash":"66444f9b305059a4b6657438ac0eb0800c8b4fb1","modified":1592184596973},{"_id":"public/2019/09/27/浏览器渲染原理与过程/liulanqi4.webp","hash":"82186a2cfc98643591b9d865f15f641f5a7c4b46","modified":1592184596973},{"_id":"public/2019/10/07/事件循环EventLoop/eventloop1.png","hash":"fed3abd4769f3a247d66922637ee943fbed5a6da","modified":1592184596973},{"_id":"public/2019/10/07/事件循环EventLoop/eventloop2.png","hash":"a33ed65a240c7ffc5d9cd732e37733315f416f8e","modified":1592184596973},{"_id":"public/2019/10/07/事件循环EventLoop/eventloop4.png","hash":"d6d971cf65bbf011bb3430f210794f8a4cfee439","modified":1592184596973},{"_id":"public/2019/10/07/事件循环EventLoop/eventloop5.png","hash":"4d2b36ffe8d720062aa37dd5364c0442e87c9b71","modified":1592184596973},{"_id":"public/avatar/mine.jpeg","hash":"1b4eccdbeb9a87e66ddad3569b16e0b3b9bbbd5d","modified":1592184596973},{"_id":"public/font/SourceCodePro-Regular.ttf.woff2","hash":"f5991289ec17884cb641da0646d278d36702a190","modified":1592184596973},{"_id":"public/intro/404-bg.jpg","hash":"3afb5bb26f4ff0bd0e0a28df955c8aa7d746d3c5","modified":1592184596973},{"_id":"public/2019/05/01/css盒子模型/ie.jpg","hash":"10836afcaf1bfc8e0c51e6e3f10fe8c158af3913","modified":1592184596973},{"_id":"public/2020/01/01/VueRouter/luyou1.png","hash":"30726838040c41ad883108b714bd1e115a208494","modified":1592184596973},{"_id":"public/2020/01/01/VueRouter/luyou3.png","hash":"a4a767bea7ecd325d7938efe2f187c1574f7539d","modified":1592184596973},{"_id":"public/2019/07/02/HTTP协议/qingqiudemo.jpg","hash":"eb7d5a99e337010949017c5771d3d451be607f05","modified":1592184596973},{"_id":"public/2020/04/11/webpack相关问题/webpack1.jpeg","hash":"1e4b641e8f1841b2a2cc8511367620cab4341703","modified":1592184596973},{"_id":"public/2020/04/11/webpack相关问题/webpack2.jpeg","hash":"4e28dbc3d1a55251eae8eafa1dff8af610cbea4d","modified":1592184596973},{"_id":"public/2020/04/24/webpack动态懒加载/webplan1.png","hash":"8adad7c388cb326d38cdf08d3537627628c6cbf5","modified":1592184596973},{"_id":"public/2020/04/24/webpack动态懒加载/webplan2.png","hash":"67ef5de1842b915dd0f57ab8ec7b2a57b9b0f5dc","modified":1592184596973},{"_id":"public/2020/04/24/webpack动态懒加载/webplan3.png","hash":"712e28d8e797db0497fddc56bc842c32793ef370","modified":1592184596973},{"_id":"public/2019/10/07/事件循环EventLoop/eventloop3.png","hash":"25525ac83038fdac33412beb110205b17b8f90e6","modified":1592184596973},{"_id":"public/css/mobile.css","hash":"51d7b5cf26c8f82a3daad4bc55518673fdf281f5","modified":1592184596973},{"_id":"public/lib/webfontloader.min.js","hash":"bc6ffe9c0d8b3285564619a445c6ca575eb9d0f5","modified":1592184596973},{"_id":"public/scripts/search.js","hash":"d5f739e261e8ce74f993c6157b248663bda122bf","modified":1592184596973},{"_id":"public/css/style.css","hash":"5d5e869db0c62957d59c6865baaecd1428c51804","modified":1592184596973},{"_id":"public/scripts/main.js","hash":"e89a9651131684204118fa74bd19cb781d76a372","modified":1592184596973},{"_id":"public/scripts/share.js","hash":"bb5bb37ce7f47f8c084b232df3e5fe2378d7ca01","modified":1592184596973},{"_id":"public/lib/jquery.min.js","hash":"0dc32db4aa9c5f03f3b38c47d883dbd4fed13aae","modified":1592184596973},{"_id":"public/font/SourceCodePro-Regular.ttf.woff","hash":"12eef75e1ad3eca9dae42b65505010ce4464a315","modified":1592184596973},{"_id":"public/font/Oswald-Regular.ttf","hash":"965d729546a43a8490ad4cf33c25ac475682100c","modified":1592184596973},{"_id":"public/2019/04/01/vue生命周期以及nextTick应用/shengming.webp","hash":"ceb669b5a12f77fdb6207e0382a3d629def72680","modified":1592184596973},{"_id":"public/2019/05/01/css盒子模型/biaozhun.jpg","hash":"2e38705c1f2bbf04182ce788a33f276825529929","modified":1592184596973},{"_id":"public/2019/07/24/原型链/yuanxing.png","hash":"0003715c80652574deba4378b28089731a1f1898","modified":1592184596973},{"_id":"public/intro/post-bg.jpg","hash":"525fafb2238c27754d8fa751f143ff1de9b8482d","modified":1592184596973},{"_id":"public/intro/index-bg.jpg","hash":"96b52e177b8bc53e64ec6ee1e10b2b6a4e13083b","modified":1592184596973},{"_id":"public/2019/10/11/页面性能优化/youhua1.png","hash":"d5e4fb7eeb64480c51660d2dce6a9ccf3f36cc28","modified":1592184596973},{"_id":"public/intro/about-bg.jpg","hash":"ab388276822417cc4e703312c14e20280ec783b3","modified":1592184596973},{"_id":"public/2019/09/03/CSRF和XSS/csrf.png","hash":"9082e53767d90d9e3a3f4c68124f5e40823d923d","modified":1592184596973}],"Category":[],"Data":[],"Page":[{"_content":"Promise.all = (arr) => {\n    let resultList = new Array(arr.length);\n    return new Promise((resolve, reject) => {\n        let temp = 0;\n        for (let i = 0, len = arr.length; i < len; i++) {\n            arr[i].then((res, rej) => {\n                if (!rej) {\n                    resultList[i] = (res);\n                    if (temp == arr.length) {\n                        resolve(resultList);\n                    }\n                    temp++;\n                } else {\n                    reject(rej);\n                }\n            })\n        }\n    })\n};\nvar a = { name: 'demo' };\nvar b = new Object({ name: 'demo' });\nvar func = function () {\n    this.name = 'demo';\n}\nvar c = new func();\nvar demo = { name: 'demo' };\nvar d = Object.create(demo);\n//\t借助原型链实现继承\nfunction Parent2() {\n    this.name = 'name2';\n    this.play = [1, 2, 3];\n}\nfunction Child2() {\n    this.type = 'chilid2';\n}\nChild2.prototype = new Parent2();\nconsole.log(new Child2());\nvar s1 = new Child2();\nvar s2 = new Child2();\nconsole.log(s1.play, s2.play);\t//[1,2,3] [1,2,3]\ns1.play.push(4);\nconsole.log(s1.play, s2.play);\t//[1,2,3,4] [1,2,3,4]\n// 组合方式\nfunction Parent3() {\n    this.name = 'name3';\n    this.play = [1, 2, 3];\n}\nfunction Child3() {\n    Parent3.call(this);\n    this.type = 'chilid3';\n}\nChild3.prototype = new Parent3();\nvar s3 = new Child3();\nvar s4 = new Child3();\ns3.play.push(4);\nconsole.log(s3.play, s4.play);\nfunction Parent4() {\n    this.name = '4';\n    this.play = [1, 2, 3];\n}\nfunction Child4() {\n    Parent4.call(this);\n    this.type = 'chilid4';\n}\nChild4.prototype = Parent4.prototype;\nvar s5 = new Child4();\nvar s6 = new Child4();\ns5.play.push(4);\nconsole.log(s5.play, s6.play);\nconsole.log(s5 instanceof Child4, s5 instanceof Parent4);\t// true true\nconsole.log(s5.constructor);\t// Parent4\n// 因为子类的prototype就是父类的实例，他的constructor是从父类直接拿过来的\n\nfunction Parent5() {\n    this.name = '5';\n    this.play = [1, 2, 3];\n}\nfunction Child5() {\n    Parent5.call(this);\n    this.type = 'chilid5';\n}\nChild5.prototype = Object.create(Parent5.prototype);\nChild5.prototype.constructor = Child5;\nvar s5 = new Child5();\nvar s6 = new Child5();\ns5.play.push(4);\nconsole.log(s5.play, s6.play);\nconsole.log(s5 instanceof Child5, s5 instanceof Parent5); // true true\nconsole.log(s5.constructor); // Child5","source":"test.js","raw":"Promise.all = (arr) => {\n    let resultList = new Array(arr.length);\n    return new Promise((resolve, reject) => {\n        let temp = 0;\n        for (let i = 0, len = arr.length; i < len; i++) {\n            arr[i].then((res, rej) => {\n                if (!rej) {\n                    resultList[i] = (res);\n                    if (temp == arr.length) {\n                        resolve(resultList);\n                    }\n                    temp++;\n                } else {\n                    reject(rej);\n                }\n            })\n        }\n    })\n};\nvar a = { name: 'demo' };\nvar b = new Object({ name: 'demo' });\nvar func = function () {\n    this.name = 'demo';\n}\nvar c = new func();\nvar demo = { name: 'demo' };\nvar d = Object.create(demo);\n//\t借助原型链实现继承\nfunction Parent2() {\n    this.name = 'name2';\n    this.play = [1, 2, 3];\n}\nfunction Child2() {\n    this.type = 'chilid2';\n}\nChild2.prototype = new Parent2();\nconsole.log(new Child2());\nvar s1 = new Child2();\nvar s2 = new Child2();\nconsole.log(s1.play, s2.play);\t//[1,2,3] [1,2,3]\ns1.play.push(4);\nconsole.log(s1.play, s2.play);\t//[1,2,3,4] [1,2,3,4]\n// 组合方式\nfunction Parent3() {\n    this.name = 'name3';\n    this.play = [1, 2, 3];\n}\nfunction Child3() {\n    Parent3.call(this);\n    this.type = 'chilid3';\n}\nChild3.prototype = new Parent3();\nvar s3 = new Child3();\nvar s4 = new Child3();\ns3.play.push(4);\nconsole.log(s3.play, s4.play);\nfunction Parent4() {\n    this.name = '4';\n    this.play = [1, 2, 3];\n}\nfunction Child4() {\n    Parent4.call(this);\n    this.type = 'chilid4';\n}\nChild4.prototype = Parent4.prototype;\nvar s5 = new Child4();\nvar s6 = new Child4();\ns5.play.push(4);\nconsole.log(s5.play, s6.play);\nconsole.log(s5 instanceof Child4, s5 instanceof Parent4);\t// true true\nconsole.log(s5.constructor);\t// Parent4\n// 因为子类的prototype就是父类的实例，他的constructor是从父类直接拿过来的\n\nfunction Parent5() {\n    this.name = '5';\n    this.play = [1, 2, 3];\n}\nfunction Child5() {\n    Parent5.call(this);\n    this.type = 'chilid5';\n}\nChild5.prototype = Object.create(Parent5.prototype);\nChild5.prototype.constructor = Child5;\nvar s5 = new Child5();\nvar s6 = new Child5();\ns5.play.push(4);\nconsole.log(s5.play, s6.play);\nconsole.log(s5 instanceof Child5, s5 instanceof Parent5); // true true\nconsole.log(s5.constructor); // Child5","date":"2020-03-18T10:54:55.000Z","updated":"2020-03-18T10:54:55.000Z","path":"test.js","layout":"false","title":"","comments":1,"_id":"ckbftlm2v00007w2pc33eg64r","content":"Promise.all = (arr) => {\n    let resultList = new Array(arr.length);\n    return new Promise((resolve, reject) => {\n        let temp = 0;\n        for (let i = 0, len = arr.length; i < len; i++) {\n            arr[i].then((res, rej) => {\n                if (!rej) {\n                    resultList[i] = (res);\n                    if (temp == arr.length) {\n                        resolve(resultList);\n                    }\n                    temp++;\n                } else {\n                    reject(rej);\n                }\n            })\n        }\n    })\n};\nvar a = { name: 'demo' };\nvar b = new Object({ name: 'demo' });\nvar func = function () {\n    this.name = 'demo';\n}\nvar c = new func();\nvar demo = { name: 'demo' };\nvar d = Object.create(demo);\n//\t借助原型链实现继承\nfunction Parent2() {\n    this.name = 'name2';\n    this.play = [1, 2, 3];\n}\nfunction Child2() {\n    this.type = 'chilid2';\n}\nChild2.prototype = new Parent2();\nconsole.log(new Child2());\nvar s1 = new Child2();\nvar s2 = new Child2();\nconsole.log(s1.play, s2.play);\t//[1,2,3] [1,2,3]\ns1.play.push(4);\nconsole.log(s1.play, s2.play);\t//[1,2,3,4] [1,2,3,4]\n// 组合方式\nfunction Parent3() {\n    this.name = 'name3';\n    this.play = [1, 2, 3];\n}\nfunction Child3() {\n    Parent3.call(this);\n    this.type = 'chilid3';\n}\nChild3.prototype = new Parent3();\nvar s3 = new Child3();\nvar s4 = new Child3();\ns3.play.push(4);\nconsole.log(s3.play, s4.play);\nfunction Parent4() {\n    this.name = '4';\n    this.play = [1, 2, 3];\n}\nfunction Child4() {\n    Parent4.call(this);\n    this.type = 'chilid4';\n}\nChild4.prototype = Parent4.prototype;\nvar s5 = new Child4();\nvar s6 = new Child4();\ns5.play.push(4);\nconsole.log(s5.play, s6.play);\nconsole.log(s5 instanceof Child4, s5 instanceof Parent4);\t// true true\nconsole.log(s5.constructor);\t// Parent4\n// 因为子类的prototype就是父类的实例，他的constructor是从父类直接拿过来的\n\nfunction Parent5() {\n    this.name = '5';\n    this.play = [1, 2, 3];\n}\nfunction Child5() {\n    Parent5.call(this);\n    this.type = 'chilid5';\n}\nChild5.prototype = Object.create(Parent5.prototype);\nChild5.prototype.constructor = Child5;\nvar s5 = new Child5();\nvar s6 = new Child5();\ns5.play.push(4);\nconsole.log(s5.play, s6.play);\nconsole.log(s5 instanceof Child5, s5 instanceof Parent5); // true true\nconsole.log(s5.constructor); // Child5","site":{"data":{}},"excerpt":"","more":"Promise.all = (arr) => {\n    let resultList = new Array(arr.length);\n    return new Promise((resolve, reject) => {\n        let temp = 0;\n        for (let i = 0, len = arr.length; i < len; i++) {\n            arr[i].then((res, rej) => {\n                if (!rej) {\n                    resultList[i] = (res);\n                    if (temp == arr.length) {\n                        resolve(resultList);\n                    }\n                    temp++;\n                } else {\n                    reject(rej);\n                }\n            })\n        }\n    })\n};\nvar a = { name: 'demo' };\nvar b = new Object({ name: 'demo' });\nvar func = function () {\n    this.name = 'demo';\n}\nvar c = new func();\nvar demo = { name: 'demo' };\nvar d = Object.create(demo);\n//\t借助原型链实现继承\nfunction Parent2() {\n    this.name = 'name2';\n    this.play = [1, 2, 3];\n}\nfunction Child2() {\n    this.type = 'chilid2';\n}\nChild2.prototype = new Parent2();\nconsole.log(new Child2());\nvar s1 = new Child2();\nvar s2 = new Child2();\nconsole.log(s1.play, s2.play);\t//[1,2,3] [1,2,3]\ns1.play.push(4);\nconsole.log(s1.play, s2.play);\t//[1,2,3,4] [1,2,3,4]\n// 组合方式\nfunction Parent3() {\n    this.name = 'name3';\n    this.play = [1, 2, 3];\n}\nfunction Child3() {\n    Parent3.call(this);\n    this.type = 'chilid3';\n}\nChild3.prototype = new Parent3();\nvar s3 = new Child3();\nvar s4 = new Child3();\ns3.play.push(4);\nconsole.log(s3.play, s4.play);\nfunction Parent4() {\n    this.name = '4';\n    this.play = [1, 2, 3];\n}\nfunction Child4() {\n    Parent4.call(this);\n    this.type = 'chilid4';\n}\nChild4.prototype = Parent4.prototype;\nvar s5 = new Child4();\nvar s6 = new Child4();\ns5.play.push(4);\nconsole.log(s5.play, s6.play);\nconsole.log(s5 instanceof Child4, s5 instanceof Parent4);\t// true true\nconsole.log(s5.constructor);\t// Parent4\n// 因为子类的prototype就是父类的实例，他的constructor是从父类直接拿过来的\n\nfunction Parent5() {\n    this.name = '5';\n    this.play = [1, 2, 3];\n}\nfunction Child5() {\n    Parent5.call(this);\n    this.type = 'chilid5';\n}\nChild5.prototype = Object.create(Parent5.prototype);\nChild5.prototype.constructor = Child5;\nvar s5 = new Child5();\nvar s6 = new Child5();\ns5.play.push(4);\nconsole.log(s5.play, s6.play);\nconsole.log(s5 instanceof Child5, s5 instanceof Parent5); // true true\nconsole.log(s5.constructor); // Child5"},{"_content":"<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\" />\n\t\t<title>面向对象</title>\n\t</head>\n\n\t<body>\n\t\t<script type=\"text/javascript\">\n\t\t\t// // 类的声明\n\t\t\t// function Animal() {\n\t\t\t// \tthis.name = 'animal';\n\t\t\t// }\n\t\t\t// // es6中的声明\n\t\t\t// class Animals {\n\t\t\t// \tconstructor() {\n\t\t\t// \t\tthis.name = 'animal';\n\t\t\t// \t}\n\t\t\t// }\n\t\t\t// // 实例化类\n\t\t\t// console.log(new Animal(), new Animals());\n\t\t\t// //\t使用构造函数进行继承（es5）\n\t\t\t// function Parent1() {\n\t\t\t// \tthis.name = 'name';\n\t\t\t// }\n\t\t\t// Parent1.prototype.say = function() {\n\t\t\t// \tconsole.log('say');\n\t\t\t// };\n\t\t\t// //这种方式不会继承父类原型对象上的方法\n\t\t\t// function Child1() {\n\t\t\t// \tParent1.call(this); // apply;\n\t\t\t// \tthis.type = 'chilid1';\n\t\t\t// }\n\t\t\t// console.log(new Child1());\n\n\t\t\t// //\t借助原型链实现继承\n\t\t\t// function Parent2() {\n\t\t\t// \tthis.name = 'name2';\n\t\t\t// \tthis.play = [1, 2, 3];\n\t\t\t// }\n\t\t\t// function Child2() {\n\t\t\t// \tthis.type = 'chilid2';\n\t\t\t// }\n\t\t\t// Child2.prototype = new Parent2();\n\t\t\t// console.log(new Child2());\n\t\t\t// var s1 = new Child2();\n\t\t\t// var s2 = new Child2();\n\t\t\t// console.log(s1.play, s2.play); //[1,2,3] [1,2,3]\n\t\t\t// s1.play.push(4);\n\t\t\t// console.log(s1.play, s2.play); //[1,2,3,4] [1,2,3,4]\n\n\t\t\t// // 组合方式\n\t\t\t// function Parent3() {\n\t\t\t// \tthis.name = 'name3';\n\t\t\t// \tthis.play = [1, 2, 3];\n\t\t\t// }\n\t\t\t// function Child3() {\n\t\t\t// \tParent3.call(this);\n\t\t\t// \tthis.type = 'chilid3';\n\t\t\t// }\n\t\t\t// Child3.prototype = new Parent3();\n\t\t\t// var s3 = new Child3();\n\t\t\t// var s4 = new Child3();\n\t\t\t// s3.play.push(4);\n\t\t\t// console.log(s3.play, s4.play);\n\t\t\t// 组合方式\n\t\t\t// function Parent4() {\n\t\t\t// \tthis.name = '4';\n\t\t\t// \tthis.play = [1, 2, 3];\n\t\t\t// }\n\t\t\t// function Child4() {\n\t\t\t// \tParent4.call(this);\n\t\t\t// \tthis.type = 'chilid4';\n\t\t\t// }\n\t\t\t// Child4.prototype = Parent4.prototype;\n\t\t\t// var s5 = new Child4();\n\t\t\t// var s6 = new Child4();\n\t\t\t// s5.play.push(4);\n\t\t\t// console.log(s5.play, s6.play);\n\t\t\t// console.log(s5 instanceof Child4, s5 instanceof Parent4);\t// true true\n\t\t\t// console.log(s5.constructor);\t// Parent4\n\t\t\t// // 因为子类的prototype就是父类的实例，他的constructor是从父类直接拿过来的\n\n\t\t\tfunction Parent5() {\n\t\t\t\tthis.name = '5';\n\t\t\t\tthis.play = [1, 2, 3];\n\t\t\t}\n\t\t\tfunction Child5() {\n\t\t\t\tParent5.call(this);\n\t\t\t\tthis.type = 'chilid5';\n\t\t\t}\n\t\t\tChild5.prototype = Object.create(Parent5.prototype);\n\t\t\tChild5.prototype.constructor = Child5;\n\t\t\tvar s5 = new Child5();\n\t\t\tvar s6 = new Child5();\n\t\t\ts5.play.push(4);\n\t\t\tconsole.log(s5.play, s6.play);\n\t\t\tconsole.log(s5 instanceof Child5, s5 instanceof Parent5); // true true\n\t\t\tconsole.log(s5.constructor); // Child5\n\t\t</script>\n\t</body>\n</html>\n","source":"test.html","raw":"<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\" />\n\t\t<title>面向对象</title>\n\t</head>\n\n\t<body>\n\t\t<script type=\"text/javascript\">\n\t\t\t// // 类的声明\n\t\t\t// function Animal() {\n\t\t\t// \tthis.name = 'animal';\n\t\t\t// }\n\t\t\t// // es6中的声明\n\t\t\t// class Animals {\n\t\t\t// \tconstructor() {\n\t\t\t// \t\tthis.name = 'animal';\n\t\t\t// \t}\n\t\t\t// }\n\t\t\t// // 实例化类\n\t\t\t// console.log(new Animal(), new Animals());\n\t\t\t// //\t使用构造函数进行继承（es5）\n\t\t\t// function Parent1() {\n\t\t\t// \tthis.name = 'name';\n\t\t\t// }\n\t\t\t// Parent1.prototype.say = function() {\n\t\t\t// \tconsole.log('say');\n\t\t\t// };\n\t\t\t// //这种方式不会继承父类原型对象上的方法\n\t\t\t// function Child1() {\n\t\t\t// \tParent1.call(this); // apply;\n\t\t\t// \tthis.type = 'chilid1';\n\t\t\t// }\n\t\t\t// console.log(new Child1());\n\n\t\t\t// //\t借助原型链实现继承\n\t\t\t// function Parent2() {\n\t\t\t// \tthis.name = 'name2';\n\t\t\t// \tthis.play = [1, 2, 3];\n\t\t\t// }\n\t\t\t// function Child2() {\n\t\t\t// \tthis.type = 'chilid2';\n\t\t\t// }\n\t\t\t// Child2.prototype = new Parent2();\n\t\t\t// console.log(new Child2());\n\t\t\t// var s1 = new Child2();\n\t\t\t// var s2 = new Child2();\n\t\t\t// console.log(s1.play, s2.play); //[1,2,3] [1,2,3]\n\t\t\t// s1.play.push(4);\n\t\t\t// console.log(s1.play, s2.play); //[1,2,3,4] [1,2,3,4]\n\n\t\t\t// // 组合方式\n\t\t\t// function Parent3() {\n\t\t\t// \tthis.name = 'name3';\n\t\t\t// \tthis.play = [1, 2, 3];\n\t\t\t// }\n\t\t\t// function Child3() {\n\t\t\t// \tParent3.call(this);\n\t\t\t// \tthis.type = 'chilid3';\n\t\t\t// }\n\t\t\t// Child3.prototype = new Parent3();\n\t\t\t// var s3 = new Child3();\n\t\t\t// var s4 = new Child3();\n\t\t\t// s3.play.push(4);\n\t\t\t// console.log(s3.play, s4.play);\n\t\t\t// 组合方式\n\t\t\t// function Parent4() {\n\t\t\t// \tthis.name = '4';\n\t\t\t// \tthis.play = [1, 2, 3];\n\t\t\t// }\n\t\t\t// function Child4() {\n\t\t\t// \tParent4.call(this);\n\t\t\t// \tthis.type = 'chilid4';\n\t\t\t// }\n\t\t\t// Child4.prototype = Parent4.prototype;\n\t\t\t// var s5 = new Child4();\n\t\t\t// var s6 = new Child4();\n\t\t\t// s5.play.push(4);\n\t\t\t// console.log(s5.play, s6.play);\n\t\t\t// console.log(s5 instanceof Child4, s5 instanceof Parent4);\t// true true\n\t\t\t// console.log(s5.constructor);\t// Parent4\n\t\t\t// // 因为子类的prototype就是父类的实例，他的constructor是从父类直接拿过来的\n\n\t\t\tfunction Parent5() {\n\t\t\t\tthis.name = '5';\n\t\t\t\tthis.play = [1, 2, 3];\n\t\t\t}\n\t\t\tfunction Child5() {\n\t\t\t\tParent5.call(this);\n\t\t\t\tthis.type = 'chilid5';\n\t\t\t}\n\t\t\tChild5.prototype = Object.create(Parent5.prototype);\n\t\t\tChild5.prototype.constructor = Child5;\n\t\t\tvar s5 = new Child5();\n\t\t\tvar s6 = new Child5();\n\t\t\ts5.play.push(4);\n\t\t\tconsole.log(s5.play, s6.play);\n\t\t\tconsole.log(s5 instanceof Child5, s5 instanceof Parent5); // true true\n\t\t\tconsole.log(s5.constructor); // Child5\n\t\t</script>\n\t</body>\n</html>\n","date":"2020-03-18T10:54:55.000Z","updated":"2020-03-18T10:54:55.000Z","path":"test.html","title":"","comments":1,"layout":"page","_id":"ckbftlm3200017w2p2tug707z","content":"<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\">\n\t\t<title>面向对象</title>\n\t<meta name=\"generator\" content=\"Hexo 4.2.0\"></head>\n\n\t<body>\n\t\t<script type=\"text/javascript\">\n\t\t\t// // 类的声明\n\t\t\t// function Animal() {\n\t\t\t// \tthis.name = 'animal';\n\t\t\t// }\n\t\t\t// // es6中的声明\n\t\t\t// class Animals {\n\t\t\t// \tconstructor() {\n\t\t\t// \t\tthis.name = 'animal';\n\t\t\t// \t}\n\t\t\t// }\n\t\t\t// // 实例化类\n\t\t\t// console.log(new Animal(), new Animals());\n\t\t\t// //\t使用构造函数进行继承（es5）\n\t\t\t// function Parent1() {\n\t\t\t// \tthis.name = 'name';\n\t\t\t// }\n\t\t\t// Parent1.prototype.say = function() {\n\t\t\t// \tconsole.log('say');\n\t\t\t// };\n\t\t\t// //这种方式不会继承父类原型对象上的方法\n\t\t\t// function Child1() {\n\t\t\t// \tParent1.call(this); // apply;\n\t\t\t// \tthis.type = 'chilid1';\n\t\t\t// }\n\t\t\t// console.log(new Child1());\n\n\t\t\t// //\t借助原型链实现继承\n\t\t\t// function Parent2() {\n\t\t\t// \tthis.name = 'name2';\n\t\t\t// \tthis.play = [1, 2, 3];\n\t\t\t// }\n\t\t\t// function Child2() {\n\t\t\t// \tthis.type = 'chilid2';\n\t\t\t// }\n\t\t\t// Child2.prototype = new Parent2();\n\t\t\t// console.log(new Child2());\n\t\t\t// var s1 = new Child2();\n\t\t\t// var s2 = new Child2();\n\t\t\t// console.log(s1.play, s2.play); //[1,2,3] [1,2,3]\n\t\t\t// s1.play.push(4);\n\t\t\t// console.log(s1.play, s2.play); //[1,2,3,4] [1,2,3,4]\n\n\t\t\t// // 组合方式\n\t\t\t// function Parent3() {\n\t\t\t// \tthis.name = 'name3';\n\t\t\t// \tthis.play = [1, 2, 3];\n\t\t\t// }\n\t\t\t// function Child3() {\n\t\t\t// \tParent3.call(this);\n\t\t\t// \tthis.type = 'chilid3';\n\t\t\t// }\n\t\t\t// Child3.prototype = new Parent3();\n\t\t\t// var s3 = new Child3();\n\t\t\t// var s4 = new Child3();\n\t\t\t// s3.play.push(4);\n\t\t\t// console.log(s3.play, s4.play);\n\t\t\t// 组合方式\n\t\t\t// function Parent4() {\n\t\t\t// \tthis.name = '4';\n\t\t\t// \tthis.play = [1, 2, 3];\n\t\t\t// }\n\t\t\t// function Child4() {\n\t\t\t// \tParent4.call(this);\n\t\t\t// \tthis.type = 'chilid4';\n\t\t\t// }\n\t\t\t// Child4.prototype = Parent4.prototype;\n\t\t\t// var s5 = new Child4();\n\t\t\t// var s6 = new Child4();\n\t\t\t// s5.play.push(4);\n\t\t\t// console.log(s5.play, s6.play);\n\t\t\t// console.log(s5 instanceof Child4, s5 instanceof Parent4);\t// true true\n\t\t\t// console.log(s5.constructor);\t// Parent4\n\t\t\t// // 因为子类的prototype就是父类的实例，他的constructor是从父类直接拿过来的\n\n\t\t\tfunction Parent5() {\n\t\t\t\tthis.name = '5';\n\t\t\t\tthis.play = [1, 2, 3];\n\t\t\t}\n\t\t\tfunction Child5() {\n\t\t\t\tParent5.call(this);\n\t\t\t\tthis.type = 'chilid5';\n\t\t\t}\n\t\t\tChild5.prototype = Object.create(Parent5.prototype);\n\t\t\tChild5.prototype.constructor = Child5;\n\t\t\tvar s5 = new Child5();\n\t\t\tvar s6 = new Child5();\n\t\t\ts5.play.push(4);\n\t\t\tconsole.log(s5.play, s6.play);\n\t\t\tconsole.log(s5 instanceof Child5, s5 instanceof Parent5); // true true\n\t\t\tconsole.log(s5.constructor); // Child5\n\t\t</script>\n\t</body>\n</html>\n","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\">\n\t\t<title>面向对象</title>\n\t<meta name=\"generator\" content=\"Hexo 4.2.0\"></head>\n\n\t<body>\n\t\t<script type=\"text/javascript\">\n\t\t\t// // 类的声明\n\t\t\t// function Animal() {\n\t\t\t// \tthis.name = 'animal';\n\t\t\t// }\n\t\t\t// // es6中的声明\n\t\t\t// class Animals {\n\t\t\t// \tconstructor() {\n\t\t\t// \t\tthis.name = 'animal';\n\t\t\t// \t}\n\t\t\t// }\n\t\t\t// // 实例化类\n\t\t\t// console.log(new Animal(), new Animals());\n\t\t\t// //\t使用构造函数进行继承（es5）\n\t\t\t// function Parent1() {\n\t\t\t// \tthis.name = 'name';\n\t\t\t// }\n\t\t\t// Parent1.prototype.say = function() {\n\t\t\t// \tconsole.log('say');\n\t\t\t// };\n\t\t\t// //这种方式不会继承父类原型对象上的方法\n\t\t\t// function Child1() {\n\t\t\t// \tParent1.call(this); // apply;\n\t\t\t// \tthis.type = 'chilid1';\n\t\t\t// }\n\t\t\t// console.log(new Child1());\n\n\t\t\t// //\t借助原型链实现继承\n\t\t\t// function Parent2() {\n\t\t\t// \tthis.name = 'name2';\n\t\t\t// \tthis.play = [1, 2, 3];\n\t\t\t// }\n\t\t\t// function Child2() {\n\t\t\t// \tthis.type = 'chilid2';\n\t\t\t// }\n\t\t\t// Child2.prototype = new Parent2();\n\t\t\t// console.log(new Child2());\n\t\t\t// var s1 = new Child2();\n\t\t\t// var s2 = new Child2();\n\t\t\t// console.log(s1.play, s2.play); //[1,2,3] [1,2,3]\n\t\t\t// s1.play.push(4);\n\t\t\t// console.log(s1.play, s2.play); //[1,2,3,4] [1,2,3,4]\n\n\t\t\t// // 组合方式\n\t\t\t// function Parent3() {\n\t\t\t// \tthis.name = 'name3';\n\t\t\t// \tthis.play = [1, 2, 3];\n\t\t\t// }\n\t\t\t// function Child3() {\n\t\t\t// \tParent3.call(this);\n\t\t\t// \tthis.type = 'chilid3';\n\t\t\t// }\n\t\t\t// Child3.prototype = new Parent3();\n\t\t\t// var s3 = new Child3();\n\t\t\t// var s4 = new Child3();\n\t\t\t// s3.play.push(4);\n\t\t\t// console.log(s3.play, s4.play);\n\t\t\t// 组合方式\n\t\t\t// function Parent4() {\n\t\t\t// \tthis.name = '4';\n\t\t\t// \tthis.play = [1, 2, 3];\n\t\t\t// }\n\t\t\t// function Child4() {\n\t\t\t// \tParent4.call(this);\n\t\t\t// \tthis.type = 'chilid4';\n\t\t\t// }\n\t\t\t// Child4.prototype = Parent4.prototype;\n\t\t\t// var s5 = new Child4();\n\t\t\t// var s6 = new Child4();\n\t\t\t// s5.play.push(4);\n\t\t\t// console.log(s5.play, s6.play);\n\t\t\t// console.log(s5 instanceof Child4, s5 instanceof Parent4);\t// true true\n\t\t\t// console.log(s5.constructor);\t// Parent4\n\t\t\t// // 因为子类的prototype就是父类的实例，他的constructor是从父类直接拿过来的\n\n\t\t\tfunction Parent5() {\n\t\t\t\tthis.name = '5';\n\t\t\t\tthis.play = [1, 2, 3];\n\t\t\t}\n\t\t\tfunction Child5() {\n\t\t\t\tParent5.call(this);\n\t\t\t\tthis.type = 'chilid5';\n\t\t\t}\n\t\t\tChild5.prototype = Object.create(Parent5.prototype);\n\t\t\tChild5.prototype.constructor = Child5;\n\t\t\tvar s5 = new Child5();\n\t\t\tvar s6 = new Child5();\n\t\t\ts5.play.push(4);\n\t\t\tconsole.log(s5.play, s6.play);\n\t\t\tconsole.log(s5 instanceof Child5, s5 instanceof Parent5); // true true\n\t\t\tconsole.log(s5.constructor); // Child5\n\t\t</script>\n\t</body>\n</html>\n"},{"layout":"404","title":"[404]","description":"我去哪里了？","_content":"我去哪里了？","source":"404.md","raw":"---\nlayout: 404\ntitle: \"[404]\"\ndescription: \"我去哪里了？\"\n---\n我去哪里了？","date":"2020-02-05T08:43:28.000Z","updated":"2020-02-05T08:43:28.000Z","path":"404.html","comments":1,"_id":"ckbftlm3400027w2p0rhkd2wf","content":"<p>我去哪里了？</p>\n","site":{"data":{}},"excerpt":"","more":"<p>我去哪里了？</p>\n"},{"title":"个人分享自己的学习经历的blog","layout":"about","_content":"前端攻城狮一枚，工作多年后将自己的笔记总结为博客，总结自己。\n","source":"about/index.md","raw":"---\ntitle: 个人分享自己的学习经历的blog\nlayout: about\n---\n前端攻城狮一枚，工作多年后将自己的笔记总结为博客，总结自己。\n","date":"2020-01-14T07:16:44.000Z","updated":"2020-01-14T07:16:44.000Z","path":"about/index.html","comments":1,"_id":"ckbftlm5a00047w2p1a4whz2d","content":"<p>前端攻城狮一枚，工作多年后将自己的笔记总结为博客，总结自己。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>前端攻城狮一枚，工作多年后将自己的笔记总结为博客，总结自己。</p>\n"}],"Post":[{"layout":"[post]","title":"AMD、CMD、CommonJS、ES6Module的区别","date":"2020-05-11T10:18:39.000Z","_content":"\n\n### 前言\n\n回想起之前的一次面试，第一轮面试官问我 AMD 和 CMD 的区别，我只回答说 AMD 是提前加载，CMD 是按需加载。第二轮面试官又问了我 CommonJS 和 ES6 Module 的区别，emmm...，我大致回答说新的比旧的好~~，虽然面试官并没有说什么，不过显然这样的答案并不是有助于面试、有助于自己的技术积累的。\n\n所以有必要进行一次梳理，以便更清晰地了解它们的特点及差异。\n<!-- more -->\n### AMD\n\nAMD 一开始是 CommonJS 规范中的一个草案，全称是 Asynchronous Module Definition，即异步模块加载机制。后来由该草案的作者以 RequireJS 实现了 AMD 规范，所以一般说 AMD 也是指 RequireJS。\n\n#### RequireJS 的基本用法\n\n通过`define`来定义一个模块，使用`require`可以导入定义的模块。\n\n```js\n//a.js\n//define可以传入三个参数，分别是字符串-模块名、数组-依赖模块、函数-回调函数\ndefine(function(){\n    return 1;\n})\n\n// b.js\n//数组中声明需要加载的模块，可以是模块名、js文件路径\nrequire(['a'], function(a){\n    console.log(a);// 1\n});\n复制代码\n```\n\n#### RequireJS 的特点\n\n对于依赖的模块，AMD 推崇**依赖前置，提前执行**。也就是说，在`define`方法里传入的依赖模块 (数组)，会在一开始就下载并执行。\n\n### CMD\n\nCMD 是 SeaJS 在推广过程中生产的对模块定义的规范，在 Web 浏览器端的模块加载器中，SeaJS 与 RequireJS 并称，SeaJS 作者为阿里的玉伯。\n\n#### SeaJS 的基本用法\n\n```js\n//a.js\n/*\n* define 接受 factory 参数，factory 可以是一个函数，也可以是一个对象或字符串，\n* factory 为对象、字符串时，表示模块的接口就是该对象、字符串。\n* define 也可以接受两个以上参数。字符串 id 表示模块标识，数组 deps 是模块依赖.\n*/\ndefine(function(require, exports, module) {\n  var $ = require('jquery');\n\n  exports.setColor = function() {\n    $('body').css('color','#333');\n  };\n});\n\n//b.js\n//数组中声明需要加载的模块，可以是模块名、js文件路径\nseajs.use(['a'], function(a) {\n  $('#el').click(a.setColor);\n});\n复制代码\n```\n\n#### SeaJS 的特点\n\n对于依赖的模块，CMD 推崇**依赖就近，延迟执行**。也就是说，只有到`require`时依赖模块才执行。\n\n### CommonJS\n\nCommonJS 规范为 CommonJS 小组所提出，目的是弥补 JavaScript 在服务器端缺少模块化机制，NodeJS、webpack 都是基于该规范来实现的。\n\n#### CommonJS 的基本用法\n\n```js\n//a.js\nmodule.exports = function () {\n  console.log(\"hello world\")\n}\n\n//b.js\nvar a = require('./a');\n\na();//\"hello world\"\n\n//或者\n\n//a2.js\nexports.num = 1;\nexports.obj = {xx: 2};\n\n//b2.js\nvar a2 = require('./a2');\n\nconsole.log(a2);//{ num: 1, obj: { xx: 2 } }\n复制代码\n```\n\n#### CommonJS 的特点\n\n*   所有代码都运行在模块作用域，不会污染全局作用域；\n*   模块是同步加载的，即只有加载完成，才能执行后面的操作；\n*   模块在首次执行后就会缓存，再次加载只返回缓存结果，如果想要再次执行，可清除缓存；\n*   CommonJS 输出是值的拷贝 (即，`require`返回的值是被输出的值的拷贝，模块内部的变化也不会影响这个值)。\n\n### ES6 Module\n\nES6 Module 是 ES6 中规定的模块体系，相比上面提到的规范， ES6 Module 有更多的优势，有望成为浏览器和服务器通用的模块解决方案。\n\n#### ES6 Module 的基本用法\n\n```js\n//a.js\nvar name = 'lin';\nvar age = 13;\nvar job = 'ninja';\n\nexport { name, age, job};\n\n//b.js\nimport { name, age, job} from './a.js';\n\nconsole.log(name, age, job);// lin 13 ninja\n\n//或者\n\n//a2.js\nexport default function () {\n  console.log('default ');\n}\n\n//b2.js\nimport customName from './a2.js';\ncustomName(); // 'default'\n复制代码\n```\n\n#### ES6 Module 的特点 (对比 CommonJS)\n\n*   CommonJS 模块是运行时加载，ES6 Module 是编译时输出接口；\n*   CommonJS 加载的是整个模块，将所有的接口全部加载进来，ES6 Module 可以单独加载其中的某个接口；\n*   CommonJS 输出是值的拷贝，ES6 Module 输出的是值的引用，被输出模块的内部的改变会影响引用的改变；\n*   CommonJS `this`指向当前模块，ES6 Module `this`指向`undefined`;\n\n目前浏览器对 ES6 Module 兼容还不太好，我们平时在 webpack 中使用的`export`/`import`，会被打包为`exports`/`require`。\n\n### 写在后面\n\n这里比较宽泛地把 JavaScript 中的几大模块化规范列举出来，希望借此对 JavaScript 模块化有大致的认识，而未对细节展开具体分析，感兴趣的可以自行探索。\n\n原文地址 https://juejin.im/post/5db95e3a6fb9a020704bcd8d","source":"_posts/AMD、CMD、CommonJS、ES6Module的区别.md","raw":"---\nlayout: '[post]'\ntitle: AMD、CMD、CommonJS、ES6Module的区别\ndate: 2020-05-11 18:18:39\ntags: javascript\n---\n\n\n### 前言\n\n回想起之前的一次面试，第一轮面试官问我 AMD 和 CMD 的区别，我只回答说 AMD 是提前加载，CMD 是按需加载。第二轮面试官又问了我 CommonJS 和 ES6 Module 的区别，emmm...，我大致回答说新的比旧的好~~，虽然面试官并没有说什么，不过显然这样的答案并不是有助于面试、有助于自己的技术积累的。\n\n所以有必要进行一次梳理，以便更清晰地了解它们的特点及差异。\n<!-- more -->\n### AMD\n\nAMD 一开始是 CommonJS 规范中的一个草案，全称是 Asynchronous Module Definition，即异步模块加载机制。后来由该草案的作者以 RequireJS 实现了 AMD 规范，所以一般说 AMD 也是指 RequireJS。\n\n#### RequireJS 的基本用法\n\n通过`define`来定义一个模块，使用`require`可以导入定义的模块。\n\n```js\n//a.js\n//define可以传入三个参数，分别是字符串-模块名、数组-依赖模块、函数-回调函数\ndefine(function(){\n    return 1;\n})\n\n// b.js\n//数组中声明需要加载的模块，可以是模块名、js文件路径\nrequire(['a'], function(a){\n    console.log(a);// 1\n});\n复制代码\n```\n\n#### RequireJS 的特点\n\n对于依赖的模块，AMD 推崇**依赖前置，提前执行**。也就是说，在`define`方法里传入的依赖模块 (数组)，会在一开始就下载并执行。\n\n### CMD\n\nCMD 是 SeaJS 在推广过程中生产的对模块定义的规范，在 Web 浏览器端的模块加载器中，SeaJS 与 RequireJS 并称，SeaJS 作者为阿里的玉伯。\n\n#### SeaJS 的基本用法\n\n```js\n//a.js\n/*\n* define 接受 factory 参数，factory 可以是一个函数，也可以是一个对象或字符串，\n* factory 为对象、字符串时，表示模块的接口就是该对象、字符串。\n* define 也可以接受两个以上参数。字符串 id 表示模块标识，数组 deps 是模块依赖.\n*/\ndefine(function(require, exports, module) {\n  var $ = require('jquery');\n\n  exports.setColor = function() {\n    $('body').css('color','#333');\n  };\n});\n\n//b.js\n//数组中声明需要加载的模块，可以是模块名、js文件路径\nseajs.use(['a'], function(a) {\n  $('#el').click(a.setColor);\n});\n复制代码\n```\n\n#### SeaJS 的特点\n\n对于依赖的模块，CMD 推崇**依赖就近，延迟执行**。也就是说，只有到`require`时依赖模块才执行。\n\n### CommonJS\n\nCommonJS 规范为 CommonJS 小组所提出，目的是弥补 JavaScript 在服务器端缺少模块化机制，NodeJS、webpack 都是基于该规范来实现的。\n\n#### CommonJS 的基本用法\n\n```js\n//a.js\nmodule.exports = function () {\n  console.log(\"hello world\")\n}\n\n//b.js\nvar a = require('./a');\n\na();//\"hello world\"\n\n//或者\n\n//a2.js\nexports.num = 1;\nexports.obj = {xx: 2};\n\n//b2.js\nvar a2 = require('./a2');\n\nconsole.log(a2);//{ num: 1, obj: { xx: 2 } }\n复制代码\n```\n\n#### CommonJS 的特点\n\n*   所有代码都运行在模块作用域，不会污染全局作用域；\n*   模块是同步加载的，即只有加载完成，才能执行后面的操作；\n*   模块在首次执行后就会缓存，再次加载只返回缓存结果，如果想要再次执行，可清除缓存；\n*   CommonJS 输出是值的拷贝 (即，`require`返回的值是被输出的值的拷贝，模块内部的变化也不会影响这个值)。\n\n### ES6 Module\n\nES6 Module 是 ES6 中规定的模块体系，相比上面提到的规范， ES6 Module 有更多的优势，有望成为浏览器和服务器通用的模块解决方案。\n\n#### ES6 Module 的基本用法\n\n```js\n//a.js\nvar name = 'lin';\nvar age = 13;\nvar job = 'ninja';\n\nexport { name, age, job};\n\n//b.js\nimport { name, age, job} from './a.js';\n\nconsole.log(name, age, job);// lin 13 ninja\n\n//或者\n\n//a2.js\nexport default function () {\n  console.log('default ');\n}\n\n//b2.js\nimport customName from './a2.js';\ncustomName(); // 'default'\n复制代码\n```\n\n#### ES6 Module 的特点 (对比 CommonJS)\n\n*   CommonJS 模块是运行时加载，ES6 Module 是编译时输出接口；\n*   CommonJS 加载的是整个模块，将所有的接口全部加载进来，ES6 Module 可以单独加载其中的某个接口；\n*   CommonJS 输出是值的拷贝，ES6 Module 输出的是值的引用，被输出模块的内部的改变会影响引用的改变；\n*   CommonJS `this`指向当前模块，ES6 Module `this`指向`undefined`;\n\n目前浏览器对 ES6 Module 兼容还不太好，我们平时在 webpack 中使用的`export`/`import`，会被打包为`exports`/`require`。\n\n### 写在后面\n\n这里比较宽泛地把 JavaScript 中的几大模块化规范列举出来，希望借此对 JavaScript 模块化有大致的认识，而未对细节展开具体分析，感兴趣的可以自行探索。\n\n原文地址 https://juejin.im/post/5db95e3a6fb9a020704bcd8d","slug":"AMD、CMD、CommonJS、ES6Module的区别","published":1,"updated":"2020-05-26T10:21:49.000Z","comments":1,"photos":[],"link":"","_id":"ckbftlm5600037w2p7416awub","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>回想起之前的一次面试，第一轮面试官问我 AMD 和 CMD 的区别，我只回答说 AMD 是提前加载，CMD 是按需加载。第二轮面试官又问了我 CommonJS 和 ES6 Module 的区别，emmm…，我大致回答说新的比旧的好~~，虽然面试官并没有说什么，不过显然这样的答案并不是有助于面试、有助于自己的技术积累的。</p>\n<p>所以有必要进行一次梳理，以便更清晰地了解它们的特点及差异。</p>\n<a id=\"more\"></a>\n<h3 id=\"AMD\"><a href=\"#AMD\" class=\"headerlink\" title=\"AMD\"></a>AMD</h3><p>AMD 一开始是 CommonJS 规范中的一个草案，全称是 Asynchronous Module Definition，即异步模块加载机制。后来由该草案的作者以 RequireJS 实现了 AMD 规范，所以一般说 AMD 也是指 RequireJS。</p>\n<h4 id=\"RequireJS-的基本用法\"><a href=\"#RequireJS-的基本用法\" class=\"headerlink\" title=\"RequireJS 的基本用法\"></a>RequireJS 的基本用法</h4><p>通过<code>define</code>来定义一个模块，使用<code>require</code>可以导入定义的模块。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//a.js</span></span><br><span class=\"line\"><span class=\"comment\">//define可以传入三个参数，分别是字符串-模块名、数组-依赖模块、函数-回调函数</span></span><br><span class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// b.js</span></span><br><span class=\"line\"><span class=\"comment\">//数组中声明需要加载的模块，可以是模块名、js文件路径</span></span><br><span class=\"line\"><span class=\"built_in\">require</span>([<span class=\"string\">'a'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a);<span class=\"comment\">// 1</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"RequireJS-的特点\"><a href=\"#RequireJS-的特点\" class=\"headerlink\" title=\"RequireJS 的特点\"></a>RequireJS 的特点</h4><p>对于依赖的模块，AMD 推崇<strong>依赖前置，提前执行</strong>。也就是说，在<code>define</code>方法里传入的依赖模块 (数组)，会在一开始就下载并执行。</p>\n<h3 id=\"CMD\"><a href=\"#CMD\" class=\"headerlink\" title=\"CMD\"></a>CMD</h3><p>CMD 是 SeaJS 在推广过程中生产的对模块定义的规范，在 Web 浏览器端的模块加载器中，SeaJS 与 RequireJS 并称，SeaJS 作者为阿里的玉伯。</p>\n<h4 id=\"SeaJS-的基本用法\"><a href=\"#SeaJS-的基本用法\" class=\"headerlink\" title=\"SeaJS 的基本用法\"></a>SeaJS 的基本用法</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//a.js</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* define 接受 factory 参数，factory 可以是一个函数，也可以是一个对象或字符串，</span></span><br><span class=\"line\"><span class=\"comment\">* factory 为对象、字符串时，表示模块的接口就是该对象、字符串。</span></span><br><span class=\"line\"><span class=\"comment\">* define 也可以接受两个以上参数。字符串 id 表示模块标识，数组 deps 是模块依赖.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require, exports, module</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> $ = <span class=\"built_in\">require</span>(<span class=\"string\">'jquery'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  exports.setColor = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    $(<span class=\"string\">'body'</span>).css(<span class=\"string\">'color'</span>,<span class=\"string\">'#333'</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//b.js</span></span><br><span class=\"line\"><span class=\"comment\">//数组中声明需要加载的模块，可以是模块名、js文件路径</span></span><br><span class=\"line\">seajs.use([<span class=\"string\">'a'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a</span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">'#el'</span>).click(a.setColor);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"SeaJS-的特点\"><a href=\"#SeaJS-的特点\" class=\"headerlink\" title=\"SeaJS 的特点\"></a>SeaJS 的特点</h4><p>对于依赖的模块，CMD 推崇<strong>依赖就近，延迟执行</strong>。也就是说，只有到<code>require</code>时依赖模块才执行。</p>\n<h3 id=\"CommonJS\"><a href=\"#CommonJS\" class=\"headerlink\" title=\"CommonJS\"></a>CommonJS</h3><p>CommonJS 规范为 CommonJS 小组所提出，目的是弥补 JavaScript 在服务器端缺少模块化机制，NodeJS、webpack 都是基于该规范来实现的。</p>\n<h4 id=\"CommonJS-的基本用法\"><a href=\"#CommonJS-的基本用法\" class=\"headerlink\" title=\"CommonJS 的基本用法\"></a>CommonJS 的基本用法</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//a.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"hello world\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//b.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">'./a'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">a();<span class=\"comment\">//\"hello world\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//或者</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//a2.js</span></span><br><span class=\"line\">exports.num = <span class=\"number\">1</span>;</span><br><span class=\"line\">exports.obj = &#123;<span class=\"attr\">xx</span>: <span class=\"number\">2</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//b2.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a2 = <span class=\"built_in\">require</span>(<span class=\"string\">'./a2'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a2);<span class=\"comment\">//&#123; num: 1, obj: &#123; xx: 2 &#125; &#125;</span></span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"CommonJS-的特点\"><a href=\"#CommonJS-的特点\" class=\"headerlink\" title=\"CommonJS 的特点\"></a>CommonJS 的特点</h4><ul>\n<li>所有代码都运行在模块作用域，不会污染全局作用域；</li>\n<li>模块是同步加载的，即只有加载完成，才能执行后面的操作；</li>\n<li>模块在首次执行后就会缓存，再次加载只返回缓存结果，如果想要再次执行，可清除缓存；</li>\n<li>CommonJS 输出是值的拷贝 (即，<code>require</code>返回的值是被输出的值的拷贝，模块内部的变化也不会影响这个值)。</li>\n</ul>\n<h3 id=\"ES6-Module\"><a href=\"#ES6-Module\" class=\"headerlink\" title=\"ES6 Module\"></a>ES6 Module</h3><p>ES6 Module 是 ES6 中规定的模块体系，相比上面提到的规范， ES6 Module 有更多的优势，有望成为浏览器和服务器通用的模块解决方案。</p>\n<h4 id=\"ES6-Module-的基本用法\"><a href=\"#ES6-Module-的基本用法\" class=\"headerlink\" title=\"ES6 Module 的基本用法\"></a>ES6 Module 的基本用法</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//a.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'lin'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> age = <span class=\"number\">13</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> job = <span class=\"string\">'ninja'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; name, age, job&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//b.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; name, age, job&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./a.js'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(name, age, job);<span class=\"comment\">// lin 13 ninja</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//或者</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//a2.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'default '</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//b2.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> customName <span class=\"keyword\">from</span> <span class=\"string\">'./a2.js'</span>;</span><br><span class=\"line\">customName(); <span class=\"comment\">// 'default'</span></span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"ES6-Module-的特点-对比-CommonJS\"><a href=\"#ES6-Module-的特点-对比-CommonJS\" class=\"headerlink\" title=\"ES6 Module 的特点 (对比 CommonJS)\"></a>ES6 Module 的特点 (对比 CommonJS)</h4><ul>\n<li>CommonJS 模块是运行时加载，ES6 Module 是编译时输出接口；</li>\n<li>CommonJS 加载的是整个模块，将所有的接口全部加载进来，ES6 Module 可以单独加载其中的某个接口；</li>\n<li>CommonJS 输出是值的拷贝，ES6 Module 输出的是值的引用，被输出模块的内部的改变会影响引用的改变；</li>\n<li>CommonJS <code>this</code>指向当前模块，ES6 Module <code>this</code>指向<code>undefined</code>;</li>\n</ul>\n<p>目前浏览器对 ES6 Module 兼容还不太好，我们平时在 webpack 中使用的<code>export</code>/<code>import</code>，会被打包为<code>exports</code>/<code>require</code>。</p>\n<h3 id=\"写在后面\"><a href=\"#写在后面\" class=\"headerlink\" title=\"写在后面\"></a>写在后面</h3><p>这里比较宽泛地把 JavaScript 中的几大模块化规范列举出来，希望借此对 JavaScript 模块化有大致的认识，而未对细节展开具体分析，感兴趣的可以自行探索。</p>\n<p>原文地址 <a href=\"https://juejin.im/post/5db95e3a6fb9a020704bcd8d\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5db95e3a6fb9a020704bcd8d</a></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>回想起之前的一次面试，第一轮面试官问我 AMD 和 CMD 的区别，我只回答说 AMD 是提前加载，CMD 是按需加载。第二轮面试官又问了我 CommonJS 和 ES6 Module 的区别，emmm…，我大致回答说新的比旧的好~~，虽然面试官并没有说什么，不过显然这样的答案并不是有助于面试、有助于自己的技术积累的。</p>\n<p>所以有必要进行一次梳理，以便更清晰地了解它们的特点及差异。</p>","more":"<h3 id=\"AMD\"><a href=\"#AMD\" class=\"headerlink\" title=\"AMD\"></a>AMD</h3><p>AMD 一开始是 CommonJS 规范中的一个草案，全称是 Asynchronous Module Definition，即异步模块加载机制。后来由该草案的作者以 RequireJS 实现了 AMD 规范，所以一般说 AMD 也是指 RequireJS。</p>\n<h4 id=\"RequireJS-的基本用法\"><a href=\"#RequireJS-的基本用法\" class=\"headerlink\" title=\"RequireJS 的基本用法\"></a>RequireJS 的基本用法</h4><p>通过<code>define</code>来定义一个模块，使用<code>require</code>可以导入定义的模块。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//a.js</span></span><br><span class=\"line\"><span class=\"comment\">//define可以传入三个参数，分别是字符串-模块名、数组-依赖模块、函数-回调函数</span></span><br><span class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// b.js</span></span><br><span class=\"line\"><span class=\"comment\">//数组中声明需要加载的模块，可以是模块名、js文件路径</span></span><br><span class=\"line\"><span class=\"built_in\">require</span>([<span class=\"string\">'a'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a);<span class=\"comment\">// 1</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"RequireJS-的特点\"><a href=\"#RequireJS-的特点\" class=\"headerlink\" title=\"RequireJS 的特点\"></a>RequireJS 的特点</h4><p>对于依赖的模块，AMD 推崇<strong>依赖前置，提前执行</strong>。也就是说，在<code>define</code>方法里传入的依赖模块 (数组)，会在一开始就下载并执行。</p>\n<h3 id=\"CMD\"><a href=\"#CMD\" class=\"headerlink\" title=\"CMD\"></a>CMD</h3><p>CMD 是 SeaJS 在推广过程中生产的对模块定义的规范，在 Web 浏览器端的模块加载器中，SeaJS 与 RequireJS 并称，SeaJS 作者为阿里的玉伯。</p>\n<h4 id=\"SeaJS-的基本用法\"><a href=\"#SeaJS-的基本用法\" class=\"headerlink\" title=\"SeaJS 的基本用法\"></a>SeaJS 的基本用法</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//a.js</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* define 接受 factory 参数，factory 可以是一个函数，也可以是一个对象或字符串，</span></span><br><span class=\"line\"><span class=\"comment\">* factory 为对象、字符串时，表示模块的接口就是该对象、字符串。</span></span><br><span class=\"line\"><span class=\"comment\">* define 也可以接受两个以上参数。字符串 id 表示模块标识，数组 deps 是模块依赖.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require, exports, module</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> $ = <span class=\"built_in\">require</span>(<span class=\"string\">'jquery'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  exports.setColor = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    $(<span class=\"string\">'body'</span>).css(<span class=\"string\">'color'</span>,<span class=\"string\">'#333'</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//b.js</span></span><br><span class=\"line\"><span class=\"comment\">//数组中声明需要加载的模块，可以是模块名、js文件路径</span></span><br><span class=\"line\">seajs.use([<span class=\"string\">'a'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a</span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">'#el'</span>).click(a.setColor);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"SeaJS-的特点\"><a href=\"#SeaJS-的特点\" class=\"headerlink\" title=\"SeaJS 的特点\"></a>SeaJS 的特点</h4><p>对于依赖的模块，CMD 推崇<strong>依赖就近，延迟执行</strong>。也就是说，只有到<code>require</code>时依赖模块才执行。</p>\n<h3 id=\"CommonJS\"><a href=\"#CommonJS\" class=\"headerlink\" title=\"CommonJS\"></a>CommonJS</h3><p>CommonJS 规范为 CommonJS 小组所提出，目的是弥补 JavaScript 在服务器端缺少模块化机制，NodeJS、webpack 都是基于该规范来实现的。</p>\n<h4 id=\"CommonJS-的基本用法\"><a href=\"#CommonJS-的基本用法\" class=\"headerlink\" title=\"CommonJS 的基本用法\"></a>CommonJS 的基本用法</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//a.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"hello world\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//b.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">'./a'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">a();<span class=\"comment\">//\"hello world\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//或者</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//a2.js</span></span><br><span class=\"line\">exports.num = <span class=\"number\">1</span>;</span><br><span class=\"line\">exports.obj = &#123;<span class=\"attr\">xx</span>: <span class=\"number\">2</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//b2.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a2 = <span class=\"built_in\">require</span>(<span class=\"string\">'./a2'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a2);<span class=\"comment\">//&#123; num: 1, obj: &#123; xx: 2 &#125; &#125;</span></span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"CommonJS-的特点\"><a href=\"#CommonJS-的特点\" class=\"headerlink\" title=\"CommonJS 的特点\"></a>CommonJS 的特点</h4><ul>\n<li>所有代码都运行在模块作用域，不会污染全局作用域；</li>\n<li>模块是同步加载的，即只有加载完成，才能执行后面的操作；</li>\n<li>模块在首次执行后就会缓存，再次加载只返回缓存结果，如果想要再次执行，可清除缓存；</li>\n<li>CommonJS 输出是值的拷贝 (即，<code>require</code>返回的值是被输出的值的拷贝，模块内部的变化也不会影响这个值)。</li>\n</ul>\n<h3 id=\"ES6-Module\"><a href=\"#ES6-Module\" class=\"headerlink\" title=\"ES6 Module\"></a>ES6 Module</h3><p>ES6 Module 是 ES6 中规定的模块体系，相比上面提到的规范， ES6 Module 有更多的优势，有望成为浏览器和服务器通用的模块解决方案。</p>\n<h4 id=\"ES6-Module-的基本用法\"><a href=\"#ES6-Module-的基本用法\" class=\"headerlink\" title=\"ES6 Module 的基本用法\"></a>ES6 Module 的基本用法</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//a.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'lin'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> age = <span class=\"number\">13</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> job = <span class=\"string\">'ninja'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; name, age, job&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//b.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; name, age, job&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./a.js'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(name, age, job);<span class=\"comment\">// lin 13 ninja</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//或者</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//a2.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'default '</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//b2.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> customName <span class=\"keyword\">from</span> <span class=\"string\">'./a2.js'</span>;</span><br><span class=\"line\">customName(); <span class=\"comment\">// 'default'</span></span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"ES6-Module-的特点-对比-CommonJS\"><a href=\"#ES6-Module-的特点-对比-CommonJS\" class=\"headerlink\" title=\"ES6 Module 的特点 (对比 CommonJS)\"></a>ES6 Module 的特点 (对比 CommonJS)</h4><ul>\n<li>CommonJS 模块是运行时加载，ES6 Module 是编译时输出接口；</li>\n<li>CommonJS 加载的是整个模块，将所有的接口全部加载进来，ES6 Module 可以单独加载其中的某个接口；</li>\n<li>CommonJS 输出是值的拷贝，ES6 Module 输出的是值的引用，被输出模块的内部的改变会影响引用的改变；</li>\n<li>CommonJS <code>this</code>指向当前模块，ES6 Module <code>this</code>指向<code>undefined</code>;</li>\n</ul>\n<p>目前浏览器对 ES6 Module 兼容还不太好，我们平时在 webpack 中使用的<code>export</code>/<code>import</code>，会被打包为<code>exports</code>/<code>require</code>。</p>\n<h3 id=\"写在后面\"><a href=\"#写在后面\" class=\"headerlink\" title=\"写在后面\"></a>写在后面</h3><p>这里比较宽泛地把 JavaScript 中的几大模块化规范列举出来，希望借此对 JavaScript 模块化有大致的认识，而未对细节展开具体分析，感兴趣的可以自行探索。</p>\n<p>原文地址 <a href=\"https://juejin.im/post/5db95e3a6fb9a020704bcd8d\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5db95e3a6fb9a020704bcd8d</a></p>"},{"layout":"[post]","title":"CSRF和XSS","date":"2019-09-03T07:41:47.000Z","_content":"## CSRF和XSS\n前端安全主要分为两种：\n1. CSRF\n2. XSS\n<!-- more -->\n### CSRF\n**CSRF跨站点请求伪造(Cross—Site Request Forgery)**\n\n![image](csrf.png)\n\n攻击者盗用了你的身份，以你的名义发送恶意请求，对服务器来说这个请求是完全合法的，但是却完成了攻击者所期望的一个操作，比如以你的名义发送邮件、发消息，盗取你的账号，添加系统管理员，甚至于购买商品、虚拟货币转账等。 如下：其中Web A为存在CSRF漏洞的网站，Web B为攻击者构建的恶意网站，User C为Web A网站的合法用户。\n\n#### 漏洞检测\n检测CSRF漏洞是一项比较繁琐的工作，最简单的方法就是抓取一个正常请求的数据包，去掉Referer字段后再重新提交，如果该提交还有效，那么基本上可以确定存在CSRF漏洞。\n\n#### 防御方式\n\n##### token形式\nCSRF 攻击之所以能够成功，是因为黑客可以完全伪造用户的请求，该请求中所有的用户验证信息都是存在于 cookie 中，因此黑客可以在不知道这些验证信息的情况下直接利用用户自己的 cookie 来通过安全验证。要抵御 CSRF，关键在于在请求中放入黑客所不能伪造的信息，并且该信息不存在于 cookie 之中。可以在 HTTP 请求中以参数的形式加入一个随机产生的 token，并在服务器端建立一个拦截器来验证这个 token，如果请求中没有 token 或者 token 内容不正确，则认为可能是 CSRF 攻击而拒绝该请求。\n\n这种方法要比检查 Referer 要安全一些，token 可以在用户登陆后产生并放于 session 之中，然后在每次请求时把 token 从 session 中拿出，与请求中的 token 进行比对，但这种方法的难点在于如何把 token 以参数的形式加入请求。对于 GET 请求，token 将附在请求地址之后，这样 URL 就变成 ```http://url?csrftoken=tokenvalue```。 而对于 POST 请求来说，要在 form 的最后加上```<input type=”hidden” name=”csrftoken” value=”tokenvalue”/>```\n，这样就把 token 以参数的形式加入请求了。但是，在一个网站中，可以接受请求的地方非常多，要对于每一个请求都加上 token 是很麻烦的，并且很容易漏掉，通常使用的方法就是在每次页面加载时，使用 javascript 遍历整个 dom 树，对于 dom 中所有的 a 和 form 标签后加入 token。这样可以解决大部分的请求，但是对于在页面加载之后动态生成的 html 代码，这种方法就没有作用，还需要程序员在编码时手动添加 token。\n\n 该方法还有一个缺点是难以保证 token 本身的安全。特别是在一些论坛之类支持用户自己发表内容的网站，黑客可以在上面发布自己个人网站的地址。由于系统也会在这个地址后面加上 token，黑客可以在自己的网站上得到这个 token，并马上就可以发动 CSRF 攻击。为了避免这一点，系统可以在添加 token 的时候增加一个判断，如果这个链接是链到自己本站的，就在后面添加 token，如果是通向外网则不加。不过，即使这个 csrftoken 不以参数的形式附加在请求之中，黑客的网站也同样可以通过 Referer 来得到这个 token 值以发动 CSRF 攻击。这也是一些用户喜欢手动关闭浏览器 Referer 功能的原因。\n##### Referer验证\n根据 HTTP 协议，在 HTTP 头中有一个字段叫 Referer，它记录了该 HTTP 请求的来源地址。在通常情况下，访问一个安全受限页面的请求来自于同一个网站，比如需要访问 ```http://bank.example/withdraw?account=bob&amount=1000000&for=Mallory```，用户必须先登陆 bank.example，然后通过点击页面上的按钮来触发转账事件。这时，该转帐请求的 Referer 值就会是转账按钮所在的页面的 URL，通常是以 bank.example 域名开头的地址。而如果黑客要对银行网站实施 CSRF 攻击，他只能在他自己的网站构造请求，当用户通过黑客的网站发送请求到银行时，该请求的 Referer 是指向黑客自己的网站。因此，要防御 CSRF 攻击，银行网站只需要对于每一个转账请求验证其 Referer 值，如果是以 bank.example 开头的域名，则说明该请求是来自银行网站自己的请求，是合法的。如果 Referer 是其他网站的话，则有可能是黑客的 CSRF 攻击，拒绝该请求。\n\n这种方法的显而易见的好处就是简单易行，网站的普通开发人员不需要操心 CSRF 的漏洞，只需要在最后给所有安全敏感的请求统一增加一个拦截器来检查 Referer 的值就可以。特别是对于当前现有的系统，不需要改变当前系统的任何已有代码和逻辑，没有风险，非常便捷。\n\n然而，这种方法并非万无一失。Referer 的值是由浏览器提供的，虽然 HTTP 协议上有明确的要求，但是每个浏览器对于 Referer 的具体实现可能有差别，并不能保证浏览器自身没有安全漏洞。使用验证 Referer 值的方法，就是把安全性都依赖于第三方（即浏览器）来保障，从理论上来讲，这样并不安全。事实上，对于某些浏览器，比如 IE6 或 FF2，目前已经有一些方法可以篡改 Referer 值。如果 bank.example 网站支持 IE6 浏览器，黑客完全可以把用户浏览器的 Referer 值设为以 bank.example 域名开头的地址，这样就可以通过验证，从而进行 CSRF 攻击。\n\n即便是使用最新的浏览器，黑客无法篡改 Referer 值，这种方法仍然有问题。因为 Referer 值会记录下用户的访问来源，有些用户认为这样会侵犯到他们自己的隐私权，特别是有些组织担心 Referer 值会把组织内网中的某些信息泄露到外网中。因此，用户自己可以设置浏览器使其在发送请求时不再提供 Referer。当他们正常访问银行网站时，网站会因为请求没有 Referer 值而认为是 CSRF 攻击，拒绝合法用户的访问。\n##### 隐藏令牌\n这种方法也是使用 token 并进行验证，和上一种方法不同的是，这里并不是把 token 以参数的形式置于 HTTP 请求之中，而是把它放到 HTTP 头中自定义的属性里。通过 XMLHttpRequest 这个类，可以一次性给所有该类请求加上 csrftoken 这个 HTTP 头属性，并把 token 值放入其中。这样解决了上种方法在请求中加入 token 的不便，同时，通过 XMLHttpRequest 请求的地址不会被记录到浏览器的地址栏，也不用担心 token 会透过 Referer 泄露到其他网站中去。\n\n然而这种方法的局限性非常大。XMLHttpRequest 请求通常用于 Ajax 方法中对于页面局部的异步刷新，并非所有的请求都适合用这个类来发起，而且通过该类请求得到的页面不能被浏览器所记录下，从而进行前进，后退，刷新，收藏等操作，给用户带来不便。另外，对于没有进行 CSRF 防护的遗留系统来说，要采用这种方法来进行防护，要把所有请求都改为 XMLHttpRequest 请求，这样几乎是要重写整个网站，这代价无疑是不能接受的。\n\n### XSS\n**XSS跨域脚本攻击（Cross Site Scripting）**\n\n跨站脚本攻击是指恶意攻击者往Web页面里插入恶意Script代码，当用户浏览该页之时，嵌入其中Web里面的Script代码会被执行，从而达到恶意攻击用户的目的。\nxss漏洞通常是通过php的输出函数将javascript代码输出到html页面中，通过用户本地浏览器执行的，所以xss漏洞关键就是寻找参数未过滤的输出函数。\n\n#### 分类\n##### 反射型\n**非持久化**\n\n攻击者事先制作好攻击链接, 需要欺骗用户自己去点击链接才能触发XSS代码（服务器中没有这样的页面和内容），一般容易出现在搜索页面。\n##### 存储型XSS\n**持久化**\n\n代码是存储在服务器中的，如在个人信息或发表文章等地方，加入代码，如果没有过滤或过滤不严，那么这些代码将储存到服务器中，每当有用户访问该页面的时候都会触发代码执行，这种XSS非常危险，容易造成蠕虫，大量盗窃cookie（虽然还有种DOM型XSS，但是也还是包括在存储型XSS内）。\n\n##### DOM型XSS\n基于文档对象模型Document Objeet Model，DOM)的一种漏洞。DOM是一个与平台、编程语言无关的接口，它允许程序或脚本动态地访问和更新文档内容、结构和样式，处理后的结果能够成为显示页面的一部分。DOM中有很多对象，其中一些是用户可以操纵的，如uRI ，location，refelTer等。客户端的脚本程序可以通过DOM动态地检查和修改页面内容，它不依赖于提交数据到服务器端，而从客户端获得DOM中的数据在本地执行，如果DOM中的数据没有经过严格确认，就会产生DOM XSS漏洞。\n\n#### 防御措施\nXSS防御的总体思路是：**对输入(和URL参数)进行过滤，对输出进行编码。**\n##### 对输入和URL参数进行过滤(白名单和黑名单)\n##### 对输出进行编码\n##### 使用HTTPOnly保护用户信息","source":"_posts/CSRF和XSS.md","raw":"---\nlayout: '[post]'\ntitle: CSRF和XSS\ndate: 2019-09-03 15:41:47\ntags: 网络安全\n---\n## CSRF和XSS\n前端安全主要分为两种：\n1. CSRF\n2. XSS\n<!-- more -->\n### CSRF\n**CSRF跨站点请求伪造(Cross—Site Request Forgery)**\n\n![image](csrf.png)\n\n攻击者盗用了你的身份，以你的名义发送恶意请求，对服务器来说这个请求是完全合法的，但是却完成了攻击者所期望的一个操作，比如以你的名义发送邮件、发消息，盗取你的账号，添加系统管理员，甚至于购买商品、虚拟货币转账等。 如下：其中Web A为存在CSRF漏洞的网站，Web B为攻击者构建的恶意网站，User C为Web A网站的合法用户。\n\n#### 漏洞检测\n检测CSRF漏洞是一项比较繁琐的工作，最简单的方法就是抓取一个正常请求的数据包，去掉Referer字段后再重新提交，如果该提交还有效，那么基本上可以确定存在CSRF漏洞。\n\n#### 防御方式\n\n##### token形式\nCSRF 攻击之所以能够成功，是因为黑客可以完全伪造用户的请求，该请求中所有的用户验证信息都是存在于 cookie 中，因此黑客可以在不知道这些验证信息的情况下直接利用用户自己的 cookie 来通过安全验证。要抵御 CSRF，关键在于在请求中放入黑客所不能伪造的信息，并且该信息不存在于 cookie 之中。可以在 HTTP 请求中以参数的形式加入一个随机产生的 token，并在服务器端建立一个拦截器来验证这个 token，如果请求中没有 token 或者 token 内容不正确，则认为可能是 CSRF 攻击而拒绝该请求。\n\n这种方法要比检查 Referer 要安全一些，token 可以在用户登陆后产生并放于 session 之中，然后在每次请求时把 token 从 session 中拿出，与请求中的 token 进行比对，但这种方法的难点在于如何把 token 以参数的形式加入请求。对于 GET 请求，token 将附在请求地址之后，这样 URL 就变成 ```http://url?csrftoken=tokenvalue```。 而对于 POST 请求来说，要在 form 的最后加上```<input type=”hidden” name=”csrftoken” value=”tokenvalue”/>```\n，这样就把 token 以参数的形式加入请求了。但是，在一个网站中，可以接受请求的地方非常多，要对于每一个请求都加上 token 是很麻烦的，并且很容易漏掉，通常使用的方法就是在每次页面加载时，使用 javascript 遍历整个 dom 树，对于 dom 中所有的 a 和 form 标签后加入 token。这样可以解决大部分的请求，但是对于在页面加载之后动态生成的 html 代码，这种方法就没有作用，还需要程序员在编码时手动添加 token。\n\n 该方法还有一个缺点是难以保证 token 本身的安全。特别是在一些论坛之类支持用户自己发表内容的网站，黑客可以在上面发布自己个人网站的地址。由于系统也会在这个地址后面加上 token，黑客可以在自己的网站上得到这个 token，并马上就可以发动 CSRF 攻击。为了避免这一点，系统可以在添加 token 的时候增加一个判断，如果这个链接是链到自己本站的，就在后面添加 token，如果是通向外网则不加。不过，即使这个 csrftoken 不以参数的形式附加在请求之中，黑客的网站也同样可以通过 Referer 来得到这个 token 值以发动 CSRF 攻击。这也是一些用户喜欢手动关闭浏览器 Referer 功能的原因。\n##### Referer验证\n根据 HTTP 协议，在 HTTP 头中有一个字段叫 Referer，它记录了该 HTTP 请求的来源地址。在通常情况下，访问一个安全受限页面的请求来自于同一个网站，比如需要访问 ```http://bank.example/withdraw?account=bob&amount=1000000&for=Mallory```，用户必须先登陆 bank.example，然后通过点击页面上的按钮来触发转账事件。这时，该转帐请求的 Referer 值就会是转账按钮所在的页面的 URL，通常是以 bank.example 域名开头的地址。而如果黑客要对银行网站实施 CSRF 攻击，他只能在他自己的网站构造请求，当用户通过黑客的网站发送请求到银行时，该请求的 Referer 是指向黑客自己的网站。因此，要防御 CSRF 攻击，银行网站只需要对于每一个转账请求验证其 Referer 值，如果是以 bank.example 开头的域名，则说明该请求是来自银行网站自己的请求，是合法的。如果 Referer 是其他网站的话，则有可能是黑客的 CSRF 攻击，拒绝该请求。\n\n这种方法的显而易见的好处就是简单易行，网站的普通开发人员不需要操心 CSRF 的漏洞，只需要在最后给所有安全敏感的请求统一增加一个拦截器来检查 Referer 的值就可以。特别是对于当前现有的系统，不需要改变当前系统的任何已有代码和逻辑，没有风险，非常便捷。\n\n然而，这种方法并非万无一失。Referer 的值是由浏览器提供的，虽然 HTTP 协议上有明确的要求，但是每个浏览器对于 Referer 的具体实现可能有差别，并不能保证浏览器自身没有安全漏洞。使用验证 Referer 值的方法，就是把安全性都依赖于第三方（即浏览器）来保障，从理论上来讲，这样并不安全。事实上，对于某些浏览器，比如 IE6 或 FF2，目前已经有一些方法可以篡改 Referer 值。如果 bank.example 网站支持 IE6 浏览器，黑客完全可以把用户浏览器的 Referer 值设为以 bank.example 域名开头的地址，这样就可以通过验证，从而进行 CSRF 攻击。\n\n即便是使用最新的浏览器，黑客无法篡改 Referer 值，这种方法仍然有问题。因为 Referer 值会记录下用户的访问来源，有些用户认为这样会侵犯到他们自己的隐私权，特别是有些组织担心 Referer 值会把组织内网中的某些信息泄露到外网中。因此，用户自己可以设置浏览器使其在发送请求时不再提供 Referer。当他们正常访问银行网站时，网站会因为请求没有 Referer 值而认为是 CSRF 攻击，拒绝合法用户的访问。\n##### 隐藏令牌\n这种方法也是使用 token 并进行验证，和上一种方法不同的是，这里并不是把 token 以参数的形式置于 HTTP 请求之中，而是把它放到 HTTP 头中自定义的属性里。通过 XMLHttpRequest 这个类，可以一次性给所有该类请求加上 csrftoken 这个 HTTP 头属性，并把 token 值放入其中。这样解决了上种方法在请求中加入 token 的不便，同时，通过 XMLHttpRequest 请求的地址不会被记录到浏览器的地址栏，也不用担心 token 会透过 Referer 泄露到其他网站中去。\n\n然而这种方法的局限性非常大。XMLHttpRequest 请求通常用于 Ajax 方法中对于页面局部的异步刷新，并非所有的请求都适合用这个类来发起，而且通过该类请求得到的页面不能被浏览器所记录下，从而进行前进，后退，刷新，收藏等操作，给用户带来不便。另外，对于没有进行 CSRF 防护的遗留系统来说，要采用这种方法来进行防护，要把所有请求都改为 XMLHttpRequest 请求，这样几乎是要重写整个网站，这代价无疑是不能接受的。\n\n### XSS\n**XSS跨域脚本攻击（Cross Site Scripting）**\n\n跨站脚本攻击是指恶意攻击者往Web页面里插入恶意Script代码，当用户浏览该页之时，嵌入其中Web里面的Script代码会被执行，从而达到恶意攻击用户的目的。\nxss漏洞通常是通过php的输出函数将javascript代码输出到html页面中，通过用户本地浏览器执行的，所以xss漏洞关键就是寻找参数未过滤的输出函数。\n\n#### 分类\n##### 反射型\n**非持久化**\n\n攻击者事先制作好攻击链接, 需要欺骗用户自己去点击链接才能触发XSS代码（服务器中没有这样的页面和内容），一般容易出现在搜索页面。\n##### 存储型XSS\n**持久化**\n\n代码是存储在服务器中的，如在个人信息或发表文章等地方，加入代码，如果没有过滤或过滤不严，那么这些代码将储存到服务器中，每当有用户访问该页面的时候都会触发代码执行，这种XSS非常危险，容易造成蠕虫，大量盗窃cookie（虽然还有种DOM型XSS，但是也还是包括在存储型XSS内）。\n\n##### DOM型XSS\n基于文档对象模型Document Objeet Model，DOM)的一种漏洞。DOM是一个与平台、编程语言无关的接口，它允许程序或脚本动态地访问和更新文档内容、结构和样式，处理后的结果能够成为显示页面的一部分。DOM中有很多对象，其中一些是用户可以操纵的，如uRI ，location，refelTer等。客户端的脚本程序可以通过DOM动态地检查和修改页面内容，它不依赖于提交数据到服务器端，而从客户端获得DOM中的数据在本地执行，如果DOM中的数据没有经过严格确认，就会产生DOM XSS漏洞。\n\n#### 防御措施\nXSS防御的总体思路是：**对输入(和URL参数)进行过滤，对输出进行编码。**\n##### 对输入和URL参数进行过滤(白名单和黑名单)\n##### 对输出进行编码\n##### 使用HTTPOnly保护用户信息","slug":"CSRF和XSS","published":1,"updated":"2020-04-25T07:45:04.000Z","comments":1,"photos":[],"link":"","_id":"ckbftlm5b00057w2p49s6b664","content":"<h2 id=\"CSRF和XSS\"><a href=\"#CSRF和XSS\" class=\"headerlink\" title=\"CSRF和XSS\"></a>CSRF和XSS</h2><p>前端安全主要分为两种：</p>\n<ol>\n<li>CSRF</li>\n<li>XSS<a id=\"more\"></a>\n<h3 id=\"CSRF\"><a href=\"#CSRF\" class=\"headerlink\" title=\"CSRF\"></a>CSRF</h3></li>\n</ol>\n<p><strong>CSRF跨站点请求伪造(Cross—Site Request Forgery)</strong></p>\n<p><img src=\"/2019/09/03/CSRF%E5%92%8CXSS/csrf.png\" alt=\"image\"></p>\n<p>攻击者盗用了你的身份，以你的名义发送恶意请求，对服务器来说这个请求是完全合法的，但是却完成了攻击者所期望的一个操作，比如以你的名义发送邮件、发消息，盗取你的账号，添加系统管理员，甚至于购买商品、虚拟货币转账等。 如下：其中Web A为存在CSRF漏洞的网站，Web B为攻击者构建的恶意网站，User C为Web A网站的合法用户。</p>\n<h4 id=\"漏洞检测\"><a href=\"#漏洞检测\" class=\"headerlink\" title=\"漏洞检测\"></a>漏洞检测</h4><p>检测CSRF漏洞是一项比较繁琐的工作，最简单的方法就是抓取一个正常请求的数据包，去掉Referer字段后再重新提交，如果该提交还有效，那么基本上可以确定存在CSRF漏洞。</p>\n<h4 id=\"防御方式\"><a href=\"#防御方式\" class=\"headerlink\" title=\"防御方式\"></a>防御方式</h4><h5 id=\"token形式\"><a href=\"#token形式\" class=\"headerlink\" title=\"token形式\"></a>token形式</h5><p>CSRF 攻击之所以能够成功，是因为黑客可以完全伪造用户的请求，该请求中所有的用户验证信息都是存在于 cookie 中，因此黑客可以在不知道这些验证信息的情况下直接利用用户自己的 cookie 来通过安全验证。要抵御 CSRF，关键在于在请求中放入黑客所不能伪造的信息，并且该信息不存在于 cookie 之中。可以在 HTTP 请求中以参数的形式加入一个随机产生的 token，并在服务器端建立一个拦截器来验证这个 token，如果请求中没有 token 或者 token 内容不正确，则认为可能是 CSRF 攻击而拒绝该请求。</p>\n<p>这种方法要比检查 Referer 要安全一些，token 可以在用户登陆后产生并放于 session 之中，然后在每次请求时把 token 从 session 中拿出，与请求中的 token 进行比对，但这种方法的难点在于如何把 token 以参数的形式加入请求。对于 GET 请求，token 将附在请求地址之后，这样 URL 就变成 <code>http://url?csrftoken=tokenvalue</code>。 而对于 POST 请求来说，要在 form 的最后加上<code>&lt;input type=”hidden” name=”csrftoken” value=”tokenvalue”/&gt;</code><br>，这样就把 token 以参数的形式加入请求了。但是，在一个网站中，可以接受请求的地方非常多，要对于每一个请求都加上 token 是很麻烦的，并且很容易漏掉，通常使用的方法就是在每次页面加载时，使用 javascript 遍历整个 dom 树，对于 dom 中所有的 a 和 form 标签后加入 token。这样可以解决大部分的请求，但是对于在页面加载之后动态生成的 html 代码，这种方法就没有作用，还需要程序员在编码时手动添加 token。</p>\n<p> 该方法还有一个缺点是难以保证 token 本身的安全。特别是在一些论坛之类支持用户自己发表内容的网站，黑客可以在上面发布自己个人网站的地址。由于系统也会在这个地址后面加上 token，黑客可以在自己的网站上得到这个 token，并马上就可以发动 CSRF 攻击。为了避免这一点，系统可以在添加 token 的时候增加一个判断，如果这个链接是链到自己本站的，就在后面添加 token，如果是通向外网则不加。不过，即使这个 csrftoken 不以参数的形式附加在请求之中，黑客的网站也同样可以通过 Referer 来得到这个 token 值以发动 CSRF 攻击。这也是一些用户喜欢手动关闭浏览器 Referer 功能的原因。</p>\n<h5 id=\"Referer验证\"><a href=\"#Referer验证\" class=\"headerlink\" title=\"Referer验证\"></a>Referer验证</h5><p>根据 HTTP 协议，在 HTTP 头中有一个字段叫 Referer，它记录了该 HTTP 请求的来源地址。在通常情况下，访问一个安全受限页面的请求来自于同一个网站，比如需要访问 <code>http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=Mallory</code>，用户必须先登陆 bank.example，然后通过点击页面上的按钮来触发转账事件。这时，该转帐请求的 Referer 值就会是转账按钮所在的页面的 URL，通常是以 bank.example 域名开头的地址。而如果黑客要对银行网站实施 CSRF 攻击，他只能在他自己的网站构造请求，当用户通过黑客的网站发送请求到银行时，该请求的 Referer 是指向黑客自己的网站。因此，要防御 CSRF 攻击，银行网站只需要对于每一个转账请求验证其 Referer 值，如果是以 bank.example 开头的域名，则说明该请求是来自银行网站自己的请求，是合法的。如果 Referer 是其他网站的话，则有可能是黑客的 CSRF 攻击，拒绝该请求。</p>\n<p>这种方法的显而易见的好处就是简单易行，网站的普通开发人员不需要操心 CSRF 的漏洞，只需要在最后给所有安全敏感的请求统一增加一个拦截器来检查 Referer 的值就可以。特别是对于当前现有的系统，不需要改变当前系统的任何已有代码和逻辑，没有风险，非常便捷。</p>\n<p>然而，这种方法并非万无一失。Referer 的值是由浏览器提供的，虽然 HTTP 协议上有明确的要求，但是每个浏览器对于 Referer 的具体实现可能有差别，并不能保证浏览器自身没有安全漏洞。使用验证 Referer 值的方法，就是把安全性都依赖于第三方（即浏览器）来保障，从理论上来讲，这样并不安全。事实上，对于某些浏览器，比如 IE6 或 FF2，目前已经有一些方法可以篡改 Referer 值。如果 bank.example 网站支持 IE6 浏览器，黑客完全可以把用户浏览器的 Referer 值设为以 bank.example 域名开头的地址，这样就可以通过验证，从而进行 CSRF 攻击。</p>\n<p>即便是使用最新的浏览器，黑客无法篡改 Referer 值，这种方法仍然有问题。因为 Referer 值会记录下用户的访问来源，有些用户认为这样会侵犯到他们自己的隐私权，特别是有些组织担心 Referer 值会把组织内网中的某些信息泄露到外网中。因此，用户自己可以设置浏览器使其在发送请求时不再提供 Referer。当他们正常访问银行网站时，网站会因为请求没有 Referer 值而认为是 CSRF 攻击，拒绝合法用户的访问。</p>\n<h5 id=\"隐藏令牌\"><a href=\"#隐藏令牌\" class=\"headerlink\" title=\"隐藏令牌\"></a>隐藏令牌</h5><p>这种方法也是使用 token 并进行验证，和上一种方法不同的是，这里并不是把 token 以参数的形式置于 HTTP 请求之中，而是把它放到 HTTP 头中自定义的属性里。通过 XMLHttpRequest 这个类，可以一次性给所有该类请求加上 csrftoken 这个 HTTP 头属性，并把 token 值放入其中。这样解决了上种方法在请求中加入 token 的不便，同时，通过 XMLHttpRequest 请求的地址不会被记录到浏览器的地址栏，也不用担心 token 会透过 Referer 泄露到其他网站中去。</p>\n<p>然而这种方法的局限性非常大。XMLHttpRequest 请求通常用于 Ajax 方法中对于页面局部的异步刷新，并非所有的请求都适合用这个类来发起，而且通过该类请求得到的页面不能被浏览器所记录下，从而进行前进，后退，刷新，收藏等操作，给用户带来不便。另外，对于没有进行 CSRF 防护的遗留系统来说，要采用这种方法来进行防护，要把所有请求都改为 XMLHttpRequest 请求，这样几乎是要重写整个网站，这代价无疑是不能接受的。</p>\n<h3 id=\"XSS\"><a href=\"#XSS\" class=\"headerlink\" title=\"XSS\"></a>XSS</h3><p><strong>XSS跨域脚本攻击（Cross Site Scripting）</strong></p>\n<p>跨站脚本攻击是指恶意攻击者往Web页面里插入恶意Script代码，当用户浏览该页之时，嵌入其中Web里面的Script代码会被执行，从而达到恶意攻击用户的目的。<br>xss漏洞通常是通过php的输出函数将javascript代码输出到html页面中，通过用户本地浏览器执行的，所以xss漏洞关键就是寻找参数未过滤的输出函数。</p>\n<h4 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h4><h5 id=\"反射型\"><a href=\"#反射型\" class=\"headerlink\" title=\"反射型\"></a>反射型</h5><p><strong>非持久化</strong></p>\n<p>攻击者事先制作好攻击链接, 需要欺骗用户自己去点击链接才能触发XSS代码（服务器中没有这样的页面和内容），一般容易出现在搜索页面。</p>\n<h5 id=\"存储型XSS\"><a href=\"#存储型XSS\" class=\"headerlink\" title=\"存储型XSS\"></a>存储型XSS</h5><p><strong>持久化</strong></p>\n<p>代码是存储在服务器中的，如在个人信息或发表文章等地方，加入代码，如果没有过滤或过滤不严，那么这些代码将储存到服务器中，每当有用户访问该页面的时候都会触发代码执行，这种XSS非常危险，容易造成蠕虫，大量盗窃cookie（虽然还有种DOM型XSS，但是也还是包括在存储型XSS内）。</p>\n<h5 id=\"DOM型XSS\"><a href=\"#DOM型XSS\" class=\"headerlink\" title=\"DOM型XSS\"></a>DOM型XSS</h5><p>基于文档对象模型Document Objeet Model，DOM)的一种漏洞。DOM是一个与平台、编程语言无关的接口，它允许程序或脚本动态地访问和更新文档内容、结构和样式，处理后的结果能够成为显示页面的一部分。DOM中有很多对象，其中一些是用户可以操纵的，如uRI ，location，refelTer等。客户端的脚本程序可以通过DOM动态地检查和修改页面内容，它不依赖于提交数据到服务器端，而从客户端获得DOM中的数据在本地执行，如果DOM中的数据没有经过严格确认，就会产生DOM XSS漏洞。</p>\n<h4 id=\"防御措施\"><a href=\"#防御措施\" class=\"headerlink\" title=\"防御措施\"></a>防御措施</h4><p>XSS防御的总体思路是：<strong>对输入(和URL参数)进行过滤，对输出进行编码。</strong></p>\n<h5 id=\"对输入和URL参数进行过滤-白名单和黑名单\"><a href=\"#对输入和URL参数进行过滤-白名单和黑名单\" class=\"headerlink\" title=\"对输入和URL参数进行过滤(白名单和黑名单)\"></a>对输入和URL参数进行过滤(白名单和黑名单)</h5><h5 id=\"对输出进行编码\"><a href=\"#对输出进行编码\" class=\"headerlink\" title=\"对输出进行编码\"></a>对输出进行编码</h5><h5 id=\"使用HTTPOnly保护用户信息\"><a href=\"#使用HTTPOnly保护用户信息\" class=\"headerlink\" title=\"使用HTTPOnly保护用户信息\"></a>使用HTTPOnly保护用户信息</h5>","site":{"data":{}},"excerpt":"<h2 id=\"CSRF和XSS\"><a href=\"#CSRF和XSS\" class=\"headerlink\" title=\"CSRF和XSS\"></a>CSRF和XSS</h2><p>前端安全主要分为两种：</p>\n<ol>\n<li>CSRF</li>\n<li>XSS</li></ol>","more":"<h3 id=\"CSRF\"><a href=\"#CSRF\" class=\"headerlink\" title=\"CSRF\"></a>CSRF</h3>\n\n<p><strong>CSRF跨站点请求伪造(Cross—Site Request Forgery)</strong></p>\n<p><img src=\"/2019/09/03/CSRF%E5%92%8CXSS/csrf.png\" alt=\"image\"></p>\n<p>攻击者盗用了你的身份，以你的名义发送恶意请求，对服务器来说这个请求是完全合法的，但是却完成了攻击者所期望的一个操作，比如以你的名义发送邮件、发消息，盗取你的账号，添加系统管理员，甚至于购买商品、虚拟货币转账等。 如下：其中Web A为存在CSRF漏洞的网站，Web B为攻击者构建的恶意网站，User C为Web A网站的合法用户。</p>\n<h4 id=\"漏洞检测\"><a href=\"#漏洞检测\" class=\"headerlink\" title=\"漏洞检测\"></a>漏洞检测</h4><p>检测CSRF漏洞是一项比较繁琐的工作，最简单的方法就是抓取一个正常请求的数据包，去掉Referer字段后再重新提交，如果该提交还有效，那么基本上可以确定存在CSRF漏洞。</p>\n<h4 id=\"防御方式\"><a href=\"#防御方式\" class=\"headerlink\" title=\"防御方式\"></a>防御方式</h4><h5 id=\"token形式\"><a href=\"#token形式\" class=\"headerlink\" title=\"token形式\"></a>token形式</h5><p>CSRF 攻击之所以能够成功，是因为黑客可以完全伪造用户的请求，该请求中所有的用户验证信息都是存在于 cookie 中，因此黑客可以在不知道这些验证信息的情况下直接利用用户自己的 cookie 来通过安全验证。要抵御 CSRF，关键在于在请求中放入黑客所不能伪造的信息，并且该信息不存在于 cookie 之中。可以在 HTTP 请求中以参数的形式加入一个随机产生的 token，并在服务器端建立一个拦截器来验证这个 token，如果请求中没有 token 或者 token 内容不正确，则认为可能是 CSRF 攻击而拒绝该请求。</p>\n<p>这种方法要比检查 Referer 要安全一些，token 可以在用户登陆后产生并放于 session 之中，然后在每次请求时把 token 从 session 中拿出，与请求中的 token 进行比对，但这种方法的难点在于如何把 token 以参数的形式加入请求。对于 GET 请求，token 将附在请求地址之后，这样 URL 就变成 <code>http://url?csrftoken=tokenvalue</code>。 而对于 POST 请求来说，要在 form 的最后加上<code>&lt;input type=”hidden” name=”csrftoken” value=”tokenvalue”/&gt;</code><br>，这样就把 token 以参数的形式加入请求了。但是，在一个网站中，可以接受请求的地方非常多，要对于每一个请求都加上 token 是很麻烦的，并且很容易漏掉，通常使用的方法就是在每次页面加载时，使用 javascript 遍历整个 dom 树，对于 dom 中所有的 a 和 form 标签后加入 token。这样可以解决大部分的请求，但是对于在页面加载之后动态生成的 html 代码，这种方法就没有作用，还需要程序员在编码时手动添加 token。</p>\n<p> 该方法还有一个缺点是难以保证 token 本身的安全。特别是在一些论坛之类支持用户自己发表内容的网站，黑客可以在上面发布自己个人网站的地址。由于系统也会在这个地址后面加上 token，黑客可以在自己的网站上得到这个 token，并马上就可以发动 CSRF 攻击。为了避免这一点，系统可以在添加 token 的时候增加一个判断，如果这个链接是链到自己本站的，就在后面添加 token，如果是通向外网则不加。不过，即使这个 csrftoken 不以参数的形式附加在请求之中，黑客的网站也同样可以通过 Referer 来得到这个 token 值以发动 CSRF 攻击。这也是一些用户喜欢手动关闭浏览器 Referer 功能的原因。</p>\n<h5 id=\"Referer验证\"><a href=\"#Referer验证\" class=\"headerlink\" title=\"Referer验证\"></a>Referer验证</h5><p>根据 HTTP 协议，在 HTTP 头中有一个字段叫 Referer，它记录了该 HTTP 请求的来源地址。在通常情况下，访问一个安全受限页面的请求来自于同一个网站，比如需要访问 <code>http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=Mallory</code>，用户必须先登陆 bank.example，然后通过点击页面上的按钮来触发转账事件。这时，该转帐请求的 Referer 值就会是转账按钮所在的页面的 URL，通常是以 bank.example 域名开头的地址。而如果黑客要对银行网站实施 CSRF 攻击，他只能在他自己的网站构造请求，当用户通过黑客的网站发送请求到银行时，该请求的 Referer 是指向黑客自己的网站。因此，要防御 CSRF 攻击，银行网站只需要对于每一个转账请求验证其 Referer 值，如果是以 bank.example 开头的域名，则说明该请求是来自银行网站自己的请求，是合法的。如果 Referer 是其他网站的话，则有可能是黑客的 CSRF 攻击，拒绝该请求。</p>\n<p>这种方法的显而易见的好处就是简单易行，网站的普通开发人员不需要操心 CSRF 的漏洞，只需要在最后给所有安全敏感的请求统一增加一个拦截器来检查 Referer 的值就可以。特别是对于当前现有的系统，不需要改变当前系统的任何已有代码和逻辑，没有风险，非常便捷。</p>\n<p>然而，这种方法并非万无一失。Referer 的值是由浏览器提供的，虽然 HTTP 协议上有明确的要求，但是每个浏览器对于 Referer 的具体实现可能有差别，并不能保证浏览器自身没有安全漏洞。使用验证 Referer 值的方法，就是把安全性都依赖于第三方（即浏览器）来保障，从理论上来讲，这样并不安全。事实上，对于某些浏览器，比如 IE6 或 FF2，目前已经有一些方法可以篡改 Referer 值。如果 bank.example 网站支持 IE6 浏览器，黑客完全可以把用户浏览器的 Referer 值设为以 bank.example 域名开头的地址，这样就可以通过验证，从而进行 CSRF 攻击。</p>\n<p>即便是使用最新的浏览器，黑客无法篡改 Referer 值，这种方法仍然有问题。因为 Referer 值会记录下用户的访问来源，有些用户认为这样会侵犯到他们自己的隐私权，特别是有些组织担心 Referer 值会把组织内网中的某些信息泄露到外网中。因此，用户自己可以设置浏览器使其在发送请求时不再提供 Referer。当他们正常访问银行网站时，网站会因为请求没有 Referer 值而认为是 CSRF 攻击，拒绝合法用户的访问。</p>\n<h5 id=\"隐藏令牌\"><a href=\"#隐藏令牌\" class=\"headerlink\" title=\"隐藏令牌\"></a>隐藏令牌</h5><p>这种方法也是使用 token 并进行验证，和上一种方法不同的是，这里并不是把 token 以参数的形式置于 HTTP 请求之中，而是把它放到 HTTP 头中自定义的属性里。通过 XMLHttpRequest 这个类，可以一次性给所有该类请求加上 csrftoken 这个 HTTP 头属性，并把 token 值放入其中。这样解决了上种方法在请求中加入 token 的不便，同时，通过 XMLHttpRequest 请求的地址不会被记录到浏览器的地址栏，也不用担心 token 会透过 Referer 泄露到其他网站中去。</p>\n<p>然而这种方法的局限性非常大。XMLHttpRequest 请求通常用于 Ajax 方法中对于页面局部的异步刷新，并非所有的请求都适合用这个类来发起，而且通过该类请求得到的页面不能被浏览器所记录下，从而进行前进，后退，刷新，收藏等操作，给用户带来不便。另外，对于没有进行 CSRF 防护的遗留系统来说，要采用这种方法来进行防护，要把所有请求都改为 XMLHttpRequest 请求，这样几乎是要重写整个网站，这代价无疑是不能接受的。</p>\n<h3 id=\"XSS\"><a href=\"#XSS\" class=\"headerlink\" title=\"XSS\"></a>XSS</h3><p><strong>XSS跨域脚本攻击（Cross Site Scripting）</strong></p>\n<p>跨站脚本攻击是指恶意攻击者往Web页面里插入恶意Script代码，当用户浏览该页之时，嵌入其中Web里面的Script代码会被执行，从而达到恶意攻击用户的目的。<br>xss漏洞通常是通过php的输出函数将javascript代码输出到html页面中，通过用户本地浏览器执行的，所以xss漏洞关键就是寻找参数未过滤的输出函数。</p>\n<h4 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h4><h5 id=\"反射型\"><a href=\"#反射型\" class=\"headerlink\" title=\"反射型\"></a>反射型</h5><p><strong>非持久化</strong></p>\n<p>攻击者事先制作好攻击链接, 需要欺骗用户自己去点击链接才能触发XSS代码（服务器中没有这样的页面和内容），一般容易出现在搜索页面。</p>\n<h5 id=\"存储型XSS\"><a href=\"#存储型XSS\" class=\"headerlink\" title=\"存储型XSS\"></a>存储型XSS</h5><p><strong>持久化</strong></p>\n<p>代码是存储在服务器中的，如在个人信息或发表文章等地方，加入代码，如果没有过滤或过滤不严，那么这些代码将储存到服务器中，每当有用户访问该页面的时候都会触发代码执行，这种XSS非常危险，容易造成蠕虫，大量盗窃cookie（虽然还有种DOM型XSS，但是也还是包括在存储型XSS内）。</p>\n<h5 id=\"DOM型XSS\"><a href=\"#DOM型XSS\" class=\"headerlink\" title=\"DOM型XSS\"></a>DOM型XSS</h5><p>基于文档对象模型Document Objeet Model，DOM)的一种漏洞。DOM是一个与平台、编程语言无关的接口，它允许程序或脚本动态地访问和更新文档内容、结构和样式，处理后的结果能够成为显示页面的一部分。DOM中有很多对象，其中一些是用户可以操纵的，如uRI ，location，refelTer等。客户端的脚本程序可以通过DOM动态地检查和修改页面内容，它不依赖于提交数据到服务器端，而从客户端获得DOM中的数据在本地执行，如果DOM中的数据没有经过严格确认，就会产生DOM XSS漏洞。</p>\n<h4 id=\"防御措施\"><a href=\"#防御措施\" class=\"headerlink\" title=\"防御措施\"></a>防御措施</h4><p>XSS防御的总体思路是：<strong>对输入(和URL参数)进行过滤，对输出进行编码。</strong></p>\n<h5 id=\"对输入和URL参数进行过滤-白名单和黑名单\"><a href=\"#对输入和URL参数进行过滤-白名单和黑名单\" class=\"headerlink\" title=\"对输入和URL参数进行过滤(白名单和黑名单)\"></a>对输入和URL参数进行过滤(白名单和黑名单)</h5><h5 id=\"对输出进行编码\"><a href=\"#对输出进行编码\" class=\"headerlink\" title=\"对输出进行编码\"></a>对输出进行编码</h5><h5 id=\"使用HTTPOnly保护用户信息\"><a href=\"#使用HTTPOnly保护用户信息\" class=\"headerlink\" title=\"使用HTTPOnly保护用户信息\"></a>使用HTTPOnly保护用户信息</h5>"},{"layout":"[post]","title":"DOM事件流","date":"2019-06-11T10:48:56.000Z","_content":"## 什么是事件？\n> 事件, 就是文档或浏览器窗口发生的一些特定的交互瞬间. JavaScript 和 HTML 之间的交互是通过事件实现的. 可以使用事件监听器来监听事件, 以便事件发生时执行相应的代码.\n<!-- more -->\n## 事件流是什么？\n\n当在页面上某个元素触发特定事件时, 比如点击, 除了被点击的目标元素, 所有祖先元素都会触发该事件, 一直到 window.\n\n那这样就出现了一个问题, 是先在目标元素上触发事件, 还是先在祖先元素上触发呢? 这就是事件流的概念.\n\n**事件流是事件在目标元素和祖先元素间的触发顺序**\n\n- **捕获**- Capture - 事件由最顶层逐级向下传播, 直至到达目标元素.\n- **冒泡** - Bubble - 顾名思义, 类似水中冒泡, 从下往上. 事件由第一个被触发的元素接收, 然后逐级向上传播.\n\n后来 w3c 采用折中的方式, 规定先捕获再冒泡平息了战火. 如此一个事件就被分成了三个阶段(是的, 不光是捕获和冒泡):\n\n1. 捕获阶段 - The capture phase - 事件从最顶层元素 window 一直传递到目标元素的父元素.\n2. 目标阶段 - The target phase - 事件到达目标元素. 如果事件指定不冒泡. 那就会在这里中止.\n3. 冒泡阶段 - The bubble phase - 事件从目标元素父元素向上逐级传递直到最顶层元素 window. 及捕获阶段的反方向.\n\n那这里又有一个新的疑问, 既然捕获和冒泡阶段都会触发事件, 那先捕获再冒泡, 岂不是路径上的元素都会触发两次事件?\n\n在 DOM2 中, 事件监听机制提供了一个参数来决定事件是在捕获阶段生效还是在冒泡阶段生效, 接下来简要学习下 ==addEventListener== .\n\n## addEventListener\n**EventTarget.addEventListener()** 方法将指定的监听器注册到目标元素上, 当该对象触发指定的事件时, 指定的回调函数就会被执行. 事件目标可以是一个文档上的元素或任何其他支持事件的对象 (比如 XMLHttpRequest).\n\n它的工作原理是将实现EventListener的函数或对象添加到调用它的 EventTarget 上的指定事件类型的事件侦听器列表中.\n\n#### 语法\n\n```js\ntarget.addEventListener(type, listener[, options]);\ntarget.addEventListener(type, listener[, useCapture]);\ntarget.addEventListener(type, listener[, useCapture, wantsUntrusted  ]);  // Gecko/Mozilla only\n```\n - type: 表示监听事件类型的字符串. 事件列表.\n - listener: 当所监听的事件类型触发时的回调. 会接收到一个事件通知对象.\n - options: 可选. 可用的选项如下:\n - capture: Boolean, 如果是 true, 表示 listener 会在捕获阶段触发. 默认是 false. 冒泡捕获. 所以微软牛逼.\n - once: Boolean, 如果是 true, 表示 listener 在添加之后最多只调用一次.\n - passive: Boolean，如果是, 表示 listener 永远不会调用 preventDefault(). 如果 listener 仍然调用了这个函数, 客户端将会忽略它并抛出一个控制台警告.\n - useCapture: 可选. Boolean, 同 options - capture\n\n> 注意: 对于目标元素上的事件监听器来说, 事件会处于目标阶段, 而不是冒泡阶段或者捕获阶段. 在目标阶段的事件会触发该元素上的所有监听器, 而不在乎这个监听器到底在注册时 useCapture 是 true 还是 false.\n\n## 事件监听添加与移除\n### 事件添加的三种方式\n1. 通过HTML 属性的方式\n```html\n<div onclick=\"console.log('click')\"></div>\n```\n\n2. DOM0 中可以通过js脚本来给指定元素提供事件处理函数，即\n```\nelement.onclick = function // 只会在冒泡阶段生效\n```\n\n3. DOM2 中, 添加了新的事件监听API, 即```addEventListener```, 同时提供了取消监听的 ```removeEventListener(type, handler[, options | useCapture])```. 显然事件处理函数注册后, 要取消监听, ```type/hanlder/useCapture```的一致.\n\n相比第一, 第二种, ```addEventListener```的方式有以下几点优势:\n- 可以为同一个事件注册多个回调函数, 依次触发. 而 DOM0 的方式则会被覆盖掉. 只能添加一种\n- 使用 DOM0 会覆盖 HTML 的方式.\n- 可以通过参数决定监听是在冒泡阶段生效还是在捕获阶段生效.\n- ```element.onclick``` 注册的监听只会在冒泡阶段生效\n\n##### 实例\n\n\n```html\n<div id=\"parent\">\n    <div id=\"child\" onclick=\"console.log('html')\"/>\n</div>\n```\n\n```js\nconst child = document.getElementById('child') \n\nchild.onclick = function () { console.log('DOM0A') } // 覆盖了 HTML 的方式\nchild.onclick = function () { console.log('DOM0B') } // 覆盖了上一条 DOM0A   \n\nchild.addEventLisnter('click', function () { console.log('lisnterA') })\nchild.addEventLisnter('click', function () { console.log('lisnterB') }) // 不会覆盖\n```\n##### 三种方式对应的如何移除:\n\n```js\nchild.setAttributer('onclick', false)\nchild.onclick = null\nchild.removeEventLisnter('设置相同的参数')\n```\n## 问题\n1. 以下代码的输出顺序\n```html\n<html onclick=\"console.log('html')\">\n\n<head>\n    <meta charset=\"UTF-8\">\n\n    <title>Test</title>\n    <script type=\"text/javascript\">\n        window.onload = function() {\n            const parent = document.getElementById(\"parent\");\n            const child = document.getElementById(\"child\");\n\n            child.onclick = function () { console.log('child onclick') };\n\n            // capture 默认为 false, 冒泡\n            parent.addEventListener('click', function () { console.log('parent event') });\n            child.addEventListener('click', function () { console.log('child event') });\n\n            // 捕获\n            parent.addEventListener('click', function () { console.log('parent event capture') }, { capture: true });\n            child.addEventListener('click', function () { console.log('child event capture') }, { capture: true });\n        }\n        window.onclick = function() {\n            console.log('window');\n        }\n    </script>\n</head>\n\n<body onclick=\"console.log('body')\">\n    <div id=\"parent\" onclick=\"console.log('parent html')\">parent\n        <div id=\"child\" onclick=\"console.log('child html')\">child</div>\n    </div>\n</div>\n</body>\n\n</html>\n```\n\n2. 什么是事件流，同一个事件有几个阶段？\n3. 如何移除通过HTML属性、element.onclick等注册的事件处理函数？\n## 答案\n### 问题1\n\n首先参考 chrome 浏览器的结果. 先来看点击 child, 输出:  \n\n1. parent html\n2. parent event\n3. parent event capture\n4. body\n5. html\n6. window\n\n奇怪! 这时候不是应该先捕获, capture 在前吗? 别急, 这时候如果调换 parent event 与 parent event capture 的 addEventListener 顺序, 会发现, 输出顺序也变了:\n\n1. parent html\n1. **parent event capture**\n1. **parent event**\n1. body\n1. html\n1. window\n\n其实这时候的输出顺序只和 ```addEventListener``` 的顺序有关. 是否开启 ```capture``` 无关. 因为我们是直接点击了 ```parent```. 对于 ```parent``` 自身而言. 它在整个点击传递过程中处于目标阶段. 并不涉及捕获和冒泡. 同时我们也发现. html 设置的点击是优先于 ```addEventListener``` 的方式的.\n\n我们再来看下点击 child:\n\n1. parent event capture\n1. hild onclick\n1. child event\n1. child event capture\n1. parent html\n1. parent event\n1. body\n1. html\n1. window\n\n首先, child html 没有输出, 因为被 child onclick 覆盖掉了.\n\n第二点, child onclick 的优先级也是高于 ```addEventListener``` 的.\n\n再然后, 点击事件传递过程中, 首先在捕获阶段, 输出了 parent event capture. 然后到达目标阶段. 同理之前点击 parent. 如果此时调换 child event 与 child event capture 的 ```addEventListener``` 顺序. 输出顺序也会改变\n\n最后, 到达冒泡阶段, 由于 html 的优先级高于 ```addEventListener```. 所以被输出. (别忘了, 默认都是开启冒泡)\n\n但是. 如果使用 Safari 浏览器, 则会发现, 点击 parent, 输出:\n\n1. parent event capture\n2. parent html\n3. parent event\n4. body\n5. html\n6. window\n\n点击 child, 输出:\n\n1. parent event capture\n1. child event capture\n1. child onclick\n1. child event\n1. parent html\n1. parent event\n1. body\n1. html\n1. window\n\n会发现, 对于捕获阶段的处理不一样了. 点击目标元素时, 目标元素不仅处于目标阶段, 也处于捕获阶段的终点和冒泡阶段的起点. 所以会进行 ```capture``` 的判断. 所以在代码编写时这里要尤为注意.\n\n[原文地址](https://www.jianshu.com/p/6512139d1d9e)\n\n","source":"_posts/DOM事件流.md","raw":"---\nlayout: '[post]'\ntitle: DOM事件流\ndate: 2019-06-11 18:48:56\ntags: html\n---\n## 什么是事件？\n> 事件, 就是文档或浏览器窗口发生的一些特定的交互瞬间. JavaScript 和 HTML 之间的交互是通过事件实现的. 可以使用事件监听器来监听事件, 以便事件发生时执行相应的代码.\n<!-- more -->\n## 事件流是什么？\n\n当在页面上某个元素触发特定事件时, 比如点击, 除了被点击的目标元素, 所有祖先元素都会触发该事件, 一直到 window.\n\n那这样就出现了一个问题, 是先在目标元素上触发事件, 还是先在祖先元素上触发呢? 这就是事件流的概念.\n\n**事件流是事件在目标元素和祖先元素间的触发顺序**\n\n- **捕获**- Capture - 事件由最顶层逐级向下传播, 直至到达目标元素.\n- **冒泡** - Bubble - 顾名思义, 类似水中冒泡, 从下往上. 事件由第一个被触发的元素接收, 然后逐级向上传播.\n\n后来 w3c 采用折中的方式, 规定先捕获再冒泡平息了战火. 如此一个事件就被分成了三个阶段(是的, 不光是捕获和冒泡):\n\n1. 捕获阶段 - The capture phase - 事件从最顶层元素 window 一直传递到目标元素的父元素.\n2. 目标阶段 - The target phase - 事件到达目标元素. 如果事件指定不冒泡. 那就会在这里中止.\n3. 冒泡阶段 - The bubble phase - 事件从目标元素父元素向上逐级传递直到最顶层元素 window. 及捕获阶段的反方向.\n\n那这里又有一个新的疑问, 既然捕获和冒泡阶段都会触发事件, 那先捕获再冒泡, 岂不是路径上的元素都会触发两次事件?\n\n在 DOM2 中, 事件监听机制提供了一个参数来决定事件是在捕获阶段生效还是在冒泡阶段生效, 接下来简要学习下 ==addEventListener== .\n\n## addEventListener\n**EventTarget.addEventListener()** 方法将指定的监听器注册到目标元素上, 当该对象触发指定的事件时, 指定的回调函数就会被执行. 事件目标可以是一个文档上的元素或任何其他支持事件的对象 (比如 XMLHttpRequest).\n\n它的工作原理是将实现EventListener的函数或对象添加到调用它的 EventTarget 上的指定事件类型的事件侦听器列表中.\n\n#### 语法\n\n```js\ntarget.addEventListener(type, listener[, options]);\ntarget.addEventListener(type, listener[, useCapture]);\ntarget.addEventListener(type, listener[, useCapture, wantsUntrusted  ]);  // Gecko/Mozilla only\n```\n - type: 表示监听事件类型的字符串. 事件列表.\n - listener: 当所监听的事件类型触发时的回调. 会接收到一个事件通知对象.\n - options: 可选. 可用的选项如下:\n - capture: Boolean, 如果是 true, 表示 listener 会在捕获阶段触发. 默认是 false. 冒泡捕获. 所以微软牛逼.\n - once: Boolean, 如果是 true, 表示 listener 在添加之后最多只调用一次.\n - passive: Boolean，如果是, 表示 listener 永远不会调用 preventDefault(). 如果 listener 仍然调用了这个函数, 客户端将会忽略它并抛出一个控制台警告.\n - useCapture: 可选. Boolean, 同 options - capture\n\n> 注意: 对于目标元素上的事件监听器来说, 事件会处于目标阶段, 而不是冒泡阶段或者捕获阶段. 在目标阶段的事件会触发该元素上的所有监听器, 而不在乎这个监听器到底在注册时 useCapture 是 true 还是 false.\n\n## 事件监听添加与移除\n### 事件添加的三种方式\n1. 通过HTML 属性的方式\n```html\n<div onclick=\"console.log('click')\"></div>\n```\n\n2. DOM0 中可以通过js脚本来给指定元素提供事件处理函数，即\n```\nelement.onclick = function // 只会在冒泡阶段生效\n```\n\n3. DOM2 中, 添加了新的事件监听API, 即```addEventListener```, 同时提供了取消监听的 ```removeEventListener(type, handler[, options | useCapture])```. 显然事件处理函数注册后, 要取消监听, ```type/hanlder/useCapture```的一致.\n\n相比第一, 第二种, ```addEventListener```的方式有以下几点优势:\n- 可以为同一个事件注册多个回调函数, 依次触发. 而 DOM0 的方式则会被覆盖掉. 只能添加一种\n- 使用 DOM0 会覆盖 HTML 的方式.\n- 可以通过参数决定监听是在冒泡阶段生效还是在捕获阶段生效.\n- ```element.onclick``` 注册的监听只会在冒泡阶段生效\n\n##### 实例\n\n\n```html\n<div id=\"parent\">\n    <div id=\"child\" onclick=\"console.log('html')\"/>\n</div>\n```\n\n```js\nconst child = document.getElementById('child') \n\nchild.onclick = function () { console.log('DOM0A') } // 覆盖了 HTML 的方式\nchild.onclick = function () { console.log('DOM0B') } // 覆盖了上一条 DOM0A   \n\nchild.addEventLisnter('click', function () { console.log('lisnterA') })\nchild.addEventLisnter('click', function () { console.log('lisnterB') }) // 不会覆盖\n```\n##### 三种方式对应的如何移除:\n\n```js\nchild.setAttributer('onclick', false)\nchild.onclick = null\nchild.removeEventLisnter('设置相同的参数')\n```\n## 问题\n1. 以下代码的输出顺序\n```html\n<html onclick=\"console.log('html')\">\n\n<head>\n    <meta charset=\"UTF-8\">\n\n    <title>Test</title>\n    <script type=\"text/javascript\">\n        window.onload = function() {\n            const parent = document.getElementById(\"parent\");\n            const child = document.getElementById(\"child\");\n\n            child.onclick = function () { console.log('child onclick') };\n\n            // capture 默认为 false, 冒泡\n            parent.addEventListener('click', function () { console.log('parent event') });\n            child.addEventListener('click', function () { console.log('child event') });\n\n            // 捕获\n            parent.addEventListener('click', function () { console.log('parent event capture') }, { capture: true });\n            child.addEventListener('click', function () { console.log('child event capture') }, { capture: true });\n        }\n        window.onclick = function() {\n            console.log('window');\n        }\n    </script>\n</head>\n\n<body onclick=\"console.log('body')\">\n    <div id=\"parent\" onclick=\"console.log('parent html')\">parent\n        <div id=\"child\" onclick=\"console.log('child html')\">child</div>\n    </div>\n</div>\n</body>\n\n</html>\n```\n\n2. 什么是事件流，同一个事件有几个阶段？\n3. 如何移除通过HTML属性、element.onclick等注册的事件处理函数？\n## 答案\n### 问题1\n\n首先参考 chrome 浏览器的结果. 先来看点击 child, 输出:  \n\n1. parent html\n2. parent event\n3. parent event capture\n4. body\n5. html\n6. window\n\n奇怪! 这时候不是应该先捕获, capture 在前吗? 别急, 这时候如果调换 parent event 与 parent event capture 的 addEventListener 顺序, 会发现, 输出顺序也变了:\n\n1. parent html\n1. **parent event capture**\n1. **parent event**\n1. body\n1. html\n1. window\n\n其实这时候的输出顺序只和 ```addEventListener``` 的顺序有关. 是否开启 ```capture``` 无关. 因为我们是直接点击了 ```parent```. 对于 ```parent``` 自身而言. 它在整个点击传递过程中处于目标阶段. 并不涉及捕获和冒泡. 同时我们也发现. html 设置的点击是优先于 ```addEventListener``` 的方式的.\n\n我们再来看下点击 child:\n\n1. parent event capture\n1. hild onclick\n1. child event\n1. child event capture\n1. parent html\n1. parent event\n1. body\n1. html\n1. window\n\n首先, child html 没有输出, 因为被 child onclick 覆盖掉了.\n\n第二点, child onclick 的优先级也是高于 ```addEventListener``` 的.\n\n再然后, 点击事件传递过程中, 首先在捕获阶段, 输出了 parent event capture. 然后到达目标阶段. 同理之前点击 parent. 如果此时调换 child event 与 child event capture 的 ```addEventListener``` 顺序. 输出顺序也会改变\n\n最后, 到达冒泡阶段, 由于 html 的优先级高于 ```addEventListener```. 所以被输出. (别忘了, 默认都是开启冒泡)\n\n但是. 如果使用 Safari 浏览器, 则会发现, 点击 parent, 输出:\n\n1. parent event capture\n2. parent html\n3. parent event\n4. body\n5. html\n6. window\n\n点击 child, 输出:\n\n1. parent event capture\n1. child event capture\n1. child onclick\n1. child event\n1. parent html\n1. parent event\n1. body\n1. html\n1. window\n\n会发现, 对于捕获阶段的处理不一样了. 点击目标元素时, 目标元素不仅处于目标阶段, 也处于捕获阶段的终点和冒泡阶段的起点. 所以会进行 ```capture``` 的判断. 所以在代码编写时这里要尤为注意.\n\n[原文地址](https://www.jianshu.com/p/6512139d1d9e)\n\n","slug":"DOM事件流","published":1,"updated":"2020-03-11T10:49:41.000Z","comments":1,"photos":[],"link":"","_id":"ckbftlm5g00077w2p43w68wuf","content":"<h2 id=\"什么是事件？\"><a href=\"#什么是事件？\" class=\"headerlink\" title=\"什么是事件？\"></a>什么是事件？</h2><blockquote>\n<p>事件, 就是文档或浏览器窗口发生的一些特定的交互瞬间. JavaScript 和 HTML 之间的交互是通过事件实现的. 可以使用事件监听器来监听事件, 以便事件发生时执行相应的代码.</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"事件流是什么？\"><a href=\"#事件流是什么？\" class=\"headerlink\" title=\"事件流是什么？\"></a>事件流是什么？</h2><p>当在页面上某个元素触发特定事件时, 比如点击, 除了被点击的目标元素, 所有祖先元素都会触发该事件, 一直到 window.</p>\n<p>那这样就出现了一个问题, 是先在目标元素上触发事件, 还是先在祖先元素上触发呢? 这就是事件流的概念.</p>\n<p><strong>事件流是事件在目标元素和祖先元素间的触发顺序</strong></p>\n<ul>\n<li><strong>捕获</strong>- Capture - 事件由最顶层逐级向下传播, 直至到达目标元素.</li>\n<li><strong>冒泡</strong> - Bubble - 顾名思义, 类似水中冒泡, 从下往上. 事件由第一个被触发的元素接收, 然后逐级向上传播.</li>\n</ul>\n<p>后来 w3c 采用折中的方式, 规定先捕获再冒泡平息了战火. 如此一个事件就被分成了三个阶段(是的, 不光是捕获和冒泡):</p>\n<ol>\n<li>捕获阶段 - The capture phase - 事件从最顶层元素 window 一直传递到目标元素的父元素.</li>\n<li>目标阶段 - The target phase - 事件到达目标元素. 如果事件指定不冒泡. 那就会在这里中止.</li>\n<li>冒泡阶段 - The bubble phase - 事件从目标元素父元素向上逐级传递直到最顶层元素 window. 及捕获阶段的反方向.</li>\n</ol>\n<p>那这里又有一个新的疑问, 既然捕获和冒泡阶段都会触发事件, 那先捕获再冒泡, 岂不是路径上的元素都会触发两次事件?</p>\n<p>在 DOM2 中, 事件监听机制提供了一个参数来决定事件是在捕获阶段生效还是在冒泡阶段生效, 接下来简要学习下 ==addEventListener== .</p>\n<h2 id=\"addEventListener\"><a href=\"#addEventListener\" class=\"headerlink\" title=\"addEventListener\"></a>addEventListener</h2><p><strong>EventTarget.addEventListener()</strong> 方法将指定的监听器注册到目标元素上, 当该对象触发指定的事件时, 指定的回调函数就会被执行. 事件目标可以是一个文档上的元素或任何其他支持事件的对象 (比如 XMLHttpRequest).</p>\n<p>它的工作原理是将实现EventListener的函数或对象添加到调用它的 EventTarget 上的指定事件类型的事件侦听器列表中.</p>\n<h4 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">target.addEventListener(type, listener[, options]);</span><br><span class=\"line\">target.addEventListener(type, listener[, useCapture]);</span><br><span class=\"line\">target.addEventListener(type, listener[, useCapture, wantsUntrusted  ]);  <span class=\"comment\">// Gecko/Mozilla only</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>type: 表示监听事件类型的字符串. 事件列表.</li>\n<li>listener: 当所监听的事件类型触发时的回调. 会接收到一个事件通知对象.</li>\n<li>options: 可选. 可用的选项如下:</li>\n<li>capture: Boolean, 如果是 true, 表示 listener 会在捕获阶段触发. 默认是 false. 冒泡捕获. 所以微软牛逼.</li>\n<li>once: Boolean, 如果是 true, 表示 listener 在添加之后最多只调用一次.</li>\n<li>passive: Boolean，如果是, 表示 listener 永远不会调用 preventDefault(). 如果 listener 仍然调用了这个函数, 客户端将会忽略它并抛出一个控制台警告.</li>\n<li>useCapture: 可选. Boolean, 同 options - capture</li>\n</ul>\n<blockquote>\n<p>注意: 对于目标元素上的事件监听器来说, 事件会处于目标阶段, 而不是冒泡阶段或者捕获阶段. 在目标阶段的事件会触发该元素上的所有监听器, 而不在乎这个监听器到底在注册时 useCapture 是 true 还是 false.</p>\n</blockquote>\n<h2 id=\"事件监听添加与移除\"><a href=\"#事件监听添加与移除\" class=\"headerlink\" title=\"事件监听添加与移除\"></a>事件监听添加与移除</h2><h3 id=\"事件添加的三种方式\"><a href=\"#事件添加的三种方式\" class=\"headerlink\" title=\"事件添加的三种方式\"></a>事件添加的三种方式</h3><ol>\n<li><p>通过HTML 属性的方式</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"console.log('click')\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>DOM0 中可以通过js脚本来给指定元素提供事件处理函数，即</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">element.onclick &#x3D; function &#x2F;&#x2F; 只会在冒泡阶段生效</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>DOM2 中, 添加了新的事件监听API, 即<code>addEventListener</code>, 同时提供了取消监听的 <code>removeEventListener(type, handler[, options | useCapture])</code>. 显然事件处理函数注册后, 要取消监听, <code>type/hanlder/useCapture</code>的一致.</p>\n</li>\n</ol>\n<p>相比第一, 第二种, <code>addEventListener</code>的方式有以下几点优势:</p>\n<ul>\n<li>可以为同一个事件注册多个回调函数, 依次触发. 而 DOM0 的方式则会被覆盖掉. 只能添加一种</li>\n<li>使用 DOM0 会覆盖 HTML 的方式.</li>\n<li>可以通过参数决定监听是在冒泡阶段生效还是在捕获阶段生效.</li>\n<li><code>element.onclick</code> 注册的监听只会在冒泡阶段生效</li>\n</ul>\n<h5 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"child\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"console.log('html')\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> child = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'child'</span>) </span><br><span class=\"line\"></span><br><span class=\"line\">child.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'DOM0A'</span>) &#125; <span class=\"comment\">// 覆盖了 HTML 的方式</span></span><br><span class=\"line\">child.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'DOM0B'</span>) &#125; <span class=\"comment\">// 覆盖了上一条 DOM0A   </span></span><br><span class=\"line\"></span><br><span class=\"line\">child.addEventLisnter(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'lisnterA'</span>) &#125;)</span><br><span class=\"line\">child.addEventLisnter(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'lisnterB'</span>) &#125;) <span class=\"comment\">// 不会覆盖</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"三种方式对应的如何移除\"><a href=\"#三种方式对应的如何移除\" class=\"headerlink\" title=\"三种方式对应的如何移除:\"></a>三种方式对应的如何移除:</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">child.setAttributer(<span class=\"string\">'onclick'</span>, <span class=\"literal\">false</span>)</span><br><span class=\"line\">child.onclick = <span class=\"literal\">null</span></span><br><span class=\"line\">child.removeEventLisnter(<span class=\"string\">'设置相同的参数'</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><ol>\n<li><p>以下代码的输出顺序</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"console.log('html')\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Test<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">const</span> parent = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"parent\"</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">const</span> child = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"child\"</span>);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">            child.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'child onclick'</span>) &#125;;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// capture 默认为 false, 冒泡</span></span></span><br><span class=\"line\"><span class=\"javascript\">            parent.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'parent event'</span>) &#125;);</span></span><br><span class=\"line\"><span class=\"javascript\">            child.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'child event'</span>) &#125;);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// 捕获</span></span></span><br><span class=\"line\"><span class=\"javascript\">            parent.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'parent event capture'</span>) &#125;, &#123; <span class=\"attr\">capture</span>: <span class=\"literal\">true</span> &#125;);</span></span><br><span class=\"line\"><span class=\"javascript\">            child.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'child event capture'</span>) &#125;, &#123; <span class=\"attr\">capture</span>: <span class=\"literal\">true</span> &#125;);</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">window</span>.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'window'</span>);</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"console.log('body')\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"parent\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"console.log('parent html')\"</span>&gt;</span>parent</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"child\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"console.log('child html')\"</span>&gt;</span>child<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>什么是事件流，同一个事件有几个阶段？</p>\n</li>\n<li><p>如何移除通过HTML属性、element.onclick等注册的事件处理函数？</p>\n<h2 id=\"答案\"><a href=\"#答案\" class=\"headerlink\" title=\"答案\"></a>答案</h2><h3 id=\"问题1\"><a href=\"#问题1\" class=\"headerlink\" title=\"问题1\"></a>问题1</h3></li>\n</ol>\n<p>首先参考 chrome 浏览器的结果. 先来看点击 child, 输出:  </p>\n<ol>\n<li>parent html</li>\n<li>parent event</li>\n<li>parent event capture</li>\n<li>body</li>\n<li>html</li>\n<li>window</li>\n</ol>\n<p>奇怪! 这时候不是应该先捕获, capture 在前吗? 别急, 这时候如果调换 parent event 与 parent event capture 的 addEventListener 顺序, 会发现, 输出顺序也变了:</p>\n<ol>\n<li>parent html</li>\n<li><strong>parent event capture</strong></li>\n<li><strong>parent event</strong></li>\n<li>body</li>\n<li>html</li>\n<li>window</li>\n</ol>\n<p>其实这时候的输出顺序只和 <code>addEventListener</code> 的顺序有关. 是否开启 <code>capture</code> 无关. 因为我们是直接点击了 <code>parent</code>. 对于 <code>parent</code> 自身而言. 它在整个点击传递过程中处于目标阶段. 并不涉及捕获和冒泡. 同时我们也发现. html 设置的点击是优先于 <code>addEventListener</code> 的方式的.</p>\n<p>我们再来看下点击 child:</p>\n<ol>\n<li>parent event capture</li>\n<li>hild onclick</li>\n<li>child event</li>\n<li>child event capture</li>\n<li>parent html</li>\n<li>parent event</li>\n<li>body</li>\n<li>html</li>\n<li>window</li>\n</ol>\n<p>首先, child html 没有输出, 因为被 child onclick 覆盖掉了.</p>\n<p>第二点, child onclick 的优先级也是高于 <code>addEventListener</code> 的.</p>\n<p>再然后, 点击事件传递过程中, 首先在捕获阶段, 输出了 parent event capture. 然后到达目标阶段. 同理之前点击 parent. 如果此时调换 child event 与 child event capture 的 <code>addEventListener</code> 顺序. 输出顺序也会改变</p>\n<p>最后, 到达冒泡阶段, 由于 html 的优先级高于 <code>addEventListener</code>. 所以被输出. (别忘了, 默认都是开启冒泡)</p>\n<p>但是. 如果使用 Safari 浏览器, 则会发现, 点击 parent, 输出:</p>\n<ol>\n<li>parent event capture</li>\n<li>parent html</li>\n<li>parent event</li>\n<li>body</li>\n<li>html</li>\n<li>window</li>\n</ol>\n<p>点击 child, 输出:</p>\n<ol>\n<li>parent event capture</li>\n<li>child event capture</li>\n<li>child onclick</li>\n<li>child event</li>\n<li>parent html</li>\n<li>parent event</li>\n<li>body</li>\n<li>html</li>\n<li>window</li>\n</ol>\n<p>会发现, 对于捕获阶段的处理不一样了. 点击目标元素时, 目标元素不仅处于目标阶段, 也处于捕获阶段的终点和冒泡阶段的起点. 所以会进行 <code>capture</code> 的判断. 所以在代码编写时这里要尤为注意.</p>\n<p><a href=\"https://www.jianshu.com/p/6512139d1d9e\" target=\"_blank\" rel=\"noopener\">原文地址</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"什么是事件？\"><a href=\"#什么是事件？\" class=\"headerlink\" title=\"什么是事件？\"></a>什么是事件？</h2><blockquote>\n<p>事件, 就是文档或浏览器窗口发生的一些特定的交互瞬间. JavaScript 和 HTML 之间的交互是通过事件实现的. 可以使用事件监听器来监听事件, 以便事件发生时执行相应的代码.</p>\n</blockquote>","more":"<h2 id=\"事件流是什么？\"><a href=\"#事件流是什么？\" class=\"headerlink\" title=\"事件流是什么？\"></a>事件流是什么？</h2><p>当在页面上某个元素触发特定事件时, 比如点击, 除了被点击的目标元素, 所有祖先元素都会触发该事件, 一直到 window.</p>\n<p>那这样就出现了一个问题, 是先在目标元素上触发事件, 还是先在祖先元素上触发呢? 这就是事件流的概念.</p>\n<p><strong>事件流是事件在目标元素和祖先元素间的触发顺序</strong></p>\n<ul>\n<li><strong>捕获</strong>- Capture - 事件由最顶层逐级向下传播, 直至到达目标元素.</li>\n<li><strong>冒泡</strong> - Bubble - 顾名思义, 类似水中冒泡, 从下往上. 事件由第一个被触发的元素接收, 然后逐级向上传播.</li>\n</ul>\n<p>后来 w3c 采用折中的方式, 规定先捕获再冒泡平息了战火. 如此一个事件就被分成了三个阶段(是的, 不光是捕获和冒泡):</p>\n<ol>\n<li>捕获阶段 - The capture phase - 事件从最顶层元素 window 一直传递到目标元素的父元素.</li>\n<li>目标阶段 - The target phase - 事件到达目标元素. 如果事件指定不冒泡. 那就会在这里中止.</li>\n<li>冒泡阶段 - The bubble phase - 事件从目标元素父元素向上逐级传递直到最顶层元素 window. 及捕获阶段的反方向.</li>\n</ol>\n<p>那这里又有一个新的疑问, 既然捕获和冒泡阶段都会触发事件, 那先捕获再冒泡, 岂不是路径上的元素都会触发两次事件?</p>\n<p>在 DOM2 中, 事件监听机制提供了一个参数来决定事件是在捕获阶段生效还是在冒泡阶段生效, 接下来简要学习下 ==addEventListener== .</p>\n<h2 id=\"addEventListener\"><a href=\"#addEventListener\" class=\"headerlink\" title=\"addEventListener\"></a>addEventListener</h2><p><strong>EventTarget.addEventListener()</strong> 方法将指定的监听器注册到目标元素上, 当该对象触发指定的事件时, 指定的回调函数就会被执行. 事件目标可以是一个文档上的元素或任何其他支持事件的对象 (比如 XMLHttpRequest).</p>\n<p>它的工作原理是将实现EventListener的函数或对象添加到调用它的 EventTarget 上的指定事件类型的事件侦听器列表中.</p>\n<h4 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">target.addEventListener(type, listener[, options]);</span><br><span class=\"line\">target.addEventListener(type, listener[, useCapture]);</span><br><span class=\"line\">target.addEventListener(type, listener[, useCapture, wantsUntrusted  ]);  <span class=\"comment\">// Gecko/Mozilla only</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>type: 表示监听事件类型的字符串. 事件列表.</li>\n<li>listener: 当所监听的事件类型触发时的回调. 会接收到一个事件通知对象.</li>\n<li>options: 可选. 可用的选项如下:</li>\n<li>capture: Boolean, 如果是 true, 表示 listener 会在捕获阶段触发. 默认是 false. 冒泡捕获. 所以微软牛逼.</li>\n<li>once: Boolean, 如果是 true, 表示 listener 在添加之后最多只调用一次.</li>\n<li>passive: Boolean，如果是, 表示 listener 永远不会调用 preventDefault(). 如果 listener 仍然调用了这个函数, 客户端将会忽略它并抛出一个控制台警告.</li>\n<li>useCapture: 可选. Boolean, 同 options - capture</li>\n</ul>\n<blockquote>\n<p>注意: 对于目标元素上的事件监听器来说, 事件会处于目标阶段, 而不是冒泡阶段或者捕获阶段. 在目标阶段的事件会触发该元素上的所有监听器, 而不在乎这个监听器到底在注册时 useCapture 是 true 还是 false.</p>\n</blockquote>\n<h2 id=\"事件监听添加与移除\"><a href=\"#事件监听添加与移除\" class=\"headerlink\" title=\"事件监听添加与移除\"></a>事件监听添加与移除</h2><h3 id=\"事件添加的三种方式\"><a href=\"#事件添加的三种方式\" class=\"headerlink\" title=\"事件添加的三种方式\"></a>事件添加的三种方式</h3><ol>\n<li><p>通过HTML 属性的方式</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"console.log('click')\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>DOM0 中可以通过js脚本来给指定元素提供事件处理函数，即</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">element.onclick &#x3D; function &#x2F;&#x2F; 只会在冒泡阶段生效</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>DOM2 中, 添加了新的事件监听API, 即<code>addEventListener</code>, 同时提供了取消监听的 <code>removeEventListener(type, handler[, options | useCapture])</code>. 显然事件处理函数注册后, 要取消监听, <code>type/hanlder/useCapture</code>的一致.</p>\n</li>\n</ol>\n<p>相比第一, 第二种, <code>addEventListener</code>的方式有以下几点优势:</p>\n<ul>\n<li>可以为同一个事件注册多个回调函数, 依次触发. 而 DOM0 的方式则会被覆盖掉. 只能添加一种</li>\n<li>使用 DOM0 会覆盖 HTML 的方式.</li>\n<li>可以通过参数决定监听是在冒泡阶段生效还是在捕获阶段生效.</li>\n<li><code>element.onclick</code> 注册的监听只会在冒泡阶段生效</li>\n</ul>\n<h5 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"child\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"console.log('html')\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> child = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'child'</span>) </span><br><span class=\"line\"></span><br><span class=\"line\">child.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'DOM0A'</span>) &#125; <span class=\"comment\">// 覆盖了 HTML 的方式</span></span><br><span class=\"line\">child.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'DOM0B'</span>) &#125; <span class=\"comment\">// 覆盖了上一条 DOM0A   </span></span><br><span class=\"line\"></span><br><span class=\"line\">child.addEventLisnter(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'lisnterA'</span>) &#125;)</span><br><span class=\"line\">child.addEventLisnter(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'lisnterB'</span>) &#125;) <span class=\"comment\">// 不会覆盖</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"三种方式对应的如何移除\"><a href=\"#三种方式对应的如何移除\" class=\"headerlink\" title=\"三种方式对应的如何移除:\"></a>三种方式对应的如何移除:</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">child.setAttributer(<span class=\"string\">'onclick'</span>, <span class=\"literal\">false</span>)</span><br><span class=\"line\">child.onclick = <span class=\"literal\">null</span></span><br><span class=\"line\">child.removeEventLisnter(<span class=\"string\">'设置相同的参数'</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><ol>\n<li><p>以下代码的输出顺序</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"console.log('html')\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Test<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">const</span> parent = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"parent\"</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">const</span> child = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"child\"</span>);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">            child.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'child onclick'</span>) &#125;;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// capture 默认为 false, 冒泡</span></span></span><br><span class=\"line\"><span class=\"javascript\">            parent.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'parent event'</span>) &#125;);</span></span><br><span class=\"line\"><span class=\"javascript\">            child.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'child event'</span>) &#125;);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// 捕获</span></span></span><br><span class=\"line\"><span class=\"javascript\">            parent.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'parent event capture'</span>) &#125;, &#123; <span class=\"attr\">capture</span>: <span class=\"literal\">true</span> &#125;);</span></span><br><span class=\"line\"><span class=\"javascript\">            child.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'child event capture'</span>) &#125;, &#123; <span class=\"attr\">capture</span>: <span class=\"literal\">true</span> &#125;);</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">window</span>.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'window'</span>);</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"console.log('body')\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"parent\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"console.log('parent html')\"</span>&gt;</span>parent</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"child\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"console.log('child html')\"</span>&gt;</span>child<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>什么是事件流，同一个事件有几个阶段？</p>\n</li>\n<li><p>如何移除通过HTML属性、element.onclick等注册的事件处理函数？</p>\n<h2 id=\"答案\"><a href=\"#答案\" class=\"headerlink\" title=\"答案\"></a>答案</h2><h3 id=\"问题1\"><a href=\"#问题1\" class=\"headerlink\" title=\"问题1\"></a>问题1</h3></li>\n</ol>\n<p>首先参考 chrome 浏览器的结果. 先来看点击 child, 输出:  </p>\n<ol>\n<li>parent html</li>\n<li>parent event</li>\n<li>parent event capture</li>\n<li>body</li>\n<li>html</li>\n<li>window</li>\n</ol>\n<p>奇怪! 这时候不是应该先捕获, capture 在前吗? 别急, 这时候如果调换 parent event 与 parent event capture 的 addEventListener 顺序, 会发现, 输出顺序也变了:</p>\n<ol>\n<li>parent html</li>\n<li><strong>parent event capture</strong></li>\n<li><strong>parent event</strong></li>\n<li>body</li>\n<li>html</li>\n<li>window</li>\n</ol>\n<p>其实这时候的输出顺序只和 <code>addEventListener</code> 的顺序有关. 是否开启 <code>capture</code> 无关. 因为我们是直接点击了 <code>parent</code>. 对于 <code>parent</code> 自身而言. 它在整个点击传递过程中处于目标阶段. 并不涉及捕获和冒泡. 同时我们也发现. html 设置的点击是优先于 <code>addEventListener</code> 的方式的.</p>\n<p>我们再来看下点击 child:</p>\n<ol>\n<li>parent event capture</li>\n<li>hild onclick</li>\n<li>child event</li>\n<li>child event capture</li>\n<li>parent html</li>\n<li>parent event</li>\n<li>body</li>\n<li>html</li>\n<li>window</li>\n</ol>\n<p>首先, child html 没有输出, 因为被 child onclick 覆盖掉了.</p>\n<p>第二点, child onclick 的优先级也是高于 <code>addEventListener</code> 的.</p>\n<p>再然后, 点击事件传递过程中, 首先在捕获阶段, 输出了 parent event capture. 然后到达目标阶段. 同理之前点击 parent. 如果此时调换 child event 与 child event capture 的 <code>addEventListener</code> 顺序. 输出顺序也会改变</p>\n<p>最后, 到达冒泡阶段, 由于 html 的优先级高于 <code>addEventListener</code>. 所以被输出. (别忘了, 默认都是开启冒泡)</p>\n<p>但是. 如果使用 Safari 浏览器, 则会发现, 点击 parent, 输出:</p>\n<ol>\n<li>parent event capture</li>\n<li>parent html</li>\n<li>parent event</li>\n<li>body</li>\n<li>html</li>\n<li>window</li>\n</ol>\n<p>点击 child, 输出:</p>\n<ol>\n<li>parent event capture</li>\n<li>child event capture</li>\n<li>child onclick</li>\n<li>child event</li>\n<li>parent html</li>\n<li>parent event</li>\n<li>body</li>\n<li>html</li>\n<li>window</li>\n</ol>\n<p>会发现, 对于捕获阶段的处理不一样了. 点击目标元素时, 目标元素不仅处于目标阶段, 也处于捕获阶段的终点和冒泡阶段的起点. 所以会进行 <code>capture</code> 的判断. 所以在代码编写时这里要尤为注意.</p>\n<p><a href=\"https://www.jianshu.com/p/6512139d1d9e\" target=\"_blank\" rel=\"noopener\">原文地址</a></p>"},{"layout":"[post]","title":"DOM级别与DOM事件","date":"2019-06-01T02:58:39.000Z","_content":"事件是javascript和HTML交互基础, 任何文档或者浏览器窗口发生的交互, 都要通过绑定事件进行交互;比如鼠标点击事件、敲击键盘事件等。这样的事件行为都是前端DOM事件的组成部分，不同的DOM事件会有不同的触发条件和触发效果。\n<!-- more -->\n## DOM级别与DOM事件\nDOM级别一共可以分为四个级别：DOM0级、DOM1级、DOM2级和DOM3级。而DOM事件分为3个级别：DOM0级事件处理，DOM2级事件处理和DOM3级事件处理。\n\n有人可能会疑惑，为什么没有DOM1级事件处理呢？因为1级DOM标准并没有定义事件相关的内容，所以没有所谓的1级DOM事件模型。\n\n### HTML的事件处理程序\nHTML事件处理程序，也是最早的一种事件处理方式。\n\n```js\n <button type=\"button\" onclick=\"showFn()\"></button>\n  function showFn() {\n      alert('Hello World');\n  }\n```\n以上的代码，我们通过直接在HTML代码里面定义了一个 onclick属性触发showfu这样的事件处理程序最大的缺点就是HTML和JS耦合太强，我们如果需要修改函数名就必须修改两个地方，优点是不需要操作DOM来完成事件的绑定。\n\n### DOM0级事件\nDOM0级处理事件就是将一个函数赋值给一个事件处理属性。\n\n```js\n <button id=\"btn\" type=\"button\"></button>\n    var btn = document.getElementById('btn');\n    btn.onclick = function() {\n        console.log('Hello World');\n    }\n```\n以上的代码我们给button定义了一个id 通过js原生的api获取按钮\n将一个函数赋值给了一个事件处理属性onclick 这样的方法就是DOM0级\n处理事件的体现。我们可以通过给事件处理属性赋值null来解绑事件。\n\n**DOM0级事件处理程序的缺点在于一个处理程序无法同时绑定多个处理函数，比如我还想再点击按钮事件上加上另外一个函数。**\n\n### DOM2级事件\nDOM2级事件在DOM0级时间段额基础上弥补了一个处理处理程序\n无法同时绑定多个处理函数的缺点。允许给一个程序添加多个处理函数。\n\n```js\n <button id=\"btn\" type=\"button\"></button>\n    var btn = document.getElementById('btn');    \n    function showFn() {\n        alert('Hello World');\n    }    \n    btn.addEventListener('click', showFn, false);\n    // btn.removeEventListener('click', showFn, false); 解绑事件 \n```\nDOM2级事件定义了addEventListener 和 removeEventListener两个方法，分别用来绑定和解绑事件，方法中包含三个参数，分别是绑定的事件处理的属性名称（没有on）处理函数和是否在捕获时候执行事件处理函数如果我们还需要添加一个鼠标的移入的方法，只需要：\n\n\n```js\n btn.addEventlistener('mouseover',showfn,false)\n```\n这样，点击按钮和鼠标移入时候都将触发showfn的方法。\n\n需要注意的是IE8以下版本不支持 addEventlistener 和 removeEventListerner\n需要使用attachEvent和detachEvent实现：\n\n```js\n    btn.attachEvent('onclick', showFn); // 绑定事件 \n    btn.detachEvent('onclick', showFn); // 解绑事件\n```\n这里我们不需要传入第三个参数，因为IE8以下版本只支持冒泡型事件。\n### DOM3级事件\n\n```\nDOM3级事件是在DOM2级事件的基础上添加很多事件类型。\nUI事件，当用户与页面上的元素交互时触发，如：load、scroll\n焦点事件，当元素获得或失去焦点时触发，如：blur、focus\n鼠标事件，当用户通过鼠标在页面执行操作时触发如：dbclick、mouseup\n滚轮事件，当使用鼠标滚轮或类似设备时触发，如：mousewheel\n文本事件，当在文档中输入文本时触发，如：textInput\n键盘事件，当用户通过键盘在页面上执行操作时触发，如：keydown、keypress\n合成事件，当为IME（输入法编辑器）输入字符时触发，如：compositionstart\n变动事件，当底层DOM结构发生变化时触发，如：DOMsubtreeModified\n同时DOM3级事件也允许使用者自定义一些事件。\n```\n转载链接:[DOM级别与DOM事件](https://www.jianshu.com/p/622d994906f7)","source":"_posts/DOM级别与DOM事件.md","raw":"---\nlayout: '[post]'\ntitle: DOM级别与DOM事件\ndate: 2019-06-01 10:58:39\ntags: html\n---\n事件是javascript和HTML交互基础, 任何文档或者浏览器窗口发生的交互, 都要通过绑定事件进行交互;比如鼠标点击事件、敲击键盘事件等。这样的事件行为都是前端DOM事件的组成部分，不同的DOM事件会有不同的触发条件和触发效果。\n<!-- more -->\n## DOM级别与DOM事件\nDOM级别一共可以分为四个级别：DOM0级、DOM1级、DOM2级和DOM3级。而DOM事件分为3个级别：DOM0级事件处理，DOM2级事件处理和DOM3级事件处理。\n\n有人可能会疑惑，为什么没有DOM1级事件处理呢？因为1级DOM标准并没有定义事件相关的内容，所以没有所谓的1级DOM事件模型。\n\n### HTML的事件处理程序\nHTML事件处理程序，也是最早的一种事件处理方式。\n\n```js\n <button type=\"button\" onclick=\"showFn()\"></button>\n  function showFn() {\n      alert('Hello World');\n  }\n```\n以上的代码，我们通过直接在HTML代码里面定义了一个 onclick属性触发showfu这样的事件处理程序最大的缺点就是HTML和JS耦合太强，我们如果需要修改函数名就必须修改两个地方，优点是不需要操作DOM来完成事件的绑定。\n\n### DOM0级事件\nDOM0级处理事件就是将一个函数赋值给一个事件处理属性。\n\n```js\n <button id=\"btn\" type=\"button\"></button>\n    var btn = document.getElementById('btn');\n    btn.onclick = function() {\n        console.log('Hello World');\n    }\n```\n以上的代码我们给button定义了一个id 通过js原生的api获取按钮\n将一个函数赋值给了一个事件处理属性onclick 这样的方法就是DOM0级\n处理事件的体现。我们可以通过给事件处理属性赋值null来解绑事件。\n\n**DOM0级事件处理程序的缺点在于一个处理程序无法同时绑定多个处理函数，比如我还想再点击按钮事件上加上另外一个函数。**\n\n### DOM2级事件\nDOM2级事件在DOM0级时间段额基础上弥补了一个处理处理程序\n无法同时绑定多个处理函数的缺点。允许给一个程序添加多个处理函数。\n\n```js\n <button id=\"btn\" type=\"button\"></button>\n    var btn = document.getElementById('btn');    \n    function showFn() {\n        alert('Hello World');\n    }    \n    btn.addEventListener('click', showFn, false);\n    // btn.removeEventListener('click', showFn, false); 解绑事件 \n```\nDOM2级事件定义了addEventListener 和 removeEventListener两个方法，分别用来绑定和解绑事件，方法中包含三个参数，分别是绑定的事件处理的属性名称（没有on）处理函数和是否在捕获时候执行事件处理函数如果我们还需要添加一个鼠标的移入的方法，只需要：\n\n\n```js\n btn.addEventlistener('mouseover',showfn,false)\n```\n这样，点击按钮和鼠标移入时候都将触发showfn的方法。\n\n需要注意的是IE8以下版本不支持 addEventlistener 和 removeEventListerner\n需要使用attachEvent和detachEvent实现：\n\n```js\n    btn.attachEvent('onclick', showFn); // 绑定事件 \n    btn.detachEvent('onclick', showFn); // 解绑事件\n```\n这里我们不需要传入第三个参数，因为IE8以下版本只支持冒泡型事件。\n### DOM3级事件\n\n```\nDOM3级事件是在DOM2级事件的基础上添加很多事件类型。\nUI事件，当用户与页面上的元素交互时触发，如：load、scroll\n焦点事件，当元素获得或失去焦点时触发，如：blur、focus\n鼠标事件，当用户通过鼠标在页面执行操作时触发如：dbclick、mouseup\n滚轮事件，当使用鼠标滚轮或类似设备时触发，如：mousewheel\n文本事件，当在文档中输入文本时触发，如：textInput\n键盘事件，当用户通过键盘在页面上执行操作时触发，如：keydown、keypress\n合成事件，当为IME（输入法编辑器）输入字符时触发，如：compositionstart\n变动事件，当底层DOM结构发生变化时触发，如：DOMsubtreeModified\n同时DOM3级事件也允许使用者自定义一些事件。\n```\n转载链接:[DOM级别与DOM事件](https://www.jianshu.com/p/622d994906f7)","slug":"DOM级别与DOM事件","published":1,"updated":"2020-03-05T03:23:00.000Z","comments":1,"photos":[],"link":"","_id":"ckbftlm5i00087w2p0zkp8qt3","content":"<p>事件是javascript和HTML交互基础, 任何文档或者浏览器窗口发生的交互, 都要通过绑定事件进行交互;比如鼠标点击事件、敲击键盘事件等。这样的事件行为都是前端DOM事件的组成部分，不同的DOM事件会有不同的触发条件和触发效果。</p>\n<a id=\"more\"></a>\n<h2 id=\"DOM级别与DOM事件\"><a href=\"#DOM级别与DOM事件\" class=\"headerlink\" title=\"DOM级别与DOM事件\"></a>DOM级别与DOM事件</h2><p>DOM级别一共可以分为四个级别：DOM0级、DOM1级、DOM2级和DOM3级。而DOM事件分为3个级别：DOM0级事件处理，DOM2级事件处理和DOM3级事件处理。</p>\n<p>有人可能会疑惑，为什么没有DOM1级事件处理呢？因为1级DOM标准并没有定义事件相关的内容，所以没有所谓的1级DOM事件模型。</p>\n<h3 id=\"HTML的事件处理程序\"><a href=\"#HTML的事件处理程序\" class=\"headerlink\" title=\"HTML的事件处理程序\"></a>HTML的事件处理程序</h3><p>HTML事件处理程序，也是最早的一种事件处理方式。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button type=<span class=\"string\">\"button\"</span> onclick=<span class=\"string\">\"showFn()\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showFn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">     alert(<span class=\"string\">'Hello World'</span>);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>以上的代码，我们通过直接在HTML代码里面定义了一个 onclick属性触发showfu这样的事件处理程序最大的缺点就是HTML和JS耦合太强，我们如果需要修改函数名就必须修改两个地方，优点是不需要操作DOM来完成事件的绑定。</p>\n<h3 id=\"DOM0级事件\"><a href=\"#DOM0级事件\" class=\"headerlink\" title=\"DOM0级事件\"></a>DOM0级事件</h3><p>DOM0级处理事件就是将一个函数赋值给一个事件处理属性。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button id=<span class=\"string\">\"btn\"</span> type=<span class=\"string\">\"button\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">   <span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'btn'</span>);</span><br><span class=\"line\">   btn.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">       <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello World'</span>);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>以上的代码我们给button定义了一个id 通过js原生的api获取按钮<br>将一个函数赋值给了一个事件处理属性onclick 这样的方法就是DOM0级<br>处理事件的体现。我们可以通过给事件处理属性赋值null来解绑事件。</p>\n<p><strong>DOM0级事件处理程序的缺点在于一个处理程序无法同时绑定多个处理函数，比如我还想再点击按钮事件上加上另外一个函数。</strong></p>\n<h3 id=\"DOM2级事件\"><a href=\"#DOM2级事件\" class=\"headerlink\" title=\"DOM2级事件\"></a>DOM2级事件</h3><p>DOM2级事件在DOM0级时间段额基础上弥补了一个处理处理程序<br>无法同时绑定多个处理函数的缺点。允许给一个程序添加多个处理函数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button id=<span class=\"string\">\"btn\"</span> type=<span class=\"string\">\"button\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">   <span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'btn'</span>);    </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showFn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">       alert(<span class=\"string\">'Hello World'</span>);</span><br><span class=\"line\">   &#125;    </span><br><span class=\"line\">   btn.addEventListener(<span class=\"string\">'click'</span>, showFn, <span class=\"literal\">false</span>);</span><br><span class=\"line\">   <span class=\"comment\">// btn.removeEventListener('click', showFn, false); 解绑事件</span></span><br></pre></td></tr></table></figure>\n<p>DOM2级事件定义了addEventListener 和 removeEventListener两个方法，分别用来绑定和解绑事件，方法中包含三个参数，分别是绑定的事件处理的属性名称（没有on）处理函数和是否在捕获时候执行事件处理函数如果我们还需要添加一个鼠标的移入的方法，只需要：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">btn.addEventlistener(<span class=\"string\">'mouseover'</span>,showfn,<span class=\"literal\">false</span>)</span><br></pre></td></tr></table></figure>\n<p>这样，点击按钮和鼠标移入时候都将触发showfn的方法。</p>\n<p>需要注意的是IE8以下版本不支持 addEventlistener 和 removeEventListerner<br>需要使用attachEvent和detachEvent实现：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">btn.attachEvent(<span class=\"string\">'onclick'</span>, showFn); <span class=\"comment\">// 绑定事件 </span></span><br><span class=\"line\">btn.detachEvent(<span class=\"string\">'onclick'</span>, showFn); <span class=\"comment\">// 解绑事件</span></span><br></pre></td></tr></table></figure>\n<p>这里我们不需要传入第三个参数，因为IE8以下版本只支持冒泡型事件。</p>\n<h3 id=\"DOM3级事件\"><a href=\"#DOM3级事件\" class=\"headerlink\" title=\"DOM3级事件\"></a>DOM3级事件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DOM3级事件是在DOM2级事件的基础上添加很多事件类型。</span><br><span class=\"line\">UI事件，当用户与页面上的元素交互时触发，如：load、scroll</span><br><span class=\"line\">焦点事件，当元素获得或失去焦点时触发，如：blur、focus</span><br><span class=\"line\">鼠标事件，当用户通过鼠标在页面执行操作时触发如：dbclick、mouseup</span><br><span class=\"line\">滚轮事件，当使用鼠标滚轮或类似设备时触发，如：mousewheel</span><br><span class=\"line\">文本事件，当在文档中输入文本时触发，如：textInput</span><br><span class=\"line\">键盘事件，当用户通过键盘在页面上执行操作时触发，如：keydown、keypress</span><br><span class=\"line\">合成事件，当为IME（输入法编辑器）输入字符时触发，如：compositionstart</span><br><span class=\"line\">变动事件，当底层DOM结构发生变化时触发，如：DOMsubtreeModified</span><br><span class=\"line\">同时DOM3级事件也允许使用者自定义一些事件。</span><br></pre></td></tr></table></figure>\n<p>转载链接:<a href=\"https://www.jianshu.com/p/622d994906f7\" target=\"_blank\" rel=\"noopener\">DOM级别与DOM事件</a></p>\n","site":{"data":{}},"excerpt":"<p>事件是javascript和HTML交互基础, 任何文档或者浏览器窗口发生的交互, 都要通过绑定事件进行交互;比如鼠标点击事件、敲击键盘事件等。这样的事件行为都是前端DOM事件的组成部分，不同的DOM事件会有不同的触发条件和触发效果。</p>","more":"<h2 id=\"DOM级别与DOM事件\"><a href=\"#DOM级别与DOM事件\" class=\"headerlink\" title=\"DOM级别与DOM事件\"></a>DOM级别与DOM事件</h2><p>DOM级别一共可以分为四个级别：DOM0级、DOM1级、DOM2级和DOM3级。而DOM事件分为3个级别：DOM0级事件处理，DOM2级事件处理和DOM3级事件处理。</p>\n<p>有人可能会疑惑，为什么没有DOM1级事件处理呢？因为1级DOM标准并没有定义事件相关的内容，所以没有所谓的1级DOM事件模型。</p>\n<h3 id=\"HTML的事件处理程序\"><a href=\"#HTML的事件处理程序\" class=\"headerlink\" title=\"HTML的事件处理程序\"></a>HTML的事件处理程序</h3><p>HTML事件处理程序，也是最早的一种事件处理方式。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button type=<span class=\"string\">\"button\"</span> onclick=<span class=\"string\">\"showFn()\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showFn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">     alert(<span class=\"string\">'Hello World'</span>);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>以上的代码，我们通过直接在HTML代码里面定义了一个 onclick属性触发showfu这样的事件处理程序最大的缺点就是HTML和JS耦合太强，我们如果需要修改函数名就必须修改两个地方，优点是不需要操作DOM来完成事件的绑定。</p>\n<h3 id=\"DOM0级事件\"><a href=\"#DOM0级事件\" class=\"headerlink\" title=\"DOM0级事件\"></a>DOM0级事件</h3><p>DOM0级处理事件就是将一个函数赋值给一个事件处理属性。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button id=<span class=\"string\">\"btn\"</span> type=<span class=\"string\">\"button\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">   <span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'btn'</span>);</span><br><span class=\"line\">   btn.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">       <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello World'</span>);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>以上的代码我们给button定义了一个id 通过js原生的api获取按钮<br>将一个函数赋值给了一个事件处理属性onclick 这样的方法就是DOM0级<br>处理事件的体现。我们可以通过给事件处理属性赋值null来解绑事件。</p>\n<p><strong>DOM0级事件处理程序的缺点在于一个处理程序无法同时绑定多个处理函数，比如我还想再点击按钮事件上加上另外一个函数。</strong></p>\n<h3 id=\"DOM2级事件\"><a href=\"#DOM2级事件\" class=\"headerlink\" title=\"DOM2级事件\"></a>DOM2级事件</h3><p>DOM2级事件在DOM0级时间段额基础上弥补了一个处理处理程序<br>无法同时绑定多个处理函数的缺点。允许给一个程序添加多个处理函数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button id=<span class=\"string\">\"btn\"</span> type=<span class=\"string\">\"button\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">   <span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'btn'</span>);    </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showFn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">       alert(<span class=\"string\">'Hello World'</span>);</span><br><span class=\"line\">   &#125;    </span><br><span class=\"line\">   btn.addEventListener(<span class=\"string\">'click'</span>, showFn, <span class=\"literal\">false</span>);</span><br><span class=\"line\">   <span class=\"comment\">// btn.removeEventListener('click', showFn, false); 解绑事件</span></span><br></pre></td></tr></table></figure>\n<p>DOM2级事件定义了addEventListener 和 removeEventListener两个方法，分别用来绑定和解绑事件，方法中包含三个参数，分别是绑定的事件处理的属性名称（没有on）处理函数和是否在捕获时候执行事件处理函数如果我们还需要添加一个鼠标的移入的方法，只需要：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">btn.addEventlistener(<span class=\"string\">'mouseover'</span>,showfn,<span class=\"literal\">false</span>)</span><br></pre></td></tr></table></figure>\n<p>这样，点击按钮和鼠标移入时候都将触发showfn的方法。</p>\n<p>需要注意的是IE8以下版本不支持 addEventlistener 和 removeEventListerner<br>需要使用attachEvent和detachEvent实现：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">btn.attachEvent(<span class=\"string\">'onclick'</span>, showFn); <span class=\"comment\">// 绑定事件 </span></span><br><span class=\"line\">btn.detachEvent(<span class=\"string\">'onclick'</span>, showFn); <span class=\"comment\">// 解绑事件</span></span><br></pre></td></tr></table></figure>\n<p>这里我们不需要传入第三个参数，因为IE8以下版本只支持冒泡型事件。</p>\n<h3 id=\"DOM3级事件\"><a href=\"#DOM3级事件\" class=\"headerlink\" title=\"DOM3级事件\"></a>DOM3级事件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DOM3级事件是在DOM2级事件的基础上添加很多事件类型。</span><br><span class=\"line\">UI事件，当用户与页面上的元素交互时触发，如：load、scroll</span><br><span class=\"line\">焦点事件，当元素获得或失去焦点时触发，如：blur、focus</span><br><span class=\"line\">鼠标事件，当用户通过鼠标在页面执行操作时触发如：dbclick、mouseup</span><br><span class=\"line\">滚轮事件，当使用鼠标滚轮或类似设备时触发，如：mousewheel</span><br><span class=\"line\">文本事件，当在文档中输入文本时触发，如：textInput</span><br><span class=\"line\">键盘事件，当用户通过键盘在页面上执行操作时触发，如：keydown、keypress</span><br><span class=\"line\">合成事件，当为IME（输入法编辑器）输入字符时触发，如：compositionstart</span><br><span class=\"line\">变动事件，当底层DOM结构发生变化时触发，如：DOMsubtreeModified</span><br><span class=\"line\">同时DOM3级事件也允许使用者自定义一些事件。</span><br></pre></td></tr></table></figure>\n<p>转载链接:<a href=\"https://www.jianshu.com/p/622d994906f7\" target=\"_blank\" rel=\"noopener\">DOM级别与DOM事件</a></p>"},{"layout":"[post]","title":"ES6中的Proxy、Reflect以及Vue3.0中的应用原理","date":"2020-04-01T17:18:35.000Z","_content":"\n\n## 使用`Object.defineProperty`的一些劣势：\n\n1.  `Object.defineProperty`监听的是对象的属性，如果对象比较复杂，需要逐个深层遍历他的属性来实现监听，耗费性能\n2.  `Object.defineProperty`无法监听数组的变化，使 Vue 不得不对数组做了额外的 hack。\n\n相比之下`Proxy`就更强大，接下来我们就来了解他。\n<!-- more -->\n参考资料：\n\n*   [MDN-Proxy](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy)\n*   [MDN-Reflect](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect)\n*   [面试官: 实现双向绑定 Proxy 比 defineproperty 优劣如何?](https://juejin.im/post/5acd0c8a6fb9a028da7cdfaf#heading-3)\n\n### Proxy 简介\n\nMDN 上是这么描述的——Proxy对象用于定义基本操作的自定义行为（如属性查找，赋值，枚举，函数调用等）。\n\n官方的描述总是言简意赅，以至于不明觉厉...\n\n其实就是在对目标对象的操作之前提供了拦截，可以对外界的操作进行过滤和改写，修改某些操作的默认行为，这样我们可以不直接操作对象本身，而是通过操作对象的代理对象来间接来操作对象，达到预期的目的~\n\n\n> Proxy 对象用于定义基本操作的自定义行为（如属性查找，赋值，枚举，函数调用等）。使用方法如下：\n\n```js\n// 语法\nlet p = new Proxy(target, handler);\n// 用例\nlet p = {a: 1};\nlet proxyP = new Proxy(p, {\n\tget() {\n\t\t// 获取proxyP对象属性时的自定义逻辑\n\t},\n\tset() {\n\t\t// 设置proxyP对象属性时的自定义逻辑\n\t}\n})\n```\n\n上边的代码中：\n\n*   target：用 Proxy 包装的目标对象（可以是任何类型的对象，包括原生数组，函数，甚至另一个代理）。\n*   handler：一个对象，其属性是当执行一个操作时定义代理的行为的函数。\n*   p/proxyP：是一个被代理后的新对象, 它拥有 target 的一切属性和方法. 只不过其行为和结果是在 handler 中自定义的.\n\n> 这里重点说一下`handler`：`handler`本身就是 ES6 所新设计的一个对象. 它的作用就是用来自定义代理对象的各种可代理操作。它本身一共有 13 中方法, 每种方法都可以代理一种操作，常用的几种方法如下:\n\n```js\n// 在定义代理对象某个属性时的属性描述时触发该操作，比如在执行 Object.defineProperty(proxy, \"foo\", {}) 时。\nhandler.defineProperty()\n\n// 在判断代理对象是否拥有某个属性时触发该操作，比如在执行 \"foo\" in proxy 时。\nhandler.has()\n\n// 在读取代理对象的某个属性时触发该操作，比如在执行 proxy.foo 时。\nhandler.get()\n\n// 在给代理对象的某个属性赋值时触发该操作，比如在执行 proxy.foo = 1 时。\nhandler.set()\n\n// 在删除代理对象的某个属性时触发该操作，比如在执行 delete proxy.foo 时。\nhandler.deleteProperty()\n\n// 在获取代理对象的所有属性键时触发该操作，比如在执行 Object.getOwnPropertyNames(proxy) 时。\nhandler.ownKeys()\n\n// 在调用一个目标对象为函数的代理对象时触发该操作，比如在执行 proxy() 时。\nhandler.apply()\n\n// 在给一个目标对象为构造函数的代理对象构造实例时触发该操作，比如在执行new proxy() 时。\nhandler.construct()\n```\n\nProxy 对于代理模式 Proxy 的作用主要体现在三个方面:\n\n1.  拦截和监视外部对对象的访问\n2.  降低函数或类的复杂度\n3.  在复杂操作前对操作进行校验或对所需资源进行管理\n\n### Proxy 在 Vue3.0 中的应用原理\n\n上边已经说过了`Object.defineProperty`的劣势。相应的`Proxy`的优势就很明显了：\n\n*   Proxy 可以直接监听对象而非属性\n*   Proxy 可以直接监听数组的变化\n*   Proxy 有 13 中拦截方法，功能更强大。\n\nProxy 的劣势： 兼容性问题, 而且无法用 polyfill 磨平, 因此 Vue 要到 3.0 版本才能用 Proxy 重写。\n\n简单例子：\n\n```js\nconst input = document.getElementById('input');\nconst p = document.getElementById('p');\nconst obj = {};\n\nconst newObj = new Proxy(obj, {\n  get: function(target, key, receiver) {\n    console.log(`getting ${key}!`);\n    return Reflect.get(target, key, receiver);\n  },\n  set: function(target, key, value, receiver) {\n    console.log(target, key, value, receiver);\n    if (key === 'text') {\n      input.value = value;\n      p.innerHTML = value;\n    }\n    return Reflect.set(target, key, value, receiver);\n  },\n});\n\ninput.addEventListener('keyup', function(e) {\n  newObj.text = e.target.value;\n});\n```\n\n### Reflect\n\n> Reflect 是一个内置的对象，它提供拦截 JavaScript 操作的方法。这些方法与处理器对象的方法相同。Reflect 不是一个函数对象，因此它是不可构造 (即不可`new Reflect`) 的。\n\n`Reflect`对象的方法与`Proxy`对象的方法一一对应，只要是`Proxy`对象的方法，就能在`Reflect`对象上找到对应的方法。这就让`Proxy`对象可以方便地调用对应的 Reflect 方法，完成默认行为，作为修改行为的基础。也就是说，不管`Proxy`怎么修改默认行为，你总可以在`Reflect`上获取默认行为。\n\n**也就是说，Reflect.fn 表示 handler 中的 fn 的默认行为。**\n\n这里我们看两段代码：\n\n```js\n// 这里是get/set方法打印log之后，再执行默认行为\nvar obj = new Proxy({}, {\n  get: function (target, key, receiver) {\n    console.log(`getting ${key}!`);\n    // 在浏览器console中，get方法会默认打印出值\n    // 如果没有Reflect.get执行默认行为，就无法正确打印出值，而会打印undefined\n    return Reflect.get(target, key, receiver);\n  },\n  set: function (target, key, value, receiver) {\n    console.log(`setting ${key}!`);\n    return Reflect.set(target, key, value, receiver);\n  }\n});\n\n// 这里是先执行默认的set确保默认行为执行，set成功之后在打印log，然后返回\nvar obj = new Proxy({}, {\n  set: function(target, name, value, receiver) {\n    var success = Reflect.set(target,name, value, receiver);\n    if (success) {\n      console.log('property ' + name + ' on ' + target + ' set to ' + value);\n    }\n    return success;\n  }\n});\n```\n\n[原文地址 ](https://blog.csdn.net/Creabine/article/details/87811207\n)","source":"_posts/ES6中的Proxy、Reflect以及Vue3-0中的应用原理.md","raw":"---\nlayout: '[post]'\ntitle: ES6中的Proxy、Reflect以及Vue3.0中的应用原理\ndate: 2020-04-02 01:18:35\ntags: Vue\n---\n\n\n## 使用`Object.defineProperty`的一些劣势：\n\n1.  `Object.defineProperty`监听的是对象的属性，如果对象比较复杂，需要逐个深层遍历他的属性来实现监听，耗费性能\n2.  `Object.defineProperty`无法监听数组的变化，使 Vue 不得不对数组做了额外的 hack。\n\n相比之下`Proxy`就更强大，接下来我们就来了解他。\n<!-- more -->\n参考资料：\n\n*   [MDN-Proxy](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy)\n*   [MDN-Reflect](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect)\n*   [面试官: 实现双向绑定 Proxy 比 defineproperty 优劣如何?](https://juejin.im/post/5acd0c8a6fb9a028da7cdfaf#heading-3)\n\n### Proxy 简介\n\nMDN 上是这么描述的——Proxy对象用于定义基本操作的自定义行为（如属性查找，赋值，枚举，函数调用等）。\n\n官方的描述总是言简意赅，以至于不明觉厉...\n\n其实就是在对目标对象的操作之前提供了拦截，可以对外界的操作进行过滤和改写，修改某些操作的默认行为，这样我们可以不直接操作对象本身，而是通过操作对象的代理对象来间接来操作对象，达到预期的目的~\n\n\n> Proxy 对象用于定义基本操作的自定义行为（如属性查找，赋值，枚举，函数调用等）。使用方法如下：\n\n```js\n// 语法\nlet p = new Proxy(target, handler);\n// 用例\nlet p = {a: 1};\nlet proxyP = new Proxy(p, {\n\tget() {\n\t\t// 获取proxyP对象属性时的自定义逻辑\n\t},\n\tset() {\n\t\t// 设置proxyP对象属性时的自定义逻辑\n\t}\n})\n```\n\n上边的代码中：\n\n*   target：用 Proxy 包装的目标对象（可以是任何类型的对象，包括原生数组，函数，甚至另一个代理）。\n*   handler：一个对象，其属性是当执行一个操作时定义代理的行为的函数。\n*   p/proxyP：是一个被代理后的新对象, 它拥有 target 的一切属性和方法. 只不过其行为和结果是在 handler 中自定义的.\n\n> 这里重点说一下`handler`：`handler`本身就是 ES6 所新设计的一个对象. 它的作用就是用来自定义代理对象的各种可代理操作。它本身一共有 13 中方法, 每种方法都可以代理一种操作，常用的几种方法如下:\n\n```js\n// 在定义代理对象某个属性时的属性描述时触发该操作，比如在执行 Object.defineProperty(proxy, \"foo\", {}) 时。\nhandler.defineProperty()\n\n// 在判断代理对象是否拥有某个属性时触发该操作，比如在执行 \"foo\" in proxy 时。\nhandler.has()\n\n// 在读取代理对象的某个属性时触发该操作，比如在执行 proxy.foo 时。\nhandler.get()\n\n// 在给代理对象的某个属性赋值时触发该操作，比如在执行 proxy.foo = 1 时。\nhandler.set()\n\n// 在删除代理对象的某个属性时触发该操作，比如在执行 delete proxy.foo 时。\nhandler.deleteProperty()\n\n// 在获取代理对象的所有属性键时触发该操作，比如在执行 Object.getOwnPropertyNames(proxy) 时。\nhandler.ownKeys()\n\n// 在调用一个目标对象为函数的代理对象时触发该操作，比如在执行 proxy() 时。\nhandler.apply()\n\n// 在给一个目标对象为构造函数的代理对象构造实例时触发该操作，比如在执行new proxy() 时。\nhandler.construct()\n```\n\nProxy 对于代理模式 Proxy 的作用主要体现在三个方面:\n\n1.  拦截和监视外部对对象的访问\n2.  降低函数或类的复杂度\n3.  在复杂操作前对操作进行校验或对所需资源进行管理\n\n### Proxy 在 Vue3.0 中的应用原理\n\n上边已经说过了`Object.defineProperty`的劣势。相应的`Proxy`的优势就很明显了：\n\n*   Proxy 可以直接监听对象而非属性\n*   Proxy 可以直接监听数组的变化\n*   Proxy 有 13 中拦截方法，功能更强大。\n\nProxy 的劣势： 兼容性问题, 而且无法用 polyfill 磨平, 因此 Vue 要到 3.0 版本才能用 Proxy 重写。\n\n简单例子：\n\n```js\nconst input = document.getElementById('input');\nconst p = document.getElementById('p');\nconst obj = {};\n\nconst newObj = new Proxy(obj, {\n  get: function(target, key, receiver) {\n    console.log(`getting ${key}!`);\n    return Reflect.get(target, key, receiver);\n  },\n  set: function(target, key, value, receiver) {\n    console.log(target, key, value, receiver);\n    if (key === 'text') {\n      input.value = value;\n      p.innerHTML = value;\n    }\n    return Reflect.set(target, key, value, receiver);\n  },\n});\n\ninput.addEventListener('keyup', function(e) {\n  newObj.text = e.target.value;\n});\n```\n\n### Reflect\n\n> Reflect 是一个内置的对象，它提供拦截 JavaScript 操作的方法。这些方法与处理器对象的方法相同。Reflect 不是一个函数对象，因此它是不可构造 (即不可`new Reflect`) 的。\n\n`Reflect`对象的方法与`Proxy`对象的方法一一对应，只要是`Proxy`对象的方法，就能在`Reflect`对象上找到对应的方法。这就让`Proxy`对象可以方便地调用对应的 Reflect 方法，完成默认行为，作为修改行为的基础。也就是说，不管`Proxy`怎么修改默认行为，你总可以在`Reflect`上获取默认行为。\n\n**也就是说，Reflect.fn 表示 handler 中的 fn 的默认行为。**\n\n这里我们看两段代码：\n\n```js\n// 这里是get/set方法打印log之后，再执行默认行为\nvar obj = new Proxy({}, {\n  get: function (target, key, receiver) {\n    console.log(`getting ${key}!`);\n    // 在浏览器console中，get方法会默认打印出值\n    // 如果没有Reflect.get执行默认行为，就无法正确打印出值，而会打印undefined\n    return Reflect.get(target, key, receiver);\n  },\n  set: function (target, key, value, receiver) {\n    console.log(`setting ${key}!`);\n    return Reflect.set(target, key, value, receiver);\n  }\n});\n\n// 这里是先执行默认的set确保默认行为执行，set成功之后在打印log，然后返回\nvar obj = new Proxy({}, {\n  set: function(target, name, value, receiver) {\n    var success = Reflect.set(target,name, value, receiver);\n    if (success) {\n      console.log('property ' + name + ' on ' + target + ' set to ' + value);\n    }\n    return success;\n  }\n});\n```\n\n[原文地址 ](https://blog.csdn.net/Creabine/article/details/87811207\n)","slug":"ES6中的Proxy、Reflect以及Vue3-0中的应用原理","published":1,"updated":"2020-05-15T06:46:06.000Z","comments":1,"photos":[],"link":"","_id":"ckbftlm5l00097w2p22rq9jvx","content":"<h2 id=\"使用Object-defineProperty的一些劣势：\"><a href=\"#使用Object-defineProperty的一些劣势：\" class=\"headerlink\" title=\"使用Object.defineProperty的一些劣势：\"></a>使用<code>Object.defineProperty</code>的一些劣势：</h2><ol>\n<li><code>Object.defineProperty</code>监听的是对象的属性，如果对象比较复杂，需要逐个深层遍历他的属性来实现监听，耗费性能</li>\n<li><code>Object.defineProperty</code>无法监听数组的变化，使 Vue 不得不对数组做了额外的 hack。</li>\n</ol>\n<p>相比之下<code>Proxy</code>就更强大，接下来我们就来了解他。</p>\n<a id=\"more\"></a>\n<p>参考资料：</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy\" target=\"_blank\" rel=\"noopener\">MDN-Proxy</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect\" target=\"_blank\" rel=\"noopener\">MDN-Reflect</a></li>\n<li><a href=\"https://juejin.im/post/5acd0c8a6fb9a028da7cdfaf#heading-3\" target=\"_blank\" rel=\"noopener\">面试官: 实现双向绑定 Proxy 比 defineproperty 优劣如何?</a></li>\n</ul>\n<h3 id=\"Proxy-简介\"><a href=\"#Proxy-简介\" class=\"headerlink\" title=\"Proxy 简介\"></a>Proxy 简介</h3><p>MDN 上是这么描述的——Proxy对象用于定义基本操作的自定义行为（如属性查找，赋值，枚举，函数调用等）。</p>\n<p>官方的描述总是言简意赅，以至于不明觉厉…</p>\n<p>其实就是在对目标对象的操作之前提供了拦截，可以对外界的操作进行过滤和改写，修改某些操作的默认行为，这样我们可以不直接操作对象本身，而是通过操作对象的代理对象来间接来操作对象，达到预期的目的~</p>\n<blockquote>\n<p>Proxy 对象用于定义基本操作的自定义行为（如属性查找，赋值，枚举，函数调用等）。使用方法如下：</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 语法</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, handler);</span><br><span class=\"line\"><span class=\"comment\">// 用例</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> p = &#123;<span class=\"attr\">a</span>: <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> proxyP = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(p, &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">get</span>() &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 获取proxyP对象属性时的自定义逻辑</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"keyword\">set</span>() &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 设置proxyP对象属性时的自定义逻辑</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>上边的代码中：</p>\n<ul>\n<li>target：用 Proxy 包装的目标对象（可以是任何类型的对象，包括原生数组，函数，甚至另一个代理）。</li>\n<li>handler：一个对象，其属性是当执行一个操作时定义代理的行为的函数。</li>\n<li>p/proxyP：是一个被代理后的新对象, 它拥有 target 的一切属性和方法. 只不过其行为和结果是在 handler 中自定义的.</li>\n</ul>\n<blockquote>\n<p>这里重点说一下<code>handler</code>：<code>handler</code>本身就是 ES6 所新设计的一个对象. 它的作用就是用来自定义代理对象的各种可代理操作。它本身一共有 13 中方法, 每种方法都可以代理一种操作，常用的几种方法如下:</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在定义代理对象某个属性时的属性描述时触发该操作，比如在执行 Object.defineProperty(proxy, \"foo\", &#123;&#125;) 时。</span></span><br><span class=\"line\">handler.defineProperty()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在判断代理对象是否拥有某个属性时触发该操作，比如在执行 \"foo\" in proxy 时。</span></span><br><span class=\"line\">handler.has()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在读取代理对象的某个属性时触发该操作，比如在执行 proxy.foo 时。</span></span><br><span class=\"line\">handler.get()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在给代理对象的某个属性赋值时触发该操作，比如在执行 proxy.foo = 1 时。</span></span><br><span class=\"line\">handler.set()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在删除代理对象的某个属性时触发该操作，比如在执行 delete proxy.foo 时。</span></span><br><span class=\"line\">handler.deleteProperty()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在获取代理对象的所有属性键时触发该操作，比如在执行 Object.getOwnPropertyNames(proxy) 时。</span></span><br><span class=\"line\">handler.ownKeys()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在调用一个目标对象为函数的代理对象时触发该操作，比如在执行 proxy() 时。</span></span><br><span class=\"line\">handler.apply()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在给一个目标对象为构造函数的代理对象构造实例时触发该操作，比如在执行new proxy() 时。</span></span><br><span class=\"line\">handler.construct()</span><br></pre></td></tr></table></figure>\n\n<p>Proxy 对于代理模式 Proxy 的作用主要体现在三个方面:</p>\n<ol>\n<li>拦截和监视外部对对象的访问</li>\n<li>降低函数或类的复杂度</li>\n<li>在复杂操作前对操作进行校验或对所需资源进行管理</li>\n</ol>\n<h3 id=\"Proxy-在-Vue3-0-中的应用原理\"><a href=\"#Proxy-在-Vue3-0-中的应用原理\" class=\"headerlink\" title=\"Proxy 在 Vue3.0 中的应用原理\"></a>Proxy 在 Vue3.0 中的应用原理</h3><p>上边已经说过了<code>Object.defineProperty</code>的劣势。相应的<code>Proxy</code>的优势就很明显了：</p>\n<ul>\n<li>Proxy 可以直接监听对象而非属性</li>\n<li>Proxy 可以直接监听数组的变化</li>\n<li>Proxy 有 13 中拦截方法，功能更强大。</li>\n</ul>\n<p>Proxy 的劣势： 兼容性问题, 而且无法用 polyfill 磨平, 因此 Vue 要到 3.0 版本才能用 Proxy 重写。</p>\n<p>简单例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> input = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'input'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'p'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> newObj = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(obj, &#123;</span><br><span class=\"line\">  <span class=\"keyword\">get</span>: function(target, key, receiver) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`getting <span class=\"subst\">$&#123;key&#125;</span>!`</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.get(target, key, receiver);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"keyword\">set</span>: function(target, key, value, receiver) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(target, key, value, receiver);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (key === <span class=\"string\">'text'</span>) &#123;</span><br><span class=\"line\">      input.value = value;</span><br><span class=\"line\">      p.innerHTML = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.set(target, key, value, receiver);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">input.addEventListener(<span class=\"string\">'keyup'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  newObj.text = e.target.value;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Reflect\"><a href=\"#Reflect\" class=\"headerlink\" title=\"Reflect\"></a>Reflect</h3><blockquote>\n<p>Reflect 是一个内置的对象，它提供拦截 JavaScript 操作的方法。这些方法与处理器对象的方法相同。Reflect 不是一个函数对象，因此它是不可构造 (即不可<code>new Reflect</code>) 的。</p>\n</blockquote>\n<p><code>Reflect</code>对象的方法与<code>Proxy</code>对象的方法一一对应，只要是<code>Proxy</code>对象的方法，就能在<code>Reflect</code>对象上找到对应的方法。这就让<code>Proxy</code>对象可以方便地调用对应的 Reflect 方法，完成默认行为，作为修改行为的基础。也就是说，不管<code>Proxy</code>怎么修改默认行为，你总可以在<code>Reflect</code>上获取默认行为。</p>\n<p><strong>也就是说，Reflect.fn 表示 handler 中的 fn 的默认行为。</strong></p>\n<p>这里我们看两段代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这里是get/set方法打印log之后，再执行默认行为</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;&#125;, &#123;</span><br><span class=\"line\">  <span class=\"keyword\">get</span>: function (target, key, receiver) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`getting <span class=\"subst\">$&#123;key&#125;</span>!`</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 在浏览器console中，get方法会默认打印出值</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果没有Reflect.get执行默认行为，就无法正确打印出值，而会打印undefined</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.get(target, key, receiver);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"keyword\">set</span>: function (target, key, value, receiver) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`setting <span class=\"subst\">$&#123;key&#125;</span>!`</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.set(target, key, value, receiver);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这里是先执行默认的set确保默认行为执行，set成功之后在打印log，然后返回</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;&#125;, &#123;</span><br><span class=\"line\">  <span class=\"keyword\">set</span>: function(target, name, value, receiver) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> success = <span class=\"built_in\">Reflect</span>.set(target,name, value, receiver);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (success) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'property '</span> + name + <span class=\"string\">' on '</span> + target + <span class=\"string\">' set to '</span> + value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> success;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://blog.csdn.net/Creabine/article/details/87811207\" target=\"_blank\" rel=\"noopener\">原文地址 </a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"使用Object-defineProperty的一些劣势：\"><a href=\"#使用Object-defineProperty的一些劣势：\" class=\"headerlink\" title=\"使用Object.defineProperty的一些劣势：\"></a>使用<code>Object.defineProperty</code>的一些劣势：</h2><ol>\n<li><code>Object.defineProperty</code>监听的是对象的属性，如果对象比较复杂，需要逐个深层遍历他的属性来实现监听，耗费性能</li>\n<li><code>Object.defineProperty</code>无法监听数组的变化，使 Vue 不得不对数组做了额外的 hack。</li>\n</ol>\n<p>相比之下<code>Proxy</code>就更强大，接下来我们就来了解他。</p>","more":"<p>参考资料：</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy\" target=\"_blank\" rel=\"noopener\">MDN-Proxy</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect\" target=\"_blank\" rel=\"noopener\">MDN-Reflect</a></li>\n<li><a href=\"https://juejin.im/post/5acd0c8a6fb9a028da7cdfaf#heading-3\" target=\"_blank\" rel=\"noopener\">面试官: 实现双向绑定 Proxy 比 defineproperty 优劣如何?</a></li>\n</ul>\n<h3 id=\"Proxy-简介\"><a href=\"#Proxy-简介\" class=\"headerlink\" title=\"Proxy 简介\"></a>Proxy 简介</h3><p>MDN 上是这么描述的——Proxy对象用于定义基本操作的自定义行为（如属性查找，赋值，枚举，函数调用等）。</p>\n<p>官方的描述总是言简意赅，以至于不明觉厉…</p>\n<p>其实就是在对目标对象的操作之前提供了拦截，可以对外界的操作进行过滤和改写，修改某些操作的默认行为，这样我们可以不直接操作对象本身，而是通过操作对象的代理对象来间接来操作对象，达到预期的目的~</p>\n<blockquote>\n<p>Proxy 对象用于定义基本操作的自定义行为（如属性查找，赋值，枚举，函数调用等）。使用方法如下：</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 语法</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, handler);</span><br><span class=\"line\"><span class=\"comment\">// 用例</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> p = &#123;<span class=\"attr\">a</span>: <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> proxyP = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(p, &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">get</span>() &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 获取proxyP对象属性时的自定义逻辑</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"keyword\">set</span>() &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 设置proxyP对象属性时的自定义逻辑</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>上边的代码中：</p>\n<ul>\n<li>target：用 Proxy 包装的目标对象（可以是任何类型的对象，包括原生数组，函数，甚至另一个代理）。</li>\n<li>handler：一个对象，其属性是当执行一个操作时定义代理的行为的函数。</li>\n<li>p/proxyP：是一个被代理后的新对象, 它拥有 target 的一切属性和方法. 只不过其行为和结果是在 handler 中自定义的.</li>\n</ul>\n<blockquote>\n<p>这里重点说一下<code>handler</code>：<code>handler</code>本身就是 ES6 所新设计的一个对象. 它的作用就是用来自定义代理对象的各种可代理操作。它本身一共有 13 中方法, 每种方法都可以代理一种操作，常用的几种方法如下:</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在定义代理对象某个属性时的属性描述时触发该操作，比如在执行 Object.defineProperty(proxy, \"foo\", &#123;&#125;) 时。</span></span><br><span class=\"line\">handler.defineProperty()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在判断代理对象是否拥有某个属性时触发该操作，比如在执行 \"foo\" in proxy 时。</span></span><br><span class=\"line\">handler.has()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在读取代理对象的某个属性时触发该操作，比如在执行 proxy.foo 时。</span></span><br><span class=\"line\">handler.get()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在给代理对象的某个属性赋值时触发该操作，比如在执行 proxy.foo = 1 时。</span></span><br><span class=\"line\">handler.set()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在删除代理对象的某个属性时触发该操作，比如在执行 delete proxy.foo 时。</span></span><br><span class=\"line\">handler.deleteProperty()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在获取代理对象的所有属性键时触发该操作，比如在执行 Object.getOwnPropertyNames(proxy) 时。</span></span><br><span class=\"line\">handler.ownKeys()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在调用一个目标对象为函数的代理对象时触发该操作，比如在执行 proxy() 时。</span></span><br><span class=\"line\">handler.apply()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在给一个目标对象为构造函数的代理对象构造实例时触发该操作，比如在执行new proxy() 时。</span></span><br><span class=\"line\">handler.construct()</span><br></pre></td></tr></table></figure>\n\n<p>Proxy 对于代理模式 Proxy 的作用主要体现在三个方面:</p>\n<ol>\n<li>拦截和监视外部对对象的访问</li>\n<li>降低函数或类的复杂度</li>\n<li>在复杂操作前对操作进行校验或对所需资源进行管理</li>\n</ol>\n<h3 id=\"Proxy-在-Vue3-0-中的应用原理\"><a href=\"#Proxy-在-Vue3-0-中的应用原理\" class=\"headerlink\" title=\"Proxy 在 Vue3.0 中的应用原理\"></a>Proxy 在 Vue3.0 中的应用原理</h3><p>上边已经说过了<code>Object.defineProperty</code>的劣势。相应的<code>Proxy</code>的优势就很明显了：</p>\n<ul>\n<li>Proxy 可以直接监听对象而非属性</li>\n<li>Proxy 可以直接监听数组的变化</li>\n<li>Proxy 有 13 中拦截方法，功能更强大。</li>\n</ul>\n<p>Proxy 的劣势： 兼容性问题, 而且无法用 polyfill 磨平, 因此 Vue 要到 3.0 版本才能用 Proxy 重写。</p>\n<p>简单例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> input = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'input'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'p'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> newObj = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(obj, &#123;</span><br><span class=\"line\">  <span class=\"keyword\">get</span>: function(target, key, receiver) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`getting <span class=\"subst\">$&#123;key&#125;</span>!`</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.get(target, key, receiver);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"keyword\">set</span>: function(target, key, value, receiver) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(target, key, value, receiver);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (key === <span class=\"string\">'text'</span>) &#123;</span><br><span class=\"line\">      input.value = value;</span><br><span class=\"line\">      p.innerHTML = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.set(target, key, value, receiver);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">input.addEventListener(<span class=\"string\">'keyup'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  newObj.text = e.target.value;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Reflect\"><a href=\"#Reflect\" class=\"headerlink\" title=\"Reflect\"></a>Reflect</h3><blockquote>\n<p>Reflect 是一个内置的对象，它提供拦截 JavaScript 操作的方法。这些方法与处理器对象的方法相同。Reflect 不是一个函数对象，因此它是不可构造 (即不可<code>new Reflect</code>) 的。</p>\n</blockquote>\n<p><code>Reflect</code>对象的方法与<code>Proxy</code>对象的方法一一对应，只要是<code>Proxy</code>对象的方法，就能在<code>Reflect</code>对象上找到对应的方法。这就让<code>Proxy</code>对象可以方便地调用对应的 Reflect 方法，完成默认行为，作为修改行为的基础。也就是说，不管<code>Proxy</code>怎么修改默认行为，你总可以在<code>Reflect</code>上获取默认行为。</p>\n<p><strong>也就是说，Reflect.fn 表示 handler 中的 fn 的默认行为。</strong></p>\n<p>这里我们看两段代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这里是get/set方法打印log之后，再执行默认行为</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;&#125;, &#123;</span><br><span class=\"line\">  <span class=\"keyword\">get</span>: function (target, key, receiver) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`getting <span class=\"subst\">$&#123;key&#125;</span>!`</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 在浏览器console中，get方法会默认打印出值</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果没有Reflect.get执行默认行为，就无法正确打印出值，而会打印undefined</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.get(target, key, receiver);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"keyword\">set</span>: function (target, key, value, receiver) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`setting <span class=\"subst\">$&#123;key&#125;</span>!`</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.set(target, key, value, receiver);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这里是先执行默认的set确保默认行为执行，set成功之后在打印log，然后返回</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;&#125;, &#123;</span><br><span class=\"line\">  <span class=\"keyword\">set</span>: function(target, name, value, receiver) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> success = <span class=\"built_in\">Reflect</span>.set(target,name, value, receiver);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (success) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'property '</span> + name + <span class=\"string\">' on '</span> + target + <span class=\"string\">' set to '</span> + value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> success;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://blog.csdn.net/Creabine/article/details/87811207\" target=\"_blank\" rel=\"noopener\">原文地址 </a></p>"},{"layout":"[post]","title":"Event事件常见应用","date":"2019-06-25T09:20:41.000Z","_content":"## Event 对象\nW3C的说法是：\n\nEvent 对象代表事件的状态，比如事件在其中发生的元素、键盘按键的状态、鼠标的位置、鼠标按钮的状态。\n\n事件通常与函数结合使用，函数不会在事件发生前被执行！\n<!-- more -->\n## 几种常见事件\n**event.preventDefault()** :阻止默认事件  \n\n**event.stopPropagation()**:阻止冒泡  \n\n**event.stopImmediatePropagation()**:按优先级阻止执行\n\n```html\n<!DOCTYPE html>\n<html>\n    <head>\n        <style>\n            p { height: 30px; width: 150px; background-color: #ccf; }\n            div {height: 30px; width: 150px; background-color: #cfc; }\n        </style>\n    </head>\n    <body>\n        <div>\n            <p>paragraph</p>\n        </div>\n        <script>\n            const p = document.querySelector('p')\n            p.addEventListener(\"click\", (event) => {\n              alert(\"我是p元素上被绑定的第一个监听函数\");\n            }, false);\n\n            p.addEventListener(\"click\", (event) => {\n              alert(\"我是p元素上被绑定的第二个监听函数\");\n              event.stopImmediatePropagation();\n              // 执行stopImmediatePropagation方法,阻止click事件冒泡,并且阻止p元素上绑定的其他click事件的事件监听函数的执行.\n            }, false);\n\n            p.addEventListener(\"click\",(event) => {\n              alert(\"我是p元素上被绑定的第三个监听函数\");\n              // 该监听函数排在上个函数后面，该函数不会被执行\n            }, false);\n\n            document.querySelector(\"div\").addEventListener(\"click\", (event) => {\n              alert(\"我是div元素,我是p元素的上层元素\");\n              // p元素的click事件没有向上冒泡，该函数不会被执行\n            }, false);\n        </script>\n    </body>\n</html>\n```\n\n**event.currentTarget**:当前绑定的事件（父级元素）\n\n**event.target**:绑定的事件\n\n以上两者主要用于事件委托中。  \n**事件委托就是利用冒泡的原理，将事件加到 父元素 或 祖先元素上，触发执行效果。**\n\n```html\n<ul id=\"myLinks\">\n  <li id=\"goSomewhere\">Go somewhere</li>\n  <li id=\"doSomething\">Do something</li>\n  <li id=\"sayHi\">Say hi</li>\n</ul>\n```\n正常情况下添加点击事件\n\n```js\nvar item1 = document.getElementById(\"goSomewhere\");\n    var item2 = document.getElementById(\"doSomething\");\n    var item3 = document.getElementById(\"sayHi\");\n \n    item1.onclick = function() {\n      location.href = \"http://www.baidu.com\";\n    };\n    item2.onclick = function() {\n      document.title = \"事件委托\";\n    };\n    item3.onclick = function() {\n      alert(\"hi\");\n    };\n\n```\n使用事件委托\n\n```js\n document.addEventListener(\"click\", function (event) {\n      var target = event.target;\n      switch (target.id) {\n        case \"doSomething\":\n          document.title = \"事件委托\";\n          break;\n        case \"goSomewhere\":\n          location.href = \"http://www.baidu.com\";\n          break;\n        case \"sayHi\": alert(\"hi\");\n          break;\n      }\n    })\n```\n## 自定义事件\n\n```js\nvar eventCus = new Event('custome');\nev.addEventListener('custome',function(){\n    console.log('自定义事件');\n});\nev.dispatchEvent(eve);\n```\n自定义事件也可以使用```customEvent```\n\n区别在于能够传递数据\n\n\n```js\nfunction createEvent(params, eventName = 'mock-event') {\n    return new CustomEvent(eventName, { detail: params });\n}\n\nconst event = createEvent({ id: '0010' });\n```\n这里值得注意，需要把想要传递的参数包裹在一个包含detail属性的对象，否则传递的参数不会被挂载？（这里不太确定，我试过传id和params都不会生效）\n\n```js\n window.addEventListener('mock-event', ({ detail: { id } }) => {\n            console.log('id',id) // 会在控制台打印0010\n        });\n```\n## DOM事件流的补充\n\n```html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\" />\n\t\t<title>DOM事件流</title>\n\t</head>\n\n\t<body>\n\t\t<div id=\"ev\">\n\t\t\t<style>\n\t\t\t\t#ev {\n\t\t\t\t\twidth: 300px;\n\t\t\t\t\theight: 100px;\n\t\t\t\t\tbackground-color: red;\n\t\t\t\t\tcolor: #fff;\n\t\t\t\t\ttext-align: center;\n\t\t\t\t\tline-height: 100px;\n\t\t\t\t}\n\t\t\t</style>\n\t\t\t目标元素\n\t\t</div>\n\t\t<script type=\"text/javascript\">\n\t\t\tvar ev = document.getElementById('ev');\n\t\t\twindow.addEventListener(\n\t\t\t\t'click',\n\t\t\t\tfunction() {\n\t\t\t\t\tconsole.log('window捕获阶段');\n\t\t\t\t},\n\t\t\t\ttrue\n\t\t\t);\n\t\t\tdocument.addEventListener(\n\t\t\t\t'click',\n\t\t\t\tfunction() {\n\t\t\t\t\tconsole.log('doc捕获阶段');\n\t\t\t\t},\n\t\t\t\ttrue\n\t\t\t);\n\t\t\tdocument.documentElement.addEventListener(\n\t\t\t\t'click',\n\t\t\t\tfunction() {\n\t\t\t\t\tconsole.log('html捕获阶段');\n\t\t\t\t},\n\t\t\t\ttrue\n\t\t\t);\n\t\t\tdocument.body.addEventListener(\n\t\t\t\t'click',\n\t\t\t\tfunction() {\n\t\t\t\t\tconsole.log('body捕获阶段');\n\t\t\t\t},\n\t\t\t\ttrue\n\t\t\t);\n\t\t\tev.addEventListener(\n\t\t\t\t'click',\n\t\t\t\tfunction() {\n\t\t\t\t\tconsole.log('div捕获阶段');\n\t\t\t\t},\n\t\t\t\ttrue\n            );\n            var eve=new Event('test');\n            ev.addEventListener('test',function(){\n                console.log('自定义事件');\n            });\n            ev.dispatchEvent(eve);\n\t\t</script>\n\t</body>\n</html>\n\n```\n\n\n","source":"_posts/Event事件常见应用.md","raw":"---\nlayout: '[post]'\ntitle: Event事件常见应用\ndate: 2019-06-25 17:20:41\ntags: html\n---\n## Event 对象\nW3C的说法是：\n\nEvent 对象代表事件的状态，比如事件在其中发生的元素、键盘按键的状态、鼠标的位置、鼠标按钮的状态。\n\n事件通常与函数结合使用，函数不会在事件发生前被执行！\n<!-- more -->\n## 几种常见事件\n**event.preventDefault()** :阻止默认事件  \n\n**event.stopPropagation()**:阻止冒泡  \n\n**event.stopImmediatePropagation()**:按优先级阻止执行\n\n```html\n<!DOCTYPE html>\n<html>\n    <head>\n        <style>\n            p { height: 30px; width: 150px; background-color: #ccf; }\n            div {height: 30px; width: 150px; background-color: #cfc; }\n        </style>\n    </head>\n    <body>\n        <div>\n            <p>paragraph</p>\n        </div>\n        <script>\n            const p = document.querySelector('p')\n            p.addEventListener(\"click\", (event) => {\n              alert(\"我是p元素上被绑定的第一个监听函数\");\n            }, false);\n\n            p.addEventListener(\"click\", (event) => {\n              alert(\"我是p元素上被绑定的第二个监听函数\");\n              event.stopImmediatePropagation();\n              // 执行stopImmediatePropagation方法,阻止click事件冒泡,并且阻止p元素上绑定的其他click事件的事件监听函数的执行.\n            }, false);\n\n            p.addEventListener(\"click\",(event) => {\n              alert(\"我是p元素上被绑定的第三个监听函数\");\n              // 该监听函数排在上个函数后面，该函数不会被执行\n            }, false);\n\n            document.querySelector(\"div\").addEventListener(\"click\", (event) => {\n              alert(\"我是div元素,我是p元素的上层元素\");\n              // p元素的click事件没有向上冒泡，该函数不会被执行\n            }, false);\n        </script>\n    </body>\n</html>\n```\n\n**event.currentTarget**:当前绑定的事件（父级元素）\n\n**event.target**:绑定的事件\n\n以上两者主要用于事件委托中。  \n**事件委托就是利用冒泡的原理，将事件加到 父元素 或 祖先元素上，触发执行效果。**\n\n```html\n<ul id=\"myLinks\">\n  <li id=\"goSomewhere\">Go somewhere</li>\n  <li id=\"doSomething\">Do something</li>\n  <li id=\"sayHi\">Say hi</li>\n</ul>\n```\n正常情况下添加点击事件\n\n```js\nvar item1 = document.getElementById(\"goSomewhere\");\n    var item2 = document.getElementById(\"doSomething\");\n    var item3 = document.getElementById(\"sayHi\");\n \n    item1.onclick = function() {\n      location.href = \"http://www.baidu.com\";\n    };\n    item2.onclick = function() {\n      document.title = \"事件委托\";\n    };\n    item3.onclick = function() {\n      alert(\"hi\");\n    };\n\n```\n使用事件委托\n\n```js\n document.addEventListener(\"click\", function (event) {\n      var target = event.target;\n      switch (target.id) {\n        case \"doSomething\":\n          document.title = \"事件委托\";\n          break;\n        case \"goSomewhere\":\n          location.href = \"http://www.baidu.com\";\n          break;\n        case \"sayHi\": alert(\"hi\");\n          break;\n      }\n    })\n```\n## 自定义事件\n\n```js\nvar eventCus = new Event('custome');\nev.addEventListener('custome',function(){\n    console.log('自定义事件');\n});\nev.dispatchEvent(eve);\n```\n自定义事件也可以使用```customEvent```\n\n区别在于能够传递数据\n\n\n```js\nfunction createEvent(params, eventName = 'mock-event') {\n    return new CustomEvent(eventName, { detail: params });\n}\n\nconst event = createEvent({ id: '0010' });\n```\n这里值得注意，需要把想要传递的参数包裹在一个包含detail属性的对象，否则传递的参数不会被挂载？（这里不太确定，我试过传id和params都不会生效）\n\n```js\n window.addEventListener('mock-event', ({ detail: { id } }) => {\n            console.log('id',id) // 会在控制台打印0010\n        });\n```\n## DOM事件流的补充\n\n```html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\" />\n\t\t<title>DOM事件流</title>\n\t</head>\n\n\t<body>\n\t\t<div id=\"ev\">\n\t\t\t<style>\n\t\t\t\t#ev {\n\t\t\t\t\twidth: 300px;\n\t\t\t\t\theight: 100px;\n\t\t\t\t\tbackground-color: red;\n\t\t\t\t\tcolor: #fff;\n\t\t\t\t\ttext-align: center;\n\t\t\t\t\tline-height: 100px;\n\t\t\t\t}\n\t\t\t</style>\n\t\t\t目标元素\n\t\t</div>\n\t\t<script type=\"text/javascript\">\n\t\t\tvar ev = document.getElementById('ev');\n\t\t\twindow.addEventListener(\n\t\t\t\t'click',\n\t\t\t\tfunction() {\n\t\t\t\t\tconsole.log('window捕获阶段');\n\t\t\t\t},\n\t\t\t\ttrue\n\t\t\t);\n\t\t\tdocument.addEventListener(\n\t\t\t\t'click',\n\t\t\t\tfunction() {\n\t\t\t\t\tconsole.log('doc捕获阶段');\n\t\t\t\t},\n\t\t\t\ttrue\n\t\t\t);\n\t\t\tdocument.documentElement.addEventListener(\n\t\t\t\t'click',\n\t\t\t\tfunction() {\n\t\t\t\t\tconsole.log('html捕获阶段');\n\t\t\t\t},\n\t\t\t\ttrue\n\t\t\t);\n\t\t\tdocument.body.addEventListener(\n\t\t\t\t'click',\n\t\t\t\tfunction() {\n\t\t\t\t\tconsole.log('body捕获阶段');\n\t\t\t\t},\n\t\t\t\ttrue\n\t\t\t);\n\t\t\tev.addEventListener(\n\t\t\t\t'click',\n\t\t\t\tfunction() {\n\t\t\t\t\tconsole.log('div捕获阶段');\n\t\t\t\t},\n\t\t\t\ttrue\n            );\n            var eve=new Event('test');\n            ev.addEventListener('test',function(){\n                console.log('自定义事件');\n            });\n            ev.dispatchEvent(eve);\n\t\t</script>\n\t</body>\n</html>\n\n```\n\n\n","slug":"Event事件常见应用","published":1,"updated":"2020-03-12T09:21:28.000Z","comments":1,"photos":[],"link":"","_id":"ckbftlm5o000c7w2phs0w10au","content":"<h2 id=\"Event-对象\"><a href=\"#Event-对象\" class=\"headerlink\" title=\"Event 对象\"></a>Event 对象</h2><p>W3C的说法是：</p>\n<p>Event 对象代表事件的状态，比如事件在其中发生的元素、键盘按键的状态、鼠标的位置、鼠标按钮的状态。</p>\n<p>事件通常与函数结合使用，函数不会在事件发生前被执行！</p>\n<a id=\"more\"></a>\n<h2 id=\"几种常见事件\"><a href=\"#几种常见事件\" class=\"headerlink\" title=\"几种常见事件\"></a>几种常见事件</h2><p><strong>event.preventDefault()</strong> :阻止默认事件  </p>\n<p><strong>event.stopPropagation()</strong>:阻止冒泡  </p>\n<p><strong>event.stopImmediatePropagation()</strong>:按优先级阻止执行</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">p</span> &#123; <span class=\"attribute\">height</span>: <span class=\"number\">30px</span>; <span class=\"attribute\">width</span>: <span class=\"number\">150px</span>; <span class=\"attribute\">background-color</span>: <span class=\"number\">#ccf</span>; &#125;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">div</span> &#123;<span class=\"attribute\">height</span>: <span class=\"number\">30px</span>; <span class=\"attribute\">width</span>: <span class=\"number\">150px</span>; <span class=\"attribute\">background-color</span>: <span class=\"number\">#cfc</span>; &#125;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>paragraph<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">const</span> p = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'p'</span>)</span></span><br><span class=\"line\"><span class=\"actionscript\">            p.addEventListener(<span class=\"string\">\"click\"</span>, (event) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">              alert(<span class=\"string\">\"我是p元素上被绑定的第一个监听函数\"</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">            &#125;, <span class=\"literal\">false</span>);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">            p.addEventListener(<span class=\"string\">\"click\"</span>, (event) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">              alert(<span class=\"string\">\"我是p元素上被绑定的第二个监听函数\"</span>);</span></span><br><span class=\"line\">              event.stopImmediatePropagation();</span><br><span class=\"line\"><span class=\"actionscript\">              <span class=\"comment\">// 执行stopImmediatePropagation方法,阻止click事件冒泡,并且阻止p元素上绑定的其他click事件的事件监听函数的执行.</span></span></span><br><span class=\"line\"><span class=\"actionscript\">            &#125;, <span class=\"literal\">false</span>);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">            p.addEventListener(<span class=\"string\">\"click\"</span>,(event) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">              alert(<span class=\"string\">\"我是p元素上被绑定的第三个监听函数\"</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">              <span class=\"comment\">// 该监听函数排在上个函数后面，该函数不会被执行</span></span></span><br><span class=\"line\"><span class=\"actionscript\">            &#125;, <span class=\"literal\">false</span>);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">\"div\"</span>).addEventListener(<span class=\"string\">\"click\"</span>, (event) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">              alert(<span class=\"string\">\"我是div元素,我是p元素的上层元素\"</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">              <span class=\"comment\">// p元素的click事件没有向上冒泡，该函数不会被执行</span></span></span><br><span class=\"line\"><span class=\"actionscript\">            &#125;, <span class=\"literal\">false</span>);</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>event.currentTarget</strong>:当前绑定的事件（父级元素）</p>\n<p><strong>event.target</strong>:绑定的事件</p>\n<p>以上两者主要用于事件委托中。<br><strong>事件委托就是利用冒泡的原理，将事件加到 父元素 或 祖先元素上，触发执行效果。</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myLinks\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"goSomewhere\"</span>&gt;</span>Go somewhere<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"doSomething\"</span>&gt;</span>Do something<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"sayHi\"</span>&gt;</span>Say hi<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>正常情况下添加点击事件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> item1 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"goSomewhere\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> item2 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"doSomething\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> item3 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"sayHi\"</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">    item1.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      location.href = <span class=\"string\">\"http://www.baidu.com\"</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    item2.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">document</span>.title = <span class=\"string\">\"事件委托\"</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    item3.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      alert(<span class=\"string\">\"hi\"</span>);</span><br><span class=\"line\">    &#125;;</span><br></pre></td></tr></table></figure>\n<p>使用事件委托</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"click\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">var</span> target = event.target;</span><br><span class=\"line\">     <span class=\"keyword\">switch</span> (target.id) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">case</span> <span class=\"string\">\"doSomething\"</span>:</span><br><span class=\"line\">         <span class=\"built_in\">document</span>.title = <span class=\"string\">\"事件委托\"</span>;</span><br><span class=\"line\">         <span class=\"keyword\">break</span>;</span><br><span class=\"line\">       <span class=\"keyword\">case</span> <span class=\"string\">\"goSomewhere\"</span>:</span><br><span class=\"line\">         location.href = <span class=\"string\">\"http://www.baidu.com\"</span>;</span><br><span class=\"line\">         <span class=\"keyword\">break</span>;</span><br><span class=\"line\">       <span class=\"keyword\">case</span> <span class=\"string\">\"sayHi\"</span>: alert(<span class=\"string\">\"hi\"</span>);</span><br><span class=\"line\">         <span class=\"keyword\">break</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"自定义事件\"><a href=\"#自定义事件\" class=\"headerlink\" title=\"自定义事件\"></a>自定义事件</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> eventCus = <span class=\"keyword\">new</span> Event(<span class=\"string\">'custome'</span>);</span><br><span class=\"line\">ev.addEventListener(<span class=\"string\">'custome'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'自定义事件'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">ev.dispatchEvent(eve);</span><br></pre></td></tr></table></figure>\n<p>自定义事件也可以使用<code>customEvent</code></p>\n<p>区别在于能够传递数据</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createEvent</span>(<span class=\"params\">params, eventName = <span class=\"string\">'mock-event'</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> CustomEvent(eventName, &#123; <span class=\"attr\">detail</span>: params &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> event = createEvent(&#123; <span class=\"attr\">id</span>: <span class=\"string\">'0010'</span> &#125;);</span><br></pre></td></tr></table></figure>\n<p>这里值得注意，需要把想要传递的参数包裹在一个包含detail属性的对象，否则传递的参数不会被挂载？（这里不太确定，我试过传id和params都不会生效）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'mock-event'</span>, (&#123; <span class=\"attr\">detail</span>: &#123; id &#125; &#125;) =&gt; &#123;</span><br><span class=\"line\">           <span class=\"built_in\">console</span>.log(<span class=\"string\">'id'</span>,id) <span class=\"comment\">// 会在控制台打印0010</span></span><br><span class=\"line\">       &#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"DOM事件流的补充\"><a href=\"#DOM事件流的补充\" class=\"headerlink\" title=\"DOM事件流的补充\"></a>DOM事件流的补充</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>DOM事件流<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"ev\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t\t<span class=\"selector-id\">#ev</span> &#123;</span></span><br><span class=\"line\">\t\t\t\t\twidth: 300px;</span><br><span class=\"line\">\t\t\t\t\theight: 100px;</span><br><span class=\"line\">\t\t\t\t\tbackground-color: red;</span><br><span class=\"line\"><span class=\"css\">\t\t\t\t\t<span class=\"selector-tag\">color</span>: <span class=\"selector-id\">#fff</span>;</span></span><br><span class=\"line\">\t\t\t\t\ttext-align: center;</span><br><span class=\"line\">\t\t\t\t\tline-height: 100px;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">\t\t\t目标元素</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"keyword\">var</span> ev = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'ev'</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"built_in\">window</span>.addEventListener(</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"string\">'click'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'window捕获阶段'</span>);</span></span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"literal\">true</span></span></span><br><span class=\"line\">\t\t\t);</span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"built_in\">document</span>.addEventListener(</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"string\">'click'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'doc捕获阶段'</span>);</span></span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"literal\">true</span></span></span><br><span class=\"line\">\t\t\t);</span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"built_in\">document</span>.documentElement.addEventListener(</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"string\">'click'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'html捕获阶段'</span>);</span></span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"literal\">true</span></span></span><br><span class=\"line\">\t\t\t);</span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"built_in\">document</span>.body.addEventListener(</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"string\">'click'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'body捕获阶段'</span>);</span></span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"literal\">true</span></span></span><br><span class=\"line\">\t\t\t);</span><br><span class=\"line\">\t\t\tev.addEventListener(</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"string\">'click'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'div捕获阶段'</span>);</span></span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"literal\">true</span></span></span><br><span class=\"line\">            );</span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"keyword\">var</span> eve=<span class=\"keyword\">new</span> Event(<span class=\"string\">'test'</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">            ev.addEventListener(<span class=\"string\">'test'</span>,<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'自定义事件'</span>);</span></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            ev.dispatchEvent(eve);</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{}},"excerpt":"<h2 id=\"Event-对象\"><a href=\"#Event-对象\" class=\"headerlink\" title=\"Event 对象\"></a>Event 对象</h2><p>W3C的说法是：</p>\n<p>Event 对象代表事件的状态，比如事件在其中发生的元素、键盘按键的状态、鼠标的位置、鼠标按钮的状态。</p>\n<p>事件通常与函数结合使用，函数不会在事件发生前被执行！</p>","more":"<h2 id=\"几种常见事件\"><a href=\"#几种常见事件\" class=\"headerlink\" title=\"几种常见事件\"></a>几种常见事件</h2><p><strong>event.preventDefault()</strong> :阻止默认事件  </p>\n<p><strong>event.stopPropagation()</strong>:阻止冒泡  </p>\n<p><strong>event.stopImmediatePropagation()</strong>:按优先级阻止执行</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">p</span> &#123; <span class=\"attribute\">height</span>: <span class=\"number\">30px</span>; <span class=\"attribute\">width</span>: <span class=\"number\">150px</span>; <span class=\"attribute\">background-color</span>: <span class=\"number\">#ccf</span>; &#125;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">div</span> &#123;<span class=\"attribute\">height</span>: <span class=\"number\">30px</span>; <span class=\"attribute\">width</span>: <span class=\"number\">150px</span>; <span class=\"attribute\">background-color</span>: <span class=\"number\">#cfc</span>; &#125;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>paragraph<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">const</span> p = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'p'</span>)</span></span><br><span class=\"line\"><span class=\"actionscript\">            p.addEventListener(<span class=\"string\">\"click\"</span>, (event) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">              alert(<span class=\"string\">\"我是p元素上被绑定的第一个监听函数\"</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">            &#125;, <span class=\"literal\">false</span>);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">            p.addEventListener(<span class=\"string\">\"click\"</span>, (event) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">              alert(<span class=\"string\">\"我是p元素上被绑定的第二个监听函数\"</span>);</span></span><br><span class=\"line\">              event.stopImmediatePropagation();</span><br><span class=\"line\"><span class=\"actionscript\">              <span class=\"comment\">// 执行stopImmediatePropagation方法,阻止click事件冒泡,并且阻止p元素上绑定的其他click事件的事件监听函数的执行.</span></span></span><br><span class=\"line\"><span class=\"actionscript\">            &#125;, <span class=\"literal\">false</span>);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">            p.addEventListener(<span class=\"string\">\"click\"</span>,(event) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">              alert(<span class=\"string\">\"我是p元素上被绑定的第三个监听函数\"</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">              <span class=\"comment\">// 该监听函数排在上个函数后面，该函数不会被执行</span></span></span><br><span class=\"line\"><span class=\"actionscript\">            &#125;, <span class=\"literal\">false</span>);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">\"div\"</span>).addEventListener(<span class=\"string\">\"click\"</span>, (event) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">              alert(<span class=\"string\">\"我是div元素,我是p元素的上层元素\"</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">              <span class=\"comment\">// p元素的click事件没有向上冒泡，该函数不会被执行</span></span></span><br><span class=\"line\"><span class=\"actionscript\">            &#125;, <span class=\"literal\">false</span>);</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>event.currentTarget</strong>:当前绑定的事件（父级元素）</p>\n<p><strong>event.target</strong>:绑定的事件</p>\n<p>以上两者主要用于事件委托中。<br><strong>事件委托就是利用冒泡的原理，将事件加到 父元素 或 祖先元素上，触发执行效果。</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myLinks\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"goSomewhere\"</span>&gt;</span>Go somewhere<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"doSomething\"</span>&gt;</span>Do something<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"sayHi\"</span>&gt;</span>Say hi<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>正常情况下添加点击事件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> item1 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"goSomewhere\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> item2 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"doSomething\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> item3 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"sayHi\"</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">    item1.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      location.href = <span class=\"string\">\"http://www.baidu.com\"</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    item2.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">document</span>.title = <span class=\"string\">\"事件委托\"</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    item3.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      alert(<span class=\"string\">\"hi\"</span>);</span><br><span class=\"line\">    &#125;;</span><br></pre></td></tr></table></figure>\n<p>使用事件委托</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"click\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">var</span> target = event.target;</span><br><span class=\"line\">     <span class=\"keyword\">switch</span> (target.id) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">case</span> <span class=\"string\">\"doSomething\"</span>:</span><br><span class=\"line\">         <span class=\"built_in\">document</span>.title = <span class=\"string\">\"事件委托\"</span>;</span><br><span class=\"line\">         <span class=\"keyword\">break</span>;</span><br><span class=\"line\">       <span class=\"keyword\">case</span> <span class=\"string\">\"goSomewhere\"</span>:</span><br><span class=\"line\">         location.href = <span class=\"string\">\"http://www.baidu.com\"</span>;</span><br><span class=\"line\">         <span class=\"keyword\">break</span>;</span><br><span class=\"line\">       <span class=\"keyword\">case</span> <span class=\"string\">\"sayHi\"</span>: alert(<span class=\"string\">\"hi\"</span>);</span><br><span class=\"line\">         <span class=\"keyword\">break</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"自定义事件\"><a href=\"#自定义事件\" class=\"headerlink\" title=\"自定义事件\"></a>自定义事件</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> eventCus = <span class=\"keyword\">new</span> Event(<span class=\"string\">'custome'</span>);</span><br><span class=\"line\">ev.addEventListener(<span class=\"string\">'custome'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'自定义事件'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">ev.dispatchEvent(eve);</span><br></pre></td></tr></table></figure>\n<p>自定义事件也可以使用<code>customEvent</code></p>\n<p>区别在于能够传递数据</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createEvent</span>(<span class=\"params\">params, eventName = <span class=\"string\">'mock-event'</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> CustomEvent(eventName, &#123; <span class=\"attr\">detail</span>: params &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> event = createEvent(&#123; <span class=\"attr\">id</span>: <span class=\"string\">'0010'</span> &#125;);</span><br></pre></td></tr></table></figure>\n<p>这里值得注意，需要把想要传递的参数包裹在一个包含detail属性的对象，否则传递的参数不会被挂载？（这里不太确定，我试过传id和params都不会生效）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'mock-event'</span>, (&#123; <span class=\"attr\">detail</span>: &#123; id &#125; &#125;) =&gt; &#123;</span><br><span class=\"line\">           <span class=\"built_in\">console</span>.log(<span class=\"string\">'id'</span>,id) <span class=\"comment\">// 会在控制台打印0010</span></span><br><span class=\"line\">       &#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"DOM事件流的补充\"><a href=\"#DOM事件流的补充\" class=\"headerlink\" title=\"DOM事件流的补充\"></a>DOM事件流的补充</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>DOM事件流<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"ev\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t\t<span class=\"selector-id\">#ev</span> &#123;</span></span><br><span class=\"line\">\t\t\t\t\twidth: 300px;</span><br><span class=\"line\">\t\t\t\t\theight: 100px;</span><br><span class=\"line\">\t\t\t\t\tbackground-color: red;</span><br><span class=\"line\"><span class=\"css\">\t\t\t\t\t<span class=\"selector-tag\">color</span>: <span class=\"selector-id\">#fff</span>;</span></span><br><span class=\"line\">\t\t\t\t\ttext-align: center;</span><br><span class=\"line\">\t\t\t\t\tline-height: 100px;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">\t\t\t目标元素</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"keyword\">var</span> ev = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'ev'</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"built_in\">window</span>.addEventListener(</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"string\">'click'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'window捕获阶段'</span>);</span></span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"literal\">true</span></span></span><br><span class=\"line\">\t\t\t);</span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"built_in\">document</span>.addEventListener(</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"string\">'click'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'doc捕获阶段'</span>);</span></span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"literal\">true</span></span></span><br><span class=\"line\">\t\t\t);</span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"built_in\">document</span>.documentElement.addEventListener(</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"string\">'click'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'html捕获阶段'</span>);</span></span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"literal\">true</span></span></span><br><span class=\"line\">\t\t\t);</span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"built_in\">document</span>.body.addEventListener(</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"string\">'click'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'body捕获阶段'</span>);</span></span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"literal\">true</span></span></span><br><span class=\"line\">\t\t\t);</span><br><span class=\"line\">\t\t\tev.addEventListener(</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"string\">'click'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'div捕获阶段'</span>);</span></span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"literal\">true</span></span></span><br><span class=\"line\">            );</span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"keyword\">var</span> eve=<span class=\"keyword\">new</span> Event(<span class=\"string\">'test'</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">            ev.addEventListener(<span class=\"string\">'test'</span>,<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'自定义事件'</span>);</span></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            ev.dispatchEvent(eve);</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>"},{"layout":"[post]","title":"VueRouter","date":"2020-01-01T13:30:12.000Z","_content":"## 路由模式\n- hash\n- history\n<!-- more -->\n\n### hash\n带＃\n### history\n需要server支持\n\n## 动态路由\n\n```js\nconst User = {\n    template:'<div>{{$route.params.id}}</div>'\n}\nconst router = new VueRouter({\n    routes:[\n        // 动态路径参数 以冒号开头。命中/user/10等格式路由\n        {path:'/user/:id',component:User}\n    ]\n})\n```\n## 懒加载\n\n```js\nimport Vue from 'vue'\nimport VueRouter from 'vue-router'\nVue.use(VueRouter)\nexport default new VueRouter({\n routes: [\n {\n path: '/',\n name: 'Navigator',\n component: () => import(/* webpackChunkName: \"navigator\" */ './../components/Navigator')\n },\n {\n path: '/tucao',\n name: 'Tucao',\n component: () => import(/* webpackChunkName: \"tucao\" */ './../components/Tucao')\n }\n ]\n```\n## 路由守卫\n路由钩子函数有三种：\n1. 全局钩子： beforeEach、 afterEach\n\n2. 单个路由里面的钩子： beforeEnter、 beforeLeave\n\n3. 组件路由：beforeRouteEnter、 beforeRouteUpdate、 beforeRouteLeave\n\n### 全局守卫\n无论访问哪一个路径，都会触发全局的钩子函数，位置是调用router的方法\n\n**router.beforeEach() 进入之前触发**\n\n**router.afterEach() 进入之后触发**\n\n#### beforeEach（全局前置守卫）\n使用 router.beforeEach 注册一个全局前置守卫\n\n```js\nconst router = new VueRouter({\n    。。。\n})\nrouter.beforeEach((to,from,next)=>{\n    ...\n})\n```\n每个守卫方法接收三个参数：\n- to: Route: 即将要进入的目标路由对象（to是一个对象，是将要进入的路由对象，可以用to.path调用路由对象中的属性）\n- from: Route: 当前导航正要离开的路由\n- next: Function: 这是一个必须需要调用的方法，执行效果依赖 next 方法的调用参数。\n\n##### next参数\n - next(): 进行管道中的下一个钩子。如果全部钩子执行完了，则导航的状态就是confirmed (确认的)。\n - next(false): 中断当前的导航。如果浏览器的 URL 改变了 (可能是用户手动或者浏览器后退按 钮)，那么 URL 地址会重置到 from 路由对应的地址。\n - next('/') 或者 next({ path: '/' }): 跳转到一个不同的地址。当前的导航被中断，然后进行一个新的导航。你可以向 next 传递任意位置对象，且允许设置诸如 replace: true、name: 'home' 之类的选项以及任何用在router-link 的 to prop或router.push中的选项。\n - next(error): (2.4.0+) 如果传入 next 的参数是一个 Error 实例，则导航会被终止且该错误会被传递给router.onError()注册过的回调。\n\n> 确保要调用 next 方法，否则钩子就不会被 resolved。\n\n#### afterEach（全局后置钩子）\n\n```js\nconst router = new VueRouter({\n    。。。\n})\nrouter.afterEach((to,from)=>{\n    ...\n})\n```\n和守卫不同的是，这些钩子不会接受 next 函数也不会改变导航本身\n#### 路由独享的守卫(单个路由独享的)\n\n```js\nexport default new VueRouter({\n routes: [\n {\n path: '/',\n name: 'Navigator',\n router.beforeEnter((to,from,next)=>{\n    ...\n }),\n component: () => import(/* webpackChunkName: \"navigator\" */ './../components/Navigator')\n }\n ]\n```\n#### 组件级路由钩子\n\n```js\n{\n\ndata,\n\nmethods\n\nbeforeRouteEnter(){\n\n   // this 不指向实例 组件还没创建\n\n    next((vm) =>{\n\n        // vm就是实例\n\n    })\n\n}\n\nbeforeRouteUpdate(){}\n\nbeforeRouteLeave(){}\n\n}\n\n```\n\n![image](luyou1.png)\nbeforeRouteEnter 守卫 不能 访问 this，因为守卫在导航确认前被调用,因此即将登场的新组件还没被创建。不过，你可以通过传一个回调给 next来访问组件实例。在导航被确认的时候执行回调，并且把组件实例作为回调方法的参数。\n\n![image](luyou2.png)\n\n注意~ ： beforeRouteEnter 是支持给 next 传递回调的唯一守卫。对于 beforeRouteUpdate 和 beforeRouteLeave 来说，this 已经可用了，所以不支持传递回调，因为没有必要了。\n\n这个离开守卫beforeRouteLeave()通常用来禁止用户在还未保存修改前突然离开。该导航可以通过 next(false) 来取消。\n\n![image](luyou3.png)\n\n#### 完整的导航解析流程：\n\n1. 导航被触发。\n\n2. 在失活的组件里调用离开守卫。\n\n3. 调用全局的 beforeEach 守卫。\n\n4. 在重用的组件里调用 beforeRouteUpdate 守卫 (2.2+)。\n\n5. 在路由配置里调用 beforeEnter。\n\n6. 解析异步路由组件。\n\n7. 在被激活的组件里调用 beforeRouteEnter。\n\n8. 调用全局的 beforeResolve 守卫 (2.5+)。\n\n9. 导航被确认。\n\n10. 调用全局的 afterEach 钩子。\n\n11. 触发 DOM 更新。\n\n12. 用创建好的实例调用 beforeRouteEnter 守卫中传给 next 的回调函数。\n\n\n","source":"_posts/VueRouter.md","raw":"---\nlayout: '[post]'\ntitle: VueRouter\ndate: 2020-01-01 21:30:12\ntags: Vue\n---\n## 路由模式\n- hash\n- history\n<!-- more -->\n\n### hash\n带＃\n### history\n需要server支持\n\n## 动态路由\n\n```js\nconst User = {\n    template:'<div>{{$route.params.id}}</div>'\n}\nconst router = new VueRouter({\n    routes:[\n        // 动态路径参数 以冒号开头。命中/user/10等格式路由\n        {path:'/user/:id',component:User}\n    ]\n})\n```\n## 懒加载\n\n```js\nimport Vue from 'vue'\nimport VueRouter from 'vue-router'\nVue.use(VueRouter)\nexport default new VueRouter({\n routes: [\n {\n path: '/',\n name: 'Navigator',\n component: () => import(/* webpackChunkName: \"navigator\" */ './../components/Navigator')\n },\n {\n path: '/tucao',\n name: 'Tucao',\n component: () => import(/* webpackChunkName: \"tucao\" */ './../components/Tucao')\n }\n ]\n```\n## 路由守卫\n路由钩子函数有三种：\n1. 全局钩子： beforeEach、 afterEach\n\n2. 单个路由里面的钩子： beforeEnter、 beforeLeave\n\n3. 组件路由：beforeRouteEnter、 beforeRouteUpdate、 beforeRouteLeave\n\n### 全局守卫\n无论访问哪一个路径，都会触发全局的钩子函数，位置是调用router的方法\n\n**router.beforeEach() 进入之前触发**\n\n**router.afterEach() 进入之后触发**\n\n#### beforeEach（全局前置守卫）\n使用 router.beforeEach 注册一个全局前置守卫\n\n```js\nconst router = new VueRouter({\n    。。。\n})\nrouter.beforeEach((to,from,next)=>{\n    ...\n})\n```\n每个守卫方法接收三个参数：\n- to: Route: 即将要进入的目标路由对象（to是一个对象，是将要进入的路由对象，可以用to.path调用路由对象中的属性）\n- from: Route: 当前导航正要离开的路由\n- next: Function: 这是一个必须需要调用的方法，执行效果依赖 next 方法的调用参数。\n\n##### next参数\n - next(): 进行管道中的下一个钩子。如果全部钩子执行完了，则导航的状态就是confirmed (确认的)。\n - next(false): 中断当前的导航。如果浏览器的 URL 改变了 (可能是用户手动或者浏览器后退按 钮)，那么 URL 地址会重置到 from 路由对应的地址。\n - next('/') 或者 next({ path: '/' }): 跳转到一个不同的地址。当前的导航被中断，然后进行一个新的导航。你可以向 next 传递任意位置对象，且允许设置诸如 replace: true、name: 'home' 之类的选项以及任何用在router-link 的 to prop或router.push中的选项。\n - next(error): (2.4.0+) 如果传入 next 的参数是一个 Error 实例，则导航会被终止且该错误会被传递给router.onError()注册过的回调。\n\n> 确保要调用 next 方法，否则钩子就不会被 resolved。\n\n#### afterEach（全局后置钩子）\n\n```js\nconst router = new VueRouter({\n    。。。\n})\nrouter.afterEach((to,from)=>{\n    ...\n})\n```\n和守卫不同的是，这些钩子不会接受 next 函数也不会改变导航本身\n#### 路由独享的守卫(单个路由独享的)\n\n```js\nexport default new VueRouter({\n routes: [\n {\n path: '/',\n name: 'Navigator',\n router.beforeEnter((to,from,next)=>{\n    ...\n }),\n component: () => import(/* webpackChunkName: \"navigator\" */ './../components/Navigator')\n }\n ]\n```\n#### 组件级路由钩子\n\n```js\n{\n\ndata,\n\nmethods\n\nbeforeRouteEnter(){\n\n   // this 不指向实例 组件还没创建\n\n    next((vm) =>{\n\n        // vm就是实例\n\n    })\n\n}\n\nbeforeRouteUpdate(){}\n\nbeforeRouteLeave(){}\n\n}\n\n```\n\n![image](luyou1.png)\nbeforeRouteEnter 守卫 不能 访问 this，因为守卫在导航确认前被调用,因此即将登场的新组件还没被创建。不过，你可以通过传一个回调给 next来访问组件实例。在导航被确认的时候执行回调，并且把组件实例作为回调方法的参数。\n\n![image](luyou2.png)\n\n注意~ ： beforeRouteEnter 是支持给 next 传递回调的唯一守卫。对于 beforeRouteUpdate 和 beforeRouteLeave 来说，this 已经可用了，所以不支持传递回调，因为没有必要了。\n\n这个离开守卫beforeRouteLeave()通常用来禁止用户在还未保存修改前突然离开。该导航可以通过 next(false) 来取消。\n\n![image](luyou3.png)\n\n#### 完整的导航解析流程：\n\n1. 导航被触发。\n\n2. 在失活的组件里调用离开守卫。\n\n3. 调用全局的 beforeEach 守卫。\n\n4. 在重用的组件里调用 beforeRouteUpdate 守卫 (2.2+)。\n\n5. 在路由配置里调用 beforeEnter。\n\n6. 解析异步路由组件。\n\n7. 在被激活的组件里调用 beforeRouteEnter。\n\n8. 调用全局的 beforeResolve 守卫 (2.5+)。\n\n9. 导航被确认。\n\n10. 调用全局的 afterEach 钩子。\n\n11. 触发 DOM 更新。\n\n12. 用创建好的实例调用 beforeRouteEnter 守卫中传给 next 的回调函数。\n\n\n","slug":"VueRouter","published":1,"updated":"2020-05-06T13:34:06.000Z","comments":1,"photos":[],"link":"","_id":"ckbftlm5r000d7w2pgapq1c1l","content":"<h2 id=\"路由模式\"><a href=\"#路由模式\" class=\"headerlink\" title=\"路由模式\"></a>路由模式</h2><ul>\n<li>hash</li>\n<li>history<a id=\"more\"></a>\n\n</li>\n</ul>\n<h3 id=\"hash\"><a href=\"#hash\" class=\"headerlink\" title=\"hash\"></a>hash</h3><p>带＃</p>\n<h3 id=\"history\"><a href=\"#history\" class=\"headerlink\" title=\"history\"></a>history</h3><p>需要server支持</p>\n<h2 id=\"动态路由\"><a href=\"#动态路由\" class=\"headerlink\" title=\"动态路由\"></a>动态路由</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> User = &#123;</span><br><span class=\"line\">    template:<span class=\"string\">'&lt;div&gt;&#123;&#123;$route.params.id&#125;&#125;&lt;/div&gt;'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> VueRouter(&#123;</span><br><span class=\"line\">    routes:[</span><br><span class=\"line\">        <span class=\"comment\">// 动态路径参数 以冒号开头。命中/user/10等格式路由</span></span><br><span class=\"line\">        &#123;<span class=\"attr\">path</span>:<span class=\"string\">'/user/:id'</span>,<span class=\"attr\">component</span>:User&#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"懒加载\"><a href=\"#懒加载\" class=\"headerlink\" title=\"懒加载\"></a>懒加载</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> VueRouter <span class=\"keyword\">from</span> <span class=\"string\">'vue-router'</span></span><br><span class=\"line\">Vue.use(VueRouter)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> VueRouter(&#123;</span><br><span class=\"line\"> routes: [</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\"> path: <span class=\"string\">'/'</span>,</span><br><span class=\"line\"> name: <span class=\"string\">'Navigator'</span>,</span><br><span class=\"line\"> component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"comment\">/* webpackChunkName: \"navigator\" */</span> <span class=\"string\">'./../components/Navigator'</span>)</span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\"> path: <span class=\"string\">'/tucao'</span>,</span><br><span class=\"line\"> name: <span class=\"string\">'Tucao'</span>,</span><br><span class=\"line\"> component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"comment\">/* webpackChunkName: \"tucao\" */</span> <span class=\"string\">'./../components/Tucao'</span>)</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> ]</span><br></pre></td></tr></table></figure>\n<h2 id=\"路由守卫\"><a href=\"#路由守卫\" class=\"headerlink\" title=\"路由守卫\"></a>路由守卫</h2><p>路由钩子函数有三种：</p>\n<ol>\n<li><p>全局钩子： beforeEach、 afterEach</p>\n</li>\n<li><p>单个路由里面的钩子： beforeEnter、 beforeLeave</p>\n</li>\n<li><p>组件路由：beforeRouteEnter、 beforeRouteUpdate、 beforeRouteLeave</p>\n</li>\n</ol>\n<h3 id=\"全局守卫\"><a href=\"#全局守卫\" class=\"headerlink\" title=\"全局守卫\"></a>全局守卫</h3><p>无论访问哪一个路径，都会触发全局的钩子函数，位置是调用router的方法</p>\n<p><strong>router.beforeEach() 进入之前触发</strong></p>\n<p><strong>router.afterEach() 进入之后触发</strong></p>\n<h4 id=\"beforeEach（全局前置守卫）\"><a href=\"#beforeEach（全局前置守卫）\" class=\"headerlink\" title=\"beforeEach（全局前置守卫）\"></a>beforeEach（全局前置守卫）</h4><p>使用 router.beforeEach 注册一个全局前置守卫</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> VueRouter(&#123;</span><br><span class=\"line\">    。。。</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">router.beforeEach(<span class=\"function\">(<span class=\"params\">to,<span class=\"keyword\">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>每个守卫方法接收三个参数：</p>\n<ul>\n<li>to: Route: 即将要进入的目标路由对象（to是一个对象，是将要进入的路由对象，可以用to.path调用路由对象中的属性）</li>\n<li>from: Route: 当前导航正要离开的路由</li>\n<li>next: Function: 这是一个必须需要调用的方法，执行效果依赖 next 方法的调用参数。</li>\n</ul>\n<h5 id=\"next参数\"><a href=\"#next参数\" class=\"headerlink\" title=\"next参数\"></a>next参数</h5><ul>\n<li>next(): 进行管道中的下一个钩子。如果全部钩子执行完了，则导航的状态就是confirmed (确认的)。</li>\n<li>next(false): 中断当前的导航。如果浏览器的 URL 改变了 (可能是用户手动或者浏览器后退按 钮)，那么 URL 地址会重置到 from 路由对应的地址。</li>\n<li>next(‘/‘) 或者 next({ path: ‘/‘ }): 跳转到一个不同的地址。当前的导航被中断，然后进行一个新的导航。你可以向 next 传递任意位置对象，且允许设置诸如 replace: true、name: ‘home’ 之类的选项以及任何用在router-link 的 to prop或router.push中的选项。</li>\n<li>next(error): (2.4.0+) 如果传入 next 的参数是一个 Error 实例，则导航会被终止且该错误会被传递给router.onError()注册过的回调。</li>\n</ul>\n<blockquote>\n<p>确保要调用 next 方法，否则钩子就不会被 resolved。</p>\n</blockquote>\n<h4 id=\"afterEach（全局后置钩子）\"><a href=\"#afterEach（全局后置钩子）\" class=\"headerlink\" title=\"afterEach（全局后置钩子）\"></a>afterEach（全局后置钩子）</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> VueRouter(&#123;</span><br><span class=\"line\">    。。。</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">router.afterEach(<span class=\"function\">(<span class=\"params\">to,<span class=\"keyword\">from</span></span>)=&gt;</span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>和守卫不同的是，这些钩子不会接受 next 函数也不会改变导航本身</p>\n<h4 id=\"路由独享的守卫-单个路由独享的\"><a href=\"#路由独享的守卫-单个路由独享的\" class=\"headerlink\" title=\"路由独享的守卫(单个路由独享的)\"></a>路由独享的守卫(单个路由独享的)</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> VueRouter(&#123;</span><br><span class=\"line\"> routes: [</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\"> path: <span class=\"string\">'/'</span>,</span><br><span class=\"line\"> name: <span class=\"string\">'Navigator'</span>,</span><br><span class=\"line\"> router.beforeEnter(<span class=\"function\">(<span class=\"params\">to,<span class=\"keyword\">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\"> &#125;),</span><br><span class=\"line\"> component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"comment\">/* webpackChunkName: \"navigator\" */</span> <span class=\"string\">'./../components/Navigator'</span>)</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> ]</span><br></pre></td></tr></table></figure>\n<h4 id=\"组件级路由钩子\"><a href=\"#组件级路由钩子\" class=\"headerlink\" title=\"组件级路由钩子\"></a>组件级路由钩子</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">data,</span><br><span class=\"line\"></span><br><span class=\"line\">methods</span><br><span class=\"line\"></span><br><span class=\"line\">beforeRouteEnter()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// this 不指向实例 组件还没创建</span></span><br><span class=\"line\"></span><br><span class=\"line\">    next(<span class=\"function\">(<span class=\"params\">vm</span>) =&gt;</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// vm就是实例</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">beforeRouteUpdate()&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">beforeRouteLeave()&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2020/01/01/VueRouter/luyou1.png\" alt=\"image\"><br>beforeRouteEnter 守卫 不能 访问 this，因为守卫在导航确认前被调用,因此即将登场的新组件还没被创建。不过，你可以通过传一个回调给 next来访问组件实例。在导航被确认的时候执行回调，并且把组件实例作为回调方法的参数。</p>\n<p><img src=\"/2020/01/01/VueRouter/luyou2.png\" alt=\"image\"></p>\n<p>注意~ ： beforeRouteEnter 是支持给 next 传递回调的唯一守卫。对于 beforeRouteUpdate 和 beforeRouteLeave 来说，this 已经可用了，所以不支持传递回调，因为没有必要了。</p>\n<p>这个离开守卫beforeRouteLeave()通常用来禁止用户在还未保存修改前突然离开。该导航可以通过 next(false) 来取消。</p>\n<p><img src=\"/2020/01/01/VueRouter/luyou3.png\" alt=\"image\"></p>\n<h4 id=\"完整的导航解析流程：\"><a href=\"#完整的导航解析流程：\" class=\"headerlink\" title=\"完整的导航解析流程：\"></a>完整的导航解析流程：</h4><ol>\n<li><p>导航被触发。</p>\n</li>\n<li><p>在失活的组件里调用离开守卫。</p>\n</li>\n<li><p>调用全局的 beforeEach 守卫。</p>\n</li>\n<li><p>在重用的组件里调用 beforeRouteUpdate 守卫 (2.2+)。</p>\n</li>\n<li><p>在路由配置里调用 beforeEnter。</p>\n</li>\n<li><p>解析异步路由组件。</p>\n</li>\n<li><p>在被激活的组件里调用 beforeRouteEnter。</p>\n</li>\n<li><p>调用全局的 beforeResolve 守卫 (2.5+)。</p>\n</li>\n<li><p>导航被确认。</p>\n</li>\n<li><p>调用全局的 afterEach 钩子。</p>\n</li>\n<li><p>触发 DOM 更新。</p>\n</li>\n<li><p>用创建好的实例调用 beforeRouteEnter 守卫中传给 next 的回调函数。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h2 id=\"路由模式\"><a href=\"#路由模式\" class=\"headerlink\" title=\"路由模式\"></a>路由模式</h2><ul>\n<li>hash</li>\n<li>history</li></ul>","more":"\n\n<h3 id=\"hash\"><a href=\"#hash\" class=\"headerlink\" title=\"hash\"></a>hash</h3><p>带＃</p>\n<h3 id=\"history\"><a href=\"#history\" class=\"headerlink\" title=\"history\"></a>history</h3><p>需要server支持</p>\n<h2 id=\"动态路由\"><a href=\"#动态路由\" class=\"headerlink\" title=\"动态路由\"></a>动态路由</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> User = &#123;</span><br><span class=\"line\">    template:<span class=\"string\">'&lt;div&gt;&#123;&#123;$route.params.id&#125;&#125;&lt;/div&gt;'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> VueRouter(&#123;</span><br><span class=\"line\">    routes:[</span><br><span class=\"line\">        <span class=\"comment\">// 动态路径参数 以冒号开头。命中/user/10等格式路由</span></span><br><span class=\"line\">        &#123;<span class=\"attr\">path</span>:<span class=\"string\">'/user/:id'</span>,<span class=\"attr\">component</span>:User&#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"懒加载\"><a href=\"#懒加载\" class=\"headerlink\" title=\"懒加载\"></a>懒加载</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> VueRouter <span class=\"keyword\">from</span> <span class=\"string\">'vue-router'</span></span><br><span class=\"line\">Vue.use(VueRouter)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> VueRouter(&#123;</span><br><span class=\"line\"> routes: [</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\"> path: <span class=\"string\">'/'</span>,</span><br><span class=\"line\"> name: <span class=\"string\">'Navigator'</span>,</span><br><span class=\"line\"> component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"comment\">/* webpackChunkName: \"navigator\" */</span> <span class=\"string\">'./../components/Navigator'</span>)</span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\"> path: <span class=\"string\">'/tucao'</span>,</span><br><span class=\"line\"> name: <span class=\"string\">'Tucao'</span>,</span><br><span class=\"line\"> component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"comment\">/* webpackChunkName: \"tucao\" */</span> <span class=\"string\">'./../components/Tucao'</span>)</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> ]</span><br></pre></td></tr></table></figure>\n<h2 id=\"路由守卫\"><a href=\"#路由守卫\" class=\"headerlink\" title=\"路由守卫\"></a>路由守卫</h2><p>路由钩子函数有三种：</p>\n<ol>\n<li><p>全局钩子： beforeEach、 afterEach</p>\n</li>\n<li><p>单个路由里面的钩子： beforeEnter、 beforeLeave</p>\n</li>\n<li><p>组件路由：beforeRouteEnter、 beforeRouteUpdate、 beforeRouteLeave</p>\n</li>\n</ol>\n<h3 id=\"全局守卫\"><a href=\"#全局守卫\" class=\"headerlink\" title=\"全局守卫\"></a>全局守卫</h3><p>无论访问哪一个路径，都会触发全局的钩子函数，位置是调用router的方法</p>\n<p><strong>router.beforeEach() 进入之前触发</strong></p>\n<p><strong>router.afterEach() 进入之后触发</strong></p>\n<h4 id=\"beforeEach（全局前置守卫）\"><a href=\"#beforeEach（全局前置守卫）\" class=\"headerlink\" title=\"beforeEach（全局前置守卫）\"></a>beforeEach（全局前置守卫）</h4><p>使用 router.beforeEach 注册一个全局前置守卫</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> VueRouter(&#123;</span><br><span class=\"line\">    。。。</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">router.beforeEach(<span class=\"function\">(<span class=\"params\">to,<span class=\"keyword\">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>每个守卫方法接收三个参数：</p>\n<ul>\n<li>to: Route: 即将要进入的目标路由对象（to是一个对象，是将要进入的路由对象，可以用to.path调用路由对象中的属性）</li>\n<li>from: Route: 当前导航正要离开的路由</li>\n<li>next: Function: 这是一个必须需要调用的方法，执行效果依赖 next 方法的调用参数。</li>\n</ul>\n<h5 id=\"next参数\"><a href=\"#next参数\" class=\"headerlink\" title=\"next参数\"></a>next参数</h5><ul>\n<li>next(): 进行管道中的下一个钩子。如果全部钩子执行完了，则导航的状态就是confirmed (确认的)。</li>\n<li>next(false): 中断当前的导航。如果浏览器的 URL 改变了 (可能是用户手动或者浏览器后退按 钮)，那么 URL 地址会重置到 from 路由对应的地址。</li>\n<li>next(‘/‘) 或者 next({ path: ‘/‘ }): 跳转到一个不同的地址。当前的导航被中断，然后进行一个新的导航。你可以向 next 传递任意位置对象，且允许设置诸如 replace: true、name: ‘home’ 之类的选项以及任何用在router-link 的 to prop或router.push中的选项。</li>\n<li>next(error): (2.4.0+) 如果传入 next 的参数是一个 Error 实例，则导航会被终止且该错误会被传递给router.onError()注册过的回调。</li>\n</ul>\n<blockquote>\n<p>确保要调用 next 方法，否则钩子就不会被 resolved。</p>\n</blockquote>\n<h4 id=\"afterEach（全局后置钩子）\"><a href=\"#afterEach（全局后置钩子）\" class=\"headerlink\" title=\"afterEach（全局后置钩子）\"></a>afterEach（全局后置钩子）</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> VueRouter(&#123;</span><br><span class=\"line\">    。。。</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">router.afterEach(<span class=\"function\">(<span class=\"params\">to,<span class=\"keyword\">from</span></span>)=&gt;</span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>和守卫不同的是，这些钩子不会接受 next 函数也不会改变导航本身</p>\n<h4 id=\"路由独享的守卫-单个路由独享的\"><a href=\"#路由独享的守卫-单个路由独享的\" class=\"headerlink\" title=\"路由独享的守卫(单个路由独享的)\"></a>路由独享的守卫(单个路由独享的)</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> VueRouter(&#123;</span><br><span class=\"line\"> routes: [</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\"> path: <span class=\"string\">'/'</span>,</span><br><span class=\"line\"> name: <span class=\"string\">'Navigator'</span>,</span><br><span class=\"line\"> router.beforeEnter(<span class=\"function\">(<span class=\"params\">to,<span class=\"keyword\">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\"> &#125;),</span><br><span class=\"line\"> component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"comment\">/* webpackChunkName: \"navigator\" */</span> <span class=\"string\">'./../components/Navigator'</span>)</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> ]</span><br></pre></td></tr></table></figure>\n<h4 id=\"组件级路由钩子\"><a href=\"#组件级路由钩子\" class=\"headerlink\" title=\"组件级路由钩子\"></a>组件级路由钩子</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">data,</span><br><span class=\"line\"></span><br><span class=\"line\">methods</span><br><span class=\"line\"></span><br><span class=\"line\">beforeRouteEnter()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// this 不指向实例 组件还没创建</span></span><br><span class=\"line\"></span><br><span class=\"line\">    next(<span class=\"function\">(<span class=\"params\">vm</span>) =&gt;</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// vm就是实例</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">beforeRouteUpdate()&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">beforeRouteLeave()&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2020/01/01/VueRouter/luyou1.png\" alt=\"image\"><br>beforeRouteEnter 守卫 不能 访问 this，因为守卫在导航确认前被调用,因此即将登场的新组件还没被创建。不过，你可以通过传一个回调给 next来访问组件实例。在导航被确认的时候执行回调，并且把组件实例作为回调方法的参数。</p>\n<p><img src=\"/2020/01/01/VueRouter/luyou2.png\" alt=\"image\"></p>\n<p>注意~ ： beforeRouteEnter 是支持给 next 传递回调的唯一守卫。对于 beforeRouteUpdate 和 beforeRouteLeave 来说，this 已经可用了，所以不支持传递回调，因为没有必要了。</p>\n<p>这个离开守卫beforeRouteLeave()通常用来禁止用户在还未保存修改前突然离开。该导航可以通过 next(false) 来取消。</p>\n<p><img src=\"/2020/01/01/VueRouter/luyou3.png\" alt=\"image\"></p>\n<h4 id=\"完整的导航解析流程：\"><a href=\"#完整的导航解析流程：\" class=\"headerlink\" title=\"完整的导航解析流程：\"></a>完整的导航解析流程：</h4><ol>\n<li><p>导航被触发。</p>\n</li>\n<li><p>在失活的组件里调用离开守卫。</p>\n</li>\n<li><p>调用全局的 beforeEach 守卫。</p>\n</li>\n<li><p>在重用的组件里调用 beforeRouteUpdate 守卫 (2.2+)。</p>\n</li>\n<li><p>在路由配置里调用 beforeEnter。</p>\n</li>\n<li><p>解析异步路由组件。</p>\n</li>\n<li><p>在被激活的组件里调用 beforeRouteEnter。</p>\n</li>\n<li><p>调用全局的 beforeResolve 守卫 (2.5+)。</p>\n</li>\n<li><p>导航被确认。</p>\n</li>\n<li><p>调用全局的 afterEach 钩子。</p>\n</li>\n<li><p>触发 DOM 更新。</p>\n</li>\n<li><p>用创建好的实例调用 beforeRouteEnter 守卫中传给 next 的回调函数。</p>\n</li>\n</ol>"},{"layout":"[post]","title":"Vue和MVVM","date":"2020-01-12T15:48:50.000Z","_content":"## Vue.js\n\n### Vue.js是什么\n - Vue.js 是一个轻巧、高性能、可组件化的 MVVM 库，拥有非常容易上手的 API；\n - Vue.js是一个构建数据驱动的 Web 界面的库。\n\n<!-- more -->\n### Vue.js 的特性\n1. 轻量级的框架\n2. 双向数据绑定\n3. 指令\n4. 插件化（组件化）\n\n### MVVM 框架\n - MVVM（Model-View-ViewModel）是对 MVC（Model-View-Control）和 MVP（Model-View-Presenter）的进一步改进。\n> 『View』：视图层（UI 用户界面）\n\n> 『ViewModel』：业务逻辑层（一切 js 可视为业务逻辑）\n\n> 『Model』：数据层（存储数据及对数据的处理如增删改查）\n\n- MVVM 将数据双向绑定（data-binding）作为核心思想，View 和 Model 之间没有联系，它们通过 ViewModel 这个桥梁进行交互。\n- Model 和 ViewModel 之间的交互是双向的，因此 View 的变化会自动同步到 Model，而 Model 的变化也会立即反映到 View 上显示。\n- 当用户操作 View，ViewModel 感知到变化，然后通知 Model 发生相应改变；反之当 Model 发生改变，ViewModel 也能感知到变化，使 View 作出相应更新。\n- Angular 和 Ember 都采用这种模式。\n\n### Vue 的开发模式\n - 通过 script 标签直接引入 vue.js\n - 通过 Vue 的脚手架工具 vue-cli 来进行一键项目搭建\n\n### Vue.js 的优点\n - 简单轻巧，功能强大，拥有非常容易上手的 API；\n - 可组件化 和 响应式设计；\n - 实现数据与结构分离，高性能，易于浏览器的加载速度；\n - MVVM 模式，数据双向绑定，减少了 DOM 操作，将更多精力放在数据和业务逻辑上。\n\n### Vue的优点\n - 低耦合。视图（View）可以独立于 Model 变化和修改，一个 ViewModel 可以绑定到不同的 \"View\" 上，当 View 变化的时候 Model 可以不变，当 Model 变化的时候 View 也可以不变。\n - 可重用性。你可以把一些视图逻辑放在一个 ViewModel 里面，让很多 View 重用这段视图逻辑。\n - 独立开发。开发人员可以专注于业务逻辑和数据的开发（ViewModel），设计人员可以专注于页面设计。\n - 方便测试。界面素来是比较难于测试的，开发中大部分 Bug 来至于逻辑处理，由于 ViewModel 分离了许多逻辑，可以对 ViewModel 构造单元测试。\n - 易用 灵活 高效。\n\n## MVVM\n\n### JQuery和MVVM的区别\n - 数据和视图的分离，解耦（开放封闭原则）\n - 以数据驱动视图，只关心数据变化，DOM操作被封装\n\n### 什么是MVVM\n - MVVM 是 Model-View-ViewModel 的缩写。MVVM 是一种设计思想。Model 层代表数据模型，也可以在 Model 中定义数据修改和操作的业务逻辑；View 代表 UI 组件，它负责将数据模型转化成 UI 展现出来，ViewModel 是一个同步 View 和 Model 的对象。\n - 在 MVVM 架构下，View 和 Model 之间并没有直接的联系，而是通过 ViewModel 进行交互，Model 和 ViewModel 之间的交互是双向的， 因此 View 数据的变化会同步到 Model 中，而 Model 数据的变化也会立即反应到 View 上。\n - ViewModel 通过双向数据绑定把 View 层和 Model 层连接了起来，而View 和 Model 之间的同步工作完全是自动的，无需人为干涉，因此开发者只需关注业务逻辑，不需要手动操作DOM, 不需要关注数据状态的同步问题，复杂的数据状态维护完全由 MVVM 来统一管理。\n\n## Vue和MVVM\n\n - 响应式：vue如何监听到data的每个属性变化？\n - 模板引擎：vue的模板如何被解析，指令如何处理？\n - 渲染：vue的模板如何被渲染成html？以及渲染过程\n\n### vue中如何实现响应式\n\n#### 什么是响应式\n - 修改data属性后，vue立刻监听到\n - data属性被代理到vm上\n\n### Object.defineProperty(obj, prop, desc)\n**实现响应式的核心函数**\n> Object.defineProperty(obj, prop, desc)的作用就是直接在一个对象上定义一个新属性，或者修改一个已经存在的属性  \n模板中没有的数据，不会走get监听，所以也不会走set监听，Object.defineProperty的原则是走get才会走set,防止无用的数据重复渲染。\n\n```js\nvar vm = {}\nvar data = {\n    name: 'zhangsan',\n    age: 20\n}\n\nvar key, value\nfor (key in data) {\n    (function (key) {\n        Object.defineProperty(vm, key, {\n            get: function () {\n                console.log('get', data[key]) // 监听\n                return data[key]\n            },\n            set: function (newVal) {\n                console.log('set', newVal) // 监听\n                data[key] = newVal\n            }\n        })\n    })(key)\n}\n```\n### vue中如何解析模板\n#### 模板是什么？\n - 本质：字符串\n - 有逻辑，如v-if v-for等\n - 与html很像，但有很大区别\n - 最终还要转化成html来显示\n - 模板最终要装换成js代码（render函数）\n\n\n```js\n//模板\n    <div id=\"app\">\n        <p>{{price}}</p>\n    </div>\n//render函数\n        function render() {\n            with(this) {  // this 就是 vm\n                return _c(\n                    'div',\n                    {\n                        attrs: {'id': 'app'}\n                    },\n                    [\n                        _c('p', [_v(_s(price))])\n                    ]\n                )\n            }\n        }\n//在vue源码中搜索code.render，然后alert(code.render)可以看render函数\n```\n\n - h函数生成vdom\n - patch函数渲染成dom\n\n---\n\n- h函数就是vue中的createElement方法，这个函数作用就是创建虚拟dom，追踪dom变化的\n\n### vue的整个实现流程\n1. 解析模板成render函数\n2. 响应式开始监听\n3. 首次渲染，显示页面，且绑定依赖\n4. data属性变化，触发rerender\n","source":"_posts/Vue和MVVM.md","raw":"---\nlayout: '[post]'\ntitle: Vue和MVVM\ndate: 2020-01-12 23:48:50\ntags: Vue\n---\n## Vue.js\n\n### Vue.js是什么\n - Vue.js 是一个轻巧、高性能、可组件化的 MVVM 库，拥有非常容易上手的 API；\n - Vue.js是一个构建数据驱动的 Web 界面的库。\n\n<!-- more -->\n### Vue.js 的特性\n1. 轻量级的框架\n2. 双向数据绑定\n3. 指令\n4. 插件化（组件化）\n\n### MVVM 框架\n - MVVM（Model-View-ViewModel）是对 MVC（Model-View-Control）和 MVP（Model-View-Presenter）的进一步改进。\n> 『View』：视图层（UI 用户界面）\n\n> 『ViewModel』：业务逻辑层（一切 js 可视为业务逻辑）\n\n> 『Model』：数据层（存储数据及对数据的处理如增删改查）\n\n- MVVM 将数据双向绑定（data-binding）作为核心思想，View 和 Model 之间没有联系，它们通过 ViewModel 这个桥梁进行交互。\n- Model 和 ViewModel 之间的交互是双向的，因此 View 的变化会自动同步到 Model，而 Model 的变化也会立即反映到 View 上显示。\n- 当用户操作 View，ViewModel 感知到变化，然后通知 Model 发生相应改变；反之当 Model 发生改变，ViewModel 也能感知到变化，使 View 作出相应更新。\n- Angular 和 Ember 都采用这种模式。\n\n### Vue 的开发模式\n - 通过 script 标签直接引入 vue.js\n - 通过 Vue 的脚手架工具 vue-cli 来进行一键项目搭建\n\n### Vue.js 的优点\n - 简单轻巧，功能强大，拥有非常容易上手的 API；\n - 可组件化 和 响应式设计；\n - 实现数据与结构分离，高性能，易于浏览器的加载速度；\n - MVVM 模式，数据双向绑定，减少了 DOM 操作，将更多精力放在数据和业务逻辑上。\n\n### Vue的优点\n - 低耦合。视图（View）可以独立于 Model 变化和修改，一个 ViewModel 可以绑定到不同的 \"View\" 上，当 View 变化的时候 Model 可以不变，当 Model 变化的时候 View 也可以不变。\n - 可重用性。你可以把一些视图逻辑放在一个 ViewModel 里面，让很多 View 重用这段视图逻辑。\n - 独立开发。开发人员可以专注于业务逻辑和数据的开发（ViewModel），设计人员可以专注于页面设计。\n - 方便测试。界面素来是比较难于测试的，开发中大部分 Bug 来至于逻辑处理，由于 ViewModel 分离了许多逻辑，可以对 ViewModel 构造单元测试。\n - 易用 灵活 高效。\n\n## MVVM\n\n### JQuery和MVVM的区别\n - 数据和视图的分离，解耦（开放封闭原则）\n - 以数据驱动视图，只关心数据变化，DOM操作被封装\n\n### 什么是MVVM\n - MVVM 是 Model-View-ViewModel 的缩写。MVVM 是一种设计思想。Model 层代表数据模型，也可以在 Model 中定义数据修改和操作的业务逻辑；View 代表 UI 组件，它负责将数据模型转化成 UI 展现出来，ViewModel 是一个同步 View 和 Model 的对象。\n - 在 MVVM 架构下，View 和 Model 之间并没有直接的联系，而是通过 ViewModel 进行交互，Model 和 ViewModel 之间的交互是双向的， 因此 View 数据的变化会同步到 Model 中，而 Model 数据的变化也会立即反应到 View 上。\n - ViewModel 通过双向数据绑定把 View 层和 Model 层连接了起来，而View 和 Model 之间的同步工作完全是自动的，无需人为干涉，因此开发者只需关注业务逻辑，不需要手动操作DOM, 不需要关注数据状态的同步问题，复杂的数据状态维护完全由 MVVM 来统一管理。\n\n## Vue和MVVM\n\n - 响应式：vue如何监听到data的每个属性变化？\n - 模板引擎：vue的模板如何被解析，指令如何处理？\n - 渲染：vue的模板如何被渲染成html？以及渲染过程\n\n### vue中如何实现响应式\n\n#### 什么是响应式\n - 修改data属性后，vue立刻监听到\n - data属性被代理到vm上\n\n### Object.defineProperty(obj, prop, desc)\n**实现响应式的核心函数**\n> Object.defineProperty(obj, prop, desc)的作用就是直接在一个对象上定义一个新属性，或者修改一个已经存在的属性  \n模板中没有的数据，不会走get监听，所以也不会走set监听，Object.defineProperty的原则是走get才会走set,防止无用的数据重复渲染。\n\n```js\nvar vm = {}\nvar data = {\n    name: 'zhangsan',\n    age: 20\n}\n\nvar key, value\nfor (key in data) {\n    (function (key) {\n        Object.defineProperty(vm, key, {\n            get: function () {\n                console.log('get', data[key]) // 监听\n                return data[key]\n            },\n            set: function (newVal) {\n                console.log('set', newVal) // 监听\n                data[key] = newVal\n            }\n        })\n    })(key)\n}\n```\n### vue中如何解析模板\n#### 模板是什么？\n - 本质：字符串\n - 有逻辑，如v-if v-for等\n - 与html很像，但有很大区别\n - 最终还要转化成html来显示\n - 模板最终要装换成js代码（render函数）\n\n\n```js\n//模板\n    <div id=\"app\">\n        <p>{{price}}</p>\n    </div>\n//render函数\n        function render() {\n            with(this) {  // this 就是 vm\n                return _c(\n                    'div',\n                    {\n                        attrs: {'id': 'app'}\n                    },\n                    [\n                        _c('p', [_v(_s(price))])\n                    ]\n                )\n            }\n        }\n//在vue源码中搜索code.render，然后alert(code.render)可以看render函数\n```\n\n - h函数生成vdom\n - patch函数渲染成dom\n\n---\n\n- h函数就是vue中的createElement方法，这个函数作用就是创建虚拟dom，追踪dom变化的\n\n### vue的整个实现流程\n1. 解析模板成render函数\n2. 响应式开始监听\n3. 首次渲染，显示页面，且绑定依赖\n4. data属性变化，触发rerender\n","slug":"Vue和MVVM","published":1,"updated":"2020-05-13T06:08:02.000Z","comments":1,"photos":[],"link":"","_id":"ckbftlm5t000f7w2p33oqfoo7","content":"<h2 id=\"Vue-js\"><a href=\"#Vue-js\" class=\"headerlink\" title=\"Vue.js\"></a>Vue.js</h2><h3 id=\"Vue-js是什么\"><a href=\"#Vue-js是什么\" class=\"headerlink\" title=\"Vue.js是什么\"></a>Vue.js是什么</h3><ul>\n<li>Vue.js 是一个轻巧、高性能、可组件化的 MVVM 库，拥有非常容易上手的 API；</li>\n<li>Vue.js是一个构建数据驱动的 Web 界面的库。</li>\n</ul>\n<a id=\"more\"></a>\n<h3 id=\"Vue-js-的特性\"><a href=\"#Vue-js-的特性\" class=\"headerlink\" title=\"Vue.js 的特性\"></a>Vue.js 的特性</h3><ol>\n<li>轻量级的框架</li>\n<li>双向数据绑定</li>\n<li>指令</li>\n<li>插件化（组件化）</li>\n</ol>\n<h3 id=\"MVVM-框架\"><a href=\"#MVVM-框架\" class=\"headerlink\" title=\"MVVM 框架\"></a>MVVM 框架</h3><ul>\n<li>MVVM（Model-View-ViewModel）是对 MVC（Model-View-Control）和 MVP（Model-View-Presenter）的进一步改进。<blockquote>\n<p>『View』：视图层（UI 用户界面）</p>\n</blockquote>\n</li>\n</ul>\n<blockquote>\n<p>『ViewModel』：业务逻辑层（一切 js 可视为业务逻辑）</p>\n</blockquote>\n<blockquote>\n<p>『Model』：数据层（存储数据及对数据的处理如增删改查）</p>\n</blockquote>\n<ul>\n<li>MVVM 将数据双向绑定（data-binding）作为核心思想，View 和 Model 之间没有联系，它们通过 ViewModel 这个桥梁进行交互。</li>\n<li>Model 和 ViewModel 之间的交互是双向的，因此 View 的变化会自动同步到 Model，而 Model 的变化也会立即反映到 View 上显示。</li>\n<li>当用户操作 View，ViewModel 感知到变化，然后通知 Model 发生相应改变；反之当 Model 发生改变，ViewModel 也能感知到变化，使 View 作出相应更新。</li>\n<li>Angular 和 Ember 都采用这种模式。</li>\n</ul>\n<h3 id=\"Vue-的开发模式\"><a href=\"#Vue-的开发模式\" class=\"headerlink\" title=\"Vue 的开发模式\"></a>Vue 的开发模式</h3><ul>\n<li>通过 script 标签直接引入 vue.js</li>\n<li>通过 Vue 的脚手架工具 vue-cli 来进行一键项目搭建</li>\n</ul>\n<h3 id=\"Vue-js-的优点\"><a href=\"#Vue-js-的优点\" class=\"headerlink\" title=\"Vue.js 的优点\"></a>Vue.js 的优点</h3><ul>\n<li>简单轻巧，功能强大，拥有非常容易上手的 API；</li>\n<li>可组件化 和 响应式设计；</li>\n<li>实现数据与结构分离，高性能，易于浏览器的加载速度；</li>\n<li>MVVM 模式，数据双向绑定，减少了 DOM 操作，将更多精力放在数据和业务逻辑上。</li>\n</ul>\n<h3 id=\"Vue的优点\"><a href=\"#Vue的优点\" class=\"headerlink\" title=\"Vue的优点\"></a>Vue的优点</h3><ul>\n<li>低耦合。视图（View）可以独立于 Model 变化和修改，一个 ViewModel 可以绑定到不同的 “View” 上，当 View 变化的时候 Model 可以不变，当 Model 变化的时候 View 也可以不变。</li>\n<li>可重用性。你可以把一些视图逻辑放在一个 ViewModel 里面，让很多 View 重用这段视图逻辑。</li>\n<li>独立开发。开发人员可以专注于业务逻辑和数据的开发（ViewModel），设计人员可以专注于页面设计。</li>\n<li>方便测试。界面素来是比较难于测试的，开发中大部分 Bug 来至于逻辑处理，由于 ViewModel 分离了许多逻辑，可以对 ViewModel 构造单元测试。</li>\n<li>易用 灵活 高效。</li>\n</ul>\n<h2 id=\"MVVM\"><a href=\"#MVVM\" class=\"headerlink\" title=\"MVVM\"></a>MVVM</h2><h3 id=\"JQuery和MVVM的区别\"><a href=\"#JQuery和MVVM的区别\" class=\"headerlink\" title=\"JQuery和MVVM的区别\"></a>JQuery和MVVM的区别</h3><ul>\n<li>数据和视图的分离，解耦（开放封闭原则）</li>\n<li>以数据驱动视图，只关心数据变化，DOM操作被封装</li>\n</ul>\n<h3 id=\"什么是MVVM\"><a href=\"#什么是MVVM\" class=\"headerlink\" title=\"什么是MVVM\"></a>什么是MVVM</h3><ul>\n<li>MVVM 是 Model-View-ViewModel 的缩写。MVVM 是一种设计思想。Model 层代表数据模型，也可以在 Model 中定义数据修改和操作的业务逻辑；View 代表 UI 组件，它负责将数据模型转化成 UI 展现出来，ViewModel 是一个同步 View 和 Model 的对象。</li>\n<li>在 MVVM 架构下，View 和 Model 之间并没有直接的联系，而是通过 ViewModel 进行交互，Model 和 ViewModel 之间的交互是双向的， 因此 View 数据的变化会同步到 Model 中，而 Model 数据的变化也会立即反应到 View 上。</li>\n<li>ViewModel 通过双向数据绑定把 View 层和 Model 层连接了起来，而View 和 Model 之间的同步工作完全是自动的，无需人为干涉，因此开发者只需关注业务逻辑，不需要手动操作DOM, 不需要关注数据状态的同步问题，复杂的数据状态维护完全由 MVVM 来统一管理。</li>\n</ul>\n<h2 id=\"Vue和MVVM\"><a href=\"#Vue和MVVM\" class=\"headerlink\" title=\"Vue和MVVM\"></a>Vue和MVVM</h2><ul>\n<li>响应式：vue如何监听到data的每个属性变化？</li>\n<li>模板引擎：vue的模板如何被解析，指令如何处理？</li>\n<li>渲染：vue的模板如何被渲染成html？以及渲染过程</li>\n</ul>\n<h3 id=\"vue中如何实现响应式\"><a href=\"#vue中如何实现响应式\" class=\"headerlink\" title=\"vue中如何实现响应式\"></a>vue中如何实现响应式</h3><h4 id=\"什么是响应式\"><a href=\"#什么是响应式\" class=\"headerlink\" title=\"什么是响应式\"></a>什么是响应式</h4><ul>\n<li>修改data属性后，vue立刻监听到</li>\n<li>data属性被代理到vm上</li>\n</ul>\n<h3 id=\"Object-defineProperty-obj-prop-desc\"><a href=\"#Object-defineProperty-obj-prop-desc\" class=\"headerlink\" title=\"Object.defineProperty(obj, prop, desc)\"></a>Object.defineProperty(obj, prop, desc)</h3><p><strong>实现响应式的核心函数</strong></p>\n<blockquote>\n<p>Object.defineProperty(obj, prop, desc)的作用就是直接在一个对象上定义一个新属性，或者修改一个已经存在的属性<br>模板中没有的数据，不会走get监听，所以也不会走set监听，Object.defineProperty的原则是走get才会走set,防止无用的数据重复渲染。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> data = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'zhangsan'</span>,</span><br><span class=\"line\">    age: <span class=\"number\">20</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> key, value</span><br><span class=\"line\"><span class=\"keyword\">for</span> (key <span class=\"keyword\">in</span> data) &#123;</span><br><span class=\"line\">    (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">Object</span>.defineProperty(vm, key, &#123;</span><br><span class=\"line\">            <span class=\"keyword\">get</span>: function () &#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'get'</span>, data[key]) <span class=\"comment\">// 监听</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> data[key]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"keyword\">set</span>: function (newVal) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'set'</span>, newVal) <span class=\"comment\">// 监听</span></span><br><span class=\"line\">                data[key] = newVal</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)(key)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"vue中如何解析模板\"><a href=\"#vue中如何解析模板\" class=\"headerlink\" title=\"vue中如何解析模板\"></a>vue中如何解析模板</h3><h4 id=\"模板是什么？\"><a href=\"#模板是什么？\" class=\"headerlink\" title=\"模板是什么？\"></a>模板是什么？</h4><ul>\n<li>本质：字符串</li>\n<li>有逻辑，如v-if v-for等</li>\n<li>与html很像，但有很大区别</li>\n<li>最终还要转化成html来显示</li>\n<li>模板最终要装换成js代码（render函数）</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//模板</span></span><br><span class=\"line\">    &lt;div id=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">        &lt;p&gt;&#123;&#123;price&#125;&#125;&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\"><span class=\"comment\">//render函数</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">render</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">with</span>(<span class=\"keyword\">this</span>) &#123;  <span class=\"comment\">// this 就是 vm</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> _c(</span><br><span class=\"line\">                    <span class=\"string\">'div'</span>,</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        attrs: &#123;<span class=\"string\">'id'</span>: <span class=\"string\">'app'</span>&#125;</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    [</span><br><span class=\"line\">                        _c(<span class=\"string\">'p'</span>, [_v(_s(price))])</span><br><span class=\"line\">                    ]</span><br><span class=\"line\">                )</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"comment\">//在vue源码中搜索code.render，然后alert(code.render)可以看render函数</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>h函数生成vdom</li>\n<li>patch函数渲染成dom</li>\n</ul>\n<hr>\n<ul>\n<li>h函数就是vue中的createElement方法，这个函数作用就是创建虚拟dom，追踪dom变化的</li>\n</ul>\n<h3 id=\"vue的整个实现流程\"><a href=\"#vue的整个实现流程\" class=\"headerlink\" title=\"vue的整个实现流程\"></a>vue的整个实现流程</h3><ol>\n<li>解析模板成render函数</li>\n<li>响应式开始监听</li>\n<li>首次渲染，显示页面，且绑定依赖</li>\n<li>data属性变化，触发rerender</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h2 id=\"Vue-js\"><a href=\"#Vue-js\" class=\"headerlink\" title=\"Vue.js\"></a>Vue.js</h2><h3 id=\"Vue-js是什么\"><a href=\"#Vue-js是什么\" class=\"headerlink\" title=\"Vue.js是什么\"></a>Vue.js是什么</h3><ul>\n<li>Vue.js 是一个轻巧、高性能、可组件化的 MVVM 库，拥有非常容易上手的 API；</li>\n<li>Vue.js是一个构建数据驱动的 Web 界面的库。</li>\n</ul>","more":"<h3 id=\"Vue-js-的特性\"><a href=\"#Vue-js-的特性\" class=\"headerlink\" title=\"Vue.js 的特性\"></a>Vue.js 的特性</h3><ol>\n<li>轻量级的框架</li>\n<li>双向数据绑定</li>\n<li>指令</li>\n<li>插件化（组件化）</li>\n</ol>\n<h3 id=\"MVVM-框架\"><a href=\"#MVVM-框架\" class=\"headerlink\" title=\"MVVM 框架\"></a>MVVM 框架</h3><ul>\n<li>MVVM（Model-View-ViewModel）是对 MVC（Model-View-Control）和 MVP（Model-View-Presenter）的进一步改进。<blockquote>\n<p>『View』：视图层（UI 用户界面）</p>\n</blockquote>\n</li>\n</ul>\n<blockquote>\n<p>『ViewModel』：业务逻辑层（一切 js 可视为业务逻辑）</p>\n</blockquote>\n<blockquote>\n<p>『Model』：数据层（存储数据及对数据的处理如增删改查）</p>\n</blockquote>\n<ul>\n<li>MVVM 将数据双向绑定（data-binding）作为核心思想，View 和 Model 之间没有联系，它们通过 ViewModel 这个桥梁进行交互。</li>\n<li>Model 和 ViewModel 之间的交互是双向的，因此 View 的变化会自动同步到 Model，而 Model 的变化也会立即反映到 View 上显示。</li>\n<li>当用户操作 View，ViewModel 感知到变化，然后通知 Model 发生相应改变；反之当 Model 发生改变，ViewModel 也能感知到变化，使 View 作出相应更新。</li>\n<li>Angular 和 Ember 都采用这种模式。</li>\n</ul>\n<h3 id=\"Vue-的开发模式\"><a href=\"#Vue-的开发模式\" class=\"headerlink\" title=\"Vue 的开发模式\"></a>Vue 的开发模式</h3><ul>\n<li>通过 script 标签直接引入 vue.js</li>\n<li>通过 Vue 的脚手架工具 vue-cli 来进行一键项目搭建</li>\n</ul>\n<h3 id=\"Vue-js-的优点\"><a href=\"#Vue-js-的优点\" class=\"headerlink\" title=\"Vue.js 的优点\"></a>Vue.js 的优点</h3><ul>\n<li>简单轻巧，功能强大，拥有非常容易上手的 API；</li>\n<li>可组件化 和 响应式设计；</li>\n<li>实现数据与结构分离，高性能，易于浏览器的加载速度；</li>\n<li>MVVM 模式，数据双向绑定，减少了 DOM 操作，将更多精力放在数据和业务逻辑上。</li>\n</ul>\n<h3 id=\"Vue的优点\"><a href=\"#Vue的优点\" class=\"headerlink\" title=\"Vue的优点\"></a>Vue的优点</h3><ul>\n<li>低耦合。视图（View）可以独立于 Model 变化和修改，一个 ViewModel 可以绑定到不同的 “View” 上，当 View 变化的时候 Model 可以不变，当 Model 变化的时候 View 也可以不变。</li>\n<li>可重用性。你可以把一些视图逻辑放在一个 ViewModel 里面，让很多 View 重用这段视图逻辑。</li>\n<li>独立开发。开发人员可以专注于业务逻辑和数据的开发（ViewModel），设计人员可以专注于页面设计。</li>\n<li>方便测试。界面素来是比较难于测试的，开发中大部分 Bug 来至于逻辑处理，由于 ViewModel 分离了许多逻辑，可以对 ViewModel 构造单元测试。</li>\n<li>易用 灵活 高效。</li>\n</ul>\n<h2 id=\"MVVM\"><a href=\"#MVVM\" class=\"headerlink\" title=\"MVVM\"></a>MVVM</h2><h3 id=\"JQuery和MVVM的区别\"><a href=\"#JQuery和MVVM的区别\" class=\"headerlink\" title=\"JQuery和MVVM的区别\"></a>JQuery和MVVM的区别</h3><ul>\n<li>数据和视图的分离，解耦（开放封闭原则）</li>\n<li>以数据驱动视图，只关心数据变化，DOM操作被封装</li>\n</ul>\n<h3 id=\"什么是MVVM\"><a href=\"#什么是MVVM\" class=\"headerlink\" title=\"什么是MVVM\"></a>什么是MVVM</h3><ul>\n<li>MVVM 是 Model-View-ViewModel 的缩写。MVVM 是一种设计思想。Model 层代表数据模型，也可以在 Model 中定义数据修改和操作的业务逻辑；View 代表 UI 组件，它负责将数据模型转化成 UI 展现出来，ViewModel 是一个同步 View 和 Model 的对象。</li>\n<li>在 MVVM 架构下，View 和 Model 之间并没有直接的联系，而是通过 ViewModel 进行交互，Model 和 ViewModel 之间的交互是双向的， 因此 View 数据的变化会同步到 Model 中，而 Model 数据的变化也会立即反应到 View 上。</li>\n<li>ViewModel 通过双向数据绑定把 View 层和 Model 层连接了起来，而View 和 Model 之间的同步工作完全是自动的，无需人为干涉，因此开发者只需关注业务逻辑，不需要手动操作DOM, 不需要关注数据状态的同步问题，复杂的数据状态维护完全由 MVVM 来统一管理。</li>\n</ul>\n<h2 id=\"Vue和MVVM\"><a href=\"#Vue和MVVM\" class=\"headerlink\" title=\"Vue和MVVM\"></a>Vue和MVVM</h2><ul>\n<li>响应式：vue如何监听到data的每个属性变化？</li>\n<li>模板引擎：vue的模板如何被解析，指令如何处理？</li>\n<li>渲染：vue的模板如何被渲染成html？以及渲染过程</li>\n</ul>\n<h3 id=\"vue中如何实现响应式\"><a href=\"#vue中如何实现响应式\" class=\"headerlink\" title=\"vue中如何实现响应式\"></a>vue中如何实现响应式</h3><h4 id=\"什么是响应式\"><a href=\"#什么是响应式\" class=\"headerlink\" title=\"什么是响应式\"></a>什么是响应式</h4><ul>\n<li>修改data属性后，vue立刻监听到</li>\n<li>data属性被代理到vm上</li>\n</ul>\n<h3 id=\"Object-defineProperty-obj-prop-desc\"><a href=\"#Object-defineProperty-obj-prop-desc\" class=\"headerlink\" title=\"Object.defineProperty(obj, prop, desc)\"></a>Object.defineProperty(obj, prop, desc)</h3><p><strong>实现响应式的核心函数</strong></p>\n<blockquote>\n<p>Object.defineProperty(obj, prop, desc)的作用就是直接在一个对象上定义一个新属性，或者修改一个已经存在的属性<br>模板中没有的数据，不会走get监听，所以也不会走set监听，Object.defineProperty的原则是走get才会走set,防止无用的数据重复渲染。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> data = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'zhangsan'</span>,</span><br><span class=\"line\">    age: <span class=\"number\">20</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> key, value</span><br><span class=\"line\"><span class=\"keyword\">for</span> (key <span class=\"keyword\">in</span> data) &#123;</span><br><span class=\"line\">    (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">Object</span>.defineProperty(vm, key, &#123;</span><br><span class=\"line\">            <span class=\"keyword\">get</span>: function () &#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'get'</span>, data[key]) <span class=\"comment\">// 监听</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> data[key]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"keyword\">set</span>: function (newVal) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'set'</span>, newVal) <span class=\"comment\">// 监听</span></span><br><span class=\"line\">                data[key] = newVal</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)(key)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"vue中如何解析模板\"><a href=\"#vue中如何解析模板\" class=\"headerlink\" title=\"vue中如何解析模板\"></a>vue中如何解析模板</h3><h4 id=\"模板是什么？\"><a href=\"#模板是什么？\" class=\"headerlink\" title=\"模板是什么？\"></a>模板是什么？</h4><ul>\n<li>本质：字符串</li>\n<li>有逻辑，如v-if v-for等</li>\n<li>与html很像，但有很大区别</li>\n<li>最终还要转化成html来显示</li>\n<li>模板最终要装换成js代码（render函数）</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//模板</span></span><br><span class=\"line\">    &lt;div id=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">        &lt;p&gt;&#123;&#123;price&#125;&#125;&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\"><span class=\"comment\">//render函数</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">render</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">with</span>(<span class=\"keyword\">this</span>) &#123;  <span class=\"comment\">// this 就是 vm</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> _c(</span><br><span class=\"line\">                    <span class=\"string\">'div'</span>,</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        attrs: &#123;<span class=\"string\">'id'</span>: <span class=\"string\">'app'</span>&#125;</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    [</span><br><span class=\"line\">                        _c(<span class=\"string\">'p'</span>, [_v(_s(price))])</span><br><span class=\"line\">                    ]</span><br><span class=\"line\">                )</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"comment\">//在vue源码中搜索code.render，然后alert(code.render)可以看render函数</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>h函数生成vdom</li>\n<li>patch函数渲染成dom</li>\n</ul>\n<hr>\n<ul>\n<li>h函数就是vue中的createElement方法，这个函数作用就是创建虚拟dom，追踪dom变化的</li>\n</ul>\n<h3 id=\"vue的整个实现流程\"><a href=\"#vue的整个实现流程\" class=\"headerlink\" title=\"vue的整个实现流程\"></a>vue的整个实现流程</h3><ol>\n<li>解析模板成render函数</li>\n<li>响应式开始监听</li>\n<li>首次渲染，显示页面，且绑定依赖</li>\n<li>data属性变化，触发rerender</li>\n</ol>"},{"layout":"[post]","title":"Vuex","date":"2019-12-06T13:29:06.000Z","_content":"## Vuex是什么？\nVueX 是一个专门为 Vue.js 应用设计的状态管理架构，统一管理和维护各个vue组件的可变化状态(你可以理解成 vue 组件里的某些 data )。\n\nVue有五个核心概念：\n - state：基本数据\n - getters：从基本数据派生的数据 \n - mutations：提交更改数据的方法，同步！ \n - actions：像一个装饰器，包裹mutations，使之可以异步。 \n - modules：模块化Vuex\n<!-- more -->\n\n## State\nstate即Vuex中的基本数据\n### 单一状态树\nVuex使用单一状态树，即用一个对象就包含了全部的状态数据。state作为构造器选项，定义了所有我们需要的基本状态参数。\n### 在Vue组件中获得Vuex属性\n我们可以通过Vue的Computed获得Vuex的state，如下：\n\n```js\nconst store = new Vuex.Store({\n    state: {\n        count:0\n    }\n})\nconst app = new Vue({\n    //..\n    store,\n    computed: {\n        count: function(){\n            return this.$store.state.count\n        }\n    },\n    //..\n})\n\n```\n每当 store.state.count 变化的时候, 都会重新求取计算属性，并且触发更新相关联的 DOM。\n### mapState辅助函数\n当一个组件需要获取多个状态时候，将这些状态都声明为计算属性会有些重复和冗余。为了解决这个问题，我们可以使用 mapState 辅助函数帮助我们生成计算属性，让你少按几次键。\n\n```js\n// 在单独构建的版本中辅助函数为 Vuex.mapState\nimport { mapState } from 'vuex'\n\nexport default {\n  // ...\n  computed: mapState({\n    // 箭头函数可使代码更简练\n    count: state => state.count,\n\n    // 传字符串参数 'count' 等同于 `state => state.count`\n    countAlias: 'count',\n\n    // 为了能够使用 `this` 获取局部状态，必须使用常规函数\n    countPlusLocalState (state) {\n      return state.count + this.localCount\n    }\n  })\n}\n```\n当映射的计算属性的名称与 state 的子节点名称相同时，我们也可以给 mapState 传一个字符串数组。\n\n```js\ncomputed: mapState([\n  // 映射 this.count 为 store.state.count\n  'count'\n])\n```\n### 对象展开运算符\nmapState 函数返回的是一个对象。我们如何将它与局部计算属性混合使用呢？通常，我们需要使用一个工具函数将多个对象合并为一个，以使我们可以将最终对象传给 computed 属性。但是自从有了对象展开运算符，我们可以极大地简化写法：\n\n```js\ncomputed: {\n  localComputed () //本地计算属性\n  //使用对象展开运算符将此对象混入到外部对象中\n  ...mapState({\n    //..\n  })\n}\n```\n... 展开运算符（spread operator）允许一个表达式在某处展开。展开运算符在多个参数（用于函数调用）或多个元素（用于数组字面量）或者多个变量（用于解构赋值）的地方可以使用。\n\n展开运算符不能用在对象当中，因为目前展开运算符只能在可遍历对象（iterables）可用。iterables的实现是依靠[Symbol.iterator]函数，而目前只有Array,Set,String内置[Symbol.iterator]方法，而Object尚未内置该方法，因此无法使用展开运算符。不过ES7草案当中已经加入了对象展开运算符特性。\n## getters\n即从store的state中派生出的状态。\n\ngetters接收state作为其第一个参数，接受其他 getters 作为第二个参数，如不需要，第二个参数可以省略如下例子：\n\n```js\nconst store = new Vuex.Store({\n    state: {\n        count:0\n    }，\n    getters: {\n        // 单个参数\n        countDouble: function(state){\n            return state.count * 2\n        },\n        // 两个参数\n        countDoubleAndDouble: function(state, getters) {\n            return getters.countDouble * 2\n        }\n    }\n})\n\n```\n与state一样，我们也可以通过Vue的Computed获得Vuex的getters。\n\n```js\nconst app = new Vue({\n    //..\n    store,\n    computed: {\n        count: function(){\n            return this.$store.state.count\n        },\n        countDouble: function(){\n            return this.$store.getters.countDouble\n        },\n        countDoubleAndDouble: function(){\n            return this.$store.getters.countDoubleAndDouble\n        }\n    },\n    //..\n})\n```\n### mapGetters 辅助函数\nmapGetters 辅助函数仅仅是将 store 中的 getters 映射到局部计算属性，与state类似\n\n```js\nimport { mapGetters } from 'vuex'\n\nexport default {\n  // ...\n  computed: {\n  // 使用对象展开运算符将 getters 混入 computed 对象中\n    ...mapGetters([\n      'countDouble',\n      'CountDoubleAndDouble',\n      //..\n    ])\n  }\n}\n\n```\n如果你想将一个 getter 属性另取一个名字，使用对象形式：\n\n```js\nmapGetters({\n  // 映射 this.double 为 store.getters.countDouble\n  double: 'countDouble'\n})\n```\n## mutations\n提交mutation是更改Vuex中的store中的状态的唯一方法。\n\nmutation必须是同步的，如果要异步需要使用action。\n\n每个 mutation 都有一个字符串的 事件类型 (type) 和 一个 回调函数 (handler)。这个回调函数就是我们实际进行状态更改的地方，并且它会接受 state 作为第一个参数，提交载荷作为第二个参数。（提交荷载在大多数情况下应该是一个对象）,提交荷载也可以省略的。\n\n```js\nconst store = new Vuex.Store({\n  state: {\n    count: 1\n  },\n  mutations: {\n    //无提交荷载\n    increment(state) {\n        state.count++\n    }\n    //提交荷载\n    incrementN(state, obj) {\n      state.count += obj.n\n    }\n  }\n})\n```\n你不能直接调用一个 mutation handler。这个选项更像是事件注册：“当触发一个类型为 increment 的 mutation 时，调用此函数。”要唤醒一个 mutation handler，你需要以相应的 type 调用 store.commit 方法：\n\n```js\n//无提交荷载\nstore.commit('increment')\n//提交荷载\nstore.commit('incrementN', {\n    n: 100\n    })\n```\n我们也可以使用这样包含 type 属性的对象的提交方式。\n```js\nstore.commit({\n  type: 'incrementN',\n  n: 10\n})\n```\n### Mutations 需遵守 Vue 的响应规则\n - 最好提前在你的 store 中初始化好所有所需属性。\n - 当需要在对象上添加新属性时，你应该 \n使用 Vue.set(obj, 'newProp', 123), 或者\n以新对象替换老对象。例如，利用对象展开运算符我们可以这样写state.obj = {...state.obj, newProp: 123 }\n\n### mapMutations 辅助函数\n与其他辅助函数类似，你可以在组件中使用 this.$store.commit(‘xxx’) 提交 mutation，或者使用 mapMutations 辅助函数将组件中的 methods 映射为 store.commit 调用（需要在根节点注入 store）。\n\n```js\nimport { mapMutations } from 'vuex'\n\nexport default {\n  //..\n  methods: {\n    ...mapMutations([\n      'increment' // 映射 this.increment() 为 this.$store.commit('increment')\n    ]),\n    ...mapMutations({\n      add: 'increment' // 映射 this.add() 为 this.$store.commit('increment')\n    })\n  }\n}\n```\n## actions\nAction 类似于 mutation，不同在于：\n\n - Action 提交的是 mutation，而不是直接变更状态。\n - Action 可以包含任意异步操作。\n\n\n```js\nconst store = new Vuex.Store({\n  state: {\n    count: 0\n  },\n  mutations: {\n    increment (state) {\n      state.count++\n    }\n  },\n  actions: {\n    increment (context) {\n      setInterval(function(){\n        context.commit('increment')\n      }, 1000)\n    }\n  }\n})\n```\n注意：Action 函数接受一个与 store 实例具有相同方法和属性的 context 对象，因此你可以调用 context.commit 提交一个 mutation，或者通过 context.state 和 context.getters 来获取 state 和 getters。\n### 分发actions\nAction 通过 store.dispatch 方法触发：\n\n```js\nstore.dispatch('increment')\n```\n### 其他与mutations类似的地方\nActions 支持同样的载荷方式和对象方式进行分发：\n\n```js\n// 以载荷形式分发\nstore.dispatch('incrementN', {\n  n: 10\n})\n\n// 以对象形式分发\nstore.dispatch({\n  type: 'incrementN',\n  n: 10\n})\n```\n### mapActions辅助函数\n你在组件中使用 this.$store.dispatch('xxx') 分发 action，或者使用 mapActions 辅助函数将组件的 methods 映射为 store.dispatch 调用（需要先在根节点注入 store）:\n\n```js\nimport { mapActions } from 'vuex'\n\nexport default {\n  //..\n  methods: {\n    ...mapActions([\n      'incrementN' //映射 this.incrementN() 为 this.$store.dispatch('incrementN')\n    ]),\n    ...mapActions({\n      add: 'incrementN' //映射 this.add() 为 this.$store.dispatch('incrementN')\n    })\n  }\n}\n\n```\n## Modules\n使用单一状态树，导致应用的所有状态集中到一个很大的对象。但是，当应用变得很大时，store 对象会变得臃肿不堪。\n\n为了解决以上问题，Vuex 允许我们将 store 分割到模块（module）。每个模块拥有自己的 state、mutation、action、getters、甚至是嵌套子模块——从上至下进行类似的分割：\n\n```js\nconst moduleA = {\n  state: { ... },\n  mutations: { ... },\n  actions: { ... },\n  getters: { ... }\n}\n\nconst moduleB = {\n  state: { ... },\n  mutations: { ... },\n  actions: { ... }\n}\n\nconst store = new Vuex.Store({\n  modules: {\n    a: moduleA,\n    b: moduleB\n  }\n})\n\nstore.state.a // -> moduleA 的状态\nstore.state.b // -> moduleB 的状态\n```\n### 模块的局部状态\n对于模块内部的 mutation 和 getter，接收的第一个参数是模块的局部状态,对于模块内部的 getter，根节点状态会作为第三个参数:\n\n```\nconst moduleA = {\n  state: { count: 0 },\n  mutations: {\n    increment (state) {\n      // state 模块的局部状态\n      state.count++\n    }\n  },\n\n  getters: {\n    doubleCount (state) {\n      return state.count * 2\n    },\n    sumWithRootCount (state, getters, rootState) {\n      return state.count + rootState.count\n    }\n  }\n}\n\n```\n同样，对于模块内部的 action，context.state 是局部状态，根节点的状态是 context.rootState:\n\n```js\nconst moduleA = {\n  // ...\n  actions: {\n    incrementIfOddOnRootSum (context) {\n      if ((context.state.count + context.rootState.count) % 2 === 1) {\n        commit('increment')\n      }\n    }\n  }\n}\n\n```\n[原文链接](https://blog.csdn.net/weixin_35955795/article/details/57412181)\n\n","source":"_posts/Vuex.md","raw":"---\nlayout: '[post]'\ntitle: Vuex\ndate: 2019-12-06 21:29:06\ntags: Vue\n---\n## Vuex是什么？\nVueX 是一个专门为 Vue.js 应用设计的状态管理架构，统一管理和维护各个vue组件的可变化状态(你可以理解成 vue 组件里的某些 data )。\n\nVue有五个核心概念：\n - state：基本数据\n - getters：从基本数据派生的数据 \n - mutations：提交更改数据的方法，同步！ \n - actions：像一个装饰器，包裹mutations，使之可以异步。 \n - modules：模块化Vuex\n<!-- more -->\n\n## State\nstate即Vuex中的基本数据\n### 单一状态树\nVuex使用单一状态树，即用一个对象就包含了全部的状态数据。state作为构造器选项，定义了所有我们需要的基本状态参数。\n### 在Vue组件中获得Vuex属性\n我们可以通过Vue的Computed获得Vuex的state，如下：\n\n```js\nconst store = new Vuex.Store({\n    state: {\n        count:0\n    }\n})\nconst app = new Vue({\n    //..\n    store,\n    computed: {\n        count: function(){\n            return this.$store.state.count\n        }\n    },\n    //..\n})\n\n```\n每当 store.state.count 变化的时候, 都会重新求取计算属性，并且触发更新相关联的 DOM。\n### mapState辅助函数\n当一个组件需要获取多个状态时候，将这些状态都声明为计算属性会有些重复和冗余。为了解决这个问题，我们可以使用 mapState 辅助函数帮助我们生成计算属性，让你少按几次键。\n\n```js\n// 在单独构建的版本中辅助函数为 Vuex.mapState\nimport { mapState } from 'vuex'\n\nexport default {\n  // ...\n  computed: mapState({\n    // 箭头函数可使代码更简练\n    count: state => state.count,\n\n    // 传字符串参数 'count' 等同于 `state => state.count`\n    countAlias: 'count',\n\n    // 为了能够使用 `this` 获取局部状态，必须使用常规函数\n    countPlusLocalState (state) {\n      return state.count + this.localCount\n    }\n  })\n}\n```\n当映射的计算属性的名称与 state 的子节点名称相同时，我们也可以给 mapState 传一个字符串数组。\n\n```js\ncomputed: mapState([\n  // 映射 this.count 为 store.state.count\n  'count'\n])\n```\n### 对象展开运算符\nmapState 函数返回的是一个对象。我们如何将它与局部计算属性混合使用呢？通常，我们需要使用一个工具函数将多个对象合并为一个，以使我们可以将最终对象传给 computed 属性。但是自从有了对象展开运算符，我们可以极大地简化写法：\n\n```js\ncomputed: {\n  localComputed () //本地计算属性\n  //使用对象展开运算符将此对象混入到外部对象中\n  ...mapState({\n    //..\n  })\n}\n```\n... 展开运算符（spread operator）允许一个表达式在某处展开。展开运算符在多个参数（用于函数调用）或多个元素（用于数组字面量）或者多个变量（用于解构赋值）的地方可以使用。\n\n展开运算符不能用在对象当中，因为目前展开运算符只能在可遍历对象（iterables）可用。iterables的实现是依靠[Symbol.iterator]函数，而目前只有Array,Set,String内置[Symbol.iterator]方法，而Object尚未内置该方法，因此无法使用展开运算符。不过ES7草案当中已经加入了对象展开运算符特性。\n## getters\n即从store的state中派生出的状态。\n\ngetters接收state作为其第一个参数，接受其他 getters 作为第二个参数，如不需要，第二个参数可以省略如下例子：\n\n```js\nconst store = new Vuex.Store({\n    state: {\n        count:0\n    }，\n    getters: {\n        // 单个参数\n        countDouble: function(state){\n            return state.count * 2\n        },\n        // 两个参数\n        countDoubleAndDouble: function(state, getters) {\n            return getters.countDouble * 2\n        }\n    }\n})\n\n```\n与state一样，我们也可以通过Vue的Computed获得Vuex的getters。\n\n```js\nconst app = new Vue({\n    //..\n    store,\n    computed: {\n        count: function(){\n            return this.$store.state.count\n        },\n        countDouble: function(){\n            return this.$store.getters.countDouble\n        },\n        countDoubleAndDouble: function(){\n            return this.$store.getters.countDoubleAndDouble\n        }\n    },\n    //..\n})\n```\n### mapGetters 辅助函数\nmapGetters 辅助函数仅仅是将 store 中的 getters 映射到局部计算属性，与state类似\n\n```js\nimport { mapGetters } from 'vuex'\n\nexport default {\n  // ...\n  computed: {\n  // 使用对象展开运算符将 getters 混入 computed 对象中\n    ...mapGetters([\n      'countDouble',\n      'CountDoubleAndDouble',\n      //..\n    ])\n  }\n}\n\n```\n如果你想将一个 getter 属性另取一个名字，使用对象形式：\n\n```js\nmapGetters({\n  // 映射 this.double 为 store.getters.countDouble\n  double: 'countDouble'\n})\n```\n## mutations\n提交mutation是更改Vuex中的store中的状态的唯一方法。\n\nmutation必须是同步的，如果要异步需要使用action。\n\n每个 mutation 都有一个字符串的 事件类型 (type) 和 一个 回调函数 (handler)。这个回调函数就是我们实际进行状态更改的地方，并且它会接受 state 作为第一个参数，提交载荷作为第二个参数。（提交荷载在大多数情况下应该是一个对象）,提交荷载也可以省略的。\n\n```js\nconst store = new Vuex.Store({\n  state: {\n    count: 1\n  },\n  mutations: {\n    //无提交荷载\n    increment(state) {\n        state.count++\n    }\n    //提交荷载\n    incrementN(state, obj) {\n      state.count += obj.n\n    }\n  }\n})\n```\n你不能直接调用一个 mutation handler。这个选项更像是事件注册：“当触发一个类型为 increment 的 mutation 时，调用此函数。”要唤醒一个 mutation handler，你需要以相应的 type 调用 store.commit 方法：\n\n```js\n//无提交荷载\nstore.commit('increment')\n//提交荷载\nstore.commit('incrementN', {\n    n: 100\n    })\n```\n我们也可以使用这样包含 type 属性的对象的提交方式。\n```js\nstore.commit({\n  type: 'incrementN',\n  n: 10\n})\n```\n### Mutations 需遵守 Vue 的响应规则\n - 最好提前在你的 store 中初始化好所有所需属性。\n - 当需要在对象上添加新属性时，你应该 \n使用 Vue.set(obj, 'newProp', 123), 或者\n以新对象替换老对象。例如，利用对象展开运算符我们可以这样写state.obj = {...state.obj, newProp: 123 }\n\n### mapMutations 辅助函数\n与其他辅助函数类似，你可以在组件中使用 this.$store.commit(‘xxx’) 提交 mutation，或者使用 mapMutations 辅助函数将组件中的 methods 映射为 store.commit 调用（需要在根节点注入 store）。\n\n```js\nimport { mapMutations } from 'vuex'\n\nexport default {\n  //..\n  methods: {\n    ...mapMutations([\n      'increment' // 映射 this.increment() 为 this.$store.commit('increment')\n    ]),\n    ...mapMutations({\n      add: 'increment' // 映射 this.add() 为 this.$store.commit('increment')\n    })\n  }\n}\n```\n## actions\nAction 类似于 mutation，不同在于：\n\n - Action 提交的是 mutation，而不是直接变更状态。\n - Action 可以包含任意异步操作。\n\n\n```js\nconst store = new Vuex.Store({\n  state: {\n    count: 0\n  },\n  mutations: {\n    increment (state) {\n      state.count++\n    }\n  },\n  actions: {\n    increment (context) {\n      setInterval(function(){\n        context.commit('increment')\n      }, 1000)\n    }\n  }\n})\n```\n注意：Action 函数接受一个与 store 实例具有相同方法和属性的 context 对象，因此你可以调用 context.commit 提交一个 mutation，或者通过 context.state 和 context.getters 来获取 state 和 getters。\n### 分发actions\nAction 通过 store.dispatch 方法触发：\n\n```js\nstore.dispatch('increment')\n```\n### 其他与mutations类似的地方\nActions 支持同样的载荷方式和对象方式进行分发：\n\n```js\n// 以载荷形式分发\nstore.dispatch('incrementN', {\n  n: 10\n})\n\n// 以对象形式分发\nstore.dispatch({\n  type: 'incrementN',\n  n: 10\n})\n```\n### mapActions辅助函数\n你在组件中使用 this.$store.dispatch('xxx') 分发 action，或者使用 mapActions 辅助函数将组件的 methods 映射为 store.dispatch 调用（需要先在根节点注入 store）:\n\n```js\nimport { mapActions } from 'vuex'\n\nexport default {\n  //..\n  methods: {\n    ...mapActions([\n      'incrementN' //映射 this.incrementN() 为 this.$store.dispatch('incrementN')\n    ]),\n    ...mapActions({\n      add: 'incrementN' //映射 this.add() 为 this.$store.dispatch('incrementN')\n    })\n  }\n}\n\n```\n## Modules\n使用单一状态树，导致应用的所有状态集中到一个很大的对象。但是，当应用变得很大时，store 对象会变得臃肿不堪。\n\n为了解决以上问题，Vuex 允许我们将 store 分割到模块（module）。每个模块拥有自己的 state、mutation、action、getters、甚至是嵌套子模块——从上至下进行类似的分割：\n\n```js\nconst moduleA = {\n  state: { ... },\n  mutations: { ... },\n  actions: { ... },\n  getters: { ... }\n}\n\nconst moduleB = {\n  state: { ... },\n  mutations: { ... },\n  actions: { ... }\n}\n\nconst store = new Vuex.Store({\n  modules: {\n    a: moduleA,\n    b: moduleB\n  }\n})\n\nstore.state.a // -> moduleA 的状态\nstore.state.b // -> moduleB 的状态\n```\n### 模块的局部状态\n对于模块内部的 mutation 和 getter，接收的第一个参数是模块的局部状态,对于模块内部的 getter，根节点状态会作为第三个参数:\n\n```\nconst moduleA = {\n  state: { count: 0 },\n  mutations: {\n    increment (state) {\n      // state 模块的局部状态\n      state.count++\n    }\n  },\n\n  getters: {\n    doubleCount (state) {\n      return state.count * 2\n    },\n    sumWithRootCount (state, getters, rootState) {\n      return state.count + rootState.count\n    }\n  }\n}\n\n```\n同样，对于模块内部的 action，context.state 是局部状态，根节点的状态是 context.rootState:\n\n```js\nconst moduleA = {\n  // ...\n  actions: {\n    incrementIfOddOnRootSum (context) {\n      if ((context.state.count + context.rootState.count) % 2 === 1) {\n        commit('increment')\n      }\n    }\n  }\n}\n\n```\n[原文链接](https://blog.csdn.net/weixin_35955795/article/details/57412181)\n\n","slug":"Vuex","published":1,"updated":"2020-05-06T13:33:12.000Z","comments":1,"photos":[],"link":"","_id":"ckbftlm5v000h7w2p04gqhvs5","content":"<h2 id=\"Vuex是什么？\"><a href=\"#Vuex是什么？\" class=\"headerlink\" title=\"Vuex是什么？\"></a>Vuex是什么？</h2><p>VueX 是一个专门为 Vue.js 应用设计的状态管理架构，统一管理和维护各个vue组件的可变化状态(你可以理解成 vue 组件里的某些 data )。</p>\n<p>Vue有五个核心概念：</p>\n<ul>\n<li>state：基本数据</li>\n<li>getters：从基本数据派生的数据 </li>\n<li>mutations：提交更改数据的方法，同步！ </li>\n<li>actions：像一个装饰器，包裹mutations，使之可以异步。 </li>\n<li>modules：模块化Vuex<a id=\"more\"></a>\n\n</li>\n</ul>\n<h2 id=\"State\"><a href=\"#State\" class=\"headerlink\" title=\"State\"></a>State</h2><p>state即Vuex中的基本数据</p>\n<h3 id=\"单一状态树\"><a href=\"#单一状态树\" class=\"headerlink\" title=\"单一状态树\"></a>单一状态树</h3><p>Vuex使用单一状态树，即用一个对象就包含了全部的状态数据。state作为构造器选项，定义了所有我们需要的基本状态参数。</p>\n<h3 id=\"在Vue组件中获得Vuex属性\"><a href=\"#在Vue组件中获得Vuex属性\" class=\"headerlink\" title=\"在Vue组件中获得Vuex属性\"></a>在Vue组件中获得Vuex属性</h3><p>我们可以通过Vue的Computed获得Vuex的state，如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">    state: &#123;</span><br><span class=\"line\">        count:<span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    <span class=\"comment\">//..</span></span><br><span class=\"line\">    store,</span><br><span class=\"line\">    computed: &#123;</span><br><span class=\"line\">        count: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$store.state.count</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">//..</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>每当 store.state.count 变化的时候, 都会重新求取计算属性，并且触发更新相关联的 DOM。</p>\n<h3 id=\"mapState辅助函数\"><a href=\"#mapState辅助函数\" class=\"headerlink\" title=\"mapState辅助函数\"></a>mapState辅助函数</h3><p>当一个组件需要获取多个状态时候，将这些状态都声明为计算属性会有些重复和冗余。为了解决这个问题，我们可以使用 mapState 辅助函数帮助我们生成计算属性，让你少按几次键。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在单独构建的版本中辅助函数为 Vuex.mapState</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapState &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  computed: mapState(&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 箭头函数可使代码更简练</span></span><br><span class=\"line\">    count: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.count,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 传字符串参数 'count' 等同于 `state =&gt; state.count`</span></span><br><span class=\"line\">    countAlias: <span class=\"string\">'count'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 为了能够使用 `this` 获取局部状态，必须使用常规函数</span></span><br><span class=\"line\">    countPlusLocalState (state) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state.count + <span class=\"keyword\">this</span>.localCount</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当映射的计算属性的名称与 state 的子节点名称相同时，我们也可以给 mapState 传一个字符串数组。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: mapState([</span><br><span class=\"line\">  <span class=\"comment\">// 映射 this.count 为 store.state.count</span></span><br><span class=\"line\">  <span class=\"string\">'count'</span></span><br><span class=\"line\">])</span><br></pre></td></tr></table></figure>\n<h3 id=\"对象展开运算符\"><a href=\"#对象展开运算符\" class=\"headerlink\" title=\"对象展开运算符\"></a>对象展开运算符</h3><p>mapState 函数返回的是一个对象。我们如何将它与局部计算属性混合使用呢？通常，我们需要使用一个工具函数将多个对象合并为一个，以使我们可以将最终对象传给 computed 属性。但是自从有了对象展开运算符，我们可以极大地简化写法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  localComputed () <span class=\"comment\">//本地计算属性</span></span><br><span class=\"line\">  <span class=\"comment\">//使用对象展开运算符将此对象混入到外部对象中</span></span><br><span class=\"line\">  ...mapState(&#123;</span><br><span class=\"line\">    <span class=\"comment\">//..</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>… 展开运算符（spread operator）允许一个表达式在某处展开。展开运算符在多个参数（用于函数调用）或多个元素（用于数组字面量）或者多个变量（用于解构赋值）的地方可以使用。</p>\n<p>展开运算符不能用在对象当中，因为目前展开运算符只能在可遍历对象（iterables）可用。iterables的实现是依靠[Symbol.iterator]函数，而目前只有Array,Set,String内置[Symbol.iterator]方法，而Object尚未内置该方法，因此无法使用展开运算符。不过ES7草案当中已经加入了对象展开运算符特性。</p>\n<h2 id=\"getters\"><a href=\"#getters\" class=\"headerlink\" title=\"getters\"></a>getters</h2><p>即从store的state中派生出的状态。</p>\n<p>getters接收state作为其第一个参数，接受其他 getters 作为第二个参数，如不需要，第二个参数可以省略如下例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">    state: &#123;</span><br><span class=\"line\">        count:<span class=\"number\">0</span></span><br><span class=\"line\">    &#125;，</span><br><span class=\"line\">    getters: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 单个参数</span></span><br><span class=\"line\">        countDouble: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">state</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> state.count * <span class=\"number\">2</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">// 两个参数</span></span><br><span class=\"line\">        countDoubleAndDouble: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">state, getters</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> getters.countDouble * <span class=\"number\">2</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>与state一样，我们也可以通过Vue的Computed获得Vuex的getters。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    <span class=\"comment\">//..</span></span><br><span class=\"line\">    store,</span><br><span class=\"line\">    computed: &#123;</span><br><span class=\"line\">        count: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$store.state.count</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        countDouble: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$store.getters.countDouble</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        countDoubleAndDouble: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$store.getters.countDoubleAndDouble</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">//..</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"mapGetters-辅助函数\"><a href=\"#mapGetters-辅助函数\" class=\"headerlink\" title=\"mapGetters 辅助函数\"></a>mapGetters 辅助函数</h3><p>mapGetters 辅助函数仅仅是将 store 中的 getters 映射到局部计算属性，与state类似</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapGetters &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  computed: &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 使用对象展开运算符将 getters 混入 computed 对象中</span></span><br><span class=\"line\">    ...mapGetters([</span><br><span class=\"line\">      <span class=\"string\">'countDouble'</span>,</span><br><span class=\"line\">      <span class=\"string\">'CountDoubleAndDouble'</span>,</span><br><span class=\"line\">      <span class=\"comment\">//..</span></span><br><span class=\"line\">    ])</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果你想将一个 getter 属性另取一个名字，使用对象形式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mapGetters(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 映射 this.double 为 store.getters.countDouble</span></span><br><span class=\"line\">  double: <span class=\"string\">'countDouble'</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"mutations\"><a href=\"#mutations\" class=\"headerlink\" title=\"mutations\"></a>mutations</h2><p>提交mutation是更改Vuex中的store中的状态的唯一方法。</p>\n<p>mutation必须是同步的，如果要异步需要使用action。</p>\n<p>每个 mutation 都有一个字符串的 事件类型 (type) 和 一个 回调函数 (handler)。这个回调函数就是我们实际进行状态更改的地方，并且它会接受 state 作为第一个参数，提交载荷作为第二个参数。（提交荷载在大多数情况下应该是一个对象）,提交荷载也可以省略的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  state: &#123;</span><br><span class=\"line\">    count: <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mutations: &#123;</span><br><span class=\"line\">    <span class=\"comment\">//无提交荷载</span></span><br><span class=\"line\">    increment(state) &#123;</span><br><span class=\"line\">        state.count++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//提交荷载</span></span><br><span class=\"line\">    incrementN(state, obj) &#123;</span><br><span class=\"line\">      state.count += obj.n</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>你不能直接调用一个 mutation handler。这个选项更像是事件注册：“当触发一个类型为 increment 的 mutation 时，调用此函数。”要唤醒一个 mutation handler，你需要以相应的 type 调用 store.commit 方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//无提交荷载</span></span><br><span class=\"line\">store.commit(<span class=\"string\">'increment'</span>)</span><br><span class=\"line\"><span class=\"comment\">//提交荷载</span></span><br><span class=\"line\">store.commit(<span class=\"string\">'incrementN'</span>, &#123;</span><br><span class=\"line\">    n: <span class=\"number\">100</span></span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n<p>我们也可以使用这样包含 type 属性的对象的提交方式。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">store.commit(&#123;</span><br><span class=\"line\">  type: <span class=\"string\">'incrementN'</span>,</span><br><span class=\"line\">  n: <span class=\"number\">10</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"Mutations-需遵守-Vue-的响应规则\"><a href=\"#Mutations-需遵守-Vue-的响应规则\" class=\"headerlink\" title=\"Mutations 需遵守 Vue 的响应规则\"></a>Mutations 需遵守 Vue 的响应规则</h3><ul>\n<li>最好提前在你的 store 中初始化好所有所需属性。</li>\n<li>当需要在对象上添加新属性时，你应该<br>使用 Vue.set(obj, ‘newProp’, 123), 或者<br>以新对象替换老对象。例如，利用对象展开运算符我们可以这样写state.obj = {…state.obj, newProp: 123 }</li>\n</ul>\n<h3 id=\"mapMutations-辅助函数\"><a href=\"#mapMutations-辅助函数\" class=\"headerlink\" title=\"mapMutations 辅助函数\"></a>mapMutations 辅助函数</h3><p>与其他辅助函数类似，你可以在组件中使用 this.$store.commit(‘xxx’) 提交 mutation，或者使用 mapMutations 辅助函数将组件中的 methods 映射为 store.commit 调用（需要在根节点注入 store）。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapMutations &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//..</span></span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    ...mapMutations([</span><br><span class=\"line\">      <span class=\"string\">'increment'</span> <span class=\"comment\">// 映射 this.increment() 为 this.$store.commit('increment')</span></span><br><span class=\"line\">    ]),</span><br><span class=\"line\">    ...mapMutations(&#123;</span><br><span class=\"line\">      add: <span class=\"string\">'increment'</span> <span class=\"comment\">// 映射 this.add() 为 this.$store.commit('increment')</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"actions\"><a href=\"#actions\" class=\"headerlink\" title=\"actions\"></a>actions</h2><p>Action 类似于 mutation，不同在于：</p>\n<ul>\n<li>Action 提交的是 mutation，而不是直接变更状态。</li>\n<li>Action 可以包含任意异步操作。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  state: &#123;</span><br><span class=\"line\">    count: <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mutations: &#123;</span><br><span class=\"line\">    increment (state) &#123;</span><br><span class=\"line\">      state.count++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  actions: &#123;</span><br><span class=\"line\">    increment (context) &#123;</span><br><span class=\"line\">      setInterval(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        context.commit(<span class=\"string\">'increment'</span>)</span><br><span class=\"line\">      &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>注意：Action 函数接受一个与 store 实例具有相同方法和属性的 context 对象，因此你可以调用 context.commit 提交一个 mutation，或者通过 context.state 和 context.getters 来获取 state 和 getters。</p>\n<h3 id=\"分发actions\"><a href=\"#分发actions\" class=\"headerlink\" title=\"分发actions\"></a>分发actions</h3><p>Action 通过 store.dispatch 方法触发：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">store.dispatch(<span class=\"string\">'increment'</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"其他与mutations类似的地方\"><a href=\"#其他与mutations类似的地方\" class=\"headerlink\" title=\"其他与mutations类似的地方\"></a>其他与mutations类似的地方</h3><p>Actions 支持同样的载荷方式和对象方式进行分发：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 以载荷形式分发</span></span><br><span class=\"line\">store.dispatch(<span class=\"string\">'incrementN'</span>, &#123;</span><br><span class=\"line\">  n: <span class=\"number\">10</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 以对象形式分发</span></span><br><span class=\"line\">store.dispatch(&#123;</span><br><span class=\"line\">  type: <span class=\"string\">'incrementN'</span>,</span><br><span class=\"line\">  n: <span class=\"number\">10</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"mapActions辅助函数\"><a href=\"#mapActions辅助函数\" class=\"headerlink\" title=\"mapActions辅助函数\"></a>mapActions辅助函数</h3><p>你在组件中使用 this.$store.dispatch(‘xxx’) 分发 action，或者使用 mapActions 辅助函数将组件的 methods 映射为 store.dispatch 调用（需要先在根节点注入 store）:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapActions &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//..</span></span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    ...mapActions([</span><br><span class=\"line\">      <span class=\"string\">'incrementN'</span> <span class=\"comment\">//映射 this.incrementN() 为 this.$store.dispatch('incrementN')</span></span><br><span class=\"line\">    ]),</span><br><span class=\"line\">    ...mapActions(&#123;</span><br><span class=\"line\">      add: <span class=\"string\">'incrementN'</span> <span class=\"comment\">//映射 this.add() 为 this.$store.dispatch('incrementN')</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Modules\"><a href=\"#Modules\" class=\"headerlink\" title=\"Modules\"></a>Modules</h2><p>使用单一状态树，导致应用的所有状态集中到一个很大的对象。但是，当应用变得很大时，store 对象会变得臃肿不堪。</p>\n<p>为了解决以上问题，Vuex 允许我们将 store 分割到模块（module）。每个模块拥有自己的 state、mutation、action、getters、甚至是嵌套子模块——从上至下进行类似的分割：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> moduleA = &#123;</span><br><span class=\"line\">  state: &#123; ... &#125;,</span><br><span class=\"line\">  mutations: &#123; ... &#125;,</span><br><span class=\"line\">  actions: &#123; ... &#125;,</span><br><span class=\"line\">  getters: &#123; ... &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> moduleB = &#123;</span><br><span class=\"line\">  state: &#123; ... &#125;,</span><br><span class=\"line\">  mutations: &#123; ... &#125;,</span><br><span class=\"line\">  actions: &#123; ... &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  modules: &#123;</span><br><span class=\"line\">    a: moduleA,</span><br><span class=\"line\">    b: moduleB</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">store.state.a <span class=\"comment\">// -&gt; moduleA 的状态</span></span><br><span class=\"line\">store.state.b <span class=\"comment\">// -&gt; moduleB 的状态</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"模块的局部状态\"><a href=\"#模块的局部状态\" class=\"headerlink\" title=\"模块的局部状态\"></a>模块的局部状态</h3><p>对于模块内部的 mutation 和 getter，接收的第一个参数是模块的局部状态,对于模块内部的 getter，根节点状态会作为第三个参数:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const moduleA &#x3D; &#123;</span><br><span class=\"line\">  state: &#123; count: 0 &#125;,</span><br><span class=\"line\">  mutations: &#123;</span><br><span class=\"line\">    increment (state) &#123;</span><br><span class=\"line\">      &#x2F;&#x2F; state 模块的局部状态</span><br><span class=\"line\">      state.count++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  getters: &#123;</span><br><span class=\"line\">    doubleCount (state) &#123;</span><br><span class=\"line\">      return state.count * 2</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    sumWithRootCount (state, getters, rootState) &#123;</span><br><span class=\"line\">      return state.count + rootState.count</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同样，对于模块内部的 action，context.state 是局部状态，根节点的状态是 context.rootState:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> moduleA = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  actions: &#123;</span><br><span class=\"line\">    incrementIfOddOnRootSum (context) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ((context.state.count + context.rootState.count) % <span class=\"number\">2</span> === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        commit(<span class=\"string\">'increment'</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://blog.csdn.net/weixin_35955795/article/details/57412181\" target=\"_blank\" rel=\"noopener\">原文链接</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"Vuex是什么？\"><a href=\"#Vuex是什么？\" class=\"headerlink\" title=\"Vuex是什么？\"></a>Vuex是什么？</h2><p>VueX 是一个专门为 Vue.js 应用设计的状态管理架构，统一管理和维护各个vue组件的可变化状态(你可以理解成 vue 组件里的某些 data )。</p>\n<p>Vue有五个核心概念：</p>\n<ul>\n<li>state：基本数据</li>\n<li>getters：从基本数据派生的数据 </li>\n<li>mutations：提交更改数据的方法，同步！ </li>\n<li>actions：像一个装饰器，包裹mutations，使之可以异步。 </li>\n<li>modules：模块化Vuex</li></ul>","more":"\n\n<h2 id=\"State\"><a href=\"#State\" class=\"headerlink\" title=\"State\"></a>State</h2><p>state即Vuex中的基本数据</p>\n<h3 id=\"单一状态树\"><a href=\"#单一状态树\" class=\"headerlink\" title=\"单一状态树\"></a>单一状态树</h3><p>Vuex使用单一状态树，即用一个对象就包含了全部的状态数据。state作为构造器选项，定义了所有我们需要的基本状态参数。</p>\n<h3 id=\"在Vue组件中获得Vuex属性\"><a href=\"#在Vue组件中获得Vuex属性\" class=\"headerlink\" title=\"在Vue组件中获得Vuex属性\"></a>在Vue组件中获得Vuex属性</h3><p>我们可以通过Vue的Computed获得Vuex的state，如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">    state: &#123;</span><br><span class=\"line\">        count:<span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    <span class=\"comment\">//..</span></span><br><span class=\"line\">    store,</span><br><span class=\"line\">    computed: &#123;</span><br><span class=\"line\">        count: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$store.state.count</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">//..</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>每当 store.state.count 变化的时候, 都会重新求取计算属性，并且触发更新相关联的 DOM。</p>\n<h3 id=\"mapState辅助函数\"><a href=\"#mapState辅助函数\" class=\"headerlink\" title=\"mapState辅助函数\"></a>mapState辅助函数</h3><p>当一个组件需要获取多个状态时候，将这些状态都声明为计算属性会有些重复和冗余。为了解决这个问题，我们可以使用 mapState 辅助函数帮助我们生成计算属性，让你少按几次键。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在单独构建的版本中辅助函数为 Vuex.mapState</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapState &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  computed: mapState(&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 箭头函数可使代码更简练</span></span><br><span class=\"line\">    count: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.count,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 传字符串参数 'count' 等同于 `state =&gt; state.count`</span></span><br><span class=\"line\">    countAlias: <span class=\"string\">'count'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 为了能够使用 `this` 获取局部状态，必须使用常规函数</span></span><br><span class=\"line\">    countPlusLocalState (state) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state.count + <span class=\"keyword\">this</span>.localCount</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当映射的计算属性的名称与 state 的子节点名称相同时，我们也可以给 mapState 传一个字符串数组。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: mapState([</span><br><span class=\"line\">  <span class=\"comment\">// 映射 this.count 为 store.state.count</span></span><br><span class=\"line\">  <span class=\"string\">'count'</span></span><br><span class=\"line\">])</span><br></pre></td></tr></table></figure>\n<h3 id=\"对象展开运算符\"><a href=\"#对象展开运算符\" class=\"headerlink\" title=\"对象展开运算符\"></a>对象展开运算符</h3><p>mapState 函数返回的是一个对象。我们如何将它与局部计算属性混合使用呢？通常，我们需要使用一个工具函数将多个对象合并为一个，以使我们可以将最终对象传给 computed 属性。但是自从有了对象展开运算符，我们可以极大地简化写法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  localComputed () <span class=\"comment\">//本地计算属性</span></span><br><span class=\"line\">  <span class=\"comment\">//使用对象展开运算符将此对象混入到外部对象中</span></span><br><span class=\"line\">  ...mapState(&#123;</span><br><span class=\"line\">    <span class=\"comment\">//..</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>… 展开运算符（spread operator）允许一个表达式在某处展开。展开运算符在多个参数（用于函数调用）或多个元素（用于数组字面量）或者多个变量（用于解构赋值）的地方可以使用。</p>\n<p>展开运算符不能用在对象当中，因为目前展开运算符只能在可遍历对象（iterables）可用。iterables的实现是依靠[Symbol.iterator]函数，而目前只有Array,Set,String内置[Symbol.iterator]方法，而Object尚未内置该方法，因此无法使用展开运算符。不过ES7草案当中已经加入了对象展开运算符特性。</p>\n<h2 id=\"getters\"><a href=\"#getters\" class=\"headerlink\" title=\"getters\"></a>getters</h2><p>即从store的state中派生出的状态。</p>\n<p>getters接收state作为其第一个参数，接受其他 getters 作为第二个参数，如不需要，第二个参数可以省略如下例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">    state: &#123;</span><br><span class=\"line\">        count:<span class=\"number\">0</span></span><br><span class=\"line\">    &#125;，</span><br><span class=\"line\">    getters: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 单个参数</span></span><br><span class=\"line\">        countDouble: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">state</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> state.count * <span class=\"number\">2</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">// 两个参数</span></span><br><span class=\"line\">        countDoubleAndDouble: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">state, getters</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> getters.countDouble * <span class=\"number\">2</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>与state一样，我们也可以通过Vue的Computed获得Vuex的getters。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    <span class=\"comment\">//..</span></span><br><span class=\"line\">    store,</span><br><span class=\"line\">    computed: &#123;</span><br><span class=\"line\">        count: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$store.state.count</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        countDouble: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$store.getters.countDouble</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        countDoubleAndDouble: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$store.getters.countDoubleAndDouble</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">//..</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"mapGetters-辅助函数\"><a href=\"#mapGetters-辅助函数\" class=\"headerlink\" title=\"mapGetters 辅助函数\"></a>mapGetters 辅助函数</h3><p>mapGetters 辅助函数仅仅是将 store 中的 getters 映射到局部计算属性，与state类似</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapGetters &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  computed: &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 使用对象展开运算符将 getters 混入 computed 对象中</span></span><br><span class=\"line\">    ...mapGetters([</span><br><span class=\"line\">      <span class=\"string\">'countDouble'</span>,</span><br><span class=\"line\">      <span class=\"string\">'CountDoubleAndDouble'</span>,</span><br><span class=\"line\">      <span class=\"comment\">//..</span></span><br><span class=\"line\">    ])</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果你想将一个 getter 属性另取一个名字，使用对象形式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mapGetters(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 映射 this.double 为 store.getters.countDouble</span></span><br><span class=\"line\">  double: <span class=\"string\">'countDouble'</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"mutations\"><a href=\"#mutations\" class=\"headerlink\" title=\"mutations\"></a>mutations</h2><p>提交mutation是更改Vuex中的store中的状态的唯一方法。</p>\n<p>mutation必须是同步的，如果要异步需要使用action。</p>\n<p>每个 mutation 都有一个字符串的 事件类型 (type) 和 一个 回调函数 (handler)。这个回调函数就是我们实际进行状态更改的地方，并且它会接受 state 作为第一个参数，提交载荷作为第二个参数。（提交荷载在大多数情况下应该是一个对象）,提交荷载也可以省略的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  state: &#123;</span><br><span class=\"line\">    count: <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mutations: &#123;</span><br><span class=\"line\">    <span class=\"comment\">//无提交荷载</span></span><br><span class=\"line\">    increment(state) &#123;</span><br><span class=\"line\">        state.count++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//提交荷载</span></span><br><span class=\"line\">    incrementN(state, obj) &#123;</span><br><span class=\"line\">      state.count += obj.n</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>你不能直接调用一个 mutation handler。这个选项更像是事件注册：“当触发一个类型为 increment 的 mutation 时，调用此函数。”要唤醒一个 mutation handler，你需要以相应的 type 调用 store.commit 方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//无提交荷载</span></span><br><span class=\"line\">store.commit(<span class=\"string\">'increment'</span>)</span><br><span class=\"line\"><span class=\"comment\">//提交荷载</span></span><br><span class=\"line\">store.commit(<span class=\"string\">'incrementN'</span>, &#123;</span><br><span class=\"line\">    n: <span class=\"number\">100</span></span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n<p>我们也可以使用这样包含 type 属性的对象的提交方式。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">store.commit(&#123;</span><br><span class=\"line\">  type: <span class=\"string\">'incrementN'</span>,</span><br><span class=\"line\">  n: <span class=\"number\">10</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"Mutations-需遵守-Vue-的响应规则\"><a href=\"#Mutations-需遵守-Vue-的响应规则\" class=\"headerlink\" title=\"Mutations 需遵守 Vue 的响应规则\"></a>Mutations 需遵守 Vue 的响应规则</h3><ul>\n<li>最好提前在你的 store 中初始化好所有所需属性。</li>\n<li>当需要在对象上添加新属性时，你应该<br>使用 Vue.set(obj, ‘newProp’, 123), 或者<br>以新对象替换老对象。例如，利用对象展开运算符我们可以这样写state.obj = {…state.obj, newProp: 123 }</li>\n</ul>\n<h3 id=\"mapMutations-辅助函数\"><a href=\"#mapMutations-辅助函数\" class=\"headerlink\" title=\"mapMutations 辅助函数\"></a>mapMutations 辅助函数</h3><p>与其他辅助函数类似，你可以在组件中使用 this.$store.commit(‘xxx’) 提交 mutation，或者使用 mapMutations 辅助函数将组件中的 methods 映射为 store.commit 调用（需要在根节点注入 store）。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapMutations &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//..</span></span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    ...mapMutations([</span><br><span class=\"line\">      <span class=\"string\">'increment'</span> <span class=\"comment\">// 映射 this.increment() 为 this.$store.commit('increment')</span></span><br><span class=\"line\">    ]),</span><br><span class=\"line\">    ...mapMutations(&#123;</span><br><span class=\"line\">      add: <span class=\"string\">'increment'</span> <span class=\"comment\">// 映射 this.add() 为 this.$store.commit('increment')</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"actions\"><a href=\"#actions\" class=\"headerlink\" title=\"actions\"></a>actions</h2><p>Action 类似于 mutation，不同在于：</p>\n<ul>\n<li>Action 提交的是 mutation，而不是直接变更状态。</li>\n<li>Action 可以包含任意异步操作。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  state: &#123;</span><br><span class=\"line\">    count: <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mutations: &#123;</span><br><span class=\"line\">    increment (state) &#123;</span><br><span class=\"line\">      state.count++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  actions: &#123;</span><br><span class=\"line\">    increment (context) &#123;</span><br><span class=\"line\">      setInterval(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        context.commit(<span class=\"string\">'increment'</span>)</span><br><span class=\"line\">      &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>注意：Action 函数接受一个与 store 实例具有相同方法和属性的 context 对象，因此你可以调用 context.commit 提交一个 mutation，或者通过 context.state 和 context.getters 来获取 state 和 getters。</p>\n<h3 id=\"分发actions\"><a href=\"#分发actions\" class=\"headerlink\" title=\"分发actions\"></a>分发actions</h3><p>Action 通过 store.dispatch 方法触发：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">store.dispatch(<span class=\"string\">'increment'</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"其他与mutations类似的地方\"><a href=\"#其他与mutations类似的地方\" class=\"headerlink\" title=\"其他与mutations类似的地方\"></a>其他与mutations类似的地方</h3><p>Actions 支持同样的载荷方式和对象方式进行分发：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 以载荷形式分发</span></span><br><span class=\"line\">store.dispatch(<span class=\"string\">'incrementN'</span>, &#123;</span><br><span class=\"line\">  n: <span class=\"number\">10</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 以对象形式分发</span></span><br><span class=\"line\">store.dispatch(&#123;</span><br><span class=\"line\">  type: <span class=\"string\">'incrementN'</span>,</span><br><span class=\"line\">  n: <span class=\"number\">10</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"mapActions辅助函数\"><a href=\"#mapActions辅助函数\" class=\"headerlink\" title=\"mapActions辅助函数\"></a>mapActions辅助函数</h3><p>你在组件中使用 this.$store.dispatch(‘xxx’) 分发 action，或者使用 mapActions 辅助函数将组件的 methods 映射为 store.dispatch 调用（需要先在根节点注入 store）:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapActions &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//..</span></span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    ...mapActions([</span><br><span class=\"line\">      <span class=\"string\">'incrementN'</span> <span class=\"comment\">//映射 this.incrementN() 为 this.$store.dispatch('incrementN')</span></span><br><span class=\"line\">    ]),</span><br><span class=\"line\">    ...mapActions(&#123;</span><br><span class=\"line\">      add: <span class=\"string\">'incrementN'</span> <span class=\"comment\">//映射 this.add() 为 this.$store.dispatch('incrementN')</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Modules\"><a href=\"#Modules\" class=\"headerlink\" title=\"Modules\"></a>Modules</h2><p>使用单一状态树，导致应用的所有状态集中到一个很大的对象。但是，当应用变得很大时，store 对象会变得臃肿不堪。</p>\n<p>为了解决以上问题，Vuex 允许我们将 store 分割到模块（module）。每个模块拥有自己的 state、mutation、action、getters、甚至是嵌套子模块——从上至下进行类似的分割：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> moduleA = &#123;</span><br><span class=\"line\">  state: &#123; ... &#125;,</span><br><span class=\"line\">  mutations: &#123; ... &#125;,</span><br><span class=\"line\">  actions: &#123; ... &#125;,</span><br><span class=\"line\">  getters: &#123; ... &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> moduleB = &#123;</span><br><span class=\"line\">  state: &#123; ... &#125;,</span><br><span class=\"line\">  mutations: &#123; ... &#125;,</span><br><span class=\"line\">  actions: &#123; ... &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  modules: &#123;</span><br><span class=\"line\">    a: moduleA,</span><br><span class=\"line\">    b: moduleB</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">store.state.a <span class=\"comment\">// -&gt; moduleA 的状态</span></span><br><span class=\"line\">store.state.b <span class=\"comment\">// -&gt; moduleB 的状态</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"模块的局部状态\"><a href=\"#模块的局部状态\" class=\"headerlink\" title=\"模块的局部状态\"></a>模块的局部状态</h3><p>对于模块内部的 mutation 和 getter，接收的第一个参数是模块的局部状态,对于模块内部的 getter，根节点状态会作为第三个参数:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const moduleA &#x3D; &#123;</span><br><span class=\"line\">  state: &#123; count: 0 &#125;,</span><br><span class=\"line\">  mutations: &#123;</span><br><span class=\"line\">    increment (state) &#123;</span><br><span class=\"line\">      &#x2F;&#x2F; state 模块的局部状态</span><br><span class=\"line\">      state.count++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  getters: &#123;</span><br><span class=\"line\">    doubleCount (state) &#123;</span><br><span class=\"line\">      return state.count * 2</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    sumWithRootCount (state, getters, rootState) &#123;</span><br><span class=\"line\">      return state.count + rootState.count</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同样，对于模块内部的 action，context.state 是局部状态，根节点的状态是 context.rootState:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> moduleA = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  actions: &#123;</span><br><span class=\"line\">    incrementIfOddOnRootSum (context) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ((context.state.count + context.rootState.count) % <span class=\"number\">2</span> === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        commit(<span class=\"string\">'increment'</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://blog.csdn.net/weixin_35955795/article/details/57412181\" target=\"_blank\" rel=\"noopener\">原文链接</a></p>"},{"layout":"[post]","title":"HTTP协议","date":"2019-07-02T10:42:57.000Z","_content":"## HTTP协议\n### HTTP协议的主要特点\n1. 支持客户/服务器模式。\n2. 简单快速：客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有GET、HEAD、POST。每种方法规定了客户与服务器联系的类型不同。\n由于HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快。\n3. 灵活：HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记。\n4. 无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。\n5. 无状态：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。\n<!-- more -->\n\n### HTTP协议报文\n#### 请求报文\n\n##### 请求行\n请求行由请求方法字段、URL字段和HTTP协议版本字段3个字段组成，它们用空格分隔。比如 GET /data/info.html HTTP/1.1\n\n方法字段就是HTTP使用的请求方法，比如常见的GET/POST\n\n其中HTTP协议版本有两种：HTTP1.0/HTTP1.1 可以这样区别：\n\nHTTP1.0对于每个连接都只能传送一个请求和响应，请求就会关闭，HTTP1.0没有Host字段;而HTTP1.1在同一个连接中可以传送多个请求和响应，多个请求可以重叠和同时进行，HTTP1.1必须有Host字段。\n##### 请求头\nHTTP客户程序(例如浏览器)，向服务器发送请求的时候必须指明请求类型(一般是GET或者 POST)。如有必要，客户程序还可以选择发送其他的请求头。大多数请求头并不是必需的，但Content-Length除外。对于POST请求来说 Content-Length必须出现。\n\n常见的请求头字段含义：\n\nAccept： 浏览器可接受的MIME类型。\n\nAccept-Charset：浏览器可接受的字符集。\n\nAccept-Encoding：浏览器能够进行解码的数据编码方式，比如gzip。Servlet能够向支持gzip的浏览器返回经gzip编码的HTML页面。许多情形下这可以减少5到10倍的下载时间。\n\nAccept-Language：浏览器所希望的语言种类，当服务器能够提供一种以上的语言版本时要用到。\n\nAuthorization：授权信息，通常出现在对服务器发送的WWW-Authenticate头的应答中。\n\nContent-Length：表示请求消息正文的长度。\n\nHost： 客户机通过这个头告诉服务器，想访问的主机名。Host头域指定请求资源的Intenet主机和端口号，必须表示请求url的原始服务器或网关的位置。HTTP/1.1请求必须包含主机头域，否则系统会以400状态码返回。\n\nIf-Modified-Since：客户机通过这个头告诉服务器，资源的缓存时间。只有当所请求的内容在指定的时间后又经过修改才返回它，否则返回304“Not Modified”应答。\n\nReferer：客户机通过这个头告诉服务器，它是从哪个资源来访问服务器的(防盗链)。包含一个URL，用户从该URL代表的页面出发访问当前请求的页面。\n\nUser-Agent：User-Agent头域的内容包含发出请求的用户信息。浏览器类型，如果Servlet返回的内容与浏览器类型有关则该值非常有用。\n\nCookie：客户机通过这个头可以向服务器带数据，这是最重要的请求头信息之一。\n\nPragma：指定“no-cache”值表示服务器必须返回一个刷新后的文档，即使它是代理服务器而且已经有了页面的本地拷贝。\n\nFrom：请求发送者的email地址，由一些特殊的Web客户程序使用，浏览器不会用到它。\n\nConnection：处理完这次请求后是否断开连接还是继续保持连接。如果Servlet看到这里的值为“Keep- Alive”，或者看到请求使用的是HTTP 1.1(HTTP 1.1默认进行持久连接)，它就可以利用持久连接的优点，当页面包含多个元素时(例如Applet，图片)，显著地减少下载所需要的时间。要实现这一点，Servlet需要在应答中发送一个Content-Length头，最简单的实现方法是：先把内容写入 ByteArrayOutputStream，然后在正式写出内容之前计算它的大小。\n\nRange：Range头域可以请求实体的一个或者多个子范围。例如，\n\n表示头500个字节：bytes=0-499\n\n表示第二个500字节：bytes=500-999\n\n表示最后500个字节：bytes=-500\n\n表示500字节以后的范围：bytes=500-\n\n第一个和最后一个字节：bytes=0-0,-1\n\n同时指定几个范围：bytes=500-600,601-999\n\n但是服务器可以忽略此请求头，如果无条件GET包含Range请求头，响应会以状态码206(PartialContent)返回而不是以200 (OK)。\n\nUA-Pixels，UA-Color，UA-OS，UA-CPU：由某些版本的IE浏览器所发送的非标准的请求头，表示屏幕大小、颜色深度、操作系统和CPU类型。\n##### 空行\n它的作用是通过一个空行，告诉服务器请求头部到此为止。\n##### 请求体\n若方法字段是GET，则此项为空，没有数据\n\n若方法字段是POST,则通常来说此处放置的就是要提交的数据\n\n比如要使用POST方法提交一个表单，其中有user字段中数据为“admin”, password字段为123456，那么这里的请求数据就是 user=admin&password=123456，使用&来连接各个字段。\n\n![image](qingqiuti.png)\n\n![image](qingqiudemo.jpg)\n#### 响应报文\n##### 状态行\n响应行一般由协议版本、状态码及其描述组成 比如 HTTP/1.1 200 OK\n\n其中协议版本HTTP/1.1或者HTTP/1.0，200就是它的状态码，OK则为它的描述。\n\n//常见状态码：\n\n100~199：表示成功接收请求，要求客户端继续提交下一次请求才能完成整个处理过程。\n\n200~299：表示成功接收请求并已完成整个处理过程。常用200\n\n300~399：为完成请求，客户需进一步细化请求。例如：请求的资源已经移动一个新地址、常用302(意味着你请求我，我让你去找别人),307和304(我不给你这个资源，自己拿缓存)\n\n400~499：客户端的请求有错误，常用404(意味着你请求的资源在web服务器中没有)403(服务器拒绝访问，权限不够)\n\n500~599：服务器端出现错误，常用500\n\n[更加详细的状态码](https://baike.baidu.com/item/HTTP%E7%8A%B6%E6%80%81%E7%A0%81/5053660?fr=aladdin)\n##### 响应头\n响应头用于描述服务器的基本信息，以及数据的描述，服务器通过这些数据的描述信息，可以通知客户端如何处理等一会儿它回送的数据。\n\n设置HTTP响应头往往和状态码结合起来。例如，有好几个表示“文档位置已经改变”的状态代码都伴随着一个Location头，而401(Unauthorized)状态代码则必须伴随一个WWW-Authenticate头。然而，即使在没有设置特殊含义的状态代码时，指定应答头也是很有用的。应答头可以用来完成：设置Cookie，指定修改日期，指示浏览器按照指定的间隔刷新页面，声明文档的长度以便利用持久HTTP连接，……等等许多其他任务。\n\n常见的响应头字段含义：\n\nAllow：服务器支持哪些请求方法(如GET、POST等)。\n\nContent-Encoding：文档的编码(Encode)方法。只有在解码之后才可以得到Content-Type头指定的内容类型。利用gzip压缩文档能够显著地减少HTML文档的下载时间。Java的GZIPOutputStream可以很方便地进行gzip压缩，但只有Unix上的Netscape和Windows上的IE4、IE5才支持它。因此，Servlet应该通过查看Accept-Encoding头(即request.getHeader(“Accept- Encoding”))检查浏览器是否支持gzip，为支持gzip的浏览器返回经gzip压缩的HTML页面，为其他浏览器返回普通页面。\n\nContent-Length：表示内容长度。只有当浏览器使用持久HTTP连接时才需要这个数据。如果你想要利用持久连接的优势，可以把输出文档写入 ByteArrayOutputStram，完成后查看其大小，然后把该值放入Content-Length头，最后通过byteArrayStream.writeTo(response.getOutputStream()发送内容。\n\nContent- Type：表示后面的文档属于什么MIME类型。Servlet默认为text/plain，但通常需要显式地指定为text/html。由于经常要设置 Content-Type，因此HttpServletResponse提供了一个专用的方法setContentType。\n\nDate：当前的GMT时间，例如，Date:Mon,31Dec200104:25:57GMT。Date描述的时间表示世界标准时，换算成本地时间，需要知道用户所在的时区。你可以用setDateHeader来设置这个头以避免转换时间格式的麻烦。\n\nExpires：告诉浏览器把回送的资源缓存多长时间，-1或0则是不缓存。\n\nLast-Modified：文档的最后改动时间。客户可以通过If-Modified-Since请求头提供一个日期，该请求将被视为一个条件GET，只有改动时间迟于指定时间的文档才会返回，否则返回一个304(Not Modified)状态。Last-Modified也可用setDateHeader方法来设置。\n\nLocation：这个头配合302状态码使用，用于重定向接收者到一个新URI地址。表示客户应当到哪里去提取文档。Location通常不是直接设置的，而是通过HttpServletResponse的sendRedirect方法，该方法同时设置状态代码为302。\n\nRefresh：告诉浏览器隔多久刷新一次，以秒计。\n\nServer：服务器通过这个头告诉浏览器服务器的类型。Server响应头包含处理请求的原始服务器的软件信息。此域能包含多个产品标识和注释，产品标识一般按照重要性排序。Servlet一般不设置这个值，而是由Web服务器自己设置。\n\nSet-Cookie：设置和页面关联的Cookie。Servlet不应使用response.setHeader(“Set-Cookie”, …)，而是应使用HttpServletResponse提供的专用方法addCookie。\n\nTransfer-Encoding：告诉浏览器数据的传送格式。\n\nWWW-Authenticate：客户应该在Authorization头中提供什么类型的授权信息?在包含401(Unauthorized)状态行的应答中这个头是必需的。例如，response.setHeader(“WWW-Authenticate”, “BASIC realm=\\”executives\\”“)。注意Servlet一般不进行这方面的处理，而是让Web服务器的专门机制来控制受密码保护页面的访问。\n\n注：设置应答头最常用的方法是HttpServletResponse的setHeader，该方法有两个参数，分别表示应答头的名字和值。和设置状态代码相似，设置应答头应该在发送任何文档内容之前进行。\n\nsetDateHeader方法和setIntHeadr方法专门用来设置包含日期和整数值的应答头，前者避免了把Java时间转换为GMT时间字符串的麻烦，后者则避免了把整数转换为字符串的麻烦。\n\nHttpServletResponse还提供了许多设置\n\nsetContentType：设置Content-Type头。大多数Servlet都要用到这个方法。\n\nsetContentLength：设置Content-Length头。对于支持持久HTTP连接的浏览器来说，这个函数是很有用的。\n\naddCookie：设置一个Cookie(Servlet API中没有setCookie方法，因为应答往往包含多个Set-Cookie头)。\n##### 空行\n它的作用是通过一个空行，告诉服务器请求头部到此为止。\n##### 响应体\n响应体就是响应的消息体，如果是纯数据就是返回纯数据，如果请求的是HTML页面，那么返回的就是HTML代码，如果是JS就是JS代码，如此之类。\n\n![image](xiangying.jpg)\n\n### HTTP方法\n1. GET：获取资源\n2. POST：传输资源\n3. PUT：更新资源\n4. DELETE：删除资源\n5. HEAD：获取报文首部\n\n### POST请求和GET请求的区别\n- GET在浏览器回退时是无害的，而POST会再次提交请求。\n- GET产生的URL地址可以被收藏，而POST不可以。\n- GET请求会被浏览器主动缓存，而POST不会，除非手动设置。\n- GET请求只能进行url编码，而POST支持多种编码方式。\n- GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。\n- GET请求在URL中传送的参数是有长度限制的，而POST没有。\n- 对参数的数据类型，GET只接受ASCII字符，而POST没有限制。\n- GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。\n- GET参数通过URL传递，POST放在Request body中。\n\n### HTTP连接\n#### HTTP持久连接\nHTTP协议采用“请求-应答”模式，当使用普通模式，即非Keep-Alive模式时，每个请求/应答客户和服务器都要新建一个连接，完成后立即断开连接（HTTP协议为无连接的协议。\n\n当使用Keep-Alive模式（又称持久连接，连接重用）时，Keep-Alive功能使客户端到服务器端的连接持续有效，当出现服务器的后继请求时，Keep-Alive功能避免了建立或者重新建立连接。\n\n**只有http1.1开始支持持久连接**\n\n#### 管线化\n在使用持久连接的情况下，某个连接上的消息传递是这样的：  \n请求1->响应1->请求2->响应2->请求3->响应3\n\n管线化，则消息的传递变成这样：  \n请求1->请求2->请求3->响应1->响应2->响应3\n\n#### 管线化的特点\n1. 管线化机制通过持久连接完成，仅HTTP/1.1 支持此技术\n \n1. 只有GET和HEAD请求可以进行管线化，而POST则有所限制  \n2. 初次创建连接时不应启动管线机制，因为对方(服务器)不一定支持HTTP/1.1版本的协议  \n3. 管线化不会影响响应到来的顺序，如上面的例子所示，响应返回的顺序并未改变\n4. HTTP /1.1要求服务器端支持管线化，但并不要求服务器端也对响应进行管线化处理，只是要求对于管线化的请求不失败即可  \n5. 由于.上面提到的服务器端问题，开启管线化很可能并不会带来大幅度的性能提升，而且很多服务器端和代理程序对管线化的支持并不好，因此现代浏览器如**Chrome和Firefox** 默认并未开启管线化支持\n","source":"_posts/HTTP协议.md","raw":"---\nlayout: '[post]'\ntitle: HTTP协议\ndate: 2019-07-02 18:42:57\ntags: http\n---\n## HTTP协议\n### HTTP协议的主要特点\n1. 支持客户/服务器模式。\n2. 简单快速：客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有GET、HEAD、POST。每种方法规定了客户与服务器联系的类型不同。\n由于HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快。\n3. 灵活：HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记。\n4. 无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。\n5. 无状态：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。\n<!-- more -->\n\n### HTTP协议报文\n#### 请求报文\n\n##### 请求行\n请求行由请求方法字段、URL字段和HTTP协议版本字段3个字段组成，它们用空格分隔。比如 GET /data/info.html HTTP/1.1\n\n方法字段就是HTTP使用的请求方法，比如常见的GET/POST\n\n其中HTTP协议版本有两种：HTTP1.0/HTTP1.1 可以这样区别：\n\nHTTP1.0对于每个连接都只能传送一个请求和响应，请求就会关闭，HTTP1.0没有Host字段;而HTTP1.1在同一个连接中可以传送多个请求和响应，多个请求可以重叠和同时进行，HTTP1.1必须有Host字段。\n##### 请求头\nHTTP客户程序(例如浏览器)，向服务器发送请求的时候必须指明请求类型(一般是GET或者 POST)。如有必要，客户程序还可以选择发送其他的请求头。大多数请求头并不是必需的，但Content-Length除外。对于POST请求来说 Content-Length必须出现。\n\n常见的请求头字段含义：\n\nAccept： 浏览器可接受的MIME类型。\n\nAccept-Charset：浏览器可接受的字符集。\n\nAccept-Encoding：浏览器能够进行解码的数据编码方式，比如gzip。Servlet能够向支持gzip的浏览器返回经gzip编码的HTML页面。许多情形下这可以减少5到10倍的下载时间。\n\nAccept-Language：浏览器所希望的语言种类，当服务器能够提供一种以上的语言版本时要用到。\n\nAuthorization：授权信息，通常出现在对服务器发送的WWW-Authenticate头的应答中。\n\nContent-Length：表示请求消息正文的长度。\n\nHost： 客户机通过这个头告诉服务器，想访问的主机名。Host头域指定请求资源的Intenet主机和端口号，必须表示请求url的原始服务器或网关的位置。HTTP/1.1请求必须包含主机头域，否则系统会以400状态码返回。\n\nIf-Modified-Since：客户机通过这个头告诉服务器，资源的缓存时间。只有当所请求的内容在指定的时间后又经过修改才返回它，否则返回304“Not Modified”应答。\n\nReferer：客户机通过这个头告诉服务器，它是从哪个资源来访问服务器的(防盗链)。包含一个URL，用户从该URL代表的页面出发访问当前请求的页面。\n\nUser-Agent：User-Agent头域的内容包含发出请求的用户信息。浏览器类型，如果Servlet返回的内容与浏览器类型有关则该值非常有用。\n\nCookie：客户机通过这个头可以向服务器带数据，这是最重要的请求头信息之一。\n\nPragma：指定“no-cache”值表示服务器必须返回一个刷新后的文档，即使它是代理服务器而且已经有了页面的本地拷贝。\n\nFrom：请求发送者的email地址，由一些特殊的Web客户程序使用，浏览器不会用到它。\n\nConnection：处理完这次请求后是否断开连接还是继续保持连接。如果Servlet看到这里的值为“Keep- Alive”，或者看到请求使用的是HTTP 1.1(HTTP 1.1默认进行持久连接)，它就可以利用持久连接的优点，当页面包含多个元素时(例如Applet，图片)，显著地减少下载所需要的时间。要实现这一点，Servlet需要在应答中发送一个Content-Length头，最简单的实现方法是：先把内容写入 ByteArrayOutputStream，然后在正式写出内容之前计算它的大小。\n\nRange：Range头域可以请求实体的一个或者多个子范围。例如，\n\n表示头500个字节：bytes=0-499\n\n表示第二个500字节：bytes=500-999\n\n表示最后500个字节：bytes=-500\n\n表示500字节以后的范围：bytes=500-\n\n第一个和最后一个字节：bytes=0-0,-1\n\n同时指定几个范围：bytes=500-600,601-999\n\n但是服务器可以忽略此请求头，如果无条件GET包含Range请求头，响应会以状态码206(PartialContent)返回而不是以200 (OK)。\n\nUA-Pixels，UA-Color，UA-OS，UA-CPU：由某些版本的IE浏览器所发送的非标准的请求头，表示屏幕大小、颜色深度、操作系统和CPU类型。\n##### 空行\n它的作用是通过一个空行，告诉服务器请求头部到此为止。\n##### 请求体\n若方法字段是GET，则此项为空，没有数据\n\n若方法字段是POST,则通常来说此处放置的就是要提交的数据\n\n比如要使用POST方法提交一个表单，其中有user字段中数据为“admin”, password字段为123456，那么这里的请求数据就是 user=admin&password=123456，使用&来连接各个字段。\n\n![image](qingqiuti.png)\n\n![image](qingqiudemo.jpg)\n#### 响应报文\n##### 状态行\n响应行一般由协议版本、状态码及其描述组成 比如 HTTP/1.1 200 OK\n\n其中协议版本HTTP/1.1或者HTTP/1.0，200就是它的状态码，OK则为它的描述。\n\n//常见状态码：\n\n100~199：表示成功接收请求，要求客户端继续提交下一次请求才能完成整个处理过程。\n\n200~299：表示成功接收请求并已完成整个处理过程。常用200\n\n300~399：为完成请求，客户需进一步细化请求。例如：请求的资源已经移动一个新地址、常用302(意味着你请求我，我让你去找别人),307和304(我不给你这个资源，自己拿缓存)\n\n400~499：客户端的请求有错误，常用404(意味着你请求的资源在web服务器中没有)403(服务器拒绝访问，权限不够)\n\n500~599：服务器端出现错误，常用500\n\n[更加详细的状态码](https://baike.baidu.com/item/HTTP%E7%8A%B6%E6%80%81%E7%A0%81/5053660?fr=aladdin)\n##### 响应头\n响应头用于描述服务器的基本信息，以及数据的描述，服务器通过这些数据的描述信息，可以通知客户端如何处理等一会儿它回送的数据。\n\n设置HTTP响应头往往和状态码结合起来。例如，有好几个表示“文档位置已经改变”的状态代码都伴随着一个Location头，而401(Unauthorized)状态代码则必须伴随一个WWW-Authenticate头。然而，即使在没有设置特殊含义的状态代码时，指定应答头也是很有用的。应答头可以用来完成：设置Cookie，指定修改日期，指示浏览器按照指定的间隔刷新页面，声明文档的长度以便利用持久HTTP连接，……等等许多其他任务。\n\n常见的响应头字段含义：\n\nAllow：服务器支持哪些请求方法(如GET、POST等)。\n\nContent-Encoding：文档的编码(Encode)方法。只有在解码之后才可以得到Content-Type头指定的内容类型。利用gzip压缩文档能够显著地减少HTML文档的下载时间。Java的GZIPOutputStream可以很方便地进行gzip压缩，但只有Unix上的Netscape和Windows上的IE4、IE5才支持它。因此，Servlet应该通过查看Accept-Encoding头(即request.getHeader(“Accept- Encoding”))检查浏览器是否支持gzip，为支持gzip的浏览器返回经gzip压缩的HTML页面，为其他浏览器返回普通页面。\n\nContent-Length：表示内容长度。只有当浏览器使用持久HTTP连接时才需要这个数据。如果你想要利用持久连接的优势，可以把输出文档写入 ByteArrayOutputStram，完成后查看其大小，然后把该值放入Content-Length头，最后通过byteArrayStream.writeTo(response.getOutputStream()发送内容。\n\nContent- Type：表示后面的文档属于什么MIME类型。Servlet默认为text/plain，但通常需要显式地指定为text/html。由于经常要设置 Content-Type，因此HttpServletResponse提供了一个专用的方法setContentType。\n\nDate：当前的GMT时间，例如，Date:Mon,31Dec200104:25:57GMT。Date描述的时间表示世界标准时，换算成本地时间，需要知道用户所在的时区。你可以用setDateHeader来设置这个头以避免转换时间格式的麻烦。\n\nExpires：告诉浏览器把回送的资源缓存多长时间，-1或0则是不缓存。\n\nLast-Modified：文档的最后改动时间。客户可以通过If-Modified-Since请求头提供一个日期，该请求将被视为一个条件GET，只有改动时间迟于指定时间的文档才会返回，否则返回一个304(Not Modified)状态。Last-Modified也可用setDateHeader方法来设置。\n\nLocation：这个头配合302状态码使用，用于重定向接收者到一个新URI地址。表示客户应当到哪里去提取文档。Location通常不是直接设置的，而是通过HttpServletResponse的sendRedirect方法，该方法同时设置状态代码为302。\n\nRefresh：告诉浏览器隔多久刷新一次，以秒计。\n\nServer：服务器通过这个头告诉浏览器服务器的类型。Server响应头包含处理请求的原始服务器的软件信息。此域能包含多个产品标识和注释，产品标识一般按照重要性排序。Servlet一般不设置这个值，而是由Web服务器自己设置。\n\nSet-Cookie：设置和页面关联的Cookie。Servlet不应使用response.setHeader(“Set-Cookie”, …)，而是应使用HttpServletResponse提供的专用方法addCookie。\n\nTransfer-Encoding：告诉浏览器数据的传送格式。\n\nWWW-Authenticate：客户应该在Authorization头中提供什么类型的授权信息?在包含401(Unauthorized)状态行的应答中这个头是必需的。例如，response.setHeader(“WWW-Authenticate”, “BASIC realm=\\”executives\\”“)。注意Servlet一般不进行这方面的处理，而是让Web服务器的专门机制来控制受密码保护页面的访问。\n\n注：设置应答头最常用的方法是HttpServletResponse的setHeader，该方法有两个参数，分别表示应答头的名字和值。和设置状态代码相似，设置应答头应该在发送任何文档内容之前进行。\n\nsetDateHeader方法和setIntHeadr方法专门用来设置包含日期和整数值的应答头，前者避免了把Java时间转换为GMT时间字符串的麻烦，后者则避免了把整数转换为字符串的麻烦。\n\nHttpServletResponse还提供了许多设置\n\nsetContentType：设置Content-Type头。大多数Servlet都要用到这个方法。\n\nsetContentLength：设置Content-Length头。对于支持持久HTTP连接的浏览器来说，这个函数是很有用的。\n\naddCookie：设置一个Cookie(Servlet API中没有setCookie方法，因为应答往往包含多个Set-Cookie头)。\n##### 空行\n它的作用是通过一个空行，告诉服务器请求头部到此为止。\n##### 响应体\n响应体就是响应的消息体，如果是纯数据就是返回纯数据，如果请求的是HTML页面，那么返回的就是HTML代码，如果是JS就是JS代码，如此之类。\n\n![image](xiangying.jpg)\n\n### HTTP方法\n1. GET：获取资源\n2. POST：传输资源\n3. PUT：更新资源\n4. DELETE：删除资源\n5. HEAD：获取报文首部\n\n### POST请求和GET请求的区别\n- GET在浏览器回退时是无害的，而POST会再次提交请求。\n- GET产生的URL地址可以被收藏，而POST不可以。\n- GET请求会被浏览器主动缓存，而POST不会，除非手动设置。\n- GET请求只能进行url编码，而POST支持多种编码方式。\n- GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。\n- GET请求在URL中传送的参数是有长度限制的，而POST没有。\n- 对参数的数据类型，GET只接受ASCII字符，而POST没有限制。\n- GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。\n- GET参数通过URL传递，POST放在Request body中。\n\n### HTTP连接\n#### HTTP持久连接\nHTTP协议采用“请求-应答”模式，当使用普通模式，即非Keep-Alive模式时，每个请求/应答客户和服务器都要新建一个连接，完成后立即断开连接（HTTP协议为无连接的协议。\n\n当使用Keep-Alive模式（又称持久连接，连接重用）时，Keep-Alive功能使客户端到服务器端的连接持续有效，当出现服务器的后继请求时，Keep-Alive功能避免了建立或者重新建立连接。\n\n**只有http1.1开始支持持久连接**\n\n#### 管线化\n在使用持久连接的情况下，某个连接上的消息传递是这样的：  \n请求1->响应1->请求2->响应2->请求3->响应3\n\n管线化，则消息的传递变成这样：  \n请求1->请求2->请求3->响应1->响应2->响应3\n\n#### 管线化的特点\n1. 管线化机制通过持久连接完成，仅HTTP/1.1 支持此技术\n \n1. 只有GET和HEAD请求可以进行管线化，而POST则有所限制  \n2. 初次创建连接时不应启动管线机制，因为对方(服务器)不一定支持HTTP/1.1版本的协议  \n3. 管线化不会影响响应到来的顺序，如上面的例子所示，响应返回的顺序并未改变\n4. HTTP /1.1要求服务器端支持管线化，但并不要求服务器端也对响应进行管线化处理，只是要求对于管线化的请求不失败即可  \n5. 由于.上面提到的服务器端问题，开启管线化很可能并不会带来大幅度的性能提升，而且很多服务器端和代理程序对管线化的支持并不好，因此现代浏览器如**Chrome和Firefox** 默认并未开启管线化支持\n","slug":"HTTP协议","published":1,"updated":"2020-03-13T10:40:07.000Z","comments":1,"photos":[],"link":"","_id":"ckbftlm5y000j7w2p3c6mfzp8","content":"<h2 id=\"HTTP协议\"><a href=\"#HTTP协议\" class=\"headerlink\" title=\"HTTP协议\"></a>HTTP协议</h2><h3 id=\"HTTP协议的主要特点\"><a href=\"#HTTP协议的主要特点\" class=\"headerlink\" title=\"HTTP协议的主要特点\"></a>HTTP协议的主要特点</h3><ol>\n<li>支持客户/服务器模式。</li>\n<li>简单快速：客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有GET、HEAD、POST。每种方法规定了客户与服务器联系的类型不同。<br>由于HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快。</li>\n<li>灵活：HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记。</li>\n<li>无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。</li>\n<li>无状态：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。<a id=\"more\"></a>\n\n</li>\n</ol>\n<h3 id=\"HTTP协议报文\"><a href=\"#HTTP协议报文\" class=\"headerlink\" title=\"HTTP协议报文\"></a>HTTP协议报文</h3><h4 id=\"请求报文\"><a href=\"#请求报文\" class=\"headerlink\" title=\"请求报文\"></a>请求报文</h4><h5 id=\"请求行\"><a href=\"#请求行\" class=\"headerlink\" title=\"请求行\"></a>请求行</h5><p>请求行由请求方法字段、URL字段和HTTP协议版本字段3个字段组成，它们用空格分隔。比如 GET /data/info.html HTTP/1.1</p>\n<p>方法字段就是HTTP使用的请求方法，比如常见的GET/POST</p>\n<p>其中HTTP协议版本有两种：HTTP1.0/HTTP1.1 可以这样区别：</p>\n<p>HTTP1.0对于每个连接都只能传送一个请求和响应，请求就会关闭，HTTP1.0没有Host字段;而HTTP1.1在同一个连接中可以传送多个请求和响应，多个请求可以重叠和同时进行，HTTP1.1必须有Host字段。</p>\n<h5 id=\"请求头\"><a href=\"#请求头\" class=\"headerlink\" title=\"请求头\"></a>请求头</h5><p>HTTP客户程序(例如浏览器)，向服务器发送请求的时候必须指明请求类型(一般是GET或者 POST)。如有必要，客户程序还可以选择发送其他的请求头。大多数请求头并不是必需的，但Content-Length除外。对于POST请求来说 Content-Length必须出现。</p>\n<p>常见的请求头字段含义：</p>\n<p>Accept： 浏览器可接受的MIME类型。</p>\n<p>Accept-Charset：浏览器可接受的字符集。</p>\n<p>Accept-Encoding：浏览器能够进行解码的数据编码方式，比如gzip。Servlet能够向支持gzip的浏览器返回经gzip编码的HTML页面。许多情形下这可以减少5到10倍的下载时间。</p>\n<p>Accept-Language：浏览器所希望的语言种类，当服务器能够提供一种以上的语言版本时要用到。</p>\n<p>Authorization：授权信息，通常出现在对服务器发送的WWW-Authenticate头的应答中。</p>\n<p>Content-Length：表示请求消息正文的长度。</p>\n<p>Host： 客户机通过这个头告诉服务器，想访问的主机名。Host头域指定请求资源的Intenet主机和端口号，必须表示请求url的原始服务器或网关的位置。HTTP/1.1请求必须包含主机头域，否则系统会以400状态码返回。</p>\n<p>If-Modified-Since：客户机通过这个头告诉服务器，资源的缓存时间。只有当所请求的内容在指定的时间后又经过修改才返回它，否则返回304“Not Modified”应答。</p>\n<p>Referer：客户机通过这个头告诉服务器，它是从哪个资源来访问服务器的(防盗链)。包含一个URL，用户从该URL代表的页面出发访问当前请求的页面。</p>\n<p>User-Agent：User-Agent头域的内容包含发出请求的用户信息。浏览器类型，如果Servlet返回的内容与浏览器类型有关则该值非常有用。</p>\n<p>Cookie：客户机通过这个头可以向服务器带数据，这是最重要的请求头信息之一。</p>\n<p>Pragma：指定“no-cache”值表示服务器必须返回一个刷新后的文档，即使它是代理服务器而且已经有了页面的本地拷贝。</p>\n<p>From：请求发送者的email地址，由一些特殊的Web客户程序使用，浏览器不会用到它。</p>\n<p>Connection：处理完这次请求后是否断开连接还是继续保持连接。如果Servlet看到这里的值为“Keep- Alive”，或者看到请求使用的是HTTP 1.1(HTTP 1.1默认进行持久连接)，它就可以利用持久连接的优点，当页面包含多个元素时(例如Applet，图片)，显著地减少下载所需要的时间。要实现这一点，Servlet需要在应答中发送一个Content-Length头，最简单的实现方法是：先把内容写入 ByteArrayOutputStream，然后在正式写出内容之前计算它的大小。</p>\n<p>Range：Range头域可以请求实体的一个或者多个子范围。例如，</p>\n<p>表示头500个字节：bytes=0-499</p>\n<p>表示第二个500字节：bytes=500-999</p>\n<p>表示最后500个字节：bytes=-500</p>\n<p>表示500字节以后的范围：bytes=500-</p>\n<p>第一个和最后一个字节：bytes=0-0,-1</p>\n<p>同时指定几个范围：bytes=500-600,601-999</p>\n<p>但是服务器可以忽略此请求头，如果无条件GET包含Range请求头，响应会以状态码206(PartialContent)返回而不是以200 (OK)。</p>\n<p>UA-Pixels，UA-Color，UA-OS，UA-CPU：由某些版本的IE浏览器所发送的非标准的请求头，表示屏幕大小、颜色深度、操作系统和CPU类型。</p>\n<h5 id=\"空行\"><a href=\"#空行\" class=\"headerlink\" title=\"空行\"></a>空行</h5><p>它的作用是通过一个空行，告诉服务器请求头部到此为止。</p>\n<h5 id=\"请求体\"><a href=\"#请求体\" class=\"headerlink\" title=\"请求体\"></a>请求体</h5><p>若方法字段是GET，则此项为空，没有数据</p>\n<p>若方法字段是POST,则通常来说此处放置的就是要提交的数据</p>\n<p>比如要使用POST方法提交一个表单，其中有user字段中数据为“admin”, password字段为123456，那么这里的请求数据就是 user=admin&amp;password=123456，使用&amp;来连接各个字段。</p>\n<p><img src=\"/2019/07/02/HTTP%E5%8D%8F%E8%AE%AE/qingqiuti.png\" alt=\"image\"></p>\n<p><img src=\"/2019/07/02/HTTP%E5%8D%8F%E8%AE%AE/qingqiudemo.jpg\" alt=\"image\"></p>\n<h4 id=\"响应报文\"><a href=\"#响应报文\" class=\"headerlink\" title=\"响应报文\"></a>响应报文</h4><h5 id=\"状态行\"><a href=\"#状态行\" class=\"headerlink\" title=\"状态行\"></a>状态行</h5><p>响应行一般由协议版本、状态码及其描述组成 比如 HTTP/1.1 200 OK</p>\n<p>其中协议版本HTTP/1.1或者HTTP/1.0，200就是它的状态码，OK则为它的描述。</p>\n<p>//常见状态码：</p>\n<p>100~199：表示成功接收请求，要求客户端继续提交下一次请求才能完成整个处理过程。</p>\n<p>200~299：表示成功接收请求并已完成整个处理过程。常用200</p>\n<p>300~399：为完成请求，客户需进一步细化请求。例如：请求的资源已经移动一个新地址、常用302(意味着你请求我，我让你去找别人),307和304(我不给你这个资源，自己拿缓存)</p>\n<p>400~499：客户端的请求有错误，常用404(意味着你请求的资源在web服务器中没有)403(服务器拒绝访问，权限不够)</p>\n<p>500~599：服务器端出现错误，常用500</p>\n<p><a href=\"https://baike.baidu.com/item/HTTP%E7%8A%B6%E6%80%81%E7%A0%81/5053660?fr=aladdin\" target=\"_blank\" rel=\"noopener\">更加详细的状态码</a></p>\n<h5 id=\"响应头\"><a href=\"#响应头\" class=\"headerlink\" title=\"响应头\"></a>响应头</h5><p>响应头用于描述服务器的基本信息，以及数据的描述，服务器通过这些数据的描述信息，可以通知客户端如何处理等一会儿它回送的数据。</p>\n<p>设置HTTP响应头往往和状态码结合起来。例如，有好几个表示“文档位置已经改变”的状态代码都伴随着一个Location头，而401(Unauthorized)状态代码则必须伴随一个WWW-Authenticate头。然而，即使在没有设置特殊含义的状态代码时，指定应答头也是很有用的。应答头可以用来完成：设置Cookie，指定修改日期，指示浏览器按照指定的间隔刷新页面，声明文档的长度以便利用持久HTTP连接，……等等许多其他任务。</p>\n<p>常见的响应头字段含义：</p>\n<p>Allow：服务器支持哪些请求方法(如GET、POST等)。</p>\n<p>Content-Encoding：文档的编码(Encode)方法。只有在解码之后才可以得到Content-Type头指定的内容类型。利用gzip压缩文档能够显著地减少HTML文档的下载时间。Java的GZIPOutputStream可以很方便地进行gzip压缩，但只有Unix上的Netscape和Windows上的IE4、IE5才支持它。因此，Servlet应该通过查看Accept-Encoding头(即request.getHeader(“Accept- Encoding”))检查浏览器是否支持gzip，为支持gzip的浏览器返回经gzip压缩的HTML页面，为其他浏览器返回普通页面。</p>\n<p>Content-Length：表示内容长度。只有当浏览器使用持久HTTP连接时才需要这个数据。如果你想要利用持久连接的优势，可以把输出文档写入 ByteArrayOutputStram，完成后查看其大小，然后把该值放入Content-Length头，最后通过byteArrayStream.writeTo(response.getOutputStream()发送内容。</p>\n<p>Content- Type：表示后面的文档属于什么MIME类型。Servlet默认为text/plain，但通常需要显式地指定为text/html。由于经常要设置 Content-Type，因此HttpServletResponse提供了一个专用的方法setContentType。</p>\n<p>Date：当前的GMT时间，例如，Date:Mon,31Dec200104:25:57GMT。Date描述的时间表示世界标准时，换算成本地时间，需要知道用户所在的时区。你可以用setDateHeader来设置这个头以避免转换时间格式的麻烦。</p>\n<p>Expires：告诉浏览器把回送的资源缓存多长时间，-1或0则是不缓存。</p>\n<p>Last-Modified：文档的最后改动时间。客户可以通过If-Modified-Since请求头提供一个日期，该请求将被视为一个条件GET，只有改动时间迟于指定时间的文档才会返回，否则返回一个304(Not Modified)状态。Last-Modified也可用setDateHeader方法来设置。</p>\n<p>Location：这个头配合302状态码使用，用于重定向接收者到一个新URI地址。表示客户应当到哪里去提取文档。Location通常不是直接设置的，而是通过HttpServletResponse的sendRedirect方法，该方法同时设置状态代码为302。</p>\n<p>Refresh：告诉浏览器隔多久刷新一次，以秒计。</p>\n<p>Server：服务器通过这个头告诉浏览器服务器的类型。Server响应头包含处理请求的原始服务器的软件信息。此域能包含多个产品标识和注释，产品标识一般按照重要性排序。Servlet一般不设置这个值，而是由Web服务器自己设置。</p>\n<p>Set-Cookie：设置和页面关联的Cookie。Servlet不应使用response.setHeader(“Set-Cookie”, …)，而是应使用HttpServletResponse提供的专用方法addCookie。</p>\n<p>Transfer-Encoding：告诉浏览器数据的传送格式。</p>\n<p>WWW-Authenticate：客户应该在Authorization头中提供什么类型的授权信息?在包含401(Unauthorized)状态行的应答中这个头是必需的。例如，response.setHeader(“WWW-Authenticate”, “BASIC realm=\\”executives\\”“)。注意Servlet一般不进行这方面的处理，而是让Web服务器的专门机制来控制受密码保护页面的访问。</p>\n<p>注：设置应答头最常用的方法是HttpServletResponse的setHeader，该方法有两个参数，分别表示应答头的名字和值。和设置状态代码相似，设置应答头应该在发送任何文档内容之前进行。</p>\n<p>setDateHeader方法和setIntHeadr方法专门用来设置包含日期和整数值的应答头，前者避免了把Java时间转换为GMT时间字符串的麻烦，后者则避免了把整数转换为字符串的麻烦。</p>\n<p>HttpServletResponse还提供了许多设置</p>\n<p>setContentType：设置Content-Type头。大多数Servlet都要用到这个方法。</p>\n<p>setContentLength：设置Content-Length头。对于支持持久HTTP连接的浏览器来说，这个函数是很有用的。</p>\n<p>addCookie：设置一个Cookie(Servlet API中没有setCookie方法，因为应答往往包含多个Set-Cookie头)。</p>\n<h5 id=\"空行-1\"><a href=\"#空行-1\" class=\"headerlink\" title=\"空行\"></a>空行</h5><p>它的作用是通过一个空行，告诉服务器请求头部到此为止。</p>\n<h5 id=\"响应体\"><a href=\"#响应体\" class=\"headerlink\" title=\"响应体\"></a>响应体</h5><p>响应体就是响应的消息体，如果是纯数据就是返回纯数据，如果请求的是HTML页面，那么返回的就是HTML代码，如果是JS就是JS代码，如此之类。</p>\n<p><img src=\"/2019/07/02/HTTP%E5%8D%8F%E8%AE%AE/xiangying.jpg\" alt=\"image\"></p>\n<h3 id=\"HTTP方法\"><a href=\"#HTTP方法\" class=\"headerlink\" title=\"HTTP方法\"></a>HTTP方法</h3><ol>\n<li>GET：获取资源</li>\n<li>POST：传输资源</li>\n<li>PUT：更新资源</li>\n<li>DELETE：删除资源</li>\n<li>HEAD：获取报文首部</li>\n</ol>\n<h3 id=\"POST请求和GET请求的区别\"><a href=\"#POST请求和GET请求的区别\" class=\"headerlink\" title=\"POST请求和GET请求的区别\"></a>POST请求和GET请求的区别</h3><ul>\n<li>GET在浏览器回退时是无害的，而POST会再次提交请求。</li>\n<li>GET产生的URL地址可以被收藏，而POST不可以。</li>\n<li>GET请求会被浏览器主动缓存，而POST不会，除非手动设置。</li>\n<li>GET请求只能进行url编码，而POST支持多种编码方式。</li>\n<li>GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。</li>\n<li>GET请求在URL中传送的参数是有长度限制的，而POST没有。</li>\n<li>对参数的数据类型，GET只接受ASCII字符，而POST没有限制。</li>\n<li>GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。</li>\n<li>GET参数通过URL传递，POST放在Request body中。</li>\n</ul>\n<h3 id=\"HTTP连接\"><a href=\"#HTTP连接\" class=\"headerlink\" title=\"HTTP连接\"></a>HTTP连接</h3><h4 id=\"HTTP持久连接\"><a href=\"#HTTP持久连接\" class=\"headerlink\" title=\"HTTP持久连接\"></a>HTTP持久连接</h4><p>HTTP协议采用“请求-应答”模式，当使用普通模式，即非Keep-Alive模式时，每个请求/应答客户和服务器都要新建一个连接，完成后立即断开连接（HTTP协议为无连接的协议。</p>\n<p>当使用Keep-Alive模式（又称持久连接，连接重用）时，Keep-Alive功能使客户端到服务器端的连接持续有效，当出现服务器的后继请求时，Keep-Alive功能避免了建立或者重新建立连接。</p>\n<p><strong>只有http1.1开始支持持久连接</strong></p>\n<h4 id=\"管线化\"><a href=\"#管线化\" class=\"headerlink\" title=\"管线化\"></a>管线化</h4><p>在使用持久连接的情况下，某个连接上的消息传递是这样的：<br>请求1-&gt;响应1-&gt;请求2-&gt;响应2-&gt;请求3-&gt;响应3</p>\n<p>管线化，则消息的传递变成这样：<br>请求1-&gt;请求2-&gt;请求3-&gt;响应1-&gt;响应2-&gt;响应3</p>\n<h4 id=\"管线化的特点\"><a href=\"#管线化的特点\" class=\"headerlink\" title=\"管线化的特点\"></a>管线化的特点</h4><ol>\n<li><p>管线化机制通过持久连接完成，仅HTTP/1.1 支持此技术</p>\n</li>\n<li><p>只有GET和HEAD请求可以进行管线化，而POST则有所限制  </p>\n</li>\n<li><p>初次创建连接时不应启动管线机制，因为对方(服务器)不一定支持HTTP/1.1版本的协议  </p>\n</li>\n<li><p>管线化不会影响响应到来的顺序，如上面的例子所示，响应返回的顺序并未改变</p>\n</li>\n<li><p>HTTP /1.1要求服务器端支持管线化，但并不要求服务器端也对响应进行管线化处理，只是要求对于管线化的请求不失败即可  </p>\n</li>\n<li><p>由于.上面提到的服务器端问题，开启管线化很可能并不会带来大幅度的性能提升，而且很多服务器端和代理程序对管线化的支持并不好，因此现代浏览器如<strong>Chrome和Firefox</strong> 默认并未开启管线化支持</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h2 id=\"HTTP协议\"><a href=\"#HTTP协议\" class=\"headerlink\" title=\"HTTP协议\"></a>HTTP协议</h2><h3 id=\"HTTP协议的主要特点\"><a href=\"#HTTP协议的主要特点\" class=\"headerlink\" title=\"HTTP协议的主要特点\"></a>HTTP协议的主要特点</h3><ol>\n<li>支持客户/服务器模式。</li>\n<li>简单快速：客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有GET、HEAD、POST。每种方法规定了客户与服务器联系的类型不同。<br>由于HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快。</li>\n<li>灵活：HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记。</li>\n<li>无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。</li>\n<li>无状态：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。</li></ol>","more":"\n\n<h3 id=\"HTTP协议报文\"><a href=\"#HTTP协议报文\" class=\"headerlink\" title=\"HTTP协议报文\"></a>HTTP协议报文</h3><h4 id=\"请求报文\"><a href=\"#请求报文\" class=\"headerlink\" title=\"请求报文\"></a>请求报文</h4><h5 id=\"请求行\"><a href=\"#请求行\" class=\"headerlink\" title=\"请求行\"></a>请求行</h5><p>请求行由请求方法字段、URL字段和HTTP协议版本字段3个字段组成，它们用空格分隔。比如 GET /data/info.html HTTP/1.1</p>\n<p>方法字段就是HTTP使用的请求方法，比如常见的GET/POST</p>\n<p>其中HTTP协议版本有两种：HTTP1.0/HTTP1.1 可以这样区别：</p>\n<p>HTTP1.0对于每个连接都只能传送一个请求和响应，请求就会关闭，HTTP1.0没有Host字段;而HTTP1.1在同一个连接中可以传送多个请求和响应，多个请求可以重叠和同时进行，HTTP1.1必须有Host字段。</p>\n<h5 id=\"请求头\"><a href=\"#请求头\" class=\"headerlink\" title=\"请求头\"></a>请求头</h5><p>HTTP客户程序(例如浏览器)，向服务器发送请求的时候必须指明请求类型(一般是GET或者 POST)。如有必要，客户程序还可以选择发送其他的请求头。大多数请求头并不是必需的，但Content-Length除外。对于POST请求来说 Content-Length必须出现。</p>\n<p>常见的请求头字段含义：</p>\n<p>Accept： 浏览器可接受的MIME类型。</p>\n<p>Accept-Charset：浏览器可接受的字符集。</p>\n<p>Accept-Encoding：浏览器能够进行解码的数据编码方式，比如gzip。Servlet能够向支持gzip的浏览器返回经gzip编码的HTML页面。许多情形下这可以减少5到10倍的下载时间。</p>\n<p>Accept-Language：浏览器所希望的语言种类，当服务器能够提供一种以上的语言版本时要用到。</p>\n<p>Authorization：授权信息，通常出现在对服务器发送的WWW-Authenticate头的应答中。</p>\n<p>Content-Length：表示请求消息正文的长度。</p>\n<p>Host： 客户机通过这个头告诉服务器，想访问的主机名。Host头域指定请求资源的Intenet主机和端口号，必须表示请求url的原始服务器或网关的位置。HTTP/1.1请求必须包含主机头域，否则系统会以400状态码返回。</p>\n<p>If-Modified-Since：客户机通过这个头告诉服务器，资源的缓存时间。只有当所请求的内容在指定的时间后又经过修改才返回它，否则返回304“Not Modified”应答。</p>\n<p>Referer：客户机通过这个头告诉服务器，它是从哪个资源来访问服务器的(防盗链)。包含一个URL，用户从该URL代表的页面出发访问当前请求的页面。</p>\n<p>User-Agent：User-Agent头域的内容包含发出请求的用户信息。浏览器类型，如果Servlet返回的内容与浏览器类型有关则该值非常有用。</p>\n<p>Cookie：客户机通过这个头可以向服务器带数据，这是最重要的请求头信息之一。</p>\n<p>Pragma：指定“no-cache”值表示服务器必须返回一个刷新后的文档，即使它是代理服务器而且已经有了页面的本地拷贝。</p>\n<p>From：请求发送者的email地址，由一些特殊的Web客户程序使用，浏览器不会用到它。</p>\n<p>Connection：处理完这次请求后是否断开连接还是继续保持连接。如果Servlet看到这里的值为“Keep- Alive”，或者看到请求使用的是HTTP 1.1(HTTP 1.1默认进行持久连接)，它就可以利用持久连接的优点，当页面包含多个元素时(例如Applet，图片)，显著地减少下载所需要的时间。要实现这一点，Servlet需要在应答中发送一个Content-Length头，最简单的实现方法是：先把内容写入 ByteArrayOutputStream，然后在正式写出内容之前计算它的大小。</p>\n<p>Range：Range头域可以请求实体的一个或者多个子范围。例如，</p>\n<p>表示头500个字节：bytes=0-499</p>\n<p>表示第二个500字节：bytes=500-999</p>\n<p>表示最后500个字节：bytes=-500</p>\n<p>表示500字节以后的范围：bytes=500-</p>\n<p>第一个和最后一个字节：bytes=0-0,-1</p>\n<p>同时指定几个范围：bytes=500-600,601-999</p>\n<p>但是服务器可以忽略此请求头，如果无条件GET包含Range请求头，响应会以状态码206(PartialContent)返回而不是以200 (OK)。</p>\n<p>UA-Pixels，UA-Color，UA-OS，UA-CPU：由某些版本的IE浏览器所发送的非标准的请求头，表示屏幕大小、颜色深度、操作系统和CPU类型。</p>\n<h5 id=\"空行\"><a href=\"#空行\" class=\"headerlink\" title=\"空行\"></a>空行</h5><p>它的作用是通过一个空行，告诉服务器请求头部到此为止。</p>\n<h5 id=\"请求体\"><a href=\"#请求体\" class=\"headerlink\" title=\"请求体\"></a>请求体</h5><p>若方法字段是GET，则此项为空，没有数据</p>\n<p>若方法字段是POST,则通常来说此处放置的就是要提交的数据</p>\n<p>比如要使用POST方法提交一个表单，其中有user字段中数据为“admin”, password字段为123456，那么这里的请求数据就是 user=admin&amp;password=123456，使用&amp;来连接各个字段。</p>\n<p><img src=\"/2019/07/02/HTTP%E5%8D%8F%E8%AE%AE/qingqiuti.png\" alt=\"image\"></p>\n<p><img src=\"/2019/07/02/HTTP%E5%8D%8F%E8%AE%AE/qingqiudemo.jpg\" alt=\"image\"></p>\n<h4 id=\"响应报文\"><a href=\"#响应报文\" class=\"headerlink\" title=\"响应报文\"></a>响应报文</h4><h5 id=\"状态行\"><a href=\"#状态行\" class=\"headerlink\" title=\"状态行\"></a>状态行</h5><p>响应行一般由协议版本、状态码及其描述组成 比如 HTTP/1.1 200 OK</p>\n<p>其中协议版本HTTP/1.1或者HTTP/1.0，200就是它的状态码，OK则为它的描述。</p>\n<p>//常见状态码：</p>\n<p>100~199：表示成功接收请求，要求客户端继续提交下一次请求才能完成整个处理过程。</p>\n<p>200~299：表示成功接收请求并已完成整个处理过程。常用200</p>\n<p>300~399：为完成请求，客户需进一步细化请求。例如：请求的资源已经移动一个新地址、常用302(意味着你请求我，我让你去找别人),307和304(我不给你这个资源，自己拿缓存)</p>\n<p>400~499：客户端的请求有错误，常用404(意味着你请求的资源在web服务器中没有)403(服务器拒绝访问，权限不够)</p>\n<p>500~599：服务器端出现错误，常用500</p>\n<p><a href=\"https://baike.baidu.com/item/HTTP%E7%8A%B6%E6%80%81%E7%A0%81/5053660?fr=aladdin\" target=\"_blank\" rel=\"noopener\">更加详细的状态码</a></p>\n<h5 id=\"响应头\"><a href=\"#响应头\" class=\"headerlink\" title=\"响应头\"></a>响应头</h5><p>响应头用于描述服务器的基本信息，以及数据的描述，服务器通过这些数据的描述信息，可以通知客户端如何处理等一会儿它回送的数据。</p>\n<p>设置HTTP响应头往往和状态码结合起来。例如，有好几个表示“文档位置已经改变”的状态代码都伴随着一个Location头，而401(Unauthorized)状态代码则必须伴随一个WWW-Authenticate头。然而，即使在没有设置特殊含义的状态代码时，指定应答头也是很有用的。应答头可以用来完成：设置Cookie，指定修改日期，指示浏览器按照指定的间隔刷新页面，声明文档的长度以便利用持久HTTP连接，……等等许多其他任务。</p>\n<p>常见的响应头字段含义：</p>\n<p>Allow：服务器支持哪些请求方法(如GET、POST等)。</p>\n<p>Content-Encoding：文档的编码(Encode)方法。只有在解码之后才可以得到Content-Type头指定的内容类型。利用gzip压缩文档能够显著地减少HTML文档的下载时间。Java的GZIPOutputStream可以很方便地进行gzip压缩，但只有Unix上的Netscape和Windows上的IE4、IE5才支持它。因此，Servlet应该通过查看Accept-Encoding头(即request.getHeader(“Accept- Encoding”))检查浏览器是否支持gzip，为支持gzip的浏览器返回经gzip压缩的HTML页面，为其他浏览器返回普通页面。</p>\n<p>Content-Length：表示内容长度。只有当浏览器使用持久HTTP连接时才需要这个数据。如果你想要利用持久连接的优势，可以把输出文档写入 ByteArrayOutputStram，完成后查看其大小，然后把该值放入Content-Length头，最后通过byteArrayStream.writeTo(response.getOutputStream()发送内容。</p>\n<p>Content- Type：表示后面的文档属于什么MIME类型。Servlet默认为text/plain，但通常需要显式地指定为text/html。由于经常要设置 Content-Type，因此HttpServletResponse提供了一个专用的方法setContentType。</p>\n<p>Date：当前的GMT时间，例如，Date:Mon,31Dec200104:25:57GMT。Date描述的时间表示世界标准时，换算成本地时间，需要知道用户所在的时区。你可以用setDateHeader来设置这个头以避免转换时间格式的麻烦。</p>\n<p>Expires：告诉浏览器把回送的资源缓存多长时间，-1或0则是不缓存。</p>\n<p>Last-Modified：文档的最后改动时间。客户可以通过If-Modified-Since请求头提供一个日期，该请求将被视为一个条件GET，只有改动时间迟于指定时间的文档才会返回，否则返回一个304(Not Modified)状态。Last-Modified也可用setDateHeader方法来设置。</p>\n<p>Location：这个头配合302状态码使用，用于重定向接收者到一个新URI地址。表示客户应当到哪里去提取文档。Location通常不是直接设置的，而是通过HttpServletResponse的sendRedirect方法，该方法同时设置状态代码为302。</p>\n<p>Refresh：告诉浏览器隔多久刷新一次，以秒计。</p>\n<p>Server：服务器通过这个头告诉浏览器服务器的类型。Server响应头包含处理请求的原始服务器的软件信息。此域能包含多个产品标识和注释，产品标识一般按照重要性排序。Servlet一般不设置这个值，而是由Web服务器自己设置。</p>\n<p>Set-Cookie：设置和页面关联的Cookie。Servlet不应使用response.setHeader(“Set-Cookie”, …)，而是应使用HttpServletResponse提供的专用方法addCookie。</p>\n<p>Transfer-Encoding：告诉浏览器数据的传送格式。</p>\n<p>WWW-Authenticate：客户应该在Authorization头中提供什么类型的授权信息?在包含401(Unauthorized)状态行的应答中这个头是必需的。例如，response.setHeader(“WWW-Authenticate”, “BASIC realm=\\”executives\\”“)。注意Servlet一般不进行这方面的处理，而是让Web服务器的专门机制来控制受密码保护页面的访问。</p>\n<p>注：设置应答头最常用的方法是HttpServletResponse的setHeader，该方法有两个参数，分别表示应答头的名字和值。和设置状态代码相似，设置应答头应该在发送任何文档内容之前进行。</p>\n<p>setDateHeader方法和setIntHeadr方法专门用来设置包含日期和整数值的应答头，前者避免了把Java时间转换为GMT时间字符串的麻烦，后者则避免了把整数转换为字符串的麻烦。</p>\n<p>HttpServletResponse还提供了许多设置</p>\n<p>setContentType：设置Content-Type头。大多数Servlet都要用到这个方法。</p>\n<p>setContentLength：设置Content-Length头。对于支持持久HTTP连接的浏览器来说，这个函数是很有用的。</p>\n<p>addCookie：设置一个Cookie(Servlet API中没有setCookie方法，因为应答往往包含多个Set-Cookie头)。</p>\n<h5 id=\"空行-1\"><a href=\"#空行-1\" class=\"headerlink\" title=\"空行\"></a>空行</h5><p>它的作用是通过一个空行，告诉服务器请求头部到此为止。</p>\n<h5 id=\"响应体\"><a href=\"#响应体\" class=\"headerlink\" title=\"响应体\"></a>响应体</h5><p>响应体就是响应的消息体，如果是纯数据就是返回纯数据，如果请求的是HTML页面，那么返回的就是HTML代码，如果是JS就是JS代码，如此之类。</p>\n<p><img src=\"/2019/07/02/HTTP%E5%8D%8F%E8%AE%AE/xiangying.jpg\" alt=\"image\"></p>\n<h3 id=\"HTTP方法\"><a href=\"#HTTP方法\" class=\"headerlink\" title=\"HTTP方法\"></a>HTTP方法</h3><ol>\n<li>GET：获取资源</li>\n<li>POST：传输资源</li>\n<li>PUT：更新资源</li>\n<li>DELETE：删除资源</li>\n<li>HEAD：获取报文首部</li>\n</ol>\n<h3 id=\"POST请求和GET请求的区别\"><a href=\"#POST请求和GET请求的区别\" class=\"headerlink\" title=\"POST请求和GET请求的区别\"></a>POST请求和GET请求的区别</h3><ul>\n<li>GET在浏览器回退时是无害的，而POST会再次提交请求。</li>\n<li>GET产生的URL地址可以被收藏，而POST不可以。</li>\n<li>GET请求会被浏览器主动缓存，而POST不会，除非手动设置。</li>\n<li>GET请求只能进行url编码，而POST支持多种编码方式。</li>\n<li>GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。</li>\n<li>GET请求在URL中传送的参数是有长度限制的，而POST没有。</li>\n<li>对参数的数据类型，GET只接受ASCII字符，而POST没有限制。</li>\n<li>GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。</li>\n<li>GET参数通过URL传递，POST放在Request body中。</li>\n</ul>\n<h3 id=\"HTTP连接\"><a href=\"#HTTP连接\" class=\"headerlink\" title=\"HTTP连接\"></a>HTTP连接</h3><h4 id=\"HTTP持久连接\"><a href=\"#HTTP持久连接\" class=\"headerlink\" title=\"HTTP持久连接\"></a>HTTP持久连接</h4><p>HTTP协议采用“请求-应答”模式，当使用普通模式，即非Keep-Alive模式时，每个请求/应答客户和服务器都要新建一个连接，完成后立即断开连接（HTTP协议为无连接的协议。</p>\n<p>当使用Keep-Alive模式（又称持久连接，连接重用）时，Keep-Alive功能使客户端到服务器端的连接持续有效，当出现服务器的后继请求时，Keep-Alive功能避免了建立或者重新建立连接。</p>\n<p><strong>只有http1.1开始支持持久连接</strong></p>\n<h4 id=\"管线化\"><a href=\"#管线化\" class=\"headerlink\" title=\"管线化\"></a>管线化</h4><p>在使用持久连接的情况下，某个连接上的消息传递是这样的：<br>请求1-&gt;响应1-&gt;请求2-&gt;响应2-&gt;请求3-&gt;响应3</p>\n<p>管线化，则消息的传递变成这样：<br>请求1-&gt;请求2-&gt;请求3-&gt;响应1-&gt;响应2-&gt;响应3</p>\n<h4 id=\"管线化的特点\"><a href=\"#管线化的特点\" class=\"headerlink\" title=\"管线化的特点\"></a>管线化的特点</h4><ol>\n<li><p>管线化机制通过持久连接完成，仅HTTP/1.1 支持此技术</p>\n</li>\n<li><p>只有GET和HEAD请求可以进行管线化，而POST则有所限制  </p>\n</li>\n<li><p>初次创建连接时不应启动管线机制，因为对方(服务器)不一定支持HTTP/1.1版本的协议  </p>\n</li>\n<li><p>管线化不会影响响应到来的顺序，如上面的例子所示，响应返回的顺序并未改变</p>\n</li>\n<li><p>HTTP /1.1要求服务器端支持管线化，但并不要求服务器端也对响应进行管线化处理，只是要求对于管线化的请求不失败即可  </p>\n</li>\n<li><p>由于.上面提到的服务器端问题，开启管线化很可能并不会带来大幅度的性能提升，而且很多服务器端和代理程序对管线化的支持并不好，因此现代浏览器如<strong>Chrome和Firefox</strong> 默认并未开启管线化支持</p>\n</li>\n</ol>"},{"layout":"[post]","title":"Vue基础二","date":"2019-11-01T09:50:02.000Z","_content":"## 循环渲染\n<!-- more -->\n```html\n<template>\n    <div>\n        <p>遍历数组</p>\n        <ul>\n            <li v-for=\"(item, index) in listArr\" :key=\"item.id\">\n                {{index}} - {{item.id}} - {{item.title}}\n            </li>\n        </ul>\n\n        <p>遍历对象</p>\n        <ul >\n            <li v-for=\"(val, key, index) in listObj\" :key=\"key\">\n                {{index}} - {{key}} -  {{val.title}}\n            </li>\n        </ul>\n    </div>\n</template>\n\n<script>\nexport default {\n    data() {\n        return {\n            flag: false,\n            listArr: [\n                { id: 'a', title: '标题1' }, // 数据结构中，最好有 id ，方便使用 key\n                { id: 'b', title: '标题2' },\n                { id: 'c', title: '标题3' }\n            ],\n            listObj: {\n                a: { title: '标题1' },\n                b: { title: '标题2' },\n                c: { title: '标题3' },\n            }\n        }\n    }\n}\n</script>\n```\n- v-for不光能遍历数组，也可以遍历对象\n- v-for和v-if不能同时使用\n\n## 事件\n\n```html\n<template>\n    <div>\n        <p>{{num}}</p>\n        <button @click=\"increment1\">+1</button>\n        <button @click=\"increment2(2, $event)\">+2</button>\n    </div>\n</template>\n\n<script>\nexport default {\n    data() {\n        return {\n            num: 0\n        }\n    },\n    methods: {\n        increment1(event) {\n            // eslint-disable-next-line\n            console.log('event', event, event.__proto__.constructor) // 是原生的 event 对象\n            // eslint-disable-next-line\n            console.log(event.target)\n            // eslint-disable-next-line\n            console.log(event.currentTarget) // 注意，事件是被注册到当前元素的，和 React 不一样\n            this.num++\n\n            // 1. event 是原生的\n            // 2. 事件被挂载到当前元素\n            // 和 DOM 事件一样\n        },\n        increment2(val, event) {\n            // eslint-disable-next-line\n            console.log(event.target)\n            this.num = this.num + val\n        },\n        loadHandler() {\n            // do some thing\n        }\n    },\n    mounted() {\n        window.addEventListener('load', this.loadHandler)\n    },\n    beforeDestroy() {\n        //【注意】用 vue 绑定的事件，组建销毁时会自动被解绑\n        // 自己绑定的事件，需要自己销毁！！！\n        window.removeEventListener('load', this.loadHandler)\n    }\n}\n</script>\n```\n\n## 表单\n\n```html\n<template>\n    <div>\n        <p>输入框: {{name}}</p>\n        <input type=\"text\" v-model.trim=\"name\"/>\n        <input type=\"text\" v-model.lazy=\"name\"/>\n        <input type=\"text\" v-model.number=\"age\"/>\n\n        <p>多行文本: {{desc}}</p>\n        <textarea v-model=\"desc\"></textarea>\n        <!-- 注意，<textarea>{{desc}}</textarea> 是不允许的！！！ -->\n\n        <p>复选框 {{checked}}</p>\n        <input type=\"checkbox\" v-model=\"checked\"/>\n\n        <p>多个复选框 {{checkedNames}}</p>\n        <input type=\"checkbox\" id=\"jack\" value=\"Jack\" v-model=\"checkedNames\">\n        <label for=\"jack\">Jack</label>\n        <input type=\"checkbox\" id=\"john\" value=\"John\" v-model=\"checkedNames\">\n        <label for=\"john\">John</label>\n        <input type=\"checkbox\" id=\"mike\" value=\"Mike\" v-model=\"checkedNames\">\n        <label for=\"mike\">Mike</label>\n\n        <p>单选 {{gender}}</p>\n        <input type=\"radio\" id=\"male\" value=\"male\" v-model=\"gender\"/>\n        <label for=\"male\">男</label>\n        <input type=\"radio\" id=\"female\" value=\"female\" v-model=\"gender\"/>\n        <label for=\"female\">女</label>\n\n        <p>下拉列表选择 {{selected}}</p>\n        <select v-model=\"selected\">\n            <option disabled value=\"\">请选择</option>\n            <option>A</option>\n            <option>B</option>\n            <option>C</option>\n        </select>\n\n        <p>下拉列表选择（多选） {{selectedList}}</p>\n        <select v-model=\"selectedList\" multiple>\n            <option disabled value=\"\">请选择</option>\n            <option>A</option>\n            <option>B</option>\n            <option>C</option>\n        </select>\n    </div>\n</template>\n\n<script>\nexport default {\n    data() {\n        return {\n            name: '双越',\n            age: 18,\n            desc: '自我介绍',\n\n            checked: true,\n            checkedNames: [],\n\n            gender: 'male',\n\n            selected: '',\n            selectedList: []\n        }\n    }\n}\n</script>\n```\n","source":"_posts/Vue基础二.md","raw":"---\nlayout: '[post]'\ntitle: Vue基础二\ndate: 2019-11-01 17:50:02\ntags: Vue\n---\n## 循环渲染\n<!-- more -->\n```html\n<template>\n    <div>\n        <p>遍历数组</p>\n        <ul>\n            <li v-for=\"(item, index) in listArr\" :key=\"item.id\">\n                {{index}} - {{item.id}} - {{item.title}}\n            </li>\n        </ul>\n\n        <p>遍历对象</p>\n        <ul >\n            <li v-for=\"(val, key, index) in listObj\" :key=\"key\">\n                {{index}} - {{key}} -  {{val.title}}\n            </li>\n        </ul>\n    </div>\n</template>\n\n<script>\nexport default {\n    data() {\n        return {\n            flag: false,\n            listArr: [\n                { id: 'a', title: '标题1' }, // 数据结构中，最好有 id ，方便使用 key\n                { id: 'b', title: '标题2' },\n                { id: 'c', title: '标题3' }\n            ],\n            listObj: {\n                a: { title: '标题1' },\n                b: { title: '标题2' },\n                c: { title: '标题3' },\n            }\n        }\n    }\n}\n</script>\n```\n- v-for不光能遍历数组，也可以遍历对象\n- v-for和v-if不能同时使用\n\n## 事件\n\n```html\n<template>\n    <div>\n        <p>{{num}}</p>\n        <button @click=\"increment1\">+1</button>\n        <button @click=\"increment2(2, $event)\">+2</button>\n    </div>\n</template>\n\n<script>\nexport default {\n    data() {\n        return {\n            num: 0\n        }\n    },\n    methods: {\n        increment1(event) {\n            // eslint-disable-next-line\n            console.log('event', event, event.__proto__.constructor) // 是原生的 event 对象\n            // eslint-disable-next-line\n            console.log(event.target)\n            // eslint-disable-next-line\n            console.log(event.currentTarget) // 注意，事件是被注册到当前元素的，和 React 不一样\n            this.num++\n\n            // 1. event 是原生的\n            // 2. 事件被挂载到当前元素\n            // 和 DOM 事件一样\n        },\n        increment2(val, event) {\n            // eslint-disable-next-line\n            console.log(event.target)\n            this.num = this.num + val\n        },\n        loadHandler() {\n            // do some thing\n        }\n    },\n    mounted() {\n        window.addEventListener('load', this.loadHandler)\n    },\n    beforeDestroy() {\n        //【注意】用 vue 绑定的事件，组建销毁时会自动被解绑\n        // 自己绑定的事件，需要自己销毁！！！\n        window.removeEventListener('load', this.loadHandler)\n    }\n}\n</script>\n```\n\n## 表单\n\n```html\n<template>\n    <div>\n        <p>输入框: {{name}}</p>\n        <input type=\"text\" v-model.trim=\"name\"/>\n        <input type=\"text\" v-model.lazy=\"name\"/>\n        <input type=\"text\" v-model.number=\"age\"/>\n\n        <p>多行文本: {{desc}}</p>\n        <textarea v-model=\"desc\"></textarea>\n        <!-- 注意，<textarea>{{desc}}</textarea> 是不允许的！！！ -->\n\n        <p>复选框 {{checked}}</p>\n        <input type=\"checkbox\" v-model=\"checked\"/>\n\n        <p>多个复选框 {{checkedNames}}</p>\n        <input type=\"checkbox\" id=\"jack\" value=\"Jack\" v-model=\"checkedNames\">\n        <label for=\"jack\">Jack</label>\n        <input type=\"checkbox\" id=\"john\" value=\"John\" v-model=\"checkedNames\">\n        <label for=\"john\">John</label>\n        <input type=\"checkbox\" id=\"mike\" value=\"Mike\" v-model=\"checkedNames\">\n        <label for=\"mike\">Mike</label>\n\n        <p>单选 {{gender}}</p>\n        <input type=\"radio\" id=\"male\" value=\"male\" v-model=\"gender\"/>\n        <label for=\"male\">男</label>\n        <input type=\"radio\" id=\"female\" value=\"female\" v-model=\"gender\"/>\n        <label for=\"female\">女</label>\n\n        <p>下拉列表选择 {{selected}}</p>\n        <select v-model=\"selected\">\n            <option disabled value=\"\">请选择</option>\n            <option>A</option>\n            <option>B</option>\n            <option>C</option>\n        </select>\n\n        <p>下拉列表选择（多选） {{selectedList}}</p>\n        <select v-model=\"selectedList\" multiple>\n            <option disabled value=\"\">请选择</option>\n            <option>A</option>\n            <option>B</option>\n            <option>C</option>\n        </select>\n    </div>\n</template>\n\n<script>\nexport default {\n    data() {\n        return {\n            name: '双越',\n            age: 18,\n            desc: '自我介绍',\n\n            checked: true,\n            checkedNames: [],\n\n            gender: 'male',\n\n            selected: '',\n            selectedList: []\n        }\n    }\n}\n</script>\n```\n","slug":"Vue基础二","published":1,"updated":"2020-05-06T09:58:50.000Z","comments":1,"photos":[],"link":"","_id":"ckbftlm60000l7w2p6wt5fv1q","content":"<h2 id=\"循环渲染\"><a href=\"#循环渲染\" class=\"headerlink\" title=\"循环渲染\"></a>循环渲染</h2><a id=\"more\"></a>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>遍历数组<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(item, index) in listArr\"</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"item.id\"</span>&gt;</span></span><br><span class=\"line\">                &#123;&#123;index&#125;&#125; - &#123;&#123;item.id&#125;&#125; - &#123;&#123;item.title&#125;&#125;</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>遍历对象<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ul</span> &gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(val, key, index) in listObj\"</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"key\"</span>&gt;</span></span><br><span class=\"line\">                &#123;&#123;index&#125;&#125; - &#123;&#123;key&#125;&#125; -  &#123;&#123;val.title&#125;&#125;</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">            flag: <span class=\"literal\">false</span>,</span></span><br><span class=\"line\">            listArr: [</span><br><span class=\"line\"><span class=\"actionscript\">                &#123; id: <span class=\"string\">'a'</span>, title: <span class=\"string\">'标题1'</span> &#125;, <span class=\"comment\">// 数据结构中，最好有 id ，方便使用 key</span></span></span><br><span class=\"line\"><span class=\"actionscript\">                &#123; id: <span class=\"string\">'b'</span>, title: <span class=\"string\">'标题2'</span> &#125;,</span></span><br><span class=\"line\"><span class=\"actionscript\">                &#123; id: <span class=\"string\">'c'</span>, title: <span class=\"string\">'标题3'</span> &#125;</span></span><br><span class=\"line\">            ],</span><br><span class=\"line\">            listObj: &#123;</span><br><span class=\"line\"><span class=\"actionscript\">                a: &#123; title: <span class=\"string\">'标题1'</span> &#125;,</span></span><br><span class=\"line\"><span class=\"actionscript\">                b: &#123; title: <span class=\"string\">'标题2'</span> &#125;,</span></span><br><span class=\"line\"><span class=\"actionscript\">                c: &#123; title: <span class=\"string\">'标题3'</span> &#125;,</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>v-for不光能遍历数组，也可以遍历对象</li>\n<li>v-for和v-if不能同时使用</li>\n</ul>\n<h2 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;num&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"increment1\"</span>&gt;</span>+1<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"increment2(2, $event)\"</span>&gt;</span>+2<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\">            num: 0</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        increment1(event) &#123;</span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// eslint-disable-next-line</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'event'</span>, event, event.__proto__.constructor) <span class=\"comment\">// 是原生的 event 对象</span></span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// eslint-disable-next-line</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(event.target)</span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// eslint-disable-next-line</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(event.currentTarget) <span class=\"comment\">// 注意，事件是被注册到当前元素的，和 React 不一样</span></span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"keyword\">this</span>.num++</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// 1. event 是原生的</span></span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// 2. 事件被挂载到当前元素</span></span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// 和 DOM 事件一样</span></span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        increment2(val, event) &#123;</span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// eslint-disable-next-line</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(event.target)</span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"keyword\">this</span>.num = <span class=\"keyword\">this</span>.num + val</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        loadHandler() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// do some thing</span></span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    mounted() &#123;</span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'load'</span>, <span class=\"keyword\">this</span>.loadHandler)</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    beforeDestroy() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">//【注意】用 vue 绑定的事件，组建销毁时会自动被解绑</span></span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// 自己绑定的事件，需要自己销毁！！！</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">window</span>.removeEventListener(<span class=\"string\">'load'</span>, <span class=\"keyword\">this</span>.loadHandler)</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"表单\"><a href=\"#表单\" class=\"headerlink\" title=\"表单\"></a>表单</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>输入框: &#123;&#123;name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">v-model.trim</span>=<span class=\"string\">\"name\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">v-model.lazy</span>=<span class=\"string\">\"name\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">v-model.number</span>=<span class=\"string\">\"age\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>多行文本: &#123;&#123;desc&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"desc\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 注意，&lt;textarea&gt;&#123;&#123;desc&#125;&#125;&lt;/textarea&gt; 是不允许的！！！ --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>复选框 &#123;&#123;checked&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"checked\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>多个复选框 &#123;&#123;checkedNames&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"jack\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Jack\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"checkedNames\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"jack\"</span>&gt;</span>Jack<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"john\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"John\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"checkedNames\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"john\"</span>&gt;</span>John<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"mike\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Mike\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"checkedNames\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"mike\"</span>&gt;</span>Mike<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>单选 &#123;&#123;gender&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"male\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"male\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"gender\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"male\"</span>&gt;</span>男<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"female\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"female\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"gender\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"female\"</span>&gt;</span>女<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>下拉列表选择 &#123;&#123;selected&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"selected\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">disabled</span> <span class=\"attr\">value</span>=<span class=\"string\">\"\"</span>&gt;</span>请选择<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>A<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>B<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>C<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>下拉列表选择（多选） &#123;&#123;selectedList&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"selectedList\"</span> <span class=\"attr\">multiple</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">disabled</span> <span class=\"attr\">value</span>=<span class=\"string\">\"\"</span>&gt;</span>请选择<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>A<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>B<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>C<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">            name: <span class=\"string\">'双越'</span>,</span></span><br><span class=\"line\">            age: 18,</span><br><span class=\"line\"><span class=\"actionscript\">            desc: <span class=\"string\">'自我介绍'</span>,</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">            checked: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\">            checkedNames: [],</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">            gender: <span class=\"string\">'male'</span>,</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">            selected: <span class=\"string\">''</span>,</span></span><br><span class=\"line\">            selectedList: []</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"循环渲染\"><a href=\"#循环渲染\" class=\"headerlink\" title=\"循环渲染\"></a>循环渲染</h2>","more":"<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>遍历数组<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(item, index) in listArr\"</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"item.id\"</span>&gt;</span></span><br><span class=\"line\">                &#123;&#123;index&#125;&#125; - &#123;&#123;item.id&#125;&#125; - &#123;&#123;item.title&#125;&#125;</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>遍历对象<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ul</span> &gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(val, key, index) in listObj\"</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"key\"</span>&gt;</span></span><br><span class=\"line\">                &#123;&#123;index&#125;&#125; - &#123;&#123;key&#125;&#125; -  &#123;&#123;val.title&#125;&#125;</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">            flag: <span class=\"literal\">false</span>,</span></span><br><span class=\"line\">            listArr: [</span><br><span class=\"line\"><span class=\"actionscript\">                &#123; id: <span class=\"string\">'a'</span>, title: <span class=\"string\">'标题1'</span> &#125;, <span class=\"comment\">// 数据结构中，最好有 id ，方便使用 key</span></span></span><br><span class=\"line\"><span class=\"actionscript\">                &#123; id: <span class=\"string\">'b'</span>, title: <span class=\"string\">'标题2'</span> &#125;,</span></span><br><span class=\"line\"><span class=\"actionscript\">                &#123; id: <span class=\"string\">'c'</span>, title: <span class=\"string\">'标题3'</span> &#125;</span></span><br><span class=\"line\">            ],</span><br><span class=\"line\">            listObj: &#123;</span><br><span class=\"line\"><span class=\"actionscript\">                a: &#123; title: <span class=\"string\">'标题1'</span> &#125;,</span></span><br><span class=\"line\"><span class=\"actionscript\">                b: &#123; title: <span class=\"string\">'标题2'</span> &#125;,</span></span><br><span class=\"line\"><span class=\"actionscript\">                c: &#123; title: <span class=\"string\">'标题3'</span> &#125;,</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>v-for不光能遍历数组，也可以遍历对象</li>\n<li>v-for和v-if不能同时使用</li>\n</ul>\n<h2 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;num&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"increment1\"</span>&gt;</span>+1<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"increment2(2, $event)\"</span>&gt;</span>+2<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\">            num: 0</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        increment1(event) &#123;</span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// eslint-disable-next-line</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'event'</span>, event, event.__proto__.constructor) <span class=\"comment\">// 是原生的 event 对象</span></span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// eslint-disable-next-line</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(event.target)</span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// eslint-disable-next-line</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(event.currentTarget) <span class=\"comment\">// 注意，事件是被注册到当前元素的，和 React 不一样</span></span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"keyword\">this</span>.num++</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// 1. event 是原生的</span></span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// 2. 事件被挂载到当前元素</span></span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// 和 DOM 事件一样</span></span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        increment2(val, event) &#123;</span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// eslint-disable-next-line</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(event.target)</span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"keyword\">this</span>.num = <span class=\"keyword\">this</span>.num + val</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        loadHandler() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// do some thing</span></span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    mounted() &#123;</span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'load'</span>, <span class=\"keyword\">this</span>.loadHandler)</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    beforeDestroy() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">//【注意】用 vue 绑定的事件，组建销毁时会自动被解绑</span></span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// 自己绑定的事件，需要自己销毁！！！</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">window</span>.removeEventListener(<span class=\"string\">'load'</span>, <span class=\"keyword\">this</span>.loadHandler)</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"表单\"><a href=\"#表单\" class=\"headerlink\" title=\"表单\"></a>表单</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>输入框: &#123;&#123;name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">v-model.trim</span>=<span class=\"string\">\"name\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">v-model.lazy</span>=<span class=\"string\">\"name\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">v-model.number</span>=<span class=\"string\">\"age\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>多行文本: &#123;&#123;desc&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"desc\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 注意，&lt;textarea&gt;&#123;&#123;desc&#125;&#125;&lt;/textarea&gt; 是不允许的！！！ --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>复选框 &#123;&#123;checked&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"checked\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>多个复选框 &#123;&#123;checkedNames&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"jack\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Jack\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"checkedNames\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"jack\"</span>&gt;</span>Jack<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"john\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"John\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"checkedNames\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"john\"</span>&gt;</span>John<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"mike\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Mike\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"checkedNames\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"mike\"</span>&gt;</span>Mike<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>单选 &#123;&#123;gender&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"male\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"male\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"gender\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"male\"</span>&gt;</span>男<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"female\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"female\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"gender\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"female\"</span>&gt;</span>女<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>下拉列表选择 &#123;&#123;selected&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"selected\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">disabled</span> <span class=\"attr\">value</span>=<span class=\"string\">\"\"</span>&gt;</span>请选择<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>A<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>B<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>C<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>下拉列表选择（多选） &#123;&#123;selectedList&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"selectedList\"</span> <span class=\"attr\">multiple</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">disabled</span> <span class=\"attr\">value</span>=<span class=\"string\">\"\"</span>&gt;</span>请选择<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>A<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>B<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>C<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">            name: <span class=\"string\">'双越'</span>,</span></span><br><span class=\"line\">            age: 18,</span><br><span class=\"line\"><span class=\"actionscript\">            desc: <span class=\"string\">'自我介绍'</span>,</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">            checked: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\">            checkedNames: [],</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">            gender: <span class=\"string\">'male'</span>,</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">            selected: <span class=\"string\">''</span>,</span></span><br><span class=\"line\">            selectedList: []</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>"},{"layout":"[post]","title":"Vue模板编译","date":"2020-02-28T05:57:05.000Z","_content":"## 模版编译\n\n- 模版是vue开发中最常用的部分，即与使用相关的原理\n- 不是html，有指令等\n- 组件渲染和更新的过程\n\n<!-- more -->\n### js的with语法\n\n - 改变{}内自由变量的查找规则，当作obj的属性来查找\n - 如果找不到匹配的属性，则报错\n - with慎用，打破了作用域的规则，易读性差\n\n### vue template complier将模版编译为render函数\n\n```js\nconst compiler = require('vue-template-compiler')\n\n// 插值\nconst template = `<p>{{message}}</p>`\n// with(this){return createElement('p',[createTextVNode(toString(message))])}\n// h -> vnode\n// createElement -> vnode\n\n// // 表达式\nconst template = `<p>{{flag ? message : 'no message found'}}</p>`\n// // with(this){return _c('p',[_v(_s(flag ? message : 'no message found'))])}\n\n// // 属性和动态属性\nconst template = `\n    <div id=\"div1\" class=\"container\">\n        <img :src=\"imgUrl\"/>\n    </div>\n`\n// with(this){return _c('div',\n//      {staticClass:\"container\",attrs:{\"id\":\"div1\"}},\n//      [\n//          _c('img',{attrs:{\"src\":imgUrl}})])}\n\n// // 条件\nconst template = `\n    <div>\n        <p v-if=\"flag === 'a'\">A</p>\n        <p v-else-if=\"flag === 'b'\">C</p>\n        <p v-else>B</p>\n    </div>\n`\n// with(this){return _c('div',[(flag === 'a')?_c('p',[_v(\"A\")]):_c('p',[_v(\"B\")])])}\n\n// 循环\nconst template = `\n    <ul>\n        <li v-for=\"item in list\" :key=\"item.id\">{{item.title}}</li>\n    </ul>\n`\n// with(this){return _c('ul',_l((list),function(item){return _c('li',{key:item.id},[_v(_s(item.title))])}),0)}\n\n// 事件\nconst template = `\n    <button @click=\"clickHandler\">submit</button>\n`\n// with(this){return _c('button',{on:{\"click\":clickHandler}},[_v(\"submit\")])}\n\n// v-model\nconst template = `<input type=\"text\" v-model=\"name\">`\n// 主要看 input 事件\n// with(this){return _c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(name),expression:\"name\"}],attrs:{\"type\":\"text\"},domProps:{\"value\":(name)},on:{\"input\":function($event){if($event.target.composing)return;name=$event.target.value}}})}\n\n// render 函数\n// 返回 vnode\n// patch\n\n// 编译\nconst res = compiler.compile(template)\nconsole.log(res.render)\n\n// ---------------分割线--------------\n\n// // 从 vue 源码中找到缩写函数的含义\n// function installRenderHelpers (target) {\n//     target._o = markOnce;\n//     target._n = toNumber;\n//     target._s = toString;\n//     target._l = renderList;\n//     target._t = renderSlot;\n//     target._q = looseEqual;\n//     target._i = looseIndexOf;\n//     target._m = renderStatic;\n//     target._f = resolveFilter;\n//     target._k = checkKeyCodes;\n//     target._b = bindObjectProps;\n//     target._v = createTextVNode;\n//     target._e = createEmptyVNode;\n//     target._u = resolveScopedSlots;\n//     target._g = bindObjectListeners;\n//     target._d = bindDynamicKeys;\n//     target._p = prependModifier;\n// }\n\n```\n\n\n### 执行render 生成 vnode\n\n执行render函数生成vnode\n\n### 总结\n\n- 模版编译为render函数，执行render函数返回vnode\n- 基于vonde再执行patch和diff\n- 使用webpack vue-loader，会在开发环境下编译模版\n\n### 可以使用render代替template\n\n\n\n\n\n\n\n\n\n","source":"_posts/Vue模板编译.md","raw":"---\nlayout: '[post]'\ntitle: Vue模板编译\ndate: 2020-02-28 13:57:05\ntags: Vue\n---\n## 模版编译\n\n- 模版是vue开发中最常用的部分，即与使用相关的原理\n- 不是html，有指令等\n- 组件渲染和更新的过程\n\n<!-- more -->\n### js的with语法\n\n - 改变{}内自由变量的查找规则，当作obj的属性来查找\n - 如果找不到匹配的属性，则报错\n - with慎用，打破了作用域的规则，易读性差\n\n### vue template complier将模版编译为render函数\n\n```js\nconst compiler = require('vue-template-compiler')\n\n// 插值\nconst template = `<p>{{message}}</p>`\n// with(this){return createElement('p',[createTextVNode(toString(message))])}\n// h -> vnode\n// createElement -> vnode\n\n// // 表达式\nconst template = `<p>{{flag ? message : 'no message found'}}</p>`\n// // with(this){return _c('p',[_v(_s(flag ? message : 'no message found'))])}\n\n// // 属性和动态属性\nconst template = `\n    <div id=\"div1\" class=\"container\">\n        <img :src=\"imgUrl\"/>\n    </div>\n`\n// with(this){return _c('div',\n//      {staticClass:\"container\",attrs:{\"id\":\"div1\"}},\n//      [\n//          _c('img',{attrs:{\"src\":imgUrl}})])}\n\n// // 条件\nconst template = `\n    <div>\n        <p v-if=\"flag === 'a'\">A</p>\n        <p v-else-if=\"flag === 'b'\">C</p>\n        <p v-else>B</p>\n    </div>\n`\n// with(this){return _c('div',[(flag === 'a')?_c('p',[_v(\"A\")]):_c('p',[_v(\"B\")])])}\n\n// 循环\nconst template = `\n    <ul>\n        <li v-for=\"item in list\" :key=\"item.id\">{{item.title}}</li>\n    </ul>\n`\n// with(this){return _c('ul',_l((list),function(item){return _c('li',{key:item.id},[_v(_s(item.title))])}),0)}\n\n// 事件\nconst template = `\n    <button @click=\"clickHandler\">submit</button>\n`\n// with(this){return _c('button',{on:{\"click\":clickHandler}},[_v(\"submit\")])}\n\n// v-model\nconst template = `<input type=\"text\" v-model=\"name\">`\n// 主要看 input 事件\n// with(this){return _c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(name),expression:\"name\"}],attrs:{\"type\":\"text\"},domProps:{\"value\":(name)},on:{\"input\":function($event){if($event.target.composing)return;name=$event.target.value}}})}\n\n// render 函数\n// 返回 vnode\n// patch\n\n// 编译\nconst res = compiler.compile(template)\nconsole.log(res.render)\n\n// ---------------分割线--------------\n\n// // 从 vue 源码中找到缩写函数的含义\n// function installRenderHelpers (target) {\n//     target._o = markOnce;\n//     target._n = toNumber;\n//     target._s = toString;\n//     target._l = renderList;\n//     target._t = renderSlot;\n//     target._q = looseEqual;\n//     target._i = looseIndexOf;\n//     target._m = renderStatic;\n//     target._f = resolveFilter;\n//     target._k = checkKeyCodes;\n//     target._b = bindObjectProps;\n//     target._v = createTextVNode;\n//     target._e = createEmptyVNode;\n//     target._u = resolveScopedSlots;\n//     target._g = bindObjectListeners;\n//     target._d = bindDynamicKeys;\n//     target._p = prependModifier;\n// }\n\n```\n\n\n### 执行render 生成 vnode\n\n执行render函数生成vnode\n\n### 总结\n\n- 模版编译为render函数，执行render函数返回vnode\n- 基于vonde再执行patch和diff\n- 使用webpack vue-loader，会在开发环境下编译模版\n\n### 可以使用render代替template\n\n\n\n\n\n\n\n\n\n","slug":"Vue模板编译","published":1,"updated":"2020-05-13T06:05:48.000Z","comments":1,"photos":[],"link":"","_id":"ckbftlm62000n7w2pah217rld","content":"<h2 id=\"模版编译\"><a href=\"#模版编译\" class=\"headerlink\" title=\"模版编译\"></a>模版编译</h2><ul>\n<li>模版是vue开发中最常用的部分，即与使用相关的原理</li>\n<li>不是html，有指令等</li>\n<li>组件渲染和更新的过程</li>\n</ul>\n<a id=\"more\"></a>\n<h3 id=\"js的with语法\"><a href=\"#js的with语法\" class=\"headerlink\" title=\"js的with语法\"></a>js的with语法</h3><ul>\n<li>改变{}内自由变量的查找规则，当作obj的属性来查找</li>\n<li>如果找不到匹配的属性，则报错</li>\n<li>with慎用，打破了作用域的规则，易读性差</li>\n</ul>\n<h3 id=\"vue-template-complier将模版编译为render函数\"><a href=\"#vue-template-complier将模版编译为render函数\" class=\"headerlink\" title=\"vue template complier将模版编译为render函数\"></a>vue template complier将模版编译为render函数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> compiler = <span class=\"built_in\">require</span>(<span class=\"string\">'vue-template-compiler'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 插值</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> template = <span class=\"string\">`&lt;p&gt;&#123;&#123;message&#125;&#125;&lt;/p&gt;`</span></span><br><span class=\"line\"><span class=\"comment\">// with(this)&#123;return createElement('p',[createTextVNode(toString(message))])&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// h -&gt; vnode</span></span><br><span class=\"line\"><span class=\"comment\">// createElement -&gt; vnode</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// // 表达式</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> template = <span class=\"string\">`&lt;p&gt;&#123;&#123;flag ? message : 'no message found'&#125;&#125;&lt;/p&gt;`</span></span><br><span class=\"line\"><span class=\"comment\">// // with(this)&#123;return _c('p',[_v(_s(flag ? message : 'no message found'))])&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// // 属性和动态属性</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> template = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div id=\"div1\" class=\"container\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;img :src=\"imgUrl\"/&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"comment\">// with(this)&#123;return _c('div',</span></span><br><span class=\"line\"><span class=\"comment\">//      &#123;staticClass:\"container\",attrs:&#123;\"id\":\"div1\"&#125;&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">//      [</span></span><br><span class=\"line\"><span class=\"comment\">//          _c('img',&#123;attrs:&#123;\"src\":imgUrl&#125;&#125;)])&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// // 条件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> template = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;p v-if=\"flag === 'a'\"&gt;A&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;p v-else-if=\"flag === 'b'\"&gt;C&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;p v-else&gt;B&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"comment\">// with(this)&#123;return _c('div',[(flag === 'a')?_c('p',[_v(\"A\")]):_c('p',[_v(\"B\")])])&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 循环</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> template = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;ul&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;li v-for=\"item in list\" :key=\"item.id\"&gt;&#123;&#123;item.title&#125;&#125;&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/ul&gt;</span></span><br><span class=\"line\"><span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"comment\">// with(this)&#123;return _c('ul',_l((list),function(item)&#123;return _c('li',&#123;key:item.id&#125;,[_v(_s(item.title))])&#125;),0)&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 事件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> template = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;button @click=\"clickHandler\"&gt;submit&lt;/button&gt;</span></span><br><span class=\"line\"><span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"comment\">// with(this)&#123;return _c('button',&#123;on:&#123;\"click\":clickHandler&#125;&#125;,[_v(\"submit\")])&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// v-model</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> template = <span class=\"string\">`&lt;input type=\"text\" v-model=\"name\"&gt;`</span></span><br><span class=\"line\"><span class=\"comment\">// 主要看 input 事件</span></span><br><span class=\"line\"><span class=\"comment\">// with(this)&#123;return _c('input',&#123;directives:[&#123;name:\"model\",rawName:\"v-model\",value:(name),expression:\"name\"&#125;],attrs:&#123;\"type\":\"text\"&#125;,domProps:&#123;\"value\":(name)&#125;,on:&#123;\"input\":function($event)&#123;if($event.target.composing)return;name=$event.target.value&#125;&#125;&#125;)&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// render 函数</span></span><br><span class=\"line\"><span class=\"comment\">// 返回 vnode</span></span><br><span class=\"line\"><span class=\"comment\">// patch</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 编译</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> res = compiler.compile(template)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(res.render)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ---------------分割线--------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// // 从 vue 源码中找到缩写函数的含义</span></span><br><span class=\"line\"><span class=\"comment\">// function installRenderHelpers (target) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     target._o = markOnce;</span></span><br><span class=\"line\"><span class=\"comment\">//     target._n = toNumber;</span></span><br><span class=\"line\"><span class=\"comment\">//     target._s = toString;</span></span><br><span class=\"line\"><span class=\"comment\">//     target._l = renderList;</span></span><br><span class=\"line\"><span class=\"comment\">//     target._t = renderSlot;</span></span><br><span class=\"line\"><span class=\"comment\">//     target._q = looseEqual;</span></span><br><span class=\"line\"><span class=\"comment\">//     target._i = looseIndexOf;</span></span><br><span class=\"line\"><span class=\"comment\">//     target._m = renderStatic;</span></span><br><span class=\"line\"><span class=\"comment\">//     target._f = resolveFilter;</span></span><br><span class=\"line\"><span class=\"comment\">//     target._k = checkKeyCodes;</span></span><br><span class=\"line\"><span class=\"comment\">//     target._b = bindObjectProps;</span></span><br><span class=\"line\"><span class=\"comment\">//     target._v = createTextVNode;</span></span><br><span class=\"line\"><span class=\"comment\">//     target._e = createEmptyVNode;</span></span><br><span class=\"line\"><span class=\"comment\">//     target._u = resolveScopedSlots;</span></span><br><span class=\"line\"><span class=\"comment\">//     target._g = bindObjectListeners;</span></span><br><span class=\"line\"><span class=\"comment\">//     target._d = bindDynamicKeys;</span></span><br><span class=\"line\"><span class=\"comment\">//     target._p = prependModifier;</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"执行render-生成-vnode\"><a href=\"#执行render-生成-vnode\" class=\"headerlink\" title=\"执行render 生成 vnode\"></a>执行render 生成 vnode</h3><p>执行render函数生成vnode</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>模版编译为render函数，执行render函数返回vnode</li>\n<li>基于vonde再执行patch和diff</li>\n<li>使用webpack vue-loader，会在开发环境下编译模版</li>\n</ul>\n<h3 id=\"可以使用render代替template\"><a href=\"#可以使用render代替template\" class=\"headerlink\" title=\"可以使用render代替template\"></a>可以使用render代替template</h3>","site":{"data":{}},"excerpt":"<h2 id=\"模版编译\"><a href=\"#模版编译\" class=\"headerlink\" title=\"模版编译\"></a>模版编译</h2><ul>\n<li>模版是vue开发中最常用的部分，即与使用相关的原理</li>\n<li>不是html，有指令等</li>\n<li>组件渲染和更新的过程</li>\n</ul>","more":"<h3 id=\"js的with语法\"><a href=\"#js的with语法\" class=\"headerlink\" title=\"js的with语法\"></a>js的with语法</h3><ul>\n<li>改变{}内自由变量的查找规则，当作obj的属性来查找</li>\n<li>如果找不到匹配的属性，则报错</li>\n<li>with慎用，打破了作用域的规则，易读性差</li>\n</ul>\n<h3 id=\"vue-template-complier将模版编译为render函数\"><a href=\"#vue-template-complier将模版编译为render函数\" class=\"headerlink\" title=\"vue template complier将模版编译为render函数\"></a>vue template complier将模版编译为render函数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> compiler = <span class=\"built_in\">require</span>(<span class=\"string\">'vue-template-compiler'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 插值</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> template = <span class=\"string\">`&lt;p&gt;&#123;&#123;message&#125;&#125;&lt;/p&gt;`</span></span><br><span class=\"line\"><span class=\"comment\">// with(this)&#123;return createElement('p',[createTextVNode(toString(message))])&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// h -&gt; vnode</span></span><br><span class=\"line\"><span class=\"comment\">// createElement -&gt; vnode</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// // 表达式</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> template = <span class=\"string\">`&lt;p&gt;&#123;&#123;flag ? message : 'no message found'&#125;&#125;&lt;/p&gt;`</span></span><br><span class=\"line\"><span class=\"comment\">// // with(this)&#123;return _c('p',[_v(_s(flag ? message : 'no message found'))])&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// // 属性和动态属性</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> template = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div id=\"div1\" class=\"container\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;img :src=\"imgUrl\"/&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"comment\">// with(this)&#123;return _c('div',</span></span><br><span class=\"line\"><span class=\"comment\">//      &#123;staticClass:\"container\",attrs:&#123;\"id\":\"div1\"&#125;&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">//      [</span></span><br><span class=\"line\"><span class=\"comment\">//          _c('img',&#123;attrs:&#123;\"src\":imgUrl&#125;&#125;)])&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// // 条件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> template = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;p v-if=\"flag === 'a'\"&gt;A&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;p v-else-if=\"flag === 'b'\"&gt;C&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;p v-else&gt;B&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"comment\">// with(this)&#123;return _c('div',[(flag === 'a')?_c('p',[_v(\"A\")]):_c('p',[_v(\"B\")])])&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 循环</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> template = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;ul&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;li v-for=\"item in list\" :key=\"item.id\"&gt;&#123;&#123;item.title&#125;&#125;&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/ul&gt;</span></span><br><span class=\"line\"><span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"comment\">// with(this)&#123;return _c('ul',_l((list),function(item)&#123;return _c('li',&#123;key:item.id&#125;,[_v(_s(item.title))])&#125;),0)&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 事件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> template = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;button @click=\"clickHandler\"&gt;submit&lt;/button&gt;</span></span><br><span class=\"line\"><span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"comment\">// with(this)&#123;return _c('button',&#123;on:&#123;\"click\":clickHandler&#125;&#125;,[_v(\"submit\")])&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// v-model</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> template = <span class=\"string\">`&lt;input type=\"text\" v-model=\"name\"&gt;`</span></span><br><span class=\"line\"><span class=\"comment\">// 主要看 input 事件</span></span><br><span class=\"line\"><span class=\"comment\">// with(this)&#123;return _c('input',&#123;directives:[&#123;name:\"model\",rawName:\"v-model\",value:(name),expression:\"name\"&#125;],attrs:&#123;\"type\":\"text\"&#125;,domProps:&#123;\"value\":(name)&#125;,on:&#123;\"input\":function($event)&#123;if($event.target.composing)return;name=$event.target.value&#125;&#125;&#125;)&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// render 函数</span></span><br><span class=\"line\"><span class=\"comment\">// 返回 vnode</span></span><br><span class=\"line\"><span class=\"comment\">// patch</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 编译</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> res = compiler.compile(template)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(res.render)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ---------------分割线--------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// // 从 vue 源码中找到缩写函数的含义</span></span><br><span class=\"line\"><span class=\"comment\">// function installRenderHelpers (target) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     target._o = markOnce;</span></span><br><span class=\"line\"><span class=\"comment\">//     target._n = toNumber;</span></span><br><span class=\"line\"><span class=\"comment\">//     target._s = toString;</span></span><br><span class=\"line\"><span class=\"comment\">//     target._l = renderList;</span></span><br><span class=\"line\"><span class=\"comment\">//     target._t = renderSlot;</span></span><br><span class=\"line\"><span class=\"comment\">//     target._q = looseEqual;</span></span><br><span class=\"line\"><span class=\"comment\">//     target._i = looseIndexOf;</span></span><br><span class=\"line\"><span class=\"comment\">//     target._m = renderStatic;</span></span><br><span class=\"line\"><span class=\"comment\">//     target._f = resolveFilter;</span></span><br><span class=\"line\"><span class=\"comment\">//     target._k = checkKeyCodes;</span></span><br><span class=\"line\"><span class=\"comment\">//     target._b = bindObjectProps;</span></span><br><span class=\"line\"><span class=\"comment\">//     target._v = createTextVNode;</span></span><br><span class=\"line\"><span class=\"comment\">//     target._e = createEmptyVNode;</span></span><br><span class=\"line\"><span class=\"comment\">//     target._u = resolveScopedSlots;</span></span><br><span class=\"line\"><span class=\"comment\">//     target._g = bindObjectListeners;</span></span><br><span class=\"line\"><span class=\"comment\">//     target._d = bindDynamicKeys;</span></span><br><span class=\"line\"><span class=\"comment\">//     target._p = prependModifier;</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"执行render-生成-vnode\"><a href=\"#执行render-生成-vnode\" class=\"headerlink\" title=\"执行render 生成 vnode\"></a>执行render 生成 vnode</h3><p>执行render函数生成vnode</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>模版编译为render函数，执行render函数返回vnode</li>\n<li>基于vonde再执行patch和diff</li>\n<li>使用webpack vue-loader，会在开发环境下编译模版</li>\n</ul>\n<h3 id=\"可以使用render代替template\"><a href=\"#可以使用render代替template\" class=\"headerlink\" title=\"可以使用render代替template\"></a>可以使用render代替template</h3>"},{"layout":"[post]","title":"Vue基础一","date":"2019-10-19T16:03:47.000Z","_content":"## 插值表达式\n<!-- more -->\n```html\n<template>\n    <div>\n        <p>文本插值 {{message}}</p>\n        <p>JS 表达式 {{ flag ? 'yes' : 'no' }} （只能是表达式，不能是 js 语句）</p>\n\n        <p :id=\"dynamicId\">动态属性 id</p>\n\n        <hr/>\n        <p v-html=\"rawHtml\">\n            <span>有 xss 风险</span>\n            <span>【注意】使用 v-html 之后，将会覆盖子元素</span>\n        </p>\n        <!-- 其他常用指令后面讲 -->\n    </div>\n</template>\n<script>\nexport default {\n    data() {\n        return {\n            message: 'hello vue',\n            flag: true,\n            rawHtml: '指令 - 原始 html <b>加粗</b> <i>斜体</i>',\n            dynamicId: `id-${Date.now()}`\n        }\n    }\n}\n</script>\n\n```\n## computed和watch\n### computed\n一个计算属性,类似于过滤器,对绑定到view的数据进行处理。\n\n```js\n data: {\n    firstName: 'Foo',\n    lastName: 'Bar'\n  },\n  computed: {\n    fullName: function () {\n      return this.firstName + ' ' + this.lastName\n    }\n  }\n```\n**fullName不可在data里面定义**\n#### get和set用法\n\n```js\ndata: {\n    firstName: 'Foo',\n    lastName: 'Bar'\n  },\n  computed: {\n  fullName：{\n   get(){//回调函数 当需要读取当前属性值是执行，根据相关数据计算并返回当前属性的值\n      return this.firstName + ' ' + this.lastName\n    },\n   set(val){//监视当前属性值的变化，当属性值发生变化时执行，更新相关的属性数据\n       //val就是fullName的最新属性值\n       console.log(val)\n        const names = val.split(' ');\n        console.log(names)\n        this.firstName = names[0];\n        this.lastName = names[1];\n   }\n   }\n  }\n```\n\n**computed有缓存，data不变则不会重新计算**\n\n### watch\nwatch是一个观察的动作\n\n```js\ndata: {\n    firstName: 'Foo',\n    lastName: 'Bar',\n    fullName: 'Foo Bar'\n  },\n  watch: {\n     firstName: function (val) {\n     this.fullName = val + ' ' + this.lastName\n  },\n  lastName: function (val) {\n     this.fullName = this.firstName + ' ' + val\n   }\n}\n```\n#### 简单数据类型\n\n```js\ndata(){\n      return{\n        'first':2\n      }\n    },\n    watch:{\n      first(){\n        console.log(this.first)\n      }\n    },\n```\n#### 复杂数据类型\n\n```js\ndata(){\n      return{\n        'first':{\n          second:0\n        }\n      }\n    },\n    watch:{\n      secondChange:{\n        handler(oldVal,newVal){\n          console.log(oldVal)\n          console.log(newVal)\n        },\n        deep:true\n      }\n    },\n```\n - **console.log打印的结果,发现oldVal和newVal值是一样的,所以深度监听虽然可以监听到对象的变化,但是无法监听到具体对象里面那个属性的变化（只针对引用类型）**\n\n - oldVal和newVal值一样的原因是它们索引同一个对象/数组。Vue **不会保留修改之前值的副本**\n\n - 深度监听对应的函数名必须为handler,否则无效果,因为watcher里面对应的是对handler的调用\n\n#### 监听对象单个属性\n##### 方法一\n```js\n  data() {\n    return {\n      first: {\n        second: 0\n      }\n    };\n  },\n  watch: {\n    \"first.second\": function(newVal, oldVal) {\n      console.log(newVal, oldVal);\n    }\n  }\n```\n##### 方法二\n\n用computed作为中间件转化,因为computed可以取到对应的属性值\n```js\n  data() {\n    return {\n      first: {\n        second: 0\n      }\n    };\n  },\n  computed: {\n    secondChange() {\n      return this.first.second;\n    }\n  },\n  watch: {\n    secondChange() {\n      console.log(\"second属性值变化了\");\n    }\n  }\n```\n\n### computed和watch的区别\n####  computed特性\n1. 是计算值\n2. 应用：就是简化tempalte里面双花括号计算和处理props或$emit的传值\n3. 具有缓存性，页面重新渲染值不变化,计算属性会立即返回之前的计算结果，而不必再次执行函数\n\n#### watch特性\n1. 是观察的动作\n2. 应用：监听props，$emit或本组件的值执行异步操作\n3. 无缓存性，页面重新渲染时值不变化也会执行\n\n## class和style\n - 使用动态属性\n - 使用驼峰式写法\n\n```html\n<template>\n    <div>\n        <p :class=\"{ black: isBlack, yellow: isYellow }\">使用 class</p>\n        <p :class=\"[black, yellow]\">使用 class （数组）</p>\n        <p :style=\"styleData\">使用 style</p>\n    </div>\n</template>\n\n<script>\nexport default {\n    data() {\n        return {\n            isBlack: true,\n            isYellow: true,\n\n            black: 'black',\n            yellow: 'yellow',\n\n            styleData: {\n                fontSize: '40px', // 转换为驼峰式\n                color: 'red',\n                backgroundColor: '#ccc' // 转换为驼峰式\n            }\n        }\n    }\n}\n</script>\n\n<style scoped>\n    .black {\n        background-color: #999;\n    }\n    .yellow {\n        color: yellow;\n    }\n</style>\n```\n\n## 条件渲染\n\n```html\n<template>\n    <div>\n        <p v-if=\"type === 'a'\">A</p>\n        <p v-else-if=\"type === 'b'\">B</p>\n        <p v-else>other</p>\n\n        <p v-show=\"type === 'a'\">A by v-show</p>\n        <p v-show=\"type === 'b'\">B by v-show</p>\n    </div>\n</template>\n\n<script>\nexport default {\n    data() {\n        return {\n            type: 'a'\n        }\n    }\n}\n</script>\n```\n\n#### v-if和v-show\n - v-if是false时候不会渲染dom，v-show则是display:none\n - 频繁切换使用v-show,不会频繁渲染dom\n\n\n","source":"_posts/Vue基础一.md","raw":"---\nlayout: '[post]'\ntitle: Vue基础一\ndate: 2019-10-20 00:03:47\ntags: Vue\n---\n## 插值表达式\n<!-- more -->\n```html\n<template>\n    <div>\n        <p>文本插值 {{message}}</p>\n        <p>JS 表达式 {{ flag ? 'yes' : 'no' }} （只能是表达式，不能是 js 语句）</p>\n\n        <p :id=\"dynamicId\">动态属性 id</p>\n\n        <hr/>\n        <p v-html=\"rawHtml\">\n            <span>有 xss 风险</span>\n            <span>【注意】使用 v-html 之后，将会覆盖子元素</span>\n        </p>\n        <!-- 其他常用指令后面讲 -->\n    </div>\n</template>\n<script>\nexport default {\n    data() {\n        return {\n            message: 'hello vue',\n            flag: true,\n            rawHtml: '指令 - 原始 html <b>加粗</b> <i>斜体</i>',\n            dynamicId: `id-${Date.now()}`\n        }\n    }\n}\n</script>\n\n```\n## computed和watch\n### computed\n一个计算属性,类似于过滤器,对绑定到view的数据进行处理。\n\n```js\n data: {\n    firstName: 'Foo',\n    lastName: 'Bar'\n  },\n  computed: {\n    fullName: function () {\n      return this.firstName + ' ' + this.lastName\n    }\n  }\n```\n**fullName不可在data里面定义**\n#### get和set用法\n\n```js\ndata: {\n    firstName: 'Foo',\n    lastName: 'Bar'\n  },\n  computed: {\n  fullName：{\n   get(){//回调函数 当需要读取当前属性值是执行，根据相关数据计算并返回当前属性的值\n      return this.firstName + ' ' + this.lastName\n    },\n   set(val){//监视当前属性值的变化，当属性值发生变化时执行，更新相关的属性数据\n       //val就是fullName的最新属性值\n       console.log(val)\n        const names = val.split(' ');\n        console.log(names)\n        this.firstName = names[0];\n        this.lastName = names[1];\n   }\n   }\n  }\n```\n\n**computed有缓存，data不变则不会重新计算**\n\n### watch\nwatch是一个观察的动作\n\n```js\ndata: {\n    firstName: 'Foo',\n    lastName: 'Bar',\n    fullName: 'Foo Bar'\n  },\n  watch: {\n     firstName: function (val) {\n     this.fullName = val + ' ' + this.lastName\n  },\n  lastName: function (val) {\n     this.fullName = this.firstName + ' ' + val\n   }\n}\n```\n#### 简单数据类型\n\n```js\ndata(){\n      return{\n        'first':2\n      }\n    },\n    watch:{\n      first(){\n        console.log(this.first)\n      }\n    },\n```\n#### 复杂数据类型\n\n```js\ndata(){\n      return{\n        'first':{\n          second:0\n        }\n      }\n    },\n    watch:{\n      secondChange:{\n        handler(oldVal,newVal){\n          console.log(oldVal)\n          console.log(newVal)\n        },\n        deep:true\n      }\n    },\n```\n - **console.log打印的结果,发现oldVal和newVal值是一样的,所以深度监听虽然可以监听到对象的变化,但是无法监听到具体对象里面那个属性的变化（只针对引用类型）**\n\n - oldVal和newVal值一样的原因是它们索引同一个对象/数组。Vue **不会保留修改之前值的副本**\n\n - 深度监听对应的函数名必须为handler,否则无效果,因为watcher里面对应的是对handler的调用\n\n#### 监听对象单个属性\n##### 方法一\n```js\n  data() {\n    return {\n      first: {\n        second: 0\n      }\n    };\n  },\n  watch: {\n    \"first.second\": function(newVal, oldVal) {\n      console.log(newVal, oldVal);\n    }\n  }\n```\n##### 方法二\n\n用computed作为中间件转化,因为computed可以取到对应的属性值\n```js\n  data() {\n    return {\n      first: {\n        second: 0\n      }\n    };\n  },\n  computed: {\n    secondChange() {\n      return this.first.second;\n    }\n  },\n  watch: {\n    secondChange() {\n      console.log(\"second属性值变化了\");\n    }\n  }\n```\n\n### computed和watch的区别\n####  computed特性\n1. 是计算值\n2. 应用：就是简化tempalte里面双花括号计算和处理props或$emit的传值\n3. 具有缓存性，页面重新渲染值不变化,计算属性会立即返回之前的计算结果，而不必再次执行函数\n\n#### watch特性\n1. 是观察的动作\n2. 应用：监听props，$emit或本组件的值执行异步操作\n3. 无缓存性，页面重新渲染时值不变化也会执行\n\n## class和style\n - 使用动态属性\n - 使用驼峰式写法\n\n```html\n<template>\n    <div>\n        <p :class=\"{ black: isBlack, yellow: isYellow }\">使用 class</p>\n        <p :class=\"[black, yellow]\">使用 class （数组）</p>\n        <p :style=\"styleData\">使用 style</p>\n    </div>\n</template>\n\n<script>\nexport default {\n    data() {\n        return {\n            isBlack: true,\n            isYellow: true,\n\n            black: 'black',\n            yellow: 'yellow',\n\n            styleData: {\n                fontSize: '40px', // 转换为驼峰式\n                color: 'red',\n                backgroundColor: '#ccc' // 转换为驼峰式\n            }\n        }\n    }\n}\n</script>\n\n<style scoped>\n    .black {\n        background-color: #999;\n    }\n    .yellow {\n        color: yellow;\n    }\n</style>\n```\n\n## 条件渲染\n\n```html\n<template>\n    <div>\n        <p v-if=\"type === 'a'\">A</p>\n        <p v-else-if=\"type === 'b'\">B</p>\n        <p v-else>other</p>\n\n        <p v-show=\"type === 'a'\">A by v-show</p>\n        <p v-show=\"type === 'b'\">B by v-show</p>\n    </div>\n</template>\n\n<script>\nexport default {\n    data() {\n        return {\n            type: 'a'\n        }\n    }\n}\n</script>\n```\n\n#### v-if和v-show\n - v-if是false时候不会渲染dom，v-show则是display:none\n - 频繁切换使用v-show,不会频繁渲染dom\n\n\n","slug":"Vue基础一","published":1,"updated":"2020-05-06T09:55:45.000Z","comments":1,"photos":[],"link":"","_id":"ckbftlm64000p7w2p3qge204u","content":"<h2 id=\"插值表达式\"><a href=\"#插值表达式\" class=\"headerlink\" title=\"插值表达式\"></a>插值表达式</h2><a id=\"more\"></a>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>文本插值 &#123;&#123;message&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>JS 表达式 &#123;&#123; flag ? 'yes' : 'no' &#125;&#125; （只能是表达式，不能是 js 语句）<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">:id</span>=<span class=\"string\">\"dynamicId\"</span>&gt;</span>动态属性 id<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">hr</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-html</span>=<span class=\"string\">\"rawHtml\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>有 xss 风险<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>【注意】使用 v-html 之后，将会覆盖子元素<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 其他常用指令后面讲 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">            message: <span class=\"string\">'hello vue'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">            flag: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">            rawHtml: '指令 - 原始 html <span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span>加粗<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span>斜体<span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span>',</span></span></span><br><span class=\"line\"><span class=\"javascript\">            dynamicId: <span class=\"string\">`id-<span class=\"subst\">$&#123;<span class=\"built_in\">Date</span>.now()&#125;</span>`</span></span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"computed和watch\"><a href=\"#computed和watch\" class=\"headerlink\" title=\"computed和watch\"></a>computed和watch</h2><h3 id=\"computed\"><a href=\"#computed\" class=\"headerlink\" title=\"computed\"></a>computed</h3><p>一个计算属性,类似于过滤器,对绑定到view的数据进行处理。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data: &#123;</span><br><span class=\"line\">   firstName: <span class=\"string\">'Foo'</span>,</span><br><span class=\"line\">   lastName: <span class=\"string\">'Bar'</span></span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"> computed: &#123;</span><br><span class=\"line\">   fullName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.firstName + <span class=\"string\">' '</span> + <span class=\"keyword\">this</span>.lastName</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p><strong>fullName不可在data里面定义</strong></p>\n<h4 id=\"get和set用法\"><a href=\"#get和set用法\" class=\"headerlink\" title=\"get和set用法\"></a>get和set用法</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data: &#123;</span><br><span class=\"line\">    firstName: <span class=\"string\">'Foo'</span>,</span><br><span class=\"line\">    lastName: <span class=\"string\">'Bar'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  computed: &#123;</span><br><span class=\"line\">  fullName：&#123;</span><br><span class=\"line\">   <span class=\"keyword\">get</span>()&#123;<span class=\"comment\">//回调函数 当需要读取当前属性值是执行，根据相关数据计算并返回当前属性的值</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.firstName + <span class=\"string\">' '</span> + <span class=\"keyword\">this</span>.lastName</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">   <span class=\"keyword\">set</span>(val)&#123;<span class=\"comment\">//监视当前属性值的变化，当属性值发生变化时执行，更新相关的属性数据</span></span><br><span class=\"line\">       <span class=\"comment\">//val就是fullName的最新属性值</span></span><br><span class=\"line\">       <span class=\"built_in\">console</span>.log(val)</span><br><span class=\"line\">        <span class=\"keyword\">const</span> names = val.split(<span class=\"string\">' '</span>);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(names)</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.firstName = names[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.lastName = names[<span class=\"number\">1</span>];</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>computed有缓存，data不变则不会重新计算</strong></p>\n<h3 id=\"watch\"><a href=\"#watch\" class=\"headerlink\" title=\"watch\"></a>watch</h3><p>watch是一个观察的动作</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data: &#123;</span><br><span class=\"line\">    firstName: <span class=\"string\">'Foo'</span>,</span><br><span class=\"line\">    lastName: <span class=\"string\">'Bar'</span>,</span><br><span class=\"line\">    fullName: <span class=\"string\">'Foo Bar'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  watch: &#123;</span><br><span class=\"line\">     firstName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">this</span>.fullName = val + <span class=\"string\">' '</span> + <span class=\"keyword\">this</span>.lastName</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  lastName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">this</span>.fullName = <span class=\"keyword\">this</span>.firstName + <span class=\"string\">' '</span> + val</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"简单数据类型\"><a href=\"#简单数据类型\" class=\"headerlink\" title=\"简单数据类型\"></a>简单数据类型</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data()&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>&#123;</span><br><span class=\"line\">        <span class=\"string\">'first'</span>:<span class=\"number\">2</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    watch:&#123;</span><br><span class=\"line\">      first()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.first)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br></pre></td></tr></table></figure>\n<h4 id=\"复杂数据类型\"><a href=\"#复杂数据类型\" class=\"headerlink\" title=\"复杂数据类型\"></a>复杂数据类型</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data()&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>&#123;</span><br><span class=\"line\">        <span class=\"string\">'first'</span>:&#123;</span><br><span class=\"line\">          second:<span class=\"number\">0</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    watch:&#123;</span><br><span class=\"line\">      secondChange:&#123;</span><br><span class=\"line\">        handler(oldVal,newVal)&#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(oldVal)</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(newVal)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        deep:<span class=\"literal\">true</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p><strong>console.log打印的结果,发现oldVal和newVal值是一样的,所以深度监听虽然可以监听到对象的变化,但是无法监听到具体对象里面那个属性的变化（只针对引用类型）</strong></p>\n</li>\n<li><p>oldVal和newVal值一样的原因是它们索引同一个对象/数组。Vue <strong>不会保留修改之前值的副本</strong></p>\n</li>\n<li><p>深度监听对应的函数名必须为handler,否则无效果,因为watcher里面对应的是对handler的调用</p>\n</li>\n</ul>\n<h4 id=\"监听对象单个属性\"><a href=\"#监听对象单个属性\" class=\"headerlink\" title=\"监听对象单个属性\"></a>监听对象单个属性</h4><h5 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    first: &#123;</span><br><span class=\"line\">      second: <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">watch: &#123;</span><br><span class=\"line\">  <span class=\"string\">\"first.second\"</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">newVal, oldVal</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(newVal, oldVal);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h5><p>用computed作为中间件转化,因为computed可以取到对应的属性值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    first: &#123;</span><br><span class=\"line\">      second: <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  secondChange() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.first.second;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">watch: &#123;</span><br><span class=\"line\">  secondChange() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"second属性值变化了\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"computed和watch的区别\"><a href=\"#computed和watch的区别\" class=\"headerlink\" title=\"computed和watch的区别\"></a>computed和watch的区别</h3><h4 id=\"computed特性\"><a href=\"#computed特性\" class=\"headerlink\" title=\"computed特性\"></a>computed特性</h4><ol>\n<li>是计算值</li>\n<li>应用：就是简化tempalte里面双花括号计算和处理props或$emit的传值</li>\n<li>具有缓存性，页面重新渲染值不变化,计算属性会立即返回之前的计算结果，而不必再次执行函数</li>\n</ol>\n<h4 id=\"watch特性\"><a href=\"#watch特性\" class=\"headerlink\" title=\"watch特性\"></a>watch特性</h4><ol>\n<li>是观察的动作</li>\n<li>应用：监听props，$emit或本组件的值执行异步操作</li>\n<li>无缓存性，页面重新渲染时值不变化也会执行</li>\n</ol>\n<h2 id=\"class和style\"><a href=\"#class和style\" class=\"headerlink\" title=\"class和style\"></a>class和style</h2><ul>\n<li>使用动态属性</li>\n<li>使用驼峰式写法</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">:class</span>=<span class=\"string\">\"&#123; black: isBlack, yellow: isYellow &#125;\"</span>&gt;</span>使用 class<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">:class</span>=<span class=\"string\">\"[black, yellow]\"</span>&gt;</span>使用 class （数组）<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">:style</span>=<span class=\"string\">\"styleData\"</span>&gt;</span>使用 style<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">            isBlack: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">            isYellow: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">            black: <span class=\"string\">'black'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">            yellow: <span class=\"string\">'yellow'</span>,</span></span><br><span class=\"line\"></span><br><span class=\"line\">            styleData: &#123;</span><br><span class=\"line\"><span class=\"actionscript\">                fontSize: <span class=\"string\">'40px'</span>, <span class=\"comment\">// 转换为驼峰式</span></span></span><br><span class=\"line\"><span class=\"actionscript\">                color: <span class=\"string\">'red'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">                backgroundColor: <span class=\"string\">'#ccc'</span> <span class=\"comment\">// 转换为驼峰式</span></span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">scoped</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.black</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#999</span>;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.yellow</span> &#123;</span></span><br><span class=\"line\">        color: yellow;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"条件渲染\"><a href=\"#条件渲染\" class=\"headerlink\" title=\"条件渲染\"></a>条件渲染</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"type === 'a'\"</span>&gt;</span>A<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-else-if</span>=<span class=\"string\">\"type === 'b'\"</span>&gt;</span>B<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-else</span>&gt;</span>other<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-show</span>=<span class=\"string\">\"type === 'a'\"</span>&gt;</span>A by v-show<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-show</span>=<span class=\"string\">\"type === 'b'\"</span>&gt;</span>B by v-show<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">            type: <span class=\"string\">'a'</span></span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"v-if和v-show\"><a href=\"#v-if和v-show\" class=\"headerlink\" title=\"v-if和v-show\"></a>v-if和v-show</h4><ul>\n<li>v-if是false时候不会渲染dom，v-show则是display:none</li>\n<li>频繁切换使用v-show,不会频繁渲染dom</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"插值表达式\"><a href=\"#插值表达式\" class=\"headerlink\" title=\"插值表达式\"></a>插值表达式</h2>","more":"<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>文本插值 &#123;&#123;message&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>JS 表达式 &#123;&#123; flag ? 'yes' : 'no' &#125;&#125; （只能是表达式，不能是 js 语句）<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">:id</span>=<span class=\"string\">\"dynamicId\"</span>&gt;</span>动态属性 id<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">hr</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-html</span>=<span class=\"string\">\"rawHtml\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>有 xss 风险<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>【注意】使用 v-html 之后，将会覆盖子元素<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 其他常用指令后面讲 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">            message: <span class=\"string\">'hello vue'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">            flag: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">            rawHtml: '指令 - 原始 html <span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span>加粗<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span>斜体<span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span>',</span></span></span><br><span class=\"line\"><span class=\"javascript\">            dynamicId: <span class=\"string\">`id-<span class=\"subst\">$&#123;<span class=\"built_in\">Date</span>.now()&#125;</span>`</span></span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"computed和watch\"><a href=\"#computed和watch\" class=\"headerlink\" title=\"computed和watch\"></a>computed和watch</h2><h3 id=\"computed\"><a href=\"#computed\" class=\"headerlink\" title=\"computed\"></a>computed</h3><p>一个计算属性,类似于过滤器,对绑定到view的数据进行处理。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data: &#123;</span><br><span class=\"line\">   firstName: <span class=\"string\">'Foo'</span>,</span><br><span class=\"line\">   lastName: <span class=\"string\">'Bar'</span></span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"> computed: &#123;</span><br><span class=\"line\">   fullName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.firstName + <span class=\"string\">' '</span> + <span class=\"keyword\">this</span>.lastName</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p><strong>fullName不可在data里面定义</strong></p>\n<h4 id=\"get和set用法\"><a href=\"#get和set用法\" class=\"headerlink\" title=\"get和set用法\"></a>get和set用法</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data: &#123;</span><br><span class=\"line\">    firstName: <span class=\"string\">'Foo'</span>,</span><br><span class=\"line\">    lastName: <span class=\"string\">'Bar'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  computed: &#123;</span><br><span class=\"line\">  fullName：&#123;</span><br><span class=\"line\">   <span class=\"keyword\">get</span>()&#123;<span class=\"comment\">//回调函数 当需要读取当前属性值是执行，根据相关数据计算并返回当前属性的值</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.firstName + <span class=\"string\">' '</span> + <span class=\"keyword\">this</span>.lastName</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">   <span class=\"keyword\">set</span>(val)&#123;<span class=\"comment\">//监视当前属性值的变化，当属性值发生变化时执行，更新相关的属性数据</span></span><br><span class=\"line\">       <span class=\"comment\">//val就是fullName的最新属性值</span></span><br><span class=\"line\">       <span class=\"built_in\">console</span>.log(val)</span><br><span class=\"line\">        <span class=\"keyword\">const</span> names = val.split(<span class=\"string\">' '</span>);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(names)</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.firstName = names[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.lastName = names[<span class=\"number\">1</span>];</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>computed有缓存，data不变则不会重新计算</strong></p>\n<h3 id=\"watch\"><a href=\"#watch\" class=\"headerlink\" title=\"watch\"></a>watch</h3><p>watch是一个观察的动作</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data: &#123;</span><br><span class=\"line\">    firstName: <span class=\"string\">'Foo'</span>,</span><br><span class=\"line\">    lastName: <span class=\"string\">'Bar'</span>,</span><br><span class=\"line\">    fullName: <span class=\"string\">'Foo Bar'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  watch: &#123;</span><br><span class=\"line\">     firstName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">this</span>.fullName = val + <span class=\"string\">' '</span> + <span class=\"keyword\">this</span>.lastName</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  lastName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">this</span>.fullName = <span class=\"keyword\">this</span>.firstName + <span class=\"string\">' '</span> + val</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"简单数据类型\"><a href=\"#简单数据类型\" class=\"headerlink\" title=\"简单数据类型\"></a>简单数据类型</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data()&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>&#123;</span><br><span class=\"line\">        <span class=\"string\">'first'</span>:<span class=\"number\">2</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    watch:&#123;</span><br><span class=\"line\">      first()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.first)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br></pre></td></tr></table></figure>\n<h4 id=\"复杂数据类型\"><a href=\"#复杂数据类型\" class=\"headerlink\" title=\"复杂数据类型\"></a>复杂数据类型</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data()&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>&#123;</span><br><span class=\"line\">        <span class=\"string\">'first'</span>:&#123;</span><br><span class=\"line\">          second:<span class=\"number\">0</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    watch:&#123;</span><br><span class=\"line\">      secondChange:&#123;</span><br><span class=\"line\">        handler(oldVal,newVal)&#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(oldVal)</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(newVal)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        deep:<span class=\"literal\">true</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p><strong>console.log打印的结果,发现oldVal和newVal值是一样的,所以深度监听虽然可以监听到对象的变化,但是无法监听到具体对象里面那个属性的变化（只针对引用类型）</strong></p>\n</li>\n<li><p>oldVal和newVal值一样的原因是它们索引同一个对象/数组。Vue <strong>不会保留修改之前值的副本</strong></p>\n</li>\n<li><p>深度监听对应的函数名必须为handler,否则无效果,因为watcher里面对应的是对handler的调用</p>\n</li>\n</ul>\n<h4 id=\"监听对象单个属性\"><a href=\"#监听对象单个属性\" class=\"headerlink\" title=\"监听对象单个属性\"></a>监听对象单个属性</h4><h5 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    first: &#123;</span><br><span class=\"line\">      second: <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">watch: &#123;</span><br><span class=\"line\">  <span class=\"string\">\"first.second\"</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">newVal, oldVal</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(newVal, oldVal);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h5><p>用computed作为中间件转化,因为computed可以取到对应的属性值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    first: &#123;</span><br><span class=\"line\">      second: <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  secondChange() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.first.second;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">watch: &#123;</span><br><span class=\"line\">  secondChange() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"second属性值变化了\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"computed和watch的区别\"><a href=\"#computed和watch的区别\" class=\"headerlink\" title=\"computed和watch的区别\"></a>computed和watch的区别</h3><h4 id=\"computed特性\"><a href=\"#computed特性\" class=\"headerlink\" title=\"computed特性\"></a>computed特性</h4><ol>\n<li>是计算值</li>\n<li>应用：就是简化tempalte里面双花括号计算和处理props或$emit的传值</li>\n<li>具有缓存性，页面重新渲染值不变化,计算属性会立即返回之前的计算结果，而不必再次执行函数</li>\n</ol>\n<h4 id=\"watch特性\"><a href=\"#watch特性\" class=\"headerlink\" title=\"watch特性\"></a>watch特性</h4><ol>\n<li>是观察的动作</li>\n<li>应用：监听props，$emit或本组件的值执行异步操作</li>\n<li>无缓存性，页面重新渲染时值不变化也会执行</li>\n</ol>\n<h2 id=\"class和style\"><a href=\"#class和style\" class=\"headerlink\" title=\"class和style\"></a>class和style</h2><ul>\n<li>使用动态属性</li>\n<li>使用驼峰式写法</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">:class</span>=<span class=\"string\">\"&#123; black: isBlack, yellow: isYellow &#125;\"</span>&gt;</span>使用 class<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">:class</span>=<span class=\"string\">\"[black, yellow]\"</span>&gt;</span>使用 class （数组）<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">:style</span>=<span class=\"string\">\"styleData\"</span>&gt;</span>使用 style<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">            isBlack: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">            isYellow: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">            black: <span class=\"string\">'black'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">            yellow: <span class=\"string\">'yellow'</span>,</span></span><br><span class=\"line\"></span><br><span class=\"line\">            styleData: &#123;</span><br><span class=\"line\"><span class=\"actionscript\">                fontSize: <span class=\"string\">'40px'</span>, <span class=\"comment\">// 转换为驼峰式</span></span></span><br><span class=\"line\"><span class=\"actionscript\">                color: <span class=\"string\">'red'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">                backgroundColor: <span class=\"string\">'#ccc'</span> <span class=\"comment\">// 转换为驼峰式</span></span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">scoped</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.black</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#999</span>;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.yellow</span> &#123;</span></span><br><span class=\"line\">        color: yellow;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"条件渲染\"><a href=\"#条件渲染\" class=\"headerlink\" title=\"条件渲染\"></a>条件渲染</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"type === 'a'\"</span>&gt;</span>A<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-else-if</span>=<span class=\"string\">\"type === 'b'\"</span>&gt;</span>B<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-else</span>&gt;</span>other<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-show</span>=<span class=\"string\">\"type === 'a'\"</span>&gt;</span>A by v-show<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-show</span>=<span class=\"string\">\"type === 'b'\"</span>&gt;</span>B by v-show<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">            type: <span class=\"string\">'a'</span></span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"v-if和v-show\"><a href=\"#v-if和v-show\" class=\"headerlink\" title=\"v-if和v-show\"></a>v-if和v-show</h4><ul>\n<li>v-if是false时候不会渲染dom，v-show则是display:none</li>\n<li>频繁切换使用v-show,不会频繁渲染dom</li>\n</ul>"},{"layout":"[post]","title":"Vue的响应式","date":"2020-01-23T15:50:02.000Z","_content":"## Object.defineProperty(obj, prop, desc)\n**核心的API**\n<!-- more -->\n### 监听对象（简单）\n```js\nconst data = {}\nconst name = 'zhangsan'\nObject.defineProperty(data, 'name' ,{\n    get: function(){\n        console.log('get '+name)\n        return name\n    },\n    set: function (value){\n        console.log('set '+value)\n        name = value \n    }\n})\n```\n### 复杂对象监听\n#### 线程上的代码\n```js\n// 准备数据\nconst data = {\n    name: 'zhangsan',\n    age: 20,\n    info: {\n        address: '北京' // 需要深度监听\n    },\n    nums: [10, 20, 30]\n}\n\n// 监听数据\nobserver(data)\n\n// 测试\ndata.name = 'lisi'\ndata.age = 21\n```\n#### observer方法\n```js\n// 监听对象属性\nfunction observer(target) {\n    if (typeof target !== 'object' || target === null) {\n        // 不是对象或数组\n        return target\n    }\n\n    // 重新定义各个属性（for in 也可以遍历数组）\n    for (let key in target) {\n        defineReactive(target, key, target[key])\n    }\n}\n```\n#### defineReactive方法\n\n```js\n// 重新定义属性，监听起来\nfunction defineReactive(target, key, value) {\n    // 深度监听\n    observer(value)\n\n    // 核心 API\n    Object.defineProperty(target, key, {\n        get() {\n            return value\n        },\n        set(newValue) {\n            if (newValue !== value) {\n                // 深度监听\n                observer(newValue)\n\n                // 设置新值\n                // 注意，value 一直在闭包中，此处设置完之后，再 get 时也是会获取最新的值\n                value = newValue\n\n                // 触发更新视图\n                updateView()\n            }\n        }\n    })\n}\n```\n> 此处使用递归的形式，进行对象的向下遍历\n\n####  Object.defineProperty的缺点\n- 深度监听，需要一次性递归到底，计算量大\n- 无法监听新增/删除属性（所以使用Vue的set和delete方法）\n- 无法监听原生数组，需要特殊处理\n\n### 数组监听\n#### 对数组进行重新定义\n\n```js\n// 重新定义数组原型\nconst oldArrayProperty = Array.prototype\n// 创建新对象，原型指向 oldArrayProperty ，再扩展新的方法不会影响原型\nconst arrProto = Object.create(oldArrayProperty);\n['push', 'pop', 'shift', 'unshift', 'splice'].forEach(methodName => {\n    arrProto[methodName] = function () {\n        updateView() // 触发视图更新\n        // 在执行updateView后，任然能够继续执行数组对象原有的方法\n        oldArrayProperty[methodName].call(this, ...arguments)\n        // 污染全局\n        // Array.prototype.push.call(this, ...arguments)\n    }\n})\n```\n#### 修改observer\n\n```js\n// 监听对象属性\nfunction observer(target) {\n    if (typeof target !== 'object' || target === null) {\n        // 不是对象或数组\n        return target\n    }\n\n    // 污染全局的 Array 原型\n    // Array.prototype.push = function () {\n    //     updateView()\n    //     ...\n    // }\n\n    if (Array.isArray(target)) {\n        target.__proto__ = arrProto\n    }\n\n    // 重新定义各个属性（for in 也可以遍历数组）\n    for (let key in target) {\n        defineReactive(target, key, target[key])\n    }\n}\n```\n\n\n\n\n","source":"_posts/Vue的响应式.md","raw":"---\nlayout: '[post]'\ntitle: Vue的响应式\ndate: 2020-01-23 23:50:02\ntags: Vue\n---\n## Object.defineProperty(obj, prop, desc)\n**核心的API**\n<!-- more -->\n### 监听对象（简单）\n```js\nconst data = {}\nconst name = 'zhangsan'\nObject.defineProperty(data, 'name' ,{\n    get: function(){\n        console.log('get '+name)\n        return name\n    },\n    set: function (value){\n        console.log('set '+value)\n        name = value \n    }\n})\n```\n### 复杂对象监听\n#### 线程上的代码\n```js\n// 准备数据\nconst data = {\n    name: 'zhangsan',\n    age: 20,\n    info: {\n        address: '北京' // 需要深度监听\n    },\n    nums: [10, 20, 30]\n}\n\n// 监听数据\nobserver(data)\n\n// 测试\ndata.name = 'lisi'\ndata.age = 21\n```\n#### observer方法\n```js\n// 监听对象属性\nfunction observer(target) {\n    if (typeof target !== 'object' || target === null) {\n        // 不是对象或数组\n        return target\n    }\n\n    // 重新定义各个属性（for in 也可以遍历数组）\n    for (let key in target) {\n        defineReactive(target, key, target[key])\n    }\n}\n```\n#### defineReactive方法\n\n```js\n// 重新定义属性，监听起来\nfunction defineReactive(target, key, value) {\n    // 深度监听\n    observer(value)\n\n    // 核心 API\n    Object.defineProperty(target, key, {\n        get() {\n            return value\n        },\n        set(newValue) {\n            if (newValue !== value) {\n                // 深度监听\n                observer(newValue)\n\n                // 设置新值\n                // 注意，value 一直在闭包中，此处设置完之后，再 get 时也是会获取最新的值\n                value = newValue\n\n                // 触发更新视图\n                updateView()\n            }\n        }\n    })\n}\n```\n> 此处使用递归的形式，进行对象的向下遍历\n\n####  Object.defineProperty的缺点\n- 深度监听，需要一次性递归到底，计算量大\n- 无法监听新增/删除属性（所以使用Vue的set和delete方法）\n- 无法监听原生数组，需要特殊处理\n\n### 数组监听\n#### 对数组进行重新定义\n\n```js\n// 重新定义数组原型\nconst oldArrayProperty = Array.prototype\n// 创建新对象，原型指向 oldArrayProperty ，再扩展新的方法不会影响原型\nconst arrProto = Object.create(oldArrayProperty);\n['push', 'pop', 'shift', 'unshift', 'splice'].forEach(methodName => {\n    arrProto[methodName] = function () {\n        updateView() // 触发视图更新\n        // 在执行updateView后，任然能够继续执行数组对象原有的方法\n        oldArrayProperty[methodName].call(this, ...arguments)\n        // 污染全局\n        // Array.prototype.push.call(this, ...arguments)\n    }\n})\n```\n#### 修改observer\n\n```js\n// 监听对象属性\nfunction observer(target) {\n    if (typeof target !== 'object' || target === null) {\n        // 不是对象或数组\n        return target\n    }\n\n    // 污染全局的 Array 原型\n    // Array.prototype.push = function () {\n    //     updateView()\n    //     ...\n    // }\n\n    if (Array.isArray(target)) {\n        target.__proto__ = arrProto\n    }\n\n    // 重新定义各个属性（for in 也可以遍历数组）\n    for (let key in target) {\n        defineReactive(target, key, target[key])\n    }\n}\n```\n\n\n\n\n","slug":"Vue的响应式","published":1,"updated":"2020-05-13T03:34:48.000Z","comments":1,"photos":[],"link":"","_id":"ckbftlm66000s7w2p8odp5vhc","content":"<h2 id=\"Object-defineProperty-obj-prop-desc\"><a href=\"#Object-defineProperty-obj-prop-desc\" class=\"headerlink\" title=\"Object.defineProperty(obj, prop, desc)\"></a>Object.defineProperty(obj, prop, desc)</h2><p><strong>核心的API</strong></p>\n<a id=\"more\"></a>\n<h3 id=\"监听对象（简单）\"><a href=\"#监听对象（简单）\" class=\"headerlink\" title=\"监听对象（简单）\"></a>监听对象（简单）</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> data = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">'zhangsan'</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(data, <span class=\"string\">'name'</span> ,&#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span>: function()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'get '</span>+name)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">set</span>: function (value)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'set '</span>+value)</span><br><span class=\"line\">        name = value </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"复杂对象监听\"><a href=\"#复杂对象监听\" class=\"headerlink\" title=\"复杂对象监听\"></a>复杂对象监听</h3><h4 id=\"线程上的代码\"><a href=\"#线程上的代码\" class=\"headerlink\" title=\"线程上的代码\"></a>线程上的代码</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 准备数据</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> data = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'zhangsan'</span>,</span><br><span class=\"line\">    age: <span class=\"number\">20</span>,</span><br><span class=\"line\">    info: &#123;</span><br><span class=\"line\">        address: <span class=\"string\">'北京'</span> <span class=\"comment\">// 需要深度监听</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    nums: [<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 监听数据</span></span><br><span class=\"line\">observer(data)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试</span></span><br><span class=\"line\">data.name = <span class=\"string\">'lisi'</span></span><br><span class=\"line\">data.age = <span class=\"number\">21</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"observer方法\"><a href=\"#observer方法\" class=\"headerlink\" title=\"observer方法\"></a>observer方法</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 监听对象属性</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">observer</span>(<span class=\"params\">target</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> target !== <span class=\"string\">'object'</span> || target === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 不是对象或数组</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> target</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 重新定义各个属性（for in 也可以遍历数组）</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> target) &#123;</span><br><span class=\"line\">        defineReactive(target, key, target[key])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"defineReactive方法\"><a href=\"#defineReactive方法\" class=\"headerlink\" title=\"defineReactive方法\"></a>defineReactive方法</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 重新定义属性，监听起来</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">defineReactive</span>(<span class=\"params\">target, key, value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 深度监听</span></span><br><span class=\"line\">    observer(value)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 核心 API</span></span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.defineProperty(target, key, &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span>() &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> value</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"keyword\">set</span>(newValue) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (newValue !== value) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 深度监听</span></span><br><span class=\"line\">                observer(newValue)</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 设置新值</span></span><br><span class=\"line\">                <span class=\"comment\">// 注意，value 一直在闭包中，此处设置完之后，再 get 时也是会获取最新的值</span></span><br><span class=\"line\">                value = newValue</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 触发更新视图</span></span><br><span class=\"line\">                updateView()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>此处使用递归的形式，进行对象的向下遍历</p>\n</blockquote>\n<h4 id=\"Object-defineProperty的缺点\"><a href=\"#Object-defineProperty的缺点\" class=\"headerlink\" title=\"Object.defineProperty的缺点\"></a>Object.defineProperty的缺点</h4><ul>\n<li>深度监听，需要一次性递归到底，计算量大</li>\n<li>无法监听新增/删除属性（所以使用Vue的set和delete方法）</li>\n<li>无法监听原生数组，需要特殊处理</li>\n</ul>\n<h3 id=\"数组监听\"><a href=\"#数组监听\" class=\"headerlink\" title=\"数组监听\"></a>数组监听</h3><h4 id=\"对数组进行重新定义\"><a href=\"#对数组进行重新定义\" class=\"headerlink\" title=\"对数组进行重新定义\"></a>对数组进行重新定义</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 重新定义数组原型</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> oldArrayProperty = <span class=\"built_in\">Array</span>.prototype</span><br><span class=\"line\"><span class=\"comment\">// 创建新对象，原型指向 oldArrayProperty ，再扩展新的方法不会影响原型</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> arrProto = <span class=\"built_in\">Object</span>.create(oldArrayProperty);</span><br><span class=\"line\">[<span class=\"string\">'push'</span>, <span class=\"string\">'pop'</span>, <span class=\"string\">'shift'</span>, <span class=\"string\">'unshift'</span>, <span class=\"string\">'splice'</span>].forEach(<span class=\"function\"><span class=\"params\">methodName</span> =&gt;</span> &#123;</span><br><span class=\"line\">    arrProto[methodName] = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        updateView() <span class=\"comment\">// 触发视图更新</span></span><br><span class=\"line\">        <span class=\"comment\">// 在执行updateView后，任然能够继续执行数组对象原有的方法</span></span><br><span class=\"line\">        oldArrayProperty[methodName].call(<span class=\"keyword\">this</span>, ...arguments)</span><br><span class=\"line\">        <span class=\"comment\">// 污染全局</span></span><br><span class=\"line\">        <span class=\"comment\">// Array.prototype.push.call(this, ...arguments)</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"修改observer\"><a href=\"#修改observer\" class=\"headerlink\" title=\"修改observer\"></a>修改observer</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 监听对象属性</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">observer</span>(<span class=\"params\">target</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> target !== <span class=\"string\">'object'</span> || target === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 不是对象或数组</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> target</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 污染全局的 Array 原型</span></span><br><span class=\"line\">    <span class=\"comment\">// Array.prototype.push = function () &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     updateView()</span></span><br><span class=\"line\">    <span class=\"comment\">//     ...</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(target)) &#123;</span><br><span class=\"line\">        target.__proto__ = arrProto</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 重新定义各个属性（for in 也可以遍历数组）</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> target) &#123;</span><br><span class=\"line\">        defineReactive(target, key, target[key])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n","site":{"data":{}},"excerpt":"<h2 id=\"Object-defineProperty-obj-prop-desc\"><a href=\"#Object-defineProperty-obj-prop-desc\" class=\"headerlink\" title=\"Object.defineProperty(obj, prop, desc)\"></a>Object.defineProperty(obj, prop, desc)</h2><p><strong>核心的API</strong></p>","more":"<h3 id=\"监听对象（简单）\"><a href=\"#监听对象（简单）\" class=\"headerlink\" title=\"监听对象（简单）\"></a>监听对象（简单）</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> data = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">'zhangsan'</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(data, <span class=\"string\">'name'</span> ,&#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span>: function()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'get '</span>+name)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">set</span>: function (value)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'set '</span>+value)</span><br><span class=\"line\">        name = value </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"复杂对象监听\"><a href=\"#复杂对象监听\" class=\"headerlink\" title=\"复杂对象监听\"></a>复杂对象监听</h3><h4 id=\"线程上的代码\"><a href=\"#线程上的代码\" class=\"headerlink\" title=\"线程上的代码\"></a>线程上的代码</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 准备数据</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> data = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'zhangsan'</span>,</span><br><span class=\"line\">    age: <span class=\"number\">20</span>,</span><br><span class=\"line\">    info: &#123;</span><br><span class=\"line\">        address: <span class=\"string\">'北京'</span> <span class=\"comment\">// 需要深度监听</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    nums: [<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 监听数据</span></span><br><span class=\"line\">observer(data)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试</span></span><br><span class=\"line\">data.name = <span class=\"string\">'lisi'</span></span><br><span class=\"line\">data.age = <span class=\"number\">21</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"observer方法\"><a href=\"#observer方法\" class=\"headerlink\" title=\"observer方法\"></a>observer方法</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 监听对象属性</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">observer</span>(<span class=\"params\">target</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> target !== <span class=\"string\">'object'</span> || target === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 不是对象或数组</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> target</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 重新定义各个属性（for in 也可以遍历数组）</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> target) &#123;</span><br><span class=\"line\">        defineReactive(target, key, target[key])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"defineReactive方法\"><a href=\"#defineReactive方法\" class=\"headerlink\" title=\"defineReactive方法\"></a>defineReactive方法</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 重新定义属性，监听起来</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">defineReactive</span>(<span class=\"params\">target, key, value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 深度监听</span></span><br><span class=\"line\">    observer(value)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 核心 API</span></span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.defineProperty(target, key, &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span>() &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> value</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"keyword\">set</span>(newValue) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (newValue !== value) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 深度监听</span></span><br><span class=\"line\">                observer(newValue)</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 设置新值</span></span><br><span class=\"line\">                <span class=\"comment\">// 注意，value 一直在闭包中，此处设置完之后，再 get 时也是会获取最新的值</span></span><br><span class=\"line\">                value = newValue</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 触发更新视图</span></span><br><span class=\"line\">                updateView()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>此处使用递归的形式，进行对象的向下遍历</p>\n</blockquote>\n<h4 id=\"Object-defineProperty的缺点\"><a href=\"#Object-defineProperty的缺点\" class=\"headerlink\" title=\"Object.defineProperty的缺点\"></a>Object.defineProperty的缺点</h4><ul>\n<li>深度监听，需要一次性递归到底，计算量大</li>\n<li>无法监听新增/删除属性（所以使用Vue的set和delete方法）</li>\n<li>无法监听原生数组，需要特殊处理</li>\n</ul>\n<h3 id=\"数组监听\"><a href=\"#数组监听\" class=\"headerlink\" title=\"数组监听\"></a>数组监听</h3><h4 id=\"对数组进行重新定义\"><a href=\"#对数组进行重新定义\" class=\"headerlink\" title=\"对数组进行重新定义\"></a>对数组进行重新定义</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 重新定义数组原型</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> oldArrayProperty = <span class=\"built_in\">Array</span>.prototype</span><br><span class=\"line\"><span class=\"comment\">// 创建新对象，原型指向 oldArrayProperty ，再扩展新的方法不会影响原型</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> arrProto = <span class=\"built_in\">Object</span>.create(oldArrayProperty);</span><br><span class=\"line\">[<span class=\"string\">'push'</span>, <span class=\"string\">'pop'</span>, <span class=\"string\">'shift'</span>, <span class=\"string\">'unshift'</span>, <span class=\"string\">'splice'</span>].forEach(<span class=\"function\"><span class=\"params\">methodName</span> =&gt;</span> &#123;</span><br><span class=\"line\">    arrProto[methodName] = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        updateView() <span class=\"comment\">// 触发视图更新</span></span><br><span class=\"line\">        <span class=\"comment\">// 在执行updateView后，任然能够继续执行数组对象原有的方法</span></span><br><span class=\"line\">        oldArrayProperty[methodName].call(<span class=\"keyword\">this</span>, ...arguments)</span><br><span class=\"line\">        <span class=\"comment\">// 污染全局</span></span><br><span class=\"line\">        <span class=\"comment\">// Array.prototype.push.call(this, ...arguments)</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"修改observer\"><a href=\"#修改observer\" class=\"headerlink\" title=\"修改observer\"></a>修改observer</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 监听对象属性</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">observer</span>(<span class=\"params\">target</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> target !== <span class=\"string\">'object'</span> || target === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 不是对象或数组</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> target</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 污染全局的 Array 原型</span></span><br><span class=\"line\">    <span class=\"comment\">// Array.prototype.push = function () &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     updateView()</span></span><br><span class=\"line\">    <span class=\"comment\">//     ...</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(target)) &#123;</span><br><span class=\"line\">        target.__proto__ = arrProto</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 重新定义各个属性（for in 也可以遍历数组）</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> target) &#123;</span><br><span class=\"line\">        defineReactive(target, key, target[key])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"layout":"[post]","title":"Vue组件的高级特性","date":"2019-11-21T09:52:51.000Z","_content":"## 自定义v-model\n#### model.vue\n<!-- more -->\n```html\n<template>\n    <!-- 例如：vue 颜色选择 -->\n    <input type=\"text\"\n        :value=\"text1\"\n        @input=\"$emit('change1', $event.target.value)\"\n    >\n    <!--\n        1. 上面的 input 使用了 :value 而不是 v-model\n        2. 上面的 change1 和 model.event1 要对应起来\n        3. text1 属性对应起来\n    -->\n</template>\n\n<script>\nexport default {\n    model: {\n        prop: 'text1', // 对应 props text1\n        event: 'change1'\n    },\n    props: {\n        text1: String,\n        default() {\n            return ''\n        }\n    }\n}\n</script>\n```\n使用\n```html\n   <p>{{name}}</p>\n   <CustomVModel v-model=\"name\"/>\n```\n\n## $nextTick\n\n```html\n<template>\n  <div id=\"app\">\n    <ul ref=\"ul1\">\n        <li v-for=\"(item, index) in list\" :key=\"index\">\n            {{item}}\n        </li>\n    </ul>\n    <button @click=\"addItem\">添加一项</button>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'app',\n  data() {\n      return {\n        list: ['a', 'b', 'c']\n      }\n  },\n  methods: {\n    addItem() {\n        this.list.push(`${Date.now()}`)\n        this.list.push(`${Date.now()}`)\n        this.list.push(`${Date.now()}`)\n\n        // 1. 异步渲染，$nextTick 待 DOM 渲染完再回调\n        // 2. 页面渲染时会将 data 的修改做整合，多次 data 修改只会渲染一次\n        this.$nextTick(() => {\n          // 获取 DOM 元素\n          const ulElem = this.$refs.ul1\n          // eslint-disable-next-line\n          console.log( ulElem.childNodes.length )\n        })\n    }\n  }\n}\n</script>\n\n\n```\n\n## slot（插槽）\n### slot\n#### 子组件\n```html\n<template>\n    <a :href=\"url\">\n        <slot>\n            默认内容，即父组件没设置内容时，这里显示\n        </slot>\n    </a>\n</template>\n\n<script>\nexport default {\n    props: ['url'],\n    data() {\n        return {}\n    }\n}\n</script>\n```\n#### 父组件使用时\n\n```html\n <SlotDemo :url=\"website.url\">\n    {{website.title}}\n </SlotDemo>\n```\n### scope slot\n#### 子组件\n\n```html\n<template>\n    <a :href=\"url\">\n        <slot :slotData=\"website\">\n            {{website.subTitle}} <!-- 默认值显示 subTitle ，即父组件不传内容时 -->\n        </slot>\n    </a>\n</template>\n\n<script>\nexport default {\n    props: ['url'],\n    data() {\n        return {\n            website: {\n                url: 'http://wangEditor.com/',\n                title: 'wangEditor',\n                subTitle: '轻量级富文本编辑器'\n            }\n        }\n    }\n}\n</script>\n```\n#### 父组件\n\n```html\n        <ScopedSlotDemo :url=\"website.url\">\n            <template v-slot=\"slotProps\">\n                {{slotProps.slotData.title}}\n            </template>\n        </ScopedSlotDemo>\n```\n\n## 动态、异步组件\n### 动态组件\n#### 用法\n\n```html\n<component :is=\"xxxx(组件名称)\"/>\n// 此处需要写动态的名字（在data中绑定）\n```\n### 异步组件\n#### 使用\n```js\n  components: {\n        FormDemo: () => {\n            return import('../BaseUse/FormDemo')\n        }\n    },\n```\n或者\n\n```js\n  components: {\n        FormDemo: () => import('../BaseUse/FormDemo')\n    },\n```\n\n## keep-alive\n - vue内置组件，能在组件切换过程中将状态保留在内存中，防止重复渲染DOM\n - keep-alive是用在一个直属子组件被开关的情形，同时只有一个子组件在渲染，若有v-for则不会工作\n\n注：keep-alive是一个抽象组件，自身不会渲染一个DOM元素，也不会出现在父组件链中\n\n```html\n        <keep-alive> <!-- tab 切换 -->\n            <KeepAliveStageA v-if=\"state === 'A'\"/> <!-- v-show -->\n            <KeepAliveStageB v-if=\"state === 'B'\"/>\n            <KeepAliveStageC v-if=\"state === 'C'\"/>\n        </keep-alive>\n```\n区别：\n- v-if在切换过程中会销毁并创建\n- v-show在首次加载组件时，会三个同时创建\n- keep-alive会在在切换时候创建，但是不会销毁\n\n\n## mixin\n混入 (mixin) 提供了一种非常灵活的方式，来分发 Vue 组件中的可复用功能。一个混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被“混合”进入该组件本身的选项。\n### mixin.js\n```js\nexport default {\n    data() {\n        return {\n            city: '北京'\n        }\n    },\n    methods: {\n        showName() {\n            // eslint-disable-next-line\n            console.log(this.name)\n        }\n    },\n    mounted() {\n        // eslint-disable-next-line\n        console.log('mixin mounted', this.name)\n    }\n}\n\n```\n### 使用\n\n```html\n<template>\n    <div>\n        <p>{{name}} {{major}} {{city}}</p>\n        <button @click=\"showName\">显示姓名</button>\n    </div>\n</template>\n\n<script>\nimport myMixin from './mixin'\n\nexport default {\n    mixins: [myMixin], // 可以添加多个，会自动合并起来\n    data() {\n        return {\n            name: '双越',\n            major: 'web 前端'\n        }\n    },\n    methods: {\n    },\n    mounted() {\n        // eslint-disable-next-line\n        console.log('component mounted', this.name)\n    }\n}\n</script>\n```\n### 注意\n- mixin对象则local对象覆盖mixin对象\n- 生命周期钩子函数则是合并执行，先执行mixin后执行local\n\n### mixin的问题\n- 变量来源不明确，不利于阅读\n- 多mixin可能造成命名冲突\n- mixin和组件可能出现多对多的关系，复杂度高","source":"_posts/Vue组件的高级特性.md","raw":"---\nlayout: '[post]'\ntitle: Vue组件的高级特性\ndate: 2019-11-21 17:52:51\ntags: Vue\n---\n## 自定义v-model\n#### model.vue\n<!-- more -->\n```html\n<template>\n    <!-- 例如：vue 颜色选择 -->\n    <input type=\"text\"\n        :value=\"text1\"\n        @input=\"$emit('change1', $event.target.value)\"\n    >\n    <!--\n        1. 上面的 input 使用了 :value 而不是 v-model\n        2. 上面的 change1 和 model.event1 要对应起来\n        3. text1 属性对应起来\n    -->\n</template>\n\n<script>\nexport default {\n    model: {\n        prop: 'text1', // 对应 props text1\n        event: 'change1'\n    },\n    props: {\n        text1: String,\n        default() {\n            return ''\n        }\n    }\n}\n</script>\n```\n使用\n```html\n   <p>{{name}}</p>\n   <CustomVModel v-model=\"name\"/>\n```\n\n## $nextTick\n\n```html\n<template>\n  <div id=\"app\">\n    <ul ref=\"ul1\">\n        <li v-for=\"(item, index) in list\" :key=\"index\">\n            {{item}}\n        </li>\n    </ul>\n    <button @click=\"addItem\">添加一项</button>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'app',\n  data() {\n      return {\n        list: ['a', 'b', 'c']\n      }\n  },\n  methods: {\n    addItem() {\n        this.list.push(`${Date.now()}`)\n        this.list.push(`${Date.now()}`)\n        this.list.push(`${Date.now()}`)\n\n        // 1. 异步渲染，$nextTick 待 DOM 渲染完再回调\n        // 2. 页面渲染时会将 data 的修改做整合，多次 data 修改只会渲染一次\n        this.$nextTick(() => {\n          // 获取 DOM 元素\n          const ulElem = this.$refs.ul1\n          // eslint-disable-next-line\n          console.log( ulElem.childNodes.length )\n        })\n    }\n  }\n}\n</script>\n\n\n```\n\n## slot（插槽）\n### slot\n#### 子组件\n```html\n<template>\n    <a :href=\"url\">\n        <slot>\n            默认内容，即父组件没设置内容时，这里显示\n        </slot>\n    </a>\n</template>\n\n<script>\nexport default {\n    props: ['url'],\n    data() {\n        return {}\n    }\n}\n</script>\n```\n#### 父组件使用时\n\n```html\n <SlotDemo :url=\"website.url\">\n    {{website.title}}\n </SlotDemo>\n```\n### scope slot\n#### 子组件\n\n```html\n<template>\n    <a :href=\"url\">\n        <slot :slotData=\"website\">\n            {{website.subTitle}} <!-- 默认值显示 subTitle ，即父组件不传内容时 -->\n        </slot>\n    </a>\n</template>\n\n<script>\nexport default {\n    props: ['url'],\n    data() {\n        return {\n            website: {\n                url: 'http://wangEditor.com/',\n                title: 'wangEditor',\n                subTitle: '轻量级富文本编辑器'\n            }\n        }\n    }\n}\n</script>\n```\n#### 父组件\n\n```html\n        <ScopedSlotDemo :url=\"website.url\">\n            <template v-slot=\"slotProps\">\n                {{slotProps.slotData.title}}\n            </template>\n        </ScopedSlotDemo>\n```\n\n## 动态、异步组件\n### 动态组件\n#### 用法\n\n```html\n<component :is=\"xxxx(组件名称)\"/>\n// 此处需要写动态的名字（在data中绑定）\n```\n### 异步组件\n#### 使用\n```js\n  components: {\n        FormDemo: () => {\n            return import('../BaseUse/FormDemo')\n        }\n    },\n```\n或者\n\n```js\n  components: {\n        FormDemo: () => import('../BaseUse/FormDemo')\n    },\n```\n\n## keep-alive\n - vue内置组件，能在组件切换过程中将状态保留在内存中，防止重复渲染DOM\n - keep-alive是用在一个直属子组件被开关的情形，同时只有一个子组件在渲染，若有v-for则不会工作\n\n注：keep-alive是一个抽象组件，自身不会渲染一个DOM元素，也不会出现在父组件链中\n\n```html\n        <keep-alive> <!-- tab 切换 -->\n            <KeepAliveStageA v-if=\"state === 'A'\"/> <!-- v-show -->\n            <KeepAliveStageB v-if=\"state === 'B'\"/>\n            <KeepAliveStageC v-if=\"state === 'C'\"/>\n        </keep-alive>\n```\n区别：\n- v-if在切换过程中会销毁并创建\n- v-show在首次加载组件时，会三个同时创建\n- keep-alive会在在切换时候创建，但是不会销毁\n\n\n## mixin\n混入 (mixin) 提供了一种非常灵活的方式，来分发 Vue 组件中的可复用功能。一个混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被“混合”进入该组件本身的选项。\n### mixin.js\n```js\nexport default {\n    data() {\n        return {\n            city: '北京'\n        }\n    },\n    methods: {\n        showName() {\n            // eslint-disable-next-line\n            console.log(this.name)\n        }\n    },\n    mounted() {\n        // eslint-disable-next-line\n        console.log('mixin mounted', this.name)\n    }\n}\n\n```\n### 使用\n\n```html\n<template>\n    <div>\n        <p>{{name}} {{major}} {{city}}</p>\n        <button @click=\"showName\">显示姓名</button>\n    </div>\n</template>\n\n<script>\nimport myMixin from './mixin'\n\nexport default {\n    mixins: [myMixin], // 可以添加多个，会自动合并起来\n    data() {\n        return {\n            name: '双越',\n            major: 'web 前端'\n        }\n    },\n    methods: {\n    },\n    mounted() {\n        // eslint-disable-next-line\n        console.log('component mounted', this.name)\n    }\n}\n</script>\n```\n### 注意\n- mixin对象则local对象覆盖mixin对象\n- 生命周期钩子函数则是合并执行，先执行mixin后执行local\n\n### mixin的问题\n- 变量来源不明确，不利于阅读\n- 多mixin可能造成命名冲突\n- mixin和组件可能出现多对多的关系，复杂度高","slug":"Vue组件的高级特性","published":1,"updated":"2020-05-06T09:53:47.000Z","comments":1,"photos":[],"link":"","_id":"ckbftlm68000u7w2p9upv2fgh","content":"<h2 id=\"自定义v-model\"><a href=\"#自定义v-model\" class=\"headerlink\" title=\"自定义v-model\"></a>自定义v-model</h2><h4 id=\"model-vue\"><a href=\"#model-vue\" class=\"headerlink\" title=\"model.vue\"></a>model.vue</h4><a id=\"more\"></a>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 例如：vue 颜色选择 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">:value</span>=<span class=\"string\">\"text1\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        @<span class=\"attr\">input</span>=<span class=\"string\">\"$emit('change1', $event.target.value)\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    &gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">        1. 上面的 input 使用了 :value 而不是 v-model</span></span><br><span class=\"line\"><span class=\"comment\">        2. 上面的 change1 和 model.event1 要对应起来</span></span><br><span class=\"line\"><span class=\"comment\">        3. text1 属性对应起来</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\">    model: &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        prop: <span class=\"string\">'text1'</span>, <span class=\"comment\">// 对应 props text1</span></span></span><br><span class=\"line\"><span class=\"actionscript\">        event: <span class=\"string\">'change1'</span></span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    props: &#123;</span><br><span class=\"line\"><span class=\"javascript\">        text1: <span class=\"built_in\">String</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">default</span>() &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"keyword\">return</span> <span class=\"string\">''</span></span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>使用</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">CustomVModel</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"name\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"nextTick\"><a href=\"#nextTick\" class=\"headerlink\" title=\"$nextTick\"></a>$nextTick</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"ul1\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(item, index) in list\"</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"index\"</span>&gt;</span></span><br><span class=\"line\">            &#123;&#123;item&#125;&#125;</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"addItem\"</span>&gt;</span>添加一项<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">  name: <span class=\"string\">'app'</span>,</span></span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">        list: [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>]</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    addItem() &#123;</span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">this</span>.list.push(<span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"built_in\">Date</span>.now()&#125;</span>`</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">this</span>.list.push(<span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"built_in\">Date</span>.now()&#125;</span>`</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">this</span>.list.push(<span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"built_in\">Date</span>.now()&#125;</span>`</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// 1. 异步渲染，$nextTick 待 DOM 渲染完再回调</span></span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// 2. 页面渲染时会将 data 的修改做整合，多次 data 修改只会渲染一次</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">this</span>.$nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">          <span class=\"comment\">// 获取 DOM 元素</span></span></span><br><span class=\"line\"><span class=\"actionscript\">          <span class=\"keyword\">const</span> ulElem = <span class=\"keyword\">this</span>.$refs.ul1</span></span><br><span class=\"line\"><span class=\"actionscript\">          <span class=\"comment\">// eslint-disable-next-line</span></span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"built_in\">console</span>.log( ulElem.childNodes.length )</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"slot（插槽）\"><a href=\"#slot（插槽）\" class=\"headerlink\" title=\"slot（插槽）\"></a>slot（插槽）</h2><h3 id=\"slot\"><a href=\"#slot\" class=\"headerlink\" title=\"slot\"></a>slot</h3><h4 id=\"子组件\"><a href=\"#子组件\" class=\"headerlink\" title=\"子组件\"></a>子组件</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">:href</span>=<span class=\"string\">\"url\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">            默认内容，即父组件没设置内容时，这里显示</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">    props: [<span class=\"string\">'url'</span>],</span></span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">return</span> &#123;&#125;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"父组件使用时\"><a href=\"#父组件使用时\" class=\"headerlink\" title=\"父组件使用时\"></a>父组件使用时</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">SlotDemo</span> <span class=\"attr\">:url</span>=<span class=\"string\">\"website.url\"</span>&gt;</span></span><br><span class=\"line\">   &#123;&#123;website.title&#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">SlotDemo</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"scope-slot\"><a href=\"#scope-slot\" class=\"headerlink\" title=\"scope slot\"></a>scope slot</h3><h4 id=\"子组件-1\"><a href=\"#子组件-1\" class=\"headerlink\" title=\"子组件\"></a>子组件</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">:href</span>=<span class=\"string\">\"url\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">:slotData</span>=<span class=\"string\">\"website\"</span>&gt;</span></span><br><span class=\"line\">            &#123;&#123;website.subTitle&#125;&#125; <span class=\"comment\">&lt;!-- 默认值显示 subTitle ，即父组件不传内容时 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">    props: [<span class=\"string\">'url'</span>],</span></span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\">            website: &#123;</span><br><span class=\"line\"><span class=\"actionscript\">                url: <span class=\"string\">'http://wangEditor.com/'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">                title: <span class=\"string\">'wangEditor'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">                subTitle: <span class=\"string\">'轻量级富文本编辑器'</span></span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"父组件\"><a href=\"#父组件\" class=\"headerlink\" title=\"父组件\"></a>父组件</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ScopedSlotDemo</span> <span class=\"attr\">:url</span>=<span class=\"string\">\"website.url\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot</span>=<span class=\"string\">\"slotProps\"</span>&gt;</span></span><br><span class=\"line\">        &#123;&#123;slotProps.slotData.title&#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ScopedSlotDemo</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"动态、异步组件\"><a href=\"#动态、异步组件\" class=\"headerlink\" title=\"动态、异步组件\"></a>动态、异步组件</h2><h3 id=\"动态组件\"><a href=\"#动态组件\" class=\"headerlink\" title=\"动态组件\"></a>动态组件</h3><h4 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">\"xxxx(组件名称)\"</span>/&gt;</span></span><br><span class=\"line\">// 此处需要写动态的名字（在data中绑定）</span><br></pre></td></tr></table></figure>\n<h3 id=\"异步组件\"><a href=\"#异步组件\" class=\"headerlink\" title=\"异步组件\"></a>异步组件</h3><h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">components: &#123;</span><br><span class=\"line\">      FormDemo: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">import</span>(<span class=\"string\">'../BaseUse/FormDemo'</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">components: &#123;</span><br><span class=\"line\">      FormDemo: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">'../BaseUse/FormDemo'</span>)</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"keep-alive\"><a href=\"#keep-alive\" class=\"headerlink\" title=\"keep-alive\"></a>keep-alive</h2><ul>\n<li>vue内置组件，能在组件切换过程中将状态保留在内存中，防止重复渲染DOM</li>\n<li>keep-alive是用在一个直属子组件被开关的情形，同时只有一个子组件在渲染，若有v-for则不会工作</li>\n</ul>\n<p>注：keep-alive是一个抽象组件，自身不会渲染一个DOM元素，也不会出现在父组件链中</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">keep-alive</span>&gt;</span> <span class=\"comment\">&lt;!-- tab 切换 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">KeepAliveStageA</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"state === 'A'\"</span>/&gt;</span> <span class=\"comment\">&lt;!-- v-show --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">KeepAliveStageB</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"state === 'B'\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">KeepAliveStageC</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"state === 'C'\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>区别：</p>\n<ul>\n<li>v-if在切换过程中会销毁并创建</li>\n<li>v-show在首次加载组件时，会三个同时创建</li>\n<li>keep-alive会在在切换时候创建，但是不会销毁</li>\n</ul>\n<h2 id=\"mixin\"><a href=\"#mixin\" class=\"headerlink\" title=\"mixin\"></a>mixin</h2><p>混入 (mixin) 提供了一种非常灵活的方式，来分发 Vue 组件中的可复用功能。一个混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被“混合”进入该组件本身的选项。</p>\n<h3 id=\"mixin-js\"><a href=\"#mixin-js\" class=\"headerlink\" title=\"mixin.js\"></a>mixin.js</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            city: <span class=\"string\">'北京'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        showName() &#123;</span><br><span class=\"line\">            <span class=\"comment\">// eslint-disable-next-line</span></span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    mounted() &#123;</span><br><span class=\"line\">        <span class=\"comment\">// eslint-disable-next-line</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'mixin mounted'</span>, <span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用-1\"><a href=\"#使用-1\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;name&#125;&#125; &#123;&#123;major&#125;&#125; &#123;&#123;city&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"showName\"</span>&gt;</span>显示姓名<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span> myMixin <span class=\"keyword\">from</span> <span class=\"string\">'./mixin'</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">    mixins: [myMixin], <span class=\"comment\">// 可以添加多个，会自动合并起来</span></span></span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">            name: <span class=\"string\">'双越'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">            major: <span class=\"string\">'web 前端'</span></span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    mounted() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// eslint-disable-next-line</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'component mounted'</span>, <span class=\"keyword\">this</span>.name)</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><ul>\n<li>mixin对象则local对象覆盖mixin对象</li>\n<li>生命周期钩子函数则是合并执行，先执行mixin后执行local</li>\n</ul>\n<h3 id=\"mixin的问题\"><a href=\"#mixin的问题\" class=\"headerlink\" title=\"mixin的问题\"></a>mixin的问题</h3><ul>\n<li>变量来源不明确，不利于阅读</li>\n<li>多mixin可能造成命名冲突</li>\n<li>mixin和组件可能出现多对多的关系，复杂度高</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"自定义v-model\"><a href=\"#自定义v-model\" class=\"headerlink\" title=\"自定义v-model\"></a>自定义v-model</h2><h4 id=\"model-vue\"><a href=\"#model-vue\" class=\"headerlink\" title=\"model.vue\"></a>model.vue</h4>","more":"<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 例如：vue 颜色选择 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">:value</span>=<span class=\"string\">\"text1\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        @<span class=\"attr\">input</span>=<span class=\"string\">\"$emit('change1', $event.target.value)\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    &gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">        1. 上面的 input 使用了 :value 而不是 v-model</span></span><br><span class=\"line\"><span class=\"comment\">        2. 上面的 change1 和 model.event1 要对应起来</span></span><br><span class=\"line\"><span class=\"comment\">        3. text1 属性对应起来</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\">    model: &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        prop: <span class=\"string\">'text1'</span>, <span class=\"comment\">// 对应 props text1</span></span></span><br><span class=\"line\"><span class=\"actionscript\">        event: <span class=\"string\">'change1'</span></span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    props: &#123;</span><br><span class=\"line\"><span class=\"javascript\">        text1: <span class=\"built_in\">String</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">default</span>() &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"keyword\">return</span> <span class=\"string\">''</span></span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>使用</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">CustomVModel</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"name\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"nextTick\"><a href=\"#nextTick\" class=\"headerlink\" title=\"$nextTick\"></a>$nextTick</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"ul1\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(item, index) in list\"</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"index\"</span>&gt;</span></span><br><span class=\"line\">            &#123;&#123;item&#125;&#125;</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"addItem\"</span>&gt;</span>添加一项<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">  name: <span class=\"string\">'app'</span>,</span></span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">        list: [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>]</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    addItem() &#123;</span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">this</span>.list.push(<span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"built_in\">Date</span>.now()&#125;</span>`</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">this</span>.list.push(<span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"built_in\">Date</span>.now()&#125;</span>`</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">this</span>.list.push(<span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"built_in\">Date</span>.now()&#125;</span>`</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// 1. 异步渲染，$nextTick 待 DOM 渲染完再回调</span></span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// 2. 页面渲染时会将 data 的修改做整合，多次 data 修改只会渲染一次</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">this</span>.$nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">          <span class=\"comment\">// 获取 DOM 元素</span></span></span><br><span class=\"line\"><span class=\"actionscript\">          <span class=\"keyword\">const</span> ulElem = <span class=\"keyword\">this</span>.$refs.ul1</span></span><br><span class=\"line\"><span class=\"actionscript\">          <span class=\"comment\">// eslint-disable-next-line</span></span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"built_in\">console</span>.log( ulElem.childNodes.length )</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"slot（插槽）\"><a href=\"#slot（插槽）\" class=\"headerlink\" title=\"slot（插槽）\"></a>slot（插槽）</h2><h3 id=\"slot\"><a href=\"#slot\" class=\"headerlink\" title=\"slot\"></a>slot</h3><h4 id=\"子组件\"><a href=\"#子组件\" class=\"headerlink\" title=\"子组件\"></a>子组件</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">:href</span>=<span class=\"string\">\"url\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">            默认内容，即父组件没设置内容时，这里显示</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">    props: [<span class=\"string\">'url'</span>],</span></span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">return</span> &#123;&#125;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"父组件使用时\"><a href=\"#父组件使用时\" class=\"headerlink\" title=\"父组件使用时\"></a>父组件使用时</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">SlotDemo</span> <span class=\"attr\">:url</span>=<span class=\"string\">\"website.url\"</span>&gt;</span></span><br><span class=\"line\">   &#123;&#123;website.title&#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">SlotDemo</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"scope-slot\"><a href=\"#scope-slot\" class=\"headerlink\" title=\"scope slot\"></a>scope slot</h3><h4 id=\"子组件-1\"><a href=\"#子组件-1\" class=\"headerlink\" title=\"子组件\"></a>子组件</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">:href</span>=<span class=\"string\">\"url\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">:slotData</span>=<span class=\"string\">\"website\"</span>&gt;</span></span><br><span class=\"line\">            &#123;&#123;website.subTitle&#125;&#125; <span class=\"comment\">&lt;!-- 默认值显示 subTitle ，即父组件不传内容时 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">    props: [<span class=\"string\">'url'</span>],</span></span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\">            website: &#123;</span><br><span class=\"line\"><span class=\"actionscript\">                url: <span class=\"string\">'http://wangEditor.com/'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">                title: <span class=\"string\">'wangEditor'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">                subTitle: <span class=\"string\">'轻量级富文本编辑器'</span></span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"父组件\"><a href=\"#父组件\" class=\"headerlink\" title=\"父组件\"></a>父组件</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ScopedSlotDemo</span> <span class=\"attr\">:url</span>=<span class=\"string\">\"website.url\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot</span>=<span class=\"string\">\"slotProps\"</span>&gt;</span></span><br><span class=\"line\">        &#123;&#123;slotProps.slotData.title&#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ScopedSlotDemo</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"动态、异步组件\"><a href=\"#动态、异步组件\" class=\"headerlink\" title=\"动态、异步组件\"></a>动态、异步组件</h2><h3 id=\"动态组件\"><a href=\"#动态组件\" class=\"headerlink\" title=\"动态组件\"></a>动态组件</h3><h4 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">\"xxxx(组件名称)\"</span>/&gt;</span></span><br><span class=\"line\">// 此处需要写动态的名字（在data中绑定）</span><br></pre></td></tr></table></figure>\n<h3 id=\"异步组件\"><a href=\"#异步组件\" class=\"headerlink\" title=\"异步组件\"></a>异步组件</h3><h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">components: &#123;</span><br><span class=\"line\">      FormDemo: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">import</span>(<span class=\"string\">'../BaseUse/FormDemo'</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">components: &#123;</span><br><span class=\"line\">      FormDemo: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">'../BaseUse/FormDemo'</span>)</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"keep-alive\"><a href=\"#keep-alive\" class=\"headerlink\" title=\"keep-alive\"></a>keep-alive</h2><ul>\n<li>vue内置组件，能在组件切换过程中将状态保留在内存中，防止重复渲染DOM</li>\n<li>keep-alive是用在一个直属子组件被开关的情形，同时只有一个子组件在渲染，若有v-for则不会工作</li>\n</ul>\n<p>注：keep-alive是一个抽象组件，自身不会渲染一个DOM元素，也不会出现在父组件链中</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">keep-alive</span>&gt;</span> <span class=\"comment\">&lt;!-- tab 切换 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">KeepAliveStageA</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"state === 'A'\"</span>/&gt;</span> <span class=\"comment\">&lt;!-- v-show --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">KeepAliveStageB</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"state === 'B'\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">KeepAliveStageC</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"state === 'C'\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>区别：</p>\n<ul>\n<li>v-if在切换过程中会销毁并创建</li>\n<li>v-show在首次加载组件时，会三个同时创建</li>\n<li>keep-alive会在在切换时候创建，但是不会销毁</li>\n</ul>\n<h2 id=\"mixin\"><a href=\"#mixin\" class=\"headerlink\" title=\"mixin\"></a>mixin</h2><p>混入 (mixin) 提供了一种非常灵活的方式，来分发 Vue 组件中的可复用功能。一个混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被“混合”进入该组件本身的选项。</p>\n<h3 id=\"mixin-js\"><a href=\"#mixin-js\" class=\"headerlink\" title=\"mixin.js\"></a>mixin.js</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            city: <span class=\"string\">'北京'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        showName() &#123;</span><br><span class=\"line\">            <span class=\"comment\">// eslint-disable-next-line</span></span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    mounted() &#123;</span><br><span class=\"line\">        <span class=\"comment\">// eslint-disable-next-line</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'mixin mounted'</span>, <span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用-1\"><a href=\"#使用-1\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;name&#125;&#125; &#123;&#123;major&#125;&#125; &#123;&#123;city&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"showName\"</span>&gt;</span>显示姓名<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span> myMixin <span class=\"keyword\">from</span> <span class=\"string\">'./mixin'</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">    mixins: [myMixin], <span class=\"comment\">// 可以添加多个，会自动合并起来</span></span></span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">            name: <span class=\"string\">'双越'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">            major: <span class=\"string\">'web 前端'</span></span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    mounted() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// eslint-disable-next-line</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'component mounted'</span>, <span class=\"keyword\">this</span>.name)</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><ul>\n<li>mixin对象则local对象覆盖mixin对象</li>\n<li>生命周期钩子函数则是合并执行，先执行mixin后执行local</li>\n</ul>\n<h3 id=\"mixin的问题\"><a href=\"#mixin的问题\" class=\"headerlink\" title=\"mixin的问题\"></a>mixin的问题</h3><ul>\n<li>变量来源不明确，不利于阅读</li>\n<li>多mixin可能造成命名冲突</li>\n<li>mixin和组件可能出现多对多的关系，复杂度高</li>\n</ul>"},{"layout":"[post]","title":"Vue组件渲染过程","date":"2020-03-11T05:58:06.000Z","_content":"## 初次渲染过程\n\n1. 解析模版为render函数（编译打包时已经完成，开发环境下完成）（vue-loader）\n2. 触发响应式，监听data属性，getter setter\n3. 执行render函数，生成vnode，patch（elem,vnode）\n\n<!-- more -->\n## 更新过程\n\n1. 修改data，触发setter（此前在getter中已经被监听）\n2. 重新执行render函数，生成newVnode\n3. patch(vnode,newVnode)\n\n## 异步渲染过程\n\n1. $nextTick\n2. 汇总data的修改一次性更新视图\n3. 修改DOM操作次数，提升性能\n\n\n","source":"_posts/Vue组件渲染过程.md","raw":"---\nlayout: '[post]'\ntitle: Vue组件渲染过程\ndate: 2020-03-11 13:58:06\ntags:\n---\n## 初次渲染过程\n\n1. 解析模版为render函数（编译打包时已经完成，开发环境下完成）（vue-loader）\n2. 触发响应式，监听data属性，getter setter\n3. 执行render函数，生成vnode，patch（elem,vnode）\n\n<!-- more -->\n## 更新过程\n\n1. 修改data，触发setter（此前在getter中已经被监听）\n2. 重新执行render函数，生成newVnode\n3. patch(vnode,newVnode)\n\n## 异步渲染过程\n\n1. $nextTick\n2. 汇总data的修改一次性更新视图\n3. 修改DOM操作次数，提升性能\n\n\n","slug":"Vue组件渲染过程","published":1,"updated":"2020-05-13T06:05:27.000Z","comments":1,"photos":[],"link":"","_id":"ckbftlm6a000x7w2p49rug8lm","content":"<h2 id=\"初次渲染过程\"><a href=\"#初次渲染过程\" class=\"headerlink\" title=\"初次渲染过程\"></a>初次渲染过程</h2><ol>\n<li>解析模版为render函数（编译打包时已经完成，开发环境下完成）（vue-loader）</li>\n<li>触发响应式，监听data属性，getter setter</li>\n<li>执行render函数，生成vnode，patch（elem,vnode）</li>\n</ol>\n<a id=\"more\"></a>\n<h2 id=\"更新过程\"><a href=\"#更新过程\" class=\"headerlink\" title=\"更新过程\"></a>更新过程</h2><ol>\n<li>修改data，触发setter（此前在getter中已经被监听）</li>\n<li>重新执行render函数，生成newVnode</li>\n<li>patch(vnode,newVnode)</li>\n</ol>\n<h2 id=\"异步渲染过程\"><a href=\"#异步渲染过程\" class=\"headerlink\" title=\"异步渲染过程\"></a>异步渲染过程</h2><ol>\n<li>$nextTick</li>\n<li>汇总data的修改一次性更新视图</li>\n<li>修改DOM操作次数，提升性能</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h2 id=\"初次渲染过程\"><a href=\"#初次渲染过程\" class=\"headerlink\" title=\"初次渲染过程\"></a>初次渲染过程</h2><ol>\n<li>解析模版为render函数（编译打包时已经完成，开发环境下完成）（vue-loader）</li>\n<li>触发响应式，监听data属性，getter setter</li>\n<li>执行render函数，生成vnode，patch（elem,vnode）</li>\n</ol>","more":"<h2 id=\"更新过程\"><a href=\"#更新过程\" class=\"headerlink\" title=\"更新过程\"></a>更新过程</h2><ol>\n<li>修改data，触发setter（此前在getter中已经被监听）</li>\n<li>重新执行render函数，生成newVnode</li>\n<li>patch(vnode,newVnode)</li>\n</ol>\n<h2 id=\"异步渲染过程\"><a href=\"#异步渲染过程\" class=\"headerlink\" title=\"异步渲染过程\"></a>异步渲染过程</h2><ol>\n<li>$nextTick</li>\n<li>汇总data的修改一次性更新视图</li>\n<li>修改DOM操作次数，提升性能</li>\n</ol>"},{"layout":"[post]","title":"Vue组件通讯","date":"2019-11-11T09:51:37.000Z","_content":"## prop和$emit\n<!-- more -->\n### index.vue\n\n```html\n<template>\n    <div>\n        <Input @add=\"addHandler\"/>\n        <List :list=\"list\" @delete=\"deleteHandler\"/>\n    </div>\n</template>\n\n<script>\nimport Input from './Input'\nimport List from './List'\n\nexport default {\n    components: {\n        Input,\n        List\n    },\n    data() {\n        return {\n            list: [\n                {\n                    id: 'id-1',\n                    title: '标题1'\n                },\n                {\n                    id: 'id-2',\n                    title: '标题2'\n                }\n            ]\n        }\n    },\n    methods: {\n        addHandler(title) {\n            this.list.push({\n                id: `id-${Date.now()}`,\n                title\n            })\n        },\n        deleteHandler(id) {\n            this.list = this.list.filter(item => item.id !== id)\n        }\n    },\n    created() {\n        // eslint-disable-next-line\n        console.log('index created')\n    },\n    mounted() {\n        // eslint-disable-next-line\n        console.log('index mounted')\n    },\n    beforeUpdate() {\n        // eslint-disable-next-line\n        console.log('index before update')\n    },\n    updated() {\n        // eslint-disable-next-line\n        console.log('index updated')\n    },\n}\n</script>\n```\n### input.vue\n\n```html\n<template>\n    <div>\n        <input type=\"text\" v-model=\"title\"/>\n        <button @click=\"addTitle\">add</button>\n    </div>\n</template>\n\n<script>\nimport event from './event'\n\nexport default {\n    data() {\n        return {\n            title: ''\n        }\n    },\n    methods: {\n        addTitle() {\n            // 调用父组件的事件\n            this.$emit('add', this.title)\n\n            // 调用自定义事件\n            event.$emit('onAddTitle', this.title)\n\n            this.title = ''\n        }\n    }\n}\n</script>\n```\n### list.vue\n\n```html\n<template>\n    <div>\n        <ul>\n            <li v-for=\"item in list\" :key=\"item.id\">\n                {{item.title}}\n\n                <button @click=\"deleteItem(item.id)\">删除</button>\n            </li>\n        </ul>\n    </div>\n</template>\n\n<script>\nimport event from './event'\n\nexport default {\n    // props: ['list']\n    props: {\n        // prop 类型和默认值\n        list: {\n            type: Array,\n            default() {\n                return []\n            }\n        }\n    },\n    data() {\n        return {\n\n        }\n    },\n    methods: {\n        deleteItem(id) {\n            this.$emit('delete', id)\n        },\n        addTitleHandler(title) {\n            // eslint-disable-next-line\n            console.log('on add title', title)\n        }\n    },\n    created() {\n        // eslint-disable-next-line\n        console.log('list created')\n    },\n    mounted() {\n        // eslint-disable-next-line\n        console.log('list mounted')\n\n        // 绑定自定义事件\n        event.$on('onAddTitle', this.addTitleHandler)\n    },\n    beforeUpdate() {\n        // eslint-disable-next-line\n        console.log('list before update')\n    },\n    updated() {\n        // eslint-disable-next-line\n        console.log('list updated')\n    },\n    beforeDestroy() {\n        // 及时销毁，否则可能造成内存泄露\n        event.$off('onAddTitle', this.addTitleHandler)\n    }\n}\n</script>\n```\n### event.js\n\n```js\nimport Vue from 'vue'\n\nexport default new Vue()\n\n```\n**在组件销毁时，需要销毁自定义事件。**\n","source":"_posts/Vue组件通讯.md","raw":"---\nlayout: '[post]'\ntitle: Vue组件通讯\ndate: 2019-11-11 17:51:37\ntags: Vue\n---\n## prop和$emit\n<!-- more -->\n### index.vue\n\n```html\n<template>\n    <div>\n        <Input @add=\"addHandler\"/>\n        <List :list=\"list\" @delete=\"deleteHandler\"/>\n    </div>\n</template>\n\n<script>\nimport Input from './Input'\nimport List from './List'\n\nexport default {\n    components: {\n        Input,\n        List\n    },\n    data() {\n        return {\n            list: [\n                {\n                    id: 'id-1',\n                    title: '标题1'\n                },\n                {\n                    id: 'id-2',\n                    title: '标题2'\n                }\n            ]\n        }\n    },\n    methods: {\n        addHandler(title) {\n            this.list.push({\n                id: `id-${Date.now()}`,\n                title\n            })\n        },\n        deleteHandler(id) {\n            this.list = this.list.filter(item => item.id !== id)\n        }\n    },\n    created() {\n        // eslint-disable-next-line\n        console.log('index created')\n    },\n    mounted() {\n        // eslint-disable-next-line\n        console.log('index mounted')\n    },\n    beforeUpdate() {\n        // eslint-disable-next-line\n        console.log('index before update')\n    },\n    updated() {\n        // eslint-disable-next-line\n        console.log('index updated')\n    },\n}\n</script>\n```\n### input.vue\n\n```html\n<template>\n    <div>\n        <input type=\"text\" v-model=\"title\"/>\n        <button @click=\"addTitle\">add</button>\n    </div>\n</template>\n\n<script>\nimport event from './event'\n\nexport default {\n    data() {\n        return {\n            title: ''\n        }\n    },\n    methods: {\n        addTitle() {\n            // 调用父组件的事件\n            this.$emit('add', this.title)\n\n            // 调用自定义事件\n            event.$emit('onAddTitle', this.title)\n\n            this.title = ''\n        }\n    }\n}\n</script>\n```\n### list.vue\n\n```html\n<template>\n    <div>\n        <ul>\n            <li v-for=\"item in list\" :key=\"item.id\">\n                {{item.title}}\n\n                <button @click=\"deleteItem(item.id)\">删除</button>\n            </li>\n        </ul>\n    </div>\n</template>\n\n<script>\nimport event from './event'\n\nexport default {\n    // props: ['list']\n    props: {\n        // prop 类型和默认值\n        list: {\n            type: Array,\n            default() {\n                return []\n            }\n        }\n    },\n    data() {\n        return {\n\n        }\n    },\n    methods: {\n        deleteItem(id) {\n            this.$emit('delete', id)\n        },\n        addTitleHandler(title) {\n            // eslint-disable-next-line\n            console.log('on add title', title)\n        }\n    },\n    created() {\n        // eslint-disable-next-line\n        console.log('list created')\n    },\n    mounted() {\n        // eslint-disable-next-line\n        console.log('list mounted')\n\n        // 绑定自定义事件\n        event.$on('onAddTitle', this.addTitleHandler)\n    },\n    beforeUpdate() {\n        // eslint-disable-next-line\n        console.log('list before update')\n    },\n    updated() {\n        // eslint-disable-next-line\n        console.log('list updated')\n    },\n    beforeDestroy() {\n        // 及时销毁，否则可能造成内存泄露\n        event.$off('onAddTitle', this.addTitleHandler)\n    }\n}\n</script>\n```\n### event.js\n\n```js\nimport Vue from 'vue'\n\nexport default new Vue()\n\n```\n**在组件销毁时，需要销毁自定义事件。**\n","slug":"Vue组件通讯","published":1,"updated":"2020-05-06T09:52:28.000Z","comments":1,"photos":[],"link":"","_id":"ckbftlm6c000z7w2p928lc5aq","content":"<h2 id=\"prop和-emit\"><a href=\"#prop和-emit\" class=\"headerlink\" title=\"prop和$emit\"></a>prop和$emit</h2><a id=\"more\"></a>\n<h3 id=\"index-vue\"><a href=\"#index-vue\" class=\"headerlink\" title=\"index.vue\"></a>index.vue</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Input</span> @<span class=\"attr\">add</span>=<span class=\"string\">\"addHandler\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">List</span> <span class=\"attr\">:list</span>=<span class=\"string\">\"list\"</span> @<span class=\"attr\">delete</span>=<span class=\"string\">\"deleteHandler\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span> Input <span class=\"keyword\">from</span> <span class=\"string\">'./Input'</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span> List <span class=\"keyword\">from</span> <span class=\"string\">'./List'</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">        Input,</span><br><span class=\"line\">        List</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\">            list: [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\"><span class=\"actionscript\">                    id: <span class=\"string\">'id-1'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">                    title: <span class=\"string\">'标题1'</span></span></span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\"><span class=\"actionscript\">                    id: <span class=\"string\">'id-2'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">                    title: <span class=\"string\">'标题2'</span></span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        addHandler(title) &#123;</span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"keyword\">this</span>.list.push(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                id: <span class=\"string\">`id-<span class=\"subst\">$&#123;<span class=\"built_in\">Date</span>.now()&#125;</span>`</span>,</span></span><br><span class=\"line\">                title</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        deleteHandler(id) &#123;</span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">this</span>.list = <span class=\"keyword\">this</span>.list.filter(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.id !== id)</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    created() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// eslint-disable-next-line</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'index created'</span>)</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    mounted() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// eslint-disable-next-line</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'index mounted'</span>)</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    beforeUpdate() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// eslint-disable-next-line</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'index before update'</span>)</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    updated() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// eslint-disable-next-line</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'index updated'</span>)</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"input-vue\"><a href=\"#input-vue\" class=\"headerlink\" title=\"input.vue\"></a>input.vue</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"title\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"addTitle\"</span>&gt;</span>add<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span> event <span class=\"keyword\">from</span> <span class=\"string\">'./event'</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">            title: <span class=\"string\">''</span></span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        addTitle() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// 调用父组件的事件</span></span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'add'</span>, <span class=\"keyword\">this</span>.title)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// 调用自定义事件</span></span></span><br><span class=\"line\"><span class=\"actionscript\">            event.$emit(<span class=\"string\">'onAddTitle'</span>, <span class=\"keyword\">this</span>.title)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"keyword\">this</span>.title = <span class=\"string\">''</span></span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"list-vue\"><a href=\"#list-vue\" class=\"headerlink\" title=\"list.vue\"></a>list.vue</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in list\"</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"item.id\"</span>&gt;</span></span><br><span class=\"line\">                &#123;&#123;item.title&#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"deleteItem(item.id)\"</span>&gt;</span>删除<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span> event <span class=\"keyword\">from</span> <span class=\"string\">'./event'</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"comment\">// props: ['list']</span></span></span><br><span class=\"line\">    props: &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// prop 类型和默认值</span></span></span><br><span class=\"line\">        list: &#123;</span><br><span class=\"line\"><span class=\"javascript\">            type: <span class=\"built_in\">Array</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"keyword\">default</span>() &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">                <span class=\"keyword\">return</span> []</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        deleteItem(id) &#123;</span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'delete'</span>, id)</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        addTitleHandler(title) &#123;</span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// eslint-disable-next-line</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'on add title'</span>, title)</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    created() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// eslint-disable-next-line</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'list created'</span>)</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    mounted() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// eslint-disable-next-line</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'list mounted'</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// 绑定自定义事件</span></span></span><br><span class=\"line\"><span class=\"actionscript\">        event.$on(<span class=\"string\">'onAddTitle'</span>, <span class=\"keyword\">this</span>.addTitleHandler)</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    beforeUpdate() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// eslint-disable-next-line</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'list before update'</span>)</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    updated() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// eslint-disable-next-line</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'list updated'</span>)</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    beforeDestroy() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// 及时销毁，否则可能造成内存泄露</span></span></span><br><span class=\"line\"><span class=\"actionscript\">        event.$off(<span class=\"string\">'onAddTitle'</span>, <span class=\"keyword\">this</span>.addTitleHandler)</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"event-js\"><a href=\"#event-js\" class=\"headerlink\" title=\"event.js\"></a>event.js</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Vue()</span><br></pre></td></tr></table></figure>\n<p><strong>在组件销毁时，需要销毁自定义事件。</strong></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"prop和-emit\"><a href=\"#prop和-emit\" class=\"headerlink\" title=\"prop和$emit\"></a>prop和$emit</h2>","more":"<h3 id=\"index-vue\"><a href=\"#index-vue\" class=\"headerlink\" title=\"index.vue\"></a>index.vue</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Input</span> @<span class=\"attr\">add</span>=<span class=\"string\">\"addHandler\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">List</span> <span class=\"attr\">:list</span>=<span class=\"string\">\"list\"</span> @<span class=\"attr\">delete</span>=<span class=\"string\">\"deleteHandler\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span> Input <span class=\"keyword\">from</span> <span class=\"string\">'./Input'</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span> List <span class=\"keyword\">from</span> <span class=\"string\">'./List'</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">        Input,</span><br><span class=\"line\">        List</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\">            list: [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\"><span class=\"actionscript\">                    id: <span class=\"string\">'id-1'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">                    title: <span class=\"string\">'标题1'</span></span></span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\"><span class=\"actionscript\">                    id: <span class=\"string\">'id-2'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">                    title: <span class=\"string\">'标题2'</span></span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        addHandler(title) &#123;</span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"keyword\">this</span>.list.push(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                id: <span class=\"string\">`id-<span class=\"subst\">$&#123;<span class=\"built_in\">Date</span>.now()&#125;</span>`</span>,</span></span><br><span class=\"line\">                title</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        deleteHandler(id) &#123;</span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">this</span>.list = <span class=\"keyword\">this</span>.list.filter(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.id !== id)</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    created() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// eslint-disable-next-line</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'index created'</span>)</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    mounted() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// eslint-disable-next-line</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'index mounted'</span>)</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    beforeUpdate() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// eslint-disable-next-line</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'index before update'</span>)</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    updated() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// eslint-disable-next-line</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'index updated'</span>)</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"input-vue\"><a href=\"#input-vue\" class=\"headerlink\" title=\"input.vue\"></a>input.vue</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"title\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"addTitle\"</span>&gt;</span>add<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span> event <span class=\"keyword\">from</span> <span class=\"string\">'./event'</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">            title: <span class=\"string\">''</span></span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        addTitle() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// 调用父组件的事件</span></span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'add'</span>, <span class=\"keyword\">this</span>.title)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// 调用自定义事件</span></span></span><br><span class=\"line\"><span class=\"actionscript\">            event.$emit(<span class=\"string\">'onAddTitle'</span>, <span class=\"keyword\">this</span>.title)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"keyword\">this</span>.title = <span class=\"string\">''</span></span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"list-vue\"><a href=\"#list-vue\" class=\"headerlink\" title=\"list.vue\"></a>list.vue</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in list\"</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"item.id\"</span>&gt;</span></span><br><span class=\"line\">                &#123;&#123;item.title&#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"deleteItem(item.id)\"</span>&gt;</span>删除<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span> event <span class=\"keyword\">from</span> <span class=\"string\">'./event'</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"comment\">// props: ['list']</span></span></span><br><span class=\"line\">    props: &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// prop 类型和默认值</span></span></span><br><span class=\"line\">        list: &#123;</span><br><span class=\"line\"><span class=\"javascript\">            type: <span class=\"built_in\">Array</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"keyword\">default</span>() &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">                <span class=\"keyword\">return</span> []</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        deleteItem(id) &#123;</span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'delete'</span>, id)</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        addTitleHandler(title) &#123;</span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// eslint-disable-next-line</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'on add title'</span>, title)</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    created() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// eslint-disable-next-line</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'list created'</span>)</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    mounted() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// eslint-disable-next-line</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'list mounted'</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// 绑定自定义事件</span></span></span><br><span class=\"line\"><span class=\"actionscript\">        event.$on(<span class=\"string\">'onAddTitle'</span>, <span class=\"keyword\">this</span>.addTitleHandler)</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    beforeUpdate() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// eslint-disable-next-line</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'list before update'</span>)</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    updated() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// eslint-disable-next-line</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'list updated'</span>)</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    beforeDestroy() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// 及时销毁，否则可能造成内存泄露</span></span></span><br><span class=\"line\"><span class=\"actionscript\">        event.$off(<span class=\"string\">'onAddTitle'</span>, <span class=\"keyword\">this</span>.addTitleHandler)</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"event-js\"><a href=\"#event-js\" class=\"headerlink\" title=\"event.js\"></a>event.js</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Vue()</span><br></pre></td></tr></table></figure>\n<p><strong>在组件销毁时，需要销毁自定义事件。</strong></p>"},{"layout":"[post]","title":"Vue虚拟DOM","date":"2020-02-12T15:51:22.000Z","_content":"## 虚拟DOM（Virtual DOM）\n- vdom是实现Vue和React的重要基石\n- diff算法是vdom最核心、最关键的部分\n### 特点\n- 有一定的复杂度，想减少计算次数比较难\n- 把计算转为js计算，性能更优\n- vdom是用js模拟dom结构，计算出最小的变更，然后操作dom\n<!-- more -->\n## snabbdom\n- 简洁强大的vdom库，易学易用\n- Vue也是参考他来做的\n\n## diff算法\n- diff即对比\n- js对象也可以做diff\n- 两棵树也可以做diff\n\n#### 树的diff算法的时间复杂度是 \n```math\nO(n^3)\n```\n- 遍历第一棵树\n- 遍历第二棵树\n- 排序  \n\n**1000个节点要算一亿次**\n\n#### 优化时间复杂度到O(n)\n- 只比较同一层级，不跨级比较\n- tag不同，则删掉重建，不再深度比较\n- tag和key都相同，则认为是相同节点，不再深度比较\n\n### h函数\n\n```js\nimport { vnode, VNode, VNodeData } from './vnode';\nexport type VNodes = VNode[];\nexport type VNodeChildElement = VNode | string | number | undefined | null;\nexport type ArrayOrElement<T> = T | T[];\nexport type VNodeChildren = ArrayOrElement<VNodeChildElement>\nimport * as is from './is';\n\nfunction addNS (data: any, children: VNodes | undefined, sel: string | undefined): void {\n  data.ns = 'http://www.w3.org/2000/svg';\n  if (sel !== 'foreignObject' && children !== undefined) {\n    for (let i = 0; i < children.length; ++i) {\n      let childData = children[i].data;\n      if (childData !== undefined) {\n        addNS(childData, (children[i] as VNode).children as VNodes, children[i].sel);\n      }\n    }\n  }\n}\n\nexport function h(sel: string): VNode;\nexport function h(sel: string, data: VNodeData | null): VNode;\nexport function h(sel: string, children: VNodeChildren): VNode;\nexport function h(sel: string, data: VNodeData | null, children: VNodeChildren): VNode;\nexport function h (sel: any, b?: any, c?: any): VNode {\n  var data: VNodeData = {}, children: any, text: any, i: number;\n  if (c !== undefined) {\n    if (b !== null) { data = b; }\n    if (is.array(c)) {\n      children = c;\n    } else if (is.primitive(c)) {\n      text = c;\n    } else if (c && c.sel) {\n      children = [c];\n    }\n  } else if (b !== undefined && b !== null) {\n    if (is.array(b)) {\n      children = b;\n    } else if (is.primitive(b)) {\n      text = b;\n    } else if (b && b.sel) {\n      children = [b];\n    } else { data = b; }\n  }\n  if (children !== undefined) {\n    for (i = 0; i < children.length; ++i) {\n      if (is.primitive(children[i])) children[i] = vnode(undefined, undefined, undefined, children[i], undefined);\n    }\n  }\n  if (\n    sel[0] === 's' && sel[1] === 'v' && sel[2] === 'g' &&\n    (sel.length === 3 || sel[3] === '.' || sel[3] === '#')\n  ) {\n    addNS(data, children, sel);\n  }\n\n  // 返回 vnode\n  return vnode(sel, data, children, text, undefined);\n};\nexport default h;\n\n```\nh函数就是vue中的createElement方法，这个函数作用就是创建虚拟dom，追踪dom变化的\n```render: h => h(App)``` 是下面内容的缩写：\n```js\nrender: function (createElement) {\n    return createElement(App);\n}\n```\n进一步缩写为(ES6 语法)：\n\n```js\nrender (createElement) {\n    return createElement(App);\n}\n```\n再进一步缩写为：\n\n```js\nrender (h){\n    return h(App);\n}\n```\n按照 ES6 箭头函数的写法，就得到了：\n\n```js\nrender: h => h(App);\n```\n它来自单词 hyperscript，这个单词通常用在 virtual-dom 的实现中。Hyperscript 本身是指 \n生成HTML 结构的 script 脚本，因为 HTML 是 hyper-text markup language 的缩写（超文本标记语言）\n### patch函数\n\n```js\n/* global module, document, Node */\nimport { Module } from './modules/module';\nimport vnode, { VNode } from './vnode';\nimport * as is from './is';\nimport htmlDomApi, { DOMAPI } from './htmldomapi';\n\ntype NonUndefined<T> = T extends undefined ? never : T;\n\nfunction isUndef (s: any): boolean { return s === undefined; }\nfunction isDef<A> (s: A): s is NonUndefined<A> { return s !== undefined; }\n\ntype VNodeQueue = VNode[];\n\nconst emptyNode = vnode('', {}, [], undefined, undefined);\n\nfunction sameVnode (vnode1: VNode, vnode2: VNode): boolean {\n  // key 和 sel 都相等\n  // undefined === undefined // true\n  return vnode1.key === vnode2.key && vnode1.sel === vnode2.sel;\n}\n\nfunction isVnode (vnode: any): vnode is VNode {\n  return vnode.sel !== undefined;\n}\n\ntype KeyToIndexMap = {[key: string]: number};\n\ntype ArraysOf<T> = {\n  [K in keyof T]: Array<T[K]>;\n}\n\ntype ModuleHooks = ArraysOf<Module>;\n\nfunction createKeyToOldIdx (children: VNode[], beginIdx: number, endIdx: number): KeyToIndexMap {\n  const map: KeyToIndexMap = {};\n  for (let i = beginIdx; i <= endIdx; ++i) {\n    const key = children[i]?.key;\n    if (key !== undefined) {\n      map[key] = i;\n    }\n  }\n  return map;\n}\n\nconst hooks: Array<keyof Module> = ['create', 'update', 'remove', 'destroy', 'pre', 'post'];\n\nexport { h } from './h';\nexport { thunk } from './thunk';\n\nexport function init (modules: Array<Partial<Module>>, domApi?: DOMAPI) {\n  let i: number, j: number, cbs = ({} as ModuleHooks);\n\n  const api: DOMAPI = domApi !== undefined ? domApi : htmlDomApi;\n\n  for (i = 0; i < hooks.length; ++i) {\n    cbs[hooks[i]] = [];\n    for (j = 0; j < modules.length; ++j) {\n      const hook = modules[j][hooks[i]];\n      if (hook !== undefined) {\n        (cbs[hooks[i]] as any[]).push(hook);\n      }\n    }\n  }\n\n  function emptyNodeAt (elm: Element) {\n    const id = elm.id ? '#' + elm.id : '';\n    const c = elm.className ? '.' + elm.className.split(' ').join('.') : '';\n    return vnode(api.tagName(elm).toLowerCase() + id + c, {}, [], undefined, elm);\n  }\n\n  function createRmCb (childElm: Node, listeners: number) {\n    return function rmCb () {\n      if (--listeners === 0) {\n        const parent = api.parentNode(childElm);\n        api.removeChild(parent, childElm);\n      }\n    };\n  }\n\n  function createElm (vnode: VNode, insertedVnodeQueue: VNodeQueue): Node {\n    let i: any, data = vnode.data;\n    if (data !== undefined) {\n      const init = data.hook?.init;\n      if (isDef(init)) {\n        init(vnode);\n        data = vnode.data;\n      }\n    }\n    let children = vnode.children, sel = vnode.sel;\n    if (sel === '!') {\n      if (isUndef(vnode.text)) {\n        vnode.text = '';\n      }\n      vnode.elm = api.createComment(vnode.text!);\n    } else if (sel !== undefined) {\n      // Parse selector\n      const hashIdx = sel.indexOf('#');\n      const dotIdx = sel.indexOf('.', hashIdx);\n      const hash = hashIdx > 0 ? hashIdx : sel.length;\n      const dot = dotIdx > 0 ? dotIdx : sel.length;\n      const tag = hashIdx !== -1 || dotIdx !== -1 ? sel.slice(0, Math.min(hash, dot)) : sel;\n      const elm = vnode.elm = isDef(data) && isDef(i = data.ns)\n        ? api.createElementNS(i, tag)\n        : api.createElement(tag);\n      if (hash < dot) elm.setAttribute('id', sel.slice(hash + 1, dot));\n      if (dotIdx > 0) elm.setAttribute('class', sel.slice(dot + 1).replace(/\\./g, ' '));\n      for (i = 0; i < cbs.create.length; ++i) cbs.create[i](emptyNode, vnode);\n      if (is.array(children)) {\n        for (i = 0; i < children.length; ++i) {\n          const ch = children[i];\n          if (ch != null) {\n            api.appendChild(elm, createElm(ch as VNode, insertedVnodeQueue));\n          }\n        }\n      } else if (is.primitive(vnode.text)) {\n        api.appendChild(elm, api.createTextNode(vnode.text));\n      }\n      const hook = vnode.data!.hook;\n      if (isDef(hook)) {\n        hook.create?.(emptyNode, vnode);\n        if (hook.insert) {\n          insertedVnodeQueue.push(vnode);\n        }\n      }\n    } else {\n      vnode.elm = api.createTextNode(vnode.text!);\n    }\n    return vnode.elm;\n  }\n\n  function addVnodes (\n    parentElm: Node,\n    before: Node | null,\n    vnodes: VNode[],\n    startIdx: number,\n    endIdx: number,\n    insertedVnodeQueue: VNodeQueue\n  ) {\n    for (; startIdx <= endIdx; ++startIdx) {\n      const ch = vnodes[startIdx];\n      if (ch != null) {\n        api.insertBefore(parentElm, createElm(ch, insertedVnodeQueue), before);\n      }\n    }\n  }\n\n  function invokeDestroyHook (vnode: VNode) {\n    const data = vnode.data;\n    if (data !== undefined) {\n      data?.hook?.destroy?.(vnode);\n      for (let i = 0; i < cbs.destroy.length; ++i) cbs.destroy[i](vnode);\n      if (vnode.children !== undefined) {\n        for (let j = 0; j < vnode.children.length; ++j) {\n          const child = vnode.children[j];\n          if (child != null && typeof child !== \"string\") {\n            invokeDestroyHook(child);\n          }\n        }\n      }\n    }\n  }\n\n  function removeVnodes (parentElm: Node,\n    vnodes: VNode[],\n    startIdx: number,\n    endIdx: number): void {\n    for (; startIdx <= endIdx; ++startIdx) {\n      let listeners: number, rm: () => void, ch = vnodes[startIdx];\n      if (ch != null) {\n        if (isDef(ch.sel)) {\n          invokeDestroyHook(ch); // hook 操作\n\n          // 移除 DOM 元素\n          listeners = cbs.remove.length + 1;\n          rm = createRmCb(ch.elm!, listeners);\n          for (let i = 0; i < cbs.remove.length; ++i) cbs.remove[i](ch, rm);\n          const removeHook = ch?.data?.hook?.remove;\n          if (isDef(removeHook)) {\n            removeHook(ch, rm);\n          } else {\n            rm();\n          }\n        } else { // Text node\n          api.removeChild(parentElm, ch.elm!);\n        }\n      }\n    }\n  }\n\n  function updateChildren (parentElm: Node,\n    oldCh: VNode[],\n    newCh: VNode[],\n    insertedVnodeQueue: VNodeQueue) {\n    let oldStartIdx = 0, newStartIdx = 0;\n    let oldEndIdx = oldCh.length - 1;\n    let oldStartVnode = oldCh[0];\n    let oldEndVnode = oldCh[oldEndIdx];\n    let newEndIdx = newCh.length - 1;\n    let newStartVnode = newCh[0];\n    let newEndVnode = newCh[newEndIdx];\n    let oldKeyToIdx: KeyToIndexMap | undefined;\n    let idxInOld: number;\n    let elmToMove: VNode;\n    let before: any;\n\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n      if (oldStartVnode == null) {\n        oldStartVnode = oldCh[++oldStartIdx]; // Vnode might have been moved left\n      } else if (oldEndVnode == null) {\n        oldEndVnode = oldCh[--oldEndIdx];\n      } else if (newStartVnode == null) {\n        newStartVnode = newCh[++newStartIdx];\n      } else if (newEndVnode == null) {\n        newEndVnode = newCh[--newEndIdx];\n\n      // 开始和开始对比\n      } else if (sameVnode(oldStartVnode, newStartVnode)) {\n        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue);\n        oldStartVnode = oldCh[++oldStartIdx];\n        newStartVnode = newCh[++newStartIdx];\n      \n      // 结束和结束对比\n      } else if (sameVnode(oldEndVnode, newEndVnode)) {\n        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue);\n        oldEndVnode = oldCh[--oldEndIdx];\n        newEndVnode = newCh[--newEndIdx];\n\n      // 开始和结束对比\n      } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right\n        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue);\n        api.insertBefore(parentElm, oldStartVnode.elm!, api.nextSibling(oldEndVnode.elm!));\n        oldStartVnode = oldCh[++oldStartIdx];\n        newEndVnode = newCh[--newEndIdx];\n\n      // 结束和开始对比\n      } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left\n        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue);\n        api.insertBefore(parentElm, oldEndVnode.elm!, oldStartVnode.elm!);\n        oldEndVnode = oldCh[--oldEndIdx];\n        newStartVnode = newCh[++newStartIdx];\n\n      // 以上四个都未命中\n      } else {\n        if (oldKeyToIdx === undefined) {\n          oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);\n        }\n        // 拿新节点 key ，能否对应上 oldCh 中的某个节点的 key\n        idxInOld = oldKeyToIdx[newStartVnode.key as string];\n  \n        // 没对应上\n        if (isUndef(idxInOld)) { // New element\n          api.insertBefore(parentElm, createElm(newStartVnode, insertedVnodeQueue), oldStartVnode.elm!);\n          newStartVnode = newCh[++newStartIdx];\n        \n        // 对应上了\n        } else {\n          // 对应上 key 的节点\n          elmToMove = oldCh[idxInOld];\n\n          // sel 是否相等（sameVnode 的条件）\n          if (elmToMove.sel !== newStartVnode.sel) {\n            // New element\n            api.insertBefore(parentElm, createElm(newStartVnode, insertedVnodeQueue), oldStartVnode.elm!);\n          \n          // sel 相等，key 相等\n          } else {\n            patchVnode(elmToMove, newStartVnode, insertedVnodeQueue);\n            oldCh[idxInOld] = undefined as any;\n            api.insertBefore(parentElm, elmToMove.elm!, oldStartVnode.elm!);\n          }\n          newStartVnode = newCh[++newStartIdx];\n        }\n      }\n    }\n    if (oldStartIdx <= oldEndIdx || newStartIdx <= newEndIdx) {\n      if (oldStartIdx > oldEndIdx) {\n        before = newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].elm;\n        addVnodes(parentElm, before, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);\n      } else {\n        removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);\n      }\n    }\n  }\n\n  function patchVnode (oldVnode: VNode, vnode: VNode, insertedVnodeQueue: VNodeQueue) {\n    // 执行 prepatch hook\n    const hook = vnode.data?.hook;\n    hook?.prepatch?.(oldVnode, vnode);\n\n    // 设置 vnode.elem\n    const elm = vnode.elm = oldVnode.elm!;\n  \n    // 旧 children\n    let oldCh = oldVnode.children as VNode[];\n    // 新 children\n    let ch = vnode.children as VNode[];\n\n    if (oldVnode === vnode) return;\n  \n    // hook 相关\n    if (vnode.data !== undefined) {\n      for (let i = 0; i < cbs.update.length; ++i) cbs.update[i](oldVnode, vnode);\n      vnode.data.hook?.update?.(oldVnode, vnode);\n    }\n\n    // vnode.text === undefined （vnode.children 一般有值）\n    if (isUndef(vnode.text)) {\n      // 新旧都有 children\n      if (isDef(oldCh) && isDef(ch)) {\n        if (oldCh !== ch) updateChildren(elm, oldCh, ch, insertedVnodeQueue);\n      // 新 children 有，旧 children 无 （旧 text 有）\n      } else if (isDef(ch)) {\n        // 清空 text\n        if (isDef(oldVnode.text)) api.setTextContent(elm, '');\n        // 添加 children\n        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);\n      // 旧 child 有，新 child 无\n      } else if (isDef(oldCh)) {\n        // 移除 children\n        removeVnodes(elm, oldCh, 0, oldCh.length - 1);\n      // 旧 text 有\n      } else if (isDef(oldVnode.text)) {\n        api.setTextContent(elm, '');\n      }\n\n    // else : vnode.text !== undefined （vnode.children 无值）\n    } else if (oldVnode.text !== vnode.text) {\n      // 移除旧 children\n      if (isDef(oldCh)) {\n        removeVnodes(elm, oldCh, 0, oldCh.length - 1);\n      }\n      // 设置新 text\n      api.setTextContent(elm, vnode.text!);\n    }\n    hook?.postpatch?.(oldVnode, vnode);\n  }\n\n  return function patch (oldVnode: VNode | Element, vnode: VNode): VNode {\n    let i: number, elm: Node, parent: Node;\n    const insertedVnodeQueue: VNodeQueue = [];\n    // 执行 pre hook\n    for (i = 0; i < cbs.pre.length; ++i) cbs.pre[i]();\n\n    // 第一个参数不是 vnode\n    if (!isVnode(oldVnode)) {\n      // 创建一个空的 vnode ，关联到这个 DOM 元素\n      oldVnode = emptyNodeAt(oldVnode);\n    }\n\n    // 相同的 vnode（key 和 sel 都相等）\n    if (sameVnode(oldVnode, vnode)) {\n      // vnode 对比\n      patchVnode(oldVnode, vnode, insertedVnodeQueue);\n    \n    // 不同的 vnode ，直接删掉重建\n    } else {\n      elm = oldVnode.elm!;\n      parent = api.parentNode(elm);\n\n      // 重建\n      createElm(vnode, insertedVnodeQueue);\n\n      if (parent !== null) {\n        api.insertBefore(parent, vnode.elm!, api.nextSibling(elm));\n        removeVnodes(parent, [oldVnode], 0, 0);\n      }\n    }\n\n    for (i = 0; i < insertedVnodeQueue.length; ++i) {\n      insertedVnodeQueue[i].data!.hook!.insert!(insertedVnodeQueue[i]);\n    }\n    for (i = 0; i < cbs.post.length; ++i) cbs.post[i]();\n    return vnode;\n  };\n}\n\n```\n\n\n","source":"_posts/Vue虚拟DOM.md","raw":"---\nlayout: '[post]'\ntitle: Vue虚拟DOM\ndate: 2020-02-12 23:51:22\ntags: Vue\n---\n## 虚拟DOM（Virtual DOM）\n- vdom是实现Vue和React的重要基石\n- diff算法是vdom最核心、最关键的部分\n### 特点\n- 有一定的复杂度，想减少计算次数比较难\n- 把计算转为js计算，性能更优\n- vdom是用js模拟dom结构，计算出最小的变更，然后操作dom\n<!-- more -->\n## snabbdom\n- 简洁强大的vdom库，易学易用\n- Vue也是参考他来做的\n\n## diff算法\n- diff即对比\n- js对象也可以做diff\n- 两棵树也可以做diff\n\n#### 树的diff算法的时间复杂度是 \n```math\nO(n^3)\n```\n- 遍历第一棵树\n- 遍历第二棵树\n- 排序  \n\n**1000个节点要算一亿次**\n\n#### 优化时间复杂度到O(n)\n- 只比较同一层级，不跨级比较\n- tag不同，则删掉重建，不再深度比较\n- tag和key都相同，则认为是相同节点，不再深度比较\n\n### h函数\n\n```js\nimport { vnode, VNode, VNodeData } from './vnode';\nexport type VNodes = VNode[];\nexport type VNodeChildElement = VNode | string | number | undefined | null;\nexport type ArrayOrElement<T> = T | T[];\nexport type VNodeChildren = ArrayOrElement<VNodeChildElement>\nimport * as is from './is';\n\nfunction addNS (data: any, children: VNodes | undefined, sel: string | undefined): void {\n  data.ns = 'http://www.w3.org/2000/svg';\n  if (sel !== 'foreignObject' && children !== undefined) {\n    for (let i = 0; i < children.length; ++i) {\n      let childData = children[i].data;\n      if (childData !== undefined) {\n        addNS(childData, (children[i] as VNode).children as VNodes, children[i].sel);\n      }\n    }\n  }\n}\n\nexport function h(sel: string): VNode;\nexport function h(sel: string, data: VNodeData | null): VNode;\nexport function h(sel: string, children: VNodeChildren): VNode;\nexport function h(sel: string, data: VNodeData | null, children: VNodeChildren): VNode;\nexport function h (sel: any, b?: any, c?: any): VNode {\n  var data: VNodeData = {}, children: any, text: any, i: number;\n  if (c !== undefined) {\n    if (b !== null) { data = b; }\n    if (is.array(c)) {\n      children = c;\n    } else if (is.primitive(c)) {\n      text = c;\n    } else if (c && c.sel) {\n      children = [c];\n    }\n  } else if (b !== undefined && b !== null) {\n    if (is.array(b)) {\n      children = b;\n    } else if (is.primitive(b)) {\n      text = b;\n    } else if (b && b.sel) {\n      children = [b];\n    } else { data = b; }\n  }\n  if (children !== undefined) {\n    for (i = 0; i < children.length; ++i) {\n      if (is.primitive(children[i])) children[i] = vnode(undefined, undefined, undefined, children[i], undefined);\n    }\n  }\n  if (\n    sel[0] === 's' && sel[1] === 'v' && sel[2] === 'g' &&\n    (sel.length === 3 || sel[3] === '.' || sel[3] === '#')\n  ) {\n    addNS(data, children, sel);\n  }\n\n  // 返回 vnode\n  return vnode(sel, data, children, text, undefined);\n};\nexport default h;\n\n```\nh函数就是vue中的createElement方法，这个函数作用就是创建虚拟dom，追踪dom变化的\n```render: h => h(App)``` 是下面内容的缩写：\n```js\nrender: function (createElement) {\n    return createElement(App);\n}\n```\n进一步缩写为(ES6 语法)：\n\n```js\nrender (createElement) {\n    return createElement(App);\n}\n```\n再进一步缩写为：\n\n```js\nrender (h){\n    return h(App);\n}\n```\n按照 ES6 箭头函数的写法，就得到了：\n\n```js\nrender: h => h(App);\n```\n它来自单词 hyperscript，这个单词通常用在 virtual-dom 的实现中。Hyperscript 本身是指 \n生成HTML 结构的 script 脚本，因为 HTML 是 hyper-text markup language 的缩写（超文本标记语言）\n### patch函数\n\n```js\n/* global module, document, Node */\nimport { Module } from './modules/module';\nimport vnode, { VNode } from './vnode';\nimport * as is from './is';\nimport htmlDomApi, { DOMAPI } from './htmldomapi';\n\ntype NonUndefined<T> = T extends undefined ? never : T;\n\nfunction isUndef (s: any): boolean { return s === undefined; }\nfunction isDef<A> (s: A): s is NonUndefined<A> { return s !== undefined; }\n\ntype VNodeQueue = VNode[];\n\nconst emptyNode = vnode('', {}, [], undefined, undefined);\n\nfunction sameVnode (vnode1: VNode, vnode2: VNode): boolean {\n  // key 和 sel 都相等\n  // undefined === undefined // true\n  return vnode1.key === vnode2.key && vnode1.sel === vnode2.sel;\n}\n\nfunction isVnode (vnode: any): vnode is VNode {\n  return vnode.sel !== undefined;\n}\n\ntype KeyToIndexMap = {[key: string]: number};\n\ntype ArraysOf<T> = {\n  [K in keyof T]: Array<T[K]>;\n}\n\ntype ModuleHooks = ArraysOf<Module>;\n\nfunction createKeyToOldIdx (children: VNode[], beginIdx: number, endIdx: number): KeyToIndexMap {\n  const map: KeyToIndexMap = {};\n  for (let i = beginIdx; i <= endIdx; ++i) {\n    const key = children[i]?.key;\n    if (key !== undefined) {\n      map[key] = i;\n    }\n  }\n  return map;\n}\n\nconst hooks: Array<keyof Module> = ['create', 'update', 'remove', 'destroy', 'pre', 'post'];\n\nexport { h } from './h';\nexport { thunk } from './thunk';\n\nexport function init (modules: Array<Partial<Module>>, domApi?: DOMAPI) {\n  let i: number, j: number, cbs = ({} as ModuleHooks);\n\n  const api: DOMAPI = domApi !== undefined ? domApi : htmlDomApi;\n\n  for (i = 0; i < hooks.length; ++i) {\n    cbs[hooks[i]] = [];\n    for (j = 0; j < modules.length; ++j) {\n      const hook = modules[j][hooks[i]];\n      if (hook !== undefined) {\n        (cbs[hooks[i]] as any[]).push(hook);\n      }\n    }\n  }\n\n  function emptyNodeAt (elm: Element) {\n    const id = elm.id ? '#' + elm.id : '';\n    const c = elm.className ? '.' + elm.className.split(' ').join('.') : '';\n    return vnode(api.tagName(elm).toLowerCase() + id + c, {}, [], undefined, elm);\n  }\n\n  function createRmCb (childElm: Node, listeners: number) {\n    return function rmCb () {\n      if (--listeners === 0) {\n        const parent = api.parentNode(childElm);\n        api.removeChild(parent, childElm);\n      }\n    };\n  }\n\n  function createElm (vnode: VNode, insertedVnodeQueue: VNodeQueue): Node {\n    let i: any, data = vnode.data;\n    if (data !== undefined) {\n      const init = data.hook?.init;\n      if (isDef(init)) {\n        init(vnode);\n        data = vnode.data;\n      }\n    }\n    let children = vnode.children, sel = vnode.sel;\n    if (sel === '!') {\n      if (isUndef(vnode.text)) {\n        vnode.text = '';\n      }\n      vnode.elm = api.createComment(vnode.text!);\n    } else if (sel !== undefined) {\n      // Parse selector\n      const hashIdx = sel.indexOf('#');\n      const dotIdx = sel.indexOf('.', hashIdx);\n      const hash = hashIdx > 0 ? hashIdx : sel.length;\n      const dot = dotIdx > 0 ? dotIdx : sel.length;\n      const tag = hashIdx !== -1 || dotIdx !== -1 ? sel.slice(0, Math.min(hash, dot)) : sel;\n      const elm = vnode.elm = isDef(data) && isDef(i = data.ns)\n        ? api.createElementNS(i, tag)\n        : api.createElement(tag);\n      if (hash < dot) elm.setAttribute('id', sel.slice(hash + 1, dot));\n      if (dotIdx > 0) elm.setAttribute('class', sel.slice(dot + 1).replace(/\\./g, ' '));\n      for (i = 0; i < cbs.create.length; ++i) cbs.create[i](emptyNode, vnode);\n      if (is.array(children)) {\n        for (i = 0; i < children.length; ++i) {\n          const ch = children[i];\n          if (ch != null) {\n            api.appendChild(elm, createElm(ch as VNode, insertedVnodeQueue));\n          }\n        }\n      } else if (is.primitive(vnode.text)) {\n        api.appendChild(elm, api.createTextNode(vnode.text));\n      }\n      const hook = vnode.data!.hook;\n      if (isDef(hook)) {\n        hook.create?.(emptyNode, vnode);\n        if (hook.insert) {\n          insertedVnodeQueue.push(vnode);\n        }\n      }\n    } else {\n      vnode.elm = api.createTextNode(vnode.text!);\n    }\n    return vnode.elm;\n  }\n\n  function addVnodes (\n    parentElm: Node,\n    before: Node | null,\n    vnodes: VNode[],\n    startIdx: number,\n    endIdx: number,\n    insertedVnodeQueue: VNodeQueue\n  ) {\n    for (; startIdx <= endIdx; ++startIdx) {\n      const ch = vnodes[startIdx];\n      if (ch != null) {\n        api.insertBefore(parentElm, createElm(ch, insertedVnodeQueue), before);\n      }\n    }\n  }\n\n  function invokeDestroyHook (vnode: VNode) {\n    const data = vnode.data;\n    if (data !== undefined) {\n      data?.hook?.destroy?.(vnode);\n      for (let i = 0; i < cbs.destroy.length; ++i) cbs.destroy[i](vnode);\n      if (vnode.children !== undefined) {\n        for (let j = 0; j < vnode.children.length; ++j) {\n          const child = vnode.children[j];\n          if (child != null && typeof child !== \"string\") {\n            invokeDestroyHook(child);\n          }\n        }\n      }\n    }\n  }\n\n  function removeVnodes (parentElm: Node,\n    vnodes: VNode[],\n    startIdx: number,\n    endIdx: number): void {\n    for (; startIdx <= endIdx; ++startIdx) {\n      let listeners: number, rm: () => void, ch = vnodes[startIdx];\n      if (ch != null) {\n        if (isDef(ch.sel)) {\n          invokeDestroyHook(ch); // hook 操作\n\n          // 移除 DOM 元素\n          listeners = cbs.remove.length + 1;\n          rm = createRmCb(ch.elm!, listeners);\n          for (let i = 0; i < cbs.remove.length; ++i) cbs.remove[i](ch, rm);\n          const removeHook = ch?.data?.hook?.remove;\n          if (isDef(removeHook)) {\n            removeHook(ch, rm);\n          } else {\n            rm();\n          }\n        } else { // Text node\n          api.removeChild(parentElm, ch.elm!);\n        }\n      }\n    }\n  }\n\n  function updateChildren (parentElm: Node,\n    oldCh: VNode[],\n    newCh: VNode[],\n    insertedVnodeQueue: VNodeQueue) {\n    let oldStartIdx = 0, newStartIdx = 0;\n    let oldEndIdx = oldCh.length - 1;\n    let oldStartVnode = oldCh[0];\n    let oldEndVnode = oldCh[oldEndIdx];\n    let newEndIdx = newCh.length - 1;\n    let newStartVnode = newCh[0];\n    let newEndVnode = newCh[newEndIdx];\n    let oldKeyToIdx: KeyToIndexMap | undefined;\n    let idxInOld: number;\n    let elmToMove: VNode;\n    let before: any;\n\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n      if (oldStartVnode == null) {\n        oldStartVnode = oldCh[++oldStartIdx]; // Vnode might have been moved left\n      } else if (oldEndVnode == null) {\n        oldEndVnode = oldCh[--oldEndIdx];\n      } else if (newStartVnode == null) {\n        newStartVnode = newCh[++newStartIdx];\n      } else if (newEndVnode == null) {\n        newEndVnode = newCh[--newEndIdx];\n\n      // 开始和开始对比\n      } else if (sameVnode(oldStartVnode, newStartVnode)) {\n        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue);\n        oldStartVnode = oldCh[++oldStartIdx];\n        newStartVnode = newCh[++newStartIdx];\n      \n      // 结束和结束对比\n      } else if (sameVnode(oldEndVnode, newEndVnode)) {\n        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue);\n        oldEndVnode = oldCh[--oldEndIdx];\n        newEndVnode = newCh[--newEndIdx];\n\n      // 开始和结束对比\n      } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right\n        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue);\n        api.insertBefore(parentElm, oldStartVnode.elm!, api.nextSibling(oldEndVnode.elm!));\n        oldStartVnode = oldCh[++oldStartIdx];\n        newEndVnode = newCh[--newEndIdx];\n\n      // 结束和开始对比\n      } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left\n        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue);\n        api.insertBefore(parentElm, oldEndVnode.elm!, oldStartVnode.elm!);\n        oldEndVnode = oldCh[--oldEndIdx];\n        newStartVnode = newCh[++newStartIdx];\n\n      // 以上四个都未命中\n      } else {\n        if (oldKeyToIdx === undefined) {\n          oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);\n        }\n        // 拿新节点 key ，能否对应上 oldCh 中的某个节点的 key\n        idxInOld = oldKeyToIdx[newStartVnode.key as string];\n  \n        // 没对应上\n        if (isUndef(idxInOld)) { // New element\n          api.insertBefore(parentElm, createElm(newStartVnode, insertedVnodeQueue), oldStartVnode.elm!);\n          newStartVnode = newCh[++newStartIdx];\n        \n        // 对应上了\n        } else {\n          // 对应上 key 的节点\n          elmToMove = oldCh[idxInOld];\n\n          // sel 是否相等（sameVnode 的条件）\n          if (elmToMove.sel !== newStartVnode.sel) {\n            // New element\n            api.insertBefore(parentElm, createElm(newStartVnode, insertedVnodeQueue), oldStartVnode.elm!);\n          \n          // sel 相等，key 相等\n          } else {\n            patchVnode(elmToMove, newStartVnode, insertedVnodeQueue);\n            oldCh[idxInOld] = undefined as any;\n            api.insertBefore(parentElm, elmToMove.elm!, oldStartVnode.elm!);\n          }\n          newStartVnode = newCh[++newStartIdx];\n        }\n      }\n    }\n    if (oldStartIdx <= oldEndIdx || newStartIdx <= newEndIdx) {\n      if (oldStartIdx > oldEndIdx) {\n        before = newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].elm;\n        addVnodes(parentElm, before, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);\n      } else {\n        removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);\n      }\n    }\n  }\n\n  function patchVnode (oldVnode: VNode, vnode: VNode, insertedVnodeQueue: VNodeQueue) {\n    // 执行 prepatch hook\n    const hook = vnode.data?.hook;\n    hook?.prepatch?.(oldVnode, vnode);\n\n    // 设置 vnode.elem\n    const elm = vnode.elm = oldVnode.elm!;\n  \n    // 旧 children\n    let oldCh = oldVnode.children as VNode[];\n    // 新 children\n    let ch = vnode.children as VNode[];\n\n    if (oldVnode === vnode) return;\n  \n    // hook 相关\n    if (vnode.data !== undefined) {\n      for (let i = 0; i < cbs.update.length; ++i) cbs.update[i](oldVnode, vnode);\n      vnode.data.hook?.update?.(oldVnode, vnode);\n    }\n\n    // vnode.text === undefined （vnode.children 一般有值）\n    if (isUndef(vnode.text)) {\n      // 新旧都有 children\n      if (isDef(oldCh) && isDef(ch)) {\n        if (oldCh !== ch) updateChildren(elm, oldCh, ch, insertedVnodeQueue);\n      // 新 children 有，旧 children 无 （旧 text 有）\n      } else if (isDef(ch)) {\n        // 清空 text\n        if (isDef(oldVnode.text)) api.setTextContent(elm, '');\n        // 添加 children\n        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);\n      // 旧 child 有，新 child 无\n      } else if (isDef(oldCh)) {\n        // 移除 children\n        removeVnodes(elm, oldCh, 0, oldCh.length - 1);\n      // 旧 text 有\n      } else if (isDef(oldVnode.text)) {\n        api.setTextContent(elm, '');\n      }\n\n    // else : vnode.text !== undefined （vnode.children 无值）\n    } else if (oldVnode.text !== vnode.text) {\n      // 移除旧 children\n      if (isDef(oldCh)) {\n        removeVnodes(elm, oldCh, 0, oldCh.length - 1);\n      }\n      // 设置新 text\n      api.setTextContent(elm, vnode.text!);\n    }\n    hook?.postpatch?.(oldVnode, vnode);\n  }\n\n  return function patch (oldVnode: VNode | Element, vnode: VNode): VNode {\n    let i: number, elm: Node, parent: Node;\n    const insertedVnodeQueue: VNodeQueue = [];\n    // 执行 pre hook\n    for (i = 0; i < cbs.pre.length; ++i) cbs.pre[i]();\n\n    // 第一个参数不是 vnode\n    if (!isVnode(oldVnode)) {\n      // 创建一个空的 vnode ，关联到这个 DOM 元素\n      oldVnode = emptyNodeAt(oldVnode);\n    }\n\n    // 相同的 vnode（key 和 sel 都相等）\n    if (sameVnode(oldVnode, vnode)) {\n      // vnode 对比\n      patchVnode(oldVnode, vnode, insertedVnodeQueue);\n    \n    // 不同的 vnode ，直接删掉重建\n    } else {\n      elm = oldVnode.elm!;\n      parent = api.parentNode(elm);\n\n      // 重建\n      createElm(vnode, insertedVnodeQueue);\n\n      if (parent !== null) {\n        api.insertBefore(parent, vnode.elm!, api.nextSibling(elm));\n        removeVnodes(parent, [oldVnode], 0, 0);\n      }\n    }\n\n    for (i = 0; i < insertedVnodeQueue.length; ++i) {\n      insertedVnodeQueue[i].data!.hook!.insert!(insertedVnodeQueue[i]);\n    }\n    for (i = 0; i < cbs.post.length; ++i) cbs.post[i]();\n    return vnode;\n  };\n}\n\n```\n\n\n","slug":"Vue虚拟DOM","published":1,"updated":"2020-05-13T03:34:48.000Z","comments":1,"photos":[],"link":"","_id":"ckbftlm6d00127w2p0o671p0w","content":"<h2 id=\"虚拟DOM（Virtual-DOM）\"><a href=\"#虚拟DOM（Virtual-DOM）\" class=\"headerlink\" title=\"虚拟DOM（Virtual DOM）\"></a>虚拟DOM（Virtual DOM）</h2><ul>\n<li>vdom是实现Vue和React的重要基石</li>\n<li>diff算法是vdom最核心、最关键的部分<h3 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h3></li>\n<li>有一定的复杂度，想减少计算次数比较难</li>\n<li>把计算转为js计算，性能更优</li>\n<li>vdom是用js模拟dom结构，计算出最小的变更，然后操作dom<a id=\"more\"></a>\n<h2 id=\"snabbdom\"><a href=\"#snabbdom\" class=\"headerlink\" title=\"snabbdom\"></a>snabbdom</h2></li>\n<li>简洁强大的vdom库，易学易用</li>\n<li>Vue也是参考他来做的</li>\n</ul>\n<h2 id=\"diff算法\"><a href=\"#diff算法\" class=\"headerlink\" title=\"diff算法\"></a>diff算法</h2><ul>\n<li>diff即对比</li>\n<li>js对象也可以做diff</li>\n<li>两棵树也可以做diff</li>\n</ul>\n<h4 id=\"树的diff算法的时间复杂度是\"><a href=\"#树的diff算法的时间复杂度是\" class=\"headerlink\" title=\"树的diff算法的时间复杂度是\"></a>树的diff算法的时间复杂度是</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">O(n^3)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>遍历第一棵树</li>\n<li>遍历第二棵树</li>\n<li>排序  </li>\n</ul>\n<p><strong>1000个节点要算一亿次</strong></p>\n<h4 id=\"优化时间复杂度到O-n\"><a href=\"#优化时间复杂度到O-n\" class=\"headerlink\" title=\"优化时间复杂度到O(n)\"></a>优化时间复杂度到O(n)</h4><ul>\n<li>只比较同一层级，不跨级比较</li>\n<li>tag不同，则删掉重建，不再深度比较</li>\n<li>tag和key都相同，则认为是相同节点，不再深度比较</li>\n</ul>\n<h3 id=\"h函数\"><a href=\"#h函数\" class=\"headerlink\" title=\"h函数\"></a>h函数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; vnode, VNode, VNodeData &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./vnode'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> type VNodes = VNode[];</span><br><span class=\"line\"><span class=\"keyword\">export</span> type VNodeChildElement = VNode | string | number | <span class=\"literal\">undefined</span> | <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> type ArrayOrElement&lt;T&gt; = T | T[];</span><br><span class=\"line\"><span class=\"keyword\">export</span> type VNodeChildren = ArrayOrElement&lt;VNodeChildElement&gt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> is <span class=\"keyword\">from</span> <span class=\"string\">'./is'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addNS</span> (<span class=\"params\">data: any, children: VNodes | undefined, sel: string | undefined</span>): <span class=\"title\">void</span> </span>&#123;</span><br><span class=\"line\">  data.ns = <span class=\"string\">'http://www.w3.org/2000/svg'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (sel !== <span class=\"string\">'foreignObject'</span> &amp;&amp; children !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; children.length; ++i) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> childData = children[i].data;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (childData !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">        addNS(childData, (children[i] <span class=\"keyword\">as</span> VNode).children <span class=\"keyword\">as</span> VNodes, children[i].sel);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">h</span>(<span class=\"params\">sel: string</span>): <span class=\"title\">VNode</span>;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">export</span> <span class=\"title\">function</span> <span class=\"title\">h</span>(<span class=\"params\">sel: string, data: VNodeData | null</span>): <span class=\"title\">VNode</span>;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">export</span> <span class=\"title\">function</span> <span class=\"title\">h</span>(<span class=\"params\">sel: string, children: VNodeChildren</span>): <span class=\"title\">VNode</span>;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">export</span> <span class=\"title\">function</span> <span class=\"title\">h</span>(<span class=\"params\">sel: string, data: VNodeData | null, children: VNodeChildren</span>): <span class=\"title\">VNode</span>;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">export</span> <span class=\"title\">function</span> <span class=\"title\">h</span> (<span class=\"params\">sel: any, b?: any, c?: any</span>): <span class=\"title\">VNode</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> data: VNodeData = &#123;&#125;, <span class=\"attr\">children</span>: any, <span class=\"attr\">text</span>: any, <span class=\"attr\">i</span>: number;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (c !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (b !== <span class=\"literal\">null</span>) &#123; data = b; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (is.array(c)) &#123;</span><br><span class=\"line\">      children = c;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (is.primitive(c)) &#123;</span><br><span class=\"line\">      text = c;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (c &amp;&amp; c.sel) &#123;</span><br><span class=\"line\">      children = [c];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (b !== <span class=\"literal\">undefined</span> &amp;&amp; b !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (is.array(b)) &#123;</span><br><span class=\"line\">      children = b;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (is.primitive(b)) &#123;</span><br><span class=\"line\">      text = b;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (b &amp;&amp; b.sel) &#123;</span><br><span class=\"line\">      children = [b];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123; data = b; &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (children !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; children.length; ++i) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (is.primitive(children[i])) children[i] = vnode(<span class=\"literal\">undefined</span>, <span class=\"literal\">undefined</span>, <span class=\"literal\">undefined</span>, children[i], <span class=\"literal\">undefined</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (</span><br><span class=\"line\">    sel[<span class=\"number\">0</span>] === <span class=\"string\">'s'</span> &amp;&amp; sel[<span class=\"number\">1</span>] === <span class=\"string\">'v'</span> &amp;&amp; sel[<span class=\"number\">2</span>] === <span class=\"string\">'g'</span> &amp;&amp;</span><br><span class=\"line\">    (sel.length === <span class=\"number\">3</span> || sel[<span class=\"number\">3</span>] === <span class=\"string\">'.'</span> || sel[<span class=\"number\">3</span>] === <span class=\"string\">'#'</span>)</span><br><span class=\"line\">  ) &#123;</span><br><span class=\"line\">    addNS(data, children, sel);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 返回 vnode</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> vnode(sel, data, children, text, <span class=\"literal\">undefined</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> h;</span><br></pre></td></tr></table></figure>\n<p>h函数就是vue中的createElement方法，这个函数作用就是创建虚拟dom，追踪dom变化的</p>\n<figure class=\"highlight plain\"><figcaption><span>h </span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#96;&#96;&#96;js</span><br><span class=\"line\">render: function (createElement) &#123;</span><br><span class=\"line\">    return createElement(App);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>进一步缩写为(ES6 语法)：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">render (createElement) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> createElement(App);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>再进一步缩写为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">render (h)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> h(App);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>按照 ES6 箭头函数的写法，就得到了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">render: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(App);</span><br></pre></td></tr></table></figure>\n<p>它来自单词 hyperscript，这个单词通常用在 virtual-dom 的实现中。Hyperscript 本身是指<br>生成HTML 结构的 script 脚本，因为 HTML 是 hyper-text markup language 的缩写（超文本标记语言）</p>\n<h3 id=\"patch函数\"><a href=\"#patch函数\" class=\"headerlink\" title=\"patch函数\"></a>patch函数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* global module, document, Node */</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Module &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./modules/module'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> vnode, &#123; VNode &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./vnode'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> is <span class=\"keyword\">from</span> <span class=\"string\">'./is'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> htmlDomApi, &#123; DOMAPI &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./htmldomapi'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">type NonUndefined&lt;T&gt; = T extends <span class=\"literal\">undefined</span> ? never : T;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isUndef</span> (<span class=\"params\">s: any</span>): <span class=\"title\">boolean</span> </span>&#123; <span class=\"keyword\">return</span> s === <span class=\"literal\">undefined</span>; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isDef</span>&lt;<span class=\"title\">A</span>&gt; (<span class=\"params\">s: A</span>): <span class=\"title\">s</span> <span class=\"title\">is</span> <span class=\"title\">NonUndefined</span>&lt;<span class=\"title\">A</span>&gt; </span>&#123; <span class=\"keyword\">return</span> s !== <span class=\"literal\">undefined</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">type VNodeQueue = VNode[];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> emptyNode = vnode(<span class=\"string\">''</span>, &#123;&#125;, [], <span class=\"literal\">undefined</span>, <span class=\"literal\">undefined</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sameVnode</span> (<span class=\"params\">vnode1: VNode, vnode2: VNode</span>): <span class=\"title\">boolean</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// key 和 sel 都相等</span></span><br><span class=\"line\">  <span class=\"comment\">// undefined === undefined // true</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> vnode1.key === vnode2.key &amp;&amp; vnode1.sel === vnode2.sel;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isVnode</span> (<span class=\"params\">vnode: any</span>): <span class=\"title\">vnode</span> <span class=\"title\">is</span> <span class=\"title\">VNode</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> vnode.sel !== <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">type KeyToIndexMap = &#123;[key: string]: number&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">type ArraysOf&lt;T&gt; = &#123;</span><br><span class=\"line\">  [K <span class=\"keyword\">in</span> keyof T]: <span class=\"built_in\">Array</span>&lt;T[K]&gt;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">type ModuleHooks = ArraysOf&lt;Module&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createKeyToOldIdx</span> (<span class=\"params\">children: VNode[], beginIdx: number, endIdx: number</span>): <span class=\"title\">KeyToIndexMap</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> map: KeyToIndexMap = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = beginIdx; i &lt;= endIdx; ++i) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> key = children[i]?.key;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (key !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">      map[key] = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> hooks: <span class=\"built_in\">Array</span>&lt;keyof Module&gt; = [<span class=\"string\">'create'</span>, <span class=\"string\">'update'</span>, <span class=\"string\">'remove'</span>, <span class=\"string\">'destroy'</span>, <span class=\"string\">'pre'</span>, <span class=\"string\">'post'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; h &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./h'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; thunk &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./thunk'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">init</span> (<span class=\"params\">modules: Array&lt;Partial&lt;Module&gt;&gt;, domApi?: DOMAPI</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> i: number, <span class=\"attr\">j</span>: number, cbs = (&#123;&#125; <span class=\"keyword\">as</span> ModuleHooks);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> api: DOMAPI = domApi !== <span class=\"literal\">undefined</span> ? domApi : htmlDomApi;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; hooks.length; ++i) &#123;</span><br><span class=\"line\">    cbs[hooks[i]] = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; modules.length; ++j) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> hook = modules[j][hooks[i]];</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (hook !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">        (cbs[hooks[i]] <span class=\"keyword\">as</span> any[]).push(hook);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">emptyNodeAt</span> (<span class=\"params\">elm: Element</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> id = elm.id ? <span class=\"string\">'#'</span> + elm.id : <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> c = elm.className ? <span class=\"string\">'.'</span> + elm.className.split(<span class=\"string\">' '</span>).join(<span class=\"string\">'.'</span>) : <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> vnode(api.tagName(elm).toLowerCase() + id + c, &#123;&#125;, [], <span class=\"literal\">undefined</span>, elm);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createRmCb</span> (<span class=\"params\">childElm: Node, listeners: number</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">rmCb</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (--listeners === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> parent = api.parentNode(childElm);</span><br><span class=\"line\">        api.removeChild(parent, childElm);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createElm</span> (<span class=\"params\">vnode: VNode, insertedVnodeQueue: VNodeQueue</span>): <span class=\"title\">Node</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i: any, data = vnode.data;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (data !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> init = data.hook?.init;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isDef(init)) &#123;</span><br><span class=\"line\">        init(vnode);</span><br><span class=\"line\">        data = vnode.data;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> children = vnode.children, sel = vnode.sel;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sel === <span class=\"string\">'!'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isUndef(vnode.text)) &#123;</span><br><span class=\"line\">        vnode.text = <span class=\"string\">''</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      vnode.elm = api.createComment(vnode.text!);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sel !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Parse selector</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> hashIdx = sel.indexOf(<span class=\"string\">'#'</span>);</span><br><span class=\"line\">      <span class=\"keyword\">const</span> dotIdx = sel.indexOf(<span class=\"string\">'.'</span>, hashIdx);</span><br><span class=\"line\">      <span class=\"keyword\">const</span> hash = hashIdx &gt; <span class=\"number\">0</span> ? hashIdx : sel.length;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> dot = dotIdx &gt; <span class=\"number\">0</span> ? dotIdx : sel.length;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> tag = hashIdx !== <span class=\"number\">-1</span> || dotIdx !== <span class=\"number\">-1</span> ? sel.slice(<span class=\"number\">0</span>, <span class=\"built_in\">Math</span>.min(hash, dot)) : sel;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> elm = vnode.elm = isDef(data) &amp;&amp; isDef(i = data.ns)</span><br><span class=\"line\">        ? api.createElementNS(i, tag)</span><br><span class=\"line\">        : api.createElement(tag);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (hash &lt; dot) elm.setAttribute(<span class=\"string\">'id'</span>, sel.slice(hash + <span class=\"number\">1</span>, dot));</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (dotIdx &gt; <span class=\"number\">0</span>) elm.setAttribute(<span class=\"string\">'class'</span>, sel.slice(dot + <span class=\"number\">1</span>).replace(<span class=\"regexp\">/\\./g</span>, <span class=\"string\">' '</span>));</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; cbs.create.length; ++i) cbs.create[i](emptyNode, vnode);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (is.array(children)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; children.length; ++i) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> ch = children[i];</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (ch != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            api.appendChild(elm, createElm(ch <span class=\"keyword\">as</span> VNode, insertedVnodeQueue));</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (is.primitive(vnode.text)) &#123;</span><br><span class=\"line\">        api.appendChild(elm, api.createTextNode(vnode.text));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> hook = vnode.data!.hook;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isDef(hook)) &#123;</span><br><span class=\"line\">        hook.create?.(emptyNode, vnode);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (hook.insert) &#123;</span><br><span class=\"line\">          insertedVnodeQueue.push(vnode);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      vnode.elm = api.createTextNode(vnode.text!);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> vnode.elm;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addVnodes</span> (<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    parentElm: Node,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    before: Node | null,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    vnodes: VNode[],</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    startIdx: number,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    endIdx: number,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    insertedVnodeQueue: VNodeQueue</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (; startIdx &lt;= endIdx; ++startIdx) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> ch = vnodes[startIdx];</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (ch != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        api.insertBefore(parentElm, createElm(ch, insertedVnodeQueue), before);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">invokeDestroyHook</span> (<span class=\"params\">vnode: VNode</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> data = vnode.data;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (data !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">      data?.hook?.destroy?.(vnode);</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; cbs.destroy.length; ++i) cbs.destroy[i](vnode);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (vnode.children !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; vnode.children.length; ++j) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> child = vnode.children[j];</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (child != <span class=\"literal\">null</span> &amp;&amp; <span class=\"keyword\">typeof</span> child !== <span class=\"string\">\"string\"</span>) &#123;</span><br><span class=\"line\">            invokeDestroyHook(child);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">removeVnodes</span> (<span class=\"params\">parentElm: Node,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    vnodes: VNode[],</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    startIdx: number,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    endIdx: number</span>): <span class=\"title\">void</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (; startIdx &lt;= endIdx; ++startIdx) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> listeners: number, <span class=\"attr\">rm</span>: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">void</span>, ch = vnodes[startIdx];</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (ch != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isDef(ch.sel)) &#123;</span><br><span class=\"line\">          invokeDestroyHook(ch); <span class=\"comment\">// hook 操作</span></span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"comment\">// 移除 DOM 元素</span></span><br><span class=\"line\">          listeners = cbs.remove.length + <span class=\"number\">1</span>;</span><br><span class=\"line\">          rm = createRmCb(ch.elm!, listeners);</span><br><span class=\"line\">          <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; cbs.remove.length; ++i) cbs.remove[i](ch, rm);</span><br><span class=\"line\">          <span class=\"keyword\">const</span> removeHook = ch?.data?.hook?.remove;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (isDef(removeHook)) &#123;</span><br><span class=\"line\">            removeHook(ch, rm);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            rm();</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// Text node</span></span><br><span class=\"line\">          api.removeChild(parentElm, ch.elm!);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">updateChildren</span> (<span class=\"params\">parentElm: Node,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    oldCh: VNode[],</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    newCh: VNode[],</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    insertedVnodeQueue: VNodeQueue</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> oldStartIdx = <span class=\"number\">0</span>, newStartIdx = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> oldEndIdx = oldCh.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> oldStartVnode = oldCh[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> oldEndVnode = oldCh[oldEndIdx];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> newEndIdx = newCh.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> newStartVnode = newCh[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> newEndVnode = newCh[newEndIdx];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> oldKeyToIdx: KeyToIndexMap | <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> idxInOld: number;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> elmToMove: VNode;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> before: any;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (oldStartVnode == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        oldStartVnode = oldCh[++oldStartIdx]; <span class=\"comment\">// Vnode might have been moved left</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (oldEndVnode == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        oldEndVnode = oldCh[--oldEndIdx];</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (newStartVnode == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        newStartVnode = newCh[++newStartIdx];</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (newEndVnode == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        newEndVnode = newCh[--newEndIdx];</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 开始和开始对比</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sameVnode(oldStartVnode, newStartVnode)) &#123;</span><br><span class=\"line\">        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue);</span><br><span class=\"line\">        oldStartVnode = oldCh[++oldStartIdx];</span><br><span class=\"line\">        newStartVnode = newCh[++newStartIdx];</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"comment\">// 结束和结束对比</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sameVnode(oldEndVnode, newEndVnode)) &#123;</span><br><span class=\"line\">        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue);</span><br><span class=\"line\">        oldEndVnode = oldCh[--oldEndIdx];</span><br><span class=\"line\">        newEndVnode = newCh[--newEndIdx];</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 开始和结束对比</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sameVnode(oldStartVnode, newEndVnode)) &#123; <span class=\"comment\">// Vnode moved right</span></span><br><span class=\"line\">        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue);</span><br><span class=\"line\">        api.insertBefore(parentElm, oldStartVnode.elm!, api.nextSibling(oldEndVnode.elm!));</span><br><span class=\"line\">        oldStartVnode = oldCh[++oldStartIdx];</span><br><span class=\"line\">        newEndVnode = newCh[--newEndIdx];</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 结束和开始对比</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sameVnode(oldEndVnode, newStartVnode)) &#123; <span class=\"comment\">// Vnode moved left</span></span><br><span class=\"line\">        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue);</span><br><span class=\"line\">        api.insertBefore(parentElm, oldEndVnode.elm!, oldStartVnode.elm!);</span><br><span class=\"line\">        oldEndVnode = oldCh[--oldEndIdx];</span><br><span class=\"line\">        newStartVnode = newCh[++newStartIdx];</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 以上四个都未命中</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (oldKeyToIdx === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">          oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 拿新节点 key ，能否对应上 oldCh 中的某个节点的 key</span></span><br><span class=\"line\">        idxInOld = oldKeyToIdx[newStartVnode.key <span class=\"keyword\">as</span> string];</span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"comment\">// 没对应上</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isUndef(idxInOld)) &#123; <span class=\"comment\">// New element</span></span><br><span class=\"line\">          api.insertBefore(parentElm, createElm(newStartVnode, insertedVnodeQueue), oldStartVnode.elm!);</span><br><span class=\"line\">          newStartVnode = newCh[++newStartIdx];</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 对应上了</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 对应上 key 的节点</span></span><br><span class=\"line\">          elmToMove = oldCh[idxInOld];</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"comment\">// sel 是否相等（sameVnode 的条件）</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (elmToMove.sel !== newStartVnode.sel) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// New element</span></span><br><span class=\"line\">            api.insertBefore(parentElm, createElm(newStartVnode, insertedVnodeQueue), oldStartVnode.elm!);</span><br><span class=\"line\">          </span><br><span class=\"line\">          <span class=\"comment\">// sel 相等，key 相等</span></span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            patchVnode(elmToMove, newStartVnode, insertedVnodeQueue);</span><br><span class=\"line\">            oldCh[idxInOld] = <span class=\"literal\">undefined</span> <span class=\"keyword\">as</span> any;</span><br><span class=\"line\">            api.insertBefore(parentElm, elmToMove.elm!, oldStartVnode.elm!);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          newStartVnode = newCh[++newStartIdx];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (oldStartIdx &lt;= oldEndIdx || newStartIdx &lt;= newEndIdx) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (oldStartIdx &gt; oldEndIdx) &#123;</span><br><span class=\"line\">        before = newCh[newEndIdx + <span class=\"number\">1</span>] == <span class=\"literal\">null</span> ? <span class=\"literal\">null</span> : newCh[newEndIdx + <span class=\"number\">1</span>].elm;</span><br><span class=\"line\">        addVnodes(parentElm, before, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">patchVnode</span> (<span class=\"params\">oldVnode: VNode, vnode: VNode, insertedVnodeQueue: VNodeQueue</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 执行 prepatch hook</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> hook = vnode.data?.hook;</span><br><span class=\"line\">    hook?.prepatch?.(oldVnode, vnode);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 设置 vnode.elem</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> elm = vnode.elm = oldVnode.elm!;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">// 旧 children</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> oldCh = oldVnode.children <span class=\"keyword\">as</span> VNode[];</span><br><span class=\"line\">    <span class=\"comment\">// 新 children</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> ch = vnode.children <span class=\"keyword\">as</span> VNode[];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (oldVnode === vnode) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">// hook 相关</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (vnode.data !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; cbs.update.length; ++i) cbs.update[i](oldVnode, vnode);</span><br><span class=\"line\">      vnode.data.hook?.update?.(oldVnode, vnode);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// vnode.text === undefined （vnode.children 一般有值）</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isUndef(vnode.text)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 新旧都有 children</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isDef(oldCh) &amp;&amp; isDef(ch)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (oldCh !== ch) updateChildren(elm, oldCh, ch, insertedVnodeQueue);</span><br><span class=\"line\">      <span class=\"comment\">// 新 children 有，旧 children 无 （旧 text 有）</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isDef(ch)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 清空 text</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isDef(oldVnode.text)) api.setTextContent(elm, <span class=\"string\">''</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 添加 children</span></span><br><span class=\"line\">        addVnodes(elm, <span class=\"literal\">null</span>, ch, <span class=\"number\">0</span>, ch.length - <span class=\"number\">1</span>, insertedVnodeQueue);</span><br><span class=\"line\">      <span class=\"comment\">// 旧 child 有，新 child 无</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isDef(oldCh)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 移除 children</span></span><br><span class=\"line\">        removeVnodes(elm, oldCh, <span class=\"number\">0</span>, oldCh.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">      <span class=\"comment\">// 旧 text 有</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isDef(oldVnode.text)) &#123;</span><br><span class=\"line\">        api.setTextContent(elm, <span class=\"string\">''</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// else : vnode.text !== undefined （vnode.children 无值）</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (oldVnode.text !== vnode.text) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 移除旧 children</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isDef(oldCh)) &#123;</span><br><span class=\"line\">        removeVnodes(elm, oldCh, <span class=\"number\">0</span>, oldCh.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 设置新 text</span></span><br><span class=\"line\">      api.setTextContent(elm, vnode.text!);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    hook?.postpatch?.(oldVnode, vnode);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">patch</span> (<span class=\"params\">oldVnode: VNode | Element, vnode: VNode</span>): <span class=\"title\">VNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i: number, <span class=\"attr\">elm</span>: Node, <span class=\"attr\">parent</span>: Node;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> insertedVnodeQueue: VNodeQueue = [];</span><br><span class=\"line\">    <span class=\"comment\">// 执行 pre hook</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; cbs.pre.length; ++i) cbs.pre[i]();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 第一个参数不是 vnode</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isVnode(oldVnode)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 创建一个空的 vnode ，关联到这个 DOM 元素</span></span><br><span class=\"line\">      oldVnode = emptyNodeAt(oldVnode);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 相同的 vnode（key 和 sel 都相等）</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sameVnode(oldVnode, vnode)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// vnode 对比</span></span><br><span class=\"line\">      patchVnode(oldVnode, vnode, insertedVnodeQueue);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 不同的 vnode ，直接删掉重建</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      elm = oldVnode.elm!;</span><br><span class=\"line\">      parent = api.parentNode(elm);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 重建</span></span><br><span class=\"line\">      createElm(vnode, insertedVnodeQueue);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (parent !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        api.insertBefore(parent, vnode.elm!, api.nextSibling(elm));</span><br><span class=\"line\">        removeVnodes(parent, [oldVnode], <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; insertedVnodeQueue.length; ++i) &#123;</span><br><span class=\"line\">      insertedVnodeQueue[i].data!.hook!.insert!(insertedVnodeQueue[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; cbs.post.length; ++i) cbs.post[i]();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> vnode;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{}},"excerpt":"<h2 id=\"虚拟DOM（Virtual-DOM）\"><a href=\"#虚拟DOM（Virtual-DOM）\" class=\"headerlink\" title=\"虚拟DOM（Virtual DOM）\"></a>虚拟DOM（Virtual DOM）</h2><ul>\n<li>vdom是实现Vue和React的重要基石</li>\n<li>diff算法是vdom最核心、最关键的部分<h3 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h3></li>\n<li>有一定的复杂度，想减少计算次数比较难</li>\n<li>把计算转为js计算，性能更优</li>\n<li>vdom是用js模拟dom结构，计算出最小的变更，然后操作dom</li></ul>","more":"<h2 id=\"snabbdom\"><a href=\"#snabbdom\" class=\"headerlink\" title=\"snabbdom\"></a>snabbdom</h2>\n<li>简洁强大的vdom库，易学易用</li>\n<li>Vue也是参考他来做的</li>\n\n<h2 id=\"diff算法\"><a href=\"#diff算法\" class=\"headerlink\" title=\"diff算法\"></a>diff算法</h2><ul>\n<li>diff即对比</li>\n<li>js对象也可以做diff</li>\n<li>两棵树也可以做diff</li>\n</ul>\n<h4 id=\"树的diff算法的时间复杂度是\"><a href=\"#树的diff算法的时间复杂度是\" class=\"headerlink\" title=\"树的diff算法的时间复杂度是\"></a>树的diff算法的时间复杂度是</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">O(n^3)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>遍历第一棵树</li>\n<li>遍历第二棵树</li>\n<li>排序  </li>\n</ul>\n<p><strong>1000个节点要算一亿次</strong></p>\n<h4 id=\"优化时间复杂度到O-n\"><a href=\"#优化时间复杂度到O-n\" class=\"headerlink\" title=\"优化时间复杂度到O(n)\"></a>优化时间复杂度到O(n)</h4><ul>\n<li>只比较同一层级，不跨级比较</li>\n<li>tag不同，则删掉重建，不再深度比较</li>\n<li>tag和key都相同，则认为是相同节点，不再深度比较</li>\n</ul>\n<h3 id=\"h函数\"><a href=\"#h函数\" class=\"headerlink\" title=\"h函数\"></a>h函数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; vnode, VNode, VNodeData &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./vnode'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> type VNodes = VNode[];</span><br><span class=\"line\"><span class=\"keyword\">export</span> type VNodeChildElement = VNode | string | number | <span class=\"literal\">undefined</span> | <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> type ArrayOrElement&lt;T&gt; = T | T[];</span><br><span class=\"line\"><span class=\"keyword\">export</span> type VNodeChildren = ArrayOrElement&lt;VNodeChildElement&gt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> is <span class=\"keyword\">from</span> <span class=\"string\">'./is'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addNS</span> (<span class=\"params\">data: any, children: VNodes | undefined, sel: string | undefined</span>): <span class=\"title\">void</span> </span>&#123;</span><br><span class=\"line\">  data.ns = <span class=\"string\">'http://www.w3.org/2000/svg'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (sel !== <span class=\"string\">'foreignObject'</span> &amp;&amp; children !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; children.length; ++i) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> childData = children[i].data;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (childData !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">        addNS(childData, (children[i] <span class=\"keyword\">as</span> VNode).children <span class=\"keyword\">as</span> VNodes, children[i].sel);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">h</span>(<span class=\"params\">sel: string</span>): <span class=\"title\">VNode</span>;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">export</span> <span class=\"title\">function</span> <span class=\"title\">h</span>(<span class=\"params\">sel: string, data: VNodeData | null</span>): <span class=\"title\">VNode</span>;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">export</span> <span class=\"title\">function</span> <span class=\"title\">h</span>(<span class=\"params\">sel: string, children: VNodeChildren</span>): <span class=\"title\">VNode</span>;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">export</span> <span class=\"title\">function</span> <span class=\"title\">h</span>(<span class=\"params\">sel: string, data: VNodeData | null, children: VNodeChildren</span>): <span class=\"title\">VNode</span>;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">export</span> <span class=\"title\">function</span> <span class=\"title\">h</span> (<span class=\"params\">sel: any, b?: any, c?: any</span>): <span class=\"title\">VNode</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> data: VNodeData = &#123;&#125;, <span class=\"attr\">children</span>: any, <span class=\"attr\">text</span>: any, <span class=\"attr\">i</span>: number;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (c !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (b !== <span class=\"literal\">null</span>) &#123; data = b; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (is.array(c)) &#123;</span><br><span class=\"line\">      children = c;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (is.primitive(c)) &#123;</span><br><span class=\"line\">      text = c;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (c &amp;&amp; c.sel) &#123;</span><br><span class=\"line\">      children = [c];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (b !== <span class=\"literal\">undefined</span> &amp;&amp; b !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (is.array(b)) &#123;</span><br><span class=\"line\">      children = b;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (is.primitive(b)) &#123;</span><br><span class=\"line\">      text = b;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (b &amp;&amp; b.sel) &#123;</span><br><span class=\"line\">      children = [b];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123; data = b; &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (children !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; children.length; ++i) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (is.primitive(children[i])) children[i] = vnode(<span class=\"literal\">undefined</span>, <span class=\"literal\">undefined</span>, <span class=\"literal\">undefined</span>, children[i], <span class=\"literal\">undefined</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (</span><br><span class=\"line\">    sel[<span class=\"number\">0</span>] === <span class=\"string\">'s'</span> &amp;&amp; sel[<span class=\"number\">1</span>] === <span class=\"string\">'v'</span> &amp;&amp; sel[<span class=\"number\">2</span>] === <span class=\"string\">'g'</span> &amp;&amp;</span><br><span class=\"line\">    (sel.length === <span class=\"number\">3</span> || sel[<span class=\"number\">3</span>] === <span class=\"string\">'.'</span> || sel[<span class=\"number\">3</span>] === <span class=\"string\">'#'</span>)</span><br><span class=\"line\">  ) &#123;</span><br><span class=\"line\">    addNS(data, children, sel);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 返回 vnode</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> vnode(sel, data, children, text, <span class=\"literal\">undefined</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> h;</span><br></pre></td></tr></table></figure>\n<p>h函数就是vue中的createElement方法，这个函数作用就是创建虚拟dom，追踪dom变化的</p>\n<figure class=\"highlight plain\"><figcaption><span>h </span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#96;&#96;&#96;js</span><br><span class=\"line\">render: function (createElement) &#123;</span><br><span class=\"line\">    return createElement(App);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>进一步缩写为(ES6 语法)：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">render (createElement) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> createElement(App);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>再进一步缩写为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">render (h)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> h(App);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>按照 ES6 箭头函数的写法，就得到了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">render: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(App);</span><br></pre></td></tr></table></figure>\n<p>它来自单词 hyperscript，这个单词通常用在 virtual-dom 的实现中。Hyperscript 本身是指<br>生成HTML 结构的 script 脚本，因为 HTML 是 hyper-text markup language 的缩写（超文本标记语言）</p>\n<h3 id=\"patch函数\"><a href=\"#patch函数\" class=\"headerlink\" title=\"patch函数\"></a>patch函数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* global module, document, Node */</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Module &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./modules/module'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> vnode, &#123; VNode &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./vnode'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> is <span class=\"keyword\">from</span> <span class=\"string\">'./is'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> htmlDomApi, &#123; DOMAPI &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./htmldomapi'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">type NonUndefined&lt;T&gt; = T extends <span class=\"literal\">undefined</span> ? never : T;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isUndef</span> (<span class=\"params\">s: any</span>): <span class=\"title\">boolean</span> </span>&#123; <span class=\"keyword\">return</span> s === <span class=\"literal\">undefined</span>; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isDef</span>&lt;<span class=\"title\">A</span>&gt; (<span class=\"params\">s: A</span>): <span class=\"title\">s</span> <span class=\"title\">is</span> <span class=\"title\">NonUndefined</span>&lt;<span class=\"title\">A</span>&gt; </span>&#123; <span class=\"keyword\">return</span> s !== <span class=\"literal\">undefined</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">type VNodeQueue = VNode[];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> emptyNode = vnode(<span class=\"string\">''</span>, &#123;&#125;, [], <span class=\"literal\">undefined</span>, <span class=\"literal\">undefined</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sameVnode</span> (<span class=\"params\">vnode1: VNode, vnode2: VNode</span>): <span class=\"title\">boolean</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// key 和 sel 都相等</span></span><br><span class=\"line\">  <span class=\"comment\">// undefined === undefined // true</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> vnode1.key === vnode2.key &amp;&amp; vnode1.sel === vnode2.sel;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isVnode</span> (<span class=\"params\">vnode: any</span>): <span class=\"title\">vnode</span> <span class=\"title\">is</span> <span class=\"title\">VNode</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> vnode.sel !== <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">type KeyToIndexMap = &#123;[key: string]: number&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">type ArraysOf&lt;T&gt; = &#123;</span><br><span class=\"line\">  [K <span class=\"keyword\">in</span> keyof T]: <span class=\"built_in\">Array</span>&lt;T[K]&gt;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">type ModuleHooks = ArraysOf&lt;Module&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createKeyToOldIdx</span> (<span class=\"params\">children: VNode[], beginIdx: number, endIdx: number</span>): <span class=\"title\">KeyToIndexMap</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> map: KeyToIndexMap = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = beginIdx; i &lt;= endIdx; ++i) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> key = children[i]?.key;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (key !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">      map[key] = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> hooks: <span class=\"built_in\">Array</span>&lt;keyof Module&gt; = [<span class=\"string\">'create'</span>, <span class=\"string\">'update'</span>, <span class=\"string\">'remove'</span>, <span class=\"string\">'destroy'</span>, <span class=\"string\">'pre'</span>, <span class=\"string\">'post'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; h &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./h'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; thunk &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./thunk'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">init</span> (<span class=\"params\">modules: Array&lt;Partial&lt;Module&gt;&gt;, domApi?: DOMAPI</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> i: number, <span class=\"attr\">j</span>: number, cbs = (&#123;&#125; <span class=\"keyword\">as</span> ModuleHooks);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> api: DOMAPI = domApi !== <span class=\"literal\">undefined</span> ? domApi : htmlDomApi;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; hooks.length; ++i) &#123;</span><br><span class=\"line\">    cbs[hooks[i]] = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; modules.length; ++j) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> hook = modules[j][hooks[i]];</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (hook !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">        (cbs[hooks[i]] <span class=\"keyword\">as</span> any[]).push(hook);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">emptyNodeAt</span> (<span class=\"params\">elm: Element</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> id = elm.id ? <span class=\"string\">'#'</span> + elm.id : <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> c = elm.className ? <span class=\"string\">'.'</span> + elm.className.split(<span class=\"string\">' '</span>).join(<span class=\"string\">'.'</span>) : <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> vnode(api.tagName(elm).toLowerCase() + id + c, &#123;&#125;, [], <span class=\"literal\">undefined</span>, elm);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createRmCb</span> (<span class=\"params\">childElm: Node, listeners: number</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">rmCb</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (--listeners === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> parent = api.parentNode(childElm);</span><br><span class=\"line\">        api.removeChild(parent, childElm);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createElm</span> (<span class=\"params\">vnode: VNode, insertedVnodeQueue: VNodeQueue</span>): <span class=\"title\">Node</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i: any, data = vnode.data;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (data !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> init = data.hook?.init;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isDef(init)) &#123;</span><br><span class=\"line\">        init(vnode);</span><br><span class=\"line\">        data = vnode.data;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> children = vnode.children, sel = vnode.sel;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sel === <span class=\"string\">'!'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isUndef(vnode.text)) &#123;</span><br><span class=\"line\">        vnode.text = <span class=\"string\">''</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      vnode.elm = api.createComment(vnode.text!);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sel !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Parse selector</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> hashIdx = sel.indexOf(<span class=\"string\">'#'</span>);</span><br><span class=\"line\">      <span class=\"keyword\">const</span> dotIdx = sel.indexOf(<span class=\"string\">'.'</span>, hashIdx);</span><br><span class=\"line\">      <span class=\"keyword\">const</span> hash = hashIdx &gt; <span class=\"number\">0</span> ? hashIdx : sel.length;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> dot = dotIdx &gt; <span class=\"number\">0</span> ? dotIdx : sel.length;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> tag = hashIdx !== <span class=\"number\">-1</span> || dotIdx !== <span class=\"number\">-1</span> ? sel.slice(<span class=\"number\">0</span>, <span class=\"built_in\">Math</span>.min(hash, dot)) : sel;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> elm = vnode.elm = isDef(data) &amp;&amp; isDef(i = data.ns)</span><br><span class=\"line\">        ? api.createElementNS(i, tag)</span><br><span class=\"line\">        : api.createElement(tag);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (hash &lt; dot) elm.setAttribute(<span class=\"string\">'id'</span>, sel.slice(hash + <span class=\"number\">1</span>, dot));</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (dotIdx &gt; <span class=\"number\">0</span>) elm.setAttribute(<span class=\"string\">'class'</span>, sel.slice(dot + <span class=\"number\">1</span>).replace(<span class=\"regexp\">/\\./g</span>, <span class=\"string\">' '</span>));</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; cbs.create.length; ++i) cbs.create[i](emptyNode, vnode);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (is.array(children)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; children.length; ++i) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> ch = children[i];</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (ch != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            api.appendChild(elm, createElm(ch <span class=\"keyword\">as</span> VNode, insertedVnodeQueue));</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (is.primitive(vnode.text)) &#123;</span><br><span class=\"line\">        api.appendChild(elm, api.createTextNode(vnode.text));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> hook = vnode.data!.hook;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isDef(hook)) &#123;</span><br><span class=\"line\">        hook.create?.(emptyNode, vnode);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (hook.insert) &#123;</span><br><span class=\"line\">          insertedVnodeQueue.push(vnode);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      vnode.elm = api.createTextNode(vnode.text!);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> vnode.elm;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addVnodes</span> (<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    parentElm: Node,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    before: Node | null,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    vnodes: VNode[],</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    startIdx: number,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    endIdx: number,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    insertedVnodeQueue: VNodeQueue</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (; startIdx &lt;= endIdx; ++startIdx) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> ch = vnodes[startIdx];</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (ch != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        api.insertBefore(parentElm, createElm(ch, insertedVnodeQueue), before);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">invokeDestroyHook</span> (<span class=\"params\">vnode: VNode</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> data = vnode.data;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (data !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">      data?.hook?.destroy?.(vnode);</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; cbs.destroy.length; ++i) cbs.destroy[i](vnode);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (vnode.children !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; vnode.children.length; ++j) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> child = vnode.children[j];</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (child != <span class=\"literal\">null</span> &amp;&amp; <span class=\"keyword\">typeof</span> child !== <span class=\"string\">\"string\"</span>) &#123;</span><br><span class=\"line\">            invokeDestroyHook(child);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">removeVnodes</span> (<span class=\"params\">parentElm: Node,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    vnodes: VNode[],</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    startIdx: number,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    endIdx: number</span>): <span class=\"title\">void</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (; startIdx &lt;= endIdx; ++startIdx) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> listeners: number, <span class=\"attr\">rm</span>: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">void</span>, ch = vnodes[startIdx];</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (ch != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isDef(ch.sel)) &#123;</span><br><span class=\"line\">          invokeDestroyHook(ch); <span class=\"comment\">// hook 操作</span></span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"comment\">// 移除 DOM 元素</span></span><br><span class=\"line\">          listeners = cbs.remove.length + <span class=\"number\">1</span>;</span><br><span class=\"line\">          rm = createRmCb(ch.elm!, listeners);</span><br><span class=\"line\">          <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; cbs.remove.length; ++i) cbs.remove[i](ch, rm);</span><br><span class=\"line\">          <span class=\"keyword\">const</span> removeHook = ch?.data?.hook?.remove;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (isDef(removeHook)) &#123;</span><br><span class=\"line\">            removeHook(ch, rm);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            rm();</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// Text node</span></span><br><span class=\"line\">          api.removeChild(parentElm, ch.elm!);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">updateChildren</span> (<span class=\"params\">parentElm: Node,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    oldCh: VNode[],</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    newCh: VNode[],</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    insertedVnodeQueue: VNodeQueue</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> oldStartIdx = <span class=\"number\">0</span>, newStartIdx = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> oldEndIdx = oldCh.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> oldStartVnode = oldCh[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> oldEndVnode = oldCh[oldEndIdx];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> newEndIdx = newCh.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> newStartVnode = newCh[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> newEndVnode = newCh[newEndIdx];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> oldKeyToIdx: KeyToIndexMap | <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> idxInOld: number;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> elmToMove: VNode;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> before: any;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (oldStartVnode == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        oldStartVnode = oldCh[++oldStartIdx]; <span class=\"comment\">// Vnode might have been moved left</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (oldEndVnode == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        oldEndVnode = oldCh[--oldEndIdx];</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (newStartVnode == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        newStartVnode = newCh[++newStartIdx];</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (newEndVnode == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        newEndVnode = newCh[--newEndIdx];</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 开始和开始对比</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sameVnode(oldStartVnode, newStartVnode)) &#123;</span><br><span class=\"line\">        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue);</span><br><span class=\"line\">        oldStartVnode = oldCh[++oldStartIdx];</span><br><span class=\"line\">        newStartVnode = newCh[++newStartIdx];</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"comment\">// 结束和结束对比</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sameVnode(oldEndVnode, newEndVnode)) &#123;</span><br><span class=\"line\">        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue);</span><br><span class=\"line\">        oldEndVnode = oldCh[--oldEndIdx];</span><br><span class=\"line\">        newEndVnode = newCh[--newEndIdx];</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 开始和结束对比</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sameVnode(oldStartVnode, newEndVnode)) &#123; <span class=\"comment\">// Vnode moved right</span></span><br><span class=\"line\">        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue);</span><br><span class=\"line\">        api.insertBefore(parentElm, oldStartVnode.elm!, api.nextSibling(oldEndVnode.elm!));</span><br><span class=\"line\">        oldStartVnode = oldCh[++oldStartIdx];</span><br><span class=\"line\">        newEndVnode = newCh[--newEndIdx];</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 结束和开始对比</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sameVnode(oldEndVnode, newStartVnode)) &#123; <span class=\"comment\">// Vnode moved left</span></span><br><span class=\"line\">        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue);</span><br><span class=\"line\">        api.insertBefore(parentElm, oldEndVnode.elm!, oldStartVnode.elm!);</span><br><span class=\"line\">        oldEndVnode = oldCh[--oldEndIdx];</span><br><span class=\"line\">        newStartVnode = newCh[++newStartIdx];</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 以上四个都未命中</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (oldKeyToIdx === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">          oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 拿新节点 key ，能否对应上 oldCh 中的某个节点的 key</span></span><br><span class=\"line\">        idxInOld = oldKeyToIdx[newStartVnode.key <span class=\"keyword\">as</span> string];</span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"comment\">// 没对应上</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isUndef(idxInOld)) &#123; <span class=\"comment\">// New element</span></span><br><span class=\"line\">          api.insertBefore(parentElm, createElm(newStartVnode, insertedVnodeQueue), oldStartVnode.elm!);</span><br><span class=\"line\">          newStartVnode = newCh[++newStartIdx];</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 对应上了</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 对应上 key 的节点</span></span><br><span class=\"line\">          elmToMove = oldCh[idxInOld];</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"comment\">// sel 是否相等（sameVnode 的条件）</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (elmToMove.sel !== newStartVnode.sel) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// New element</span></span><br><span class=\"line\">            api.insertBefore(parentElm, createElm(newStartVnode, insertedVnodeQueue), oldStartVnode.elm!);</span><br><span class=\"line\">          </span><br><span class=\"line\">          <span class=\"comment\">// sel 相等，key 相等</span></span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            patchVnode(elmToMove, newStartVnode, insertedVnodeQueue);</span><br><span class=\"line\">            oldCh[idxInOld] = <span class=\"literal\">undefined</span> <span class=\"keyword\">as</span> any;</span><br><span class=\"line\">            api.insertBefore(parentElm, elmToMove.elm!, oldStartVnode.elm!);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          newStartVnode = newCh[++newStartIdx];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (oldStartIdx &lt;= oldEndIdx || newStartIdx &lt;= newEndIdx) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (oldStartIdx &gt; oldEndIdx) &#123;</span><br><span class=\"line\">        before = newCh[newEndIdx + <span class=\"number\">1</span>] == <span class=\"literal\">null</span> ? <span class=\"literal\">null</span> : newCh[newEndIdx + <span class=\"number\">1</span>].elm;</span><br><span class=\"line\">        addVnodes(parentElm, before, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">patchVnode</span> (<span class=\"params\">oldVnode: VNode, vnode: VNode, insertedVnodeQueue: VNodeQueue</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 执行 prepatch hook</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> hook = vnode.data?.hook;</span><br><span class=\"line\">    hook?.prepatch?.(oldVnode, vnode);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 设置 vnode.elem</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> elm = vnode.elm = oldVnode.elm!;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">// 旧 children</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> oldCh = oldVnode.children <span class=\"keyword\">as</span> VNode[];</span><br><span class=\"line\">    <span class=\"comment\">// 新 children</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> ch = vnode.children <span class=\"keyword\">as</span> VNode[];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (oldVnode === vnode) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">// hook 相关</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (vnode.data !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; cbs.update.length; ++i) cbs.update[i](oldVnode, vnode);</span><br><span class=\"line\">      vnode.data.hook?.update?.(oldVnode, vnode);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// vnode.text === undefined （vnode.children 一般有值）</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isUndef(vnode.text)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 新旧都有 children</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isDef(oldCh) &amp;&amp; isDef(ch)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (oldCh !== ch) updateChildren(elm, oldCh, ch, insertedVnodeQueue);</span><br><span class=\"line\">      <span class=\"comment\">// 新 children 有，旧 children 无 （旧 text 有）</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isDef(ch)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 清空 text</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isDef(oldVnode.text)) api.setTextContent(elm, <span class=\"string\">''</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 添加 children</span></span><br><span class=\"line\">        addVnodes(elm, <span class=\"literal\">null</span>, ch, <span class=\"number\">0</span>, ch.length - <span class=\"number\">1</span>, insertedVnodeQueue);</span><br><span class=\"line\">      <span class=\"comment\">// 旧 child 有，新 child 无</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isDef(oldCh)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 移除 children</span></span><br><span class=\"line\">        removeVnodes(elm, oldCh, <span class=\"number\">0</span>, oldCh.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">      <span class=\"comment\">// 旧 text 有</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isDef(oldVnode.text)) &#123;</span><br><span class=\"line\">        api.setTextContent(elm, <span class=\"string\">''</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// else : vnode.text !== undefined （vnode.children 无值）</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (oldVnode.text !== vnode.text) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 移除旧 children</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isDef(oldCh)) &#123;</span><br><span class=\"line\">        removeVnodes(elm, oldCh, <span class=\"number\">0</span>, oldCh.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 设置新 text</span></span><br><span class=\"line\">      api.setTextContent(elm, vnode.text!);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    hook?.postpatch?.(oldVnode, vnode);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">patch</span> (<span class=\"params\">oldVnode: VNode | Element, vnode: VNode</span>): <span class=\"title\">VNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i: number, <span class=\"attr\">elm</span>: Node, <span class=\"attr\">parent</span>: Node;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> insertedVnodeQueue: VNodeQueue = [];</span><br><span class=\"line\">    <span class=\"comment\">// 执行 pre hook</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; cbs.pre.length; ++i) cbs.pre[i]();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 第一个参数不是 vnode</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isVnode(oldVnode)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 创建一个空的 vnode ，关联到这个 DOM 元素</span></span><br><span class=\"line\">      oldVnode = emptyNodeAt(oldVnode);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 相同的 vnode（key 和 sel 都相等）</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sameVnode(oldVnode, vnode)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// vnode 对比</span></span><br><span class=\"line\">      patchVnode(oldVnode, vnode, insertedVnodeQueue);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 不同的 vnode ，直接删掉重建</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      elm = oldVnode.elm!;</span><br><span class=\"line\">      parent = api.parentNode(elm);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 重建</span></span><br><span class=\"line\">      createElm(vnode, insertedVnodeQueue);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (parent !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        api.insertBefore(parent, vnode.elm!, api.nextSibling(elm));</span><br><span class=\"line\">        removeVnodes(parent, [oldVnode], <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; insertedVnodeQueue.length; ++i) &#123;</span><br><span class=\"line\">      insertedVnodeQueue[i].data!.hook!.insert!(insertedVnodeQueue[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; cbs.post.length; ++i) cbs.post[i]();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> vnode;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"layout":"[post]","title":"css盒子模型","date":"2019-05-01T02:15:02.000Z","_content":"\n## css 盒子模型\n\ncss 盒子模型包含标准模型和 IE 模型\n\n<!-- more -->\n\n### 标准模型\n\n![yasuo](biaozhun.jpg)\n\n#### 盒子的组成\n\n一个盒子由外到内可以分成四个部分：margin（外边距）、border（边框）、padding（内边距）、content（内容）。会发现 margin、border、padding 是 CSS 属性，因此可以通过这三个属性来控制盒子的这三个部分。而 content 则是 HTML 元素的内容。\n\n#### 盒子的大小\n\n```\n盒子的宽度 = width + padding-left + padding-right + border-left + border-right + margin-left + margin-right\n\n盒子的高度 = height + padding-top + padding-bottom + border-top + border-bottom + margin-top + margin-bottom\n```\n\n### IE 模型\n\n![yasuo](ie.jpg)\n\n### 用 css 如何设置两种模型\n\n标准模型：box-sizing:content-box\nie 模型：box-sizing:border-box\n\n### JS 获取盒子模型的宽高\n\n```\ndom.style.width/height(只能获取内嵌)\ndom.currentStyle.width/height（只有IE支持）\nwindow.getComputedStyle(dom).width/height(火狐谷歌)\ndom.getBoundClientRect().width/height (获取展示dom的位置的方法)\n```\n\n### 边距重叠\n\n#### 父子元素边距重叠\n\n```html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\" />\n\t\t<title>css盒子模型</title>\n\t\t<style media=\"screen\">\n\t\t\thtml * {\n\t\t\t\tmargin: 0;\n\t\t\t\tpadding: 0;\n\t\t\t}\n\t\t</style>\n\t</head>\n\n\t<body>\n\t\t<section id=\"sec\">\n\t\t\t<style media=\"screen\">\n\t\t\t\t#sec {\n\t\t\t\t\tbackground: #f00;\n\t\t\t\t\t/* overflow: hidden; */\n\t\t\t\t}\n\t\t\t\t.child {\n\t\t\t\t\theight: 100px;\n\t\t\t\t\tmargin-top: 10px;\n\t\t\t\t\tbackground: yellow;\n\t\t\t\t}\n\t\t\t</style>\n\t\t\t<article class=\"child\"></article>\n\t\t</section>\n\t</body>\n</html>\n```\n","source":"_posts/css盒子模型.md","raw":"---\nlayout: '[post]'\ntitle: css盒子模型\ndate: 2019-05-01 10:15:02\ntags: css\n---\n\n## css 盒子模型\n\ncss 盒子模型包含标准模型和 IE 模型\n\n<!-- more -->\n\n### 标准模型\n\n![yasuo](biaozhun.jpg)\n\n#### 盒子的组成\n\n一个盒子由外到内可以分成四个部分：margin（外边距）、border（边框）、padding（内边距）、content（内容）。会发现 margin、border、padding 是 CSS 属性，因此可以通过这三个属性来控制盒子的这三个部分。而 content 则是 HTML 元素的内容。\n\n#### 盒子的大小\n\n```\n盒子的宽度 = width + padding-left + padding-right + border-left + border-right + margin-left + margin-right\n\n盒子的高度 = height + padding-top + padding-bottom + border-top + border-bottom + margin-top + margin-bottom\n```\n\n### IE 模型\n\n![yasuo](ie.jpg)\n\n### 用 css 如何设置两种模型\n\n标准模型：box-sizing:content-box\nie 模型：box-sizing:border-box\n\n### JS 获取盒子模型的宽高\n\n```\ndom.style.width/height(只能获取内嵌)\ndom.currentStyle.width/height（只有IE支持）\nwindow.getComputedStyle(dom).width/height(火狐谷歌)\ndom.getBoundClientRect().width/height (获取展示dom的位置的方法)\n```\n\n### 边距重叠\n\n#### 父子元素边距重叠\n\n```html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\" />\n\t\t<title>css盒子模型</title>\n\t\t<style media=\"screen\">\n\t\t\thtml * {\n\t\t\t\tmargin: 0;\n\t\t\t\tpadding: 0;\n\t\t\t}\n\t\t</style>\n\t</head>\n\n\t<body>\n\t\t<section id=\"sec\">\n\t\t\t<style media=\"screen\">\n\t\t\t\t#sec {\n\t\t\t\t\tbackground: #f00;\n\t\t\t\t\t/* overflow: hidden; */\n\t\t\t\t}\n\t\t\t\t.child {\n\t\t\t\t\theight: 100px;\n\t\t\t\t\tmargin-top: 10px;\n\t\t\t\t\tbackground: yellow;\n\t\t\t\t}\n\t\t\t</style>\n\t\t\t<article class=\"child\"></article>\n\t\t</section>\n\t</body>\n</html>\n```\n","slug":"css盒子模型","published":1,"updated":"2020-03-04T07:53:42.000Z","comments":1,"photos":[],"link":"","_id":"ckbftlm6f00147w2p2ihtej2g","content":"<h2 id=\"css-盒子模型\"><a href=\"#css-盒子模型\" class=\"headerlink\" title=\"css 盒子模型\"></a>css 盒子模型</h2><p>css 盒子模型包含标准模型和 IE 模型</p>\n<a id=\"more\"></a>\n\n<h3 id=\"标准模型\"><a href=\"#标准模型\" class=\"headerlink\" title=\"标准模型\"></a>标准模型</h3><p><img src=\"/2019/05/01/css%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/biaozhun.jpg\" alt=\"yasuo\"></p>\n<h4 id=\"盒子的组成\"><a href=\"#盒子的组成\" class=\"headerlink\" title=\"盒子的组成\"></a>盒子的组成</h4><p>一个盒子由外到内可以分成四个部分：margin（外边距）、border（边框）、padding（内边距）、content（内容）。会发现 margin、border、padding 是 CSS 属性，因此可以通过这三个属性来控制盒子的这三个部分。而 content 则是 HTML 元素的内容。</p>\n<h4 id=\"盒子的大小\"><a href=\"#盒子的大小\" class=\"headerlink\" title=\"盒子的大小\"></a>盒子的大小</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">盒子的宽度 &#x3D; width + padding-left + padding-right + border-left + border-right + margin-left + margin-right</span><br><span class=\"line\"></span><br><span class=\"line\">盒子的高度 &#x3D; height + padding-top + padding-bottom + border-top + border-bottom + margin-top + margin-bottom</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"IE-模型\"><a href=\"#IE-模型\" class=\"headerlink\" title=\"IE 模型\"></a>IE 模型</h3><p><img src=\"/2019/05/01/css%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/ie.jpg\" alt=\"yasuo\"></p>\n<h3 id=\"用-css-如何设置两种模型\"><a href=\"#用-css-如何设置两种模型\" class=\"headerlink\" title=\"用 css 如何设置两种模型\"></a>用 css 如何设置两种模型</h3><p>标准模型：box-sizing:content-box<br>ie 模型：box-sizing:border-box</p>\n<h3 id=\"JS-获取盒子模型的宽高\"><a href=\"#JS-获取盒子模型的宽高\" class=\"headerlink\" title=\"JS 获取盒子模型的宽高\"></a>JS 获取盒子模型的宽高</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dom.style.width&#x2F;height(只能获取内嵌)</span><br><span class=\"line\">dom.currentStyle.width&#x2F;height（只有IE支持）</span><br><span class=\"line\">window.getComputedStyle(dom).width&#x2F;height(火狐谷歌)</span><br><span class=\"line\">dom.getBoundClientRect().width&#x2F;height (获取展示dom的位置的方法)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"边距重叠\"><a href=\"#边距重叠\" class=\"headerlink\" title=\"边距重叠\"></a>边距重叠</h3><h4 id=\"父子元素边距重叠\"><a href=\"#父子元素边距重叠\" class=\"headerlink\" title=\"父子元素边距重叠\"></a>父子元素边距重叠</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>css盒子模型<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">media</span>=<span class=\"string\">\"screen\"</span>&gt;</span></span><br><span class=\"line\">\t\t\thtml * &#123;</span><br><span class=\"line\">\t\t\t\tmargin: 0;</span><br><span class=\"line\">\t\t\t\tpadding: 0;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">id</span>=<span class=\"string\">\"sec\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">media</span>=<span class=\"string\">\"screen\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t\t<span class=\"selector-id\">#sec</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t\t\t<span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#f00</span>;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t\t\t<span class=\"comment\">/* overflow: hidden; */</span></span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\"><span class=\"css\">\t\t\t\t<span class=\"selector-class\">.child</span> &#123;</span></span><br><span class=\"line\">\t\t\t\t\theight: 100px;</span><br><span class=\"line\">\t\t\t\t\tmargin-top: 10px;</span><br><span class=\"line\">\t\t\t\t\tbackground: yellow;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">article</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"css-盒子模型\"><a href=\"#css-盒子模型\" class=\"headerlink\" title=\"css 盒子模型\"></a>css 盒子模型</h2><p>css 盒子模型包含标准模型和 IE 模型</p>","more":"<h3 id=\"标准模型\"><a href=\"#标准模型\" class=\"headerlink\" title=\"标准模型\"></a>标准模型</h3><p><img src=\"/2019/05/01/css%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/biaozhun.jpg\" alt=\"yasuo\"></p>\n<h4 id=\"盒子的组成\"><a href=\"#盒子的组成\" class=\"headerlink\" title=\"盒子的组成\"></a>盒子的组成</h4><p>一个盒子由外到内可以分成四个部分：margin（外边距）、border（边框）、padding（内边距）、content（内容）。会发现 margin、border、padding 是 CSS 属性，因此可以通过这三个属性来控制盒子的这三个部分。而 content 则是 HTML 元素的内容。</p>\n<h4 id=\"盒子的大小\"><a href=\"#盒子的大小\" class=\"headerlink\" title=\"盒子的大小\"></a>盒子的大小</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">盒子的宽度 &#x3D; width + padding-left + padding-right + border-left + border-right + margin-left + margin-right</span><br><span class=\"line\"></span><br><span class=\"line\">盒子的高度 &#x3D; height + padding-top + padding-bottom + border-top + border-bottom + margin-top + margin-bottom</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"IE-模型\"><a href=\"#IE-模型\" class=\"headerlink\" title=\"IE 模型\"></a>IE 模型</h3><p><img src=\"/2019/05/01/css%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/ie.jpg\" alt=\"yasuo\"></p>\n<h3 id=\"用-css-如何设置两种模型\"><a href=\"#用-css-如何设置两种模型\" class=\"headerlink\" title=\"用 css 如何设置两种模型\"></a>用 css 如何设置两种模型</h3><p>标准模型：box-sizing:content-box<br>ie 模型：box-sizing:border-box</p>\n<h3 id=\"JS-获取盒子模型的宽高\"><a href=\"#JS-获取盒子模型的宽高\" class=\"headerlink\" title=\"JS 获取盒子模型的宽高\"></a>JS 获取盒子模型的宽高</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dom.style.width&#x2F;height(只能获取内嵌)</span><br><span class=\"line\">dom.currentStyle.width&#x2F;height（只有IE支持）</span><br><span class=\"line\">window.getComputedStyle(dom).width&#x2F;height(火狐谷歌)</span><br><span class=\"line\">dom.getBoundClientRect().width&#x2F;height (获取展示dom的位置的方法)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"边距重叠\"><a href=\"#边距重叠\" class=\"headerlink\" title=\"边距重叠\"></a>边距重叠</h3><h4 id=\"父子元素边距重叠\"><a href=\"#父子元素边距重叠\" class=\"headerlink\" title=\"父子元素边距重叠\"></a>父子元素边距重叠</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>css盒子模型<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">media</span>=<span class=\"string\">\"screen\"</span>&gt;</span></span><br><span class=\"line\">\t\t\thtml * &#123;</span><br><span class=\"line\">\t\t\t\tmargin: 0;</span><br><span class=\"line\">\t\t\t\tpadding: 0;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">id</span>=<span class=\"string\">\"sec\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">media</span>=<span class=\"string\">\"screen\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t\t<span class=\"selector-id\">#sec</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t\t\t<span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#f00</span>;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t\t\t<span class=\"comment\">/* overflow: hidden; */</span></span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\"><span class=\"css\">\t\t\t\t<span class=\"selector-class\">.child</span> &#123;</span></span><br><span class=\"line\">\t\t\t\t\theight: 100px;</span><br><span class=\"line\">\t\t\t\t\tmargin-top: 10px;</span><br><span class=\"line\">\t\t\t\t\tbackground: yellow;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">article</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>"},{"layout":"[post]","title":"css之BFC","date":"2019-05-03T10:36:09.000Z","_content":"## BFC定义\n**BFC(Block formatting context)直译为\"块级格式化上下文\"。它是一个独立的渲染区域，只有Block-level box参与， 它规定了内部的Block-level Box如何布局，并且与这个区域外部毫不相干。**\n<!-- more -->\n### Box：css布局的基本单位\nBox 是 CSS 布局的对象和基本单位， 直观点来说，就是一个页面是由很多个 Box 组成的。元素的类型和 display 属性，决定了这个 Box 的类型。 不同类型的 Box， 会参与不同的 Formatting Context（一个决定如何渲染文档的容器），因此Box内的元素会以不同的方式渲染。让我们看看有哪些盒子：\n\n- block-level box:display 属性为 block, list-item, table 的元素，会生成 block-level box。并且参与 block fomatting context；\n- inline-level box:display 属性为 inline, inline-block, inline-table 的元素，会生成 inline-level box。并且参与 inline formatting context；\n- run-in box: css3\n\n### Formatting Context\nFormatting context 是 W3C CSS2.1 规范中的一个概念。它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。最常见的 Formatting context 有 Block fomatting context (简称BFC)和 Inline formatting context (简称IFC)。\n> BFC是一个独立的布局环境，其中的元素布局是不受外界的影响，并且在一个BFC中，块盒与行盒（行盒由一行中所有的内联元素所组成）都会垂直的沿着其父元素的边框排列。\n\n## BFC的布局规则\n1. 内部的Box会在垂直方向，一个接一个地放置。\n2. Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠。\n3. 每个盒子（块盒与行盒）的margin box的左边，与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。\n4. BFC的区域不会与float box重叠。\n5. BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。\n6. 计算BFC的高度时，浮动元素也参与计算。\n## 如何创建BFC\n1. float的值不是none。\n2. position的值不是static或者relative。\n3. display的值是inline-block、table-cell、flex、table-caption或者inline-flex\n4. overflow的值不是visible\n\n## BFC的作用\n1. 利用BFC避免margin重叠。\n2. 自适应两栏布局。\n3. 清除浮动。\n\n## 总结\n> BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。\n\n因为BFC内部的元素和外部的元素绝对不会互相影响，因此， 当BFC外部存在浮动时，它不应该影响BFC内部Box的布局，BFC会通过变窄，而不与浮动有重叠。同样的，当BFC内部有浮动时，为了不影响外部元素的布局，BFC计算高度时会包括浮动的高度。避免margin重叠也是这样的一个道理。\n\n## 代码展示\n### 在无BFC时候\n\n```html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\" />\n\t\t<title>css盒子模型</title>\n\t\t<style media=\"screen\">\n\t\t\thtml * {\n\t\t\t\tmargin: 0;\n\t\t\t\tpadding: 0;\n\t\t\t}\n\t\t</style>\n\t</head>\n\n\t<body>\n\t\t<!-- <section id=\"sec\">\n\t\t\t<style media=\"screen\">\n\t\t\t\t#sec {\n\t\t\t\t\tbackground: #f00;\n\t\t\t\t\t/* overflow: hidden; */\n\t\t\t\t}\n\t\t\t\t.child {\n\t\t\t\t\theight: 100px;\n\t\t\t\t\tmargin-top: 10px;\n\t\t\t\t\tbackground: yellow;\n\t\t\t\t}\n\t\t\t</style>\n\t\t\t<article class=\"child\"></article>\n        </section> -->\n\t\t<section id=\"margin\">\n\t\t\t<style>\n\t\t\t\t#margin {\n\t\t\t\t\tbackground: pink;\n\t\t\t\t\toverflow: hidden;\n\t\t\t\t}\n\t\t\t\t#margin > p {\n\t\t\t\t\tmargin: 5px auto 25px;\n\t\t\t\t\tbackground: blue;\n\t\t\t\t}\n\t\t\t</style>\n\t\t\t<p>1</p>\n\t\t\t<p>2</p>\n\t\t\t<p>3</p>\n\t\t</section>\n\t</body>\n</html>\n\n```\n![yasuo](wubfc.png)\n\n### 使用BFC\n\n```html\n<section id=\"margin\">\n\t\t\t<style>\n\t\t\t\t#margin {\n\t\t\t\t\tbackground: pink;\n\t\t\t\t\toverflow: hidden;\n\t\t\t\t}\n\t\t\t\t#margin > p {\n\t\t\t\t\tmargin: 5px auto 25px;\n\t\t\t\t\tbackground: blue;\n\t\t\t\t}\n\t\t\t</style>\n\t\t\t<p>1</p>\n\t\t\t<div style=\"overflow: hidden;\">\n                <p>2</p>\n            </div>\n\t\t\t<p>3</p>\n\t\t</section>\n```\n![yasuo](bfc.png)\n\n### 不与float重叠\n\n```html\n  <section id=\"layout\">\n            <style media\"screen\">\n                #layout{\n                    background: red;\n                }\n                #layout .left{\n                    float: left;\n                    width: 100px;\n                    height: 100px;\n                    background: pink;\n                }\n                #layout .right{\n                    height: 110px;\n                    background: blue;\n                    overflow: auto;\n                }\n            </style>\n            <div class=\"left\"></div>\n            <div class=\"right\"></div>\n        </section>\n```\n![yasuo](margin.png)\n\n### 清除浮动\n\n```html\n <!-- BFC子元素即使是float，也会参与高度计算 -->\n        <section id=\"float\">\n            <style media=\"screen\">\n                #float{\n                    background: red;\n                    overflow: hidden;\n                }\n                #float .float{\n                    float: left;\n                    font-size: 20px;\n                }\n            </style>\n            <div class=\"float\">\n                我是浮动元素\n            </div>\n        </section>\n```\n![yasuo](float.png)\n\n\n","source":"_posts/css之BFC.md","raw":"---\nlayout: '[post]'\ntitle: css之BFC\ndate: 2019-05-03 18:36:09\ntags: css\n---\n## BFC定义\n**BFC(Block formatting context)直译为\"块级格式化上下文\"。它是一个独立的渲染区域，只有Block-level box参与， 它规定了内部的Block-level Box如何布局，并且与这个区域外部毫不相干。**\n<!-- more -->\n### Box：css布局的基本单位\nBox 是 CSS 布局的对象和基本单位， 直观点来说，就是一个页面是由很多个 Box 组成的。元素的类型和 display 属性，决定了这个 Box 的类型。 不同类型的 Box， 会参与不同的 Formatting Context（一个决定如何渲染文档的容器），因此Box内的元素会以不同的方式渲染。让我们看看有哪些盒子：\n\n- block-level box:display 属性为 block, list-item, table 的元素，会生成 block-level box。并且参与 block fomatting context；\n- inline-level box:display 属性为 inline, inline-block, inline-table 的元素，会生成 inline-level box。并且参与 inline formatting context；\n- run-in box: css3\n\n### Formatting Context\nFormatting context 是 W3C CSS2.1 规范中的一个概念。它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。最常见的 Formatting context 有 Block fomatting context (简称BFC)和 Inline formatting context (简称IFC)。\n> BFC是一个独立的布局环境，其中的元素布局是不受外界的影响，并且在一个BFC中，块盒与行盒（行盒由一行中所有的内联元素所组成）都会垂直的沿着其父元素的边框排列。\n\n## BFC的布局规则\n1. 内部的Box会在垂直方向，一个接一个地放置。\n2. Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠。\n3. 每个盒子（块盒与行盒）的margin box的左边，与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。\n4. BFC的区域不会与float box重叠。\n5. BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。\n6. 计算BFC的高度时，浮动元素也参与计算。\n## 如何创建BFC\n1. float的值不是none。\n2. position的值不是static或者relative。\n3. display的值是inline-block、table-cell、flex、table-caption或者inline-flex\n4. overflow的值不是visible\n\n## BFC的作用\n1. 利用BFC避免margin重叠。\n2. 自适应两栏布局。\n3. 清除浮动。\n\n## 总结\n> BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。\n\n因为BFC内部的元素和外部的元素绝对不会互相影响，因此， 当BFC外部存在浮动时，它不应该影响BFC内部Box的布局，BFC会通过变窄，而不与浮动有重叠。同样的，当BFC内部有浮动时，为了不影响外部元素的布局，BFC计算高度时会包括浮动的高度。避免margin重叠也是这样的一个道理。\n\n## 代码展示\n### 在无BFC时候\n\n```html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\" />\n\t\t<title>css盒子模型</title>\n\t\t<style media=\"screen\">\n\t\t\thtml * {\n\t\t\t\tmargin: 0;\n\t\t\t\tpadding: 0;\n\t\t\t}\n\t\t</style>\n\t</head>\n\n\t<body>\n\t\t<!-- <section id=\"sec\">\n\t\t\t<style media=\"screen\">\n\t\t\t\t#sec {\n\t\t\t\t\tbackground: #f00;\n\t\t\t\t\t/* overflow: hidden; */\n\t\t\t\t}\n\t\t\t\t.child {\n\t\t\t\t\theight: 100px;\n\t\t\t\t\tmargin-top: 10px;\n\t\t\t\t\tbackground: yellow;\n\t\t\t\t}\n\t\t\t</style>\n\t\t\t<article class=\"child\"></article>\n        </section> -->\n\t\t<section id=\"margin\">\n\t\t\t<style>\n\t\t\t\t#margin {\n\t\t\t\t\tbackground: pink;\n\t\t\t\t\toverflow: hidden;\n\t\t\t\t}\n\t\t\t\t#margin > p {\n\t\t\t\t\tmargin: 5px auto 25px;\n\t\t\t\t\tbackground: blue;\n\t\t\t\t}\n\t\t\t</style>\n\t\t\t<p>1</p>\n\t\t\t<p>2</p>\n\t\t\t<p>3</p>\n\t\t</section>\n\t</body>\n</html>\n\n```\n![yasuo](wubfc.png)\n\n### 使用BFC\n\n```html\n<section id=\"margin\">\n\t\t\t<style>\n\t\t\t\t#margin {\n\t\t\t\t\tbackground: pink;\n\t\t\t\t\toverflow: hidden;\n\t\t\t\t}\n\t\t\t\t#margin > p {\n\t\t\t\t\tmargin: 5px auto 25px;\n\t\t\t\t\tbackground: blue;\n\t\t\t\t}\n\t\t\t</style>\n\t\t\t<p>1</p>\n\t\t\t<div style=\"overflow: hidden;\">\n                <p>2</p>\n            </div>\n\t\t\t<p>3</p>\n\t\t</section>\n```\n![yasuo](bfc.png)\n\n### 不与float重叠\n\n```html\n  <section id=\"layout\">\n            <style media\"screen\">\n                #layout{\n                    background: red;\n                }\n                #layout .left{\n                    float: left;\n                    width: 100px;\n                    height: 100px;\n                    background: pink;\n                }\n                #layout .right{\n                    height: 110px;\n                    background: blue;\n                    overflow: auto;\n                }\n            </style>\n            <div class=\"left\"></div>\n            <div class=\"right\"></div>\n        </section>\n```\n![yasuo](margin.png)\n\n### 清除浮动\n\n```html\n <!-- BFC子元素即使是float，也会参与高度计算 -->\n        <section id=\"float\">\n            <style media=\"screen\">\n                #float{\n                    background: red;\n                    overflow: hidden;\n                }\n                #float .float{\n                    float: left;\n                    font-size: 20px;\n                }\n            </style>\n            <div class=\"float\">\n                我是浮动元素\n            </div>\n        </section>\n```\n![yasuo](float.png)\n\n\n","slug":"css之BFC","published":1,"updated":"2020-03-04T11:25:43.000Z","comments":1,"photos":[],"link":"","_id":"ckbftlm6h00177w2p39jy34g6","content":"<h2 id=\"BFC定义\"><a href=\"#BFC定义\" class=\"headerlink\" title=\"BFC定义\"></a>BFC定义</h2><p><strong>BFC(Block formatting context)直译为”块级格式化上下文”。它是一个独立的渲染区域，只有Block-level box参与， 它规定了内部的Block-level Box如何布局，并且与这个区域外部毫不相干。</strong></p>\n<a id=\"more\"></a>\n<h3 id=\"Box：css布局的基本单位\"><a href=\"#Box：css布局的基本单位\" class=\"headerlink\" title=\"Box：css布局的基本单位\"></a>Box：css布局的基本单位</h3><p>Box 是 CSS 布局的对象和基本单位， 直观点来说，就是一个页面是由很多个 Box 组成的。元素的类型和 display 属性，决定了这个 Box 的类型。 不同类型的 Box， 会参与不同的 Formatting Context（一个决定如何渲染文档的容器），因此Box内的元素会以不同的方式渲染。让我们看看有哪些盒子：</p>\n<ul>\n<li>block-level box:display 属性为 block, list-item, table 的元素，会生成 block-level box。并且参与 block fomatting context；</li>\n<li>inline-level box:display 属性为 inline, inline-block, inline-table 的元素，会生成 inline-level box。并且参与 inline formatting context；</li>\n<li>run-in box: css3</li>\n</ul>\n<h3 id=\"Formatting-Context\"><a href=\"#Formatting-Context\" class=\"headerlink\" title=\"Formatting Context\"></a>Formatting Context</h3><p>Formatting context 是 W3C CSS2.1 规范中的一个概念。它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。最常见的 Formatting context 有 Block fomatting context (简称BFC)和 Inline formatting context (简称IFC)。</p>\n<blockquote>\n<p>BFC是一个独立的布局环境，其中的元素布局是不受外界的影响，并且在一个BFC中，块盒与行盒（行盒由一行中所有的内联元素所组成）都会垂直的沿着其父元素的边框排列。</p>\n</blockquote>\n<h2 id=\"BFC的布局规则\"><a href=\"#BFC的布局规则\" class=\"headerlink\" title=\"BFC的布局规则\"></a>BFC的布局规则</h2><ol>\n<li>内部的Box会在垂直方向，一个接一个地放置。</li>\n<li>Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠。</li>\n<li>每个盒子（块盒与行盒）的margin box的左边，与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。</li>\n<li>BFC的区域不会与float box重叠。</li>\n<li>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</li>\n<li>计算BFC的高度时，浮动元素也参与计算。<h2 id=\"如何创建BFC\"><a href=\"#如何创建BFC\" class=\"headerlink\" title=\"如何创建BFC\"></a>如何创建BFC</h2></li>\n<li>float的值不是none。</li>\n<li>position的值不是static或者relative。</li>\n<li>display的值是inline-block、table-cell、flex、table-caption或者inline-flex</li>\n<li>overflow的值不是visible</li>\n</ol>\n<h2 id=\"BFC的作用\"><a href=\"#BFC的作用\" class=\"headerlink\" title=\"BFC的作用\"></a>BFC的作用</h2><ol>\n<li>利用BFC避免margin重叠。</li>\n<li>自适应两栏布局。</li>\n<li>清除浮动。</li>\n</ol>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><blockquote>\n<p>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</p>\n</blockquote>\n<p>因为BFC内部的元素和外部的元素绝对不会互相影响，因此， 当BFC外部存在浮动时，它不应该影响BFC内部Box的布局，BFC会通过变窄，而不与浮动有重叠。同样的，当BFC内部有浮动时，为了不影响外部元素的布局，BFC计算高度时会包括浮动的高度。避免margin重叠也是这样的一个道理。</p>\n<h2 id=\"代码展示\"><a href=\"#代码展示\" class=\"headerlink\" title=\"代码展示\"></a>代码展示</h2><h3 id=\"在无BFC时候\"><a href=\"#在无BFC时候\" class=\"headerlink\" title=\"在无BFC时候\"></a>在无BFC时候</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>css盒子模型<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">media</span>=<span class=\"string\">\"screen\"</span>&gt;</span></span><br><span class=\"line\">\t\t\thtml * &#123;</span><br><span class=\"line\">\t\t\t\tmargin: 0;</span><br><span class=\"line\">\t\t\t\tpadding: 0;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- &lt;section id=\"sec\"&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t&lt;style media=\"screen\"&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t#sec &#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\tbackground: #f00;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\t/* overflow: hidden; */</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t.child &#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\theight: 100px;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\tmargin-top: 10px;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\tbackground: yellow;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t&lt;/style&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t&lt;article class=\"child\"&gt;&lt;/article&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;/section&gt; --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">id</span>=<span class=\"string\">\"margin\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t\t<span class=\"selector-id\">#margin</span> &#123;</span></span><br><span class=\"line\">\t\t\t\t\tbackground: pink;</span><br><span class=\"line\">\t\t\t\t\toverflow: hidden;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\"><span class=\"css\">\t\t\t\t<span class=\"selector-id\">#margin</span> &gt; <span class=\"selector-tag\">p</span> &#123;</span></span><br><span class=\"line\">\t\t\t\t\tmargin: 5px auto 25px;</span><br><span class=\"line\">\t\t\t\t\tbackground: blue;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/05/03/css%E4%B9%8BBFC/wubfc.png\" alt=\"yasuo\"></p>\n<h3 id=\"使用BFC\"><a href=\"#使用BFC\" class=\"headerlink\" title=\"使用BFC\"></a>使用BFC</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">id</span>=<span class=\"string\">\"margin\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t\t<span class=\"selector-id\">#margin</span> &#123;</span></span><br><span class=\"line\">\t\t\t\t\tbackground: pink;</span><br><span class=\"line\">\t\t\t\t\toverflow: hidden;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\"><span class=\"css\">\t\t\t\t<span class=\"selector-id\">#margin</span> &gt; <span class=\"selector-tag\">p</span> &#123;</span></span><br><span class=\"line\">\t\t\t\t\tmargin: 5px auto 25px;</span><br><span class=\"line\">\t\t\t\t\tbackground: blue;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"overflow: hidden;\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/05/03/css%E4%B9%8BBFC/bfc.png\" alt=\"yasuo\"></p>\n<h3 id=\"不与float重叠\"><a href=\"#不与float重叠\" class=\"headerlink\" title=\"不与float重叠\"></a>不与float重叠</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">id</span>=<span class=\"string\">\"layout\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">media</span>\"<span class=\"attr\">screen</span>\"&gt;</span></span><br><span class=\"line\"><span class=\"css\">              <span class=\"selector-id\">#layout</span>&#123;</span></span><br><span class=\"line\">                  background: red;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\"><span class=\"css\">              <span class=\"selector-id\">#layout</span> <span class=\"selector-class\">.left</span>&#123;</span></span><br><span class=\"line\">                  float: left;</span><br><span class=\"line\">                  width: 100px;</span><br><span class=\"line\">                  height: 100px;</span><br><span class=\"line\">                  background: pink;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\"><span class=\"css\">              <span class=\"selector-id\">#layout</span> <span class=\"selector-class\">.right</span>&#123;</span></span><br><span class=\"line\">                  height: 110px;</span><br><span class=\"line\">                  background: blue;</span><br><span class=\"line\">                  overflow: auto;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/05/03/css%E4%B9%8BBFC/margin.png\" alt=\"yasuo\"></p>\n<h3 id=\"清除浮动\"><a href=\"#清除浮动\" class=\"headerlink\" title=\"清除浮动\"></a>清除浮动</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- BFC子元素即使是float，也会参与高度计算 --&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">id</span>=<span class=\"string\">\"float\"</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">media</span>=<span class=\"string\">\"screen\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">               <span class=\"selector-id\">#float</span>&#123;</span></span><br><span class=\"line\">                   background: red;</span><br><span class=\"line\">                   overflow: hidden;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\"><span class=\"css\">               <span class=\"selector-id\">#float</span> <span class=\"selector-class\">.float</span>&#123;</span></span><br><span class=\"line\">                   float: left;</span><br><span class=\"line\">                   font-size: 20px;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"float\"</span>&gt;</span></span><br><span class=\"line\">               我是浮动元素</span><br><span class=\"line\">           <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/05/03/css%E4%B9%8BBFC/float.png\" alt=\"yasuo\"></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"BFC定义\"><a href=\"#BFC定义\" class=\"headerlink\" title=\"BFC定义\"></a>BFC定义</h2><p><strong>BFC(Block formatting context)直译为”块级格式化上下文”。它是一个独立的渲染区域，只有Block-level box参与， 它规定了内部的Block-level Box如何布局，并且与这个区域外部毫不相干。</strong></p>","more":"<h3 id=\"Box：css布局的基本单位\"><a href=\"#Box：css布局的基本单位\" class=\"headerlink\" title=\"Box：css布局的基本单位\"></a>Box：css布局的基本单位</h3><p>Box 是 CSS 布局的对象和基本单位， 直观点来说，就是一个页面是由很多个 Box 组成的。元素的类型和 display 属性，决定了这个 Box 的类型。 不同类型的 Box， 会参与不同的 Formatting Context（一个决定如何渲染文档的容器），因此Box内的元素会以不同的方式渲染。让我们看看有哪些盒子：</p>\n<ul>\n<li>block-level box:display 属性为 block, list-item, table 的元素，会生成 block-level box。并且参与 block fomatting context；</li>\n<li>inline-level box:display 属性为 inline, inline-block, inline-table 的元素，会生成 inline-level box。并且参与 inline formatting context；</li>\n<li>run-in box: css3</li>\n</ul>\n<h3 id=\"Formatting-Context\"><a href=\"#Formatting-Context\" class=\"headerlink\" title=\"Formatting Context\"></a>Formatting Context</h3><p>Formatting context 是 W3C CSS2.1 规范中的一个概念。它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。最常见的 Formatting context 有 Block fomatting context (简称BFC)和 Inline formatting context (简称IFC)。</p>\n<blockquote>\n<p>BFC是一个独立的布局环境，其中的元素布局是不受外界的影响，并且在一个BFC中，块盒与行盒（行盒由一行中所有的内联元素所组成）都会垂直的沿着其父元素的边框排列。</p>\n</blockquote>\n<h2 id=\"BFC的布局规则\"><a href=\"#BFC的布局规则\" class=\"headerlink\" title=\"BFC的布局规则\"></a>BFC的布局规则</h2><ol>\n<li>内部的Box会在垂直方向，一个接一个地放置。</li>\n<li>Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠。</li>\n<li>每个盒子（块盒与行盒）的margin box的左边，与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。</li>\n<li>BFC的区域不会与float box重叠。</li>\n<li>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</li>\n<li>计算BFC的高度时，浮动元素也参与计算。<h2 id=\"如何创建BFC\"><a href=\"#如何创建BFC\" class=\"headerlink\" title=\"如何创建BFC\"></a>如何创建BFC</h2></li>\n<li>float的值不是none。</li>\n<li>position的值不是static或者relative。</li>\n<li>display的值是inline-block、table-cell、flex、table-caption或者inline-flex</li>\n<li>overflow的值不是visible</li>\n</ol>\n<h2 id=\"BFC的作用\"><a href=\"#BFC的作用\" class=\"headerlink\" title=\"BFC的作用\"></a>BFC的作用</h2><ol>\n<li>利用BFC避免margin重叠。</li>\n<li>自适应两栏布局。</li>\n<li>清除浮动。</li>\n</ol>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><blockquote>\n<p>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</p>\n</blockquote>\n<p>因为BFC内部的元素和外部的元素绝对不会互相影响，因此， 当BFC外部存在浮动时，它不应该影响BFC内部Box的布局，BFC会通过变窄，而不与浮动有重叠。同样的，当BFC内部有浮动时，为了不影响外部元素的布局，BFC计算高度时会包括浮动的高度。避免margin重叠也是这样的一个道理。</p>\n<h2 id=\"代码展示\"><a href=\"#代码展示\" class=\"headerlink\" title=\"代码展示\"></a>代码展示</h2><h3 id=\"在无BFC时候\"><a href=\"#在无BFC时候\" class=\"headerlink\" title=\"在无BFC时候\"></a>在无BFC时候</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>css盒子模型<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">media</span>=<span class=\"string\">\"screen\"</span>&gt;</span></span><br><span class=\"line\">\t\t\thtml * &#123;</span><br><span class=\"line\">\t\t\t\tmargin: 0;</span><br><span class=\"line\">\t\t\t\tpadding: 0;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- &lt;section id=\"sec\"&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t&lt;style media=\"screen\"&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t#sec &#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\tbackground: #f00;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\t/* overflow: hidden; */</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t.child &#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\theight: 100px;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\tmargin-top: 10px;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\tbackground: yellow;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t&lt;/style&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t&lt;article class=\"child\"&gt;&lt;/article&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;/section&gt; --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">id</span>=<span class=\"string\">\"margin\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t\t<span class=\"selector-id\">#margin</span> &#123;</span></span><br><span class=\"line\">\t\t\t\t\tbackground: pink;</span><br><span class=\"line\">\t\t\t\t\toverflow: hidden;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\"><span class=\"css\">\t\t\t\t<span class=\"selector-id\">#margin</span> &gt; <span class=\"selector-tag\">p</span> &#123;</span></span><br><span class=\"line\">\t\t\t\t\tmargin: 5px auto 25px;</span><br><span class=\"line\">\t\t\t\t\tbackground: blue;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/05/03/css%E4%B9%8BBFC/wubfc.png\" alt=\"yasuo\"></p>\n<h3 id=\"使用BFC\"><a href=\"#使用BFC\" class=\"headerlink\" title=\"使用BFC\"></a>使用BFC</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">id</span>=<span class=\"string\">\"margin\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t\t<span class=\"selector-id\">#margin</span> &#123;</span></span><br><span class=\"line\">\t\t\t\t\tbackground: pink;</span><br><span class=\"line\">\t\t\t\t\toverflow: hidden;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\"><span class=\"css\">\t\t\t\t<span class=\"selector-id\">#margin</span> &gt; <span class=\"selector-tag\">p</span> &#123;</span></span><br><span class=\"line\">\t\t\t\t\tmargin: 5px auto 25px;</span><br><span class=\"line\">\t\t\t\t\tbackground: blue;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"overflow: hidden;\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/05/03/css%E4%B9%8BBFC/bfc.png\" alt=\"yasuo\"></p>\n<h3 id=\"不与float重叠\"><a href=\"#不与float重叠\" class=\"headerlink\" title=\"不与float重叠\"></a>不与float重叠</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">id</span>=<span class=\"string\">\"layout\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">media</span>\"<span class=\"attr\">screen</span>\"&gt;</span></span><br><span class=\"line\"><span class=\"css\">              <span class=\"selector-id\">#layout</span>&#123;</span></span><br><span class=\"line\">                  background: red;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\"><span class=\"css\">              <span class=\"selector-id\">#layout</span> <span class=\"selector-class\">.left</span>&#123;</span></span><br><span class=\"line\">                  float: left;</span><br><span class=\"line\">                  width: 100px;</span><br><span class=\"line\">                  height: 100px;</span><br><span class=\"line\">                  background: pink;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\"><span class=\"css\">              <span class=\"selector-id\">#layout</span> <span class=\"selector-class\">.right</span>&#123;</span></span><br><span class=\"line\">                  height: 110px;</span><br><span class=\"line\">                  background: blue;</span><br><span class=\"line\">                  overflow: auto;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/05/03/css%E4%B9%8BBFC/margin.png\" alt=\"yasuo\"></p>\n<h3 id=\"清除浮动\"><a href=\"#清除浮动\" class=\"headerlink\" title=\"清除浮动\"></a>清除浮动</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- BFC子元素即使是float，也会参与高度计算 --&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">id</span>=<span class=\"string\">\"float\"</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">media</span>=<span class=\"string\">\"screen\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">               <span class=\"selector-id\">#float</span>&#123;</span></span><br><span class=\"line\">                   background: red;</span><br><span class=\"line\">                   overflow: hidden;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\"><span class=\"css\">               <span class=\"selector-id\">#float</span> <span class=\"selector-class\">.float</span>&#123;</span></span><br><span class=\"line\">                   float: left;</span><br><span class=\"line\">                   font-size: 20px;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"float\"</span>&gt;</span></span><br><span class=\"line\">               我是浮动元素</span><br><span class=\"line\">           <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/05/03/css%E4%B9%8BBFC/float.png\" alt=\"yasuo\"></p>"},{"layout":"[post]","title":"js柯里化","date":"2020-05-01T08:21:12.000Z","_content":"### 前言\n\n我们在各种算法题以及技术文档中经常会看到柯里化这个词，那么，柯里化到底是什么？它在 js 中如何运用？对我们的编程有什么作用？都 9102 年了，如果你还不知道这些，那么你在面试过程中很可能会被面试官 diss🙄\n<!-- more -->\n* * *\n\n### 什么是柯里化（Currying）\n\n*维基百科*的[解释](https://links.jianshu.com/go?to=https%3A%2F%2Fzh.wikipedia.org%2Fwiki%2F%25E6%259F%25AF%25E9%2587%258C%25E5%258C%2596)是：把接收多个参数的函数变换成接收一个单一参数（最初函数的第一个参数）的函数，并返回接受剩余的参数而且返回结果的新函数的技术。其由数学家 Haskell Brooks Curry 提出，并以 curry 命名。\n\n简单的说，柯里化函数持续地返回一个新函数直到所有的参数用尽为止。这些参数全部保持 “活着” 的状态（通过闭包），然后当柯里化链中的最后一个函数被返回和执行时会全部被用来执行。\n\n这和[高阶组件](https://links.jianshu.com/go?to=https%3A%2F%2Freact.docschina.org%2Fdocs%2Fhigher-order-components.html)（Higher-order functions）如出一辙。前者返回一个新函数，后者返回一个新组件。\n\n### 举个简单的栗子\n\n本例使用到的部分 ES6 知识：[const](https://links.jianshu.com/go?to=http%3A%2F%2Fes6.ruanyifeng.com%2F%23docs%2Flet)，[arrow function](https://links.jianshu.com/go?to=http%3A%2F%2Fes6.ruanyifeng.com%2F%23docs%2Ffunction)。不了解的同学可先行查看。  \n写一个计算三个参数相乘的函数：\n\n```js\nfunction multiply (a, b, c) {\n  return a * b * c\n}\nmultiply(1, 2, 3)\n```\n\n这是我们第一反应写出来的 demo，也是看起来最简单的实现方法。再来创建一个柯里化版本的函数：\n\n```js\nfunction multiply (a) {\n  return (b) => {\n    return (c) => {\n      return a * b * c\n    }\n  }\n}\nmultiply(1)(2)(3)\n```\n\n这里我们将 multiply(1，2，3) 调用变成了 multiply (1) (2) (3) 调用。  \n单独一个函数被转换成了一系列函数。为了得到数字 1、2、3 相乘的结果，这些数字被一个接一个地传递，每个数字预填了下一个函数内联调用。\n\n我们把 multiply (1) (2) (3) 分割一下来帮助理解：\n\n```js\nconst mul1 = multiply(1)\nconst mul2 = mul1(2)\nconst result = mul2(3)\nconsole.log(result)\n```\n\n当 mul2 使用 3 作为参数调用时，它一起使用了之前已拿到的参数 a=1 和 b=2 进行运算并返回结果 6。\n\n作为一个嵌套函数，mul2 能够访问到外部的两个函数 multiply 和 mul1 的作用域。这就是为什么 mul2 能利用定义在已经‘离场’的函数中的参数来进行乘法操作的原因。即使这些函数早已返回并且从内存中垃圾回收了，但其变量仍然保持‘活着’([闭包](https://links.jianshu.com/go?to=https%3A%2F%2Fwww.liaoxuefeng.com%2Fwiki%2F001434446689867b27157e896e74d51a89c25cc8b43bdb3000%2F00143449934543461c9d5dfeeb848f5b72bd012e1113d15000))。你可以看到 3 个数字每次只有 1 个提供给函数，并且同一时间里一个新函数会被返回，直到所有的数字用尽为止。\n\n**柯里化背后的逻辑就是获取一个函数并派生出一个返回特殊函数的函数**，它实际上是一种思想，或者说是一种程序设计模式。\n\n### 柯里化的应用\n\n#### 1. 编写可以轻松复用和配置的小代码块，就像我们使用 npm 一样：\n\n举个例子，你有一家商店，然后你想给你的优惠顾客 10% 的折扣：\n\n```js\nfunction discount (price, discount) {\n  return price * discount\n}\n\nconst price = discount(500, 0.1) \n\n\nconst price = discount(1500, 0.1) \nconst price = discount(2000, 0.1) \nconst price = discount(50, 0.1) \nconst price = discount(300, 0.1) \n\n\nfunction discount (discount) {\n  return (price) => {\n    return price * discount\n  }\n}\nconst tenPercentDiscount = discount(0.1)\n\n\ntenPercentDiscount(500) \n\n\nconst twentyPercentDiscount = discount(0.2)\n\n\ntwentyPercentDiscount(500) \ntwentyPercentDiscount(3000) \ntwentyPercentDiscount(80000)\n```\n\n这个例子说明，使用柯里化思想能让我们在遇到只能确定一个参数而无法确定另一个参数时，代码设计编的变得更方便与高效，达到提升性能的目的。\n\n#### 2. 避免频繁调用具有相同参数的函数：\n\n比如我们有个用来计算体积的函数:\n\n```js\nfunction volume (l, w, h) {\n  return l * w * h\n}\n\n\nvolume(200, 30, 100) \nvolume(32, 45, 100) \nvolume(2322, 232, 100) \n\n\nfunction volume (h) {\n  return (w) => {\n    return (l) => {\n      return l * w * h\n    }\n  }\n}\n\n\nconst hCylinderHeight = volume(100)\nhCylinderHeight(200)(30) \nhCylinderHeight(2322)(232)\n```\n\n### 通用的柯里函数\n\n让我们建立一个函数来接受任何函数并且返回柯里化版本的函数：\n\n```js\nfunction curry (fn, ...args) {\n  return (..._args) => {\n    return fn(...args, ..._args)\n  }\n}\n```\n\n我们在这里做了什么？我们的 curry 函数接受一个我们想要柯里化的函数（fn）和一个变量（...args）。这里的 rest 操作符用来将参数聚集成一个...args。接下来我们返回一个函数，该函数将其余参数收集为..._args。此函数通过 spread 运算符将... args 和..._ args 作为参数解构传入来调用原始函数 fn，然后将值返回给用户。\n\n让我们使用我们的 curry 函数用之前的例子来创建一个特殊的函数（一个专门用来计算 100m 长度的物品体积）：\n\n```js\nfunction volume (l, h, w) {\n  return l * h * w\n}\nconst hCy = curry(volume, 100)\nhCy(200, 900) \nhCy(70, 60)\n```\n\n将类似回调函数的参数传入柯里化函数，能使复杂的问题变得简单！\n\n### 使用递归实现 curry 函数\n\nJS 柯里化作为函数式编程的重要一环，频繁在算法题中出现。以上的通用柯里化函数还不够完善，我们希望只给 curry 函数传递一个 fn 就能达到目的，现在我们使用递归来实现：\n\n```js\nfunction curry (fn) {\n  const c = (...args) => (args.length === fn.length) ?\n          fn(...args) : (..._args) => c(...args, ..._args)\n  return c\n}\n```\n\n该方法几乎为最简洁、代码行数最少的实现方法了。  \n首先我们能确定，实现柯里化的核心就是要确定传入参数的个数，并通通取到。  \n其次，我们得知道，`fn.length`为 fn 函数接受的参数个数，那么该实现方法就能解读为：  \n**不断递归获取传入参数，直到取到的参数个数等于 fn 的参数个数为止，最终将获取到的所有参数传给 fn 并返回执行结果**。\n\n### 结语\n\n柯里化作为一种重要的程序思想，已经广为应用，它使我们应对复杂问题时能提升效率，增强可读性。希望读者都能体会这种思想并运用于实践，相信在提升技术的路上能越走越远，成为一名优秀的工程师！\n\n[原文地址](https://www.jianshu.com/p/7fa99a4bee8b)","source":"_posts/js柯里化.md","raw":"---\nlayout: '[post]'\ntitle: js柯里化\ndate: 2020-05-01 16:21:12\ntags: javascript\n---\n### 前言\n\n我们在各种算法题以及技术文档中经常会看到柯里化这个词，那么，柯里化到底是什么？它在 js 中如何运用？对我们的编程有什么作用？都 9102 年了，如果你还不知道这些，那么你在面试过程中很可能会被面试官 diss🙄\n<!-- more -->\n* * *\n\n### 什么是柯里化（Currying）\n\n*维基百科*的[解释](https://links.jianshu.com/go?to=https%3A%2F%2Fzh.wikipedia.org%2Fwiki%2F%25E6%259F%25AF%25E9%2587%258C%25E5%258C%2596)是：把接收多个参数的函数变换成接收一个单一参数（最初函数的第一个参数）的函数，并返回接受剩余的参数而且返回结果的新函数的技术。其由数学家 Haskell Brooks Curry 提出，并以 curry 命名。\n\n简单的说，柯里化函数持续地返回一个新函数直到所有的参数用尽为止。这些参数全部保持 “活着” 的状态（通过闭包），然后当柯里化链中的最后一个函数被返回和执行时会全部被用来执行。\n\n这和[高阶组件](https://links.jianshu.com/go?to=https%3A%2F%2Freact.docschina.org%2Fdocs%2Fhigher-order-components.html)（Higher-order functions）如出一辙。前者返回一个新函数，后者返回一个新组件。\n\n### 举个简单的栗子\n\n本例使用到的部分 ES6 知识：[const](https://links.jianshu.com/go?to=http%3A%2F%2Fes6.ruanyifeng.com%2F%23docs%2Flet)，[arrow function](https://links.jianshu.com/go?to=http%3A%2F%2Fes6.ruanyifeng.com%2F%23docs%2Ffunction)。不了解的同学可先行查看。  \n写一个计算三个参数相乘的函数：\n\n```js\nfunction multiply (a, b, c) {\n  return a * b * c\n}\nmultiply(1, 2, 3)\n```\n\n这是我们第一反应写出来的 demo，也是看起来最简单的实现方法。再来创建一个柯里化版本的函数：\n\n```js\nfunction multiply (a) {\n  return (b) => {\n    return (c) => {\n      return a * b * c\n    }\n  }\n}\nmultiply(1)(2)(3)\n```\n\n这里我们将 multiply(1，2，3) 调用变成了 multiply (1) (2) (3) 调用。  \n单独一个函数被转换成了一系列函数。为了得到数字 1、2、3 相乘的结果，这些数字被一个接一个地传递，每个数字预填了下一个函数内联调用。\n\n我们把 multiply (1) (2) (3) 分割一下来帮助理解：\n\n```js\nconst mul1 = multiply(1)\nconst mul2 = mul1(2)\nconst result = mul2(3)\nconsole.log(result)\n```\n\n当 mul2 使用 3 作为参数调用时，它一起使用了之前已拿到的参数 a=1 和 b=2 进行运算并返回结果 6。\n\n作为一个嵌套函数，mul2 能够访问到外部的两个函数 multiply 和 mul1 的作用域。这就是为什么 mul2 能利用定义在已经‘离场’的函数中的参数来进行乘法操作的原因。即使这些函数早已返回并且从内存中垃圾回收了，但其变量仍然保持‘活着’([闭包](https://links.jianshu.com/go?to=https%3A%2F%2Fwww.liaoxuefeng.com%2Fwiki%2F001434446689867b27157e896e74d51a89c25cc8b43bdb3000%2F00143449934543461c9d5dfeeb848f5b72bd012e1113d15000))。你可以看到 3 个数字每次只有 1 个提供给函数，并且同一时间里一个新函数会被返回，直到所有的数字用尽为止。\n\n**柯里化背后的逻辑就是获取一个函数并派生出一个返回特殊函数的函数**，它实际上是一种思想，或者说是一种程序设计模式。\n\n### 柯里化的应用\n\n#### 1. 编写可以轻松复用和配置的小代码块，就像我们使用 npm 一样：\n\n举个例子，你有一家商店，然后你想给你的优惠顾客 10% 的折扣：\n\n```js\nfunction discount (price, discount) {\n  return price * discount\n}\n\nconst price = discount(500, 0.1) \n\n\nconst price = discount(1500, 0.1) \nconst price = discount(2000, 0.1) \nconst price = discount(50, 0.1) \nconst price = discount(300, 0.1) \n\n\nfunction discount (discount) {\n  return (price) => {\n    return price * discount\n  }\n}\nconst tenPercentDiscount = discount(0.1)\n\n\ntenPercentDiscount(500) \n\n\nconst twentyPercentDiscount = discount(0.2)\n\n\ntwentyPercentDiscount(500) \ntwentyPercentDiscount(3000) \ntwentyPercentDiscount(80000)\n```\n\n这个例子说明，使用柯里化思想能让我们在遇到只能确定一个参数而无法确定另一个参数时，代码设计编的变得更方便与高效，达到提升性能的目的。\n\n#### 2. 避免频繁调用具有相同参数的函数：\n\n比如我们有个用来计算体积的函数:\n\n```js\nfunction volume (l, w, h) {\n  return l * w * h\n}\n\n\nvolume(200, 30, 100) \nvolume(32, 45, 100) \nvolume(2322, 232, 100) \n\n\nfunction volume (h) {\n  return (w) => {\n    return (l) => {\n      return l * w * h\n    }\n  }\n}\n\n\nconst hCylinderHeight = volume(100)\nhCylinderHeight(200)(30) \nhCylinderHeight(2322)(232)\n```\n\n### 通用的柯里函数\n\n让我们建立一个函数来接受任何函数并且返回柯里化版本的函数：\n\n```js\nfunction curry (fn, ...args) {\n  return (..._args) => {\n    return fn(...args, ..._args)\n  }\n}\n```\n\n我们在这里做了什么？我们的 curry 函数接受一个我们想要柯里化的函数（fn）和一个变量（...args）。这里的 rest 操作符用来将参数聚集成一个...args。接下来我们返回一个函数，该函数将其余参数收集为..._args。此函数通过 spread 运算符将... args 和..._ args 作为参数解构传入来调用原始函数 fn，然后将值返回给用户。\n\n让我们使用我们的 curry 函数用之前的例子来创建一个特殊的函数（一个专门用来计算 100m 长度的物品体积）：\n\n```js\nfunction volume (l, h, w) {\n  return l * h * w\n}\nconst hCy = curry(volume, 100)\nhCy(200, 900) \nhCy(70, 60)\n```\n\n将类似回调函数的参数传入柯里化函数，能使复杂的问题变得简单！\n\n### 使用递归实现 curry 函数\n\nJS 柯里化作为函数式编程的重要一环，频繁在算法题中出现。以上的通用柯里化函数还不够完善，我们希望只给 curry 函数传递一个 fn 就能达到目的，现在我们使用递归来实现：\n\n```js\nfunction curry (fn) {\n  const c = (...args) => (args.length === fn.length) ?\n          fn(...args) : (..._args) => c(...args, ..._args)\n  return c\n}\n```\n\n该方法几乎为最简洁、代码行数最少的实现方法了。  \n首先我们能确定，实现柯里化的核心就是要确定传入参数的个数，并通通取到。  \n其次，我们得知道，`fn.length`为 fn 函数接受的参数个数，那么该实现方法就能解读为：  \n**不断递归获取传入参数，直到取到的参数个数等于 fn 的参数个数为止，最终将获取到的所有参数传给 fn 并返回执行结果**。\n\n### 结语\n\n柯里化作为一种重要的程序思想，已经广为应用，它使我们应对复杂问题时能提升效率，增强可读性。希望读者都能体会这种思想并运用于实践，相信在提升技术的路上能越走越远，成为一名优秀的工程师！\n\n[原文地址](https://www.jianshu.com/p/7fa99a4bee8b)","slug":"js柯里化","published":1,"updated":"2020-05-20T08:21:57.000Z","comments":1,"photos":[],"link":"","_id":"ckbftlm6l00197w2p9pu4akyn","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>我们在各种算法题以及技术文档中经常会看到柯里化这个词，那么，柯里化到底是什么？它在 js 中如何运用？对我们的编程有什么作用？都 9102 年了，如果你还不知道这些，那么你在面试过程中很可能会被面试官 diss🙄</p>\n<a id=\"more\"></a>\n<hr>\n<h3 id=\"什么是柯里化（Currying）\"><a href=\"#什么是柯里化（Currying）\" class=\"headerlink\" title=\"什么是柯里化（Currying）\"></a>什么是柯里化（Currying）</h3><p><em>维基百科</em>的<a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fzh.wikipedia.org%2Fwiki%2F%25E6%259F%25AF%25E9%2587%258C%25E5%258C%2596\" target=\"_blank\" rel=\"noopener\">解释</a>是：把接收多个参数的函数变换成接收一个单一参数（最初函数的第一个参数）的函数，并返回接受剩余的参数而且返回结果的新函数的技术。其由数学家 Haskell Brooks Curry 提出，并以 curry 命名。</p>\n<p>简单的说，柯里化函数持续地返回一个新函数直到所有的参数用尽为止。这些参数全部保持 “活着” 的状态（通过闭包），然后当柯里化链中的最后一个函数被返回和执行时会全部被用来执行。</p>\n<p>这和<a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Freact.docschina.org%2Fdocs%2Fhigher-order-components.html\" target=\"_blank\" rel=\"noopener\">高阶组件</a>（Higher-order functions）如出一辙。前者返回一个新函数，后者返回一个新组件。</p>\n<h3 id=\"举个简单的栗子\"><a href=\"#举个简单的栗子\" class=\"headerlink\" title=\"举个简单的栗子\"></a>举个简单的栗子</h3><p>本例使用到的部分 ES6 知识：<a href=\"https://links.jianshu.com/go?to=http%3A%2F%2Fes6.ruanyifeng.com%2F%23docs%2Flet\" target=\"_blank\" rel=\"noopener\">const</a>，<a href=\"https://links.jianshu.com/go?to=http%3A%2F%2Fes6.ruanyifeng.com%2F%23docs%2Ffunction\" target=\"_blank\" rel=\"noopener\">arrow function</a>。不了解的同学可先行查看。<br>写一个计算三个参数相乘的函数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">multiply</span> (<span class=\"params\">a, b, c</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a * b * c</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">multiply(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n\n<p>这是我们第一反应写出来的 demo，也是看起来最简单的实现方法。再来创建一个柯里化版本的函数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">multiply</span> (<span class=\"params\">a</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">b</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">c</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> a * b * c</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">multiply(<span class=\"number\">1</span>)(<span class=\"number\">2</span>)(<span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n\n<p>这里我们将 multiply(1，2，3) 调用变成了 multiply (1) (2) (3) 调用。<br>单独一个函数被转换成了一系列函数。为了得到数字 1、2、3 相乘的结果，这些数字被一个接一个地传递，每个数字预填了下一个函数内联调用。</p>\n<p>我们把 multiply (1) (2) (3) 分割一下来帮助理解：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mul1 = multiply(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> mul2 = mul1(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> result = mul2(<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result)</span><br></pre></td></tr></table></figure>\n\n<p>当 mul2 使用 3 作为参数调用时，它一起使用了之前已拿到的参数 a=1 和 b=2 进行运算并返回结果 6。</p>\n<p>作为一个嵌套函数，mul2 能够访问到外部的两个函数 multiply 和 mul1 的作用域。这就是为什么 mul2 能利用定义在已经‘离场’的函数中的参数来进行乘法操作的原因。即使这些函数早已返回并且从内存中垃圾回收了，但其变量仍然保持‘活着’(<a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fwww.liaoxuefeng.com%2Fwiki%2F001434446689867b27157e896e74d51a89c25cc8b43bdb3000%2F00143449934543461c9d5dfeeb848f5b72bd012e1113d15000\" target=\"_blank\" rel=\"noopener\">闭包</a>)。你可以看到 3 个数字每次只有 1 个提供给函数，并且同一时间里一个新函数会被返回，直到所有的数字用尽为止。</p>\n<p><strong>柯里化背后的逻辑就是获取一个函数并派生出一个返回特殊函数的函数</strong>，它实际上是一种思想，或者说是一种程序设计模式。</p>\n<h3 id=\"柯里化的应用\"><a href=\"#柯里化的应用\" class=\"headerlink\" title=\"柯里化的应用\"></a>柯里化的应用</h3><h4 id=\"1-编写可以轻松复用和配置的小代码块，就像我们使用-npm-一样：\"><a href=\"#1-编写可以轻松复用和配置的小代码块，就像我们使用-npm-一样：\" class=\"headerlink\" title=\"1. 编写可以轻松复用和配置的小代码块，就像我们使用 npm 一样：\"></a>1. 编写可以轻松复用和配置的小代码块，就像我们使用 npm 一样：</h4><p>举个例子，你有一家商店，然后你想给你的优惠顾客 10% 的折扣：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">discount</span> (<span class=\"params\">price, discount</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> price * discount</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> price = discount(<span class=\"number\">500</span>, <span class=\"number\">0.1</span>) </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> price = discount(<span class=\"number\">1500</span>, <span class=\"number\">0.1</span>) </span><br><span class=\"line\"><span class=\"keyword\">const</span> price = discount(<span class=\"number\">2000</span>, <span class=\"number\">0.1</span>) </span><br><span class=\"line\"><span class=\"keyword\">const</span> price = discount(<span class=\"number\">50</span>, <span class=\"number\">0.1</span>) </span><br><span class=\"line\"><span class=\"keyword\">const</span> price = discount(<span class=\"number\">300</span>, <span class=\"number\">0.1</span>) </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">discount</span> (<span class=\"params\">discount</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">price</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> price * discount</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> tenPercentDiscount = discount(<span class=\"number\">0.1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">tenPercentDiscount(<span class=\"number\">500</span>) </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> twentyPercentDiscount = discount(<span class=\"number\">0.2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">twentyPercentDiscount(<span class=\"number\">500</span>) </span><br><span class=\"line\">twentyPercentDiscount(<span class=\"number\">3000</span>) </span><br><span class=\"line\">twentyPercentDiscount(<span class=\"number\">80000</span>)</span><br></pre></td></tr></table></figure>\n\n<p>这个例子说明，使用柯里化思想能让我们在遇到只能确定一个参数而无法确定另一个参数时，代码设计编的变得更方便与高效，达到提升性能的目的。</p>\n<h4 id=\"2-避免频繁调用具有相同参数的函数：\"><a href=\"#2-避免频繁调用具有相同参数的函数：\" class=\"headerlink\" title=\"2. 避免频繁调用具有相同参数的函数：\"></a>2. 避免频繁调用具有相同参数的函数：</h4><p>比如我们有个用来计算体积的函数:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">volume</span> (<span class=\"params\">l, w, h</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> l * w * h</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">volume(<span class=\"number\">200</span>, <span class=\"number\">30</span>, <span class=\"number\">100</span>) </span><br><span class=\"line\">volume(<span class=\"number\">32</span>, <span class=\"number\">45</span>, <span class=\"number\">100</span>) </span><br><span class=\"line\">volume(<span class=\"number\">2322</span>, <span class=\"number\">232</span>, <span class=\"number\">100</span>) </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">volume</span> (<span class=\"params\">h</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">w</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">l</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> l * w * h</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> hCylinderHeight = volume(<span class=\"number\">100</span>)</span><br><span class=\"line\">hCylinderHeight(<span class=\"number\">200</span>)(<span class=\"number\">30</span>) </span><br><span class=\"line\">hCylinderHeight(<span class=\"number\">2322</span>)(<span class=\"number\">232</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"通用的柯里函数\"><a href=\"#通用的柯里函数\" class=\"headerlink\" title=\"通用的柯里函数\"></a>通用的柯里函数</h3><p>让我们建立一个函数来接受任何函数并且返回柯里化版本的函数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">curry</span> (<span class=\"params\">fn, ...args</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">..._args</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fn(...args, ..._args)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们在这里做了什么？我们的 curry 函数接受一个我们想要柯里化的函数（fn）和一个变量（…args）。这里的 rest 操作符用来将参数聚集成一个…args。接下来我们返回一个函数，该函数将其余参数收集为…<em>args。此函数通过 spread 运算符将… args 和…</em> args 作为参数解构传入来调用原始函数 fn，然后将值返回给用户。</p>\n<p>让我们使用我们的 curry 函数用之前的例子来创建一个特殊的函数（一个专门用来计算 100m 长度的物品体积）：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">volume</span> (<span class=\"params\">l, h, w</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> l * h * w</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> hCy = curry(volume, <span class=\"number\">100</span>)</span><br><span class=\"line\">hCy(<span class=\"number\">200</span>, <span class=\"number\">900</span>) </span><br><span class=\"line\">hCy(<span class=\"number\">70</span>, <span class=\"number\">60</span>)</span><br></pre></td></tr></table></figure>\n\n<p>将类似回调函数的参数传入柯里化函数，能使复杂的问题变得简单！</p>\n<h3 id=\"使用递归实现-curry-函数\"><a href=\"#使用递归实现-curry-函数\" class=\"headerlink\" title=\"使用递归实现 curry 函数\"></a>使用递归实现 curry 函数</h3><p>JS 柯里化作为函数式编程的重要一环，频繁在算法题中出现。以上的通用柯里化函数还不够完善，我们希望只给 curry 函数传递一个 fn 就能达到目的，现在我们使用递归来实现：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">curry</span> (<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> c = <span class=\"function\">(<span class=\"params\">...args</span>) =&gt;</span> (args.length === fn.length) ?</span><br><span class=\"line\">          fn(...args) : <span class=\"function\">(<span class=\"params\">..._args</span>) =&gt;</span> c(...args, ..._args)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> c</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>该方法几乎为最简洁、代码行数最少的实现方法了。<br>首先我们能确定，实现柯里化的核心就是要确定传入参数的个数，并通通取到。<br>其次，我们得知道，<code>fn.length</code>为 fn 函数接受的参数个数，那么该实现方法就能解读为：<br><strong>不断递归获取传入参数，直到取到的参数个数等于 fn 的参数个数为止，最终将获取到的所有参数传给 fn 并返回执行结果</strong>。</p>\n<h3 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h3><p>柯里化作为一种重要的程序思想，已经广为应用，它使我们应对复杂问题时能提升效率，增强可读性。希望读者都能体会这种思想并运用于实践，相信在提升技术的路上能越走越远，成为一名优秀的工程师！</p>\n<p><a href=\"https://www.jianshu.com/p/7fa99a4bee8b\" target=\"_blank\" rel=\"noopener\">原文地址</a></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>我们在各种算法题以及技术文档中经常会看到柯里化这个词，那么，柯里化到底是什么？它在 js 中如何运用？对我们的编程有什么作用？都 9102 年了，如果你还不知道这些，那么你在面试过程中很可能会被面试官 diss🙄</p>","more":"<hr>\n<h3 id=\"什么是柯里化（Currying）\"><a href=\"#什么是柯里化（Currying）\" class=\"headerlink\" title=\"什么是柯里化（Currying）\"></a>什么是柯里化（Currying）</h3><p><em>维基百科</em>的<a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fzh.wikipedia.org%2Fwiki%2F%25E6%259F%25AF%25E9%2587%258C%25E5%258C%2596\" target=\"_blank\" rel=\"noopener\">解释</a>是：把接收多个参数的函数变换成接收一个单一参数（最初函数的第一个参数）的函数，并返回接受剩余的参数而且返回结果的新函数的技术。其由数学家 Haskell Brooks Curry 提出，并以 curry 命名。</p>\n<p>简单的说，柯里化函数持续地返回一个新函数直到所有的参数用尽为止。这些参数全部保持 “活着” 的状态（通过闭包），然后当柯里化链中的最后一个函数被返回和执行时会全部被用来执行。</p>\n<p>这和<a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Freact.docschina.org%2Fdocs%2Fhigher-order-components.html\" target=\"_blank\" rel=\"noopener\">高阶组件</a>（Higher-order functions）如出一辙。前者返回一个新函数，后者返回一个新组件。</p>\n<h3 id=\"举个简单的栗子\"><a href=\"#举个简单的栗子\" class=\"headerlink\" title=\"举个简单的栗子\"></a>举个简单的栗子</h3><p>本例使用到的部分 ES6 知识：<a href=\"https://links.jianshu.com/go?to=http%3A%2F%2Fes6.ruanyifeng.com%2F%23docs%2Flet\" target=\"_blank\" rel=\"noopener\">const</a>，<a href=\"https://links.jianshu.com/go?to=http%3A%2F%2Fes6.ruanyifeng.com%2F%23docs%2Ffunction\" target=\"_blank\" rel=\"noopener\">arrow function</a>。不了解的同学可先行查看。<br>写一个计算三个参数相乘的函数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">multiply</span> (<span class=\"params\">a, b, c</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a * b * c</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">multiply(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n\n<p>这是我们第一反应写出来的 demo，也是看起来最简单的实现方法。再来创建一个柯里化版本的函数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">multiply</span> (<span class=\"params\">a</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">b</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">c</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> a * b * c</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">multiply(<span class=\"number\">1</span>)(<span class=\"number\">2</span>)(<span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n\n<p>这里我们将 multiply(1，2，3) 调用变成了 multiply (1) (2) (3) 调用。<br>单独一个函数被转换成了一系列函数。为了得到数字 1、2、3 相乘的结果，这些数字被一个接一个地传递，每个数字预填了下一个函数内联调用。</p>\n<p>我们把 multiply (1) (2) (3) 分割一下来帮助理解：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mul1 = multiply(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> mul2 = mul1(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> result = mul2(<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result)</span><br></pre></td></tr></table></figure>\n\n<p>当 mul2 使用 3 作为参数调用时，它一起使用了之前已拿到的参数 a=1 和 b=2 进行运算并返回结果 6。</p>\n<p>作为一个嵌套函数，mul2 能够访问到外部的两个函数 multiply 和 mul1 的作用域。这就是为什么 mul2 能利用定义在已经‘离场’的函数中的参数来进行乘法操作的原因。即使这些函数早已返回并且从内存中垃圾回收了，但其变量仍然保持‘活着’(<a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fwww.liaoxuefeng.com%2Fwiki%2F001434446689867b27157e896e74d51a89c25cc8b43bdb3000%2F00143449934543461c9d5dfeeb848f5b72bd012e1113d15000\" target=\"_blank\" rel=\"noopener\">闭包</a>)。你可以看到 3 个数字每次只有 1 个提供给函数，并且同一时间里一个新函数会被返回，直到所有的数字用尽为止。</p>\n<p><strong>柯里化背后的逻辑就是获取一个函数并派生出一个返回特殊函数的函数</strong>，它实际上是一种思想，或者说是一种程序设计模式。</p>\n<h3 id=\"柯里化的应用\"><a href=\"#柯里化的应用\" class=\"headerlink\" title=\"柯里化的应用\"></a>柯里化的应用</h3><h4 id=\"1-编写可以轻松复用和配置的小代码块，就像我们使用-npm-一样：\"><a href=\"#1-编写可以轻松复用和配置的小代码块，就像我们使用-npm-一样：\" class=\"headerlink\" title=\"1. 编写可以轻松复用和配置的小代码块，就像我们使用 npm 一样：\"></a>1. 编写可以轻松复用和配置的小代码块，就像我们使用 npm 一样：</h4><p>举个例子，你有一家商店，然后你想给你的优惠顾客 10% 的折扣：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">discount</span> (<span class=\"params\">price, discount</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> price * discount</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> price = discount(<span class=\"number\">500</span>, <span class=\"number\">0.1</span>) </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> price = discount(<span class=\"number\">1500</span>, <span class=\"number\">0.1</span>) </span><br><span class=\"line\"><span class=\"keyword\">const</span> price = discount(<span class=\"number\">2000</span>, <span class=\"number\">0.1</span>) </span><br><span class=\"line\"><span class=\"keyword\">const</span> price = discount(<span class=\"number\">50</span>, <span class=\"number\">0.1</span>) </span><br><span class=\"line\"><span class=\"keyword\">const</span> price = discount(<span class=\"number\">300</span>, <span class=\"number\">0.1</span>) </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">discount</span> (<span class=\"params\">discount</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">price</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> price * discount</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> tenPercentDiscount = discount(<span class=\"number\">0.1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">tenPercentDiscount(<span class=\"number\">500</span>) </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> twentyPercentDiscount = discount(<span class=\"number\">0.2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">twentyPercentDiscount(<span class=\"number\">500</span>) </span><br><span class=\"line\">twentyPercentDiscount(<span class=\"number\">3000</span>) </span><br><span class=\"line\">twentyPercentDiscount(<span class=\"number\">80000</span>)</span><br></pre></td></tr></table></figure>\n\n<p>这个例子说明，使用柯里化思想能让我们在遇到只能确定一个参数而无法确定另一个参数时，代码设计编的变得更方便与高效，达到提升性能的目的。</p>\n<h4 id=\"2-避免频繁调用具有相同参数的函数：\"><a href=\"#2-避免频繁调用具有相同参数的函数：\" class=\"headerlink\" title=\"2. 避免频繁调用具有相同参数的函数：\"></a>2. 避免频繁调用具有相同参数的函数：</h4><p>比如我们有个用来计算体积的函数:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">volume</span> (<span class=\"params\">l, w, h</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> l * w * h</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">volume(<span class=\"number\">200</span>, <span class=\"number\">30</span>, <span class=\"number\">100</span>) </span><br><span class=\"line\">volume(<span class=\"number\">32</span>, <span class=\"number\">45</span>, <span class=\"number\">100</span>) </span><br><span class=\"line\">volume(<span class=\"number\">2322</span>, <span class=\"number\">232</span>, <span class=\"number\">100</span>) </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">volume</span> (<span class=\"params\">h</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">w</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">l</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> l * w * h</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> hCylinderHeight = volume(<span class=\"number\">100</span>)</span><br><span class=\"line\">hCylinderHeight(<span class=\"number\">200</span>)(<span class=\"number\">30</span>) </span><br><span class=\"line\">hCylinderHeight(<span class=\"number\">2322</span>)(<span class=\"number\">232</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"通用的柯里函数\"><a href=\"#通用的柯里函数\" class=\"headerlink\" title=\"通用的柯里函数\"></a>通用的柯里函数</h3><p>让我们建立一个函数来接受任何函数并且返回柯里化版本的函数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">curry</span> (<span class=\"params\">fn, ...args</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">..._args</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fn(...args, ..._args)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们在这里做了什么？我们的 curry 函数接受一个我们想要柯里化的函数（fn）和一个变量（…args）。这里的 rest 操作符用来将参数聚集成一个…args。接下来我们返回一个函数，该函数将其余参数收集为…<em>args。此函数通过 spread 运算符将… args 和…</em> args 作为参数解构传入来调用原始函数 fn，然后将值返回给用户。</p>\n<p>让我们使用我们的 curry 函数用之前的例子来创建一个特殊的函数（一个专门用来计算 100m 长度的物品体积）：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">volume</span> (<span class=\"params\">l, h, w</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> l * h * w</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> hCy = curry(volume, <span class=\"number\">100</span>)</span><br><span class=\"line\">hCy(<span class=\"number\">200</span>, <span class=\"number\">900</span>) </span><br><span class=\"line\">hCy(<span class=\"number\">70</span>, <span class=\"number\">60</span>)</span><br></pre></td></tr></table></figure>\n\n<p>将类似回调函数的参数传入柯里化函数，能使复杂的问题变得简单！</p>\n<h3 id=\"使用递归实现-curry-函数\"><a href=\"#使用递归实现-curry-函数\" class=\"headerlink\" title=\"使用递归实现 curry 函数\"></a>使用递归实现 curry 函数</h3><p>JS 柯里化作为函数式编程的重要一环，频繁在算法题中出现。以上的通用柯里化函数还不够完善，我们希望只给 curry 函数传递一个 fn 就能达到目的，现在我们使用递归来实现：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">curry</span> (<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> c = <span class=\"function\">(<span class=\"params\">...args</span>) =&gt;</span> (args.length === fn.length) ?</span><br><span class=\"line\">          fn(...args) : <span class=\"function\">(<span class=\"params\">..._args</span>) =&gt;</span> c(...args, ..._args)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> c</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>该方法几乎为最简洁、代码行数最少的实现方法了。<br>首先我们能确定，实现柯里化的核心就是要确定传入参数的个数，并通通取到。<br>其次，我们得知道，<code>fn.length</code>为 fn 函数接受的参数个数，那么该实现方法就能解读为：<br><strong>不断递归获取传入参数，直到取到的参数个数等于 fn 的参数个数为止，最终将获取到的所有参数传给 fn 并返回执行结果</strong>。</p>\n<h3 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h3><p>柯里化作为一种重要的程序思想，已经广为应用，它使我们应对复杂问题时能提升效率，增强可读性。希望读者都能体会这种思想并运用于实践，相信在提升技术的路上能越走越远，成为一名优秀的工程师！</p>\n<p><a href=\"https://www.jianshu.com/p/7fa99a4bee8b\" target=\"_blank\" rel=\"noopener\">原文地址</a></p>"},{"layout":"[post]","title":"call、apply、bind","date":"2020-05-20T07:36:53.000Z","_content":"\n\nbind 是返回对应函数，便于稍后调用；apply 、call 则是立即调用 。\n <!-- more -->\napply、call\n----------\n\n在 javascript 中，`call` 和 `apply` 都是为了改变某个函数运行时的上下文（context）而存在的，换句话说，就是为了改变函数体内部 `this` 的指向。  \nJavaScript 的一大特点是，函数存在「定义时上下文」和「运行时上下文」以及「上下文是可以改变的」这样的概念。\n\n```js\nfunction fruits() {}\n \nfruits.prototype = {\n    color: \"red\",\n    say: function() {\n        console.log(\"My color is \" + this.color);\n    }\n}\n \nvar apple = new fruits;\napple.say();\n```\n\n但是如果我们有一个对象`banana= {color : \"yellow\"}` , 我们不想对它重新定义 `say` 方法，那么我们可以通过 `call` 或 `apply` 用 `apple` 的 `say` 方法：\n\n```js\nbanana = {\n    color: \"yellow\"\n}\napple.say.call(banana);     \napple.say.apply(banana);\n```\n\n所以，可以看出 `call` 和 `apply` 是为了动态改变 `this` 而出现的，当一个 `object` 没有某个方法（本栗子中`banana`没有`say`方法），但是其他的有（本栗子中`apple`有`say`方法），我们可以借助`call`或`apply`用其它对象的方法来操作。\n\napply、call 区别\n-------------\n\n对于 `apply`、`call` 二者而言，作用完全一样，只是接受参数的方式不太一样。例如，有一个函数定义如下：\n\n```js\nvar func = function(arg1, arg2) {\n     \n};\n```\n\n就可以通过如下方式来调用：\n\n```js\nfunc.call(this, arg1, arg2);\nfunc.apply(this, [arg1, arg2])\n```\n\n其中 `this` 是你想指定的上下文，他可以是任何一个 JavaScript 对象 (JavaScript 中一切皆对象)，`call` 需要把参数按顺序传递进去，而 `apply` 则是把参数放在数组里。　　  \n为了巩固加深记忆，下面列举一些常用用法：\n\napply、call 实例\n-------------\n\n**数组之间追加**\n\n```js\nvar array1 = [12 , \"foo\" , {name:\"Joe\"} , -2458]; \nvar array2 = [\"Doe\" , 555 , 100]; \nArray.prototype.push.apply(array1, array2); \n// array1 值为  [12 , \"foo\" , {name:\"Joe\"} , -2458 , \"Doe\" , 555 , 100]\n```\n\n**获取数组中的最大值和最小值**\n\n```js\nvar  numbers = [5, 458 , 120 , -215 ]; \nvar maxInNumbers = Math.max.apply(Math, numbers),   \n    maxInNumbers = Math.max.call(Math,5, 458 , 120 , -215);\n```\n\nnumber 本身没有 max 方法，但是 Math 有，我们就可以借助 call 或者 apply 使用其方法。\n\n**验证是否是数组（前提是`toString()`方法没有被重写过）**\n\n```js\nfunctionisArray(obj){ \n    return Object.prototype.toString.call(obj) === '[object Array]' ;\n}\n```\n\n**类（伪）数组使用数组方法**\n\n```js\nvar domNodes = Array.prototype.slice.call(document.getElementsByTagName(\"*\"));\n```\n\nJavascript 中存在一种名为伪数组的对象结构。比较特别的是 `arguments` 对象，还有像调用 `getElementsByTagName` , `document.childNodes` 之类的，它们返回`NodeList`对象都属于伪数组。不能应用 Array 下的 `push` , `pop` 等方法。  \n但是我们能通过 `Array.prototype.slice.call` 转换为真正的数组的带有 `length` 属性的对象，这样 `domNodes` 就可以应用 Array 下的所有方法了。\n\n**面试题**  \n定义一个 `log` 方法，让它可以代理 `console.log` 方法，常见的解决方法是：\n\n```js\nfunction log(msg)　{\n  console.log(msg);\n}\nlog(1);    \nlog(1,2);\n```\n\n上面方法可以解决最基本的需求，但是当传入参数的个数是不确定的时候，上面的方法就失效了，这个时候就可以考虑使用 `apply` 或者 `call`，注意这里传入多少个参数是不确定的，所以使用`apply`是最好的，方法如下：\n\n```js\nfunction log(){\n  console.log.apply(console, arguments);\n};\nlog(1);    \nlog(1,2);\n```\n\n接下来的要求是给每一个 `log` 消息添加一个 \"(app)\" 的前辍，比如：\n\n```js\nlog(\"hello world\");\n```\n\n该怎么做比较优雅呢? 这个时候需要想到`arguments`参数是个伪数组，通过 `Array.prototype.slice.call` 转化为标准数组，再使用数组方法`unshift`，像这样：\n\n```js\nfunction log(){\n  var args = Array.prototype.slice.call(arguments);\n  args.unshift('(app)');\n \n  console.log.apply(console, args);\n};\n```\n\nbind\n----\n\n在讨论`bind()`方法之前我们先来看一道题目：\n\n```js\nvar altwrite = document.write;\naltwrite(\"hello\");\n```\n\n结果：`Uncaught TypeError: Illegal invocation`  \n`altwrite()`函数改变`this`的指向`global`或`window`对象，导致执行时提示非法调用异常，正确的方案就是使用`bind()`方法：\n\n```js\naltwrite.bind(document)(\"hello\")\n```\n\n当然也可以使用`call()`方法：\n\n```js\naltwrite.call(document, \"hello\")\n```\n\n**绑定函数**\n\n`bind()`最简单的用法是创建一个函数，使这个函数不论怎么调用都有同样的 this 值。常见的错误就像上面的例子一样，将方法从对象中拿出来，然后调用，并且希望`this`指向原来的对象。如果不做特殊处理，一般会丢失原来的对象。使用`bind()`方法能够很漂亮的解决这个问题：\n\n```js\nthis.num = 9; \nvar mymodule = {\n  num: 81,\n  getNum: function() { \n    console.log(this.num);\n  }\n};\n\nmymodule.getNum(); \n\nvar getNum = mymodule.getNum;\ngetNum(); \n\nvar boundGetNum = getNum.bind(mymodule);\nboundGetNum();\n```\n\n`bind()` 方法与 `apply` 和 `call` 很相似，也是可以改变函数体内 `this` 的指向。\n\nMDN 的解释是：`bind()`方法会创建一个新函数，称为绑定函数，当调用这个绑定函数时，绑定函数会以创建它时传入 `bind()`方法的第一个参数作为 `this`，传入 `bind()` 方法的第二个以及以后的参数加上绑定函数运行时本身的参数按照顺序作为原函数的参数来调用原函数。\n\n直接来看看具体如何使用，在常见的单体模式中，通常我们会使用 `_this` , `that` , `self` 等保存 `this` ，这样我们可以在改变了上下文之后继续引用到它。 像这样：\n\n```js\nvar foo = {\n    bar : 1,\n    eventBind: function(){\n        var _this = this;\n        $('.someClass').on('click',function(event) {\n            \n            console.log(_this.bar);     \n        });\n    }\n}\n```\n\n由于 Javascript 特有的机制，上下文环境在 `eventBind:function(){ }` 过渡到 `$('.someClass').on('click',function(event) { })` 发生了改变，上述使用变量保存 `this` 这些方式都是有用的，也没有什么问题。当然使用 `bind()` 可以更加优雅的解决这个问题：\n\n```js\nvar foo = {\n    bar : 1,\n    eventBind: function(){\n        $('.someClass').on('click',function(event) {\n            \n            console.log(this.bar);      \n        }.bind(this));\n    }\n}\n```\n\n在上述代码里，`bind()` 创建了一个函数，当这个`click`事件绑定在被调用的时候，它的 `this` 关键词会被设置成被传入的值（这里指调用`bind()`时传入的参数）。因此，这里我们传入想要的上下文 `this`(其实就是 `foo` )，到 `bind()` 函数中。然后，当回调函数被执行的时候， `this` 便指向 `foo` 对象。再来一个简单的栗子：\n\n```js\nvar bar = function(){\nconsole.log(this.x);\n}\nvar foo = {\nx:3\n}\nbar(); \nvar func = bar.bind(foo);\nfunc();\n```\n\n这里我们创建了一个新的函数 `func`，当使用 `bind()` 创建一个绑定函数之后，它被执行的时候，它的 `this` 会被设置成 `foo` ， 而不是像我们调用 `bar()` 时的全局作用域。\n\n**偏函数（Partial Functions）**\n\n`Partial Functions`也叫`Partial Applications`，这里截取一段关于偏函数的定义：\n\n```js\nPartial application can be described as taking a function that accepts some number of arguments, binding values to one or more of those arguments, and returning a new function that only accepts the remaining, un-bound arguments.\n```\n\n这是一个很好的特性，使用`bind()`我们设定函数的预定义参数，然后调用的时候传入其他参数即可：\n\n```js\nfunction list() {\n  return Array.prototype.slice.call(arguments);\n}\n\nvar list1 = list(1, 2, 3); \n\n\nvar leadingThirtysevenList = list.bind(undefined, 37);\n\nvar list2 = leadingThirtysevenList(); \nvar list3 = leadingThirtysevenList(1, 2, 3);\n```\n\n**和 setTimeout 一起使用**\n\n```js\nfunction Bloomer() {\n  this.petalCount = Math.ceil(Math.random() * 12) + 1;\n}\n\n\nBloomer.prototype.bloom = function() {\n  window.setTimeout(this.declare.bind(this), 100);\n};\n\nBloomer.prototype.declare = function() {\n  console.log('我有 ' + this.petalCount + ' 朵花瓣!');\n};\n\nvar bloo = new Bloomer();\nbloo.bloom();\n```\n\n注意：对于事件处理函数和`setInterval`方法也可以使用上面的方法\n\n**绑定函数作为构造函数**\n\n绑定函数也适用于使用`new`操作符来构造目标函数的实例。当使用绑定函数来构造实例，注意：`this`会被忽略，但是传入的参数仍然可用。\n\n```js\nfunction Point(x, y) {\n  this.x = x;\n  this.y = y;\n}\n\nPoint.prototype.toString = function() { \n  console.log(this.x + ',' + this.y);\n};\n\nvar p = new Point(1, 2);\np.toString(); \n\n\nvar emptyObj = {};\nvar YAxisPoint = Point.bind(emptyObj, 0);\n\n\nvar YAxisPoint = Point.bind(null, 0);\n\nvar axisPoint = new YAxisPoint(5);\naxisPoint.toString(); \n\naxisPoint instanceof Point; \naxisPoint instanceof YAxisPoint; \nnew Point(17, 42) instanceof YAxisPoint;\n```\n\n**捷径**\n\n`bind()`也可以为需要特定`this`值的函数创造捷径。\n\n例如要将一个类数组对象转换为真正的数组，可能的例子如下：\n\n```js\nvar slice = Array.prototype.slice;\n\n\n\nslice.call(arguments);\n```\n\n如果使用`bind()`的话，情况变得更简单：\n\n```js\nvar unboundSlice = Array.prototype.slice;\nvar slice = Function.prototype.call.bind(unboundSlice);\n\n\n\nslice(arguments);\n```\n\n**实现**\n\n上面的几个小节可以看出`bind()`有很多的使用场景，但是`bind()`函数是在 ECMA-262 第五版才被加入；它可能无法在所有浏览器上运行。这就需要我们自己实现`bind()`函数了。\n\n首先我们可以通过给目标函数指定作用域来简单实现`bind()`方法：\n\n```js\nFunction.prototype.bind = function(context){\n  self = this;  \n  return function(){\n      return self.apply(context,arguments);\n  };\n};\n```\n\n考虑到函数柯里化的情况，我们可以构建一个更加健壮的`bind()`：\n\n```js\nFunction.prototype.bind = function(context){\n  var args = Array.prototype.slice.call(arguments, 1),\n  self = this;\n  return function(){\n      var innerArgs = Array.prototype.slice.call(arguments);\n      var finalArgs = args.concat(innerArgs);\n      return self.apply(context,finalArgs);\n  };\n};\n```\n\n这次的`bind()`方法可以绑定对象，也支持在绑定的时候传参。\n\n继续，Javascript 的函数还可以作为构造函数，那么绑定后的函数用这种方式调用时，情况就比较微妙了，需要涉及到原型链的传递：\n\n```js\nFunction.prototype.bind = function(context){\n  var args = Array.prototype.slice(arguments, 1),\n  F = function(){},\n  self = this,\n  bound = function(){\n      var innerArgs = Array.prototype.slice.call(arguments);\n      var finalArgs = args.concat(innerArgs);\n      return self.apply((this instanceof F ? this : context), finalArgs);\n  };\n\n  F.prototype = self.prototype;\n  bound.prototype = new F();\n  return bound;\n};\n```\n\n这是《JavaScript Web Application》一书中对`bind()`的实现：通过设置一个中转构造函数 F，使绑定后的函数与调用`bind()`的函数处于同一原型链上，用 new 操作符调用绑定后的函数，返回的对象也能正常使用`instanceof`，因此这是最严谨的`bind()`实现。\n\n对于为了在浏览器中能支持`bind()`函数，只需要对上述函数稍微修改即可：\n\n```js\nFunction.prototype.bind = function (oThis) {\n    if (typeof this !== \"function\") {\n      throw new TypeError(\"Function.prototype.bind - what is trying to be bound is not callable\");\n    }\n\n    var aArgs = Array.prototype.slice.call(arguments, 1), \n        fToBind = this, \n        fNOP = function () {},\n        fBound = function () {\n          return fToBind.apply(\n              this instanceof fNOP && oThis ? this : oThis || window,\n              aArgs.concat(Array.prototype.slice.call(arguments))\n          );\n        };\n\n    fNOP.prototype = this.prototype;\n    fBound.prototype = new fNOP();\n\n    return fBound;\n  };\n```\n\n有个有趣的问题，如果连续 `bind()` 两次，亦或者是连续 `bind()` 三次那么输出的值是什么呢？像这样：\n\n```js\nvar bar = function(){\n    console.log(this.x);\n}\nvar foo = {\n    x:3\n}\nvar sed = {\n    x:4\n}\nvar func = bar.bind(foo).bind(sed);\nfunc(); //?\n \nvar fiv = {\n    x:5\n}\nvar func = bar.bind(foo).bind(sed).bind(fiv);\nfunc(); //?\n```\n\n答案是，两次都仍将输出 3 ，而非期待中的 4 和 5 。原因是，在 Javascript 中，多次 `bind()` 是无效的。更深层次的原因， `bind()` 的实现，相当于使用函数在内部包了一个 `call / apply` ，第二次 `bind()` 相当于再包住第一次 `bind()` , 故第二次以后的 `bind` 是无法生效的。\n\napply、call、bind 比较\n------------------\n\n那么 `apply、call、bind` 三者相比较，之间又有什么异同呢？何时使用 `apply、call`，何时使用 `bind` 呢。简单的一个栗子：\n\n```js\nvar obj = {\n    x: 81,\n};\n \nvar foo = {\n    getX: function() {\n        return this.x;\n    }\n}\n \nconsole.log(foo.getX.bind(obj)());  \nconsole.log(foo.getX.call(obj));    \nconsole.log(foo.getX.apply(obj));\n```\n\n三个输出的都是 81，但是注意看使用 `bind()` 方法的，他后面多了对括号。\n\n也就是说，区别是，当你希望改变上下文环境之后并非立即执行，而是回调执行的时候，使用 bind() 方法。而 apply/call 则会立即执行函数。\n\n再总结一下：\n\n`apply` 、 `call` 、`bind` 三者都是用来改变函数的 this 对象的指向的；  \n`apply` 、 `call` 、`bind` 三者第一个参数都是 this 要指向的对象，也就是想指定的上下文；  \n`apply` 、 `call` 、`bind` 三者都可以利用后续参数传参；  \n`bind` 是返回对应函数，便于稍后调用；`apply` 、`call` 则是立即调用 。","source":"_posts/call、apply、bind.md","raw":"---\nlayout: '[post]'\ntitle: call、apply、bind\ndate: 2020-05-20 15:36:53\ntags: javascript\n---\n\n\nbind 是返回对应函数，便于稍后调用；apply 、call 则是立即调用 。\n <!-- more -->\napply、call\n----------\n\n在 javascript 中，`call` 和 `apply` 都是为了改变某个函数运行时的上下文（context）而存在的，换句话说，就是为了改变函数体内部 `this` 的指向。  \nJavaScript 的一大特点是，函数存在「定义时上下文」和「运行时上下文」以及「上下文是可以改变的」这样的概念。\n\n```js\nfunction fruits() {}\n \nfruits.prototype = {\n    color: \"red\",\n    say: function() {\n        console.log(\"My color is \" + this.color);\n    }\n}\n \nvar apple = new fruits;\napple.say();\n```\n\n但是如果我们有一个对象`banana= {color : \"yellow\"}` , 我们不想对它重新定义 `say` 方法，那么我们可以通过 `call` 或 `apply` 用 `apple` 的 `say` 方法：\n\n```js\nbanana = {\n    color: \"yellow\"\n}\napple.say.call(banana);     \napple.say.apply(banana);\n```\n\n所以，可以看出 `call` 和 `apply` 是为了动态改变 `this` 而出现的，当一个 `object` 没有某个方法（本栗子中`banana`没有`say`方法），但是其他的有（本栗子中`apple`有`say`方法），我们可以借助`call`或`apply`用其它对象的方法来操作。\n\napply、call 区别\n-------------\n\n对于 `apply`、`call` 二者而言，作用完全一样，只是接受参数的方式不太一样。例如，有一个函数定义如下：\n\n```js\nvar func = function(arg1, arg2) {\n     \n};\n```\n\n就可以通过如下方式来调用：\n\n```js\nfunc.call(this, arg1, arg2);\nfunc.apply(this, [arg1, arg2])\n```\n\n其中 `this` 是你想指定的上下文，他可以是任何一个 JavaScript 对象 (JavaScript 中一切皆对象)，`call` 需要把参数按顺序传递进去，而 `apply` 则是把参数放在数组里。　　  \n为了巩固加深记忆，下面列举一些常用用法：\n\napply、call 实例\n-------------\n\n**数组之间追加**\n\n```js\nvar array1 = [12 , \"foo\" , {name:\"Joe\"} , -2458]; \nvar array2 = [\"Doe\" , 555 , 100]; \nArray.prototype.push.apply(array1, array2); \n// array1 值为  [12 , \"foo\" , {name:\"Joe\"} , -2458 , \"Doe\" , 555 , 100]\n```\n\n**获取数组中的最大值和最小值**\n\n```js\nvar  numbers = [5, 458 , 120 , -215 ]; \nvar maxInNumbers = Math.max.apply(Math, numbers),   \n    maxInNumbers = Math.max.call(Math,5, 458 , 120 , -215);\n```\n\nnumber 本身没有 max 方法，但是 Math 有，我们就可以借助 call 或者 apply 使用其方法。\n\n**验证是否是数组（前提是`toString()`方法没有被重写过）**\n\n```js\nfunctionisArray(obj){ \n    return Object.prototype.toString.call(obj) === '[object Array]' ;\n}\n```\n\n**类（伪）数组使用数组方法**\n\n```js\nvar domNodes = Array.prototype.slice.call(document.getElementsByTagName(\"*\"));\n```\n\nJavascript 中存在一种名为伪数组的对象结构。比较特别的是 `arguments` 对象，还有像调用 `getElementsByTagName` , `document.childNodes` 之类的，它们返回`NodeList`对象都属于伪数组。不能应用 Array 下的 `push` , `pop` 等方法。  \n但是我们能通过 `Array.prototype.slice.call` 转换为真正的数组的带有 `length` 属性的对象，这样 `domNodes` 就可以应用 Array 下的所有方法了。\n\n**面试题**  \n定义一个 `log` 方法，让它可以代理 `console.log` 方法，常见的解决方法是：\n\n```js\nfunction log(msg)　{\n  console.log(msg);\n}\nlog(1);    \nlog(1,2);\n```\n\n上面方法可以解决最基本的需求，但是当传入参数的个数是不确定的时候，上面的方法就失效了，这个时候就可以考虑使用 `apply` 或者 `call`，注意这里传入多少个参数是不确定的，所以使用`apply`是最好的，方法如下：\n\n```js\nfunction log(){\n  console.log.apply(console, arguments);\n};\nlog(1);    \nlog(1,2);\n```\n\n接下来的要求是给每一个 `log` 消息添加一个 \"(app)\" 的前辍，比如：\n\n```js\nlog(\"hello world\");\n```\n\n该怎么做比较优雅呢? 这个时候需要想到`arguments`参数是个伪数组，通过 `Array.prototype.slice.call` 转化为标准数组，再使用数组方法`unshift`，像这样：\n\n```js\nfunction log(){\n  var args = Array.prototype.slice.call(arguments);\n  args.unshift('(app)');\n \n  console.log.apply(console, args);\n};\n```\n\nbind\n----\n\n在讨论`bind()`方法之前我们先来看一道题目：\n\n```js\nvar altwrite = document.write;\naltwrite(\"hello\");\n```\n\n结果：`Uncaught TypeError: Illegal invocation`  \n`altwrite()`函数改变`this`的指向`global`或`window`对象，导致执行时提示非法调用异常，正确的方案就是使用`bind()`方法：\n\n```js\naltwrite.bind(document)(\"hello\")\n```\n\n当然也可以使用`call()`方法：\n\n```js\naltwrite.call(document, \"hello\")\n```\n\n**绑定函数**\n\n`bind()`最简单的用法是创建一个函数，使这个函数不论怎么调用都有同样的 this 值。常见的错误就像上面的例子一样，将方法从对象中拿出来，然后调用，并且希望`this`指向原来的对象。如果不做特殊处理，一般会丢失原来的对象。使用`bind()`方法能够很漂亮的解决这个问题：\n\n```js\nthis.num = 9; \nvar mymodule = {\n  num: 81,\n  getNum: function() { \n    console.log(this.num);\n  }\n};\n\nmymodule.getNum(); \n\nvar getNum = mymodule.getNum;\ngetNum(); \n\nvar boundGetNum = getNum.bind(mymodule);\nboundGetNum();\n```\n\n`bind()` 方法与 `apply` 和 `call` 很相似，也是可以改变函数体内 `this` 的指向。\n\nMDN 的解释是：`bind()`方法会创建一个新函数，称为绑定函数，当调用这个绑定函数时，绑定函数会以创建它时传入 `bind()`方法的第一个参数作为 `this`，传入 `bind()` 方法的第二个以及以后的参数加上绑定函数运行时本身的参数按照顺序作为原函数的参数来调用原函数。\n\n直接来看看具体如何使用，在常见的单体模式中，通常我们会使用 `_this` , `that` , `self` 等保存 `this` ，这样我们可以在改变了上下文之后继续引用到它。 像这样：\n\n```js\nvar foo = {\n    bar : 1,\n    eventBind: function(){\n        var _this = this;\n        $('.someClass').on('click',function(event) {\n            \n            console.log(_this.bar);     \n        });\n    }\n}\n```\n\n由于 Javascript 特有的机制，上下文环境在 `eventBind:function(){ }` 过渡到 `$('.someClass').on('click',function(event) { })` 发生了改变，上述使用变量保存 `this` 这些方式都是有用的，也没有什么问题。当然使用 `bind()` 可以更加优雅的解决这个问题：\n\n```js\nvar foo = {\n    bar : 1,\n    eventBind: function(){\n        $('.someClass').on('click',function(event) {\n            \n            console.log(this.bar);      \n        }.bind(this));\n    }\n}\n```\n\n在上述代码里，`bind()` 创建了一个函数，当这个`click`事件绑定在被调用的时候，它的 `this` 关键词会被设置成被传入的值（这里指调用`bind()`时传入的参数）。因此，这里我们传入想要的上下文 `this`(其实就是 `foo` )，到 `bind()` 函数中。然后，当回调函数被执行的时候， `this` 便指向 `foo` 对象。再来一个简单的栗子：\n\n```js\nvar bar = function(){\nconsole.log(this.x);\n}\nvar foo = {\nx:3\n}\nbar(); \nvar func = bar.bind(foo);\nfunc();\n```\n\n这里我们创建了一个新的函数 `func`，当使用 `bind()` 创建一个绑定函数之后，它被执行的时候，它的 `this` 会被设置成 `foo` ， 而不是像我们调用 `bar()` 时的全局作用域。\n\n**偏函数（Partial Functions）**\n\n`Partial Functions`也叫`Partial Applications`，这里截取一段关于偏函数的定义：\n\n```js\nPartial application can be described as taking a function that accepts some number of arguments, binding values to one or more of those arguments, and returning a new function that only accepts the remaining, un-bound arguments.\n```\n\n这是一个很好的特性，使用`bind()`我们设定函数的预定义参数，然后调用的时候传入其他参数即可：\n\n```js\nfunction list() {\n  return Array.prototype.slice.call(arguments);\n}\n\nvar list1 = list(1, 2, 3); \n\n\nvar leadingThirtysevenList = list.bind(undefined, 37);\n\nvar list2 = leadingThirtysevenList(); \nvar list3 = leadingThirtysevenList(1, 2, 3);\n```\n\n**和 setTimeout 一起使用**\n\n```js\nfunction Bloomer() {\n  this.petalCount = Math.ceil(Math.random() * 12) + 1;\n}\n\n\nBloomer.prototype.bloom = function() {\n  window.setTimeout(this.declare.bind(this), 100);\n};\n\nBloomer.prototype.declare = function() {\n  console.log('我有 ' + this.petalCount + ' 朵花瓣!');\n};\n\nvar bloo = new Bloomer();\nbloo.bloom();\n```\n\n注意：对于事件处理函数和`setInterval`方法也可以使用上面的方法\n\n**绑定函数作为构造函数**\n\n绑定函数也适用于使用`new`操作符来构造目标函数的实例。当使用绑定函数来构造实例，注意：`this`会被忽略，但是传入的参数仍然可用。\n\n```js\nfunction Point(x, y) {\n  this.x = x;\n  this.y = y;\n}\n\nPoint.prototype.toString = function() { \n  console.log(this.x + ',' + this.y);\n};\n\nvar p = new Point(1, 2);\np.toString(); \n\n\nvar emptyObj = {};\nvar YAxisPoint = Point.bind(emptyObj, 0);\n\n\nvar YAxisPoint = Point.bind(null, 0);\n\nvar axisPoint = new YAxisPoint(5);\naxisPoint.toString(); \n\naxisPoint instanceof Point; \naxisPoint instanceof YAxisPoint; \nnew Point(17, 42) instanceof YAxisPoint;\n```\n\n**捷径**\n\n`bind()`也可以为需要特定`this`值的函数创造捷径。\n\n例如要将一个类数组对象转换为真正的数组，可能的例子如下：\n\n```js\nvar slice = Array.prototype.slice;\n\n\n\nslice.call(arguments);\n```\n\n如果使用`bind()`的话，情况变得更简单：\n\n```js\nvar unboundSlice = Array.prototype.slice;\nvar slice = Function.prototype.call.bind(unboundSlice);\n\n\n\nslice(arguments);\n```\n\n**实现**\n\n上面的几个小节可以看出`bind()`有很多的使用场景，但是`bind()`函数是在 ECMA-262 第五版才被加入；它可能无法在所有浏览器上运行。这就需要我们自己实现`bind()`函数了。\n\n首先我们可以通过给目标函数指定作用域来简单实现`bind()`方法：\n\n```js\nFunction.prototype.bind = function(context){\n  self = this;  \n  return function(){\n      return self.apply(context,arguments);\n  };\n};\n```\n\n考虑到函数柯里化的情况，我们可以构建一个更加健壮的`bind()`：\n\n```js\nFunction.prototype.bind = function(context){\n  var args = Array.prototype.slice.call(arguments, 1),\n  self = this;\n  return function(){\n      var innerArgs = Array.prototype.slice.call(arguments);\n      var finalArgs = args.concat(innerArgs);\n      return self.apply(context,finalArgs);\n  };\n};\n```\n\n这次的`bind()`方法可以绑定对象，也支持在绑定的时候传参。\n\n继续，Javascript 的函数还可以作为构造函数，那么绑定后的函数用这种方式调用时，情况就比较微妙了，需要涉及到原型链的传递：\n\n```js\nFunction.prototype.bind = function(context){\n  var args = Array.prototype.slice(arguments, 1),\n  F = function(){},\n  self = this,\n  bound = function(){\n      var innerArgs = Array.prototype.slice.call(arguments);\n      var finalArgs = args.concat(innerArgs);\n      return self.apply((this instanceof F ? this : context), finalArgs);\n  };\n\n  F.prototype = self.prototype;\n  bound.prototype = new F();\n  return bound;\n};\n```\n\n这是《JavaScript Web Application》一书中对`bind()`的实现：通过设置一个中转构造函数 F，使绑定后的函数与调用`bind()`的函数处于同一原型链上，用 new 操作符调用绑定后的函数，返回的对象也能正常使用`instanceof`，因此这是最严谨的`bind()`实现。\n\n对于为了在浏览器中能支持`bind()`函数，只需要对上述函数稍微修改即可：\n\n```js\nFunction.prototype.bind = function (oThis) {\n    if (typeof this !== \"function\") {\n      throw new TypeError(\"Function.prototype.bind - what is trying to be bound is not callable\");\n    }\n\n    var aArgs = Array.prototype.slice.call(arguments, 1), \n        fToBind = this, \n        fNOP = function () {},\n        fBound = function () {\n          return fToBind.apply(\n              this instanceof fNOP && oThis ? this : oThis || window,\n              aArgs.concat(Array.prototype.slice.call(arguments))\n          );\n        };\n\n    fNOP.prototype = this.prototype;\n    fBound.prototype = new fNOP();\n\n    return fBound;\n  };\n```\n\n有个有趣的问题，如果连续 `bind()` 两次，亦或者是连续 `bind()` 三次那么输出的值是什么呢？像这样：\n\n```js\nvar bar = function(){\n    console.log(this.x);\n}\nvar foo = {\n    x:3\n}\nvar sed = {\n    x:4\n}\nvar func = bar.bind(foo).bind(sed);\nfunc(); //?\n \nvar fiv = {\n    x:5\n}\nvar func = bar.bind(foo).bind(sed).bind(fiv);\nfunc(); //?\n```\n\n答案是，两次都仍将输出 3 ，而非期待中的 4 和 5 。原因是，在 Javascript 中，多次 `bind()` 是无效的。更深层次的原因， `bind()` 的实现，相当于使用函数在内部包了一个 `call / apply` ，第二次 `bind()` 相当于再包住第一次 `bind()` , 故第二次以后的 `bind` 是无法生效的。\n\napply、call、bind 比较\n------------------\n\n那么 `apply、call、bind` 三者相比较，之间又有什么异同呢？何时使用 `apply、call`，何时使用 `bind` 呢。简单的一个栗子：\n\n```js\nvar obj = {\n    x: 81,\n};\n \nvar foo = {\n    getX: function() {\n        return this.x;\n    }\n}\n \nconsole.log(foo.getX.bind(obj)());  \nconsole.log(foo.getX.call(obj));    \nconsole.log(foo.getX.apply(obj));\n```\n\n三个输出的都是 81，但是注意看使用 `bind()` 方法的，他后面多了对括号。\n\n也就是说，区别是，当你希望改变上下文环境之后并非立即执行，而是回调执行的时候，使用 bind() 方法。而 apply/call 则会立即执行函数。\n\n再总结一下：\n\n`apply` 、 `call` 、`bind` 三者都是用来改变函数的 this 对象的指向的；  \n`apply` 、 `call` 、`bind` 三者第一个参数都是 this 要指向的对象，也就是想指定的上下文；  \n`apply` 、 `call` 、`bind` 三者都可以利用后续参数传参；  \n`bind` 是返回对应函数，便于稍后调用；`apply` 、`call` 则是立即调用 。","slug":"call、apply、bind","published":1,"updated":"2020-06-03T07:49:15.000Z","comments":1,"photos":[],"link":"","_id":"ckbftlm6n001c7w2phq3883cd","content":"<p>bind 是返回对应函数，便于稍后调用；apply 、call 则是立即调用 。<br> <a id=\"more\"></a><br>apply、call</p>\n<hr>\n<p>在 javascript 中，<code>call</code> 和 <code>apply</code> 都是为了改变某个函数运行时的上下文（context）而存在的，换句话说，就是为了改变函数体内部 <code>this</code> 的指向。<br>JavaScript 的一大特点是，函数存在「定义时上下文」和「运行时上下文」以及「上下文是可以改变的」这样的概念。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fruits</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">fruits.prototype = &#123;</span><br><span class=\"line\">    color: <span class=\"string\">\"red\"</span>,</span><br><span class=\"line\">    say: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"My color is \"</span> + <span class=\"keyword\">this</span>.color);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">var</span> apple = <span class=\"keyword\">new</span> fruits;</span><br><span class=\"line\">apple.say();</span><br></pre></td></tr></table></figure>\n\n<p>但是如果我们有一个对象<code>banana= {color : &quot;yellow&quot;}</code> , 我们不想对它重新定义 <code>say</code> 方法，那么我们可以通过 <code>call</code> 或 <code>apply</code> 用 <code>apple</code> 的 <code>say</code> 方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">banana = &#123;</span><br><span class=\"line\">    color: <span class=\"string\">\"yellow\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">apple.say.call(banana);     </span><br><span class=\"line\">apple.say.apply(banana);</span><br></pre></td></tr></table></figure>\n\n<p>所以，可以看出 <code>call</code> 和 <code>apply</code> 是为了动态改变 <code>this</code> 而出现的，当一个 <code>object</code> 没有某个方法（本栗子中<code>banana</code>没有<code>say</code>方法），但是其他的有（本栗子中<code>apple</code>有<code>say</code>方法），我们可以借助<code>call</code>或<code>apply</code>用其它对象的方法来操作。</p>\n<h2 id=\"apply、call-区别\"><a href=\"#apply、call-区别\" class=\"headerlink\" title=\"apply、call 区别\"></a>apply、call 区别</h2><p>对于 <code>apply</code>、<code>call</code> 二者而言，作用完全一样，只是接受参数的方式不太一样。例如，有一个函数定义如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> func = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arg1, arg2</span>) </span>&#123;</span><br><span class=\"line\">     </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>就可以通过如下方式来调用：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func.call(<span class=\"keyword\">this</span>, arg1, arg2);</span><br><span class=\"line\">func.apply(<span class=\"keyword\">this</span>, [arg1, arg2])</span><br></pre></td></tr></table></figure>\n\n<p>其中 <code>this</code> 是你想指定的上下文，他可以是任何一个 JavaScript 对象 (JavaScript 中一切皆对象)，<code>call</code> 需要把参数按顺序传递进去，而 <code>apply</code> 则是把参数放在数组里。　　<br>为了巩固加深记忆，下面列举一些常用用法：</p>\n<h2 id=\"apply、call-实例\"><a href=\"#apply、call-实例\" class=\"headerlink\" title=\"apply、call 实例\"></a>apply、call 实例</h2><p><strong>数组之间追加</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array1 = [<span class=\"number\">12</span> , <span class=\"string\">\"foo\"</span> , &#123;<span class=\"attr\">name</span>:<span class=\"string\">\"Joe\"</span>&#125; , <span class=\"number\">-2458</span>]; </span><br><span class=\"line\"><span class=\"keyword\">var</span> array2 = [<span class=\"string\">\"Doe\"</span> , <span class=\"number\">555</span> , <span class=\"number\">100</span>]; </span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.push.apply(array1, array2); </span><br><span class=\"line\"><span class=\"comment\">// array1 值为  [12 , \"foo\" , &#123;name:\"Joe\"&#125; , -2458 , \"Doe\" , 555 , 100]</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>获取数组中的最大值和最小值</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span>  numbers = [<span class=\"number\">5</span>, <span class=\"number\">458</span> , <span class=\"number\">120</span> , <span class=\"number\">-215</span> ]; </span><br><span class=\"line\"><span class=\"keyword\">var</span> maxInNumbers = <span class=\"built_in\">Math</span>.max.apply(<span class=\"built_in\">Math</span>, numbers),   </span><br><span class=\"line\">    maxInNumbers = <span class=\"built_in\">Math</span>.max.call(<span class=\"built_in\">Math</span>,<span class=\"number\">5</span>, <span class=\"number\">458</span> , <span class=\"number\">120</span> , <span class=\"number\">-215</span>);</span><br></pre></td></tr></table></figure>\n\n<p>number 本身没有 max 方法，但是 Math 有，我们就可以借助 call 或者 apply 使用其方法。</p>\n<p><strong>验证是否是数组（前提是<code>toString()</code>方法没有被重写过）</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">functionisArray(obj)&#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(obj) === <span class=\"string\">'[object Array]'</span> ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>类（伪）数组使用数组方法</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> domNodes = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">\"*\"</span>));</span><br></pre></td></tr></table></figure>\n\n<p>Javascript 中存在一种名为伪数组的对象结构。比较特别的是 <code>arguments</code> 对象，还有像调用 <code>getElementsByTagName</code> , <code>document.childNodes</code> 之类的，它们返回<code>NodeList</code>对象都属于伪数组。不能应用 Array 下的 <code>push</code> , <code>pop</code> 等方法。<br>但是我们能通过 <code>Array.prototype.slice.call</code> 转换为真正的数组的带有 <code>length</code> 属性的对象，这样 <code>domNodes</code> 就可以应用 Array 下的所有方法了。</p>\n<p><strong>面试题</strong><br>定义一个 <code>log</code> 方法，让它可以代理 <code>console.log</code> 方法，常见的解决方法是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">log</span>(<span class=\"params\">msg</span>)　</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(msg);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">log(<span class=\"number\">1</span>);    </span><br><span class=\"line\">log(<span class=\"number\">1</span>,<span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n\n<p>上面方法可以解决最基本的需求，但是当传入参数的个数是不确定的时候，上面的方法就失效了，这个时候就可以考虑使用 <code>apply</code> 或者 <code>call</code>，注意这里传入多少个参数是不确定的，所以使用<code>apply</code>是最好的，方法如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">log</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log.apply(<span class=\"built_in\">console</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">log(<span class=\"number\">1</span>);    </span><br><span class=\"line\">log(<span class=\"number\">1</span>,<span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n\n<p>接下来的要求是给每一个 <code>log</code> 消息添加一个 “(app)” 的前辍，比如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log(<span class=\"string\">\"hello world\"</span>);</span><br></pre></td></tr></table></figure>\n\n<p>该怎么做比较优雅呢? 这个时候需要想到<code>arguments</code>参数是个伪数组，通过 <code>Array.prototype.slice.call</code> 转化为标准数组，再使用数组方法<code>unshift</code>，像这样：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">log</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> args = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">  args.unshift(<span class=\"string\">'(app)'</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log.apply(<span class=\"built_in\">console</span>, args);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"bind\"><a href=\"#bind\" class=\"headerlink\" title=\"bind\"></a>bind</h2><p>在讨论<code>bind()</code>方法之前我们先来看一道题目：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> altwrite = <span class=\"built_in\">document</span>.write;</span><br><span class=\"line\">altwrite(<span class=\"string\">\"hello\"</span>);</span><br></pre></td></tr></table></figure>\n\n<p>结果：<code>Uncaught TypeError: Illegal invocation</code><br><code>altwrite()</code>函数改变<code>this</code>的指向<code>global</code>或<code>window</code>对象，导致执行时提示非法调用异常，正确的方案就是使用<code>bind()</code>方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">altwrite.bind(<span class=\"built_in\">document</span>)(<span class=\"string\">\"hello\"</span>)</span><br></pre></td></tr></table></figure>\n\n<p>当然也可以使用<code>call()</code>方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">altwrite.call(<span class=\"built_in\">document</span>, <span class=\"string\">\"hello\"</span>)</span><br></pre></td></tr></table></figure>\n\n<p><strong>绑定函数</strong></p>\n<p><code>bind()</code>最简单的用法是创建一个函数，使这个函数不论怎么调用都有同样的 this 值。常见的错误就像上面的例子一样，将方法从对象中拿出来，然后调用，并且希望<code>this</code>指向原来的对象。如果不做特殊处理，一般会丢失原来的对象。使用<code>bind()</code>方法能够很漂亮的解决这个问题：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.num = <span class=\"number\">9</span>; </span><br><span class=\"line\"><span class=\"keyword\">var</span> mymodule = &#123;</span><br><span class=\"line\">  num: <span class=\"number\">81</span>,</span><br><span class=\"line\">  getNum: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.num);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">mymodule.getNum(); </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> getNum = mymodule.getNum;</span><br><span class=\"line\">getNum(); </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> boundGetNum = getNum.bind(mymodule);</span><br><span class=\"line\">boundGetNum();</span><br></pre></td></tr></table></figure>\n\n<p><code>bind()</code> 方法与 <code>apply</code> 和 <code>call</code> 很相似，也是可以改变函数体内 <code>this</code> 的指向。</p>\n<p>MDN 的解释是：<code>bind()</code>方法会创建一个新函数，称为绑定函数，当调用这个绑定函数时，绑定函数会以创建它时传入 <code>bind()</code>方法的第一个参数作为 <code>this</code>，传入 <code>bind()</code> 方法的第二个以及以后的参数加上绑定函数运行时本身的参数按照顺序作为原函数的参数来调用原函数。</p>\n<p>直接来看看具体如何使用，在常见的单体模式中，通常我们会使用 <code>_this</code> , <code>that</code> , <code>self</code> 等保存 <code>this</code> ，这样我们可以在改变了上下文之后继续引用到它。 像这样：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = &#123;</span><br><span class=\"line\">    bar : <span class=\"number\">1</span>,</span><br><span class=\"line\">    eventBind: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> _this = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        $(<span class=\"string\">'.someClass'</span>).on(<span class=\"string\">'click'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(_this.bar);     </span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>由于 Javascript 特有的机制，上下文环境在 <code>eventBind:function(){ }</code> 过渡到 <code>$(&#39;.someClass&#39;).on(&#39;click&#39;,function(event) { })</code> 发生了改变，上述使用变量保存 <code>this</code> 这些方式都是有用的，也没有什么问题。当然使用 <code>bind()</code> 可以更加优雅的解决这个问题：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = &#123;</span><br><span class=\"line\">    bar : <span class=\"number\">1</span>,</span><br><span class=\"line\">    eventBind: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        $(<span class=\"string\">'.someClass'</span>).on(<span class=\"string\">'click'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.bar);      </span><br><span class=\"line\">        &#125;.bind(<span class=\"keyword\">this</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在上述代码里，<code>bind()</code> 创建了一个函数，当这个<code>click</code>事件绑定在被调用的时候，它的 <code>this</code> 关键词会被设置成被传入的值（这里指调用<code>bind()</code>时传入的参数）。因此，这里我们传入想要的上下文 <code>this</code>(其实就是 <code>foo</code> )，到 <code>bind()</code> 函数中。然后，当回调函数被执行的时候， <code>this</code> 便指向 <code>foo</code> 对象。再来一个简单的栗子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> bar = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = &#123;</span><br><span class=\"line\">x:<span class=\"number\">3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">bar(); </span><br><span class=\"line\"><span class=\"keyword\">var</span> func = bar.bind(foo);</span><br><span class=\"line\">func();</span><br></pre></td></tr></table></figure>\n\n<p>这里我们创建了一个新的函数 <code>func</code>，当使用 <code>bind()</code> 创建一个绑定函数之后，它被执行的时候，它的 <code>this</code> 会被设置成 <code>foo</code> ， 而不是像我们调用 <code>bar()</code> 时的全局作用域。</p>\n<p><strong>偏函数（Partial Functions）</strong></p>\n<p><code>Partial Functions</code>也叫<code>Partial Applications</code>，这里截取一段关于偏函数的定义：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Partial application can be described <span class=\"keyword\">as</span> taking a <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">that</span> <span class=\"title\">accepts</span> <span class=\"title\">some</span> <span class=\"title\">number</span> <span class=\"title\">of</span> <span class=\"title\">arguments</span>, <span class=\"title\">binding</span> <span class=\"title\">values</span> <span class=\"title\">to</span> <span class=\"title\">one</span> <span class=\"title\">or</span> <span class=\"title\">more</span> <span class=\"title\">of</span> <span class=\"title\">those</span> <span class=\"title\">arguments</span>, <span class=\"title\">and</span> <span class=\"title\">returning</span> <span class=\"title\">a</span> <span class=\"title\">new</span> <span class=\"title\">function</span> <span class=\"title\">that</span> <span class=\"title\">only</span> <span class=\"title\">accepts</span> <span class=\"title\">the</span> <span class=\"title\">remaining</span>, <span class=\"title\">un</span>-<span class=\"title\">bound</span> <span class=\"title\">arguments</span>.</span></span><br></pre></td></tr></table></figure>\n\n<p>这是一个很好的特性，使用<code>bind()</code>我们设定函数的预定义参数，然后调用的时候传入其他参数即可：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">list</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> list1 = list(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>); </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> leadingThirtysevenList = list.bind(<span class=\"literal\">undefined</span>, <span class=\"number\">37</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> list2 = leadingThirtysevenList(); </span><br><span class=\"line\"><span class=\"keyword\">var</span> list3 = leadingThirtysevenList(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\n\n<p><strong>和 setTimeout 一起使用</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Bloomer</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.petalCount = <span class=\"built_in\">Math</span>.ceil(<span class=\"built_in\">Math</span>.random() * <span class=\"number\">12</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Bloomer.prototype.bloom = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">window</span>.setTimeout(<span class=\"keyword\">this</span>.declare.bind(<span class=\"keyword\">this</span>), <span class=\"number\">100</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Bloomer.prototype.declare = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'我有 '</span> + <span class=\"keyword\">this</span>.petalCount + <span class=\"string\">' 朵花瓣!'</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> bloo = <span class=\"keyword\">new</span> Bloomer();</span><br><span class=\"line\">bloo.bloom();</span><br></pre></td></tr></table></figure>\n\n<p>注意：对于事件处理函数和<code>setInterval</code>方法也可以使用上面的方法</p>\n<p><strong>绑定函数作为构造函数</strong></p>\n<p>绑定函数也适用于使用<code>new</code>操作符来构造目标函数的实例。当使用绑定函数来构造实例，注意：<code>this</code>会被忽略，但是传入的参数仍然可用。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Point</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.x = x;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.y = y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Point.prototype.toString = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.x + <span class=\"string\">','</span> + <span class=\"keyword\">this</span>.y);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Point(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">p.toString(); </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> emptyObj = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> YAxisPoint = Point.bind(emptyObj, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> YAxisPoint = Point.bind(<span class=\"literal\">null</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> axisPoint = <span class=\"keyword\">new</span> YAxisPoint(<span class=\"number\">5</span>);</span><br><span class=\"line\">axisPoint.toString(); </span><br><span class=\"line\"></span><br><span class=\"line\">axisPoint <span class=\"keyword\">instanceof</span> Point; </span><br><span class=\"line\">axisPoint <span class=\"keyword\">instanceof</span> YAxisPoint; </span><br><span class=\"line\"><span class=\"keyword\">new</span> Point(<span class=\"number\">17</span>, <span class=\"number\">42</span>) <span class=\"keyword\">instanceof</span> YAxisPoint;</span><br></pre></td></tr></table></figure>\n\n<p><strong>捷径</strong></p>\n<p><code>bind()</code>也可以为需要特定<code>this</code>值的函数创造捷径。</p>\n<p>例如要将一个类数组对象转换为真正的数组，可能的例子如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> slice = <span class=\"built_in\">Array</span>.prototype.slice;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">slice.call(<span class=\"built_in\">arguments</span>);</span><br></pre></td></tr></table></figure>\n\n<p>如果使用<code>bind()</code>的话，情况变得更简单：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> unboundSlice = <span class=\"built_in\">Array</span>.prototype.slice;</span><br><span class=\"line\"><span class=\"keyword\">var</span> slice = <span class=\"built_in\">Function</span>.prototype.call.bind(unboundSlice);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">slice(<span class=\"built_in\">arguments</span>);</span><br></pre></td></tr></table></figure>\n\n<p><strong>实现</strong></p>\n<p>上面的几个小节可以看出<code>bind()</code>有很多的使用场景，但是<code>bind()</code>函数是在 ECMA-262 第五版才被加入；它可能无法在所有浏览器上运行。这就需要我们自己实现<code>bind()</code>函数了。</p>\n<p>首先我们可以通过给目标函数指定作用域来简单实现<code>bind()</code>方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.bind = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context</span>)</span>&#123;</span><br><span class=\"line\">  self = <span class=\"keyword\">this</span>;  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> self.apply(context,<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>考虑到函数柯里化的情况，我们可以构建一个更加健壮的<code>bind()</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.bind = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> args = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>),</span><br><span class=\"line\">  self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> innerArgs = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">      <span class=\"keyword\">var</span> finalArgs = args.concat(innerArgs);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> self.apply(context,finalArgs);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>这次的<code>bind()</code>方法可以绑定对象，也支持在绑定的时候传参。</p>\n<p>继续，Javascript 的函数还可以作为构造函数，那么绑定后的函数用这种方式调用时，情况就比较微妙了，需要涉及到原型链的传递：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.bind = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> args = <span class=\"built_in\">Array</span>.prototype.slice(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>),</span><br><span class=\"line\">  F = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;,</span><br><span class=\"line\">  self = <span class=\"keyword\">this</span>,</span><br><span class=\"line\">  bound = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> innerArgs = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">      <span class=\"keyword\">var</span> finalArgs = args.concat(innerArgs);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> self.apply((<span class=\"keyword\">this</span> <span class=\"keyword\">instanceof</span> F ? <span class=\"keyword\">this</span> : context), finalArgs);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  F.prototype = self.prototype;</span><br><span class=\"line\">  bound.prototype = <span class=\"keyword\">new</span> F();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> bound;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>这是《JavaScript Web Application》一书中对<code>bind()</code>的实现：通过设置一个中转构造函数 F，使绑定后的函数与调用<code>bind()</code>的函数处于同一原型链上，用 new 操作符调用绑定后的函数，返回的对象也能正常使用<code>instanceof</code>，因此这是最严谨的<code>bind()</code>实现。</p>\n<p>对于为了在浏览器中能支持<code>bind()</code>函数，只需要对上述函数稍微修改即可：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.bind = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">oThis</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"keyword\">this</span> !== <span class=\"string\">\"function\"</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">\"Function.prototype.bind - what is trying to be bound is not callable\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> aArgs = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>), </span><br><span class=\"line\">        fToBind = <span class=\"keyword\">this</span>, </span><br><span class=\"line\">        fNOP = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;,</span><br><span class=\"line\">        fBound = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> fToBind.apply(</span><br><span class=\"line\">              <span class=\"keyword\">this</span> <span class=\"keyword\">instanceof</span> fNOP &amp;&amp; oThis ? <span class=\"keyword\">this</span> : oThis || <span class=\"built_in\">window</span>,</span><br><span class=\"line\">              aArgs.concat(<span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>))</span><br><span class=\"line\">          );</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    fNOP.prototype = <span class=\"keyword\">this</span>.prototype;</span><br><span class=\"line\">    fBound.prototype = <span class=\"keyword\">new</span> fNOP();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> fBound;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n\n<p>有个有趣的问题，如果连续 <code>bind()</code> 两次，亦或者是连续 <code>bind()</code> 三次那么输出的值是什么呢？像这样：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> bar = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = &#123;</span><br><span class=\"line\">    x:<span class=\"number\">3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> sed = &#123;</span><br><span class=\"line\">    x:<span class=\"number\">4</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> func = bar.bind(foo).bind(sed);</span><br><span class=\"line\">func(); <span class=\"comment\">//?</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">var</span> fiv = &#123;</span><br><span class=\"line\">    x:<span class=\"number\">5</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> func = bar.bind(foo).bind(sed).bind(fiv);</span><br><span class=\"line\">func(); <span class=\"comment\">//?</span></span><br></pre></td></tr></table></figure>\n\n<p>答案是，两次都仍将输出 3 ，而非期待中的 4 和 5 。原因是，在 Javascript 中，多次 <code>bind()</code> 是无效的。更深层次的原因， <code>bind()</code> 的实现，相当于使用函数在内部包了一个 <code>call / apply</code> ，第二次 <code>bind()</code> 相当于再包住第一次 <code>bind()</code> , 故第二次以后的 <code>bind</code> 是无法生效的。</p>\n<h2 id=\"apply、call、bind-比较\"><a href=\"#apply、call、bind-比较\" class=\"headerlink\" title=\"apply、call、bind 比较\"></a>apply、call、bind 比较</h2><p>那么 <code>apply、call、bind</code> 三者相比较，之间又有什么异同呢？何时使用 <code>apply、call</code>，何时使用 <code>bind</code> 呢。简单的一个栗子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    x: <span class=\"number\">81</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = &#123;</span><br><span class=\"line\">    getX: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo.getX.bind(obj)());  </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo.getX.call(obj));    </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo.getX.apply(obj));</span><br></pre></td></tr></table></figure>\n\n<p>三个输出的都是 81，但是注意看使用 <code>bind()</code> 方法的，他后面多了对括号。</p>\n<p>也就是说，区别是，当你希望改变上下文环境之后并非立即执行，而是回调执行的时候，使用 bind() 方法。而 apply/call 则会立即执行函数。</p>\n<p>再总结一下：</p>\n<p><code>apply</code> 、 <code>call</code> 、<code>bind</code> 三者都是用来改变函数的 this 对象的指向的；<br><code>apply</code> 、 <code>call</code> 、<code>bind</code> 三者第一个参数都是 this 要指向的对象，也就是想指定的上下文；<br><code>apply</code> 、 <code>call</code> 、<code>bind</code> 三者都可以利用后续参数传参；<br><code>bind</code> 是返回对应函数，便于稍后调用；<code>apply</code> 、<code>call</code> 则是立即调用 。</p>\n","site":{"data":{}},"excerpt":"<p>bind 是返回对应函数，便于稍后调用；apply 、call 则是立即调用 。<br></p>","more":"<br>apply、call<p></p>\n<hr>\n<p>在 javascript 中，<code>call</code> 和 <code>apply</code> 都是为了改变某个函数运行时的上下文（context）而存在的，换句话说，就是为了改变函数体内部 <code>this</code> 的指向。<br>JavaScript 的一大特点是，函数存在「定义时上下文」和「运行时上下文」以及「上下文是可以改变的」这样的概念。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fruits</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">fruits.prototype = &#123;</span><br><span class=\"line\">    color: <span class=\"string\">\"red\"</span>,</span><br><span class=\"line\">    say: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"My color is \"</span> + <span class=\"keyword\">this</span>.color);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">var</span> apple = <span class=\"keyword\">new</span> fruits;</span><br><span class=\"line\">apple.say();</span><br></pre></td></tr></table></figure>\n\n<p>但是如果我们有一个对象<code>banana= {color : &quot;yellow&quot;}</code> , 我们不想对它重新定义 <code>say</code> 方法，那么我们可以通过 <code>call</code> 或 <code>apply</code> 用 <code>apple</code> 的 <code>say</code> 方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">banana = &#123;</span><br><span class=\"line\">    color: <span class=\"string\">\"yellow\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">apple.say.call(banana);     </span><br><span class=\"line\">apple.say.apply(banana);</span><br></pre></td></tr></table></figure>\n\n<p>所以，可以看出 <code>call</code> 和 <code>apply</code> 是为了动态改变 <code>this</code> 而出现的，当一个 <code>object</code> 没有某个方法（本栗子中<code>banana</code>没有<code>say</code>方法），但是其他的有（本栗子中<code>apple</code>有<code>say</code>方法），我们可以借助<code>call</code>或<code>apply</code>用其它对象的方法来操作。</p>\n<h2 id=\"apply、call-区别\"><a href=\"#apply、call-区别\" class=\"headerlink\" title=\"apply、call 区别\"></a>apply、call 区别</h2><p>对于 <code>apply</code>、<code>call</code> 二者而言，作用完全一样，只是接受参数的方式不太一样。例如，有一个函数定义如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> func = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arg1, arg2</span>) </span>&#123;</span><br><span class=\"line\">     </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>就可以通过如下方式来调用：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func.call(<span class=\"keyword\">this</span>, arg1, arg2);</span><br><span class=\"line\">func.apply(<span class=\"keyword\">this</span>, [arg1, arg2])</span><br></pre></td></tr></table></figure>\n\n<p>其中 <code>this</code> 是你想指定的上下文，他可以是任何一个 JavaScript 对象 (JavaScript 中一切皆对象)，<code>call</code> 需要把参数按顺序传递进去，而 <code>apply</code> 则是把参数放在数组里。　　<br>为了巩固加深记忆，下面列举一些常用用法：</p>\n<h2 id=\"apply、call-实例\"><a href=\"#apply、call-实例\" class=\"headerlink\" title=\"apply、call 实例\"></a>apply、call 实例</h2><p><strong>数组之间追加</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array1 = [<span class=\"number\">12</span> , <span class=\"string\">\"foo\"</span> , &#123;<span class=\"attr\">name</span>:<span class=\"string\">\"Joe\"</span>&#125; , <span class=\"number\">-2458</span>]; </span><br><span class=\"line\"><span class=\"keyword\">var</span> array2 = [<span class=\"string\">\"Doe\"</span> , <span class=\"number\">555</span> , <span class=\"number\">100</span>]; </span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.push.apply(array1, array2); </span><br><span class=\"line\"><span class=\"comment\">// array1 值为  [12 , \"foo\" , &#123;name:\"Joe\"&#125; , -2458 , \"Doe\" , 555 , 100]</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>获取数组中的最大值和最小值</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span>  numbers = [<span class=\"number\">5</span>, <span class=\"number\">458</span> , <span class=\"number\">120</span> , <span class=\"number\">-215</span> ]; </span><br><span class=\"line\"><span class=\"keyword\">var</span> maxInNumbers = <span class=\"built_in\">Math</span>.max.apply(<span class=\"built_in\">Math</span>, numbers),   </span><br><span class=\"line\">    maxInNumbers = <span class=\"built_in\">Math</span>.max.call(<span class=\"built_in\">Math</span>,<span class=\"number\">5</span>, <span class=\"number\">458</span> , <span class=\"number\">120</span> , <span class=\"number\">-215</span>);</span><br></pre></td></tr></table></figure>\n\n<p>number 本身没有 max 方法，但是 Math 有，我们就可以借助 call 或者 apply 使用其方法。</p>\n<p><strong>验证是否是数组（前提是<code>toString()</code>方法没有被重写过）</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">functionisArray(obj)&#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(obj) === <span class=\"string\">'[object Array]'</span> ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>类（伪）数组使用数组方法</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> domNodes = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">\"*\"</span>));</span><br></pre></td></tr></table></figure>\n\n<p>Javascript 中存在一种名为伪数组的对象结构。比较特别的是 <code>arguments</code> 对象，还有像调用 <code>getElementsByTagName</code> , <code>document.childNodes</code> 之类的，它们返回<code>NodeList</code>对象都属于伪数组。不能应用 Array 下的 <code>push</code> , <code>pop</code> 等方法。<br>但是我们能通过 <code>Array.prototype.slice.call</code> 转换为真正的数组的带有 <code>length</code> 属性的对象，这样 <code>domNodes</code> 就可以应用 Array 下的所有方法了。</p>\n<p><strong>面试题</strong><br>定义一个 <code>log</code> 方法，让它可以代理 <code>console.log</code> 方法，常见的解决方法是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">log</span>(<span class=\"params\">msg</span>)　</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(msg);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">log(<span class=\"number\">1</span>);    </span><br><span class=\"line\">log(<span class=\"number\">1</span>,<span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n\n<p>上面方法可以解决最基本的需求，但是当传入参数的个数是不确定的时候，上面的方法就失效了，这个时候就可以考虑使用 <code>apply</code> 或者 <code>call</code>，注意这里传入多少个参数是不确定的，所以使用<code>apply</code>是最好的，方法如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">log</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log.apply(<span class=\"built_in\">console</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">log(<span class=\"number\">1</span>);    </span><br><span class=\"line\">log(<span class=\"number\">1</span>,<span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n\n<p>接下来的要求是给每一个 <code>log</code> 消息添加一个 “(app)” 的前辍，比如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log(<span class=\"string\">\"hello world\"</span>);</span><br></pre></td></tr></table></figure>\n\n<p>该怎么做比较优雅呢? 这个时候需要想到<code>arguments</code>参数是个伪数组，通过 <code>Array.prototype.slice.call</code> 转化为标准数组，再使用数组方法<code>unshift</code>，像这样：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">log</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> args = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">  args.unshift(<span class=\"string\">'(app)'</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log.apply(<span class=\"built_in\">console</span>, args);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"bind\"><a href=\"#bind\" class=\"headerlink\" title=\"bind\"></a>bind</h2><p>在讨论<code>bind()</code>方法之前我们先来看一道题目：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> altwrite = <span class=\"built_in\">document</span>.write;</span><br><span class=\"line\">altwrite(<span class=\"string\">\"hello\"</span>);</span><br></pre></td></tr></table></figure>\n\n<p>结果：<code>Uncaught TypeError: Illegal invocation</code><br><code>altwrite()</code>函数改变<code>this</code>的指向<code>global</code>或<code>window</code>对象，导致执行时提示非法调用异常，正确的方案就是使用<code>bind()</code>方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">altwrite.bind(<span class=\"built_in\">document</span>)(<span class=\"string\">\"hello\"</span>)</span><br></pre></td></tr></table></figure>\n\n<p>当然也可以使用<code>call()</code>方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">altwrite.call(<span class=\"built_in\">document</span>, <span class=\"string\">\"hello\"</span>)</span><br></pre></td></tr></table></figure>\n\n<p><strong>绑定函数</strong></p>\n<p><code>bind()</code>最简单的用法是创建一个函数，使这个函数不论怎么调用都有同样的 this 值。常见的错误就像上面的例子一样，将方法从对象中拿出来，然后调用，并且希望<code>this</code>指向原来的对象。如果不做特殊处理，一般会丢失原来的对象。使用<code>bind()</code>方法能够很漂亮的解决这个问题：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.num = <span class=\"number\">9</span>; </span><br><span class=\"line\"><span class=\"keyword\">var</span> mymodule = &#123;</span><br><span class=\"line\">  num: <span class=\"number\">81</span>,</span><br><span class=\"line\">  getNum: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.num);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">mymodule.getNum(); </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> getNum = mymodule.getNum;</span><br><span class=\"line\">getNum(); </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> boundGetNum = getNum.bind(mymodule);</span><br><span class=\"line\">boundGetNum();</span><br></pre></td></tr></table></figure>\n\n<p><code>bind()</code> 方法与 <code>apply</code> 和 <code>call</code> 很相似，也是可以改变函数体内 <code>this</code> 的指向。</p>\n<p>MDN 的解释是：<code>bind()</code>方法会创建一个新函数，称为绑定函数，当调用这个绑定函数时，绑定函数会以创建它时传入 <code>bind()</code>方法的第一个参数作为 <code>this</code>，传入 <code>bind()</code> 方法的第二个以及以后的参数加上绑定函数运行时本身的参数按照顺序作为原函数的参数来调用原函数。</p>\n<p>直接来看看具体如何使用，在常见的单体模式中，通常我们会使用 <code>_this</code> , <code>that</code> , <code>self</code> 等保存 <code>this</code> ，这样我们可以在改变了上下文之后继续引用到它。 像这样：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = &#123;</span><br><span class=\"line\">    bar : <span class=\"number\">1</span>,</span><br><span class=\"line\">    eventBind: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> _this = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        $(<span class=\"string\">'.someClass'</span>).on(<span class=\"string\">'click'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(_this.bar);     </span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>由于 Javascript 特有的机制，上下文环境在 <code>eventBind:function(){ }</code> 过渡到 <code>$(&#39;.someClass&#39;).on(&#39;click&#39;,function(event) { })</code> 发生了改变，上述使用变量保存 <code>this</code> 这些方式都是有用的，也没有什么问题。当然使用 <code>bind()</code> 可以更加优雅的解决这个问题：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = &#123;</span><br><span class=\"line\">    bar : <span class=\"number\">1</span>,</span><br><span class=\"line\">    eventBind: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        $(<span class=\"string\">'.someClass'</span>).on(<span class=\"string\">'click'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.bar);      </span><br><span class=\"line\">        &#125;.bind(<span class=\"keyword\">this</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在上述代码里，<code>bind()</code> 创建了一个函数，当这个<code>click</code>事件绑定在被调用的时候，它的 <code>this</code> 关键词会被设置成被传入的值（这里指调用<code>bind()</code>时传入的参数）。因此，这里我们传入想要的上下文 <code>this</code>(其实就是 <code>foo</code> )，到 <code>bind()</code> 函数中。然后，当回调函数被执行的时候， <code>this</code> 便指向 <code>foo</code> 对象。再来一个简单的栗子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> bar = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = &#123;</span><br><span class=\"line\">x:<span class=\"number\">3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">bar(); </span><br><span class=\"line\"><span class=\"keyword\">var</span> func = bar.bind(foo);</span><br><span class=\"line\">func();</span><br></pre></td></tr></table></figure>\n\n<p>这里我们创建了一个新的函数 <code>func</code>，当使用 <code>bind()</code> 创建一个绑定函数之后，它被执行的时候，它的 <code>this</code> 会被设置成 <code>foo</code> ， 而不是像我们调用 <code>bar()</code> 时的全局作用域。</p>\n<p><strong>偏函数（Partial Functions）</strong></p>\n<p><code>Partial Functions</code>也叫<code>Partial Applications</code>，这里截取一段关于偏函数的定义：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Partial application can be described <span class=\"keyword\">as</span> taking a <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">that</span> <span class=\"title\">accepts</span> <span class=\"title\">some</span> <span class=\"title\">number</span> <span class=\"title\">of</span> <span class=\"title\">arguments</span>, <span class=\"title\">binding</span> <span class=\"title\">values</span> <span class=\"title\">to</span> <span class=\"title\">one</span> <span class=\"title\">or</span> <span class=\"title\">more</span> <span class=\"title\">of</span> <span class=\"title\">those</span> <span class=\"title\">arguments</span>, <span class=\"title\">and</span> <span class=\"title\">returning</span> <span class=\"title\">a</span> <span class=\"title\">new</span> <span class=\"title\">function</span> <span class=\"title\">that</span> <span class=\"title\">only</span> <span class=\"title\">accepts</span> <span class=\"title\">the</span> <span class=\"title\">remaining</span>, <span class=\"title\">un</span>-<span class=\"title\">bound</span> <span class=\"title\">arguments</span>.</span></span><br></pre></td></tr></table></figure>\n\n<p>这是一个很好的特性，使用<code>bind()</code>我们设定函数的预定义参数，然后调用的时候传入其他参数即可：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">list</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> list1 = list(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>); </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> leadingThirtysevenList = list.bind(<span class=\"literal\">undefined</span>, <span class=\"number\">37</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> list2 = leadingThirtysevenList(); </span><br><span class=\"line\"><span class=\"keyword\">var</span> list3 = leadingThirtysevenList(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\n\n<p><strong>和 setTimeout 一起使用</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Bloomer</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.petalCount = <span class=\"built_in\">Math</span>.ceil(<span class=\"built_in\">Math</span>.random() * <span class=\"number\">12</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Bloomer.prototype.bloom = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">window</span>.setTimeout(<span class=\"keyword\">this</span>.declare.bind(<span class=\"keyword\">this</span>), <span class=\"number\">100</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Bloomer.prototype.declare = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'我有 '</span> + <span class=\"keyword\">this</span>.petalCount + <span class=\"string\">' 朵花瓣!'</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> bloo = <span class=\"keyword\">new</span> Bloomer();</span><br><span class=\"line\">bloo.bloom();</span><br></pre></td></tr></table></figure>\n\n<p>注意：对于事件处理函数和<code>setInterval</code>方法也可以使用上面的方法</p>\n<p><strong>绑定函数作为构造函数</strong></p>\n<p>绑定函数也适用于使用<code>new</code>操作符来构造目标函数的实例。当使用绑定函数来构造实例，注意：<code>this</code>会被忽略，但是传入的参数仍然可用。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Point</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.x = x;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.y = y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Point.prototype.toString = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.x + <span class=\"string\">','</span> + <span class=\"keyword\">this</span>.y);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Point(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">p.toString(); </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> emptyObj = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> YAxisPoint = Point.bind(emptyObj, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> YAxisPoint = Point.bind(<span class=\"literal\">null</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> axisPoint = <span class=\"keyword\">new</span> YAxisPoint(<span class=\"number\">5</span>);</span><br><span class=\"line\">axisPoint.toString(); </span><br><span class=\"line\"></span><br><span class=\"line\">axisPoint <span class=\"keyword\">instanceof</span> Point; </span><br><span class=\"line\">axisPoint <span class=\"keyword\">instanceof</span> YAxisPoint; </span><br><span class=\"line\"><span class=\"keyword\">new</span> Point(<span class=\"number\">17</span>, <span class=\"number\">42</span>) <span class=\"keyword\">instanceof</span> YAxisPoint;</span><br></pre></td></tr></table></figure>\n\n<p><strong>捷径</strong></p>\n<p><code>bind()</code>也可以为需要特定<code>this</code>值的函数创造捷径。</p>\n<p>例如要将一个类数组对象转换为真正的数组，可能的例子如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> slice = <span class=\"built_in\">Array</span>.prototype.slice;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">slice.call(<span class=\"built_in\">arguments</span>);</span><br></pre></td></tr></table></figure>\n\n<p>如果使用<code>bind()</code>的话，情况变得更简单：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> unboundSlice = <span class=\"built_in\">Array</span>.prototype.slice;</span><br><span class=\"line\"><span class=\"keyword\">var</span> slice = <span class=\"built_in\">Function</span>.prototype.call.bind(unboundSlice);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">slice(<span class=\"built_in\">arguments</span>);</span><br></pre></td></tr></table></figure>\n\n<p><strong>实现</strong></p>\n<p>上面的几个小节可以看出<code>bind()</code>有很多的使用场景，但是<code>bind()</code>函数是在 ECMA-262 第五版才被加入；它可能无法在所有浏览器上运行。这就需要我们自己实现<code>bind()</code>函数了。</p>\n<p>首先我们可以通过给目标函数指定作用域来简单实现<code>bind()</code>方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.bind = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context</span>)</span>&#123;</span><br><span class=\"line\">  self = <span class=\"keyword\">this</span>;  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> self.apply(context,<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>考虑到函数柯里化的情况，我们可以构建一个更加健壮的<code>bind()</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.bind = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> args = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>),</span><br><span class=\"line\">  self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> innerArgs = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">      <span class=\"keyword\">var</span> finalArgs = args.concat(innerArgs);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> self.apply(context,finalArgs);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>这次的<code>bind()</code>方法可以绑定对象，也支持在绑定的时候传参。</p>\n<p>继续，Javascript 的函数还可以作为构造函数，那么绑定后的函数用这种方式调用时，情况就比较微妙了，需要涉及到原型链的传递：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.bind = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> args = <span class=\"built_in\">Array</span>.prototype.slice(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>),</span><br><span class=\"line\">  F = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;,</span><br><span class=\"line\">  self = <span class=\"keyword\">this</span>,</span><br><span class=\"line\">  bound = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> innerArgs = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">      <span class=\"keyword\">var</span> finalArgs = args.concat(innerArgs);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> self.apply((<span class=\"keyword\">this</span> <span class=\"keyword\">instanceof</span> F ? <span class=\"keyword\">this</span> : context), finalArgs);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  F.prototype = self.prototype;</span><br><span class=\"line\">  bound.prototype = <span class=\"keyword\">new</span> F();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> bound;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>这是《JavaScript Web Application》一书中对<code>bind()</code>的实现：通过设置一个中转构造函数 F，使绑定后的函数与调用<code>bind()</code>的函数处于同一原型链上，用 new 操作符调用绑定后的函数，返回的对象也能正常使用<code>instanceof</code>，因此这是最严谨的<code>bind()</code>实现。</p>\n<p>对于为了在浏览器中能支持<code>bind()</code>函数，只需要对上述函数稍微修改即可：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.bind = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">oThis</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"keyword\">this</span> !== <span class=\"string\">\"function\"</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">\"Function.prototype.bind - what is trying to be bound is not callable\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> aArgs = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>), </span><br><span class=\"line\">        fToBind = <span class=\"keyword\">this</span>, </span><br><span class=\"line\">        fNOP = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;,</span><br><span class=\"line\">        fBound = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> fToBind.apply(</span><br><span class=\"line\">              <span class=\"keyword\">this</span> <span class=\"keyword\">instanceof</span> fNOP &amp;&amp; oThis ? <span class=\"keyword\">this</span> : oThis || <span class=\"built_in\">window</span>,</span><br><span class=\"line\">              aArgs.concat(<span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>))</span><br><span class=\"line\">          );</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    fNOP.prototype = <span class=\"keyword\">this</span>.prototype;</span><br><span class=\"line\">    fBound.prototype = <span class=\"keyword\">new</span> fNOP();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> fBound;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n\n<p>有个有趣的问题，如果连续 <code>bind()</code> 两次，亦或者是连续 <code>bind()</code> 三次那么输出的值是什么呢？像这样：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> bar = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = &#123;</span><br><span class=\"line\">    x:<span class=\"number\">3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> sed = &#123;</span><br><span class=\"line\">    x:<span class=\"number\">4</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> func = bar.bind(foo).bind(sed);</span><br><span class=\"line\">func(); <span class=\"comment\">//?</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">var</span> fiv = &#123;</span><br><span class=\"line\">    x:<span class=\"number\">5</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> func = bar.bind(foo).bind(sed).bind(fiv);</span><br><span class=\"line\">func(); <span class=\"comment\">//?</span></span><br></pre></td></tr></table></figure>\n\n<p>答案是，两次都仍将输出 3 ，而非期待中的 4 和 5 。原因是，在 Javascript 中，多次 <code>bind()</code> 是无效的。更深层次的原因， <code>bind()</code> 的实现，相当于使用函数在内部包了一个 <code>call / apply</code> ，第二次 <code>bind()</code> 相当于再包住第一次 <code>bind()</code> , 故第二次以后的 <code>bind</code> 是无法生效的。</p>\n<h2 id=\"apply、call、bind-比较\"><a href=\"#apply、call、bind-比较\" class=\"headerlink\" title=\"apply、call、bind 比较\"></a>apply、call、bind 比较</h2><p>那么 <code>apply、call、bind</code> 三者相比较，之间又有什么异同呢？何时使用 <code>apply、call</code>，何时使用 <code>bind</code> 呢。简单的一个栗子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    x: <span class=\"number\">81</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = &#123;</span><br><span class=\"line\">    getX: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo.getX.bind(obj)());  </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo.getX.call(obj));    </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo.getX.apply(obj));</span><br></pre></td></tr></table></figure>\n\n<p>三个输出的都是 81，但是注意看使用 <code>bind()</code> 方法的，他后面多了对括号。</p>\n<p>也就是说，区别是，当你希望改变上下文环境之后并非立即执行，而是回调执行的时候，使用 bind() 方法。而 apply/call 则会立即执行函数。</p>\n<p>再总结一下：</p>\n<p><code>apply</code> 、 <code>call</code> 、<code>bind</code> 三者都是用来改变函数的 this 对象的指向的；<br><code>apply</code> 、 <code>call</code> 、<code>bind</code> 三者第一个参数都是 this 要指向的对象，也就是想指定的上下文；<br><code>apply</code> 、 <code>call</code> 、<code>bind</code> 三者都可以利用后续参数传参；<br><code>bind</code> 是返回对应函数，便于稍后调用；<code>apply</code> 、<code>call</code> 则是立即调用 。</p>"},{"layout":"[post]","title":"js栈","date":"2019-08-19T03:39:15.000Z","_content":"## 什么是堆栈\n栈，又叫堆栈，是和列表类似的一种数据结构，但是却更高效，因为栈内的元素只能通过列表的一端访问，称为栈顶，数据只能在栈顶添加或删除，遵循 先入后出(LIFO，last-in-first-out) 的原则，普遍运用于计算机的方方面面。\n<!-- more -->\n对栈的操作主要有两种，一是将一个元素压入栈，push方法，另一个就是将栈顶元素出栈，pop方法。\n\n除此之外，栈还有其他的一些属性和方法：查看当前栈顶的元素值，我们使用 peek 方法，它仅仅返回栈顶元素值，并不删除它；clear 方法用于清空当前栈内的所有元素；top属性记录当前栈顶位置；length方法返回当前栈内元素总数等；接着我们定义栈的数据类型，并利用JS中的数组去实现它。\n\n![image](duizhan1.webp)\n## 栈的实现\n\n```js\n//定义栈\n\nfunction Stack () {\n    this.dataStore = [];    //初始化为空\n    this.top = 0;           //记录栈顶位置\n    this.pop = pop;         //出栈\n    this.push = push;       //入栈\n    this.peek = peek;       //查看栈顶元素\n    this.length = length;   //查看栈内元素总数\n    this.clear = clear;     //清空栈\n}\n```\n\n我们利用 dataStore 来保存栈内元素，初始化为空数组，top 属性用于记录当前栈顶位置，初始化的时候为0，\n表示栈顶对应数组的起始位置是0，如果有元素入栈，则该属性会随之反生变化。\n\n**首先我们先来实现第一个入栈方法。**\n\n#### push：向栈内压入一个新的元素\n\n\n```js\n//该方法将一个新元素入栈，放到数组中 top 所对应的位置上，并将 top 的值加 1，让其指向数组的下一个空位置\n\nfunction push( element ){\n    this.dataStore[this.top++] = element;\n}\n```\n\n能入栈，就得可以出栈，接着我们来看出栈方法：\n#### pop：取出栈顶元素\n\n```js\n//该方法与入栈相反，返回栈顶元素，并将 top 的值减 1\n\nfunction pop(){\n    return this.dataStore[--this.top];\n}\n```\n\n如何查看栈顶元素呢，peek方法！\n\n#### peek：查看栈顶元素\n\n```js\n//该方法返回的是栈顶元素，即 top - 1 个位置元素\n\nfunction peek(){\n    if( this.top > 0 ) return this.dataStore[this.top-1];\n    else return 'Empty';\n}\n```\n\n这里我做了个判断，如果一个空栈调用了 peek 方法，因为栈内没有任何元素，所以我这里返回了一个 'Empty';\n\n现在，我们已经有了基本的入栈、出栈、查看栈顶元素的方法，我们不妨试一试。\n\n\n```js\n//初始化一个栈\nvar stack = new Stack();\nconsole.log( stack.peek() );    // Empty\n\n//入栈\nstack.push('Apple');\nstack.push('Banana');\nstack.push('Pear');\n\n//查看当前栈顶元素\nconsole.log( stack.peek() );    // Pear\nconsole.log( stack.pop() );     // Pear    \n```\n\n如果我放入了一些水果，吃掉了一个，我现在想知道我还剩多少个水果怎么办？length 方法可以实现\n\n#### length：返回栈内元素总数\n\n\n```js\n//该方法通过返回 top 属性的值来返回栈内总的元素个数\n\nfunction length(){\n    return this.top;\n}\n```\n\n我们把代码恢复到出栈前的状态，也就是里面已经放了三个水果，接着我们来看看\n\n\n```js\nconsole.log( stack.length() );      // 3\n\n//出栈\nstack.pop();\n\nconsole.log( stack.length() );      // 2\n```\n\n好了，我们还剩最后一个clear方法，我们来实现一下\n\n#### clear：清空栈\n\n```js\n//该方法实现很简单，我们将 top 值置为 0 ， dataStore 数值清空即可\n\nfunction clear(){\n    delete this.dataStore;\n    this.dataStore = [];\n    this.top = 0;\n}\n```\n## 实现数制间的相互转换\n我们可以利用栈将一个数字从一种数制转换成另一种数制。例如将数字 n 转换成以 b 为基数的数字，可以采用如下算法（该算法只针对基数为 2-9 的情况）：\n\n1. 最高位为 n % b ， 直接压入栈;\n2. 使用 n / b 来代替 n ;\n3. 重复上面的步骤，知道 n 为 0 ，并且没有余数；\n4. 以此将栈内元素弹出，直到栈空，并依次将这些元素排列，就得到了转换后的形式\n\n\n```js\n//进制转换（2-9）\n\nfunction mulBase ( num , base ) {\n    var s = new Stack();\n    do{\n        s.push( num % base );\n        num = Math.floor( num /= base );\n    }while ( num > 0 );\n\n    var converted = '';\n    while (s.length() > 0){\n        converted += s.pop();\n    }\n    return converted;\n}\n\nconsole.log( mulBase( 125 , 2 ) );      // 1111101\nconsole.log( mulBase( 125 , 8 ) );      // 175\n```\n","source":"_posts/js栈.md","raw":"---\nlayout: '[post]'\ntitle: js栈\ndate: 2019-08-19 11:39:15\ntags: javascript\n---\n## 什么是堆栈\n栈，又叫堆栈，是和列表类似的一种数据结构，但是却更高效，因为栈内的元素只能通过列表的一端访问，称为栈顶，数据只能在栈顶添加或删除，遵循 先入后出(LIFO，last-in-first-out) 的原则，普遍运用于计算机的方方面面。\n<!-- more -->\n对栈的操作主要有两种，一是将一个元素压入栈，push方法，另一个就是将栈顶元素出栈，pop方法。\n\n除此之外，栈还有其他的一些属性和方法：查看当前栈顶的元素值，我们使用 peek 方法，它仅仅返回栈顶元素值，并不删除它；clear 方法用于清空当前栈内的所有元素；top属性记录当前栈顶位置；length方法返回当前栈内元素总数等；接着我们定义栈的数据类型，并利用JS中的数组去实现它。\n\n![image](duizhan1.webp)\n## 栈的实现\n\n```js\n//定义栈\n\nfunction Stack () {\n    this.dataStore = [];    //初始化为空\n    this.top = 0;           //记录栈顶位置\n    this.pop = pop;         //出栈\n    this.push = push;       //入栈\n    this.peek = peek;       //查看栈顶元素\n    this.length = length;   //查看栈内元素总数\n    this.clear = clear;     //清空栈\n}\n```\n\n我们利用 dataStore 来保存栈内元素，初始化为空数组，top 属性用于记录当前栈顶位置，初始化的时候为0，\n表示栈顶对应数组的起始位置是0，如果有元素入栈，则该属性会随之反生变化。\n\n**首先我们先来实现第一个入栈方法。**\n\n#### push：向栈内压入一个新的元素\n\n\n```js\n//该方法将一个新元素入栈，放到数组中 top 所对应的位置上，并将 top 的值加 1，让其指向数组的下一个空位置\n\nfunction push( element ){\n    this.dataStore[this.top++] = element;\n}\n```\n\n能入栈，就得可以出栈，接着我们来看出栈方法：\n#### pop：取出栈顶元素\n\n```js\n//该方法与入栈相反，返回栈顶元素，并将 top 的值减 1\n\nfunction pop(){\n    return this.dataStore[--this.top];\n}\n```\n\n如何查看栈顶元素呢，peek方法！\n\n#### peek：查看栈顶元素\n\n```js\n//该方法返回的是栈顶元素，即 top - 1 个位置元素\n\nfunction peek(){\n    if( this.top > 0 ) return this.dataStore[this.top-1];\n    else return 'Empty';\n}\n```\n\n这里我做了个判断，如果一个空栈调用了 peek 方法，因为栈内没有任何元素，所以我这里返回了一个 'Empty';\n\n现在，我们已经有了基本的入栈、出栈、查看栈顶元素的方法，我们不妨试一试。\n\n\n```js\n//初始化一个栈\nvar stack = new Stack();\nconsole.log( stack.peek() );    // Empty\n\n//入栈\nstack.push('Apple');\nstack.push('Banana');\nstack.push('Pear');\n\n//查看当前栈顶元素\nconsole.log( stack.peek() );    // Pear\nconsole.log( stack.pop() );     // Pear    \n```\n\n如果我放入了一些水果，吃掉了一个，我现在想知道我还剩多少个水果怎么办？length 方法可以实现\n\n#### length：返回栈内元素总数\n\n\n```js\n//该方法通过返回 top 属性的值来返回栈内总的元素个数\n\nfunction length(){\n    return this.top;\n}\n```\n\n我们把代码恢复到出栈前的状态，也就是里面已经放了三个水果，接着我们来看看\n\n\n```js\nconsole.log( stack.length() );      // 3\n\n//出栈\nstack.pop();\n\nconsole.log( stack.length() );      // 2\n```\n\n好了，我们还剩最后一个clear方法，我们来实现一下\n\n#### clear：清空栈\n\n```js\n//该方法实现很简单，我们将 top 值置为 0 ， dataStore 数值清空即可\n\nfunction clear(){\n    delete this.dataStore;\n    this.dataStore = [];\n    this.top = 0;\n}\n```\n## 实现数制间的相互转换\n我们可以利用栈将一个数字从一种数制转换成另一种数制。例如将数字 n 转换成以 b 为基数的数字，可以采用如下算法（该算法只针对基数为 2-9 的情况）：\n\n1. 最高位为 n % b ， 直接压入栈;\n2. 使用 n / b 来代替 n ;\n3. 重复上面的步骤，知道 n 为 0 ，并且没有余数；\n4. 以此将栈内元素弹出，直到栈空，并依次将这些元素排列，就得到了转换后的形式\n\n\n```js\n//进制转换（2-9）\n\nfunction mulBase ( num , base ) {\n    var s = new Stack();\n    do{\n        s.push( num % base );\n        num = Math.floor( num /= base );\n    }while ( num > 0 );\n\n    var converted = '';\n    while (s.length() > 0){\n        converted += s.pop();\n    }\n    return converted;\n}\n\nconsole.log( mulBase( 125 , 2 ) );      // 1111101\nconsole.log( mulBase( 125 , 8 ) );      // 175\n```\n","slug":"js栈","published":1,"updated":"2020-04-27T03:41:28.000Z","comments":1,"photos":[],"link":"","_id":"ckbftlm6o001e7w2p7byd5bsk","content":"<h2 id=\"什么是堆栈\"><a href=\"#什么是堆栈\" class=\"headerlink\" title=\"什么是堆栈\"></a>什么是堆栈</h2><p>栈，又叫堆栈，是和列表类似的一种数据结构，但是却更高效，因为栈内的元素只能通过列表的一端访问，称为栈顶，数据只能在栈顶添加或删除，遵循 先入后出(LIFO，last-in-first-out) 的原则，普遍运用于计算机的方方面面。</p>\n<a id=\"more\"></a>\n<p>对栈的操作主要有两种，一是将一个元素压入栈，push方法，另一个就是将栈顶元素出栈，pop方法。</p>\n<p>除此之外，栈还有其他的一些属性和方法：查看当前栈顶的元素值，我们使用 peek 方法，它仅仅返回栈顶元素值，并不删除它；clear 方法用于清空当前栈内的所有元素；top属性记录当前栈顶位置；length方法返回当前栈内元素总数等；接着我们定义栈的数据类型，并利用JS中的数组去实现它。</p>\n<p><img src=\"/2019/08/19/js%E6%A0%88/duizhan1.webp\" alt=\"image\"></p>\n<h2 id=\"栈的实现\"><a href=\"#栈的实现\" class=\"headerlink\" title=\"栈的实现\"></a>栈的实现</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义栈</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Stack</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.dataStore = [];    <span class=\"comment\">//初始化为空</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.top = <span class=\"number\">0</span>;           <span class=\"comment\">//记录栈顶位置</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.pop = pop;         <span class=\"comment\">//出栈</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.push = push;       <span class=\"comment\">//入栈</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.peek = peek;       <span class=\"comment\">//查看栈顶元素</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.length = length;   <span class=\"comment\">//查看栈内元素总数</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.clear = clear;     <span class=\"comment\">//清空栈</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们利用 dataStore 来保存栈内元素，初始化为空数组，top 属性用于记录当前栈顶位置，初始化的时候为0，<br>表示栈顶对应数组的起始位置是0，如果有元素入栈，则该属性会随之反生变化。</p>\n<p><strong>首先我们先来实现第一个入栈方法。</strong></p>\n<h4 id=\"push：向栈内压入一个新的元素\"><a href=\"#push：向栈内压入一个新的元素\" class=\"headerlink\" title=\"push：向栈内压入一个新的元素\"></a>push：向栈内压入一个新的元素</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//该方法将一个新元素入栈，放到数组中 top 所对应的位置上，并将 top 的值加 1，让其指向数组的下一个空位置</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">push</span>(<span class=\"params\"> element </span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.dataStore[<span class=\"keyword\">this</span>.top++] = element;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>能入栈，就得可以出栈，接着我们来看出栈方法：</p>\n<h4 id=\"pop：取出栈顶元素\"><a href=\"#pop：取出栈顶元素\" class=\"headerlink\" title=\"pop：取出栈顶元素\"></a>pop：取出栈顶元素</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//该方法与入栈相反，返回栈顶元素，并将 top 的值减 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pop</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.dataStore[--<span class=\"keyword\">this</span>.top];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如何查看栈顶元素呢，peek方法！</p>\n<h4 id=\"peek：查看栈顶元素\"><a href=\"#peek：查看栈顶元素\" class=\"headerlink\" title=\"peek：查看栈顶元素\"></a>peek：查看栈顶元素</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//该方法返回的是栈顶元素，即 top - 1 个位置元素</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">peek</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( <span class=\"keyword\">this</span>.top &gt; <span class=\"number\">0</span> ) <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.dataStore[<span class=\"keyword\">this</span>.top<span class=\"number\">-1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"string\">'Empty'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里我做了个判断，如果一个空栈调用了 peek 方法，因为栈内没有任何元素，所以我这里返回了一个 ‘Empty’;</p>\n<p>现在，我们已经有了基本的入栈、出栈、查看栈顶元素的方法，我们不妨试一试。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//初始化一个栈</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> stack = <span class=\"keyword\">new</span> Stack();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( stack.peek() );    <span class=\"comment\">// Empty</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//入栈</span></span><br><span class=\"line\">stack.push(<span class=\"string\">'Apple'</span>);</span><br><span class=\"line\">stack.push(<span class=\"string\">'Banana'</span>);</span><br><span class=\"line\">stack.push(<span class=\"string\">'Pear'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//查看当前栈顶元素</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( stack.peek() );    <span class=\"comment\">// Pear</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( stack.pop() );     <span class=\"comment\">// Pear</span></span><br></pre></td></tr></table></figure>\n\n<p>如果我放入了一些水果，吃掉了一个，我现在想知道我还剩多少个水果怎么办？length 方法可以实现</p>\n<h4 id=\"length：返回栈内元素总数\"><a href=\"#length：返回栈内元素总数\" class=\"headerlink\" title=\"length：返回栈内元素总数\"></a>length：返回栈内元素总数</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//该方法通过返回 top 属性的值来返回栈内总的元素个数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">length</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.top;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们把代码恢复到出栈前的状态，也就是里面已经放了三个水果，接着我们来看看</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log( stack.length() );      <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//出栈</span></span><br><span class=\"line\">stack.pop();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( stack.length() );      <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n\n<p>好了，我们还剩最后一个clear方法，我们来实现一下</p>\n<h4 id=\"clear：清空栈\"><a href=\"#clear：清空栈\" class=\"headerlink\" title=\"clear：清空栈\"></a>clear：清空栈</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//该方法实现很简单，我们将 top 值置为 0 ， dataStore 数值清空即可</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clear</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> <span class=\"keyword\">this</span>.dataStore;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.dataStore = [];</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.top = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"实现数制间的相互转换\"><a href=\"#实现数制间的相互转换\" class=\"headerlink\" title=\"实现数制间的相互转换\"></a>实现数制间的相互转换</h2><p>我们可以利用栈将一个数字从一种数制转换成另一种数制。例如将数字 n 转换成以 b 为基数的数字，可以采用如下算法（该算法只针对基数为 2-9 的情况）：</p>\n<ol>\n<li>最高位为 n % b ， 直接压入栈;</li>\n<li>使用 n / b 来代替 n ;</li>\n<li>重复上面的步骤，知道 n 为 0 ，并且没有余数；</li>\n<li>以此将栈内元素弹出，直到栈空，并依次将这些元素排列，就得到了转换后的形式</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//进制转换（2-9）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mulBase</span> (<span class=\"params\"> num , base </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> Stack();</span><br><span class=\"line\">    <span class=\"keyword\">do</span>&#123;</span><br><span class=\"line\">        s.push( num % base );</span><br><span class=\"line\">        num = <span class=\"built_in\">Math</span>.floor( num /= base );</span><br><span class=\"line\">    &#125;<span class=\"keyword\">while</span> ( num &gt; <span class=\"number\">0</span> );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> converted = <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (s.length() &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        converted += s.pop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> converted;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( mulBase( <span class=\"number\">125</span> , <span class=\"number\">2</span> ) );      <span class=\"comment\">// 1111101</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( mulBase( <span class=\"number\">125</span> , <span class=\"number\">8</span> ) );      <span class=\"comment\">// 175</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"什么是堆栈\"><a href=\"#什么是堆栈\" class=\"headerlink\" title=\"什么是堆栈\"></a>什么是堆栈</h2><p>栈，又叫堆栈，是和列表类似的一种数据结构，但是却更高效，因为栈内的元素只能通过列表的一端访问，称为栈顶，数据只能在栈顶添加或删除，遵循 先入后出(LIFO，last-in-first-out) 的原则，普遍运用于计算机的方方面面。</p>","more":"<p>对栈的操作主要有两种，一是将一个元素压入栈，push方法，另一个就是将栈顶元素出栈，pop方法。</p>\n<p>除此之外，栈还有其他的一些属性和方法：查看当前栈顶的元素值，我们使用 peek 方法，它仅仅返回栈顶元素值，并不删除它；clear 方法用于清空当前栈内的所有元素；top属性记录当前栈顶位置；length方法返回当前栈内元素总数等；接着我们定义栈的数据类型，并利用JS中的数组去实现它。</p>\n<p><img src=\"/2019/08/19/js%E6%A0%88/duizhan1.webp\" alt=\"image\"></p>\n<h2 id=\"栈的实现\"><a href=\"#栈的实现\" class=\"headerlink\" title=\"栈的实现\"></a>栈的实现</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义栈</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Stack</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.dataStore = [];    <span class=\"comment\">//初始化为空</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.top = <span class=\"number\">0</span>;           <span class=\"comment\">//记录栈顶位置</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.pop = pop;         <span class=\"comment\">//出栈</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.push = push;       <span class=\"comment\">//入栈</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.peek = peek;       <span class=\"comment\">//查看栈顶元素</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.length = length;   <span class=\"comment\">//查看栈内元素总数</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.clear = clear;     <span class=\"comment\">//清空栈</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们利用 dataStore 来保存栈内元素，初始化为空数组，top 属性用于记录当前栈顶位置，初始化的时候为0，<br>表示栈顶对应数组的起始位置是0，如果有元素入栈，则该属性会随之反生变化。</p>\n<p><strong>首先我们先来实现第一个入栈方法。</strong></p>\n<h4 id=\"push：向栈内压入一个新的元素\"><a href=\"#push：向栈内压入一个新的元素\" class=\"headerlink\" title=\"push：向栈内压入一个新的元素\"></a>push：向栈内压入一个新的元素</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//该方法将一个新元素入栈，放到数组中 top 所对应的位置上，并将 top 的值加 1，让其指向数组的下一个空位置</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">push</span>(<span class=\"params\"> element </span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.dataStore[<span class=\"keyword\">this</span>.top++] = element;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>能入栈，就得可以出栈，接着我们来看出栈方法：</p>\n<h4 id=\"pop：取出栈顶元素\"><a href=\"#pop：取出栈顶元素\" class=\"headerlink\" title=\"pop：取出栈顶元素\"></a>pop：取出栈顶元素</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//该方法与入栈相反，返回栈顶元素，并将 top 的值减 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pop</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.dataStore[--<span class=\"keyword\">this</span>.top];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如何查看栈顶元素呢，peek方法！</p>\n<h4 id=\"peek：查看栈顶元素\"><a href=\"#peek：查看栈顶元素\" class=\"headerlink\" title=\"peek：查看栈顶元素\"></a>peek：查看栈顶元素</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//该方法返回的是栈顶元素，即 top - 1 个位置元素</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">peek</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( <span class=\"keyword\">this</span>.top &gt; <span class=\"number\">0</span> ) <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.dataStore[<span class=\"keyword\">this</span>.top<span class=\"number\">-1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"string\">'Empty'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里我做了个判断，如果一个空栈调用了 peek 方法，因为栈内没有任何元素，所以我这里返回了一个 ‘Empty’;</p>\n<p>现在，我们已经有了基本的入栈、出栈、查看栈顶元素的方法，我们不妨试一试。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//初始化一个栈</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> stack = <span class=\"keyword\">new</span> Stack();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( stack.peek() );    <span class=\"comment\">// Empty</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//入栈</span></span><br><span class=\"line\">stack.push(<span class=\"string\">'Apple'</span>);</span><br><span class=\"line\">stack.push(<span class=\"string\">'Banana'</span>);</span><br><span class=\"line\">stack.push(<span class=\"string\">'Pear'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//查看当前栈顶元素</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( stack.peek() );    <span class=\"comment\">// Pear</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( stack.pop() );     <span class=\"comment\">// Pear</span></span><br></pre></td></tr></table></figure>\n\n<p>如果我放入了一些水果，吃掉了一个，我现在想知道我还剩多少个水果怎么办？length 方法可以实现</p>\n<h4 id=\"length：返回栈内元素总数\"><a href=\"#length：返回栈内元素总数\" class=\"headerlink\" title=\"length：返回栈内元素总数\"></a>length：返回栈内元素总数</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//该方法通过返回 top 属性的值来返回栈内总的元素个数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">length</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.top;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们把代码恢复到出栈前的状态，也就是里面已经放了三个水果，接着我们来看看</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log( stack.length() );      <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//出栈</span></span><br><span class=\"line\">stack.pop();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( stack.length() );      <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n\n<p>好了，我们还剩最后一个clear方法，我们来实现一下</p>\n<h4 id=\"clear：清空栈\"><a href=\"#clear：清空栈\" class=\"headerlink\" title=\"clear：清空栈\"></a>clear：清空栈</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//该方法实现很简单，我们将 top 值置为 0 ， dataStore 数值清空即可</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clear</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> <span class=\"keyword\">this</span>.dataStore;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.dataStore = [];</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.top = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"实现数制间的相互转换\"><a href=\"#实现数制间的相互转换\" class=\"headerlink\" title=\"实现数制间的相互转换\"></a>实现数制间的相互转换</h2><p>我们可以利用栈将一个数字从一种数制转换成另一种数制。例如将数字 n 转换成以 b 为基数的数字，可以采用如下算法（该算法只针对基数为 2-9 的情况）：</p>\n<ol>\n<li>最高位为 n % b ， 直接压入栈;</li>\n<li>使用 n / b 来代替 n ;</li>\n<li>重复上面的步骤，知道 n 为 0 ，并且没有余数；</li>\n<li>以此将栈内元素弹出，直到栈空，并依次将这些元素排列，就得到了转换后的形式</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//进制转换（2-9）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mulBase</span> (<span class=\"params\"> num , base </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> Stack();</span><br><span class=\"line\">    <span class=\"keyword\">do</span>&#123;</span><br><span class=\"line\">        s.push( num % base );</span><br><span class=\"line\">        num = <span class=\"built_in\">Math</span>.floor( num /= base );</span><br><span class=\"line\">    &#125;<span class=\"keyword\">while</span> ( num &gt; <span class=\"number\">0</span> );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> converted = <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (s.length() &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        converted += s.pop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> converted;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( mulBase( <span class=\"number\">125</span> , <span class=\"number\">2</span> ) );      <span class=\"comment\">// 1111101</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( mulBase( <span class=\"number\">125</span> , <span class=\"number\">8</span> ) );      <span class=\"comment\">// 175</span></span><br></pre></td></tr></table></figure>"},{"layout":"[post]","title":"js的面向对象","date":"2019-07-25T10:54:57.000Z","_content":"## 类和实例\n<!-- more -->\n\n### 类的声明\n\n```js\n\t// 类的声明\n\tfunction Animal() {\n\t\tthis.name = 'animal';\n\t}\n\t// es6中的声明\n\tclass Animals {\n\t\tconstructor() {\n\t\tthis.name = 'animal';\n\t\t}\n\t}\n```\n### 类的实例化\n\n```js\n    // 实例化类\n    //在没有参数时，构造函数的括号可以省略\n\tconsole.log(new Animal(), new Animals());\n```\n## 类和继承\n### 使用构造函数进行继承\n\n```js\n//\t使用构造函数进行继承（es5）\nfunction Parent1() {\n    this.name = 'name';\n}\nParent1.prototype.say = function () {\n    console.log('say');\n}\n// 这种方式不会继承父类原型对象上的方法\nfunction Child1() {\n    Parent1.call(this); // apply;\n    this.type = 'chilid1';\n}\nconsole.log(new Child1);\n```\n**这种方式不会继承父类原型对象上的方法**\n### 借助原型链实现继承\n\n```js\n//\t借助原型链实现继承\nfunction Parent2() {\n    this.name = 'name2';\n    this.play = [1, 2, 3];\n}\nfunction Child2() {\n    this.type = 'chilid2';\n}\nChild2.prototype = new Parent2();\nconsole.log(new Child2());\nvar s1 = new Child2();\nvar s2 = new Child2();\nconsole.log(s1.play, s2.play);\t//[1,2,3] [1,2,3]\ns1.play.push(4);\nconsole.log(s1.play, s2.play);\t//[1,2,3,4] [1,2,3,4]\n```\n**多个实例化对象，共用一个原型链，修改对象中原型链上的属性，会导致其他对象的原型链上的属性也发生变化。**\n\n### 组合方式\n\n```js\n// 组合方式\nfunction Parent3() {\n    this.name = 'name3';\n    this.play = [1, 2, 3];\n}\nfunction Child3() {\n    Parent3.call(this);\n    this.type = 'chilid3';\n}\nChild3.prototype = new Parent3();\nvar s3 = new Child3();\nvar s4 = new Child3();\ns3.play.push(4);\nconsole.log(s3.play, s4.play);\n```\n**有缺点，父类的构造函数执行了两次。**\n### 组合继承的优化1\n\n```js\nfunction Parent4() {\n    this.name = '4';\n    this.play = [1, 2, 3];\n}\nfunction Child4() {\n    Parent4.call(this);\n    this.type = 'chilid4';\n}\nChild4.prototype = Parent4.prototype;\nvar s5 = new Child4();\nvar s6 = new Child4();\ns5.play.push(4);\nconsole.log(s5.play, s6.play);\nconsole.log(s5 instanceof Child4, s5 instanceof Parent4);\t// true true\nconsole.log(s5.constructor);\t// Parent4\n// 因为子类的prototype就是父类的实例，他的constructor是从父类直接拿过来的\n```\n父类只在子类实例化时执行一次，将父类的prototype赋给子类。\n\n### 组合继承的优化2\n\n```js\nfunction Parent5() {\n    this.name = '5';\n    this.play = [1, 2, 3];\n}\nfunction Child5() {\n    Parent5.call(this);\n    this.type = 'chilid5';\n}\nChild5.prototype = Object.create(Parent5.prototype);\nChild5.prototype.constructor = Child5;\nvar s5 = new Child5();\nvar s6 = new Child5();\ns5.play.push(4);\nconsole.log(s5.play, s6.play);\nconsole.log(s5 instanceof Child5, s5 instanceof Parent5); // true true\nconsole.log(s5.constructor); // Child5\n```\n### ES6的继承\n\n```js\n// es6继承\n  class Animal {\n    //构造函数，里面写上对象的属性\n    constructor(props) {\n      this.name = props.name || 'Unknown';\n    }\n    //方法写在后面\n    eat() {//父类共有的方法\n      console.log(this.name + \" will eat pests.\");\n    }\n  }\n\n  //class继承\n  class Bird extends Animal {\n    //构造函数\n    constructor(props,myAttribute) {//props是继承过来的属性，myAttribute是自己的属性\n      //调用实现父类的构造函数\n      super(props)//相当于获得父类的this指向\n      this.type = props.type || \"Unknown\";//父类的属性，也可写在父类中\n      this.attr = myAttribute;//自己的私有属性\n    }\n\n    fly() {//自己私有的方法\n      console.log(this.name + \" are friendly to people.\");\n    }\n    myattr() {//自己私有的方法\n      console.log(this.type+'---'+this.attr);\n    }\n  }\n\n//通过new实例化\n  var myBird = new Bird({\n    name: '小燕子',\n    type: 'Egg animal'//卵生动物\n  },'Bird class')\n  myBird.eat()\n  myBird.fly()\n  myBird.myattr()\n```\n","source":"_posts/js的面向对象.md","raw":"---\nlayout: '[post]'\ntitle: js的面向对象\ndate: 2019-07-25 18:54:57\ntags: javascript\n---\n## 类和实例\n<!-- more -->\n\n### 类的声明\n\n```js\n\t// 类的声明\n\tfunction Animal() {\n\t\tthis.name = 'animal';\n\t}\n\t// es6中的声明\n\tclass Animals {\n\t\tconstructor() {\n\t\tthis.name = 'animal';\n\t\t}\n\t}\n```\n### 类的实例化\n\n```js\n    // 实例化类\n    //在没有参数时，构造函数的括号可以省略\n\tconsole.log(new Animal(), new Animals());\n```\n## 类和继承\n### 使用构造函数进行继承\n\n```js\n//\t使用构造函数进行继承（es5）\nfunction Parent1() {\n    this.name = 'name';\n}\nParent1.prototype.say = function () {\n    console.log('say');\n}\n// 这种方式不会继承父类原型对象上的方法\nfunction Child1() {\n    Parent1.call(this); // apply;\n    this.type = 'chilid1';\n}\nconsole.log(new Child1);\n```\n**这种方式不会继承父类原型对象上的方法**\n### 借助原型链实现继承\n\n```js\n//\t借助原型链实现继承\nfunction Parent2() {\n    this.name = 'name2';\n    this.play = [1, 2, 3];\n}\nfunction Child2() {\n    this.type = 'chilid2';\n}\nChild2.prototype = new Parent2();\nconsole.log(new Child2());\nvar s1 = new Child2();\nvar s2 = new Child2();\nconsole.log(s1.play, s2.play);\t//[1,2,3] [1,2,3]\ns1.play.push(4);\nconsole.log(s1.play, s2.play);\t//[1,2,3,4] [1,2,3,4]\n```\n**多个实例化对象，共用一个原型链，修改对象中原型链上的属性，会导致其他对象的原型链上的属性也发生变化。**\n\n### 组合方式\n\n```js\n// 组合方式\nfunction Parent3() {\n    this.name = 'name3';\n    this.play = [1, 2, 3];\n}\nfunction Child3() {\n    Parent3.call(this);\n    this.type = 'chilid3';\n}\nChild3.prototype = new Parent3();\nvar s3 = new Child3();\nvar s4 = new Child3();\ns3.play.push(4);\nconsole.log(s3.play, s4.play);\n```\n**有缺点，父类的构造函数执行了两次。**\n### 组合继承的优化1\n\n```js\nfunction Parent4() {\n    this.name = '4';\n    this.play = [1, 2, 3];\n}\nfunction Child4() {\n    Parent4.call(this);\n    this.type = 'chilid4';\n}\nChild4.prototype = Parent4.prototype;\nvar s5 = new Child4();\nvar s6 = new Child4();\ns5.play.push(4);\nconsole.log(s5.play, s6.play);\nconsole.log(s5 instanceof Child4, s5 instanceof Parent4);\t// true true\nconsole.log(s5.constructor);\t// Parent4\n// 因为子类的prototype就是父类的实例，他的constructor是从父类直接拿过来的\n```\n父类只在子类实例化时执行一次，将父类的prototype赋给子类。\n\n### 组合继承的优化2\n\n```js\nfunction Parent5() {\n    this.name = '5';\n    this.play = [1, 2, 3];\n}\nfunction Child5() {\n    Parent5.call(this);\n    this.type = 'chilid5';\n}\nChild5.prototype = Object.create(Parent5.prototype);\nChild5.prototype.constructor = Child5;\nvar s5 = new Child5();\nvar s6 = new Child5();\ns5.play.push(4);\nconsole.log(s5.play, s6.play);\nconsole.log(s5 instanceof Child5, s5 instanceof Parent5); // true true\nconsole.log(s5.constructor); // Child5\n```\n### ES6的继承\n\n```js\n// es6继承\n  class Animal {\n    //构造函数，里面写上对象的属性\n    constructor(props) {\n      this.name = props.name || 'Unknown';\n    }\n    //方法写在后面\n    eat() {//父类共有的方法\n      console.log(this.name + \" will eat pests.\");\n    }\n  }\n\n  //class继承\n  class Bird extends Animal {\n    //构造函数\n    constructor(props,myAttribute) {//props是继承过来的属性，myAttribute是自己的属性\n      //调用实现父类的构造函数\n      super(props)//相当于获得父类的this指向\n      this.type = props.type || \"Unknown\";//父类的属性，也可写在父类中\n      this.attr = myAttribute;//自己的私有属性\n    }\n\n    fly() {//自己私有的方法\n      console.log(this.name + \" are friendly to people.\");\n    }\n    myattr() {//自己私有的方法\n      console.log(this.type+'---'+this.attr);\n    }\n  }\n\n//通过new实例化\n  var myBird = new Bird({\n    name: '小燕子',\n    type: 'Egg animal'//卵生动物\n  },'Bird class')\n  myBird.eat()\n  myBird.fly()\n  myBird.myattr()\n```\n","slug":"js的面向对象","published":1,"updated":"2020-04-14T01:21:51.000Z","comments":1,"photos":[],"link":"","_id":"ckbftlm6q001g7w2p55ic3jzt","content":"<h2 id=\"类和实例\"><a href=\"#类和实例\" class=\"headerlink\" title=\"类和实例\"></a>类和实例</h2><a id=\"more\"></a>\n\n<h3 id=\"类的声明\"><a href=\"#类的声明\" class=\"headerlink\" title=\"类的声明\"></a>类的声明</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 类的声明</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Animal</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name = <span class=\"string\">'animal'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// es6中的声明</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animals</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name = <span class=\"string\">'animal'</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"类的实例化\"><a href=\"#类的实例化\" class=\"headerlink\" title=\"类的实例化\"></a>类的实例化</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"comment\">// 实例化类</span></span><br><span class=\"line\">   <span class=\"comment\">//在没有参数时，构造函数的括号可以省略</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> Animal(), <span class=\"keyword\">new</span> Animals());</span><br></pre></td></tr></table></figure>\n<h2 id=\"类和继承\"><a href=\"#类和继承\" class=\"headerlink\" title=\"类和继承\"></a>类和继承</h2><h3 id=\"使用构造函数进行继承\"><a href=\"#使用构造函数进行继承\" class=\"headerlink\" title=\"使用构造函数进行继承\"></a>使用构造函数进行继承</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//\t使用构造函数进行继承（es5）</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'name'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Parent1.prototype.say = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'say'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 这种方式不会继承父类原型对象上的方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    Parent1.call(<span class=\"keyword\">this</span>); <span class=\"comment\">// apply;</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.type = <span class=\"string\">'chilid1'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> Child1);</span><br></pre></td></tr></table></figure>\n<p><strong>这种方式不会继承父类原型对象上的方法</strong></p>\n<h3 id=\"借助原型链实现继承\"><a href=\"#借助原型链实现继承\" class=\"headerlink\" title=\"借助原型链实现继承\"></a>借助原型链实现继承</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//\t借助原型链实现继承</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'name2'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.play = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.type = <span class=\"string\">'chilid2'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Child2.prototype = <span class=\"keyword\">new</span> Parent2();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> Child2());</span><br><span class=\"line\"><span class=\"keyword\">var</span> s1 = <span class=\"keyword\">new</span> Child2();</span><br><span class=\"line\"><span class=\"keyword\">var</span> s2 = <span class=\"keyword\">new</span> Child2();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s1.play, s2.play);\t<span class=\"comment\">//[1,2,3] [1,2,3]</span></span><br><span class=\"line\">s1.play.push(<span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s1.play, s2.play);\t<span class=\"comment\">//[1,2,3,4] [1,2,3,4]</span></span><br></pre></td></tr></table></figure>\n<p><strong>多个实例化对象，共用一个原型链，修改对象中原型链上的属性，会导致其他对象的原型链上的属性也发生变化。</strong></p>\n<h3 id=\"组合方式\"><a href=\"#组合方式\" class=\"headerlink\" title=\"组合方式\"></a>组合方式</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 组合方式</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent3</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'name3'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.play = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child3</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    Parent3.call(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.type = <span class=\"string\">'chilid3'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Child3.prototype = <span class=\"keyword\">new</span> Parent3();</span><br><span class=\"line\"><span class=\"keyword\">var</span> s3 = <span class=\"keyword\">new</span> Child3();</span><br><span class=\"line\"><span class=\"keyword\">var</span> s4 = <span class=\"keyword\">new</span> Child3();</span><br><span class=\"line\">s3.play.push(<span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s3.play, s4.play);</span><br></pre></td></tr></table></figure>\n<p><strong>有缺点，父类的构造函数执行了两次。</strong></p>\n<h3 id=\"组合继承的优化1\"><a href=\"#组合继承的优化1\" class=\"headerlink\" title=\"组合继承的优化1\"></a>组合继承的优化1</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent4</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'4'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.play = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child4</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    Parent4.call(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.type = <span class=\"string\">'chilid4'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Child4.prototype = Parent4.prototype;</span><br><span class=\"line\"><span class=\"keyword\">var</span> s5 = <span class=\"keyword\">new</span> Child4();</span><br><span class=\"line\"><span class=\"keyword\">var</span> s6 = <span class=\"keyword\">new</span> Child4();</span><br><span class=\"line\">s5.play.push(<span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s5.play, s6.play);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s5 <span class=\"keyword\">instanceof</span> Child4, s5 <span class=\"keyword\">instanceof</span> Parent4);\t<span class=\"comment\">// true true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s5.constructor);\t<span class=\"comment\">// Parent4</span></span><br><span class=\"line\"><span class=\"comment\">// 因为子类的prototype就是父类的实例，他的constructor是从父类直接拿过来的</span></span><br></pre></td></tr></table></figure>\n<p>父类只在子类实例化时执行一次，将父类的prototype赋给子类。</p>\n<h3 id=\"组合继承的优化2\"><a href=\"#组合继承的优化2\" class=\"headerlink\" title=\"组合继承的优化2\"></a>组合继承的优化2</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent5</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'5'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.play = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child5</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    Parent5.call(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.type = <span class=\"string\">'chilid5'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Child5.prototype = <span class=\"built_in\">Object</span>.create(Parent5.prototype);</span><br><span class=\"line\">Child5.prototype.constructor = Child5;</span><br><span class=\"line\"><span class=\"keyword\">var</span> s5 = <span class=\"keyword\">new</span> Child5();</span><br><span class=\"line\"><span class=\"keyword\">var</span> s6 = <span class=\"keyword\">new</span> Child5();</span><br><span class=\"line\">s5.play.push(<span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s5.play, s6.play);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s5 <span class=\"keyword\">instanceof</span> Child5, s5 <span class=\"keyword\">instanceof</span> Parent5); <span class=\"comment\">// true true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s5.constructor); <span class=\"comment\">// Child5</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"ES6的继承\"><a href=\"#ES6的继承\" class=\"headerlink\" title=\"ES6的继承\"></a>ES6的继承</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// es6继承</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//构造函数，里面写上对象的属性</span></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.name = props.name || <span class=\"string\">'Unknown'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//方法写在后面</span></span><br><span class=\"line\">    eat() &#123;<span class=\"comment\">//父类共有的方法</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">\" will eat pests.\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//class继承</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bird</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//构造函数</span></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(props,myAttribute) &#123;<span class=\"comment\">//props是继承过来的属性，myAttribute是自己的属性</span></span><br><span class=\"line\">      <span class=\"comment\">//调用实现父类的构造函数</span></span><br><span class=\"line\">      <span class=\"keyword\">super</span>(props)<span class=\"comment\">//相当于获得父类的this指向</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.type = props.type || <span class=\"string\">\"Unknown\"</span>;<span class=\"comment\">//父类的属性，也可写在父类中</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.attr = myAttribute;<span class=\"comment\">//自己的私有属性</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    fly() &#123;<span class=\"comment\">//自己私有的方法</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">\" are friendly to people.\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    myattr() &#123;<span class=\"comment\">//自己私有的方法</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.type+<span class=\"string\">'---'</span>+<span class=\"keyword\">this</span>.attr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//通过new实例化</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> myBird = <span class=\"keyword\">new</span> Bird(&#123;</span><br><span class=\"line\">    name: <span class=\"string\">'小燕子'</span>,</span><br><span class=\"line\">    type: <span class=\"string\">'Egg animal'</span><span class=\"comment\">//卵生动物</span></span><br><span class=\"line\">  &#125;,<span class=\"string\">'Bird class'</span>)</span><br><span class=\"line\">  myBird.eat()</span><br><span class=\"line\">  myBird.fly()</span><br><span class=\"line\">  myBird.myattr()</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"类和实例\"><a href=\"#类和实例\" class=\"headerlink\" title=\"类和实例\"></a>类和实例</h2>","more":"<h3 id=\"类的声明\"><a href=\"#类的声明\" class=\"headerlink\" title=\"类的声明\"></a>类的声明</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 类的声明</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Animal</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name = <span class=\"string\">'animal'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// es6中的声明</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animals</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name = <span class=\"string\">'animal'</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"类的实例化\"><a href=\"#类的实例化\" class=\"headerlink\" title=\"类的实例化\"></a>类的实例化</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"comment\">// 实例化类</span></span><br><span class=\"line\">   <span class=\"comment\">//在没有参数时，构造函数的括号可以省略</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> Animal(), <span class=\"keyword\">new</span> Animals());</span><br></pre></td></tr></table></figure>\n<h2 id=\"类和继承\"><a href=\"#类和继承\" class=\"headerlink\" title=\"类和继承\"></a>类和继承</h2><h3 id=\"使用构造函数进行继承\"><a href=\"#使用构造函数进行继承\" class=\"headerlink\" title=\"使用构造函数进行继承\"></a>使用构造函数进行继承</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//\t使用构造函数进行继承（es5）</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'name'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Parent1.prototype.say = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'say'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 这种方式不会继承父类原型对象上的方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    Parent1.call(<span class=\"keyword\">this</span>); <span class=\"comment\">// apply;</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.type = <span class=\"string\">'chilid1'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> Child1);</span><br></pre></td></tr></table></figure>\n<p><strong>这种方式不会继承父类原型对象上的方法</strong></p>\n<h3 id=\"借助原型链实现继承\"><a href=\"#借助原型链实现继承\" class=\"headerlink\" title=\"借助原型链实现继承\"></a>借助原型链实现继承</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//\t借助原型链实现继承</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'name2'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.play = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.type = <span class=\"string\">'chilid2'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Child2.prototype = <span class=\"keyword\">new</span> Parent2();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> Child2());</span><br><span class=\"line\"><span class=\"keyword\">var</span> s1 = <span class=\"keyword\">new</span> Child2();</span><br><span class=\"line\"><span class=\"keyword\">var</span> s2 = <span class=\"keyword\">new</span> Child2();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s1.play, s2.play);\t<span class=\"comment\">//[1,2,3] [1,2,3]</span></span><br><span class=\"line\">s1.play.push(<span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s1.play, s2.play);\t<span class=\"comment\">//[1,2,3,4] [1,2,3,4]</span></span><br></pre></td></tr></table></figure>\n<p><strong>多个实例化对象，共用一个原型链，修改对象中原型链上的属性，会导致其他对象的原型链上的属性也发生变化。</strong></p>\n<h3 id=\"组合方式\"><a href=\"#组合方式\" class=\"headerlink\" title=\"组合方式\"></a>组合方式</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 组合方式</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent3</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'name3'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.play = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child3</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    Parent3.call(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.type = <span class=\"string\">'chilid3'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Child3.prototype = <span class=\"keyword\">new</span> Parent3();</span><br><span class=\"line\"><span class=\"keyword\">var</span> s3 = <span class=\"keyword\">new</span> Child3();</span><br><span class=\"line\"><span class=\"keyword\">var</span> s4 = <span class=\"keyword\">new</span> Child3();</span><br><span class=\"line\">s3.play.push(<span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s3.play, s4.play);</span><br></pre></td></tr></table></figure>\n<p><strong>有缺点，父类的构造函数执行了两次。</strong></p>\n<h3 id=\"组合继承的优化1\"><a href=\"#组合继承的优化1\" class=\"headerlink\" title=\"组合继承的优化1\"></a>组合继承的优化1</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent4</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'4'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.play = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child4</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    Parent4.call(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.type = <span class=\"string\">'chilid4'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Child4.prototype = Parent4.prototype;</span><br><span class=\"line\"><span class=\"keyword\">var</span> s5 = <span class=\"keyword\">new</span> Child4();</span><br><span class=\"line\"><span class=\"keyword\">var</span> s6 = <span class=\"keyword\">new</span> Child4();</span><br><span class=\"line\">s5.play.push(<span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s5.play, s6.play);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s5 <span class=\"keyword\">instanceof</span> Child4, s5 <span class=\"keyword\">instanceof</span> Parent4);\t<span class=\"comment\">// true true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s5.constructor);\t<span class=\"comment\">// Parent4</span></span><br><span class=\"line\"><span class=\"comment\">// 因为子类的prototype就是父类的实例，他的constructor是从父类直接拿过来的</span></span><br></pre></td></tr></table></figure>\n<p>父类只在子类实例化时执行一次，将父类的prototype赋给子类。</p>\n<h3 id=\"组合继承的优化2\"><a href=\"#组合继承的优化2\" class=\"headerlink\" title=\"组合继承的优化2\"></a>组合继承的优化2</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent5</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'5'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.play = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child5</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    Parent5.call(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.type = <span class=\"string\">'chilid5'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Child5.prototype = <span class=\"built_in\">Object</span>.create(Parent5.prototype);</span><br><span class=\"line\">Child5.prototype.constructor = Child5;</span><br><span class=\"line\"><span class=\"keyword\">var</span> s5 = <span class=\"keyword\">new</span> Child5();</span><br><span class=\"line\"><span class=\"keyword\">var</span> s6 = <span class=\"keyword\">new</span> Child5();</span><br><span class=\"line\">s5.play.push(<span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s5.play, s6.play);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s5 <span class=\"keyword\">instanceof</span> Child5, s5 <span class=\"keyword\">instanceof</span> Parent5); <span class=\"comment\">// true true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s5.constructor); <span class=\"comment\">// Child5</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"ES6的继承\"><a href=\"#ES6的继承\" class=\"headerlink\" title=\"ES6的继承\"></a>ES6的继承</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// es6继承</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//构造函数，里面写上对象的属性</span></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.name = props.name || <span class=\"string\">'Unknown'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//方法写在后面</span></span><br><span class=\"line\">    eat() &#123;<span class=\"comment\">//父类共有的方法</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">\" will eat pests.\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//class继承</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bird</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//构造函数</span></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(props,myAttribute) &#123;<span class=\"comment\">//props是继承过来的属性，myAttribute是自己的属性</span></span><br><span class=\"line\">      <span class=\"comment\">//调用实现父类的构造函数</span></span><br><span class=\"line\">      <span class=\"keyword\">super</span>(props)<span class=\"comment\">//相当于获得父类的this指向</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.type = props.type || <span class=\"string\">\"Unknown\"</span>;<span class=\"comment\">//父类的属性，也可写在父类中</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.attr = myAttribute;<span class=\"comment\">//自己的私有属性</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    fly() &#123;<span class=\"comment\">//自己私有的方法</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">\" are friendly to people.\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    myattr() &#123;<span class=\"comment\">//自己私有的方法</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.type+<span class=\"string\">'---'</span>+<span class=\"keyword\">this</span>.attr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//通过new实例化</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> myBird = <span class=\"keyword\">new</span> Bird(&#123;</span><br><span class=\"line\">    name: <span class=\"string\">'小燕子'</span>,</span><br><span class=\"line\">    type: <span class=\"string\">'Egg animal'</span><span class=\"comment\">//卵生动物</span></span><br><span class=\"line\">  &#125;,<span class=\"string\">'Bird class'</span>)</span><br><span class=\"line\">  myBird.eat()</span><br><span class=\"line\">  myBird.fly()</span><br><span class=\"line\">  myBird.myattr()</span><br></pre></td></tr></table></figure>"},{"layout":"[post]","title":"meta标签使用总结","date":"2019-03-02T00:06:54.000Z","_content":"## Meta对象\nMeta 对象代表 HTML 的 一个 <meta> 元素。\n\n<meta> 元素可提供有关某个 HTML 元素的元信息 (meta-information)，比如描述、针对搜索引擎的关键词以及刷新频率。\n<!-- more -->\n## meta对象的属性\n\n属性 | 描述\n---|---\ncontent |设置或返回 <meta> 元素的 content 属性的值。\nhttpEquiv| 把 content 属性连接到一个 HTTP 头部。\nname|把 content 属性连接到某个名称。\nscheme|设置或返回用于解释 content 属性的值的格式。\n\n常用的包括 http-equiv搭配content和name搭配content两种。\n\n## name\n### **name可用参数有这些：**\n###  keywords(关键字)\n说明：用于告诉搜索引擎，你网页的关键字\n```html\n<meta name=\"keywords\" content=\"前端,js,css\">\n```\n### description(网站内容的描述)\n说明：用于告诉搜索引擎，你网站的主要内容  \n```html\n<meta name=\"description\" content=\"一个前端网站\">\n```\n\n### viewport(移动端的窗口)\n说明：在用bootstrap,AmazeUI等框架时候都有用过viewport。\n\n```html\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n```\n### robots(定义搜索引擎爬虫的索引方式)\n说明：robots用来告诉爬虫哪些页面需要索引，哪些页面不需要索引。content的参数有all,none,index,noindex,follow,nofollow。默认是all。\n\n```html\n<meta name=\"robots\" content=\"none\">\n```\n具体参数如下：\n\n1. none : 搜索引擎将忽略此网页，等价于noindex，nofollow。\n2. noindex : 搜索引擎不索引此网页。\n3. nofollow: 搜索引擎不继续通过此网页的链接索引搜索其它的网页。\n4. all : 搜索引擎将索引此网页与继续通过此网页的链接索引，等价于index，follow。\n5. index : 搜索引擎索引此网页。\n6. follow : 搜索引擎继续通过此网页的链接索引搜索其它的网页。\n\n### author(作者)\n说明：用于标注网页作者\n\n```html\n<meta name=\"author\" content=\"xxx\">\n```\n### generator(网页制作软件)\n说明：用于标明网页是什么软件做的\n\n```html\n<meta name=\"generator\" content=\"Sublime Text3\">\n```\n### copyright(版权)\n说明：用于标注版权信息\n\n```html\n<meta name=\"copyright\" content=\"xxx\">\n```\n### revisit-after(搜索引擎爬虫重访时间)\n说明：如果页面不是经常更新，为了减轻搜索引擎爬虫对服务器带来的压力，可以设置一个爬虫的重访时间。如果重访时间过短，爬虫将按它们定义的默认时间来访问。\n\n```html\n<meta name=\"revisit-after\" content=\"7 days\" >\n```\n### renderer(双核浏览器渲染方式)\n说明：renderer是为双核浏览器准备的，用于指定双核浏览器默认以何种方式渲染页面。比如说360浏览器。\n\n```html\n<meta name=\"renderer\" content=\"webkit\"> //默认webkit内核\n<meta name=\"renderer\" content=\"ie-comp\"> //默认IE兼容模式\n<meta name=\"renderer\" content=\"ie-stand\"> //默认IE标准模式\n```\n## http-equiv\n### content-Type(设定网页字符集)(推荐使用HTML5的方式)\n说明：用于设定网页字符集，便于浏览器解析与渲染页面举例：\n```html\n<meta http-equiv=\"content-Type\" content=\"text/html;charset=utf-8\">  //旧的HTML，不推荐\n\n<meta charset=\"utf-8\"> //HTML5设定网页字符集的方式，推荐使用UTF-8\n```\n### X-UA-Compatible(浏览器采取何种版本渲染当前页面)\n说明：用于告知浏览器以何种版本来渲染页面。（一般都设置为最新模式，在各大框架中这个设置也很常见。）举例：\n```html\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\"/> //指定IE和Chrome使用最新版本渲染当前页面\n```\n### cache-control(指定请求和响应遵循的缓存机制)\n说明：指导浏览器如何缓存某个响应以及缓存多长时间。\n\n```html\n<meta http-equiv=\"cache-control\" content=\"no-cache\">\n```\n共有以下几种用法：\n\n1. no-cache: 先发送请求，与服务器确认该资源是否被更改，如果未被更改，则使用缓存。\n\n2. no-store: 不允许缓存，每次都要去服务器上，下载完整的响应。（安全措施）\n\n3. public : 缓存所有响应，但并非必须。因为max-age也可以做到相同效果\n\n4. private : 只为单个用户缓存，因此不允许任何中继进行缓存。（比如说CDN就不允许缓存private的响应）\n\n5. maxage : 表示当前请求开始，该响应在多久内能被缓存和重用，而不去服务器重新请求。例如：max-age=60表示响应可以再缓存和重用 60 秒。\n用法2.(禁止百度自动转码)\n说明：用于禁止当前页面在移动端浏览时，被百度自动转码。虽然百度的本意是好的，但是转码效果很多时候却不尽人意。所以可以在head中加入例子中的那句话，就可以避免百度自动转码了。举例：\n\n\n```html\n<meta http-equiv=\"Cache-Control\" content=\"no-siteapp\" />\n```\n### expires(网页到期时间)\n说明:用于设定网页的到期时间，过期后网页必须到服务器上重新传输。\n\n```html\n<meta http-equiv=\"expires\" content=\"Sunday 26 October 2016 01:00 GMT\" />\n```\n### refresh(自动刷新并指向某页面)\n说明：网页将在设定的时间内，自动刷新并调向设定的网址。\n\n```html\n<meta http-equiv=\"refresh\" content=\"2；URL=http://www.baidu.com/\"> //意思是2秒后跳转向baidu\n```\n### Set-Cookie(cookie设定)\n说明：如果网页过期。那么这个网页存在本地的cookies也会被自动删除。\n\n```html\n<meta http-equiv=\"set-cookie\" content=\"runoobcookie=myContent;expires=Fri, 30 Dec 2015 12:00:00 GMT; path=http://www.runoob.com\">\n```\n","source":"_posts/meta标签使用总结.md","raw":"---\nlayout: '[post]'\ntitle: meta标签使用总结\ndate: 2019-03-02 08:06:54\ntags: html\n---\n## Meta对象\nMeta 对象代表 HTML 的 一个 <meta> 元素。\n\n<meta> 元素可提供有关某个 HTML 元素的元信息 (meta-information)，比如描述、针对搜索引擎的关键词以及刷新频率。\n<!-- more -->\n## meta对象的属性\n\n属性 | 描述\n---|---\ncontent |设置或返回 <meta> 元素的 content 属性的值。\nhttpEquiv| 把 content 属性连接到一个 HTTP 头部。\nname|把 content 属性连接到某个名称。\nscheme|设置或返回用于解释 content 属性的值的格式。\n\n常用的包括 http-equiv搭配content和name搭配content两种。\n\n## name\n### **name可用参数有这些：**\n###  keywords(关键字)\n说明：用于告诉搜索引擎，你网页的关键字\n```html\n<meta name=\"keywords\" content=\"前端,js,css\">\n```\n### description(网站内容的描述)\n说明：用于告诉搜索引擎，你网站的主要内容  \n```html\n<meta name=\"description\" content=\"一个前端网站\">\n```\n\n### viewport(移动端的窗口)\n说明：在用bootstrap,AmazeUI等框架时候都有用过viewport。\n\n```html\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n```\n### robots(定义搜索引擎爬虫的索引方式)\n说明：robots用来告诉爬虫哪些页面需要索引，哪些页面不需要索引。content的参数有all,none,index,noindex,follow,nofollow。默认是all。\n\n```html\n<meta name=\"robots\" content=\"none\">\n```\n具体参数如下：\n\n1. none : 搜索引擎将忽略此网页，等价于noindex，nofollow。\n2. noindex : 搜索引擎不索引此网页。\n3. nofollow: 搜索引擎不继续通过此网页的链接索引搜索其它的网页。\n4. all : 搜索引擎将索引此网页与继续通过此网页的链接索引，等价于index，follow。\n5. index : 搜索引擎索引此网页。\n6. follow : 搜索引擎继续通过此网页的链接索引搜索其它的网页。\n\n### author(作者)\n说明：用于标注网页作者\n\n```html\n<meta name=\"author\" content=\"xxx\">\n```\n### generator(网页制作软件)\n说明：用于标明网页是什么软件做的\n\n```html\n<meta name=\"generator\" content=\"Sublime Text3\">\n```\n### copyright(版权)\n说明：用于标注版权信息\n\n```html\n<meta name=\"copyright\" content=\"xxx\">\n```\n### revisit-after(搜索引擎爬虫重访时间)\n说明：如果页面不是经常更新，为了减轻搜索引擎爬虫对服务器带来的压力，可以设置一个爬虫的重访时间。如果重访时间过短，爬虫将按它们定义的默认时间来访问。\n\n```html\n<meta name=\"revisit-after\" content=\"7 days\" >\n```\n### renderer(双核浏览器渲染方式)\n说明：renderer是为双核浏览器准备的，用于指定双核浏览器默认以何种方式渲染页面。比如说360浏览器。\n\n```html\n<meta name=\"renderer\" content=\"webkit\"> //默认webkit内核\n<meta name=\"renderer\" content=\"ie-comp\"> //默认IE兼容模式\n<meta name=\"renderer\" content=\"ie-stand\"> //默认IE标准模式\n```\n## http-equiv\n### content-Type(设定网页字符集)(推荐使用HTML5的方式)\n说明：用于设定网页字符集，便于浏览器解析与渲染页面举例：\n```html\n<meta http-equiv=\"content-Type\" content=\"text/html;charset=utf-8\">  //旧的HTML，不推荐\n\n<meta charset=\"utf-8\"> //HTML5设定网页字符集的方式，推荐使用UTF-8\n```\n### X-UA-Compatible(浏览器采取何种版本渲染当前页面)\n说明：用于告知浏览器以何种版本来渲染页面。（一般都设置为最新模式，在各大框架中这个设置也很常见。）举例：\n```html\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\"/> //指定IE和Chrome使用最新版本渲染当前页面\n```\n### cache-control(指定请求和响应遵循的缓存机制)\n说明：指导浏览器如何缓存某个响应以及缓存多长时间。\n\n```html\n<meta http-equiv=\"cache-control\" content=\"no-cache\">\n```\n共有以下几种用法：\n\n1. no-cache: 先发送请求，与服务器确认该资源是否被更改，如果未被更改，则使用缓存。\n\n2. no-store: 不允许缓存，每次都要去服务器上，下载完整的响应。（安全措施）\n\n3. public : 缓存所有响应，但并非必须。因为max-age也可以做到相同效果\n\n4. private : 只为单个用户缓存，因此不允许任何中继进行缓存。（比如说CDN就不允许缓存private的响应）\n\n5. maxage : 表示当前请求开始，该响应在多久内能被缓存和重用，而不去服务器重新请求。例如：max-age=60表示响应可以再缓存和重用 60 秒。\n用法2.(禁止百度自动转码)\n说明：用于禁止当前页面在移动端浏览时，被百度自动转码。虽然百度的本意是好的，但是转码效果很多时候却不尽人意。所以可以在head中加入例子中的那句话，就可以避免百度自动转码了。举例：\n\n\n```html\n<meta http-equiv=\"Cache-Control\" content=\"no-siteapp\" />\n```\n### expires(网页到期时间)\n说明:用于设定网页的到期时间，过期后网页必须到服务器上重新传输。\n\n```html\n<meta http-equiv=\"expires\" content=\"Sunday 26 October 2016 01:00 GMT\" />\n```\n### refresh(自动刷新并指向某页面)\n说明：网页将在设定的时间内，自动刷新并调向设定的网址。\n\n```html\n<meta http-equiv=\"refresh\" content=\"2；URL=http://www.baidu.com/\"> //意思是2秒后跳转向baidu\n```\n### Set-Cookie(cookie设定)\n说明：如果网页过期。那么这个网页存在本地的cookies也会被自动删除。\n\n```html\n<meta http-equiv=\"set-cookie\" content=\"runoobcookie=myContent;expires=Fri, 30 Dec 2015 12:00:00 GMT; path=http://www.runoob.com\">\n```\n","slug":"meta标签使用总结","published":1,"updated":"2019-03-02T00:07:35.000Z","comments":1,"photos":[],"link":"","_id":"ckbftlm6t001j7w2p57f831f8","content":"<h2 id=\"Meta对象\"><a href=\"#Meta对象\" class=\"headerlink\" title=\"Meta对象\"></a>Meta对象</h2><p>Meta 对象代表 HTML 的 一个 <meta> 元素。</p>\n<meta> 元素可提供有关某个 HTML 元素的元信息 (meta-information)，比如描述、针对搜索引擎的关键词以及刷新频率。\n<a id=\"more\"></a>\n## meta对象的属性\n\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>content</td>\n<td>设置或返回 <meta> 元素的 content 属性的值。</td>\n</tr>\n<tr>\n<td>httpEquiv</td>\n<td>把 content 属性连接到一个 HTTP 头部。</td>\n</tr>\n<tr>\n<td>name</td>\n<td>把 content 属性连接到某个名称。</td>\n</tr>\n<tr>\n<td>scheme</td>\n<td>设置或返回用于解释 content 属性的值的格式。</td>\n</tr>\n</tbody></table>\n<p>常用的包括 http-equiv搭配content和name搭配content两种。</p>\n<h2 id=\"name\"><a href=\"#name\" class=\"headerlink\" title=\"name\"></a>name</h2><h3 id=\"name可用参数有这些：\"><a href=\"#name可用参数有这些：\" class=\"headerlink\" title=\"name可用参数有这些：\"></a><strong>name可用参数有这些：</strong></h3><h3 id=\"keywords-关键字\"><a href=\"#keywords-关键字\" class=\"headerlink\" title=\"keywords(关键字)\"></a>keywords(关键字)</h3><p>说明：用于告诉搜索引擎，你网页的关键字</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"keywords\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"前端,js,css\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"description-网站内容的描述\"><a href=\"#description-网站内容的描述\" class=\"headerlink\" title=\"description(网站内容的描述)\"></a>description(网站内容的描述)</h3><p>说明：用于告诉搜索引擎，你网站的主要内容  </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"description\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"一个前端网站\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"viewport-移动端的窗口\"><a href=\"#viewport-移动端的窗口\" class=\"headerlink\" title=\"viewport(移动端的窗口)\"></a>viewport(移动端的窗口)</h3><p>说明：在用bootstrap,AmazeUI等框架时候都有用过viewport。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"robots-定义搜索引擎爬虫的索引方式\"><a href=\"#robots-定义搜索引擎爬虫的索引方式\" class=\"headerlink\" title=\"robots(定义搜索引擎爬虫的索引方式)\"></a>robots(定义搜索引擎爬虫的索引方式)</h3><p>说明：robots用来告诉爬虫哪些页面需要索引，哪些页面不需要索引。content的参数有all,none,index,noindex,follow,nofollow。默认是all。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"robots\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"none\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>具体参数如下：</p>\n<ol>\n<li>none : 搜索引擎将忽略此网页，等价于noindex，nofollow。</li>\n<li>noindex : 搜索引擎不索引此网页。</li>\n<li>nofollow: 搜索引擎不继续通过此网页的链接索引搜索其它的网页。</li>\n<li>all : 搜索引擎将索引此网页与继续通过此网页的链接索引，等价于index，follow。</li>\n<li>index : 搜索引擎索引此网页。</li>\n<li>follow : 搜索引擎继续通过此网页的链接索引搜索其它的网页。</li>\n</ol>\n<h3 id=\"author-作者\"><a href=\"#author-作者\" class=\"headerlink\" title=\"author(作者)\"></a>author(作者)</h3><p>说明：用于标注网页作者</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"author\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"xxx\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"generator-网页制作软件\"><a href=\"#generator-网页制作软件\" class=\"headerlink\" title=\"generator(网页制作软件)\"></a>generator(网页制作软件)</h3><p>说明：用于标明网页是什么软件做的</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"generator\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"Sublime Text3\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"copyright-版权\"><a href=\"#copyright-版权\" class=\"headerlink\" title=\"copyright(版权)\"></a>copyright(版权)</h3><p>说明：用于标注版权信息</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"copyright\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"xxx\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"revisit-after-搜索引擎爬虫重访时间\"><a href=\"#revisit-after-搜索引擎爬虫重访时间\" class=\"headerlink\" title=\"revisit-after(搜索引擎爬虫重访时间)\"></a>revisit-after(搜索引擎爬虫重访时间)</h3><p>说明：如果页面不是经常更新，为了减轻搜索引擎爬虫对服务器带来的压力，可以设置一个爬虫的重访时间。如果重访时间过短，爬虫将按它们定义的默认时间来访问。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"revisit-after\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"7 days\"</span> &gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"renderer-双核浏览器渲染方式\"><a href=\"#renderer-双核浏览器渲染方式\" class=\"headerlink\" title=\"renderer(双核浏览器渲染方式)\"></a>renderer(双核浏览器渲染方式)</h3><p>说明：renderer是为双核浏览器准备的，用于指定双核浏览器默认以何种方式渲染页面。比如说360浏览器。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"renderer\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"webkit\"</span>&gt;</span> //默认webkit内核</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"renderer\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie-comp\"</span>&gt;</span> //默认IE兼容模式</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"renderer\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie-stand\"</span>&gt;</span> //默认IE标准模式</span><br></pre></td></tr></table></figure>\n<h2 id=\"http-equiv\"><a href=\"#http-equiv\" class=\"headerlink\" title=\"http-equiv\"></a>http-equiv</h2><h3 id=\"content-Type-设定网页字符集-推荐使用HTML5的方式\"><a href=\"#content-Type-设定网页字符集-推荐使用HTML5的方式\" class=\"headerlink\" title=\"content-Type(设定网页字符集)(推荐使用HTML5的方式)\"></a>content-Type(设定网页字符集)(推荐使用HTML5的方式)</h3><p>说明：用于设定网页字符集，便于浏览器解析与渲染页面举例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"content-Type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html;charset=utf-8\"</span>&gt;</span>  //旧的HTML，不推荐</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span> //HTML5设定网页字符集的方式，推荐使用UTF-8</span><br></pre></td></tr></table></figure>\n<h3 id=\"X-UA-Compatible-浏览器采取何种版本渲染当前页面\"><a href=\"#X-UA-Compatible-浏览器采取何种版本渲染当前页面\" class=\"headerlink\" title=\"X-UA-Compatible(浏览器采取何种版本渲染当前页面)\"></a>X-UA-Compatible(浏览器采取何种版本渲染当前页面)</h3><p>说明：用于告知浏览器以何种版本来渲染页面。（一般都设置为最新模式，在各大框架中这个设置也很常见。）举例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=edge,chrome=1\"</span>/&gt;</span> //指定IE和Chrome使用最新版本渲染当前页面</span><br></pre></td></tr></table></figure>\n<h3 id=\"cache-control-指定请求和响应遵循的缓存机制\"><a href=\"#cache-control-指定请求和响应遵循的缓存机制\" class=\"headerlink\" title=\"cache-control(指定请求和响应遵循的缓存机制)\"></a>cache-control(指定请求和响应遵循的缓存机制)</h3><p>说明：指导浏览器如何缓存某个响应以及缓存多长时间。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"cache-control\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"no-cache\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>共有以下几种用法：</p>\n<ol>\n<li><p>no-cache: 先发送请求，与服务器确认该资源是否被更改，如果未被更改，则使用缓存。</p>\n</li>\n<li><p>no-store: 不允许缓存，每次都要去服务器上，下载完整的响应。（安全措施）</p>\n</li>\n<li><p>public : 缓存所有响应，但并非必须。因为max-age也可以做到相同效果</p>\n</li>\n<li><p>private : 只为单个用户缓存，因此不允许任何中继进行缓存。（比如说CDN就不允许缓存private的响应）</p>\n</li>\n<li><p>maxage : 表示当前请求开始，该响应在多久内能被缓存和重用，而不去服务器重新请求。例如：max-age=60表示响应可以再缓存和重用 60 秒。<br>用法2.(禁止百度自动转码)<br>说明：用于禁止当前页面在移动端浏览时，被百度自动转码。虽然百度的本意是好的，但是转码效果很多时候却不尽人意。所以可以在head中加入例子中的那句话，就可以避免百度自动转码了。举例：</p>\n</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Cache-Control\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"no-siteapp\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"expires-网页到期时间\"><a href=\"#expires-网页到期时间\" class=\"headerlink\" title=\"expires(网页到期时间)\"></a>expires(网页到期时间)</h3><p>说明:用于设定网页的到期时间，过期后网页必须到服务器上重新传输。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"expires\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"Sunday 26 October 2016 01:00 GMT\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"refresh-自动刷新并指向某页面\"><a href=\"#refresh-自动刷新并指向某页面\" class=\"headerlink\" title=\"refresh(自动刷新并指向某页面)\"></a>refresh(自动刷新并指向某页面)</h3><p>说明：网页将在设定的时间内，自动刷新并调向设定的网址。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"refresh\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"2；URL=http://www.baidu.com/\"</span>&gt;</span> //意思是2秒后跳转向baidu</span><br></pre></td></tr></table></figure>\n<h3 id=\"Set-Cookie-cookie设定\"><a href=\"#Set-Cookie-cookie设定\" class=\"headerlink\" title=\"Set-Cookie(cookie设定)\"></a>Set-Cookie(cookie设定)</h3><p>说明：如果网页过期。那么这个网页存在本地的cookies也会被自动删除。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"set-cookie\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"runoobcookie=myContent;expires=Fri, 30 Dec 2015 12:00:00 GMT; path=http://www.runoob.com\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"Meta对象\"><a href=\"#Meta对象\" class=\"headerlink\" title=\"Meta对象\"></a>Meta对象</h2><p>Meta 对象代表 HTML 的 一个 <meta> 元素。</p>\n<meta> 元素可提供有关某个 HTML 元素的元信息 (meta-information)，比如描述、针对搜索引擎的关键词以及刷新频率。","more":"## meta对象的属性\n\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>content</td>\n<td>设置或返回 <meta> 元素的 content 属性的值。</td>\n</tr>\n<tr>\n<td>httpEquiv</td>\n<td>把 content 属性连接到一个 HTTP 头部。</td>\n</tr>\n<tr>\n<td>name</td>\n<td>把 content 属性连接到某个名称。</td>\n</tr>\n<tr>\n<td>scheme</td>\n<td>设置或返回用于解释 content 属性的值的格式。</td>\n</tr>\n</tbody></table>\n<p>常用的包括 http-equiv搭配content和name搭配content两种。</p>\n<h2 id=\"name\"><a href=\"#name\" class=\"headerlink\" title=\"name\"></a>name</h2><h3 id=\"name可用参数有这些：\"><a href=\"#name可用参数有这些：\" class=\"headerlink\" title=\"name可用参数有这些：\"></a><strong>name可用参数有这些：</strong></h3><h3 id=\"keywords-关键字\"><a href=\"#keywords-关键字\" class=\"headerlink\" title=\"keywords(关键字)\"></a>keywords(关键字)</h3><p>说明：用于告诉搜索引擎，你网页的关键字</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"keywords\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"前端,js,css\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"description-网站内容的描述\"><a href=\"#description-网站内容的描述\" class=\"headerlink\" title=\"description(网站内容的描述)\"></a>description(网站内容的描述)</h3><p>说明：用于告诉搜索引擎，你网站的主要内容  </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"description\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"一个前端网站\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"viewport-移动端的窗口\"><a href=\"#viewport-移动端的窗口\" class=\"headerlink\" title=\"viewport(移动端的窗口)\"></a>viewport(移动端的窗口)</h3><p>说明：在用bootstrap,AmazeUI等框架时候都有用过viewport。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"robots-定义搜索引擎爬虫的索引方式\"><a href=\"#robots-定义搜索引擎爬虫的索引方式\" class=\"headerlink\" title=\"robots(定义搜索引擎爬虫的索引方式)\"></a>robots(定义搜索引擎爬虫的索引方式)</h3><p>说明：robots用来告诉爬虫哪些页面需要索引，哪些页面不需要索引。content的参数有all,none,index,noindex,follow,nofollow。默认是all。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"robots\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"none\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>具体参数如下：</p>\n<ol>\n<li>none : 搜索引擎将忽略此网页，等价于noindex，nofollow。</li>\n<li>noindex : 搜索引擎不索引此网页。</li>\n<li>nofollow: 搜索引擎不继续通过此网页的链接索引搜索其它的网页。</li>\n<li>all : 搜索引擎将索引此网页与继续通过此网页的链接索引，等价于index，follow。</li>\n<li>index : 搜索引擎索引此网页。</li>\n<li>follow : 搜索引擎继续通过此网页的链接索引搜索其它的网页。</li>\n</ol>\n<h3 id=\"author-作者\"><a href=\"#author-作者\" class=\"headerlink\" title=\"author(作者)\"></a>author(作者)</h3><p>说明：用于标注网页作者</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"author\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"xxx\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"generator-网页制作软件\"><a href=\"#generator-网页制作软件\" class=\"headerlink\" title=\"generator(网页制作软件)\"></a>generator(网页制作软件)</h3><p>说明：用于标明网页是什么软件做的</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"generator\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"Sublime Text3\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"copyright-版权\"><a href=\"#copyright-版权\" class=\"headerlink\" title=\"copyright(版权)\"></a>copyright(版权)</h3><p>说明：用于标注版权信息</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"copyright\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"xxx\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"revisit-after-搜索引擎爬虫重访时间\"><a href=\"#revisit-after-搜索引擎爬虫重访时间\" class=\"headerlink\" title=\"revisit-after(搜索引擎爬虫重访时间)\"></a>revisit-after(搜索引擎爬虫重访时间)</h3><p>说明：如果页面不是经常更新，为了减轻搜索引擎爬虫对服务器带来的压力，可以设置一个爬虫的重访时间。如果重访时间过短，爬虫将按它们定义的默认时间来访问。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"revisit-after\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"7 days\"</span> &gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"renderer-双核浏览器渲染方式\"><a href=\"#renderer-双核浏览器渲染方式\" class=\"headerlink\" title=\"renderer(双核浏览器渲染方式)\"></a>renderer(双核浏览器渲染方式)</h3><p>说明：renderer是为双核浏览器准备的，用于指定双核浏览器默认以何种方式渲染页面。比如说360浏览器。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"renderer\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"webkit\"</span>&gt;</span> //默认webkit内核</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"renderer\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie-comp\"</span>&gt;</span> //默认IE兼容模式</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"renderer\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie-stand\"</span>&gt;</span> //默认IE标准模式</span><br></pre></td></tr></table></figure>\n<h2 id=\"http-equiv\"><a href=\"#http-equiv\" class=\"headerlink\" title=\"http-equiv\"></a>http-equiv</h2><h3 id=\"content-Type-设定网页字符集-推荐使用HTML5的方式\"><a href=\"#content-Type-设定网页字符集-推荐使用HTML5的方式\" class=\"headerlink\" title=\"content-Type(设定网页字符集)(推荐使用HTML5的方式)\"></a>content-Type(设定网页字符集)(推荐使用HTML5的方式)</h3><p>说明：用于设定网页字符集，便于浏览器解析与渲染页面举例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"content-Type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html;charset=utf-8\"</span>&gt;</span>  //旧的HTML，不推荐</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span> //HTML5设定网页字符集的方式，推荐使用UTF-8</span><br></pre></td></tr></table></figure>\n<h3 id=\"X-UA-Compatible-浏览器采取何种版本渲染当前页面\"><a href=\"#X-UA-Compatible-浏览器采取何种版本渲染当前页面\" class=\"headerlink\" title=\"X-UA-Compatible(浏览器采取何种版本渲染当前页面)\"></a>X-UA-Compatible(浏览器采取何种版本渲染当前页面)</h3><p>说明：用于告知浏览器以何种版本来渲染页面。（一般都设置为最新模式，在各大框架中这个设置也很常见。）举例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=edge,chrome=1\"</span>/&gt;</span> //指定IE和Chrome使用最新版本渲染当前页面</span><br></pre></td></tr></table></figure>\n<h3 id=\"cache-control-指定请求和响应遵循的缓存机制\"><a href=\"#cache-control-指定请求和响应遵循的缓存机制\" class=\"headerlink\" title=\"cache-control(指定请求和响应遵循的缓存机制)\"></a>cache-control(指定请求和响应遵循的缓存机制)</h3><p>说明：指导浏览器如何缓存某个响应以及缓存多长时间。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"cache-control\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"no-cache\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>共有以下几种用法：</p>\n<ol>\n<li><p>no-cache: 先发送请求，与服务器确认该资源是否被更改，如果未被更改，则使用缓存。</p>\n</li>\n<li><p>no-store: 不允许缓存，每次都要去服务器上，下载完整的响应。（安全措施）</p>\n</li>\n<li><p>public : 缓存所有响应，但并非必须。因为max-age也可以做到相同效果</p>\n</li>\n<li><p>private : 只为单个用户缓存，因此不允许任何中继进行缓存。（比如说CDN就不允许缓存private的响应）</p>\n</li>\n<li><p>maxage : 表示当前请求开始，该响应在多久内能被缓存和重用，而不去服务器重新请求。例如：max-age=60表示响应可以再缓存和重用 60 秒。<br>用法2.(禁止百度自动转码)<br>说明：用于禁止当前页面在移动端浏览时，被百度自动转码。虽然百度的本意是好的，但是转码效果很多时候却不尽人意。所以可以在head中加入例子中的那句话，就可以避免百度自动转码了。举例：</p>\n</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Cache-Control\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"no-siteapp\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"expires-网页到期时间\"><a href=\"#expires-网页到期时间\" class=\"headerlink\" title=\"expires(网页到期时间)\"></a>expires(网页到期时间)</h3><p>说明:用于设定网页的到期时间，过期后网页必须到服务器上重新传输。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"expires\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"Sunday 26 October 2016 01:00 GMT\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"refresh-自动刷新并指向某页面\"><a href=\"#refresh-自动刷新并指向某页面\" class=\"headerlink\" title=\"refresh(自动刷新并指向某页面)\"></a>refresh(自动刷新并指向某页面)</h3><p>说明：网页将在设定的时间内，自动刷新并调向设定的网址。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"refresh\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"2；URL=http://www.baidu.com/\"</span>&gt;</span> //意思是2秒后跳转向baidu</span><br></pre></td></tr></table></figure>\n<h3 id=\"Set-Cookie-cookie设定\"><a href=\"#Set-Cookie-cookie设定\" class=\"headerlink\" title=\"Set-Cookie(cookie设定)\"></a>Set-Cookie(cookie设定)</h3><p>说明：如果网页过期。那么这个网页存在本地的cookies也会被自动删除。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"set-cookie\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"runoobcookie=myContent;expires=Fri, 30 Dec 2015 12:00:00 GMT; path=http://www.runoob.com\"</span>&gt;</span></span><br></pre></td></tr></table></figure>"},{"layout":"[post]","title":"tree-shaking","date":"2020-05-03T07:56:04.000Z","_content":"_tree shaking_ 是一个术语，通常用于描述移除 JavaScript 上下文中的未引用代码 (dead-code)。它依赖于 ES2015 模块语法的 [静态结构](http://exploringjs.com/es6/ch_modules.html#static-module-structure) 特性，例如 [`import`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import) 和 [`export`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export)。这个术语和概念实际上是由 ES2015 模块打包工具 [rollup](https://github.com/rollup/rollup) 普及起来的。\n<!-- more -->\nwebpack 2 正式版本内置支持 ES2015 模块（也叫做 _harmony modules_）和未使用模块检测能力。新的 webpack 4 正式版本扩展了此检测能力，通过 `package.json` 的 `\"sideEffects\"` 属性作为标记，向 compiler 提供提示，表明项目中的哪些文件是 \"pure(纯的 ES2015 模块)\"，由此可以安全地删除文件中未使用的部分。\n\n> 本指南的继承自 [起步](https://webpack.docschina.org/guides/getting-started) 指南。如果你尚未阅读该指南，请先行阅读。\n\n在我们的项目中添加一个新的通用模块文件 `src/math.js`，并导出两个函数：\n\n**project**\n\n```\nwebpack-demo\n|- package.json\n|- webpack.config.js\n|- /dist\n  |- bundle.js\n  |- index.html\n|- /src\n  |- index.js\n+ |- math.js\n|- /node_modules\n```\n\n**src/math.js**\n\n```js\nexport function square(x) {\n  return x * x;\n}\n\nexport function cube(x) {\n  return x * x * x;\n}\n```\n\n将 `mode` 配置选项设置为 [development](https://webpack.docschina.org/concepts/mode/#mode-development) 以确保 bundle 是未压缩版本：\n\n**webpack.config.js**\n\n```js\nconst path = require('path');\n\nmodule.exports = {\n  entry: './src/index.js',\n  output: {\n    filename: 'bundle.js',\n    path: path.resolve(__dirname, 'dist')\n- }\n+ },\n+ mode: 'development',\n+ optimization: {\n+   usedExports: true\n+ }\n};\n```\n\n配置完这些后，更新入口脚本，使用其中一个新方法，并且为了简化示例，我们先将 `lodash` 删除：\n\n**src/index.js**\n\n```js\n- import _ from 'lodash';\n+ import { cube } from './math.js';\n\n  function component() {\n-   var element = document.createElement('div');\n+   var element = document.createElement('pre');\n\n-   // lodash 是由当前 script 脚本 import 进来的\n-   element.innerHTML = _.join(['Hello', 'webpack'], ' ');\n+   element.innerHTML = [\n+     'Hello webpack!',\n+     '5 cubed is equal to ' + cube(5)\n+   ].join('\\n\\n');\n\n    return element;\n  }\n\n  document.body.appendChild(component());\n```\n\n注意，我们**没有从 `src/math.js` 模块中 `import` 另外一个 `square` 方法**。这个函数就是所谓的 “未引用代码 (dead code)”，也就是说，应该删除掉未被引用的 `export`。现在运行 npm script `npm run build`，并查看输出的 bundle：\n\n**dist/bundle.js (around lines 90 - 100)**\n\n```js\n(function(module, __webpack_exports__, __webpack_require__) {\n  'use strict';\n  \n   __webpack_exports__['a'] = cube;\n  function square(x) {\n    return x * x;\n  }\n\n  function cube(x) {\n    return x * x * x;\n  }\n});\n```\n\n注意，上面的 `unused harmony export square` 注释。如果你观察它下面的代码，你会注意到虽然我们没有引用 `square`，但它仍然被包含在 bundle 中。我们将在下一节解决这个问题。\n\n在一个纯粹的 ESM 模块世界中，很容易识别出哪些文件有 side effect。然而，我们的项目无法达到这种纯度，所以，此时有必要提示 webpack compiler 哪些代码是 “纯粹部分”。\n\n通过 package.json 的 `\"sideEffects\"` 属性，来实现这种方式。\n\n```json\n{\n  \"name\": \"your-project\",\n  \"sideEffects\": false\n}\n```\n\n如果所有代码都不包含 side effect，我们就可以简单地将该属性标记为 `false`，来告知 webpack，它可以安全地删除未用到的 export。\n\n> \"side effect(副作用)\" 的定义是，在导入时会执行特殊行为的代码，而不是仅仅暴露一个 export 或多个 export。举例说明，例如 polyfill，它影响全局作用域，并且通常不提供 export。\n\n如果你的代码确实有一些副作用，可以改为提供一个数组：\n\n```json\n{\n  \"name\": \"your-project\",\n  \"sideEffects\": [\n    \"./src/some-side-effectful-file.js\"\n  ]\n}\n```\n\n数组方式支持相对路径、绝对路径和 glob 模式匹配相关文件。它在内部使用 [micromatch](https://github.com/micromatch/micromatch#matching-features)。\n\n> 注意，所有导入文件都会受到 tree shaking 的影响。这意味着，如果在项目中使用类似 `css-loader` 并 import 一个 CSS 文件，则需要将其添加到 side effect 列表中，以免在生产模式中无意中将它删除：\n\n```json\n{\n  \"name\": \"your-project\",\n  \"sideEffects\": [\n    \"./src/some-side-effectful-file.js\",\n    \"*.css\"\n  ]\n}\n```\n\n最后，还可以在 [`module.rules` 配置选项](https://webpack.docschina.org/configuration/module/#module-rules) 中设置 `\"sideEffects\"`。\n\n通过 `import` 和 `export` 语法，我们已经找出需要删除的 “未引用代码 (dead code)”，然而，不仅仅是要找出，还要在 bundle 中删除它们。为此，我们需要将 `mode` 配置选项设置为 [`production`](https://webpack.docschina.org/concepts/mode/#mode-production)。\n\n**webpack.config.js**\n\n```js\nconst path = require('path');\n\nmodule.exports = {\n  entry: './src/index.js',\n  output: {\n    filename: 'bundle.js',\n    path: path.resolve(__dirname, 'dist')\n  },\n- mode: 'development',\n- optimization: {\n-   usedExports: true\n- }\n+ mode: 'production'\n};\n```\n\n> 注意，也可以在命令行接口中使用 `--optimize-minimize` 标记，来启用 `TerserPlugin`。\n\n准备就绪后，然后运行另一个 npm script `npm run build`，看看输出结果是否发生改变。\n\n你发现 `dist/bundle.js` 中的差异了吗？显然，现在整个 bundle 都已经被 minify(压缩) 和 mangle(混淆破坏)，但是如果仔细观察，则不会看到引入 `square` 函数，但能看到 `cube` 函数的混淆破坏版本（`function r(e){return e*e*e}n.a=r`）。现在，随着 minification(代码压缩) 和 tree shaking，我们的 bundle 减小几个字节！虽然，在这个特定示例中，可能看起来没有减少很多，但是，在有着复杂依赖树的大型应用程序上运行 tree shaking 时，会对 bundle 产生显著的体积优化。\n\n> 运行 tree shaking 需要 [ModuleConcatenationPlugin](https://webpack.docschina.org/plugins/module-concatenation-plugin)。通过 `mode: \"production\"` 可以添加此插件。如果你没有使用 mode 设置，记得手动添加 [ModuleConcatenationPlugin](https://webpack.docschina.org/plugins/module-concatenation-plugin)。\n\n我们已经知道，想要使用 _tree shaking_ 必须注意以下……\n\n*   使用 ES2015 模块语法（即 `import` 和 `export`）。\n*   确保没有 compiler 将 ES2015 模块语法转换为 CommonJS 模块（这也是流行的 Babel preset 中 @babel/preset-env 的默认行为 - 更多详细信息请查看 [文档](https://babel.docschina.org/docs/en/babel-preset-env#modules)）。\n*   在项目 `package.json` 文件中，添加一个 \"sideEffects\" 属性。\n*   通过将 `mode` 选项设置为 [`production`](https://webpack.docschina.org/concepts/mode/#mode-production)，启用 minification(代码压缩) 和 tree shaking。\n\n你可以将应用程序想象成一棵树。绿色表示实际用到的 source code(源码) 和 library(库)，是树上活的树叶。灰色表示未引用代码，是秋天树上枯萎的树叶。为了除去死去的树叶，你必须摇动这棵树，使它们落下。\n\n如果你对优化输出很感兴趣，请进入到下个指南，来了解 [生产环境](https://webpack.docschina.org/guides/production) 构建的详细细节。","source":"_posts/tree-shaking.md","raw":"---\nlayout: '[post]'\ntitle: tree-shaking\ndate: 2020-05-03 15:56:04\ntags: webpack\n---\n_tree shaking_ 是一个术语，通常用于描述移除 JavaScript 上下文中的未引用代码 (dead-code)。它依赖于 ES2015 模块语法的 [静态结构](http://exploringjs.com/es6/ch_modules.html#static-module-structure) 特性，例如 [`import`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import) 和 [`export`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export)。这个术语和概念实际上是由 ES2015 模块打包工具 [rollup](https://github.com/rollup/rollup) 普及起来的。\n<!-- more -->\nwebpack 2 正式版本内置支持 ES2015 模块（也叫做 _harmony modules_）和未使用模块检测能力。新的 webpack 4 正式版本扩展了此检测能力，通过 `package.json` 的 `\"sideEffects\"` 属性作为标记，向 compiler 提供提示，表明项目中的哪些文件是 \"pure(纯的 ES2015 模块)\"，由此可以安全地删除文件中未使用的部分。\n\n> 本指南的继承自 [起步](https://webpack.docschina.org/guides/getting-started) 指南。如果你尚未阅读该指南，请先行阅读。\n\n在我们的项目中添加一个新的通用模块文件 `src/math.js`，并导出两个函数：\n\n**project**\n\n```\nwebpack-demo\n|- package.json\n|- webpack.config.js\n|- /dist\n  |- bundle.js\n  |- index.html\n|- /src\n  |- index.js\n+ |- math.js\n|- /node_modules\n```\n\n**src/math.js**\n\n```js\nexport function square(x) {\n  return x * x;\n}\n\nexport function cube(x) {\n  return x * x * x;\n}\n```\n\n将 `mode` 配置选项设置为 [development](https://webpack.docschina.org/concepts/mode/#mode-development) 以确保 bundle 是未压缩版本：\n\n**webpack.config.js**\n\n```js\nconst path = require('path');\n\nmodule.exports = {\n  entry: './src/index.js',\n  output: {\n    filename: 'bundle.js',\n    path: path.resolve(__dirname, 'dist')\n- }\n+ },\n+ mode: 'development',\n+ optimization: {\n+   usedExports: true\n+ }\n};\n```\n\n配置完这些后，更新入口脚本，使用其中一个新方法，并且为了简化示例，我们先将 `lodash` 删除：\n\n**src/index.js**\n\n```js\n- import _ from 'lodash';\n+ import { cube } from './math.js';\n\n  function component() {\n-   var element = document.createElement('div');\n+   var element = document.createElement('pre');\n\n-   // lodash 是由当前 script 脚本 import 进来的\n-   element.innerHTML = _.join(['Hello', 'webpack'], ' ');\n+   element.innerHTML = [\n+     'Hello webpack!',\n+     '5 cubed is equal to ' + cube(5)\n+   ].join('\\n\\n');\n\n    return element;\n  }\n\n  document.body.appendChild(component());\n```\n\n注意，我们**没有从 `src/math.js` 模块中 `import` 另外一个 `square` 方法**。这个函数就是所谓的 “未引用代码 (dead code)”，也就是说，应该删除掉未被引用的 `export`。现在运行 npm script `npm run build`，并查看输出的 bundle：\n\n**dist/bundle.js (around lines 90 - 100)**\n\n```js\n(function(module, __webpack_exports__, __webpack_require__) {\n  'use strict';\n  \n   __webpack_exports__['a'] = cube;\n  function square(x) {\n    return x * x;\n  }\n\n  function cube(x) {\n    return x * x * x;\n  }\n});\n```\n\n注意，上面的 `unused harmony export square` 注释。如果你观察它下面的代码，你会注意到虽然我们没有引用 `square`，但它仍然被包含在 bundle 中。我们将在下一节解决这个问题。\n\n在一个纯粹的 ESM 模块世界中，很容易识别出哪些文件有 side effect。然而，我们的项目无法达到这种纯度，所以，此时有必要提示 webpack compiler 哪些代码是 “纯粹部分”。\n\n通过 package.json 的 `\"sideEffects\"` 属性，来实现这种方式。\n\n```json\n{\n  \"name\": \"your-project\",\n  \"sideEffects\": false\n}\n```\n\n如果所有代码都不包含 side effect，我们就可以简单地将该属性标记为 `false`，来告知 webpack，它可以安全地删除未用到的 export。\n\n> \"side effect(副作用)\" 的定义是，在导入时会执行特殊行为的代码，而不是仅仅暴露一个 export 或多个 export。举例说明，例如 polyfill，它影响全局作用域，并且通常不提供 export。\n\n如果你的代码确实有一些副作用，可以改为提供一个数组：\n\n```json\n{\n  \"name\": \"your-project\",\n  \"sideEffects\": [\n    \"./src/some-side-effectful-file.js\"\n  ]\n}\n```\n\n数组方式支持相对路径、绝对路径和 glob 模式匹配相关文件。它在内部使用 [micromatch](https://github.com/micromatch/micromatch#matching-features)。\n\n> 注意，所有导入文件都会受到 tree shaking 的影响。这意味着，如果在项目中使用类似 `css-loader` 并 import 一个 CSS 文件，则需要将其添加到 side effect 列表中，以免在生产模式中无意中将它删除：\n\n```json\n{\n  \"name\": \"your-project\",\n  \"sideEffects\": [\n    \"./src/some-side-effectful-file.js\",\n    \"*.css\"\n  ]\n}\n```\n\n最后，还可以在 [`module.rules` 配置选项](https://webpack.docschina.org/configuration/module/#module-rules) 中设置 `\"sideEffects\"`。\n\n通过 `import` 和 `export` 语法，我们已经找出需要删除的 “未引用代码 (dead code)”，然而，不仅仅是要找出，还要在 bundle 中删除它们。为此，我们需要将 `mode` 配置选项设置为 [`production`](https://webpack.docschina.org/concepts/mode/#mode-production)。\n\n**webpack.config.js**\n\n```js\nconst path = require('path');\n\nmodule.exports = {\n  entry: './src/index.js',\n  output: {\n    filename: 'bundle.js',\n    path: path.resolve(__dirname, 'dist')\n  },\n- mode: 'development',\n- optimization: {\n-   usedExports: true\n- }\n+ mode: 'production'\n};\n```\n\n> 注意，也可以在命令行接口中使用 `--optimize-minimize` 标记，来启用 `TerserPlugin`。\n\n准备就绪后，然后运行另一个 npm script `npm run build`，看看输出结果是否发生改变。\n\n你发现 `dist/bundle.js` 中的差异了吗？显然，现在整个 bundle 都已经被 minify(压缩) 和 mangle(混淆破坏)，但是如果仔细观察，则不会看到引入 `square` 函数，但能看到 `cube` 函数的混淆破坏版本（`function r(e){return e*e*e}n.a=r`）。现在，随着 minification(代码压缩) 和 tree shaking，我们的 bundle 减小几个字节！虽然，在这个特定示例中，可能看起来没有减少很多，但是，在有着复杂依赖树的大型应用程序上运行 tree shaking 时，会对 bundle 产生显著的体积优化。\n\n> 运行 tree shaking 需要 [ModuleConcatenationPlugin](https://webpack.docschina.org/plugins/module-concatenation-plugin)。通过 `mode: \"production\"` 可以添加此插件。如果你没有使用 mode 设置，记得手动添加 [ModuleConcatenationPlugin](https://webpack.docschina.org/plugins/module-concatenation-plugin)。\n\n我们已经知道，想要使用 _tree shaking_ 必须注意以下……\n\n*   使用 ES2015 模块语法（即 `import` 和 `export`）。\n*   确保没有 compiler 将 ES2015 模块语法转换为 CommonJS 模块（这也是流行的 Babel preset 中 @babel/preset-env 的默认行为 - 更多详细信息请查看 [文档](https://babel.docschina.org/docs/en/babel-preset-env#modules)）。\n*   在项目 `package.json` 文件中，添加一个 \"sideEffects\" 属性。\n*   通过将 `mode` 选项设置为 [`production`](https://webpack.docschina.org/concepts/mode/#mode-production)，启用 minification(代码压缩) 和 tree shaking。\n\n你可以将应用程序想象成一棵树。绿色表示实际用到的 source code(源码) 和 library(库)，是树上活的树叶。灰色表示未引用代码，是秋天树上枯萎的树叶。为了除去死去的树叶，你必须摇动这棵树，使它们落下。\n\n如果你对优化输出很感兴趣，请进入到下个指南，来了解 [生产环境](https://webpack.docschina.org/guides/production) 构建的详细细节。","slug":"tree-shaking","published":1,"updated":"2020-05-25T07:57:25.000Z","comments":1,"photos":[],"link":"","_id":"ckbftlm6w001l7w2p1ywhb1xi","content":"<p><em>tree shaking</em> 是一个术语，通常用于描述移除 JavaScript 上下文中的未引用代码 (dead-code)。它依赖于 ES2015 模块语法的 <a href=\"http://exploringjs.com/es6/ch_modules.html#static-module-structure\" target=\"_blank\" rel=\"noopener\">静态结构</a> 特性，例如 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import\" target=\"_blank\" rel=\"noopener\"><code>import</code></a> 和 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export\" target=\"_blank\" rel=\"noopener\"><code>export</code></a>。这个术语和概念实际上是由 ES2015 模块打包工具 <a href=\"https://github.com/rollup/rollup\" target=\"_blank\" rel=\"noopener\">rollup</a> 普及起来的。</p>\n<a id=\"more\"></a>\n<p>webpack 2 正式版本内置支持 ES2015 模块（也叫做 _harmony modules_）和未使用模块检测能力。新的 webpack 4 正式版本扩展了此检测能力，通过 <code>package.json</code> 的 <code>&quot;sideEffects&quot;</code> 属性作为标记，向 compiler 提供提示，表明项目中的哪些文件是 “pure(纯的 ES2015 模块)”，由此可以安全地删除文件中未使用的部分。</p>\n<blockquote>\n<p>本指南的继承自 <a href=\"https://webpack.docschina.org/guides/getting-started\" target=\"_blank\" rel=\"noopener\">起步</a> 指南。如果你尚未阅读该指南，请先行阅读。</p>\n</blockquote>\n<p>在我们的项目中添加一个新的通用模块文件 <code>src/math.js</code>，并导出两个函数：</p>\n<p><strong>project</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack-demo</span><br><span class=\"line\">|- package.json</span><br><span class=\"line\">|- webpack.config.js</span><br><span class=\"line\">|- &#x2F;dist</span><br><span class=\"line\">  |- bundle.js</span><br><span class=\"line\">  |- index.html</span><br><span class=\"line\">|- &#x2F;src</span><br><span class=\"line\">  |- index.js</span><br><span class=\"line\">+ |- math.js</span><br><span class=\"line\">|- &#x2F;node_modules</span><br></pre></td></tr></table></figure>\n\n<p><strong>src/math.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">square</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x * x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cube</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x * x * x;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>将 <code>mode</code> 配置选项设置为 <a href=\"https://webpack.docschina.org/concepts/mode/#mode-development\" target=\"_blank\" rel=\"noopener\">development</a> 以确保 bundle 是未压缩版本：</p>\n<p><strong>webpack.config.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">'bundle.js'</span>,</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'dist'</span>)</span><br><span class=\"line\">- &#125;</span><br><span class=\"line\">+ &#125;,</span><br><span class=\"line\">+ mode: <span class=\"string\">'development'</span>,</span><br><span class=\"line\">+ optimization: &#123;</span><br><span class=\"line\">+   usedExports: <span class=\"literal\">true</span></span><br><span class=\"line\">+ &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>配置完这些后，更新入口脚本，使用其中一个新方法，并且为了简化示例，我们先将 <code>lodash</code> 删除：</p>\n<p><strong>src/index.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- <span class=\"keyword\">import</span> _ <span class=\"keyword\">from</span> <span class=\"string\">'lodash'</span>;</span><br><span class=\"line\">+ <span class=\"keyword\">import</span> &#123; cube &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./math.js'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">component</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">-   <span class=\"keyword\">var</span> element = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</span><br><span class=\"line\">+   <span class=\"keyword\">var</span> element = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'pre'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">-   <span class=\"comment\">// lodash 是由当前 script 脚本 import 进来的</span></span><br><span class=\"line\">-   element.innerHTML = _.join([<span class=\"string\">'Hello'</span>, <span class=\"string\">'webpack'</span>], <span class=\"string\">' '</span>);</span><br><span class=\"line\">+   element.innerHTML = [</span><br><span class=\"line\">+     <span class=\"string\">'Hello webpack!'</span>,</span><br><span class=\"line\">+     <span class=\"string\">'5 cubed is equal to '</span> + cube(<span class=\"number\">5</span>)</span><br><span class=\"line\">+   ].join(<span class=\"string\">'\\n\\n'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> element;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">document</span>.body.appendChild(component());</span><br></pre></td></tr></table></figure>\n\n<p>注意，我们<strong>没有从 <code>src/math.js</code> 模块中 <code>import</code> 另外一个 <code>square</code> 方法</strong>。这个函数就是所谓的 “未引用代码 (dead code)”，也就是说，应该删除掉未被引用的 <code>export</code>。现在运行 npm script <code>npm run build</code>，并查看输出的 bundle：</p>\n<p><strong>dist/bundle.js (around lines 90 - 100)</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module, __webpack_exports__, __webpack_require__</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">  'use strict'</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">   __webpack_exports__[<span class=\"string\">'a'</span>] = cube;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">square</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x * x;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cube</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x * x * x;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>注意，上面的 <code>unused harmony export square</code> 注释。如果你观察它下面的代码，你会注意到虽然我们没有引用 <code>square</code>，但它仍然被包含在 bundle 中。我们将在下一节解决这个问题。</p>\n<p>在一个纯粹的 ESM 模块世界中，很容易识别出哪些文件有 side effect。然而，我们的项目无法达到这种纯度，所以，此时有必要提示 webpack compiler 哪些代码是 “纯粹部分”。</p>\n<p>通过 package.json 的 <code>&quot;sideEffects&quot;</code> 属性，来实现这种方式。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"your-project\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"sideEffects\"</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果所有代码都不包含 side effect，我们就可以简单地将该属性标记为 <code>false</code>，来告知 webpack，它可以安全地删除未用到的 export。</p>\n<blockquote>\n<p>“side effect(副作用)” 的定义是，在导入时会执行特殊行为的代码，而不是仅仅暴露一个 export 或多个 export。举例说明，例如 polyfill，它影响全局作用域，并且通常不提供 export。</p>\n</blockquote>\n<p>如果你的代码确实有一些副作用，可以改为提供一个数组：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"your-project\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"sideEffects\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"./src/some-side-effectful-file.js\"</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>数组方式支持相对路径、绝对路径和 glob 模式匹配相关文件。它在内部使用 <a href=\"https://github.com/micromatch/micromatch#matching-features\" target=\"_blank\" rel=\"noopener\">micromatch</a>。</p>\n<blockquote>\n<p>注意，所有导入文件都会受到 tree shaking 的影响。这意味着，如果在项目中使用类似 <code>css-loader</code> 并 import 一个 CSS 文件，则需要将其添加到 side effect 列表中，以免在生产模式中无意中将它删除：</p>\n</blockquote>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"your-project\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"sideEffects\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"./src/some-side-effectful-file.js\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"*.css\"</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最后，还可以在 <a href=\"https://webpack.docschina.org/configuration/module/#module-rules\" target=\"_blank\" rel=\"noopener\"><code>module.rules</code> 配置选项</a> 中设置 <code>&quot;sideEffects&quot;</code>。</p>\n<p>通过 <code>import</code> 和 <code>export</code> 语法，我们已经找出需要删除的 “未引用代码 (dead code)”，然而，不仅仅是要找出，还要在 bundle 中删除它们。为此，我们需要将 <code>mode</code> 配置选项设置为 <a href=\"https://webpack.docschina.org/concepts/mode/#mode-production\" target=\"_blank\" rel=\"noopener\"><code>production</code></a>。</p>\n<p><strong>webpack.config.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">'bundle.js'</span>,</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'dist'</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">- mode: <span class=\"string\">'development'</span>,</span><br><span class=\"line\">- optimization: &#123;</span><br><span class=\"line\">-   usedExports: <span class=\"literal\">true</span></span><br><span class=\"line\">- &#125;</span><br><span class=\"line\">+ mode: <span class=\"string\">'production'</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意，也可以在命令行接口中使用 <code>--optimize-minimize</code> 标记，来启用 <code>TerserPlugin</code>。</p>\n</blockquote>\n<p>准备就绪后，然后运行另一个 npm script <code>npm run build</code>，看看输出结果是否发生改变。</p>\n<p>你发现 <code>dist/bundle.js</code> 中的差异了吗？显然，现在整个 bundle 都已经被 minify(压缩) 和 mangle(混淆破坏)，但是如果仔细观察，则不会看到引入 <code>square</code> 函数，但能看到 <code>cube</code> 函数的混淆破坏版本（<code>function r(e){return e*e*e}n.a=r</code>）。现在，随着 minification(代码压缩) 和 tree shaking，我们的 bundle 减小几个字节！虽然，在这个特定示例中，可能看起来没有减少很多，但是，在有着复杂依赖树的大型应用程序上运行 tree shaking 时，会对 bundle 产生显著的体积优化。</p>\n<blockquote>\n<p>运行 tree shaking 需要 <a href=\"https://webpack.docschina.org/plugins/module-concatenation-plugin\" target=\"_blank\" rel=\"noopener\">ModuleConcatenationPlugin</a>。通过 <code>mode: &quot;production&quot;</code> 可以添加此插件。如果你没有使用 mode 设置，记得手动添加 <a href=\"https://webpack.docschina.org/plugins/module-concatenation-plugin\" target=\"_blank\" rel=\"noopener\">ModuleConcatenationPlugin</a>。</p>\n</blockquote>\n<p>我们已经知道，想要使用 <em>tree shaking</em> 必须注意以下……</p>\n<ul>\n<li>使用 ES2015 模块语法（即 <code>import</code> 和 <code>export</code>）。</li>\n<li>确保没有 compiler 将 ES2015 模块语法转换为 CommonJS 模块（这也是流行的 Babel preset 中 @babel/preset-env 的默认行为 - 更多详细信息请查看 <a href=\"https://babel.docschina.org/docs/en/babel-preset-env#modules\" target=\"_blank\" rel=\"noopener\">文档</a>）。</li>\n<li>在项目 <code>package.json</code> 文件中，添加一个 “sideEffects” 属性。</li>\n<li>通过将 <code>mode</code> 选项设置为 <a href=\"https://webpack.docschina.org/concepts/mode/#mode-production\" target=\"_blank\" rel=\"noopener\"><code>production</code></a>，启用 minification(代码压缩) 和 tree shaking。</li>\n</ul>\n<p>你可以将应用程序想象成一棵树。绿色表示实际用到的 source code(源码) 和 library(库)，是树上活的树叶。灰色表示未引用代码，是秋天树上枯萎的树叶。为了除去死去的树叶，你必须摇动这棵树，使它们落下。</p>\n<p>如果你对优化输出很感兴趣，请进入到下个指南，来了解 <a href=\"https://webpack.docschina.org/guides/production\" target=\"_blank\" rel=\"noopener\">生产环境</a> 构建的详细细节。</p>\n","site":{"data":{}},"excerpt":"<p><em>tree shaking</em> 是一个术语，通常用于描述移除 JavaScript 上下文中的未引用代码 (dead-code)。它依赖于 ES2015 模块语法的 <a href=\"http://exploringjs.com/es6/ch_modules.html#static-module-structure\" target=\"_blank\" rel=\"noopener\">静态结构</a> 特性，例如 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import\" target=\"_blank\" rel=\"noopener\"><code>import</code></a> 和 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export\" target=\"_blank\" rel=\"noopener\"><code>export</code></a>。这个术语和概念实际上是由 ES2015 模块打包工具 <a href=\"https://github.com/rollup/rollup\" target=\"_blank\" rel=\"noopener\">rollup</a> 普及起来的。</p>","more":"<p>webpack 2 正式版本内置支持 ES2015 模块（也叫做 _harmony modules_）和未使用模块检测能力。新的 webpack 4 正式版本扩展了此检测能力，通过 <code>package.json</code> 的 <code>&quot;sideEffects&quot;</code> 属性作为标记，向 compiler 提供提示，表明项目中的哪些文件是 “pure(纯的 ES2015 模块)”，由此可以安全地删除文件中未使用的部分。</p>\n<blockquote>\n<p>本指南的继承自 <a href=\"https://webpack.docschina.org/guides/getting-started\" target=\"_blank\" rel=\"noopener\">起步</a> 指南。如果你尚未阅读该指南，请先行阅读。</p>\n</blockquote>\n<p>在我们的项目中添加一个新的通用模块文件 <code>src/math.js</code>，并导出两个函数：</p>\n<p><strong>project</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack-demo</span><br><span class=\"line\">|- package.json</span><br><span class=\"line\">|- webpack.config.js</span><br><span class=\"line\">|- &#x2F;dist</span><br><span class=\"line\">  |- bundle.js</span><br><span class=\"line\">  |- index.html</span><br><span class=\"line\">|- &#x2F;src</span><br><span class=\"line\">  |- index.js</span><br><span class=\"line\">+ |- math.js</span><br><span class=\"line\">|- &#x2F;node_modules</span><br></pre></td></tr></table></figure>\n\n<p><strong>src/math.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">square</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x * x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cube</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x * x * x;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>将 <code>mode</code> 配置选项设置为 <a href=\"https://webpack.docschina.org/concepts/mode/#mode-development\" target=\"_blank\" rel=\"noopener\">development</a> 以确保 bundle 是未压缩版本：</p>\n<p><strong>webpack.config.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">'bundle.js'</span>,</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'dist'</span>)</span><br><span class=\"line\">- &#125;</span><br><span class=\"line\">+ &#125;,</span><br><span class=\"line\">+ mode: <span class=\"string\">'development'</span>,</span><br><span class=\"line\">+ optimization: &#123;</span><br><span class=\"line\">+   usedExports: <span class=\"literal\">true</span></span><br><span class=\"line\">+ &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>配置完这些后，更新入口脚本，使用其中一个新方法，并且为了简化示例，我们先将 <code>lodash</code> 删除：</p>\n<p><strong>src/index.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- <span class=\"keyword\">import</span> _ <span class=\"keyword\">from</span> <span class=\"string\">'lodash'</span>;</span><br><span class=\"line\">+ <span class=\"keyword\">import</span> &#123; cube &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./math.js'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">component</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">-   <span class=\"keyword\">var</span> element = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</span><br><span class=\"line\">+   <span class=\"keyword\">var</span> element = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'pre'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">-   <span class=\"comment\">// lodash 是由当前 script 脚本 import 进来的</span></span><br><span class=\"line\">-   element.innerHTML = _.join([<span class=\"string\">'Hello'</span>, <span class=\"string\">'webpack'</span>], <span class=\"string\">' '</span>);</span><br><span class=\"line\">+   element.innerHTML = [</span><br><span class=\"line\">+     <span class=\"string\">'Hello webpack!'</span>,</span><br><span class=\"line\">+     <span class=\"string\">'5 cubed is equal to '</span> + cube(<span class=\"number\">5</span>)</span><br><span class=\"line\">+   ].join(<span class=\"string\">'\\n\\n'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> element;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">document</span>.body.appendChild(component());</span><br></pre></td></tr></table></figure>\n\n<p>注意，我们<strong>没有从 <code>src/math.js</code> 模块中 <code>import</code> 另外一个 <code>square</code> 方法</strong>。这个函数就是所谓的 “未引用代码 (dead code)”，也就是说，应该删除掉未被引用的 <code>export</code>。现在运行 npm script <code>npm run build</code>，并查看输出的 bundle：</p>\n<p><strong>dist/bundle.js (around lines 90 - 100)</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module, __webpack_exports__, __webpack_require__</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">  'use strict'</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">   __webpack_exports__[<span class=\"string\">'a'</span>] = cube;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">square</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x * x;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cube</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x * x * x;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>注意，上面的 <code>unused harmony export square</code> 注释。如果你观察它下面的代码，你会注意到虽然我们没有引用 <code>square</code>，但它仍然被包含在 bundle 中。我们将在下一节解决这个问题。</p>\n<p>在一个纯粹的 ESM 模块世界中，很容易识别出哪些文件有 side effect。然而，我们的项目无法达到这种纯度，所以，此时有必要提示 webpack compiler 哪些代码是 “纯粹部分”。</p>\n<p>通过 package.json 的 <code>&quot;sideEffects&quot;</code> 属性，来实现这种方式。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"your-project\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"sideEffects\"</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果所有代码都不包含 side effect，我们就可以简单地将该属性标记为 <code>false</code>，来告知 webpack，它可以安全地删除未用到的 export。</p>\n<blockquote>\n<p>“side effect(副作用)” 的定义是，在导入时会执行特殊行为的代码，而不是仅仅暴露一个 export 或多个 export。举例说明，例如 polyfill，它影响全局作用域，并且通常不提供 export。</p>\n</blockquote>\n<p>如果你的代码确实有一些副作用，可以改为提供一个数组：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"your-project\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"sideEffects\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"./src/some-side-effectful-file.js\"</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>数组方式支持相对路径、绝对路径和 glob 模式匹配相关文件。它在内部使用 <a href=\"https://github.com/micromatch/micromatch#matching-features\" target=\"_blank\" rel=\"noopener\">micromatch</a>。</p>\n<blockquote>\n<p>注意，所有导入文件都会受到 tree shaking 的影响。这意味着，如果在项目中使用类似 <code>css-loader</code> 并 import 一个 CSS 文件，则需要将其添加到 side effect 列表中，以免在生产模式中无意中将它删除：</p>\n</blockquote>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"your-project\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"sideEffects\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"./src/some-side-effectful-file.js\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"*.css\"</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最后，还可以在 <a href=\"https://webpack.docschina.org/configuration/module/#module-rules\" target=\"_blank\" rel=\"noopener\"><code>module.rules</code> 配置选项</a> 中设置 <code>&quot;sideEffects&quot;</code>。</p>\n<p>通过 <code>import</code> 和 <code>export</code> 语法，我们已经找出需要删除的 “未引用代码 (dead code)”，然而，不仅仅是要找出，还要在 bundle 中删除它们。为此，我们需要将 <code>mode</code> 配置选项设置为 <a href=\"https://webpack.docschina.org/concepts/mode/#mode-production\" target=\"_blank\" rel=\"noopener\"><code>production</code></a>。</p>\n<p><strong>webpack.config.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">'bundle.js'</span>,</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'dist'</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">- mode: <span class=\"string\">'development'</span>,</span><br><span class=\"line\">- optimization: &#123;</span><br><span class=\"line\">-   usedExports: <span class=\"literal\">true</span></span><br><span class=\"line\">- &#125;</span><br><span class=\"line\">+ mode: <span class=\"string\">'production'</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意，也可以在命令行接口中使用 <code>--optimize-minimize</code> 标记，来启用 <code>TerserPlugin</code>。</p>\n</blockquote>\n<p>准备就绪后，然后运行另一个 npm script <code>npm run build</code>，看看输出结果是否发生改变。</p>\n<p>你发现 <code>dist/bundle.js</code> 中的差异了吗？显然，现在整个 bundle 都已经被 minify(压缩) 和 mangle(混淆破坏)，但是如果仔细观察，则不会看到引入 <code>square</code> 函数，但能看到 <code>cube</code> 函数的混淆破坏版本（<code>function r(e){return e*e*e}n.a=r</code>）。现在，随着 minification(代码压缩) 和 tree shaking，我们的 bundle 减小几个字节！虽然，在这个特定示例中，可能看起来没有减少很多，但是，在有着复杂依赖树的大型应用程序上运行 tree shaking 时，会对 bundle 产生显著的体积优化。</p>\n<blockquote>\n<p>运行 tree shaking 需要 <a href=\"https://webpack.docschina.org/plugins/module-concatenation-plugin\" target=\"_blank\" rel=\"noopener\">ModuleConcatenationPlugin</a>。通过 <code>mode: &quot;production&quot;</code> 可以添加此插件。如果你没有使用 mode 设置，记得手动添加 <a href=\"https://webpack.docschina.org/plugins/module-concatenation-plugin\" target=\"_blank\" rel=\"noopener\">ModuleConcatenationPlugin</a>。</p>\n</blockquote>\n<p>我们已经知道，想要使用 <em>tree shaking</em> 必须注意以下……</p>\n<ul>\n<li>使用 ES2015 模块语法（即 <code>import</code> 和 <code>export</code>）。</li>\n<li>确保没有 compiler 将 ES2015 模块语法转换为 CommonJS 模块（这也是流行的 Babel preset 中 @babel/preset-env 的默认行为 - 更多详细信息请查看 <a href=\"https://babel.docschina.org/docs/en/babel-preset-env#modules\" target=\"_blank\" rel=\"noopener\">文档</a>）。</li>\n<li>在项目 <code>package.json</code> 文件中，添加一个 “sideEffects” 属性。</li>\n<li>通过将 <code>mode</code> 选项设置为 <a href=\"https://webpack.docschina.org/concepts/mode/#mode-production\" target=\"_blank\" rel=\"noopener\"><code>production</code></a>，启用 minification(代码压缩) 和 tree shaking。</li>\n</ul>\n<p>你可以将应用程序想象成一棵树。绿色表示实际用到的 source code(源码) 和 library(库)，是树上活的树叶。灰色表示未引用代码，是秋天树上枯萎的树叶。为了除去死去的树叶，你必须摇动这棵树，使它们落下。</p>\n<p>如果你对优化输出很感兴趣，请进入到下个指南，来了解 <a href=\"https://webpack.docschina.org/guides/production\" target=\"_blank\" rel=\"noopener\">生产环境</a> 构建的详细细节。</p>"},{"layout":"[post]","title":"vue生命周期以及nextTick应用","date":"2019-04-01T02:14:30.000Z","_content":"\n## vue 的生命周期\n\n<!-- more -->\n\n![yasuo](shengming.webp)  \n![yasuo](biaoge.webp)\n\n- **beforeCreate**:在实例初始化之后，数据观测 data observer(props、data、computed) 和 event/watcher 事件配置之前被调用。\n- **created**:实例已经创建完成之后被调用。在这一步，实例已完成以下的配置：数据观测(data observer)，属性和方法的运算， watch/event 事件回调。然而，挂载阶段还没开始，\\$el 属性目前不可见。\n- **beforeMount**:在挂载开始之前被调用：相关的 render 函数首次被调用。\n- **mounted**:el 被新创建的 vm.\\$el 替换，并挂载到实例上去之后调用该钩子。\n- **beforeUpdate**:数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。 你可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。\n- **updated**:无论是组件本身的数据变更，还是从父组件接收到的 props 或者从 vuex 里面拿到的数据有变更，都会触发虚拟 DOM 重新渲染和打补丁，并在之后调用 updated。\n- **beforeDestroy**:实例销毁之前调用。在这一步，实例仍然完全可用。\n- **destroyed**:Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。 该钩子在服务器端渲染期间不被调用。\n\n##### 注意\n\ncreated 阶段的 ajax 请求与 mounted 请求的区别：前者页面视图未出现，如果请求信息过多，页面会长时间处于白屏状态。\n\n## 单个组件的生命周期\n\n1. 初始化组件时，仅执行了`beforeCreate/Created/beforeMount/mounted`四个钩子函数\n2. 当改变 data 中定义的变量（响应式变量）时，会执行`beforeUpdate/updated`钩子函数\n3. 当切换组件（当前组件未缓存）时，会执行`beforeDestory/destroyed`钩子函数\n4. 初始化和销毁时的生命钩子函数均只会执行一次，`beforeUpdate/updated`可多次执行\n\n## Vue.nextTick()\n\n> 在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。\n\n获取更新后的 DOM 言外之意就是什么操作需要用到了更新后的 DOM 而不能使用之前的 DOM 或者使用更新前的 DOM 会出问题，所以就衍生出了这个获取更新后的 DOM 的 Vue 方法。\n\n> **Vue.nextTick()回调函数中的执行的应该是会对 DOM 进行操作的 js 代码**\n\n### 什么时候需要用 Vue.nextTick()?\n\n- 你在 Vue 生命周期的 created()钩子函数进行的 DOM 操作一定要放在 Vue.nextTick()的回调函数中。原因是什么呢，原因是在 created()钩子函数执行的时候 DOM 其实并未进行任何渲染，而此时进行 DOM 操作无异于徒劳，所以此处一定要将 DOM 操作的 js 代码放进 Vue.nextTick()的回调函数中。与之对应的就是 mounted 钩子函数，因为该钩子函数执行时所有的 DOM 挂载和渲染都已完成，此时在该钩子函数中进行任何 DOM 操作都不会有问题 。\n- 在数据变化后要执行的某个操作，当你设置 vm.someData = 'new value'，DOM 并不会马上更新，而是在异步队列被清除，也就是下一个事件循环开始时执行更新时才会进行必要的 DOM 更新。如果此时你想要根据更新的 DOM 状态去做某些事情，就会出现问题。。为了在数据变化之后等待 Vue 完成更新 DOM ，可以在数据变化之后立即使用 Vue.nextTick(callback) 。这样回调函数在 DOM 更新完成后就会调用。\n- mounted 不会承诺所有的子组件也都一起被挂载。如果你希望等到整个视图都渲染完毕，可以用 vm.\\$nextTick 替换掉 mounted.\n\n```js\nmounted: function () {\nthis.$nextTick(function () {\n\n// Code that will run only after the\n// entire view has been rendered\n})\n}\n```\n\n[原文地址](https://www.jianshu.com/p/46c9d777cab1)\n","source":"_posts/vue生命周期以及nextTick应用.md","raw":"---\nlayout: '[post]'\ntitle: vue生命周期以及nextTick应用\ndate: 2019-04-01 10:14:30\ntags: Vue\n---\n\n## vue 的生命周期\n\n<!-- more -->\n\n![yasuo](shengming.webp)  \n![yasuo](biaoge.webp)\n\n- **beforeCreate**:在实例初始化之后，数据观测 data observer(props、data、computed) 和 event/watcher 事件配置之前被调用。\n- **created**:实例已经创建完成之后被调用。在这一步，实例已完成以下的配置：数据观测(data observer)，属性和方法的运算， watch/event 事件回调。然而，挂载阶段还没开始，\\$el 属性目前不可见。\n- **beforeMount**:在挂载开始之前被调用：相关的 render 函数首次被调用。\n- **mounted**:el 被新创建的 vm.\\$el 替换，并挂载到实例上去之后调用该钩子。\n- **beforeUpdate**:数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。 你可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。\n- **updated**:无论是组件本身的数据变更，还是从父组件接收到的 props 或者从 vuex 里面拿到的数据有变更，都会触发虚拟 DOM 重新渲染和打补丁，并在之后调用 updated。\n- **beforeDestroy**:实例销毁之前调用。在这一步，实例仍然完全可用。\n- **destroyed**:Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。 该钩子在服务器端渲染期间不被调用。\n\n##### 注意\n\ncreated 阶段的 ajax 请求与 mounted 请求的区别：前者页面视图未出现，如果请求信息过多，页面会长时间处于白屏状态。\n\n## 单个组件的生命周期\n\n1. 初始化组件时，仅执行了`beforeCreate/Created/beforeMount/mounted`四个钩子函数\n2. 当改变 data 中定义的变量（响应式变量）时，会执行`beforeUpdate/updated`钩子函数\n3. 当切换组件（当前组件未缓存）时，会执行`beforeDestory/destroyed`钩子函数\n4. 初始化和销毁时的生命钩子函数均只会执行一次，`beforeUpdate/updated`可多次执行\n\n## Vue.nextTick()\n\n> 在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。\n\n获取更新后的 DOM 言外之意就是什么操作需要用到了更新后的 DOM 而不能使用之前的 DOM 或者使用更新前的 DOM 会出问题，所以就衍生出了这个获取更新后的 DOM 的 Vue 方法。\n\n> **Vue.nextTick()回调函数中的执行的应该是会对 DOM 进行操作的 js 代码**\n\n### 什么时候需要用 Vue.nextTick()?\n\n- 你在 Vue 生命周期的 created()钩子函数进行的 DOM 操作一定要放在 Vue.nextTick()的回调函数中。原因是什么呢，原因是在 created()钩子函数执行的时候 DOM 其实并未进行任何渲染，而此时进行 DOM 操作无异于徒劳，所以此处一定要将 DOM 操作的 js 代码放进 Vue.nextTick()的回调函数中。与之对应的就是 mounted 钩子函数，因为该钩子函数执行时所有的 DOM 挂载和渲染都已完成，此时在该钩子函数中进行任何 DOM 操作都不会有问题 。\n- 在数据变化后要执行的某个操作，当你设置 vm.someData = 'new value'，DOM 并不会马上更新，而是在异步队列被清除，也就是下一个事件循环开始时执行更新时才会进行必要的 DOM 更新。如果此时你想要根据更新的 DOM 状态去做某些事情，就会出现问题。。为了在数据变化之后等待 Vue 完成更新 DOM ，可以在数据变化之后立即使用 Vue.nextTick(callback) 。这样回调函数在 DOM 更新完成后就会调用。\n- mounted 不会承诺所有的子组件也都一起被挂载。如果你希望等到整个视图都渲染完毕，可以用 vm.\\$nextTick 替换掉 mounted.\n\n```js\nmounted: function () {\nthis.$nextTick(function () {\n\n// Code that will run only after the\n// entire view has been rendered\n})\n}\n```\n\n[原文地址](https://www.jianshu.com/p/46c9d777cab1)\n","slug":"vue生命周期以及nextTick应用","published":1,"updated":"2020-05-06T09:51:36.000Z","comments":1,"photos":[],"link":"","_id":"ckbftlm6y001o7w2pb7j3fxcd","content":"<h2 id=\"vue-的生命周期\"><a href=\"#vue-的生命周期\" class=\"headerlink\" title=\"vue 的生命周期\"></a>vue 的生命周期</h2><a id=\"more\"></a>\n\n<p><img src=\"/2019/04/01/vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E4%BB%A5%E5%8F%8AnextTick%E5%BA%94%E7%94%A8/shengming.webp\" alt=\"yasuo\"><br><img src=\"/2019/04/01/vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E4%BB%A5%E5%8F%8AnextTick%E5%BA%94%E7%94%A8/biaoge.webp\" alt=\"yasuo\"></p>\n<ul>\n<li><strong>beforeCreate</strong>:在实例初始化之后，数据观测 data observer(props、data、computed) 和 event/watcher 事件配置之前被调用。</li>\n<li><strong>created</strong>:实例已经创建完成之后被调用。在这一步，实例已完成以下的配置：数据观测(data observer)，属性和方法的运算， watch/event 事件回调。然而，挂载阶段还没开始，$el 属性目前不可见。</li>\n<li><strong>beforeMount</strong>:在挂载开始之前被调用：相关的 render 函数首次被调用。</li>\n<li><strong>mounted</strong>:el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子。</li>\n<li><strong>beforeUpdate</strong>:数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。 你可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。</li>\n<li><strong>updated</strong>:无论是组件本身的数据变更，还是从父组件接收到的 props 或者从 vuex 里面拿到的数据有变更，都会触发虚拟 DOM 重新渲染和打补丁，并在之后调用 updated。</li>\n<li><strong>beforeDestroy</strong>:实例销毁之前调用。在这一步，实例仍然完全可用。</li>\n<li><strong>destroyed</strong>:Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。 该钩子在服务器端渲染期间不被调用。</li>\n</ul>\n<h5 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h5><p>created 阶段的 ajax 请求与 mounted 请求的区别：前者页面视图未出现，如果请求信息过多，页面会长时间处于白屏状态。</p>\n<h2 id=\"单个组件的生命周期\"><a href=\"#单个组件的生命周期\" class=\"headerlink\" title=\"单个组件的生命周期\"></a>单个组件的生命周期</h2><ol>\n<li>初始化组件时，仅执行了<code>beforeCreate/Created/beforeMount/mounted</code>四个钩子函数</li>\n<li>当改变 data 中定义的变量（响应式变量）时，会执行<code>beforeUpdate/updated</code>钩子函数</li>\n<li>当切换组件（当前组件未缓存）时，会执行<code>beforeDestory/destroyed</code>钩子函数</li>\n<li>初始化和销毁时的生命钩子函数均只会执行一次，<code>beforeUpdate/updated</code>可多次执行</li>\n</ol>\n<h2 id=\"Vue-nextTick\"><a href=\"#Vue-nextTick\" class=\"headerlink\" title=\"Vue.nextTick()\"></a>Vue.nextTick()</h2><blockquote>\n<p>在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。</p>\n</blockquote>\n<p>获取更新后的 DOM 言外之意就是什么操作需要用到了更新后的 DOM 而不能使用之前的 DOM 或者使用更新前的 DOM 会出问题，所以就衍生出了这个获取更新后的 DOM 的 Vue 方法。</p>\n<blockquote>\n<p><strong>Vue.nextTick()回调函数中的执行的应该是会对 DOM 进行操作的 js 代码</strong></p>\n</blockquote>\n<h3 id=\"什么时候需要用-Vue-nextTick\"><a href=\"#什么时候需要用-Vue-nextTick\" class=\"headerlink\" title=\"什么时候需要用 Vue.nextTick()?\"></a>什么时候需要用 Vue.nextTick()?</h3><ul>\n<li>你在 Vue 生命周期的 created()钩子函数进行的 DOM 操作一定要放在 Vue.nextTick()的回调函数中。原因是什么呢，原因是在 created()钩子函数执行的时候 DOM 其实并未进行任何渲染，而此时进行 DOM 操作无异于徒劳，所以此处一定要将 DOM 操作的 js 代码放进 Vue.nextTick()的回调函数中。与之对应的就是 mounted 钩子函数，因为该钩子函数执行时所有的 DOM 挂载和渲染都已完成，此时在该钩子函数中进行任何 DOM 操作都不会有问题 。</li>\n<li>在数据变化后要执行的某个操作，当你设置 vm.someData = ‘new value’，DOM 并不会马上更新，而是在异步队列被清除，也就是下一个事件循环开始时执行更新时才会进行必要的 DOM 更新。如果此时你想要根据更新的 DOM 状态去做某些事情，就会出现问题。。为了在数据变化之后等待 Vue 完成更新 DOM ，可以在数据变化之后立即使用 Vue.nextTick(callback) 。这样回调函数在 DOM 更新完成后就会调用。</li>\n<li>mounted 不会承诺所有的子组件也都一起被挂载。如果你希望等到整个视图都渲染完毕，可以用 vm.$nextTick 替换掉 mounted.</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mounted: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">this</span>.$nextTick(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Code that will run only after the</span></span><br><span class=\"line\"><span class=\"comment\">// entire view has been rendered</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://www.jianshu.com/p/46c9d777cab1\" target=\"_blank\" rel=\"noopener\">原文地址</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"vue-的生命周期\"><a href=\"#vue-的生命周期\" class=\"headerlink\" title=\"vue 的生命周期\"></a>vue 的生命周期</h2>","more":"<p><img src=\"/2019/04/01/vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E4%BB%A5%E5%8F%8AnextTick%E5%BA%94%E7%94%A8/shengming.webp\" alt=\"yasuo\"><br><img src=\"/2019/04/01/vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E4%BB%A5%E5%8F%8AnextTick%E5%BA%94%E7%94%A8/biaoge.webp\" alt=\"yasuo\"></p>\n<ul>\n<li><strong>beforeCreate</strong>:在实例初始化之后，数据观测 data observer(props、data、computed) 和 event/watcher 事件配置之前被调用。</li>\n<li><strong>created</strong>:实例已经创建完成之后被调用。在这一步，实例已完成以下的配置：数据观测(data observer)，属性和方法的运算， watch/event 事件回调。然而，挂载阶段还没开始，$el 属性目前不可见。</li>\n<li><strong>beforeMount</strong>:在挂载开始之前被调用：相关的 render 函数首次被调用。</li>\n<li><strong>mounted</strong>:el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子。</li>\n<li><strong>beforeUpdate</strong>:数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。 你可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。</li>\n<li><strong>updated</strong>:无论是组件本身的数据变更，还是从父组件接收到的 props 或者从 vuex 里面拿到的数据有变更，都会触发虚拟 DOM 重新渲染和打补丁，并在之后调用 updated。</li>\n<li><strong>beforeDestroy</strong>:实例销毁之前调用。在这一步，实例仍然完全可用。</li>\n<li><strong>destroyed</strong>:Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。 该钩子在服务器端渲染期间不被调用。</li>\n</ul>\n<h5 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h5><p>created 阶段的 ajax 请求与 mounted 请求的区别：前者页面视图未出现，如果请求信息过多，页面会长时间处于白屏状态。</p>\n<h2 id=\"单个组件的生命周期\"><a href=\"#单个组件的生命周期\" class=\"headerlink\" title=\"单个组件的生命周期\"></a>单个组件的生命周期</h2><ol>\n<li>初始化组件时，仅执行了<code>beforeCreate/Created/beforeMount/mounted</code>四个钩子函数</li>\n<li>当改变 data 中定义的变量（响应式变量）时，会执行<code>beforeUpdate/updated</code>钩子函数</li>\n<li>当切换组件（当前组件未缓存）时，会执行<code>beforeDestory/destroyed</code>钩子函数</li>\n<li>初始化和销毁时的生命钩子函数均只会执行一次，<code>beforeUpdate/updated</code>可多次执行</li>\n</ol>\n<h2 id=\"Vue-nextTick\"><a href=\"#Vue-nextTick\" class=\"headerlink\" title=\"Vue.nextTick()\"></a>Vue.nextTick()</h2><blockquote>\n<p>在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。</p>\n</blockquote>\n<p>获取更新后的 DOM 言外之意就是什么操作需要用到了更新后的 DOM 而不能使用之前的 DOM 或者使用更新前的 DOM 会出问题，所以就衍生出了这个获取更新后的 DOM 的 Vue 方法。</p>\n<blockquote>\n<p><strong>Vue.nextTick()回调函数中的执行的应该是会对 DOM 进行操作的 js 代码</strong></p>\n</blockquote>\n<h3 id=\"什么时候需要用-Vue-nextTick\"><a href=\"#什么时候需要用-Vue-nextTick\" class=\"headerlink\" title=\"什么时候需要用 Vue.nextTick()?\"></a>什么时候需要用 Vue.nextTick()?</h3><ul>\n<li>你在 Vue 生命周期的 created()钩子函数进行的 DOM 操作一定要放在 Vue.nextTick()的回调函数中。原因是什么呢，原因是在 created()钩子函数执行的时候 DOM 其实并未进行任何渲染，而此时进行 DOM 操作无异于徒劳，所以此处一定要将 DOM 操作的 js 代码放进 Vue.nextTick()的回调函数中。与之对应的就是 mounted 钩子函数，因为该钩子函数执行时所有的 DOM 挂载和渲染都已完成，此时在该钩子函数中进行任何 DOM 操作都不会有问题 。</li>\n<li>在数据变化后要执行的某个操作，当你设置 vm.someData = ‘new value’，DOM 并不会马上更新，而是在异步队列被清除，也就是下一个事件循环开始时执行更新时才会进行必要的 DOM 更新。如果此时你想要根据更新的 DOM 状态去做某些事情，就会出现问题。。为了在数据变化之后等待 Vue 完成更新 DOM ，可以在数据变化之后立即使用 Vue.nextTick(callback) 。这样回调函数在 DOM 更新完成后就会调用。</li>\n<li>mounted 不会承诺所有的子组件也都一起被挂载。如果你希望等到整个视图都渲染完毕，可以用 vm.$nextTick 替换掉 mounted.</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mounted: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">this</span>.$nextTick(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Code that will run only after the</span></span><br><span class=\"line\"><span class=\"comment\">// entire view has been rendered</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://www.jianshu.com/p/46c9d777cab1\" target=\"_blank\" rel=\"noopener\">原文地址</a></p>"},{"layout":"[post]","title":"promise.all和promise.race","date":"2019-02-17T01:57:01.000Z","_content":"## Promise.all和Promise.race的功能\n### Promise.all\n**Promise.all可以将多个Promise实例包装成一个新的Promise实例。同时，成功和失败的返回值是不同的，成功的时候返回的是一个结果数组，而失败的时候则返回最先被reject失败状态的值。**\n<!-- more -->\n```js\nlet p1 = new Promise((resolve, reject) => {\n  resolve('p1完成')\n})\n\nlet p2 = new Promise((resolve, reject) => {\n  resolve('p2完成')\n})\n\nlet p3 = Promse.reject('p3失败')\n\nPromise.all([p1, p2]).then((result) => {\n  console.log(result)               //['p1完成', 'p2完成']\n}).catch((error) => {\n  console.log(error)\n})\n\nPromise.all([p1,p3,p2]).then((result) => {\n  console.log(result)\n}).catch((error) => {\n  console.log(error)      // 失败了，打出 ''p3失败'\n})\n```\n### Promise.race\n**Promise.race可以将多个Promise实例包装成一个新的Promise实例。同时，成功和失败的返回值是不同的，成功的时候返回的是第一个返回的resolve，而失败的时候则返回最先被reject失败状态的值。（换句话说就是返回最快的那个）**\n\n```js\nlet p1 = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve('success')\n  },1000)\n})\n\nlet p2 = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    reject('failed')\n  }, 500)\n})\n\nPromise.race([p1, p2]).then((result) => {\n  console.log(result)\n}).catch((error) => {\n  console.log(error)  // 打开的是 'failed'\n})\n```\n## 简易实现\n### Promise.all\n```js\nPromise.all = (arr) => {\n    let resultList = [];\n    return new Promise((resolve, reject) => {\n        let i = 0;\n        next();\n        next = () => {\n            arr[i].then((res, rej) => {\n                if (!rej) {\n                    resultList.push(res);\n                    i++;\n                } else {\n                    reject(rej);\n                }\n                if (i == arr.length) {\n                    resolve(resultList);\n                } else {\n                    next();\n                }\n            })\n        }\n    })\n};\n```\n### Promise.race\n```js\nPromise.race = (arr) => {\n    let resultList = [];\n    return new Promise((resolve, reject) => {\n        let i = 0;\n        next();\n        next = () => {\n            arr[i].then((res, rej) => {\n                if (!rej) {\n                    resultList.push(res);\n                    i++;\n                } else {\n                    reject(rej);\n                }\n                if (i == arr.length) {\n                    resolve(resultList);\n                } else {\n                    next();\n                }\n            })\n        }\n    })\n};\n```\n## Promise.all的问题\n**在上面的代码中，Promise.all使用的是循环调用的方式，也就算是链式调用（Promise链），事实上Promise.all是并发，同时进行所有的promise方法。**\n\n```js\nPromise.all = (arr) => {\n    let resultList = new Array(arr.length);\n    return new Promise((resolve, reject) => {\n        let temp = 0;\n        for (let i = 0, len = arr.length; i < len; i++) {\n            arr[i].then((res, rej) => {\n                if (!rej) {\n                    resultList[i] = (res);\n                    if (temp == arr.length) {\n                        resolve(resultList);\n                    }\n                    temp++;\n                } else {\n                    reject(rej);\n                }\n            })\n        }\n    })\n};\n```\n\n","source":"_posts/promose-all和promise-race.md","raw":"---\nlayout: '[post]'\ntitle: promise.all和promise.race\ndate: 2019-02-17 09:57:01\ntags: Promise\n---\n## Promise.all和Promise.race的功能\n### Promise.all\n**Promise.all可以将多个Promise实例包装成一个新的Promise实例。同时，成功和失败的返回值是不同的，成功的时候返回的是一个结果数组，而失败的时候则返回最先被reject失败状态的值。**\n<!-- more -->\n```js\nlet p1 = new Promise((resolve, reject) => {\n  resolve('p1完成')\n})\n\nlet p2 = new Promise((resolve, reject) => {\n  resolve('p2完成')\n})\n\nlet p3 = Promse.reject('p3失败')\n\nPromise.all([p1, p2]).then((result) => {\n  console.log(result)               //['p1完成', 'p2完成']\n}).catch((error) => {\n  console.log(error)\n})\n\nPromise.all([p1,p3,p2]).then((result) => {\n  console.log(result)\n}).catch((error) => {\n  console.log(error)      // 失败了，打出 ''p3失败'\n})\n```\n### Promise.race\n**Promise.race可以将多个Promise实例包装成一个新的Promise实例。同时，成功和失败的返回值是不同的，成功的时候返回的是第一个返回的resolve，而失败的时候则返回最先被reject失败状态的值。（换句话说就是返回最快的那个）**\n\n```js\nlet p1 = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve('success')\n  },1000)\n})\n\nlet p2 = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    reject('failed')\n  }, 500)\n})\n\nPromise.race([p1, p2]).then((result) => {\n  console.log(result)\n}).catch((error) => {\n  console.log(error)  // 打开的是 'failed'\n})\n```\n## 简易实现\n### Promise.all\n```js\nPromise.all = (arr) => {\n    let resultList = [];\n    return new Promise((resolve, reject) => {\n        let i = 0;\n        next();\n        next = () => {\n            arr[i].then((res, rej) => {\n                if (!rej) {\n                    resultList.push(res);\n                    i++;\n                } else {\n                    reject(rej);\n                }\n                if (i == arr.length) {\n                    resolve(resultList);\n                } else {\n                    next();\n                }\n            })\n        }\n    })\n};\n```\n### Promise.race\n```js\nPromise.race = (arr) => {\n    let resultList = [];\n    return new Promise((resolve, reject) => {\n        let i = 0;\n        next();\n        next = () => {\n            arr[i].then((res, rej) => {\n                if (!rej) {\n                    resultList.push(res);\n                    i++;\n                } else {\n                    reject(rej);\n                }\n                if (i == arr.length) {\n                    resolve(resultList);\n                } else {\n                    next();\n                }\n            })\n        }\n    })\n};\n```\n## Promise.all的问题\n**在上面的代码中，Promise.all使用的是循环调用的方式，也就算是链式调用（Promise链），事实上Promise.all是并发，同时进行所有的promise方法。**\n\n```js\nPromise.all = (arr) => {\n    let resultList = new Array(arr.length);\n    return new Promise((resolve, reject) => {\n        let temp = 0;\n        for (let i = 0, len = arr.length; i < len; i++) {\n            arr[i].then((res, rej) => {\n                if (!rej) {\n                    resultList[i] = (res);\n                    if (temp == arr.length) {\n                        resolve(resultList);\n                    }\n                    temp++;\n                } else {\n                    reject(rej);\n                }\n            })\n        }\n    })\n};\n```\n\n","slug":"promose-all和promise-race","published":1,"updated":"2020-01-24T14:55:10.000Z","comments":1,"photos":[],"link":"","_id":"ckbftlm6z001q7w2p6x5rg1to","content":"<h2 id=\"Promise-all和Promise-race的功能\"><a href=\"#Promise-all和Promise-race的功能\" class=\"headerlink\" title=\"Promise.all和Promise.race的功能\"></a>Promise.all和Promise.race的功能</h2><h3 id=\"Promise-all\"><a href=\"#Promise-all\" class=\"headerlink\" title=\"Promise.all\"></a>Promise.all</h3><p><strong>Promise.all可以将多个Promise实例包装成一个新的Promise实例。同时，成功和失败的返回值是不同的，成功的时候返回的是一个结果数组，而失败的时候则返回最先被reject失败状态的值。</strong></p>\n<a id=\"more\"></a>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  resolve(<span class=\"string\">'p1完成'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  resolve(<span class=\"string\">'p2完成'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p3 = Promse.reject(<span class=\"string\">'p3失败'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.all([p1, p2]).then(<span class=\"function\">(<span class=\"params\">result</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(result)               <span class=\"comment\">//['p1完成', 'p2完成']</span></span><br><span class=\"line\">&#125;).catch(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(error)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.all([p1,p3,p2]).then(<span class=\"function\">(<span class=\"params\">result</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(result)</span><br><span class=\"line\">&#125;).catch(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(error)      <span class=\"comment\">// 失败了，打出 ''p3失败'</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"Promise-race\"><a href=\"#Promise-race\" class=\"headerlink\" title=\"Promise.race\"></a>Promise.race</h3><p><strong>Promise.race可以将多个Promise实例包装成一个新的Promise实例。同时，成功和失败的返回值是不同的，成功的时候返回的是第一个返回的resolve，而失败的时候则返回最先被reject失败状态的值。（换句话说就是返回最快的那个）</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    resolve(<span class=\"string\">'success'</span>)</span><br><span class=\"line\">  &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    reject(<span class=\"string\">'failed'</span>)</span><br><span class=\"line\">  &#125;, <span class=\"number\">500</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.race([p1, p2]).then(<span class=\"function\">(<span class=\"params\">result</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(result)</span><br><span class=\"line\">&#125;).catch(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(error)  <span class=\"comment\">// 打开的是 'failed'</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"简易实现\"><a href=\"#简易实现\" class=\"headerlink\" title=\"简易实现\"></a>简易实现</h2><h3 id=\"Promise-all-1\"><a href=\"#Promise-all-1\" class=\"headerlink\" title=\"Promise.all\"></a>Promise.all</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.all = <span class=\"function\">(<span class=\"params\">arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> resultList = [];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">        next();</span><br><span class=\"line\">        next = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            arr[i].then(<span class=\"function\">(<span class=\"params\">res, rej</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!rej) &#123;</span><br><span class=\"line\">                    resultList.push(res);</span><br><span class=\"line\">                    i++;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    reject(rej);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (i == arr.length) &#123;</span><br><span class=\"line\">                    resolve(resultList);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    next();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Promise-race-1\"><a href=\"#Promise-race-1\" class=\"headerlink\" title=\"Promise.race\"></a>Promise.race</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.race = <span class=\"function\">(<span class=\"params\">arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> resultList = [];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">        next();</span><br><span class=\"line\">        next = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            arr[i].then(<span class=\"function\">(<span class=\"params\">res, rej</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!rej) &#123;</span><br><span class=\"line\">                    resultList.push(res);</span><br><span class=\"line\">                    i++;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    reject(rej);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (i == arr.length) &#123;</span><br><span class=\"line\">                    resolve(resultList);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    next();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Promise-all的问题\"><a href=\"#Promise-all的问题\" class=\"headerlink\" title=\"Promise.all的问题\"></a>Promise.all的问题</h2><p><strong>在上面的代码中，Promise.all使用的是循环调用的方式，也就算是链式调用（Promise链），事实上Promise.all是并发，同时进行所有的promise方法。</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.all = <span class=\"function\">(<span class=\"params\">arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> resultList = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(arr.length);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> temp = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, len = arr.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">            arr[i].then(<span class=\"function\">(<span class=\"params\">res, rej</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!rej) &#123;</span><br><span class=\"line\">                    resultList[i] = (res);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (temp == arr.length) &#123;</span><br><span class=\"line\">                        resolve(resultList);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    temp++;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    reject(rej);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<h2 id=\"Promise-all和Promise-race的功能\"><a href=\"#Promise-all和Promise-race的功能\" class=\"headerlink\" title=\"Promise.all和Promise.race的功能\"></a>Promise.all和Promise.race的功能</h2><h3 id=\"Promise-all\"><a href=\"#Promise-all\" class=\"headerlink\" title=\"Promise.all\"></a>Promise.all</h3><p><strong>Promise.all可以将多个Promise实例包装成一个新的Promise实例。同时，成功和失败的返回值是不同的，成功的时候返回的是一个结果数组，而失败的时候则返回最先被reject失败状态的值。</strong></p>","more":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  resolve(<span class=\"string\">'p1完成'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  resolve(<span class=\"string\">'p2完成'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p3 = Promse.reject(<span class=\"string\">'p3失败'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.all([p1, p2]).then(<span class=\"function\">(<span class=\"params\">result</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(result)               <span class=\"comment\">//['p1完成', 'p2完成']</span></span><br><span class=\"line\">&#125;).catch(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(error)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.all([p1,p3,p2]).then(<span class=\"function\">(<span class=\"params\">result</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(result)</span><br><span class=\"line\">&#125;).catch(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(error)      <span class=\"comment\">// 失败了，打出 ''p3失败'</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"Promise-race\"><a href=\"#Promise-race\" class=\"headerlink\" title=\"Promise.race\"></a>Promise.race</h3><p><strong>Promise.race可以将多个Promise实例包装成一个新的Promise实例。同时，成功和失败的返回值是不同的，成功的时候返回的是第一个返回的resolve，而失败的时候则返回最先被reject失败状态的值。（换句话说就是返回最快的那个）</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    resolve(<span class=\"string\">'success'</span>)</span><br><span class=\"line\">  &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    reject(<span class=\"string\">'failed'</span>)</span><br><span class=\"line\">  &#125;, <span class=\"number\">500</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.race([p1, p2]).then(<span class=\"function\">(<span class=\"params\">result</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(result)</span><br><span class=\"line\">&#125;).catch(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(error)  <span class=\"comment\">// 打开的是 'failed'</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"简易实现\"><a href=\"#简易实现\" class=\"headerlink\" title=\"简易实现\"></a>简易实现</h2><h3 id=\"Promise-all-1\"><a href=\"#Promise-all-1\" class=\"headerlink\" title=\"Promise.all\"></a>Promise.all</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.all = <span class=\"function\">(<span class=\"params\">arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> resultList = [];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">        next();</span><br><span class=\"line\">        next = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            arr[i].then(<span class=\"function\">(<span class=\"params\">res, rej</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!rej) &#123;</span><br><span class=\"line\">                    resultList.push(res);</span><br><span class=\"line\">                    i++;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    reject(rej);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (i == arr.length) &#123;</span><br><span class=\"line\">                    resolve(resultList);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    next();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Promise-race-1\"><a href=\"#Promise-race-1\" class=\"headerlink\" title=\"Promise.race\"></a>Promise.race</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.race = <span class=\"function\">(<span class=\"params\">arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> resultList = [];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">        next();</span><br><span class=\"line\">        next = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            arr[i].then(<span class=\"function\">(<span class=\"params\">res, rej</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!rej) &#123;</span><br><span class=\"line\">                    resultList.push(res);</span><br><span class=\"line\">                    i++;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    reject(rej);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (i == arr.length) &#123;</span><br><span class=\"line\">                    resolve(resultList);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    next();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Promise-all的问题\"><a href=\"#Promise-all的问题\" class=\"headerlink\" title=\"Promise.all的问题\"></a>Promise.all的问题</h2><p><strong>在上面的代码中，Promise.all使用的是循环调用的方式，也就算是链式调用（Promise链），事实上Promise.all是并发，同时进行所有的promise方法。</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.all = <span class=\"function\">(<span class=\"params\">arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> resultList = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(arr.length);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> temp = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, len = arr.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">            arr[i].then(<span class=\"function\">(<span class=\"params\">res, rej</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!rej) &#123;</span><br><span class=\"line\">                    resultList[i] = (res);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (temp == arr.length) &#123;</span><br><span class=\"line\">                        resolve(resultList);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    temp++;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    reject(rej);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"layout":"[post]","title":"webpack中module,chunk和bundle的区别是什么","date":"2020-04-30T07:29:21.000Z","_content":"首先我们在 src 目录下写我们的业务代码，引入 index.js、utils.js、common.js 和 index.css 这 4 个文件，目录结构如下：\n<!-- more -->\n```\nsrc/\n├── index.css\n├── index.html # 这个是 HTML 模板代码\n├── index.js\n├── common.js\n└── utils.js\n复制代码\n```\n\nindex.css 写一点儿简单的样式：\n\n```css\nbody {\n    background-color: red;\n}\n```\n\nutils.js 文件写个求平方的工具函数：\n\n```js\nexport function square(x) {\n    return x * x;\n}\n```\n\ncommon.js 文件写个 log 工具函数：\n\n```js\nmodule.exports = {\n  log: (msg) => {\n    console.log('hello ', msg)\n  }\n}\n```\n\nindex.js 文件做一些简单的修改，引入 css 文件和 common.js：\n\n```js\nimport './index.css';\nconst { log } = require('./common');\n\nlog('webpack');\n```\n\nwebpack 的配置如下：\n\n```json\n{\n    entry: {\n        index: \"../src/index.js\",\n        utils: '../src/utils.js',\n    },\n    output: {\n        filename: \"[name].bundle.js\", // 输出 index.js 和 utils.js\n    },\n    module: {\n        rules: [\n            {\n                test: /\\.css$/,\n                use: [\n                    MiniCssExtractPlugin.loader, // 创建一个 link 标签\n                    'css-loader', // css-loader 负责解析 CSS 代码, 处理 CSS 中的依赖\n                ],\n            },\n        ]\n    }\n    plugins: [\n        // 用 MiniCssExtractPlugin 抽离出 css 文件，以 link 标签的形式引入样式文件\n        new MiniCssExtractPlugin({\n            filename: 'index.bundle.css' // 输出的 css 文件名为 index.css\n        }),\n    ]\n}\n```\n\n我们运行一下 webpack，看一下打包的结果：\n\n![image](module1.jpg)\n\n我们可以看出，index.css 和 common.js 在 index.js 中被引入，打包生成的 index.bundle.css 和 index.bundle.js 都属于 chunk 0，utils.js 因为是独立打包的，它生成的 utils.bundle.js 属于 chunk 1。\n\n感觉还有些绕？我做了一张图，你肯定一看就懂：\n\n![image](module2.jpg)\n\n看这个图就很明白了：\n\n1.  对于一份同逻辑的代码，当我们手写下一个一个的文件，它们无论是 ESM 还是 commonJS 或是 AMD，他们都是 **module** ；\n2.  当我们写的 module 源文件传到 webpack 进行打包时，webpack 会根据文件引用关系生成 **chunk** 文件，webpack 会对这个 chunk 文件进行一些操作；\n3.  webpack 处理好 chunk 文件后，最后会输出 **bundle** 文件，这个 bundle 文件包含了经过加载和编译的最终源文件，所以它可以直接在浏览器中运行。\n\n一般来说一个 chunk 对应一个 bundle，比如上图中的 `utils.js -> chunks 1 -> utils.bundle.js`；但也有例外，比如说上图中，我就用 `MiniCssExtractPlugin` 从 chunks 0 中抽离出了 `index.bundle.css` 文件。\n\n### 一句话总结：\n\n`module`，`chunk` 和 `bundle` 其实就是同一份逻辑代码在不同转换场景下的取了三个名字：\n\n我们直接写出来的是 module，webpack 处理时是 chunk，最后生成浏览器可以直接运行的 bundle。","source":"_posts/webpack中module-chunk和bundle的区别是什么.md","raw":"---\nlayout: '[post]'\ntitle: 'webpack中module,chunk和bundle的区别是什么'\ndate: 2020-04-30 15:29:21\ntags:\n---\n首先我们在 src 目录下写我们的业务代码，引入 index.js、utils.js、common.js 和 index.css 这 4 个文件，目录结构如下：\n<!-- more -->\n```\nsrc/\n├── index.css\n├── index.html # 这个是 HTML 模板代码\n├── index.js\n├── common.js\n└── utils.js\n复制代码\n```\n\nindex.css 写一点儿简单的样式：\n\n```css\nbody {\n    background-color: red;\n}\n```\n\nutils.js 文件写个求平方的工具函数：\n\n```js\nexport function square(x) {\n    return x * x;\n}\n```\n\ncommon.js 文件写个 log 工具函数：\n\n```js\nmodule.exports = {\n  log: (msg) => {\n    console.log('hello ', msg)\n  }\n}\n```\n\nindex.js 文件做一些简单的修改，引入 css 文件和 common.js：\n\n```js\nimport './index.css';\nconst { log } = require('./common');\n\nlog('webpack');\n```\n\nwebpack 的配置如下：\n\n```json\n{\n    entry: {\n        index: \"../src/index.js\",\n        utils: '../src/utils.js',\n    },\n    output: {\n        filename: \"[name].bundle.js\", // 输出 index.js 和 utils.js\n    },\n    module: {\n        rules: [\n            {\n                test: /\\.css$/,\n                use: [\n                    MiniCssExtractPlugin.loader, // 创建一个 link 标签\n                    'css-loader', // css-loader 负责解析 CSS 代码, 处理 CSS 中的依赖\n                ],\n            },\n        ]\n    }\n    plugins: [\n        // 用 MiniCssExtractPlugin 抽离出 css 文件，以 link 标签的形式引入样式文件\n        new MiniCssExtractPlugin({\n            filename: 'index.bundle.css' // 输出的 css 文件名为 index.css\n        }),\n    ]\n}\n```\n\n我们运行一下 webpack，看一下打包的结果：\n\n![image](module1.jpg)\n\n我们可以看出，index.css 和 common.js 在 index.js 中被引入，打包生成的 index.bundle.css 和 index.bundle.js 都属于 chunk 0，utils.js 因为是独立打包的，它生成的 utils.bundle.js 属于 chunk 1。\n\n感觉还有些绕？我做了一张图，你肯定一看就懂：\n\n![image](module2.jpg)\n\n看这个图就很明白了：\n\n1.  对于一份同逻辑的代码，当我们手写下一个一个的文件，它们无论是 ESM 还是 commonJS 或是 AMD，他们都是 **module** ；\n2.  当我们写的 module 源文件传到 webpack 进行打包时，webpack 会根据文件引用关系生成 **chunk** 文件，webpack 会对这个 chunk 文件进行一些操作；\n3.  webpack 处理好 chunk 文件后，最后会输出 **bundle** 文件，这个 bundle 文件包含了经过加载和编译的最终源文件，所以它可以直接在浏览器中运行。\n\n一般来说一个 chunk 对应一个 bundle，比如上图中的 `utils.js -> chunks 1 -> utils.bundle.js`；但也有例外，比如说上图中，我就用 `MiniCssExtractPlugin` 从 chunks 0 中抽离出了 `index.bundle.css` 文件。\n\n### 一句话总结：\n\n`module`，`chunk` 和 `bundle` 其实就是同一份逻辑代码在不同转换场景下的取了三个名字：\n\n我们直接写出来的是 module，webpack 处理时是 chunk，最后生成浏览器可以直接运行的 bundle。","slug":"webpack中module-chunk和bundle的区别是什么","published":1,"updated":"2020-05-19T07:31:30.000Z","comments":1,"photos":[],"link":"","_id":"ckbftlm72001t7w2p9rjz2mpd","content":"<p>首先我们在 src 目录下写我们的业务代码，引入 index.js、utils.js、common.js 和 index.css 这 4 个文件，目录结构如下：</p>\n<a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">src&#x2F;</span><br><span class=\"line\">├── index.css</span><br><span class=\"line\">├── index.html # 这个是 HTML 模板代码</span><br><span class=\"line\">├── index.js</span><br><span class=\"line\">├── common.js</span><br><span class=\"line\">└── utils.js</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>index.css 写一点儿简单的样式：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>utils.js 文件写个求平方的工具函数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">square</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x * x;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>common.js 文件写个 log 工具函数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  log: <span class=\"function\">(<span class=\"params\">msg</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello '</span>, msg)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>index.js 文件做一些简单的修改，引入 css 文件和 common.js：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./index.css'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; log &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'./common'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">log(<span class=\"string\">'webpack'</span>);</span><br></pre></td></tr></table></figure>\n\n<p>webpack 的配置如下：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">        index: \"../src/index.js\",</span><br><span class=\"line\">        utils: '../src/utils.js',</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        filename: \"[name].bundle.js\", // 输出 index.js 和 utils.js</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    module: &#123;</span><br><span class=\"line\">        rules: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: /\\.css$/,</span><br><span class=\"line\">                use: [</span><br><span class=\"line\">                    MiniCssExtractPlugin.loader, // 创建一个 link 标签</span><br><span class=\"line\">                    'css-loader', // css-loader 负责解析 CSS 代码, 处理 CSS 中的依赖</span><br><span class=\"line\">                ],</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        <span class=\"comment\">// 用 MiniCssExtractPlugin 抽离出 css 文件，以 link 标签的形式引入样式文件</span></span><br><span class=\"line\">        new MiniCssExtractPlugin(&#123;</span><br><span class=\"line\">            filename: 'index.bundle.css' // 输出的 css 文件名为 index.css</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们运行一下 webpack，看一下打包的结果：</p>\n<p><img src=\"/2020/04/30/webpack%E4%B8%ADmodule-chunk%E5%92%8Cbundle%E7%9A%84%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88/module1.jpg\" alt=\"image\"></p>\n<p>我们可以看出，index.css 和 common.js 在 index.js 中被引入，打包生成的 index.bundle.css 和 index.bundle.js 都属于 chunk 0，utils.js 因为是独立打包的，它生成的 utils.bundle.js 属于 chunk 1。</p>\n<p>感觉还有些绕？我做了一张图，你肯定一看就懂：</p>\n<p><img src=\"/2020/04/30/webpack%E4%B8%ADmodule-chunk%E5%92%8Cbundle%E7%9A%84%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88/module2.jpg\" alt=\"image\"></p>\n<p>看这个图就很明白了：</p>\n<ol>\n<li>对于一份同逻辑的代码，当我们手写下一个一个的文件，它们无论是 ESM 还是 commonJS 或是 AMD，他们都是 <strong>module</strong> ；</li>\n<li>当我们写的 module 源文件传到 webpack 进行打包时，webpack 会根据文件引用关系生成 <strong>chunk</strong> 文件，webpack 会对这个 chunk 文件进行一些操作；</li>\n<li>webpack 处理好 chunk 文件后，最后会输出 <strong>bundle</strong> 文件，这个 bundle 文件包含了经过加载和编译的最终源文件，所以它可以直接在浏览器中运行。</li>\n</ol>\n<p>一般来说一个 chunk 对应一个 bundle，比如上图中的 <code>utils.js -&gt; chunks 1 -&gt; utils.bundle.js</code>；但也有例外，比如说上图中，我就用 <code>MiniCssExtractPlugin</code> 从 chunks 0 中抽离出了 <code>index.bundle.css</code> 文件。</p>\n<h3 id=\"一句话总结：\"><a href=\"#一句话总结：\" class=\"headerlink\" title=\"一句话总结：\"></a>一句话总结：</h3><p><code>module</code>，<code>chunk</code> 和 <code>bundle</code> 其实就是同一份逻辑代码在不同转换场景下的取了三个名字：</p>\n<p>我们直接写出来的是 module，webpack 处理时是 chunk，最后生成浏览器可以直接运行的 bundle。</p>\n","site":{"data":{}},"excerpt":"<p>首先我们在 src 目录下写我们的业务代码，引入 index.js、utils.js、common.js 和 index.css 这 4 个文件，目录结构如下：</p>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">src&#x2F;</span><br><span class=\"line\">├── index.css</span><br><span class=\"line\">├── index.html # 这个是 HTML 模板代码</span><br><span class=\"line\">├── index.js</span><br><span class=\"line\">├── common.js</span><br><span class=\"line\">└── utils.js</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>index.css 写一点儿简单的样式：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>utils.js 文件写个求平方的工具函数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">square</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x * x;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>common.js 文件写个 log 工具函数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  log: <span class=\"function\">(<span class=\"params\">msg</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello '</span>, msg)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>index.js 文件做一些简单的修改，引入 css 文件和 common.js：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./index.css'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; log &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'./common'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">log(<span class=\"string\">'webpack'</span>);</span><br></pre></td></tr></table></figure>\n\n<p>webpack 的配置如下：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">        index: \"../src/index.js\",</span><br><span class=\"line\">        utils: '../src/utils.js',</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        filename: \"[name].bundle.js\", // 输出 index.js 和 utils.js</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    module: &#123;</span><br><span class=\"line\">        rules: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: /\\.css$/,</span><br><span class=\"line\">                use: [</span><br><span class=\"line\">                    MiniCssExtractPlugin.loader, // 创建一个 link 标签</span><br><span class=\"line\">                    'css-loader', // css-loader 负责解析 CSS 代码, 处理 CSS 中的依赖</span><br><span class=\"line\">                ],</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        <span class=\"comment\">// 用 MiniCssExtractPlugin 抽离出 css 文件，以 link 标签的形式引入样式文件</span></span><br><span class=\"line\">        new MiniCssExtractPlugin(&#123;</span><br><span class=\"line\">            filename: 'index.bundle.css' // 输出的 css 文件名为 index.css</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们运行一下 webpack，看一下打包的结果：</p>\n<p><img src=\"/2020/04/30/webpack%E4%B8%ADmodule-chunk%E5%92%8Cbundle%E7%9A%84%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88/module1.jpg\" alt=\"image\"></p>\n<p>我们可以看出，index.css 和 common.js 在 index.js 中被引入，打包生成的 index.bundle.css 和 index.bundle.js 都属于 chunk 0，utils.js 因为是独立打包的，它生成的 utils.bundle.js 属于 chunk 1。</p>\n<p>感觉还有些绕？我做了一张图，你肯定一看就懂：</p>\n<p><img src=\"/2020/04/30/webpack%E4%B8%ADmodule-chunk%E5%92%8Cbundle%E7%9A%84%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88/module2.jpg\" alt=\"image\"></p>\n<p>看这个图就很明白了：</p>\n<ol>\n<li>对于一份同逻辑的代码，当我们手写下一个一个的文件，它们无论是 ESM 还是 commonJS 或是 AMD，他们都是 <strong>module</strong> ；</li>\n<li>当我们写的 module 源文件传到 webpack 进行打包时，webpack 会根据文件引用关系生成 <strong>chunk</strong> 文件，webpack 会对这个 chunk 文件进行一些操作；</li>\n<li>webpack 处理好 chunk 文件后，最后会输出 <strong>bundle</strong> 文件，这个 bundle 文件包含了经过加载和编译的最终源文件，所以它可以直接在浏览器中运行。</li>\n</ol>\n<p>一般来说一个 chunk 对应一个 bundle，比如上图中的 <code>utils.js -&gt; chunks 1 -&gt; utils.bundle.js</code>；但也有例外，比如说上图中，我就用 <code>MiniCssExtractPlugin</code> 从 chunks 0 中抽离出了 <code>index.bundle.css</code> 文件。</p>\n<h3 id=\"一句话总结：\"><a href=\"#一句话总结：\" class=\"headerlink\" title=\"一句话总结：\"></a>一句话总结：</h3><p><code>module</code>，<code>chunk</code> 和 <code>bundle</code> 其实就是同一份逻辑代码在不同转换场景下的取了三个名字：</p>\n<p>我们直接写出来的是 module，webpack 处理时是 chunk，最后生成浏览器可以直接运行的 bundle。</p>"},{"layout":"[post]","title":"Promise原理和实现","date":"2019-02-05T01:57:01.000Z","_content":"### 什么是Promise\nPromise 对象用于表示一个异步操作的最终完成 (或失败), 及其结果值.\n<!-- more -->\n### Promise规范\n- ES6中使用[Promise/A+](https://juejin.im/post/5c4b0423e51d4525211c0fbc)规范。\n- Promise的标准理解\n  - promise对象有三种状态**pending**、**fulfilled**和**rejected**。\n  - promise对象的状态必须有并且只有上述三种当中的一种。\n  - 状态的改变只能是从pending到fulfilled或者pending到rejected。\n  - then方法返回一个promise。then 方法可以被同一个 promise 调用多次。\n```\npromise.then(onFulfilled, onRejected)\n```\n### Promise实现\n1. 构造函数\n```js\nfunction Promise(resolver) {}\n```\n2. 原型链\n```js\nPromise.prototype.then = function() {}\nPromise.prototype.catch = function() {}\n```\n3. 静态方法\n```js\nPromise.resolve = function() {}\nPromise.reject = function() {}\nPromise.all = function() {}\nPromise.race = function() {}\n```\n### Promise基本结构\n\n```js\nlet promise=new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve('FULFILLED')\n  }, 1000)\n})\npromise.then(a=> alert(a));\npromise.then(a => alert(a+1));\n```\n### Promise构造函数\n构造函数用法总结：\n1. 构造函数接收一个**executor**立即执行函数\n2. **executor**立即执行函数接收一个**resolve**函数\n3. **promise**对象的**then**方法绑定状态变为**fulfilled**时的回调\n4. **resolve**函数被调用时会触发**then**方法中的回调\n#### 构造函数的初步实现\n\n```js\nfunction Promise(executor) {\n    var self = this;\n    self.status = 'pending'; //promise当前的状态\n    self.data = undefined; //promise的值\n    self.onResolvedCallback = [];\n    //promise状态变为resolve时的回调函数集，可能有多个\n   function resolve(value) {\n       if(self.status === 'pending') {\n           self.status = 'resolved';\n           self.data = value;\n           for(var i = 0; i < self.onResolvedCallback.length; i++) {\n               self.onResolvedCallback[i](value);\n           }\n       }\n   }\n   executor(resolve);\n};\nPromise.prototype.then = function (resolve) {\n    this.onResolvedCallback.push(resolve);\n};\n```\n#### 添加reject结果\n\n```js\nfunction Promise(executor) {\n    var self = this;\n    self.status = 'pending'; //promise当前的状态\n    self.data = undefined; //promise的值\n    self.onResolvedCallback = [];\n    //promise状态变为resolve时的回调函数集，可能有多个\n    self.onRejectedCallback = [];\n    //promise状态变为reject时的回调函数集，可能有多个\n   function resolve(value) {\n       if(self.status === 'pending') {\n           self.status = 'resolved';\n           self.data = value;\n           for(var i = 0; i < self.onResolvedCallback.length; i++) {\n               self.onResolvedCallback[i](value);\n           }\n       }\n   }\n\n   function reject(reason) {\n        if(self.status === 'pending') {\n            self.status = 'rejected';\n            self.data = reason;\n            for(var i = 0; i < self.onRejectedCallback.length; i++) {\n                self.onRejectedCallback[i](reason);\n            }\n        }\n   }\n\n   try {\n       executor(resolve, reject);\n   } catch (e){\n       reject(e);\n   }\n};\nPromise.prototype.then = function (onResolve, onReject) {\n    this.onResolvedCallback.push(onResolve);\n    this.onRejectedCallback.push(onReject);\n};\n```\n小结：\n1. **executor**函数作为实参在创建**Promise**对象时传入**Promise**构造函数。\n2. **resolve**和**reject**函数作为实参传入**executor**函数。\n3. **value**作为实参传入**resolve**和**reject**函数。\n#### 如果executor自执行函数中的resolve函数立即触发时，发现Promise失效\n\n```js\nconst promise = new Promise((resolve) => {\n    resolve(1);\n});\npromise.then((a) => alert(a));\n\n```\n将promise的resolve和reject异步执行\n\n```js\nfunction resolve(value) {\n    setTimeout(function () {\n        if(self.status === 'pending') {\n            self.status = 'resolved';\n            self.data = value;\n            for(var i = 0; i < self.onResolvedCallback.length; i++) {\n                self.onResolvedCallback[i](value);\n            }\n        }\n    })\n}\n\nfunction reject(reason) {\n    setTimeout(function () {\n        if(self.status === 'pending') {\n            self.status = 'rejected';\n            self.data = reason;\n            for(var i = 0; i < self.onRejectedCallback.length; i++) {\n                self.onRejectedCallback[i](reason);\n            }\n        }\n    })\n}\n```\n### then方法\n\n```js\npromise.then(onFulfilled, onRejected)\n```\n1.  **then**方法返回一个新的**promise**对象。\n1.  **executor**自执行函数中的**resolve**参数调用时执行**then**方法的第一个回调函数**onResolved**。\n1.  **executor**自执行函数中的**reject**参数调用时执行**then**方法的第二个回调函数**onRejected**。\n\n```js\nPromise.prototype.then = function (onResolved, onRejected) {\n    var self = this;\n    var promise2;\n    onResolved = typeof onResolved === 'function' \n                ? onResolved \n                : function (value) {return value};\n    onRejected = typeof onRejected === 'function' \n                ? onRejected \n                : function (reason) {throw reason};\n    //promise对象当前状态为resolved\n    if(self.status === 'resolved') {\n        return promise2 = new Promise(function (resolve, reject) {\n            try {\n                //调用onResolve回调函数\n                var x = onResolved(self.data);\n                //如果onResolve回调函数返回值为一个promise对象\n                if(x instanceof  Promise) {\n                    //将它的结果作为promise2的结果\n                    x.then(resolve, reject);\n                } else {\n                    resolve(x);//执行promise2的onResolve回调\n           }        \n            } catch (e) {\n                reject(e); //执行promise2的onReject回调\n            }\n        })\n    }\n    //promise对象当前状态为rejected\n    if(self.status === 'rejected') {\n        return promise2 = new Promise(function (resolve, reject) {\n            try {\n                var x = onRejected(self.data);\n                if (x instanceof Promise) {\n                    x.then(resolve, reject)\n                } else {\n                    resolve(x)\n                }\n            } catch (e) {\n                reject(e)\n            }\n        })\n    }\n    //promise对象当前状态为pending\n    //此时并不能确定调用onResolved还是onRejected，需要等当前Promise状态确定。\n    //所以需要将callBack放入promise1的回调数组中\n    if(self.status === 'pending') {\n        return promise2 = new Promise(function (resolve, reject) {\n            self.onResolvedCallback.push(function (value) {\n                try {\n                    var x = onResolved(self.data);\n                    if (x instanceof Promise) {\n                        x.then(resolve, reject);\n                    } else {\n                        resolve(x);\n          }\n                } catch (e) {\n                    reject(e);\n                }\n            })\n            self.onRejectedCallback.push(function(reason) {\n                try {\n                    var x = onRejected(self.data);\n                    if (x instanceof Promise) {\n                        x.then(resolve, reject)\n                    } else {\n                        resolve(x);\n                    }\n                } catch (e) {\n                    reject(e)\n                }\n            })\n        })\n    }\n};\n```\n### 完整代码\n\n```js\nvar Promise = (function() {\n    function Promise(resolver) {\n        if (typeof resolver !== 'function') { //resolver必须是函数\n            throw new TypeError('Promise resolver ' + resolver + ' is not a function')\n        }\n        if (!(this instanceof Promise)) return new Promise(resolver)\n\n        var self = this //保存this\n        self.callbacks = [] //保存onResolve和onReject函数集合\n        self.status = 'pending' //当前状态\n\n        function resolve(value) {\n            setTimeout(function() { //异步调用\n                if (self.status !== 'pending') {\n                    return\n                }\n                self.status = 'resolved' //修改状态\n                self.data = value\n\n                for (var i = 0; i < self.callbacks.length; i++) {\n                    self.callbacks[i].onResolved(value)\n                }\n            })\n        }\n\n        function reject(reason) {\n            setTimeout(function(){ //异步调用\n                if (self.status !== 'pending') {\n                    return\n                }\n                self.status = 'rejected' //修改状态\n                self.data = reason\n\n                for (var i = 0; i < self.callbacks.length; i++) {\n                    self.callbacks[i].onRejected(reason)\n                }\n            })\n        }\n\n        try{\n            resolver(resolve, reject) //执行resolver函数\n        } catch(e) {\n            reject(e)\n        }\n    }\n\n    function resolvePromise(promise, x, resolve, reject) {\n        var then\n        var thenCalledOrThrow = false\n\n        if (promise === x) {\n            return reject(new TypeError('Chaining cycle detected for promise!'))\n        }\n\n        if ((x !== null) && ((typeof x === 'object') || (typeof x === 'function'))) {\n            try {\n                then = x.then\n                if (typeof then === 'function') {\n                    then.call(x, function rs(y) {\n                        if (thenCalledOrThrow) return\n                        thenCalledOrThrow = true\n                        return resolvePromise(promise, y, resolve, reject)\n                    }, function rj(r) {\n                        if (thenCalledOrThrow) return\n                        thenCalledOrThrow = true\n                        return reject(r)\n                    })\n                } else {\n                    return resolve(x)\n                }\n            } catch(e) {\n                if (thenCalledOrThrow) return\n                thenCalledOrThrow = true\n                return reject(e)\n            }\n        } else {\n            return resolve(x)\n        }\n    }\n\n    Promise.prototype.then = function(onResolved, onRejected) {\n        //健壮性处理，处理点击穿透\n        onResolved = typeof onResolved === 'function' ? onResolved : function(v){return v}\n        onRejected = typeof onRejected === 'function' ? onRejected : function(r){throw r}\n        var self = this\n        var promise2\n\n        //promise状态为resolved\n        if (self.status === 'resolved') {\n            return promise2 = new Promise(function(resolve, reject) {\n                setTimeout(function() {\n                    try {\n                        //调用then方法的onResolved回调\n                        var x = onResolved(self.data)\n                        //根据x的值修改promise2的状态\n                        resolvePromise(promise2, x, resolve, reject)\n                    } catch(e) {\n                        //promise2状态变为rejected\n                        return reject(e)\n                    }\n                })\n            })\n        }\n\n        //promise状态为rejected\n        if (self.status === 'rejected') {\n            return promise2 = new Promise(function(resolve, reject) {\n                setTimeout(function() {\n                    try {\n                        //调用then方法的onReject回调\n                        var x = onRejected(self.data)\n                        //根据x的值修改promise2的状态\n                        resolvePromise(promise2, x, resolve, reject)\n                    } catch(e) {\n                        //promise2状态变为rejected\n                        return reject(e)\n                    }\n                })\n            })\n        }\n\n        //promise状态为pending\n        //需要等待promise的状态改变\n        if (self.status === 'pending') {\n            return promise2 = new Promise(function(resolve, reject) {\n                self.callbacks.push({\n                    onResolved: function(value) {\n                        try {\n                            //调用then方法的onResolved回调\n                            var x = onResolved(value)\n                            //根据x的值修改promise2的状态\n                            resolvePromise(promise2, x, resolve, reject)\n                        } catch(e) {\n                            //promise2状态变为rejected\n                            return reject(e)\n                        }\n                    },\n                    onRejected: function(reason) {\n                        try {\n                            //调用then方法的onResolved回调\n                            var x = onRejected(reason)\n                            //根据x的值修改promise2的状态\n                            resolvePromise(promise2, x, resolve, reject)\n                        } catch(e) {\n                            //promise2状态变为rejected\n                            return reject(e)\n                        }\n                    }\n                })\n            })\n        }\n    }\n\n    //获取当前Promise传递的值\n    Promise.prototype.valueOf = function() {\n        return this.data\n    }\n\n    //由then方法实现catch方法\n    Promise.prototype.catch = function(onRejected) {\n        return this.then(null, onRejected)\n    }\n\n    //finally方法\n    Promise.prototype.finally = function(fn) {\n        return this.then(function(v){\n            setTimeout(fn)\n            return v\n        }, function(r){\n            setTimeout(fn)\n            throw r\n        })\n    }\n\n    Promise.prototype.spread = function(fn, onRejected) {\n        return this.then(function(values) {\n            return fn.apply(null, values)\n        }, onRejected)\n    }\n\n    Promise.prototype.inject = function(fn, onRejected) {\n        return this.then(function(v) {\n            return fn.apply(null, fn.toString().match(/\\((.*?)\\)/)[1].split(',').map(function(key){\n                return v[key];\n            }))\n        }, onRejected)\n    }\n\n    Promise.prototype.delay = function(duration) {\n        return this.then(function(value) {\n            return new Promise(function(resolve, reject) {\n                setTimeout(function() {\n                    resolve(value)\n                }, duration)\n            })\n        }, function(reason) {\n            return new Promise(function(resolve, reject) {\n                setTimeout(function() {\n                    reject(reason)\n                }, duration)\n            })\n        })\n    }\n\n    Promise.all = function(promises) {\n        return new Promise(function(resolve, reject) {\n            var resolvedCounter = 0\n            var promiseNum = promises.length\n            var resolvedValues = new Array(promiseNum)\n            for (var i = 0; i < promiseNum; i++) {\n                (function(i) {\n                    Promise.resolve(promises[i]).then(function(value) {\n                        resolvedCounter++\n                        resolvedValues[i] = value\n                        if (resolvedCounter == promiseNum) {\n                            return resolve(resolvedValues)\n                        }\n                    }, function(reason) {\n                        return reject(reason)\n                    })\n                })(i)\n            }\n        })\n    }\n\n    Promise.race = function(promises) {\n        return new Promise(function(resolve, reject) {\n            for (var i = 0; i < promises.length; i++) {\n                Promise.resolve(promises[i]).then(function(value) {\n                    return resolve(value)\n                }, function(reason) {\n                    return reject(reason)\n                })\n            }\n        })\n    }\n\n    Promise.resolve = function(value) {\n        var promise = new Promise(function(resolve, reject) {\n            resolvePromise(promise, value, resolve, reject)\n        })\n        return promise\n    }\n\n    Promise.reject = function(reason) {\n        return new Promise(function(resolve, reject) {\n            reject(reason)\n        })\n    }\n\n    Promise.fcall = function(fn){\n        // 虽然fn可以接收到上一层then里传来的参数，但是其实是undefined，所以跟没有是一样的，因为resolve没参数啊\n        return Promise.resolve().then(fn)\n    }\n\n    Promise.done = Promise.stop = function(){\n        return new Promise(function(){})\n    }\n\n    Promise.deferred = Promise.defer = function() {\n        var dfd = {}\n        dfd.promise = new Promise(function(resolve, reject) {\n            dfd.resolve = resolve\n            dfd.reject = reject\n        })\n        return dfd\n    }\n\n    try { // CommonJS compliance\n        module.exports = Promise\n    } catch(e) {}\n\n    return Promise\n})()\n```\n### 参考\n[Promise实现原理](https://www.jianshu.com/p/43de678e918a)  \n[Promise原理与实现](https://www.jianshu.com/p/b4f0425b22a1)\n\n\n\n\n\n\n\n","source":"_posts/promise原理和实现.md","raw":"---\nlayout: '[post]'\ntitle: Promise原理和实现\ndate: 2019-02-05 09:57:01\ntags: Promise\n---\n### 什么是Promise\nPromise 对象用于表示一个异步操作的最终完成 (或失败), 及其结果值.\n<!-- more -->\n### Promise规范\n- ES6中使用[Promise/A+](https://juejin.im/post/5c4b0423e51d4525211c0fbc)规范。\n- Promise的标准理解\n  - promise对象有三种状态**pending**、**fulfilled**和**rejected**。\n  - promise对象的状态必须有并且只有上述三种当中的一种。\n  - 状态的改变只能是从pending到fulfilled或者pending到rejected。\n  - then方法返回一个promise。then 方法可以被同一个 promise 调用多次。\n```\npromise.then(onFulfilled, onRejected)\n```\n### Promise实现\n1. 构造函数\n```js\nfunction Promise(resolver) {}\n```\n2. 原型链\n```js\nPromise.prototype.then = function() {}\nPromise.prototype.catch = function() {}\n```\n3. 静态方法\n```js\nPromise.resolve = function() {}\nPromise.reject = function() {}\nPromise.all = function() {}\nPromise.race = function() {}\n```\n### Promise基本结构\n\n```js\nlet promise=new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve('FULFILLED')\n  }, 1000)\n})\npromise.then(a=> alert(a));\npromise.then(a => alert(a+1));\n```\n### Promise构造函数\n构造函数用法总结：\n1. 构造函数接收一个**executor**立即执行函数\n2. **executor**立即执行函数接收一个**resolve**函数\n3. **promise**对象的**then**方法绑定状态变为**fulfilled**时的回调\n4. **resolve**函数被调用时会触发**then**方法中的回调\n#### 构造函数的初步实现\n\n```js\nfunction Promise(executor) {\n    var self = this;\n    self.status = 'pending'; //promise当前的状态\n    self.data = undefined; //promise的值\n    self.onResolvedCallback = [];\n    //promise状态变为resolve时的回调函数集，可能有多个\n   function resolve(value) {\n       if(self.status === 'pending') {\n           self.status = 'resolved';\n           self.data = value;\n           for(var i = 0; i < self.onResolvedCallback.length; i++) {\n               self.onResolvedCallback[i](value);\n           }\n       }\n   }\n   executor(resolve);\n};\nPromise.prototype.then = function (resolve) {\n    this.onResolvedCallback.push(resolve);\n};\n```\n#### 添加reject结果\n\n```js\nfunction Promise(executor) {\n    var self = this;\n    self.status = 'pending'; //promise当前的状态\n    self.data = undefined; //promise的值\n    self.onResolvedCallback = [];\n    //promise状态变为resolve时的回调函数集，可能有多个\n    self.onRejectedCallback = [];\n    //promise状态变为reject时的回调函数集，可能有多个\n   function resolve(value) {\n       if(self.status === 'pending') {\n           self.status = 'resolved';\n           self.data = value;\n           for(var i = 0; i < self.onResolvedCallback.length; i++) {\n               self.onResolvedCallback[i](value);\n           }\n       }\n   }\n\n   function reject(reason) {\n        if(self.status === 'pending') {\n            self.status = 'rejected';\n            self.data = reason;\n            for(var i = 0; i < self.onRejectedCallback.length; i++) {\n                self.onRejectedCallback[i](reason);\n            }\n        }\n   }\n\n   try {\n       executor(resolve, reject);\n   } catch (e){\n       reject(e);\n   }\n};\nPromise.prototype.then = function (onResolve, onReject) {\n    this.onResolvedCallback.push(onResolve);\n    this.onRejectedCallback.push(onReject);\n};\n```\n小结：\n1. **executor**函数作为实参在创建**Promise**对象时传入**Promise**构造函数。\n2. **resolve**和**reject**函数作为实参传入**executor**函数。\n3. **value**作为实参传入**resolve**和**reject**函数。\n#### 如果executor自执行函数中的resolve函数立即触发时，发现Promise失效\n\n```js\nconst promise = new Promise((resolve) => {\n    resolve(1);\n});\npromise.then((a) => alert(a));\n\n```\n将promise的resolve和reject异步执行\n\n```js\nfunction resolve(value) {\n    setTimeout(function () {\n        if(self.status === 'pending') {\n            self.status = 'resolved';\n            self.data = value;\n            for(var i = 0; i < self.onResolvedCallback.length; i++) {\n                self.onResolvedCallback[i](value);\n            }\n        }\n    })\n}\n\nfunction reject(reason) {\n    setTimeout(function () {\n        if(self.status === 'pending') {\n            self.status = 'rejected';\n            self.data = reason;\n            for(var i = 0; i < self.onRejectedCallback.length; i++) {\n                self.onRejectedCallback[i](reason);\n            }\n        }\n    })\n}\n```\n### then方法\n\n```js\npromise.then(onFulfilled, onRejected)\n```\n1.  **then**方法返回一个新的**promise**对象。\n1.  **executor**自执行函数中的**resolve**参数调用时执行**then**方法的第一个回调函数**onResolved**。\n1.  **executor**自执行函数中的**reject**参数调用时执行**then**方法的第二个回调函数**onRejected**。\n\n```js\nPromise.prototype.then = function (onResolved, onRejected) {\n    var self = this;\n    var promise2;\n    onResolved = typeof onResolved === 'function' \n                ? onResolved \n                : function (value) {return value};\n    onRejected = typeof onRejected === 'function' \n                ? onRejected \n                : function (reason) {throw reason};\n    //promise对象当前状态为resolved\n    if(self.status === 'resolved') {\n        return promise2 = new Promise(function (resolve, reject) {\n            try {\n                //调用onResolve回调函数\n                var x = onResolved(self.data);\n                //如果onResolve回调函数返回值为一个promise对象\n                if(x instanceof  Promise) {\n                    //将它的结果作为promise2的结果\n                    x.then(resolve, reject);\n                } else {\n                    resolve(x);//执行promise2的onResolve回调\n           }        \n            } catch (e) {\n                reject(e); //执行promise2的onReject回调\n            }\n        })\n    }\n    //promise对象当前状态为rejected\n    if(self.status === 'rejected') {\n        return promise2 = new Promise(function (resolve, reject) {\n            try {\n                var x = onRejected(self.data);\n                if (x instanceof Promise) {\n                    x.then(resolve, reject)\n                } else {\n                    resolve(x)\n                }\n            } catch (e) {\n                reject(e)\n            }\n        })\n    }\n    //promise对象当前状态为pending\n    //此时并不能确定调用onResolved还是onRejected，需要等当前Promise状态确定。\n    //所以需要将callBack放入promise1的回调数组中\n    if(self.status === 'pending') {\n        return promise2 = new Promise(function (resolve, reject) {\n            self.onResolvedCallback.push(function (value) {\n                try {\n                    var x = onResolved(self.data);\n                    if (x instanceof Promise) {\n                        x.then(resolve, reject);\n                    } else {\n                        resolve(x);\n          }\n                } catch (e) {\n                    reject(e);\n                }\n            })\n            self.onRejectedCallback.push(function(reason) {\n                try {\n                    var x = onRejected(self.data);\n                    if (x instanceof Promise) {\n                        x.then(resolve, reject)\n                    } else {\n                        resolve(x);\n                    }\n                } catch (e) {\n                    reject(e)\n                }\n            })\n        })\n    }\n};\n```\n### 完整代码\n\n```js\nvar Promise = (function() {\n    function Promise(resolver) {\n        if (typeof resolver !== 'function') { //resolver必须是函数\n            throw new TypeError('Promise resolver ' + resolver + ' is not a function')\n        }\n        if (!(this instanceof Promise)) return new Promise(resolver)\n\n        var self = this //保存this\n        self.callbacks = [] //保存onResolve和onReject函数集合\n        self.status = 'pending' //当前状态\n\n        function resolve(value) {\n            setTimeout(function() { //异步调用\n                if (self.status !== 'pending') {\n                    return\n                }\n                self.status = 'resolved' //修改状态\n                self.data = value\n\n                for (var i = 0; i < self.callbacks.length; i++) {\n                    self.callbacks[i].onResolved(value)\n                }\n            })\n        }\n\n        function reject(reason) {\n            setTimeout(function(){ //异步调用\n                if (self.status !== 'pending') {\n                    return\n                }\n                self.status = 'rejected' //修改状态\n                self.data = reason\n\n                for (var i = 0; i < self.callbacks.length; i++) {\n                    self.callbacks[i].onRejected(reason)\n                }\n            })\n        }\n\n        try{\n            resolver(resolve, reject) //执行resolver函数\n        } catch(e) {\n            reject(e)\n        }\n    }\n\n    function resolvePromise(promise, x, resolve, reject) {\n        var then\n        var thenCalledOrThrow = false\n\n        if (promise === x) {\n            return reject(new TypeError('Chaining cycle detected for promise!'))\n        }\n\n        if ((x !== null) && ((typeof x === 'object') || (typeof x === 'function'))) {\n            try {\n                then = x.then\n                if (typeof then === 'function') {\n                    then.call(x, function rs(y) {\n                        if (thenCalledOrThrow) return\n                        thenCalledOrThrow = true\n                        return resolvePromise(promise, y, resolve, reject)\n                    }, function rj(r) {\n                        if (thenCalledOrThrow) return\n                        thenCalledOrThrow = true\n                        return reject(r)\n                    })\n                } else {\n                    return resolve(x)\n                }\n            } catch(e) {\n                if (thenCalledOrThrow) return\n                thenCalledOrThrow = true\n                return reject(e)\n            }\n        } else {\n            return resolve(x)\n        }\n    }\n\n    Promise.prototype.then = function(onResolved, onRejected) {\n        //健壮性处理，处理点击穿透\n        onResolved = typeof onResolved === 'function' ? onResolved : function(v){return v}\n        onRejected = typeof onRejected === 'function' ? onRejected : function(r){throw r}\n        var self = this\n        var promise2\n\n        //promise状态为resolved\n        if (self.status === 'resolved') {\n            return promise2 = new Promise(function(resolve, reject) {\n                setTimeout(function() {\n                    try {\n                        //调用then方法的onResolved回调\n                        var x = onResolved(self.data)\n                        //根据x的值修改promise2的状态\n                        resolvePromise(promise2, x, resolve, reject)\n                    } catch(e) {\n                        //promise2状态变为rejected\n                        return reject(e)\n                    }\n                })\n            })\n        }\n\n        //promise状态为rejected\n        if (self.status === 'rejected') {\n            return promise2 = new Promise(function(resolve, reject) {\n                setTimeout(function() {\n                    try {\n                        //调用then方法的onReject回调\n                        var x = onRejected(self.data)\n                        //根据x的值修改promise2的状态\n                        resolvePromise(promise2, x, resolve, reject)\n                    } catch(e) {\n                        //promise2状态变为rejected\n                        return reject(e)\n                    }\n                })\n            })\n        }\n\n        //promise状态为pending\n        //需要等待promise的状态改变\n        if (self.status === 'pending') {\n            return promise2 = new Promise(function(resolve, reject) {\n                self.callbacks.push({\n                    onResolved: function(value) {\n                        try {\n                            //调用then方法的onResolved回调\n                            var x = onResolved(value)\n                            //根据x的值修改promise2的状态\n                            resolvePromise(promise2, x, resolve, reject)\n                        } catch(e) {\n                            //promise2状态变为rejected\n                            return reject(e)\n                        }\n                    },\n                    onRejected: function(reason) {\n                        try {\n                            //调用then方法的onResolved回调\n                            var x = onRejected(reason)\n                            //根据x的值修改promise2的状态\n                            resolvePromise(promise2, x, resolve, reject)\n                        } catch(e) {\n                            //promise2状态变为rejected\n                            return reject(e)\n                        }\n                    }\n                })\n            })\n        }\n    }\n\n    //获取当前Promise传递的值\n    Promise.prototype.valueOf = function() {\n        return this.data\n    }\n\n    //由then方法实现catch方法\n    Promise.prototype.catch = function(onRejected) {\n        return this.then(null, onRejected)\n    }\n\n    //finally方法\n    Promise.prototype.finally = function(fn) {\n        return this.then(function(v){\n            setTimeout(fn)\n            return v\n        }, function(r){\n            setTimeout(fn)\n            throw r\n        })\n    }\n\n    Promise.prototype.spread = function(fn, onRejected) {\n        return this.then(function(values) {\n            return fn.apply(null, values)\n        }, onRejected)\n    }\n\n    Promise.prototype.inject = function(fn, onRejected) {\n        return this.then(function(v) {\n            return fn.apply(null, fn.toString().match(/\\((.*?)\\)/)[1].split(',').map(function(key){\n                return v[key];\n            }))\n        }, onRejected)\n    }\n\n    Promise.prototype.delay = function(duration) {\n        return this.then(function(value) {\n            return new Promise(function(resolve, reject) {\n                setTimeout(function() {\n                    resolve(value)\n                }, duration)\n            })\n        }, function(reason) {\n            return new Promise(function(resolve, reject) {\n                setTimeout(function() {\n                    reject(reason)\n                }, duration)\n            })\n        })\n    }\n\n    Promise.all = function(promises) {\n        return new Promise(function(resolve, reject) {\n            var resolvedCounter = 0\n            var promiseNum = promises.length\n            var resolvedValues = new Array(promiseNum)\n            for (var i = 0; i < promiseNum; i++) {\n                (function(i) {\n                    Promise.resolve(promises[i]).then(function(value) {\n                        resolvedCounter++\n                        resolvedValues[i] = value\n                        if (resolvedCounter == promiseNum) {\n                            return resolve(resolvedValues)\n                        }\n                    }, function(reason) {\n                        return reject(reason)\n                    })\n                })(i)\n            }\n        })\n    }\n\n    Promise.race = function(promises) {\n        return new Promise(function(resolve, reject) {\n            for (var i = 0; i < promises.length; i++) {\n                Promise.resolve(promises[i]).then(function(value) {\n                    return resolve(value)\n                }, function(reason) {\n                    return reject(reason)\n                })\n            }\n        })\n    }\n\n    Promise.resolve = function(value) {\n        var promise = new Promise(function(resolve, reject) {\n            resolvePromise(promise, value, resolve, reject)\n        })\n        return promise\n    }\n\n    Promise.reject = function(reason) {\n        return new Promise(function(resolve, reject) {\n            reject(reason)\n        })\n    }\n\n    Promise.fcall = function(fn){\n        // 虽然fn可以接收到上一层then里传来的参数，但是其实是undefined，所以跟没有是一样的，因为resolve没参数啊\n        return Promise.resolve().then(fn)\n    }\n\n    Promise.done = Promise.stop = function(){\n        return new Promise(function(){})\n    }\n\n    Promise.deferred = Promise.defer = function() {\n        var dfd = {}\n        dfd.promise = new Promise(function(resolve, reject) {\n            dfd.resolve = resolve\n            dfd.reject = reject\n        })\n        return dfd\n    }\n\n    try { // CommonJS compliance\n        module.exports = Promise\n    } catch(e) {}\n\n    return Promise\n})()\n```\n### 参考\n[Promise实现原理](https://www.jianshu.com/p/43de678e918a)  \n[Promise原理与实现](https://www.jianshu.com/p/b4f0425b22a1)\n\n\n\n\n\n\n\n","slug":"promise原理和实现","published":1,"updated":"2020-01-24T14:55:13.000Z","comments":1,"photos":[],"link":"","_id":"ckbftlm73001v7w2p9cj21z4a","content":"<h3 id=\"什么是Promise\"><a href=\"#什么是Promise\" class=\"headerlink\" title=\"什么是Promise\"></a>什么是Promise</h3><p>Promise 对象用于表示一个异步操作的最终完成 (或失败), 及其结果值.</p>\n<a id=\"more\"></a>\n<h3 id=\"Promise规范\"><a href=\"#Promise规范\" class=\"headerlink\" title=\"Promise规范\"></a>Promise规范</h3><ul>\n<li>ES6中使用<a href=\"https://juejin.im/post/5c4b0423e51d4525211c0fbc\" target=\"_blank\" rel=\"noopener\">Promise/A+</a>规范。</li>\n<li>Promise的标准理解<ul>\n<li>promise对象有三种状态<strong>pending</strong>、<strong>fulfilled</strong>和<strong>rejected</strong>。</li>\n<li>promise对象的状态必须有并且只有上述三种当中的一种。</li>\n<li>状态的改变只能是从pending到fulfilled或者pending到rejected。</li>\n<li>then方法返回一个promise。then 方法可以被同一个 promise 调用多次。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promise.then(onFulfilled, onRejected)</span><br></pre></td></tr></table></figure>\n<h3 id=\"Promise实现\"><a href=\"#Promise实现\" class=\"headerlink\" title=\"Promise实现\"></a>Promise实现</h3></li>\n</ul>\n</li>\n</ul>\n<ol>\n<li>构造函数<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Promise</span>(<span class=\"params\">resolver</span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure></li>\n<li>原型链<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.then = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.catch = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure></li>\n<li>静态方法<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.reject = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.all = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.race = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Promise基本结构\"><a href=\"#Promise基本结构\" class=\"headerlink\" title=\"Promise基本结构\"></a>Promise基本结构</h3></li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> promise=<span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    resolve(<span class=\"string\">'FULFILLED'</span>)</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">promise.then(<span class=\"function\"><span class=\"params\">a</span>=&gt;</span> alert(a));</span><br><span class=\"line\">promise.then(<span class=\"function\"><span class=\"params\">a</span> =&gt;</span> alert(a+<span class=\"number\">1</span>));</span><br></pre></td></tr></table></figure>\n<h3 id=\"Promise构造函数\"><a href=\"#Promise构造函数\" class=\"headerlink\" title=\"Promise构造函数\"></a>Promise构造函数</h3><p>构造函数用法总结：</p>\n<ol>\n<li>构造函数接收一个<strong>executor</strong>立即执行函数</li>\n<li><strong>executor</strong>立即执行函数接收一个<strong>resolve</strong>函数</li>\n<li><strong>promise</strong>对象的<strong>then</strong>方法绑定状态变为<strong>fulfilled</strong>时的回调</li>\n<li><strong>resolve</strong>函数被调用时会触发<strong>then</strong>方法中的回调<h4 id=\"构造函数的初步实现\"><a href=\"#构造函数的初步实现\" class=\"headerlink\" title=\"构造函数的初步实现\"></a>构造函数的初步实现</h4></li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Promise</span>(<span class=\"params\">executor</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    self.status = <span class=\"string\">'pending'</span>; <span class=\"comment\">//promise当前的状态</span></span><br><span class=\"line\">    self.data = <span class=\"literal\">undefined</span>; <span class=\"comment\">//promise的值</span></span><br><span class=\"line\">    self.onResolvedCallback = [];</span><br><span class=\"line\">    <span class=\"comment\">//promise状态变为resolve时的回调函数集，可能有多个</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolve</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(self.status === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">           self.status = <span class=\"string\">'resolved'</span>;</span><br><span class=\"line\">           self.data = value;</span><br><span class=\"line\">           <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; self.onResolvedCallback.length; i++) &#123;</span><br><span class=\"line\">               self.onResolvedCallback[i](value);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   executor(resolve);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.then = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onResolvedCallback.push(resolve);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"添加reject结果\"><a href=\"#添加reject结果\" class=\"headerlink\" title=\"添加reject结果\"></a>添加reject结果</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Promise</span>(<span class=\"params\">executor</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    self.status = <span class=\"string\">'pending'</span>; <span class=\"comment\">//promise当前的状态</span></span><br><span class=\"line\">    self.data = <span class=\"literal\">undefined</span>; <span class=\"comment\">//promise的值</span></span><br><span class=\"line\">    self.onResolvedCallback = [];</span><br><span class=\"line\">    <span class=\"comment\">//promise状态变为resolve时的回调函数集，可能有多个</span></span><br><span class=\"line\">    self.onRejectedCallback = [];</span><br><span class=\"line\">    <span class=\"comment\">//promise状态变为reject时的回调函数集，可能有多个</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolve</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(self.status === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">           self.status = <span class=\"string\">'resolved'</span>;</span><br><span class=\"line\">           self.data = value;</span><br><span class=\"line\">           <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; self.onResolvedCallback.length; i++) &#123;</span><br><span class=\"line\">               self.onResolvedCallback[i](value);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reject</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(self.status === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">            self.status = <span class=\"string\">'rejected'</span>;</span><br><span class=\"line\">            self.data = reason;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; self.onRejectedCallback.length; i++) &#123;</span><br><span class=\"line\">                self.onRejectedCallback[i](reason);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">       executor(resolve, reject);</span><br><span class=\"line\">   &#125; <span class=\"keyword\">catch</span> (e)&#123;</span><br><span class=\"line\">       reject(e);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.then = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">onResolve, onReject</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onResolvedCallback.push(onResolve);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onRejectedCallback.push(onReject);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>小结：</p>\n<ol>\n<li><strong>executor</strong>函数作为实参在创建<strong>Promise</strong>对象时传入<strong>Promise</strong>构造函数。</li>\n<li><strong>resolve</strong>和<strong>reject</strong>函数作为实参传入<strong>executor</strong>函数。</li>\n<li><strong>value</strong>作为实参传入<strong>resolve</strong>和<strong>reject</strong>函数。<h4 id=\"如果executor自执行函数中的resolve函数立即触发时，发现Promise失效\"><a href=\"#如果executor自执行函数中的resolve函数立即触发时，发现Promise失效\" class=\"headerlink\" title=\"如果executor自执行函数中的resolve函数立即触发时，发现Promise失效\"></a>如果executor自执行函数中的resolve函数立即触发时，发现Promise失效</h4></li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    resolve(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">promise.then(<span class=\"function\">(<span class=\"params\">a</span>) =&gt;</span> alert(a));</span><br></pre></td></tr></table></figure>\n<p>将promise的resolve和reject异步执行</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolve</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(self.status === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">            self.status = <span class=\"string\">'resolved'</span>;</span><br><span class=\"line\">            self.data = value;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; self.onResolvedCallback.length; i++) &#123;</span><br><span class=\"line\">                self.onResolvedCallback[i](value);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reject</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(self.status === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">            self.status = <span class=\"string\">'rejected'</span>;</span><br><span class=\"line\">            self.data = reason;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; self.onRejectedCallback.length; i++) &#123;</span><br><span class=\"line\">                self.onRejectedCallback[i](reason);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"then方法\"><a href=\"#then方法\" class=\"headerlink\" title=\"then方法\"></a>then方法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promise.then(onFulfilled, onRejected)</span><br></pre></td></tr></table></figure>\n<ol>\n<li><strong>then</strong>方法返回一个新的<strong>promise</strong>对象。</li>\n<li><strong>executor</strong>自执行函数中的<strong>resolve</strong>参数调用时执行<strong>then</strong>方法的第一个回调函数<strong>onResolved</strong>。</li>\n<li><strong>executor</strong>自执行函数中的<strong>reject</strong>参数调用时执行<strong>then</strong>方法的第二个回调函数<strong>onRejected</strong>。</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.then = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">onResolved, onRejected</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> promise2;</span><br><span class=\"line\">    onResolved = <span class=\"keyword\">typeof</span> onResolved === <span class=\"string\">'function'</span> </span><br><span class=\"line\">                ? onResolved </span><br><span class=\"line\">                : <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;<span class=\"keyword\">return</span> value&#125;;</span><br><span class=\"line\">    onRejected = <span class=\"keyword\">typeof</span> onRejected === <span class=\"string\">'function'</span> </span><br><span class=\"line\">                ? onRejected </span><br><span class=\"line\">                : <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">reason</span>) </span>&#123;<span class=\"keyword\">throw</span> reason&#125;;</span><br><span class=\"line\">    <span class=\"comment\">//promise对象当前状态为resolved</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(self.status === <span class=\"string\">'resolved'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> promise2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//调用onResolve回调函数</span></span><br><span class=\"line\">                <span class=\"keyword\">var</span> x = onResolved(self.data);</span><br><span class=\"line\">                <span class=\"comment\">//如果onResolve回调函数返回值为一个promise对象</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(x <span class=\"keyword\">instanceof</span>  <span class=\"built_in\">Promise</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//将它的结果作为promise2的结果</span></span><br><span class=\"line\">                    x.then(resolve, reject);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    resolve(x);<span class=\"comment\">//执行promise2的onResolve回调</span></span><br><span class=\"line\">           &#125;        </span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">                reject(e); <span class=\"comment\">//执行promise2的onReject回调</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//promise对象当前状态为rejected</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(self.status === <span class=\"string\">'rejected'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> promise2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> x = onRejected(self.data);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (x <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>) &#123;</span><br><span class=\"line\">                    x.then(resolve, reject)</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    resolve(x)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">                reject(e)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//promise对象当前状态为pending</span></span><br><span class=\"line\">    <span class=\"comment\">//此时并不能确定调用onResolved还是onRejected，需要等当前Promise状态确定。</span></span><br><span class=\"line\">    <span class=\"comment\">//所以需要将callBack放入promise1的回调数组中</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(self.status === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> promise2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">            self.onResolvedCallback.push(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> x = onResolved(self.data);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (x <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>) &#123;</span><br><span class=\"line\">                        x.then(resolve, reject);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        resolve(x);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">                    reject(e);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            self.onRejectedCallback.push(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> x = onRejected(self.data);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (x <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>) &#123;</span><br><span class=\"line\">                        x.then(resolve, reject)</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        resolve(x);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">                    reject(e)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">Promise</span> = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Promise</span>(<span class=\"params\">resolver</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> resolver !== <span class=\"string\">'function'</span>) &#123; <span class=\"comment\">//resolver必须是函数</span></span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'Promise resolver '</span> + resolver + <span class=\"string\">' is not a function'</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!(<span class=\"keyword\">this</span> <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>)) <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(resolver)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span> <span class=\"comment\">//保存this</span></span><br><span class=\"line\">        self.callbacks = [] <span class=\"comment\">//保存onResolve和onReject函数集合</span></span><br><span class=\"line\">        self.status = <span class=\"string\">'pending'</span> <span class=\"comment\">//当前状态</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolve</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">            setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">//异步调用</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (self.status !== <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                self.status = <span class=\"string\">'resolved'</span> <span class=\"comment\">//修改状态</span></span><br><span class=\"line\">                self.data = value</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; self.callbacks.length; i++) &#123;</span><br><span class=\"line\">                    self.callbacks[i].onResolved(value)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reject</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">            setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"comment\">//异步调用</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (self.status !== <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                self.status = <span class=\"string\">'rejected'</span> <span class=\"comment\">//修改状态</span></span><br><span class=\"line\">                self.data = reason</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; self.callbacks.length; i++) &#123;</span><br><span class=\"line\">                    self.callbacks[i].onRejected(reason)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            resolver(resolve, reject) <span class=\"comment\">//执行resolver函数</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">            reject(e)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolvePromise</span>(<span class=\"params\">promise, x, resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> then</span><br><span class=\"line\">        <span class=\"keyword\">var</span> thenCalledOrThrow = <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (promise === x) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> reject(<span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'Chaining cycle detected for promise!'</span>))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((x !== <span class=\"literal\">null</span>) &amp;&amp; ((<span class=\"keyword\">typeof</span> x === <span class=\"string\">'object'</span>) || (<span class=\"keyword\">typeof</span> x === <span class=\"string\">'function'</span>))) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                then = x.then</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> then === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">                    then.call(x, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">rs</span>(<span class=\"params\">y</span>) </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (thenCalledOrThrow) <span class=\"keyword\">return</span></span><br><span class=\"line\">                        thenCalledOrThrow = <span class=\"literal\">true</span></span><br><span class=\"line\">                        <span class=\"keyword\">return</span> resolvePromise(promise, y, resolve, reject)</span><br><span class=\"line\">                    &#125;, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">rj</span>(<span class=\"params\">r</span>) </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (thenCalledOrThrow) <span class=\"keyword\">return</span></span><br><span class=\"line\">                        thenCalledOrThrow = <span class=\"literal\">true</span></span><br><span class=\"line\">                        <span class=\"keyword\">return</span> reject(r)</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> resolve(x)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (thenCalledOrThrow) <span class=\"keyword\">return</span></span><br><span class=\"line\">                thenCalledOrThrow = <span class=\"literal\">true</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> reject(e)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> resolve(x)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.prototype.then = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">onResolved, onRejected</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//健壮性处理，处理点击穿透</span></span><br><span class=\"line\">        onResolved = <span class=\"keyword\">typeof</span> onResolved === <span class=\"string\">'function'</span> ? onResolved : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>)</span>&#123;<span class=\"keyword\">return</span> v&#125;</span><br><span class=\"line\">        onRejected = <span class=\"keyword\">typeof</span> onRejected === <span class=\"string\">'function'</span> ? onRejected : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">r</span>)</span>&#123;<span class=\"keyword\">throw</span> r&#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> promise2</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//promise状态为resolved</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (self.status === <span class=\"string\">'resolved'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> promise2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">                setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//调用then方法的onResolved回调</span></span><br><span class=\"line\">                        <span class=\"keyword\">var</span> x = onResolved(self.data)</span><br><span class=\"line\">                        <span class=\"comment\">//根据x的值修改promise2的状态</span></span><br><span class=\"line\">                        resolvePromise(promise2, x, resolve, reject)</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//promise2状态变为rejected</span></span><br><span class=\"line\">                        <span class=\"keyword\">return</span> reject(e)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//promise状态为rejected</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (self.status === <span class=\"string\">'rejected'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> promise2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">                setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//调用then方法的onReject回调</span></span><br><span class=\"line\">                        <span class=\"keyword\">var</span> x = onRejected(self.data)</span><br><span class=\"line\">                        <span class=\"comment\">//根据x的值修改promise2的状态</span></span><br><span class=\"line\">                        resolvePromise(promise2, x, resolve, reject)</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//promise2状态变为rejected</span></span><br><span class=\"line\">                        <span class=\"keyword\">return</span> reject(e)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//promise状态为pending</span></span><br><span class=\"line\">        <span class=\"comment\">//需要等待promise的状态改变</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (self.status === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> promise2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">                self.callbacks.push(&#123;</span><br><span class=\"line\">                    onResolved: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                            <span class=\"comment\">//调用then方法的onResolved回调</span></span><br><span class=\"line\">                            <span class=\"keyword\">var</span> x = onResolved(value)</span><br><span class=\"line\">                            <span class=\"comment\">//根据x的值修改promise2的状态</span></span><br><span class=\"line\">                            resolvePromise(promise2, x, resolve, reject)</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">                            <span class=\"comment\">//promise2状态变为rejected</span></span><br><span class=\"line\">                            <span class=\"keyword\">return</span> reject(e)</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    onRejected: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                            <span class=\"comment\">//调用then方法的onResolved回调</span></span><br><span class=\"line\">                            <span class=\"keyword\">var</span> x = onRejected(reason)</span><br><span class=\"line\">                            <span class=\"comment\">//根据x的值修改promise2的状态</span></span><br><span class=\"line\">                            resolvePromise(promise2, x, resolve, reject)</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">                            <span class=\"comment\">//promise2状态变为rejected</span></span><br><span class=\"line\">                            <span class=\"keyword\">return</span> reject(e)</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//获取当前Promise传递的值</span></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.prototype.valueOf = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.data</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//由then方法实现catch方法</span></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.prototype.catch = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">onRejected</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.then(<span class=\"literal\">null</span>, onRejected)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//finally方法</span></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.prototype.finally = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>)</span>&#123;</span><br><span class=\"line\">            setTimeout(fn)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> v</span><br><span class=\"line\">        &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">r</span>)</span>&#123;</span><br><span class=\"line\">            setTimeout(fn)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> r</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.prototype.spread = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn, onRejected</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">values</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> fn.apply(<span class=\"literal\">null</span>, values)</span><br><span class=\"line\">        &#125;, onRejected)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.prototype.inject = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn, onRejected</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> fn.apply(<span class=\"literal\">null</span>, fn.toString().match(<span class=\"regexp\">/\\((.*?)\\)/</span>)[<span class=\"number\">1</span>].split(<span class=\"string\">','</span>).map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>)</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> v[key];</span><br><span class=\"line\">            &#125;))</span><br><span class=\"line\">        &#125;, onRejected)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.prototype.delay = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">duration</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">                setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                    resolve(value)</span><br><span class=\"line\">                &#125;, duration)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">                setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                    reject(reason)</span><br><span class=\"line\">                &#125;, duration)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.all = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">promises</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> resolvedCounter = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> promiseNum = promises.length</span><br><span class=\"line\">            <span class=\"keyword\">var</span> resolvedValues = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(promiseNum)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; promiseNum; i++) &#123;</span><br><span class=\"line\">                (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">                    <span class=\"built_in\">Promise</span>.resolve(promises[i]).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">                        resolvedCounter++</span><br><span class=\"line\">                        resolvedValues[i] = value</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (resolvedCounter == promiseNum) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">return</span> resolve(resolvedValues)</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> reject(reason)</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                &#125;)(i)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.race = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">promises</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; promises.length; i++) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">Promise</span>.resolve(promises[i]).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> resolve(value)</span><br><span class=\"line\">                &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> reject(reason)</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.resolve = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">            resolvePromise(promise, value, resolve, reject)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> promise</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.reject = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">            reject(reason)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.fcall = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 虽然fn可以接收到上一层then里传来的参数，但是其实是undefined，所以跟没有是一样的，因为resolve没参数啊</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve().then(fn)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.done = <span class=\"built_in\">Promise</span>.stop = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.deferred = <span class=\"built_in\">Promise</span>.defer = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> dfd = &#123;&#125;</span><br><span class=\"line\">        dfd.promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">            dfd.resolve = resolve</span><br><span class=\"line\">            dfd.reject = reject</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dfd</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123; <span class=\"comment\">// CommonJS compliance</span></span><br><span class=\"line\">        <span class=\"built_in\">module</span>.exports = <span class=\"built_in\">Promise</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span>(e) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span></span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://www.jianshu.com/p/43de678e918a\" target=\"_blank\" rel=\"noopener\">Promise实现原理</a><br><a href=\"https://www.jianshu.com/p/b4f0425b22a1\" target=\"_blank\" rel=\"noopener\">Promise原理与实现</a></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"什么是Promise\"><a href=\"#什么是Promise\" class=\"headerlink\" title=\"什么是Promise\"></a>什么是Promise</h3><p>Promise 对象用于表示一个异步操作的最终完成 (或失败), 及其结果值.</p>","more":"<h3 id=\"Promise规范\"><a href=\"#Promise规范\" class=\"headerlink\" title=\"Promise规范\"></a>Promise规范</h3><ul>\n<li>ES6中使用<a href=\"https://juejin.im/post/5c4b0423e51d4525211c0fbc\" target=\"_blank\" rel=\"noopener\">Promise/A+</a>规范。</li>\n<li>Promise的标准理解<ul>\n<li>promise对象有三种状态<strong>pending</strong>、<strong>fulfilled</strong>和<strong>rejected</strong>。</li>\n<li>promise对象的状态必须有并且只有上述三种当中的一种。</li>\n<li>状态的改变只能是从pending到fulfilled或者pending到rejected。</li>\n<li>then方法返回一个promise。then 方法可以被同一个 promise 调用多次。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promise.then(onFulfilled, onRejected)</span><br></pre></td></tr></table></figure>\n<h3 id=\"Promise实现\"><a href=\"#Promise实现\" class=\"headerlink\" title=\"Promise实现\"></a>Promise实现</h3></li>\n</ul>\n</li>\n</ul>\n<ol>\n<li>构造函数<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Promise</span>(<span class=\"params\">resolver</span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure></li>\n<li>原型链<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.then = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.catch = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure></li>\n<li>静态方法<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.reject = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.all = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.race = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Promise基本结构\"><a href=\"#Promise基本结构\" class=\"headerlink\" title=\"Promise基本结构\"></a>Promise基本结构</h3></li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> promise=<span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    resolve(<span class=\"string\">'FULFILLED'</span>)</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">promise.then(<span class=\"function\"><span class=\"params\">a</span>=&gt;</span> alert(a));</span><br><span class=\"line\">promise.then(<span class=\"function\"><span class=\"params\">a</span> =&gt;</span> alert(a+<span class=\"number\">1</span>));</span><br></pre></td></tr></table></figure>\n<h3 id=\"Promise构造函数\"><a href=\"#Promise构造函数\" class=\"headerlink\" title=\"Promise构造函数\"></a>Promise构造函数</h3><p>构造函数用法总结：</p>\n<ol>\n<li>构造函数接收一个<strong>executor</strong>立即执行函数</li>\n<li><strong>executor</strong>立即执行函数接收一个<strong>resolve</strong>函数</li>\n<li><strong>promise</strong>对象的<strong>then</strong>方法绑定状态变为<strong>fulfilled</strong>时的回调</li>\n<li><strong>resolve</strong>函数被调用时会触发<strong>then</strong>方法中的回调<h4 id=\"构造函数的初步实现\"><a href=\"#构造函数的初步实现\" class=\"headerlink\" title=\"构造函数的初步实现\"></a>构造函数的初步实现</h4></li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Promise</span>(<span class=\"params\">executor</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    self.status = <span class=\"string\">'pending'</span>; <span class=\"comment\">//promise当前的状态</span></span><br><span class=\"line\">    self.data = <span class=\"literal\">undefined</span>; <span class=\"comment\">//promise的值</span></span><br><span class=\"line\">    self.onResolvedCallback = [];</span><br><span class=\"line\">    <span class=\"comment\">//promise状态变为resolve时的回调函数集，可能有多个</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolve</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(self.status === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">           self.status = <span class=\"string\">'resolved'</span>;</span><br><span class=\"line\">           self.data = value;</span><br><span class=\"line\">           <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; self.onResolvedCallback.length; i++) &#123;</span><br><span class=\"line\">               self.onResolvedCallback[i](value);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   executor(resolve);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.then = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onResolvedCallback.push(resolve);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"添加reject结果\"><a href=\"#添加reject结果\" class=\"headerlink\" title=\"添加reject结果\"></a>添加reject结果</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Promise</span>(<span class=\"params\">executor</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    self.status = <span class=\"string\">'pending'</span>; <span class=\"comment\">//promise当前的状态</span></span><br><span class=\"line\">    self.data = <span class=\"literal\">undefined</span>; <span class=\"comment\">//promise的值</span></span><br><span class=\"line\">    self.onResolvedCallback = [];</span><br><span class=\"line\">    <span class=\"comment\">//promise状态变为resolve时的回调函数集，可能有多个</span></span><br><span class=\"line\">    self.onRejectedCallback = [];</span><br><span class=\"line\">    <span class=\"comment\">//promise状态变为reject时的回调函数集，可能有多个</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolve</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(self.status === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">           self.status = <span class=\"string\">'resolved'</span>;</span><br><span class=\"line\">           self.data = value;</span><br><span class=\"line\">           <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; self.onResolvedCallback.length; i++) &#123;</span><br><span class=\"line\">               self.onResolvedCallback[i](value);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reject</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(self.status === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">            self.status = <span class=\"string\">'rejected'</span>;</span><br><span class=\"line\">            self.data = reason;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; self.onRejectedCallback.length; i++) &#123;</span><br><span class=\"line\">                self.onRejectedCallback[i](reason);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">       executor(resolve, reject);</span><br><span class=\"line\">   &#125; <span class=\"keyword\">catch</span> (e)&#123;</span><br><span class=\"line\">       reject(e);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.then = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">onResolve, onReject</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onResolvedCallback.push(onResolve);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onRejectedCallback.push(onReject);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>小结：</p>\n<ol>\n<li><strong>executor</strong>函数作为实参在创建<strong>Promise</strong>对象时传入<strong>Promise</strong>构造函数。</li>\n<li><strong>resolve</strong>和<strong>reject</strong>函数作为实参传入<strong>executor</strong>函数。</li>\n<li><strong>value</strong>作为实参传入<strong>resolve</strong>和<strong>reject</strong>函数。<h4 id=\"如果executor自执行函数中的resolve函数立即触发时，发现Promise失效\"><a href=\"#如果executor自执行函数中的resolve函数立即触发时，发现Promise失效\" class=\"headerlink\" title=\"如果executor自执行函数中的resolve函数立即触发时，发现Promise失效\"></a>如果executor自执行函数中的resolve函数立即触发时，发现Promise失效</h4></li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    resolve(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">promise.then(<span class=\"function\">(<span class=\"params\">a</span>) =&gt;</span> alert(a));</span><br></pre></td></tr></table></figure>\n<p>将promise的resolve和reject异步执行</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolve</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(self.status === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">            self.status = <span class=\"string\">'resolved'</span>;</span><br><span class=\"line\">            self.data = value;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; self.onResolvedCallback.length; i++) &#123;</span><br><span class=\"line\">                self.onResolvedCallback[i](value);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reject</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(self.status === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">            self.status = <span class=\"string\">'rejected'</span>;</span><br><span class=\"line\">            self.data = reason;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; self.onRejectedCallback.length; i++) &#123;</span><br><span class=\"line\">                self.onRejectedCallback[i](reason);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"then方法\"><a href=\"#then方法\" class=\"headerlink\" title=\"then方法\"></a>then方法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promise.then(onFulfilled, onRejected)</span><br></pre></td></tr></table></figure>\n<ol>\n<li><strong>then</strong>方法返回一个新的<strong>promise</strong>对象。</li>\n<li><strong>executor</strong>自执行函数中的<strong>resolve</strong>参数调用时执行<strong>then</strong>方法的第一个回调函数<strong>onResolved</strong>。</li>\n<li><strong>executor</strong>自执行函数中的<strong>reject</strong>参数调用时执行<strong>then</strong>方法的第二个回调函数<strong>onRejected</strong>。</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.then = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">onResolved, onRejected</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> promise2;</span><br><span class=\"line\">    onResolved = <span class=\"keyword\">typeof</span> onResolved === <span class=\"string\">'function'</span> </span><br><span class=\"line\">                ? onResolved </span><br><span class=\"line\">                : <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;<span class=\"keyword\">return</span> value&#125;;</span><br><span class=\"line\">    onRejected = <span class=\"keyword\">typeof</span> onRejected === <span class=\"string\">'function'</span> </span><br><span class=\"line\">                ? onRejected </span><br><span class=\"line\">                : <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">reason</span>) </span>&#123;<span class=\"keyword\">throw</span> reason&#125;;</span><br><span class=\"line\">    <span class=\"comment\">//promise对象当前状态为resolved</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(self.status === <span class=\"string\">'resolved'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> promise2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//调用onResolve回调函数</span></span><br><span class=\"line\">                <span class=\"keyword\">var</span> x = onResolved(self.data);</span><br><span class=\"line\">                <span class=\"comment\">//如果onResolve回调函数返回值为一个promise对象</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(x <span class=\"keyword\">instanceof</span>  <span class=\"built_in\">Promise</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//将它的结果作为promise2的结果</span></span><br><span class=\"line\">                    x.then(resolve, reject);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    resolve(x);<span class=\"comment\">//执行promise2的onResolve回调</span></span><br><span class=\"line\">           &#125;        </span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">                reject(e); <span class=\"comment\">//执行promise2的onReject回调</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//promise对象当前状态为rejected</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(self.status === <span class=\"string\">'rejected'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> promise2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> x = onRejected(self.data);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (x <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>) &#123;</span><br><span class=\"line\">                    x.then(resolve, reject)</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    resolve(x)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">                reject(e)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//promise对象当前状态为pending</span></span><br><span class=\"line\">    <span class=\"comment\">//此时并不能确定调用onResolved还是onRejected，需要等当前Promise状态确定。</span></span><br><span class=\"line\">    <span class=\"comment\">//所以需要将callBack放入promise1的回调数组中</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(self.status === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> promise2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">            self.onResolvedCallback.push(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> x = onResolved(self.data);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (x <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>) &#123;</span><br><span class=\"line\">                        x.then(resolve, reject);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        resolve(x);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">                    reject(e);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            self.onRejectedCallback.push(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> x = onRejected(self.data);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (x <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>) &#123;</span><br><span class=\"line\">                        x.then(resolve, reject)</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        resolve(x);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">                    reject(e)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">Promise</span> = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Promise</span>(<span class=\"params\">resolver</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> resolver !== <span class=\"string\">'function'</span>) &#123; <span class=\"comment\">//resolver必须是函数</span></span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'Promise resolver '</span> + resolver + <span class=\"string\">' is not a function'</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!(<span class=\"keyword\">this</span> <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>)) <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(resolver)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span> <span class=\"comment\">//保存this</span></span><br><span class=\"line\">        self.callbacks = [] <span class=\"comment\">//保存onResolve和onReject函数集合</span></span><br><span class=\"line\">        self.status = <span class=\"string\">'pending'</span> <span class=\"comment\">//当前状态</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolve</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">            setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">//异步调用</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (self.status !== <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                self.status = <span class=\"string\">'resolved'</span> <span class=\"comment\">//修改状态</span></span><br><span class=\"line\">                self.data = value</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; self.callbacks.length; i++) &#123;</span><br><span class=\"line\">                    self.callbacks[i].onResolved(value)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reject</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">            setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"comment\">//异步调用</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (self.status !== <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                self.status = <span class=\"string\">'rejected'</span> <span class=\"comment\">//修改状态</span></span><br><span class=\"line\">                self.data = reason</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; self.callbacks.length; i++) &#123;</span><br><span class=\"line\">                    self.callbacks[i].onRejected(reason)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            resolver(resolve, reject) <span class=\"comment\">//执行resolver函数</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">            reject(e)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolvePromise</span>(<span class=\"params\">promise, x, resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> then</span><br><span class=\"line\">        <span class=\"keyword\">var</span> thenCalledOrThrow = <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (promise === x) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> reject(<span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'Chaining cycle detected for promise!'</span>))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((x !== <span class=\"literal\">null</span>) &amp;&amp; ((<span class=\"keyword\">typeof</span> x === <span class=\"string\">'object'</span>) || (<span class=\"keyword\">typeof</span> x === <span class=\"string\">'function'</span>))) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                then = x.then</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> then === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">                    then.call(x, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">rs</span>(<span class=\"params\">y</span>) </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (thenCalledOrThrow) <span class=\"keyword\">return</span></span><br><span class=\"line\">                        thenCalledOrThrow = <span class=\"literal\">true</span></span><br><span class=\"line\">                        <span class=\"keyword\">return</span> resolvePromise(promise, y, resolve, reject)</span><br><span class=\"line\">                    &#125;, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">rj</span>(<span class=\"params\">r</span>) </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (thenCalledOrThrow) <span class=\"keyword\">return</span></span><br><span class=\"line\">                        thenCalledOrThrow = <span class=\"literal\">true</span></span><br><span class=\"line\">                        <span class=\"keyword\">return</span> reject(r)</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> resolve(x)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (thenCalledOrThrow) <span class=\"keyword\">return</span></span><br><span class=\"line\">                thenCalledOrThrow = <span class=\"literal\">true</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> reject(e)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> resolve(x)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.prototype.then = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">onResolved, onRejected</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//健壮性处理，处理点击穿透</span></span><br><span class=\"line\">        onResolved = <span class=\"keyword\">typeof</span> onResolved === <span class=\"string\">'function'</span> ? onResolved : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>)</span>&#123;<span class=\"keyword\">return</span> v&#125;</span><br><span class=\"line\">        onRejected = <span class=\"keyword\">typeof</span> onRejected === <span class=\"string\">'function'</span> ? onRejected : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">r</span>)</span>&#123;<span class=\"keyword\">throw</span> r&#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> promise2</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//promise状态为resolved</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (self.status === <span class=\"string\">'resolved'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> promise2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">                setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//调用then方法的onResolved回调</span></span><br><span class=\"line\">                        <span class=\"keyword\">var</span> x = onResolved(self.data)</span><br><span class=\"line\">                        <span class=\"comment\">//根据x的值修改promise2的状态</span></span><br><span class=\"line\">                        resolvePromise(promise2, x, resolve, reject)</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//promise2状态变为rejected</span></span><br><span class=\"line\">                        <span class=\"keyword\">return</span> reject(e)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//promise状态为rejected</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (self.status === <span class=\"string\">'rejected'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> promise2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">                setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//调用then方法的onReject回调</span></span><br><span class=\"line\">                        <span class=\"keyword\">var</span> x = onRejected(self.data)</span><br><span class=\"line\">                        <span class=\"comment\">//根据x的值修改promise2的状态</span></span><br><span class=\"line\">                        resolvePromise(promise2, x, resolve, reject)</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//promise2状态变为rejected</span></span><br><span class=\"line\">                        <span class=\"keyword\">return</span> reject(e)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//promise状态为pending</span></span><br><span class=\"line\">        <span class=\"comment\">//需要等待promise的状态改变</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (self.status === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> promise2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">                self.callbacks.push(&#123;</span><br><span class=\"line\">                    onResolved: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                            <span class=\"comment\">//调用then方法的onResolved回调</span></span><br><span class=\"line\">                            <span class=\"keyword\">var</span> x = onResolved(value)</span><br><span class=\"line\">                            <span class=\"comment\">//根据x的值修改promise2的状态</span></span><br><span class=\"line\">                            resolvePromise(promise2, x, resolve, reject)</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">                            <span class=\"comment\">//promise2状态变为rejected</span></span><br><span class=\"line\">                            <span class=\"keyword\">return</span> reject(e)</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    onRejected: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                            <span class=\"comment\">//调用then方法的onResolved回调</span></span><br><span class=\"line\">                            <span class=\"keyword\">var</span> x = onRejected(reason)</span><br><span class=\"line\">                            <span class=\"comment\">//根据x的值修改promise2的状态</span></span><br><span class=\"line\">                            resolvePromise(promise2, x, resolve, reject)</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">                            <span class=\"comment\">//promise2状态变为rejected</span></span><br><span class=\"line\">                            <span class=\"keyword\">return</span> reject(e)</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//获取当前Promise传递的值</span></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.prototype.valueOf = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.data</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//由then方法实现catch方法</span></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.prototype.catch = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">onRejected</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.then(<span class=\"literal\">null</span>, onRejected)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//finally方法</span></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.prototype.finally = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>)</span>&#123;</span><br><span class=\"line\">            setTimeout(fn)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> v</span><br><span class=\"line\">        &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">r</span>)</span>&#123;</span><br><span class=\"line\">            setTimeout(fn)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> r</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.prototype.spread = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn, onRejected</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">values</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> fn.apply(<span class=\"literal\">null</span>, values)</span><br><span class=\"line\">        &#125;, onRejected)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.prototype.inject = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn, onRejected</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> fn.apply(<span class=\"literal\">null</span>, fn.toString().match(<span class=\"regexp\">/\\((.*?)\\)/</span>)[<span class=\"number\">1</span>].split(<span class=\"string\">','</span>).map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>)</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> v[key];</span><br><span class=\"line\">            &#125;))</span><br><span class=\"line\">        &#125;, onRejected)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.prototype.delay = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">duration</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">                setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                    resolve(value)</span><br><span class=\"line\">                &#125;, duration)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">                setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                    reject(reason)</span><br><span class=\"line\">                &#125;, duration)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.all = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">promises</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> resolvedCounter = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> promiseNum = promises.length</span><br><span class=\"line\">            <span class=\"keyword\">var</span> resolvedValues = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(promiseNum)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; promiseNum; i++) &#123;</span><br><span class=\"line\">                (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">                    <span class=\"built_in\">Promise</span>.resolve(promises[i]).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">                        resolvedCounter++</span><br><span class=\"line\">                        resolvedValues[i] = value</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (resolvedCounter == promiseNum) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">return</span> resolve(resolvedValues)</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> reject(reason)</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                &#125;)(i)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.race = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">promises</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; promises.length; i++) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">Promise</span>.resolve(promises[i]).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> resolve(value)</span><br><span class=\"line\">                &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> reject(reason)</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.resolve = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">            resolvePromise(promise, value, resolve, reject)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> promise</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.reject = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">            reject(reason)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.fcall = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 虽然fn可以接收到上一层then里传来的参数，但是其实是undefined，所以跟没有是一样的，因为resolve没参数啊</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve().then(fn)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.done = <span class=\"built_in\">Promise</span>.stop = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.deferred = <span class=\"built_in\">Promise</span>.defer = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> dfd = &#123;&#125;</span><br><span class=\"line\">        dfd.promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">            dfd.resolve = resolve</span><br><span class=\"line\">            dfd.reject = reject</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dfd</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123; <span class=\"comment\">// CommonJS compliance</span></span><br><span class=\"line\">        <span class=\"built_in\">module</span>.exports = <span class=\"built_in\">Promise</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span>(e) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span></span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://www.jianshu.com/p/43de678e918a\" target=\"_blank\" rel=\"noopener\">Promise实现原理</a><br><a href=\"https://www.jianshu.com/p/b4f0425b22a1\" target=\"_blank\" rel=\"noopener\">Promise原理与实现</a></p>"},{"layout":"[post]","title":"webpack相关问题","date":"2020-04-10T17:07:59.000Z","_content":"\n随着现代前端开发的复杂度和规模越来越庞大，已经不能抛开工程化来独立开发了，如 react 的 jsx 代码必须编译后才能在浏览器中使用；又如 sass 和 less 的代码浏览器也是不支持的。 而如果摒弃了这些开发框架，那么开发的效率将大幅下降。在众多前端工程化工具中，webpack 脱颖而出成为了当今最流行的前端构建工具。 然而大多数的使用者都只是单纯的会使用，而并不知道其深层的原理。希望通过以下的面试题总结可以帮助大家温故知新、查缺补漏，知其然而又知其所以然。\n<!-- more -->\n问题一览\n----\n\n1.  webpack 与 grunt、gulp 的不同？\n2.  与 webpack 类似的工具还有哪些？谈谈你为什么最终选择（或放弃）使用 webpack？\n3.  有哪些常见的 Loader？他们是解决什么问题的？\n4.  有哪些常见的 Plugin？他们是解决什么问题的？\n5.  Loader 和 Plugin 的不同？\n6.  webpack 的构建流程是什么? 从读取配置到输出文件这个过程尽量说全\n7.  是否写过 Loader 和 Plugin？描述一下编写 loader 或 plugin 的思路？\n8.  webpack 的热更新是如何做到的？说明其原理？\n9.  如何利用 webpack 来优化前端性能？（提高性能和体验）\n10.  如何提高 webpack 的构建速度？\n11.  怎么配置单页应用？怎么配置多页应用？\n12.  npm 打包时需要注意哪些？如何利用 webpack 来更好的构建？\n13.  如何在 vue 项目中实现按需加载？\n\n问题解答\n----\n\n### 1. webpack 与 grunt、gulp 的不同？\n\n三者都是前端构建工具，grunt 和 gulp 在早期比较流行，现在 webpack 相对来说比较主流，不过一些轻量化的任务还是会用 gulp 来处理，比如单独打包 CSS 文件等。\n\ngrunt 和 gulp 是基于任务和流（Task、Stream）的。类似 jQuery，找到一个（或一类）文件，对其做一系列链式操作，更新流上的数据， 整条链式操作构成了一个任务，多个任务就构成了整个 web 的构建流程。\n\nwebpack 是基于入口的。webpack 会自动地递归解析入口所需要加载的所有资源文件，然后用不同的 Loader 来处理不同的文件，用 Plugin 来扩展 webpack 功能。\n\n所以总结一下：\n\n*   从构建思路来说\n\ngulp 和 grunt 需要开发者将整个前端构建过程拆分成多个 `Task`，并合理控制所有 `Task` 的调用关系 webpack 需要开发者找到入口，并需要清楚对于不同的资源应该使用什么 Loader 做何种解析和加工\n\n*   对于知识背景来说\n\ngulp 更像后端开发者的思路，需要对于整个流程了如指掌 webpack 更倾向于前端开发者的思路\n\n### 2. 与 webpack 类似的工具还有哪些？谈谈你为什么最终选择（或放弃）使用 webpack？\n\n同样是基于入口的打包工具还有以下几个主流的：\n\n*   webpack\n*   rollup\n*   parcel\n\n**从应用场景上来看：**\n\n*   webpack 适用于大型复杂的前端站点构建\n*   rollup 适用于基础库的打包，如 vue、react\n*   parcel 适用于简单的实验性项目，他可以满足低门槛的快速看到效果\n\n由于 parcel 在打包过程中给出的调试信息十分有限，所以一旦打包出错难以调试，所以不建议复杂的项目使用 parcel\n\n### 3. 有哪些常见的 Loader？他们是解决什么问题的？\n\n*   file-loader：把文件输出到一个文件夹中，在代码中通过相对 URL 去引用输出的文件\n*   url-loader：和 file-loader 类似，但是能在文件很小的情况下以 base64 的方式把文件内容注入到代码中去\n*   source-map-loader：加载额外的 Source Map 文件，以方便断点调试\n*   image-loader：加载并且压缩图片文件\n*   babel-loader：把 ES6 转换成 ES5\n*   css-loader：加载 CSS，支持模块化、压缩、文件导入等特性\n*   style-loader：把 CSS 代码注入到 JavaScript 中，通过 DOM 操作去加载 CSS。\n*   eslint-loader：通过 ESLint 检查 JavaScript 代码\n\n### 4. 有哪些常见的 Plugin？他们是解决什么问题的？\n\n*   define-plugin：定义环境变量\n*   commons-chunk-plugin：提取公共代码\n*   uglifyjs-webpack-plugin：通过 UglifyES 压缩 ES6 代码\n\n### 5.Loader 和 Plugin 的不同？\n\n**不同的作用**\n\n*   **Loader** 直译为 \"加载器\"。Webpack 将一切文件视为模块，但是 webpack 原生是只能解析 js 文件，如果想将其他文件也打包的话，就会用到 loader。 所以 Loader 的作用是让 webpack 拥有了加载和解析非 JavaScript 文件的能力。\n*   **Plugin** 直译为 \"插件\"。Plugin 可以扩展 webpack 的功能，让 webpack 具有更多的灵活性。 在 Webpack 运行的生命周期中会广播出许多事件，Plugin 可以监听这些事件，在合适的时机通过 Webpack 提供的 API 改变输出结果。\n\n**不同的用法**\n\n*   **Loader** 在 module.rules 中配置，也就是说他作为模块的解析规则而存在。 类型为数组，每一项都是一个 Object，里面描述了对于什么类型的文件（test），使用什么加载 (loader) 和使用的参数（options）\n*   **Plugin** 在 plugins 中单独配置。 类型为数组，每一项是一个 plugin 的实例，参数都通过构造函数传入。\n\n### 6.webpack 的构建流程是什么? 从读取配置到输出文件这个过程尽量说全\n\nWebpack 的运行流程是一个串行的过程，从启动到结束会依次执行以下流程：\n\n1.  初始化参数：从配置文件和 Shell 语句中读取与合并参数，得出最终的参数；\n2.  开始编译：用上一步得到的参数初始化 Compiler 对象，加载所有配置的插件，执行对象的 run 方法开始执行编译；\n3.  确定入口：根据配置中的 entry 找出所有的入口文件；\n4.  编译模块：从入口文件出发，调用所有配置的 Loader 对模块进行翻译，再找出该模块依赖的模块，再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理；\n5.  完成模块编译：在经过第 4 步使用 Loader 翻译完所有模块后，得到了每个模块被翻译后的最终内容以及它们之间的依赖关系；\n6.  输出资源：根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 Chunk，再把每个 Chunk 转换成一个单独的文件加入到输出列表，这步是可以修改输出内容的最后机会；\n7.  输出完成：在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统。\n\n在以上过程中，Webpack 会在特定的时间点广播出特定的事件，插件在监听到感兴趣的事件后会执行特定的逻辑，并且插件可以调用 Webpack 提供的 API 改变 Webpack 的运行结果。\n\n### 7. 是否写过 Loader 和 Plugin？描述一下编写 loader 或 plugin 的思路？\n\nLoader 像一个 \"翻译官\" 把读到的源文件内容转义成新的文件内容，并且每个 Loader 通过链式操作，将源文件一步步翻译成想要的样子。\n\n编写 Loader 时要遵循单一原则，每个 Loader 只做一种 \"转义\" 工作。 每个 Loader 的拿到的是源文件内容（source），可以通过返回值的方式将处理后的内容输出，也可以调用 this.callback() 方法，将内容返回给 webpack。 还可以通过 this.async() 生成一个 callback 函数，再用这个 callback 将处理后的内容输出出去。 此外 webpack 还为开发者准备了开发 loader 的工具函数集——loader-utils。\n\n相对于 Loader 而言，Plugin 的编写就灵活了许多。 webpack 在运行的生命周期中会广播出许多事件，Plugin 可以监听这些事件，在合适的时机通过 Webpack 提供的 API 改变输出结果。\n\n### 8.webpack 的热更新是如何做到的？说明其原理？\n\nwebpack 的热更新又称热替换（Hot Module Replacement），缩写为 HMR。 这个机制可以做到不用刷新浏览器而将新变更的模块替换掉旧的模块。\n\n原理：\n\n![image](webpack1.jpeg)\n\n首先要知道 server 端和 client 端都做了处理工作\n\n1.  第一步，在 webpack 的 watch 模式下，文件系统中某一个文件发生修改，webpack 监听到文件变化，根据配置文件对模块重新编译打包，并将打包后的代码通过简单的 JavaScript 对象保存在内存中。\n2.  第二步是 webpack-dev-server 和 webpack 之间的接口交互，而在这一步，主要是 dev-server 的中间件 webpack-dev-middleware 和 webpack 之间的交互，webpack-dev-middleware 调用 webpack 暴露的 API 对代码变化进行监控，并且告诉 webpack，将代码打包到内存中。\n3.  第三步是 webpack-dev-server 对文件变化的一个监控，这一步不同于第一步，并不是监控代码变化重新打包。当我们在配置文件中配置了 devServer.watchContentBase 为 true 的时候，Server 会监听这些配置文件夹中静态文件的变化，变化后会通知浏览器端对应用进行 live reload。注意，这儿是浏览器刷新，和 HMR 是两个概念。\n4.  第四步也是 webpack-dev-server 代码的工作，该步骤主要是通过 sockjs（webpack-dev-server 的依赖）在浏览器端和服务端之间建立一个 websocket 长连接，将 webpack 编译打包的各个阶段的状态信息告知浏览器端，同时也包括第三步中 Server 监听静态文件变化的信息。浏览器端根据这些 socket 消息进行不同的操作。当然服务端传递的最主要信息还是新模块的 hash 值，后面的步骤根据这一 hash 值来进行模块热替换。\n5.  webpack-dev-server/client 端并不能够请求更新的代码，也不会执行热更模块操作，而把这些工作又交回给了 webpack，webpack/hot/dev-server 的工作就是根据 webpack-dev-server/client 传给它的信息以及 dev-server 的配置决定是刷新浏览器呢还是进行模块热更新。当然如果仅仅是刷新浏览器，也就没有后面那些步骤了。\n6.  HotModuleReplacement.runtime 是客户端 HMR 的中枢，它接收到上一步传递给他的新模块的 hash 值，它通过 JsonpMainTemplate.runtime 向 server 端发送 Ajax 请求，服务端返回一个 json，该 json 包含了所有要更新的模块的 hash 值，获取到更新列表后，该模块再次通过 jsonp 请求，获取到最新的模块代码。这就是上图中 7、8、9 步骤。\n7.  而第 10 步是决定 HMR 成功与否的关键步骤，在该步骤中，HotModulePlugin 将会对新旧模块进行对比，决定是否更新模块，在决定更新模块后，检查模块之间的依赖关系，更新模块的同时更新模块间的依赖引用。\n8.  最后一步，当 HMR 失败后，回退到 live reload 操作，也就是进行浏览器刷新来获取最新打包代码。\n\n### 9. 如何利用 webpack 来优化前端性能？（提高性能和体验）\n\n用 webpack 优化前端性能是指优化 webpack 的输出结果，让打包的最终结果在浏览器运行快速高效。\n\n*   压缩代码。删除多余的代码、注释、简化代码的写法等等方式。可以利用 webpack 的 UglifyJsPlugin 和 ParallelUglifyPlugin 来压缩 JS 文件， 利用 cssnano（css-loader?minimize）来压缩 css\n*   利用 [CDN](https://cloud.tencent.com/product/cdn?from=10680) 加速。在构建过程中，将引用的静态资源路径修改为 CDN 上对应的路径。可以利用 webpack 对于 output 参数和各 loader 的 publicPath 参数来修改资源路径\n*   删除死代码（Tree Shaking）。将代码中永远不会走到的片段删除掉。可以通过在启动 webpack 时追加参数 --optimize-minimize 来实现\n*   提取公共代码。\n\n### 10. 如何提高 webpack 的构建速度？\n\n1.  多入口情况下，使用 CommonsChunkPlugin 来提取公共代码\n2.  通过 externals 配置来提取常用库\n3.  利用 DllPlugin 和 DllReferencePlugin 预编译资源模块 通过 DllPlugin 来对那些我们引用但是绝对不会修改的 npm 包来进行预编译，再通过 DllReferencePlugin 将预编译的模块加载进来。\n4.  使用 Happypack 实现多线程加速编译\n5.  使用 webpack-uglify-parallel 来提升 uglifyPlugin 的压缩速度。 原理上 webpack-uglify-parallel 采用了多核并行压缩来提升压缩速度\n6.  使用 Tree-shaking 和 Scope Hoisting 来剔除多余代码\n\n### 11. 怎么配置单页应用？怎么配置多页应用？\n\n单页应用可以理解为 webpack 的标准模式，直接在 entry 中指定单页应用的入口即可，这里不再赘述\n\n多页应用的话，可以使用 webpack 的 AutoWebPlugin 来完成简单自动化的构建，但是前提是项目的目录结构必须遵守他预设的规范。 多页应用中要注意的是：\n\n*   每个页面都有公共的代码，可以将这些代码抽离出来，避免重复的加载。比如，每个页面都引用了同一套 css 样式表\n*   随着业务的不断扩展，页面可能会不断的追加，所以一定要让入口的配置足够灵活，避免每次添加新页面还需要修改构建配置\n\n### 12.npm 打包时需要注意哪些？如何利用 webpack 来更好的构建？\n\nNpm 是目前最大的 JavaScript 模块仓库，里面有来自全世界开发者上传的可复用模块。你可能只是 JS 模块的使用者，但是有些情况你也会去选择上传自己开发的模块。 关于 NPM 模块上传的方法可以去官网上进行学习，这里只讲解如何利用 webpack 来构建。\n\nNPM 模块需要注意以下问题：\n\n1.  要支持 CommonJS 模块化规范，所以要求打包后的最后结果也遵守该规则。\n2.  Npm 模块使用者的环境是不确定的，很有可能并不支持 ES6，所以打包的最后结果应该是采用 ES5 编写的。并且如果 ES5 是经过转换的，请最好连同 SourceMap 一同上传。\n3.  Npm 包大小应该是尽量小（有些仓库会限制包大小）\n4.  发布的模块不能将依赖的模块也一同打包，应该让用户选择性的去自行安装。这样可以避免模块应用者再次打包时出现底层模块被重复打包的情况。\n5.  UI 组件类的模块应该将依赖的其它资源文件，例如. css 文件也需要包含在发布的模块里。\n\n基于以上需要注意的问题，我们可以对于 webpack 配置做以下扩展和优化：\n\n1.  CommonJS 模块化规范的解决方案： 设置 output.libraryTarget='commonjs2'使输出的代码符合 CommonJS2 模块化规范，以供给其它模块导入使用\n2.  输出 ES5 代码的解决方案：使用 babel-loader 把 ES6 代码转换成 ES5 的代码。再通过开启 devtool: 'source-map'输出 SourceMap 以发布调试。\n3.  Npm 包大小尽量小的解决方案：Babel 在把 ES6 代码转换成 ES5 代码时会注入一些辅助函数，最终导致每个输出的文件中都包含这段辅助函数的代码，造成了代码的冗余。解决方法是修改. babelrc 文件，为其加入 transform-runtime 插件\n4.  不能将依赖模块打包到 NPM 模块中的解决方案：使用 externals 配置项来告诉 webpack 哪些模块不需要打包。\n5.  对于依赖的资源文件打包的解决方案：通过 css-loader 和 extract-text-webpack-plugin 来实现，配置如下：\n\n![image](webpack2.jpeg)\n\n### 13. 如何在 vue 项目中实现按需加载？\n\nVue UI 组件库的按需加载 为了快速开发前端项目，经常会引入现成的 UI 组件库如 ElementUI、iView 等，但是他们的体积和他们所提供的功能一样，是很庞大的。 而通常情况下，我们仅仅需要少量的几个组件就足够了，但是我们却将庞大的组件库打包到我们的源码中，造成了不必要的开销。\n\n不过很多组件库已经提供了现成的解决方案，如 Element 出品的 babel-plugin-component 和 AntDesign 出品的 babel-plugin-import 安装以上插件后，在. babelrc 配置中或 babel-loader 的参数中进行设置，即可实现组件按需加载了。\n\n![image](webpack3.png)\n\n单页应用的按需加载 现在很多前端项目都是通过单页应用的方式开发的，但是随着业务的不断扩展，会面临一个严峻的问题——首次加载的代码量会越来越多，影响用户的体验。\n\n通过 import(*) 语句来控制加载时机，webpack 内置了对于 import(*) 的解析，会将 import(*) 中引入的模块作为一个新的入口在生成一个 chunk。 当代码执行到 import(*) 语句时，会去加载 Chunk 对应生成的文件。import() 会返回一个 Promise 对象，所以为了让浏览器支持，需要事先注入 Promise polyfill\n\n**参考文章**\n\n*   关于 webpack 的面试题有哪些？\n*   前端面试之 webpack 面试常见问题\n*   《深入浅出 webpack》电子版\n*   webpack 构建性能优化策略小结\n\n\n原文链接：[https://www.cnblogs.com/gaoht/p/11310365.html](https://www.cnblogs.com/gaoht/p/11310365.html)  \n\n\n","source":"_posts/webpack相关问题.md","raw":"---\nlayout: '[post]'\ntitle: webpack相关问题\ndate: 2020-04-11 01:07:59\ntags: webpack\n---\n\n随着现代前端开发的复杂度和规模越来越庞大，已经不能抛开工程化来独立开发了，如 react 的 jsx 代码必须编译后才能在浏览器中使用；又如 sass 和 less 的代码浏览器也是不支持的。 而如果摒弃了这些开发框架，那么开发的效率将大幅下降。在众多前端工程化工具中，webpack 脱颖而出成为了当今最流行的前端构建工具。 然而大多数的使用者都只是单纯的会使用，而并不知道其深层的原理。希望通过以下的面试题总结可以帮助大家温故知新、查缺补漏，知其然而又知其所以然。\n<!-- more -->\n问题一览\n----\n\n1.  webpack 与 grunt、gulp 的不同？\n2.  与 webpack 类似的工具还有哪些？谈谈你为什么最终选择（或放弃）使用 webpack？\n3.  有哪些常见的 Loader？他们是解决什么问题的？\n4.  有哪些常见的 Plugin？他们是解决什么问题的？\n5.  Loader 和 Plugin 的不同？\n6.  webpack 的构建流程是什么? 从读取配置到输出文件这个过程尽量说全\n7.  是否写过 Loader 和 Plugin？描述一下编写 loader 或 plugin 的思路？\n8.  webpack 的热更新是如何做到的？说明其原理？\n9.  如何利用 webpack 来优化前端性能？（提高性能和体验）\n10.  如何提高 webpack 的构建速度？\n11.  怎么配置单页应用？怎么配置多页应用？\n12.  npm 打包时需要注意哪些？如何利用 webpack 来更好的构建？\n13.  如何在 vue 项目中实现按需加载？\n\n问题解答\n----\n\n### 1. webpack 与 grunt、gulp 的不同？\n\n三者都是前端构建工具，grunt 和 gulp 在早期比较流行，现在 webpack 相对来说比较主流，不过一些轻量化的任务还是会用 gulp 来处理，比如单独打包 CSS 文件等。\n\ngrunt 和 gulp 是基于任务和流（Task、Stream）的。类似 jQuery，找到一个（或一类）文件，对其做一系列链式操作，更新流上的数据， 整条链式操作构成了一个任务，多个任务就构成了整个 web 的构建流程。\n\nwebpack 是基于入口的。webpack 会自动地递归解析入口所需要加载的所有资源文件，然后用不同的 Loader 来处理不同的文件，用 Plugin 来扩展 webpack 功能。\n\n所以总结一下：\n\n*   从构建思路来说\n\ngulp 和 grunt 需要开发者将整个前端构建过程拆分成多个 `Task`，并合理控制所有 `Task` 的调用关系 webpack 需要开发者找到入口，并需要清楚对于不同的资源应该使用什么 Loader 做何种解析和加工\n\n*   对于知识背景来说\n\ngulp 更像后端开发者的思路，需要对于整个流程了如指掌 webpack 更倾向于前端开发者的思路\n\n### 2. 与 webpack 类似的工具还有哪些？谈谈你为什么最终选择（或放弃）使用 webpack？\n\n同样是基于入口的打包工具还有以下几个主流的：\n\n*   webpack\n*   rollup\n*   parcel\n\n**从应用场景上来看：**\n\n*   webpack 适用于大型复杂的前端站点构建\n*   rollup 适用于基础库的打包，如 vue、react\n*   parcel 适用于简单的实验性项目，他可以满足低门槛的快速看到效果\n\n由于 parcel 在打包过程中给出的调试信息十分有限，所以一旦打包出错难以调试，所以不建议复杂的项目使用 parcel\n\n### 3. 有哪些常见的 Loader？他们是解决什么问题的？\n\n*   file-loader：把文件输出到一个文件夹中，在代码中通过相对 URL 去引用输出的文件\n*   url-loader：和 file-loader 类似，但是能在文件很小的情况下以 base64 的方式把文件内容注入到代码中去\n*   source-map-loader：加载额外的 Source Map 文件，以方便断点调试\n*   image-loader：加载并且压缩图片文件\n*   babel-loader：把 ES6 转换成 ES5\n*   css-loader：加载 CSS，支持模块化、压缩、文件导入等特性\n*   style-loader：把 CSS 代码注入到 JavaScript 中，通过 DOM 操作去加载 CSS。\n*   eslint-loader：通过 ESLint 检查 JavaScript 代码\n\n### 4. 有哪些常见的 Plugin？他们是解决什么问题的？\n\n*   define-plugin：定义环境变量\n*   commons-chunk-plugin：提取公共代码\n*   uglifyjs-webpack-plugin：通过 UglifyES 压缩 ES6 代码\n\n### 5.Loader 和 Plugin 的不同？\n\n**不同的作用**\n\n*   **Loader** 直译为 \"加载器\"。Webpack 将一切文件视为模块，但是 webpack 原生是只能解析 js 文件，如果想将其他文件也打包的话，就会用到 loader。 所以 Loader 的作用是让 webpack 拥有了加载和解析非 JavaScript 文件的能力。\n*   **Plugin** 直译为 \"插件\"。Plugin 可以扩展 webpack 的功能，让 webpack 具有更多的灵活性。 在 Webpack 运行的生命周期中会广播出许多事件，Plugin 可以监听这些事件，在合适的时机通过 Webpack 提供的 API 改变输出结果。\n\n**不同的用法**\n\n*   **Loader** 在 module.rules 中配置，也就是说他作为模块的解析规则而存在。 类型为数组，每一项都是一个 Object，里面描述了对于什么类型的文件（test），使用什么加载 (loader) 和使用的参数（options）\n*   **Plugin** 在 plugins 中单独配置。 类型为数组，每一项是一个 plugin 的实例，参数都通过构造函数传入。\n\n### 6.webpack 的构建流程是什么? 从读取配置到输出文件这个过程尽量说全\n\nWebpack 的运行流程是一个串行的过程，从启动到结束会依次执行以下流程：\n\n1.  初始化参数：从配置文件和 Shell 语句中读取与合并参数，得出最终的参数；\n2.  开始编译：用上一步得到的参数初始化 Compiler 对象，加载所有配置的插件，执行对象的 run 方法开始执行编译；\n3.  确定入口：根据配置中的 entry 找出所有的入口文件；\n4.  编译模块：从入口文件出发，调用所有配置的 Loader 对模块进行翻译，再找出该模块依赖的模块，再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理；\n5.  完成模块编译：在经过第 4 步使用 Loader 翻译完所有模块后，得到了每个模块被翻译后的最终内容以及它们之间的依赖关系；\n6.  输出资源：根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 Chunk，再把每个 Chunk 转换成一个单独的文件加入到输出列表，这步是可以修改输出内容的最后机会；\n7.  输出完成：在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统。\n\n在以上过程中，Webpack 会在特定的时间点广播出特定的事件，插件在监听到感兴趣的事件后会执行特定的逻辑，并且插件可以调用 Webpack 提供的 API 改变 Webpack 的运行结果。\n\n### 7. 是否写过 Loader 和 Plugin？描述一下编写 loader 或 plugin 的思路？\n\nLoader 像一个 \"翻译官\" 把读到的源文件内容转义成新的文件内容，并且每个 Loader 通过链式操作，将源文件一步步翻译成想要的样子。\n\n编写 Loader 时要遵循单一原则，每个 Loader 只做一种 \"转义\" 工作。 每个 Loader 的拿到的是源文件内容（source），可以通过返回值的方式将处理后的内容输出，也可以调用 this.callback() 方法，将内容返回给 webpack。 还可以通过 this.async() 生成一个 callback 函数，再用这个 callback 将处理后的内容输出出去。 此外 webpack 还为开发者准备了开发 loader 的工具函数集——loader-utils。\n\n相对于 Loader 而言，Plugin 的编写就灵活了许多。 webpack 在运行的生命周期中会广播出许多事件，Plugin 可以监听这些事件，在合适的时机通过 Webpack 提供的 API 改变输出结果。\n\n### 8.webpack 的热更新是如何做到的？说明其原理？\n\nwebpack 的热更新又称热替换（Hot Module Replacement），缩写为 HMR。 这个机制可以做到不用刷新浏览器而将新变更的模块替换掉旧的模块。\n\n原理：\n\n![image](webpack1.jpeg)\n\n首先要知道 server 端和 client 端都做了处理工作\n\n1.  第一步，在 webpack 的 watch 模式下，文件系统中某一个文件发生修改，webpack 监听到文件变化，根据配置文件对模块重新编译打包，并将打包后的代码通过简单的 JavaScript 对象保存在内存中。\n2.  第二步是 webpack-dev-server 和 webpack 之间的接口交互，而在这一步，主要是 dev-server 的中间件 webpack-dev-middleware 和 webpack 之间的交互，webpack-dev-middleware 调用 webpack 暴露的 API 对代码变化进行监控，并且告诉 webpack，将代码打包到内存中。\n3.  第三步是 webpack-dev-server 对文件变化的一个监控，这一步不同于第一步，并不是监控代码变化重新打包。当我们在配置文件中配置了 devServer.watchContentBase 为 true 的时候，Server 会监听这些配置文件夹中静态文件的变化，变化后会通知浏览器端对应用进行 live reload。注意，这儿是浏览器刷新，和 HMR 是两个概念。\n4.  第四步也是 webpack-dev-server 代码的工作，该步骤主要是通过 sockjs（webpack-dev-server 的依赖）在浏览器端和服务端之间建立一个 websocket 长连接，将 webpack 编译打包的各个阶段的状态信息告知浏览器端，同时也包括第三步中 Server 监听静态文件变化的信息。浏览器端根据这些 socket 消息进行不同的操作。当然服务端传递的最主要信息还是新模块的 hash 值，后面的步骤根据这一 hash 值来进行模块热替换。\n5.  webpack-dev-server/client 端并不能够请求更新的代码，也不会执行热更模块操作，而把这些工作又交回给了 webpack，webpack/hot/dev-server 的工作就是根据 webpack-dev-server/client 传给它的信息以及 dev-server 的配置决定是刷新浏览器呢还是进行模块热更新。当然如果仅仅是刷新浏览器，也就没有后面那些步骤了。\n6.  HotModuleReplacement.runtime 是客户端 HMR 的中枢，它接收到上一步传递给他的新模块的 hash 值，它通过 JsonpMainTemplate.runtime 向 server 端发送 Ajax 请求，服务端返回一个 json，该 json 包含了所有要更新的模块的 hash 值，获取到更新列表后，该模块再次通过 jsonp 请求，获取到最新的模块代码。这就是上图中 7、8、9 步骤。\n7.  而第 10 步是决定 HMR 成功与否的关键步骤，在该步骤中，HotModulePlugin 将会对新旧模块进行对比，决定是否更新模块，在决定更新模块后，检查模块之间的依赖关系，更新模块的同时更新模块间的依赖引用。\n8.  最后一步，当 HMR 失败后，回退到 live reload 操作，也就是进行浏览器刷新来获取最新打包代码。\n\n### 9. 如何利用 webpack 来优化前端性能？（提高性能和体验）\n\n用 webpack 优化前端性能是指优化 webpack 的输出结果，让打包的最终结果在浏览器运行快速高效。\n\n*   压缩代码。删除多余的代码、注释、简化代码的写法等等方式。可以利用 webpack 的 UglifyJsPlugin 和 ParallelUglifyPlugin 来压缩 JS 文件， 利用 cssnano（css-loader?minimize）来压缩 css\n*   利用 [CDN](https://cloud.tencent.com/product/cdn?from=10680) 加速。在构建过程中，将引用的静态资源路径修改为 CDN 上对应的路径。可以利用 webpack 对于 output 参数和各 loader 的 publicPath 参数来修改资源路径\n*   删除死代码（Tree Shaking）。将代码中永远不会走到的片段删除掉。可以通过在启动 webpack 时追加参数 --optimize-minimize 来实现\n*   提取公共代码。\n\n### 10. 如何提高 webpack 的构建速度？\n\n1.  多入口情况下，使用 CommonsChunkPlugin 来提取公共代码\n2.  通过 externals 配置来提取常用库\n3.  利用 DllPlugin 和 DllReferencePlugin 预编译资源模块 通过 DllPlugin 来对那些我们引用但是绝对不会修改的 npm 包来进行预编译，再通过 DllReferencePlugin 将预编译的模块加载进来。\n4.  使用 Happypack 实现多线程加速编译\n5.  使用 webpack-uglify-parallel 来提升 uglifyPlugin 的压缩速度。 原理上 webpack-uglify-parallel 采用了多核并行压缩来提升压缩速度\n6.  使用 Tree-shaking 和 Scope Hoisting 来剔除多余代码\n\n### 11. 怎么配置单页应用？怎么配置多页应用？\n\n单页应用可以理解为 webpack 的标准模式，直接在 entry 中指定单页应用的入口即可，这里不再赘述\n\n多页应用的话，可以使用 webpack 的 AutoWebPlugin 来完成简单自动化的构建，但是前提是项目的目录结构必须遵守他预设的规范。 多页应用中要注意的是：\n\n*   每个页面都有公共的代码，可以将这些代码抽离出来，避免重复的加载。比如，每个页面都引用了同一套 css 样式表\n*   随着业务的不断扩展，页面可能会不断的追加，所以一定要让入口的配置足够灵活，避免每次添加新页面还需要修改构建配置\n\n### 12.npm 打包时需要注意哪些？如何利用 webpack 来更好的构建？\n\nNpm 是目前最大的 JavaScript 模块仓库，里面有来自全世界开发者上传的可复用模块。你可能只是 JS 模块的使用者，但是有些情况你也会去选择上传自己开发的模块。 关于 NPM 模块上传的方法可以去官网上进行学习，这里只讲解如何利用 webpack 来构建。\n\nNPM 模块需要注意以下问题：\n\n1.  要支持 CommonJS 模块化规范，所以要求打包后的最后结果也遵守该规则。\n2.  Npm 模块使用者的环境是不确定的，很有可能并不支持 ES6，所以打包的最后结果应该是采用 ES5 编写的。并且如果 ES5 是经过转换的，请最好连同 SourceMap 一同上传。\n3.  Npm 包大小应该是尽量小（有些仓库会限制包大小）\n4.  发布的模块不能将依赖的模块也一同打包，应该让用户选择性的去自行安装。这样可以避免模块应用者再次打包时出现底层模块被重复打包的情况。\n5.  UI 组件类的模块应该将依赖的其它资源文件，例如. css 文件也需要包含在发布的模块里。\n\n基于以上需要注意的问题，我们可以对于 webpack 配置做以下扩展和优化：\n\n1.  CommonJS 模块化规范的解决方案： 设置 output.libraryTarget='commonjs2'使输出的代码符合 CommonJS2 模块化规范，以供给其它模块导入使用\n2.  输出 ES5 代码的解决方案：使用 babel-loader 把 ES6 代码转换成 ES5 的代码。再通过开启 devtool: 'source-map'输出 SourceMap 以发布调试。\n3.  Npm 包大小尽量小的解决方案：Babel 在把 ES6 代码转换成 ES5 代码时会注入一些辅助函数，最终导致每个输出的文件中都包含这段辅助函数的代码，造成了代码的冗余。解决方法是修改. babelrc 文件，为其加入 transform-runtime 插件\n4.  不能将依赖模块打包到 NPM 模块中的解决方案：使用 externals 配置项来告诉 webpack 哪些模块不需要打包。\n5.  对于依赖的资源文件打包的解决方案：通过 css-loader 和 extract-text-webpack-plugin 来实现，配置如下：\n\n![image](webpack2.jpeg)\n\n### 13. 如何在 vue 项目中实现按需加载？\n\nVue UI 组件库的按需加载 为了快速开发前端项目，经常会引入现成的 UI 组件库如 ElementUI、iView 等，但是他们的体积和他们所提供的功能一样，是很庞大的。 而通常情况下，我们仅仅需要少量的几个组件就足够了，但是我们却将庞大的组件库打包到我们的源码中，造成了不必要的开销。\n\n不过很多组件库已经提供了现成的解决方案，如 Element 出品的 babel-plugin-component 和 AntDesign 出品的 babel-plugin-import 安装以上插件后，在. babelrc 配置中或 babel-loader 的参数中进行设置，即可实现组件按需加载了。\n\n![image](webpack3.png)\n\n单页应用的按需加载 现在很多前端项目都是通过单页应用的方式开发的，但是随着业务的不断扩展，会面临一个严峻的问题——首次加载的代码量会越来越多，影响用户的体验。\n\n通过 import(*) 语句来控制加载时机，webpack 内置了对于 import(*) 的解析，会将 import(*) 中引入的模块作为一个新的入口在生成一个 chunk。 当代码执行到 import(*) 语句时，会去加载 Chunk 对应生成的文件。import() 会返回一个 Promise 对象，所以为了让浏览器支持，需要事先注入 Promise polyfill\n\n**参考文章**\n\n*   关于 webpack 的面试题有哪些？\n*   前端面试之 webpack 面试常见问题\n*   《深入浅出 webpack》电子版\n*   webpack 构建性能优化策略小结\n\n\n原文链接：[https://www.cnblogs.com/gaoht/p/11310365.html](https://www.cnblogs.com/gaoht/p/11310365.html)  \n\n\n","slug":"webpack相关问题","published":1,"updated":"2020-05-15T06:46:06.000Z","comments":1,"photos":[],"link":"","_id":"ckbftlm74001y7w2pdu1javhg","content":"<p>随着现代前端开发的复杂度和规模越来越庞大，已经不能抛开工程化来独立开发了，如 react 的 jsx 代码必须编译后才能在浏览器中使用；又如 sass 和 less 的代码浏览器也是不支持的。 而如果摒弃了这些开发框架，那么开发的效率将大幅下降。在众多前端工程化工具中，webpack 脱颖而出成为了当今最流行的前端构建工具。 然而大多数的使用者都只是单纯的会使用，而并不知道其深层的原理。希望通过以下的面试题总结可以帮助大家温故知新、查缺补漏，知其然而又知其所以然。</p>\n<a id=\"more\"></a>\n<h2 id=\"问题一览\"><a href=\"#问题一览\" class=\"headerlink\" title=\"问题一览\"></a>问题一览</h2><ol>\n<li>webpack 与 grunt、gulp 的不同？</li>\n<li>与 webpack 类似的工具还有哪些？谈谈你为什么最终选择（或放弃）使用 webpack？</li>\n<li>有哪些常见的 Loader？他们是解决什么问题的？</li>\n<li>有哪些常见的 Plugin？他们是解决什么问题的？</li>\n<li>Loader 和 Plugin 的不同？</li>\n<li>webpack 的构建流程是什么? 从读取配置到输出文件这个过程尽量说全</li>\n<li>是否写过 Loader 和 Plugin？描述一下编写 loader 或 plugin 的思路？</li>\n<li>webpack 的热更新是如何做到的？说明其原理？</li>\n<li>如何利用 webpack 来优化前端性能？（提高性能和体验）</li>\n<li>如何提高 webpack 的构建速度？</li>\n<li>怎么配置单页应用？怎么配置多页应用？</li>\n<li>npm 打包时需要注意哪些？如何利用 webpack 来更好的构建？</li>\n<li>如何在 vue 项目中实现按需加载？</li>\n</ol>\n<h2 id=\"问题解答\"><a href=\"#问题解答\" class=\"headerlink\" title=\"问题解答\"></a>问题解答</h2><h3 id=\"1-webpack-与-grunt、gulp-的不同？\"><a href=\"#1-webpack-与-grunt、gulp-的不同？\" class=\"headerlink\" title=\"1. webpack 与 grunt、gulp 的不同？\"></a>1. webpack 与 grunt、gulp 的不同？</h3><p>三者都是前端构建工具，grunt 和 gulp 在早期比较流行，现在 webpack 相对来说比较主流，不过一些轻量化的任务还是会用 gulp 来处理，比如单独打包 CSS 文件等。</p>\n<p>grunt 和 gulp 是基于任务和流（Task、Stream）的。类似 jQuery，找到一个（或一类）文件，对其做一系列链式操作，更新流上的数据， 整条链式操作构成了一个任务，多个任务就构成了整个 web 的构建流程。</p>\n<p>webpack 是基于入口的。webpack 会自动地递归解析入口所需要加载的所有资源文件，然后用不同的 Loader 来处理不同的文件，用 Plugin 来扩展 webpack 功能。</p>\n<p>所以总结一下：</p>\n<ul>\n<li>从构建思路来说</li>\n</ul>\n<p>gulp 和 grunt 需要开发者将整个前端构建过程拆分成多个 <code>Task</code>，并合理控制所有 <code>Task</code> 的调用关系 webpack 需要开发者找到入口，并需要清楚对于不同的资源应该使用什么 Loader 做何种解析和加工</p>\n<ul>\n<li>对于知识背景来说</li>\n</ul>\n<p>gulp 更像后端开发者的思路，需要对于整个流程了如指掌 webpack 更倾向于前端开发者的思路</p>\n<h3 id=\"2-与-webpack-类似的工具还有哪些？谈谈你为什么最终选择（或放弃）使用-webpack？\"><a href=\"#2-与-webpack-类似的工具还有哪些？谈谈你为什么最终选择（或放弃）使用-webpack？\" class=\"headerlink\" title=\"2. 与 webpack 类似的工具还有哪些？谈谈你为什么最终选择（或放弃）使用 webpack？\"></a>2. 与 webpack 类似的工具还有哪些？谈谈你为什么最终选择（或放弃）使用 webpack？</h3><p>同样是基于入口的打包工具还有以下几个主流的：</p>\n<ul>\n<li>webpack</li>\n<li>rollup</li>\n<li>parcel</li>\n</ul>\n<p><strong>从应用场景上来看：</strong></p>\n<ul>\n<li>webpack 适用于大型复杂的前端站点构建</li>\n<li>rollup 适用于基础库的打包，如 vue、react</li>\n<li>parcel 适用于简单的实验性项目，他可以满足低门槛的快速看到效果</li>\n</ul>\n<p>由于 parcel 在打包过程中给出的调试信息十分有限，所以一旦打包出错难以调试，所以不建议复杂的项目使用 parcel</p>\n<h3 id=\"3-有哪些常见的-Loader？他们是解决什么问题的？\"><a href=\"#3-有哪些常见的-Loader？他们是解决什么问题的？\" class=\"headerlink\" title=\"3. 有哪些常见的 Loader？他们是解决什么问题的？\"></a>3. 有哪些常见的 Loader？他们是解决什么问题的？</h3><ul>\n<li>file-loader：把文件输出到一个文件夹中，在代码中通过相对 URL 去引用输出的文件</li>\n<li>url-loader：和 file-loader 类似，但是能在文件很小的情况下以 base64 的方式把文件内容注入到代码中去</li>\n<li>source-map-loader：加载额外的 Source Map 文件，以方便断点调试</li>\n<li>image-loader：加载并且压缩图片文件</li>\n<li>babel-loader：把 ES6 转换成 ES5</li>\n<li>css-loader：加载 CSS，支持模块化、压缩、文件导入等特性</li>\n<li>style-loader：把 CSS 代码注入到 JavaScript 中，通过 DOM 操作去加载 CSS。</li>\n<li>eslint-loader：通过 ESLint 检查 JavaScript 代码</li>\n</ul>\n<h3 id=\"4-有哪些常见的-Plugin？他们是解决什么问题的？\"><a href=\"#4-有哪些常见的-Plugin？他们是解决什么问题的？\" class=\"headerlink\" title=\"4. 有哪些常见的 Plugin？他们是解决什么问题的？\"></a>4. 有哪些常见的 Plugin？他们是解决什么问题的？</h3><ul>\n<li>define-plugin：定义环境变量</li>\n<li>commons-chunk-plugin：提取公共代码</li>\n<li>uglifyjs-webpack-plugin：通过 UglifyES 压缩 ES6 代码</li>\n</ul>\n<h3 id=\"5-Loader-和-Plugin-的不同？\"><a href=\"#5-Loader-和-Plugin-的不同？\" class=\"headerlink\" title=\"5.Loader 和 Plugin 的不同？\"></a>5.Loader 和 Plugin 的不同？</h3><p><strong>不同的作用</strong></p>\n<ul>\n<li><strong>Loader</strong> 直译为 “加载器”。Webpack 将一切文件视为模块，但是 webpack 原生是只能解析 js 文件，如果想将其他文件也打包的话，就会用到 loader。 所以 Loader 的作用是让 webpack 拥有了加载和解析非 JavaScript 文件的能力。</li>\n<li><strong>Plugin</strong> 直译为 “插件”。Plugin 可以扩展 webpack 的功能，让 webpack 具有更多的灵活性。 在 Webpack 运行的生命周期中会广播出许多事件，Plugin 可以监听这些事件，在合适的时机通过 Webpack 提供的 API 改变输出结果。</li>\n</ul>\n<p><strong>不同的用法</strong></p>\n<ul>\n<li><strong>Loader</strong> 在 module.rules 中配置，也就是说他作为模块的解析规则而存在。 类型为数组，每一项都是一个 Object，里面描述了对于什么类型的文件（test），使用什么加载 (loader) 和使用的参数（options）</li>\n<li><strong>Plugin</strong> 在 plugins 中单独配置。 类型为数组，每一项是一个 plugin 的实例，参数都通过构造函数传入。</li>\n</ul>\n<h3 id=\"6-webpack-的构建流程是什么-从读取配置到输出文件这个过程尽量说全\"><a href=\"#6-webpack-的构建流程是什么-从读取配置到输出文件这个过程尽量说全\" class=\"headerlink\" title=\"6.webpack 的构建流程是什么? 从读取配置到输出文件这个过程尽量说全\"></a>6.webpack 的构建流程是什么? 从读取配置到输出文件这个过程尽量说全</h3><p>Webpack 的运行流程是一个串行的过程，从启动到结束会依次执行以下流程：</p>\n<ol>\n<li>初始化参数：从配置文件和 Shell 语句中读取与合并参数，得出最终的参数；</li>\n<li>开始编译：用上一步得到的参数初始化 Compiler 对象，加载所有配置的插件，执行对象的 run 方法开始执行编译；</li>\n<li>确定入口：根据配置中的 entry 找出所有的入口文件；</li>\n<li>编译模块：从入口文件出发，调用所有配置的 Loader 对模块进行翻译，再找出该模块依赖的模块，再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理；</li>\n<li>完成模块编译：在经过第 4 步使用 Loader 翻译完所有模块后，得到了每个模块被翻译后的最终内容以及它们之间的依赖关系；</li>\n<li>输出资源：根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 Chunk，再把每个 Chunk 转换成一个单独的文件加入到输出列表，这步是可以修改输出内容的最后机会；</li>\n<li>输出完成：在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统。</li>\n</ol>\n<p>在以上过程中，Webpack 会在特定的时间点广播出特定的事件，插件在监听到感兴趣的事件后会执行特定的逻辑，并且插件可以调用 Webpack 提供的 API 改变 Webpack 的运行结果。</p>\n<h3 id=\"7-是否写过-Loader-和-Plugin？描述一下编写-loader-或-plugin-的思路？\"><a href=\"#7-是否写过-Loader-和-Plugin？描述一下编写-loader-或-plugin-的思路？\" class=\"headerlink\" title=\"7. 是否写过 Loader 和 Plugin？描述一下编写 loader 或 plugin 的思路？\"></a>7. 是否写过 Loader 和 Plugin？描述一下编写 loader 或 plugin 的思路？</h3><p>Loader 像一个 “翻译官” 把读到的源文件内容转义成新的文件内容，并且每个 Loader 通过链式操作，将源文件一步步翻译成想要的样子。</p>\n<p>编写 Loader 时要遵循单一原则，每个 Loader 只做一种 “转义” 工作。 每个 Loader 的拿到的是源文件内容（source），可以通过返回值的方式将处理后的内容输出，也可以调用 this.callback() 方法，将内容返回给 webpack。 还可以通过 this.async() 生成一个 callback 函数，再用这个 callback 将处理后的内容输出出去。 此外 webpack 还为开发者准备了开发 loader 的工具函数集——loader-utils。</p>\n<p>相对于 Loader 而言，Plugin 的编写就灵活了许多。 webpack 在运行的生命周期中会广播出许多事件，Plugin 可以监听这些事件，在合适的时机通过 Webpack 提供的 API 改变输出结果。</p>\n<h3 id=\"8-webpack-的热更新是如何做到的？说明其原理？\"><a href=\"#8-webpack-的热更新是如何做到的？说明其原理？\" class=\"headerlink\" title=\"8.webpack 的热更新是如何做到的？说明其原理？\"></a>8.webpack 的热更新是如何做到的？说明其原理？</h3><p>webpack 的热更新又称热替换（Hot Module Replacement），缩写为 HMR。 这个机制可以做到不用刷新浏览器而将新变更的模块替换掉旧的模块。</p>\n<p>原理：</p>\n<p><img src=\"/2020/04/11/webpack%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/webpack1.jpeg\" alt=\"image\"></p>\n<p>首先要知道 server 端和 client 端都做了处理工作</p>\n<ol>\n<li>第一步，在 webpack 的 watch 模式下，文件系统中某一个文件发生修改，webpack 监听到文件变化，根据配置文件对模块重新编译打包，并将打包后的代码通过简单的 JavaScript 对象保存在内存中。</li>\n<li>第二步是 webpack-dev-server 和 webpack 之间的接口交互，而在这一步，主要是 dev-server 的中间件 webpack-dev-middleware 和 webpack 之间的交互，webpack-dev-middleware 调用 webpack 暴露的 API 对代码变化进行监控，并且告诉 webpack，将代码打包到内存中。</li>\n<li>第三步是 webpack-dev-server 对文件变化的一个监控，这一步不同于第一步，并不是监控代码变化重新打包。当我们在配置文件中配置了 devServer.watchContentBase 为 true 的时候，Server 会监听这些配置文件夹中静态文件的变化，变化后会通知浏览器端对应用进行 live reload。注意，这儿是浏览器刷新，和 HMR 是两个概念。</li>\n<li>第四步也是 webpack-dev-server 代码的工作，该步骤主要是通过 sockjs（webpack-dev-server 的依赖）在浏览器端和服务端之间建立一个 websocket 长连接，将 webpack 编译打包的各个阶段的状态信息告知浏览器端，同时也包括第三步中 Server 监听静态文件变化的信息。浏览器端根据这些 socket 消息进行不同的操作。当然服务端传递的最主要信息还是新模块的 hash 值，后面的步骤根据这一 hash 值来进行模块热替换。</li>\n<li>webpack-dev-server/client 端并不能够请求更新的代码，也不会执行热更模块操作，而把这些工作又交回给了 webpack，webpack/hot/dev-server 的工作就是根据 webpack-dev-server/client 传给它的信息以及 dev-server 的配置决定是刷新浏览器呢还是进行模块热更新。当然如果仅仅是刷新浏览器，也就没有后面那些步骤了。</li>\n<li>HotModuleReplacement.runtime 是客户端 HMR 的中枢，它接收到上一步传递给他的新模块的 hash 值，它通过 JsonpMainTemplate.runtime 向 server 端发送 Ajax 请求，服务端返回一个 json，该 json 包含了所有要更新的模块的 hash 值，获取到更新列表后，该模块再次通过 jsonp 请求，获取到最新的模块代码。这就是上图中 7、8、9 步骤。</li>\n<li>而第 10 步是决定 HMR 成功与否的关键步骤，在该步骤中，HotModulePlugin 将会对新旧模块进行对比，决定是否更新模块，在决定更新模块后，检查模块之间的依赖关系，更新模块的同时更新模块间的依赖引用。</li>\n<li>最后一步，当 HMR 失败后，回退到 live reload 操作，也就是进行浏览器刷新来获取最新打包代码。</li>\n</ol>\n<h3 id=\"9-如何利用-webpack-来优化前端性能？（提高性能和体验）\"><a href=\"#9-如何利用-webpack-来优化前端性能？（提高性能和体验）\" class=\"headerlink\" title=\"9. 如何利用 webpack 来优化前端性能？（提高性能和体验）\"></a>9. 如何利用 webpack 来优化前端性能？（提高性能和体验）</h3><p>用 webpack 优化前端性能是指优化 webpack 的输出结果，让打包的最终结果在浏览器运行快速高效。</p>\n<ul>\n<li>压缩代码。删除多余的代码、注释、简化代码的写法等等方式。可以利用 webpack 的 UglifyJsPlugin 和 ParallelUglifyPlugin 来压缩 JS 文件， 利用 cssnano（css-loader?minimize）来压缩 css</li>\n<li>利用 <a href=\"https://cloud.tencent.com/product/cdn?from=10680\" target=\"_blank\" rel=\"noopener\">CDN</a> 加速。在构建过程中，将引用的静态资源路径修改为 CDN 上对应的路径。可以利用 webpack 对于 output 参数和各 loader 的 publicPath 参数来修改资源路径</li>\n<li>删除死代码（Tree Shaking）。将代码中永远不会走到的片段删除掉。可以通过在启动 webpack 时追加参数 –optimize-minimize 来实现</li>\n<li>提取公共代码。</li>\n</ul>\n<h3 id=\"10-如何提高-webpack-的构建速度？\"><a href=\"#10-如何提高-webpack-的构建速度？\" class=\"headerlink\" title=\"10. 如何提高 webpack 的构建速度？\"></a>10. 如何提高 webpack 的构建速度？</h3><ol>\n<li>多入口情况下，使用 CommonsChunkPlugin 来提取公共代码</li>\n<li>通过 externals 配置来提取常用库</li>\n<li>利用 DllPlugin 和 DllReferencePlugin 预编译资源模块 通过 DllPlugin 来对那些我们引用但是绝对不会修改的 npm 包来进行预编译，再通过 DllReferencePlugin 将预编译的模块加载进来。</li>\n<li>使用 Happypack 实现多线程加速编译</li>\n<li>使用 webpack-uglify-parallel 来提升 uglifyPlugin 的压缩速度。 原理上 webpack-uglify-parallel 采用了多核并行压缩来提升压缩速度</li>\n<li>使用 Tree-shaking 和 Scope Hoisting 来剔除多余代码</li>\n</ol>\n<h3 id=\"11-怎么配置单页应用？怎么配置多页应用？\"><a href=\"#11-怎么配置单页应用？怎么配置多页应用？\" class=\"headerlink\" title=\"11. 怎么配置单页应用？怎么配置多页应用？\"></a>11. 怎么配置单页应用？怎么配置多页应用？</h3><p>单页应用可以理解为 webpack 的标准模式，直接在 entry 中指定单页应用的入口即可，这里不再赘述</p>\n<p>多页应用的话，可以使用 webpack 的 AutoWebPlugin 来完成简单自动化的构建，但是前提是项目的目录结构必须遵守他预设的规范。 多页应用中要注意的是：</p>\n<ul>\n<li>每个页面都有公共的代码，可以将这些代码抽离出来，避免重复的加载。比如，每个页面都引用了同一套 css 样式表</li>\n<li>随着业务的不断扩展，页面可能会不断的追加，所以一定要让入口的配置足够灵活，避免每次添加新页面还需要修改构建配置</li>\n</ul>\n<h3 id=\"12-npm-打包时需要注意哪些？如何利用-webpack-来更好的构建？\"><a href=\"#12-npm-打包时需要注意哪些？如何利用-webpack-来更好的构建？\" class=\"headerlink\" title=\"12.npm 打包时需要注意哪些？如何利用 webpack 来更好的构建？\"></a>12.npm 打包时需要注意哪些？如何利用 webpack 来更好的构建？</h3><p>Npm 是目前最大的 JavaScript 模块仓库，里面有来自全世界开发者上传的可复用模块。你可能只是 JS 模块的使用者，但是有些情况你也会去选择上传自己开发的模块。 关于 NPM 模块上传的方法可以去官网上进行学习，这里只讲解如何利用 webpack 来构建。</p>\n<p>NPM 模块需要注意以下问题：</p>\n<ol>\n<li>要支持 CommonJS 模块化规范，所以要求打包后的最后结果也遵守该规则。</li>\n<li>Npm 模块使用者的环境是不确定的，很有可能并不支持 ES6，所以打包的最后结果应该是采用 ES5 编写的。并且如果 ES5 是经过转换的，请最好连同 SourceMap 一同上传。</li>\n<li>Npm 包大小应该是尽量小（有些仓库会限制包大小）</li>\n<li>发布的模块不能将依赖的模块也一同打包，应该让用户选择性的去自行安装。这样可以避免模块应用者再次打包时出现底层模块被重复打包的情况。</li>\n<li>UI 组件类的模块应该将依赖的其它资源文件，例如. css 文件也需要包含在发布的模块里。</li>\n</ol>\n<p>基于以上需要注意的问题，我们可以对于 webpack 配置做以下扩展和优化：</p>\n<ol>\n<li>CommonJS 模块化规范的解决方案： 设置 output.libraryTarget=’commonjs2’使输出的代码符合 CommonJS2 模块化规范，以供给其它模块导入使用</li>\n<li>输出 ES5 代码的解决方案：使用 babel-loader 把 ES6 代码转换成 ES5 的代码。再通过开启 devtool: ‘source-map’输出 SourceMap 以发布调试。</li>\n<li>Npm 包大小尽量小的解决方案：Babel 在把 ES6 代码转换成 ES5 代码时会注入一些辅助函数，最终导致每个输出的文件中都包含这段辅助函数的代码，造成了代码的冗余。解决方法是修改. babelrc 文件，为其加入 transform-runtime 插件</li>\n<li>不能将依赖模块打包到 NPM 模块中的解决方案：使用 externals 配置项来告诉 webpack 哪些模块不需要打包。</li>\n<li>对于依赖的资源文件打包的解决方案：通过 css-loader 和 extract-text-webpack-plugin 来实现，配置如下：</li>\n</ol>\n<p><img src=\"/2020/04/11/webpack%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/webpack2.jpeg\" alt=\"image\"></p>\n<h3 id=\"13-如何在-vue-项目中实现按需加载？\"><a href=\"#13-如何在-vue-项目中实现按需加载？\" class=\"headerlink\" title=\"13. 如何在 vue 项目中实现按需加载？\"></a>13. 如何在 vue 项目中实现按需加载？</h3><p>Vue UI 组件库的按需加载 为了快速开发前端项目，经常会引入现成的 UI 组件库如 ElementUI、iView 等，但是他们的体积和他们所提供的功能一样，是很庞大的。 而通常情况下，我们仅仅需要少量的几个组件就足够了，但是我们却将庞大的组件库打包到我们的源码中，造成了不必要的开销。</p>\n<p>不过很多组件库已经提供了现成的解决方案，如 Element 出品的 babel-plugin-component 和 AntDesign 出品的 babel-plugin-import 安装以上插件后，在. babelrc 配置中或 babel-loader 的参数中进行设置，即可实现组件按需加载了。</p>\n<p><img src=\"/2020/04/11/webpack%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/webpack3.png\" alt=\"image\"></p>\n<p>单页应用的按需加载 现在很多前端项目都是通过单页应用的方式开发的，但是随着业务的不断扩展，会面临一个严峻的问题——首次加载的代码量会越来越多，影响用户的体验。</p>\n<p>通过 import(<em>) 语句来控制加载时机，webpack 内置了对于 import(</em>) 的解析，会将 import(<em>) 中引入的模块作为一个新的入口在生成一个 chunk。 当代码执行到 import(</em>) 语句时，会去加载 Chunk 对应生成的文件。import() 会返回一个 Promise 对象，所以为了让浏览器支持，需要事先注入 Promise polyfill</p>\n<p><strong>参考文章</strong></p>\n<ul>\n<li>关于 webpack 的面试题有哪些？</li>\n<li>前端面试之 webpack 面试常见问题</li>\n<li>《深入浅出 webpack》电子版</li>\n<li>webpack 构建性能优化策略小结</li>\n</ul>\n<p>原文链接：<a href=\"https://www.cnblogs.com/gaoht/p/11310365.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/gaoht/p/11310365.html</a>  </p>\n","site":{"data":{}},"excerpt":"<p>随着现代前端开发的复杂度和规模越来越庞大，已经不能抛开工程化来独立开发了，如 react 的 jsx 代码必须编译后才能在浏览器中使用；又如 sass 和 less 的代码浏览器也是不支持的。 而如果摒弃了这些开发框架，那么开发的效率将大幅下降。在众多前端工程化工具中，webpack 脱颖而出成为了当今最流行的前端构建工具。 然而大多数的使用者都只是单纯的会使用，而并不知道其深层的原理。希望通过以下的面试题总结可以帮助大家温故知新、查缺补漏，知其然而又知其所以然。</p>","more":"<h2 id=\"问题一览\"><a href=\"#问题一览\" class=\"headerlink\" title=\"问题一览\"></a>问题一览</h2><ol>\n<li>webpack 与 grunt、gulp 的不同？</li>\n<li>与 webpack 类似的工具还有哪些？谈谈你为什么最终选择（或放弃）使用 webpack？</li>\n<li>有哪些常见的 Loader？他们是解决什么问题的？</li>\n<li>有哪些常见的 Plugin？他们是解决什么问题的？</li>\n<li>Loader 和 Plugin 的不同？</li>\n<li>webpack 的构建流程是什么? 从读取配置到输出文件这个过程尽量说全</li>\n<li>是否写过 Loader 和 Plugin？描述一下编写 loader 或 plugin 的思路？</li>\n<li>webpack 的热更新是如何做到的？说明其原理？</li>\n<li>如何利用 webpack 来优化前端性能？（提高性能和体验）</li>\n<li>如何提高 webpack 的构建速度？</li>\n<li>怎么配置单页应用？怎么配置多页应用？</li>\n<li>npm 打包时需要注意哪些？如何利用 webpack 来更好的构建？</li>\n<li>如何在 vue 项目中实现按需加载？</li>\n</ol>\n<h2 id=\"问题解答\"><a href=\"#问题解答\" class=\"headerlink\" title=\"问题解答\"></a>问题解答</h2><h3 id=\"1-webpack-与-grunt、gulp-的不同？\"><a href=\"#1-webpack-与-grunt、gulp-的不同？\" class=\"headerlink\" title=\"1. webpack 与 grunt、gulp 的不同？\"></a>1. webpack 与 grunt、gulp 的不同？</h3><p>三者都是前端构建工具，grunt 和 gulp 在早期比较流行，现在 webpack 相对来说比较主流，不过一些轻量化的任务还是会用 gulp 来处理，比如单独打包 CSS 文件等。</p>\n<p>grunt 和 gulp 是基于任务和流（Task、Stream）的。类似 jQuery，找到一个（或一类）文件，对其做一系列链式操作，更新流上的数据， 整条链式操作构成了一个任务，多个任务就构成了整个 web 的构建流程。</p>\n<p>webpack 是基于入口的。webpack 会自动地递归解析入口所需要加载的所有资源文件，然后用不同的 Loader 来处理不同的文件，用 Plugin 来扩展 webpack 功能。</p>\n<p>所以总结一下：</p>\n<ul>\n<li>从构建思路来说</li>\n</ul>\n<p>gulp 和 grunt 需要开发者将整个前端构建过程拆分成多个 <code>Task</code>，并合理控制所有 <code>Task</code> 的调用关系 webpack 需要开发者找到入口，并需要清楚对于不同的资源应该使用什么 Loader 做何种解析和加工</p>\n<ul>\n<li>对于知识背景来说</li>\n</ul>\n<p>gulp 更像后端开发者的思路，需要对于整个流程了如指掌 webpack 更倾向于前端开发者的思路</p>\n<h3 id=\"2-与-webpack-类似的工具还有哪些？谈谈你为什么最终选择（或放弃）使用-webpack？\"><a href=\"#2-与-webpack-类似的工具还有哪些？谈谈你为什么最终选择（或放弃）使用-webpack？\" class=\"headerlink\" title=\"2. 与 webpack 类似的工具还有哪些？谈谈你为什么最终选择（或放弃）使用 webpack？\"></a>2. 与 webpack 类似的工具还有哪些？谈谈你为什么最终选择（或放弃）使用 webpack？</h3><p>同样是基于入口的打包工具还有以下几个主流的：</p>\n<ul>\n<li>webpack</li>\n<li>rollup</li>\n<li>parcel</li>\n</ul>\n<p><strong>从应用场景上来看：</strong></p>\n<ul>\n<li>webpack 适用于大型复杂的前端站点构建</li>\n<li>rollup 适用于基础库的打包，如 vue、react</li>\n<li>parcel 适用于简单的实验性项目，他可以满足低门槛的快速看到效果</li>\n</ul>\n<p>由于 parcel 在打包过程中给出的调试信息十分有限，所以一旦打包出错难以调试，所以不建议复杂的项目使用 parcel</p>\n<h3 id=\"3-有哪些常见的-Loader？他们是解决什么问题的？\"><a href=\"#3-有哪些常见的-Loader？他们是解决什么问题的？\" class=\"headerlink\" title=\"3. 有哪些常见的 Loader？他们是解决什么问题的？\"></a>3. 有哪些常见的 Loader？他们是解决什么问题的？</h3><ul>\n<li>file-loader：把文件输出到一个文件夹中，在代码中通过相对 URL 去引用输出的文件</li>\n<li>url-loader：和 file-loader 类似，但是能在文件很小的情况下以 base64 的方式把文件内容注入到代码中去</li>\n<li>source-map-loader：加载额外的 Source Map 文件，以方便断点调试</li>\n<li>image-loader：加载并且压缩图片文件</li>\n<li>babel-loader：把 ES6 转换成 ES5</li>\n<li>css-loader：加载 CSS，支持模块化、压缩、文件导入等特性</li>\n<li>style-loader：把 CSS 代码注入到 JavaScript 中，通过 DOM 操作去加载 CSS。</li>\n<li>eslint-loader：通过 ESLint 检查 JavaScript 代码</li>\n</ul>\n<h3 id=\"4-有哪些常见的-Plugin？他们是解决什么问题的？\"><a href=\"#4-有哪些常见的-Plugin？他们是解决什么问题的？\" class=\"headerlink\" title=\"4. 有哪些常见的 Plugin？他们是解决什么问题的？\"></a>4. 有哪些常见的 Plugin？他们是解决什么问题的？</h3><ul>\n<li>define-plugin：定义环境变量</li>\n<li>commons-chunk-plugin：提取公共代码</li>\n<li>uglifyjs-webpack-plugin：通过 UglifyES 压缩 ES6 代码</li>\n</ul>\n<h3 id=\"5-Loader-和-Plugin-的不同？\"><a href=\"#5-Loader-和-Plugin-的不同？\" class=\"headerlink\" title=\"5.Loader 和 Plugin 的不同？\"></a>5.Loader 和 Plugin 的不同？</h3><p><strong>不同的作用</strong></p>\n<ul>\n<li><strong>Loader</strong> 直译为 “加载器”。Webpack 将一切文件视为模块，但是 webpack 原生是只能解析 js 文件，如果想将其他文件也打包的话，就会用到 loader。 所以 Loader 的作用是让 webpack 拥有了加载和解析非 JavaScript 文件的能力。</li>\n<li><strong>Plugin</strong> 直译为 “插件”。Plugin 可以扩展 webpack 的功能，让 webpack 具有更多的灵活性。 在 Webpack 运行的生命周期中会广播出许多事件，Plugin 可以监听这些事件，在合适的时机通过 Webpack 提供的 API 改变输出结果。</li>\n</ul>\n<p><strong>不同的用法</strong></p>\n<ul>\n<li><strong>Loader</strong> 在 module.rules 中配置，也就是说他作为模块的解析规则而存在。 类型为数组，每一项都是一个 Object，里面描述了对于什么类型的文件（test），使用什么加载 (loader) 和使用的参数（options）</li>\n<li><strong>Plugin</strong> 在 plugins 中单独配置。 类型为数组，每一项是一个 plugin 的实例，参数都通过构造函数传入。</li>\n</ul>\n<h3 id=\"6-webpack-的构建流程是什么-从读取配置到输出文件这个过程尽量说全\"><a href=\"#6-webpack-的构建流程是什么-从读取配置到输出文件这个过程尽量说全\" class=\"headerlink\" title=\"6.webpack 的构建流程是什么? 从读取配置到输出文件这个过程尽量说全\"></a>6.webpack 的构建流程是什么? 从读取配置到输出文件这个过程尽量说全</h3><p>Webpack 的运行流程是一个串行的过程，从启动到结束会依次执行以下流程：</p>\n<ol>\n<li>初始化参数：从配置文件和 Shell 语句中读取与合并参数，得出最终的参数；</li>\n<li>开始编译：用上一步得到的参数初始化 Compiler 对象，加载所有配置的插件，执行对象的 run 方法开始执行编译；</li>\n<li>确定入口：根据配置中的 entry 找出所有的入口文件；</li>\n<li>编译模块：从入口文件出发，调用所有配置的 Loader 对模块进行翻译，再找出该模块依赖的模块，再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理；</li>\n<li>完成模块编译：在经过第 4 步使用 Loader 翻译完所有模块后，得到了每个模块被翻译后的最终内容以及它们之间的依赖关系；</li>\n<li>输出资源：根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 Chunk，再把每个 Chunk 转换成一个单独的文件加入到输出列表，这步是可以修改输出内容的最后机会；</li>\n<li>输出完成：在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统。</li>\n</ol>\n<p>在以上过程中，Webpack 会在特定的时间点广播出特定的事件，插件在监听到感兴趣的事件后会执行特定的逻辑，并且插件可以调用 Webpack 提供的 API 改变 Webpack 的运行结果。</p>\n<h3 id=\"7-是否写过-Loader-和-Plugin？描述一下编写-loader-或-plugin-的思路？\"><a href=\"#7-是否写过-Loader-和-Plugin？描述一下编写-loader-或-plugin-的思路？\" class=\"headerlink\" title=\"7. 是否写过 Loader 和 Plugin？描述一下编写 loader 或 plugin 的思路？\"></a>7. 是否写过 Loader 和 Plugin？描述一下编写 loader 或 plugin 的思路？</h3><p>Loader 像一个 “翻译官” 把读到的源文件内容转义成新的文件内容，并且每个 Loader 通过链式操作，将源文件一步步翻译成想要的样子。</p>\n<p>编写 Loader 时要遵循单一原则，每个 Loader 只做一种 “转义” 工作。 每个 Loader 的拿到的是源文件内容（source），可以通过返回值的方式将处理后的内容输出，也可以调用 this.callback() 方法，将内容返回给 webpack。 还可以通过 this.async() 生成一个 callback 函数，再用这个 callback 将处理后的内容输出出去。 此外 webpack 还为开发者准备了开发 loader 的工具函数集——loader-utils。</p>\n<p>相对于 Loader 而言，Plugin 的编写就灵活了许多。 webpack 在运行的生命周期中会广播出许多事件，Plugin 可以监听这些事件，在合适的时机通过 Webpack 提供的 API 改变输出结果。</p>\n<h3 id=\"8-webpack-的热更新是如何做到的？说明其原理？\"><a href=\"#8-webpack-的热更新是如何做到的？说明其原理？\" class=\"headerlink\" title=\"8.webpack 的热更新是如何做到的？说明其原理？\"></a>8.webpack 的热更新是如何做到的？说明其原理？</h3><p>webpack 的热更新又称热替换（Hot Module Replacement），缩写为 HMR。 这个机制可以做到不用刷新浏览器而将新变更的模块替换掉旧的模块。</p>\n<p>原理：</p>\n<p><img src=\"/2020/04/11/webpack%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/webpack1.jpeg\" alt=\"image\"></p>\n<p>首先要知道 server 端和 client 端都做了处理工作</p>\n<ol>\n<li>第一步，在 webpack 的 watch 模式下，文件系统中某一个文件发生修改，webpack 监听到文件变化，根据配置文件对模块重新编译打包，并将打包后的代码通过简单的 JavaScript 对象保存在内存中。</li>\n<li>第二步是 webpack-dev-server 和 webpack 之间的接口交互，而在这一步，主要是 dev-server 的中间件 webpack-dev-middleware 和 webpack 之间的交互，webpack-dev-middleware 调用 webpack 暴露的 API 对代码变化进行监控，并且告诉 webpack，将代码打包到内存中。</li>\n<li>第三步是 webpack-dev-server 对文件变化的一个监控，这一步不同于第一步，并不是监控代码变化重新打包。当我们在配置文件中配置了 devServer.watchContentBase 为 true 的时候，Server 会监听这些配置文件夹中静态文件的变化，变化后会通知浏览器端对应用进行 live reload。注意，这儿是浏览器刷新，和 HMR 是两个概念。</li>\n<li>第四步也是 webpack-dev-server 代码的工作，该步骤主要是通过 sockjs（webpack-dev-server 的依赖）在浏览器端和服务端之间建立一个 websocket 长连接，将 webpack 编译打包的各个阶段的状态信息告知浏览器端，同时也包括第三步中 Server 监听静态文件变化的信息。浏览器端根据这些 socket 消息进行不同的操作。当然服务端传递的最主要信息还是新模块的 hash 值，后面的步骤根据这一 hash 值来进行模块热替换。</li>\n<li>webpack-dev-server/client 端并不能够请求更新的代码，也不会执行热更模块操作，而把这些工作又交回给了 webpack，webpack/hot/dev-server 的工作就是根据 webpack-dev-server/client 传给它的信息以及 dev-server 的配置决定是刷新浏览器呢还是进行模块热更新。当然如果仅仅是刷新浏览器，也就没有后面那些步骤了。</li>\n<li>HotModuleReplacement.runtime 是客户端 HMR 的中枢，它接收到上一步传递给他的新模块的 hash 值，它通过 JsonpMainTemplate.runtime 向 server 端发送 Ajax 请求，服务端返回一个 json，该 json 包含了所有要更新的模块的 hash 值，获取到更新列表后，该模块再次通过 jsonp 请求，获取到最新的模块代码。这就是上图中 7、8、9 步骤。</li>\n<li>而第 10 步是决定 HMR 成功与否的关键步骤，在该步骤中，HotModulePlugin 将会对新旧模块进行对比，决定是否更新模块，在决定更新模块后，检查模块之间的依赖关系，更新模块的同时更新模块间的依赖引用。</li>\n<li>最后一步，当 HMR 失败后，回退到 live reload 操作，也就是进行浏览器刷新来获取最新打包代码。</li>\n</ol>\n<h3 id=\"9-如何利用-webpack-来优化前端性能？（提高性能和体验）\"><a href=\"#9-如何利用-webpack-来优化前端性能？（提高性能和体验）\" class=\"headerlink\" title=\"9. 如何利用 webpack 来优化前端性能？（提高性能和体验）\"></a>9. 如何利用 webpack 来优化前端性能？（提高性能和体验）</h3><p>用 webpack 优化前端性能是指优化 webpack 的输出结果，让打包的最终结果在浏览器运行快速高效。</p>\n<ul>\n<li>压缩代码。删除多余的代码、注释、简化代码的写法等等方式。可以利用 webpack 的 UglifyJsPlugin 和 ParallelUglifyPlugin 来压缩 JS 文件， 利用 cssnano（css-loader?minimize）来压缩 css</li>\n<li>利用 <a href=\"https://cloud.tencent.com/product/cdn?from=10680\" target=\"_blank\" rel=\"noopener\">CDN</a> 加速。在构建过程中，将引用的静态资源路径修改为 CDN 上对应的路径。可以利用 webpack 对于 output 参数和各 loader 的 publicPath 参数来修改资源路径</li>\n<li>删除死代码（Tree Shaking）。将代码中永远不会走到的片段删除掉。可以通过在启动 webpack 时追加参数 –optimize-minimize 来实现</li>\n<li>提取公共代码。</li>\n</ul>\n<h3 id=\"10-如何提高-webpack-的构建速度？\"><a href=\"#10-如何提高-webpack-的构建速度？\" class=\"headerlink\" title=\"10. 如何提高 webpack 的构建速度？\"></a>10. 如何提高 webpack 的构建速度？</h3><ol>\n<li>多入口情况下，使用 CommonsChunkPlugin 来提取公共代码</li>\n<li>通过 externals 配置来提取常用库</li>\n<li>利用 DllPlugin 和 DllReferencePlugin 预编译资源模块 通过 DllPlugin 来对那些我们引用但是绝对不会修改的 npm 包来进行预编译，再通过 DllReferencePlugin 将预编译的模块加载进来。</li>\n<li>使用 Happypack 实现多线程加速编译</li>\n<li>使用 webpack-uglify-parallel 来提升 uglifyPlugin 的压缩速度。 原理上 webpack-uglify-parallel 采用了多核并行压缩来提升压缩速度</li>\n<li>使用 Tree-shaking 和 Scope Hoisting 来剔除多余代码</li>\n</ol>\n<h3 id=\"11-怎么配置单页应用？怎么配置多页应用？\"><a href=\"#11-怎么配置单页应用？怎么配置多页应用？\" class=\"headerlink\" title=\"11. 怎么配置单页应用？怎么配置多页应用？\"></a>11. 怎么配置单页应用？怎么配置多页应用？</h3><p>单页应用可以理解为 webpack 的标准模式，直接在 entry 中指定单页应用的入口即可，这里不再赘述</p>\n<p>多页应用的话，可以使用 webpack 的 AutoWebPlugin 来完成简单自动化的构建，但是前提是项目的目录结构必须遵守他预设的规范。 多页应用中要注意的是：</p>\n<ul>\n<li>每个页面都有公共的代码，可以将这些代码抽离出来，避免重复的加载。比如，每个页面都引用了同一套 css 样式表</li>\n<li>随着业务的不断扩展，页面可能会不断的追加，所以一定要让入口的配置足够灵活，避免每次添加新页面还需要修改构建配置</li>\n</ul>\n<h3 id=\"12-npm-打包时需要注意哪些？如何利用-webpack-来更好的构建？\"><a href=\"#12-npm-打包时需要注意哪些？如何利用-webpack-来更好的构建？\" class=\"headerlink\" title=\"12.npm 打包时需要注意哪些？如何利用 webpack 来更好的构建？\"></a>12.npm 打包时需要注意哪些？如何利用 webpack 来更好的构建？</h3><p>Npm 是目前最大的 JavaScript 模块仓库，里面有来自全世界开发者上传的可复用模块。你可能只是 JS 模块的使用者，但是有些情况你也会去选择上传自己开发的模块。 关于 NPM 模块上传的方法可以去官网上进行学习，这里只讲解如何利用 webpack 来构建。</p>\n<p>NPM 模块需要注意以下问题：</p>\n<ol>\n<li>要支持 CommonJS 模块化规范，所以要求打包后的最后结果也遵守该规则。</li>\n<li>Npm 模块使用者的环境是不确定的，很有可能并不支持 ES6，所以打包的最后结果应该是采用 ES5 编写的。并且如果 ES5 是经过转换的，请最好连同 SourceMap 一同上传。</li>\n<li>Npm 包大小应该是尽量小（有些仓库会限制包大小）</li>\n<li>发布的模块不能将依赖的模块也一同打包，应该让用户选择性的去自行安装。这样可以避免模块应用者再次打包时出现底层模块被重复打包的情况。</li>\n<li>UI 组件类的模块应该将依赖的其它资源文件，例如. css 文件也需要包含在发布的模块里。</li>\n</ol>\n<p>基于以上需要注意的问题，我们可以对于 webpack 配置做以下扩展和优化：</p>\n<ol>\n<li>CommonJS 模块化规范的解决方案： 设置 output.libraryTarget=’commonjs2’使输出的代码符合 CommonJS2 模块化规范，以供给其它模块导入使用</li>\n<li>输出 ES5 代码的解决方案：使用 babel-loader 把 ES6 代码转换成 ES5 的代码。再通过开启 devtool: ‘source-map’输出 SourceMap 以发布调试。</li>\n<li>Npm 包大小尽量小的解决方案：Babel 在把 ES6 代码转换成 ES5 代码时会注入一些辅助函数，最终导致每个输出的文件中都包含这段辅助函数的代码，造成了代码的冗余。解决方法是修改. babelrc 文件，为其加入 transform-runtime 插件</li>\n<li>不能将依赖模块打包到 NPM 模块中的解决方案：使用 externals 配置项来告诉 webpack 哪些模块不需要打包。</li>\n<li>对于依赖的资源文件打包的解决方案：通过 css-loader 和 extract-text-webpack-plugin 来实现，配置如下：</li>\n</ol>\n<p><img src=\"/2020/04/11/webpack%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/webpack2.jpeg\" alt=\"image\"></p>\n<h3 id=\"13-如何在-vue-项目中实现按需加载？\"><a href=\"#13-如何在-vue-项目中实现按需加载？\" class=\"headerlink\" title=\"13. 如何在 vue 项目中实现按需加载？\"></a>13. 如何在 vue 项目中实现按需加载？</h3><p>Vue UI 组件库的按需加载 为了快速开发前端项目，经常会引入现成的 UI 组件库如 ElementUI、iView 等，但是他们的体积和他们所提供的功能一样，是很庞大的。 而通常情况下，我们仅仅需要少量的几个组件就足够了，但是我们却将庞大的组件库打包到我们的源码中，造成了不必要的开销。</p>\n<p>不过很多组件库已经提供了现成的解决方案，如 Element 出品的 babel-plugin-component 和 AntDesign 出品的 babel-plugin-import 安装以上插件后，在. babelrc 配置中或 babel-loader 的参数中进行设置，即可实现组件按需加载了。</p>\n<p><img src=\"/2020/04/11/webpack%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/webpack3.png\" alt=\"image\"></p>\n<p>单页应用的按需加载 现在很多前端项目都是通过单页应用的方式开发的，但是随着业务的不断扩展，会面临一个严峻的问题——首次加载的代码量会越来越多，影响用户的体验。</p>\n<p>通过 import(<em>) 语句来控制加载时机，webpack 内置了对于 import(</em>) 的解析，会将 import(<em>) 中引入的模块作为一个新的入口在生成一个 chunk。 当代码执行到 import(</em>) 语句时，会去加载 Chunk 对应生成的文件。import() 会返回一个 Promise 对象，所以为了让浏览器支持，需要事先注入 Promise polyfill</p>\n<p><strong>参考文章</strong></p>\n<ul>\n<li>关于 webpack 的面试题有哪些？</li>\n<li>前端面试之 webpack 面试常见问题</li>\n<li>《深入浅出 webpack》电子版</li>\n<li>webpack 构建性能优化策略小结</li>\n</ul>\n<p>原文链接：<a href=\"https://www.cnblogs.com/gaoht/p/11310365.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/gaoht/p/11310365.html</a>  </p>"},{"layout":"[post]","title":"webpack动态懒加载","date":"2020-04-24T10:23:05.000Z","_content":"\n\n#### 前言\n\n起因是因为一个基于 vue-cli3.0 的项目突然反馈 vendor 包过大，为了减少用户的白屏时间开始做优化。\n<!-- more -->\n* * *\n\n#### webpack4 的 splitChunk 插件\n\n用过 vue-cli3.0 的同学应该熟悉，其舍弃了以前常用的 build 文件夹下的`webpack.config.js`文件配置，配置内容全部放到`vue.config.js`文件中，实际上关于 webpack 的配置其实和之前大同小异。打包拆分不得不聊到常用的`CommonsChunkPlugin`。\n\n旧项目常用的方式就是通过`webpack.optimize.CommonsChunkPlugin(opts)`，加载该插件进行代码分割。但是其存在很多问题：\n\n*   它可能导致下载更多的超过我们使用的代码\n*   它在异步 chunks 中是低效的\n*   配置繁琐，很难使用\n*   难以被理解\n\n在 webpack4 抛弃了`CommonsChunkPlugin`，换成了更先进的`SplitChunksPlugin`。它们的区别就在于，`CommonChunksPlugin` 会找到多数模块中都共有的东西，并且把它提取出来（common.js），也就意味着如果你加载了 common.js，那么里面可能会存在一些当前模块不需要的东西。\n\n而 `SplitChunksPlugin` 采用了完全不同的 heuristics 方法，它会根据模块之间的依赖关系，自动打包出很多很多（而不是单个）通用模块，可以保证加载进来的代码一定是会被依赖到的。\n\n下面是一个简单的例子，假设我们有 4 个 chunk，分别依赖了以下模块：\n\n![image](webplan1.png)\n\n根据`CommonChunksPlugin`的默认配置，会打包成：  \n\n![image](webplan2.png)\n\n而`SplitChunksPlugin`会打包成：  \n\n![image](webplan3.png)\n\n显然进一步优化了空间。\n\n当然这不是本次讨论的重点，因为 vue-cli3.0 默认情况下已经是使用了`SplitChunksPlugin`的配置，查看 vue-cli service config 文件夹下的 app.js，有一段链式的 webpackConfig 配置了最终打包的 chunks 配置。\n\n```js\nif (isProd && !process.env.CYPRESS_ENV) {\n  webpackConfig\n    .optimization.splitChunks({\n      cacheGroups: {\n        vendors: {\n          name: `chunk-vendors`,\n          test: /[\\\\/]node_modules[\\\\/]/,\n          priority: -10,\n          chunks: 'initial'\n        },\n        common: {\n          name: `chunk-common`,\n          minChunks: 2,\n          priority: -20,\n          chunks: 'initial',\n          reuseExistingChunk: true\n        }\n      }\n    })\n}\n```\n\n通常该默认情况可以满足大部分应用场景，但是考虑我们项目的特殊性，我需要额外提高`chunk-vendors`的 minChunks 项，让一些偶尔出现但是频率没有太高的依赖滚出 vendors。\n\n* * *\n\n#### 动态懒加载\n\n先来聊聊 import 和 require 的区别。  \nrequire/exports 出生在野生规范当中，什么叫做野生规范？即这些规范是 JavaScript 社区中的开发者自己草拟的规则，得到了大家的承认或者广泛的应用。比如 CommonJS、AMD、CMD 等等。  \nimport/export 则是名门正派。TC39 制定的新的 ECMAScript 版本，即 ES6（ES2015）中包含进来。\n\n`const PAGE_A = require.ensure([], () => {require(\"a\")}`。早期写 vue-router，习惯以这种形式去完成异步加载。后续日常开发中，常用的就是 import from 来引入资源（千万避免全局引入 ui 组件，可能会导致资源包异常的大）webpack 官方就指出，应该用 import 来代替`require.ensure`\n\n```js\nfunction determineDate() {\n  import('moment').then(function(moment) {\n    console.log(moment().format());\n  }).catch(function(err) {\n    console.log('Failed to load moment', err);\n  });\n}\n\nimport('./component').then(Component => );\n\nasync function determineDate() {\n  const moment = await import('moment');\n  return moment().format('LLLL');\n}\ndetermineDate().then(str => console.log(str));\n```\n\n相比较而言，import 使用了 promise 的封装，只接受一个参数，就是引用包的地址，语法十分简单。\n\n由于 webpack 需要将所有 import() 的模块都进行单独打包，所以在工程打包阶段，webpack 会进行依赖收集。webpack 会找到所有 import() 的调用，将传入的参数处理成一个正则，如：\n\n```js\nimport('./app'+path+'/util') => /^\\.\\/app.*\\/util$/\n```\n\n也就是说，import 参数中的所有变量，都会被替换为【.*】，而 webpack 就根据这个正则，查找所有符合条件的包，将其作为 package 进行打包。  \n所以 import 的正确姿势，应该是**尽可能静态化表达包所处的路径，最小化变量控制的区域。**  \n如我们要引用一堆页面组件，可以使用`import('./pages/'+ComponentName)`，这样就可以实现引用的封装，同时也避免打包多余的内容。但是 webpack 会保证该路径下所有可能引入的文件是可用的，即会预请求。\n\n官方指出，在 import 内部添加注释，可以完成 chunkname 命名、打包模式等功能。4.6 + 还支持 Prefetching/Preloading 来提前加载 / 预加载资源。（prefetch 用于未来会发生的场合，preload 用于当前场合）\n\n```js\nimport(\n  \n  \n  'module'\n);\n\nimport(\n  \n  \n  \n  \n  \n  \n  `./locale/${language}`\n);\n```\n\n的确是可以完美取代 require 了\n\n* * *\n\n#### 分析结果\n\n借助`webpack-bundle-analyzer`，可以清晰的查看，打包后之后项目的文件大小以及其构成。对于做性能优化有很大的帮助。具体使用方法不再详述，建议直接移步[官方文档](https://links.jianshu.com/go?to=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fwebpack-bundle-analyzer)。\n\n* * *\n\n#### 心得\n\n其实大部分是关于 webpack 的使用方式。老的 require.ensure 也好，新的 import 也好，其实本质还是交给 webpack 去打包处理，在最后选择如何去引入。  \n重要的是 webpack 的配置，即便用了 vue-cli3.0 依然要考虑自定义配置如何去完成，再细化一点就是 import 的引入方式。\n\n* * *\n\n#### 参考\n\n[一步一步的了解 webpack4 的 splitChunk 插件](https://links.jianshu.com/go?to=https%3A%2F%2Fjuejin.im%2Fpost%2F5af1677c6fb9a07ab508dabb)  \n[require 和 import 的区别](https://links.jianshu.com/go?to=https%3A%2F%2Fwww.zhihu.com%2Fquestion%2F56820346)  \n[webpack import() 动态加载模块踩坑](https://links.jianshu.com/go?to=https%3A%2F%2Fsegmentfault.com%2Fa%2F1190000015648036)  \n[webpack-bundle-analyzer](https://links.jianshu.com/go?to=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fwebpack-bundle-analyzer)\n\n\n原文地址 https://www.jianshu.com/p/54015bf76047","source":"_posts/webpack动态懒加载.md","raw":"---\nlayout: '[post]'\ntitle: webpack动态懒加载\ndate: 2020-04-24 18:23:05\ntags: webpack\n---\n\n\n#### 前言\n\n起因是因为一个基于 vue-cli3.0 的项目突然反馈 vendor 包过大，为了减少用户的白屏时间开始做优化。\n<!-- more -->\n* * *\n\n#### webpack4 的 splitChunk 插件\n\n用过 vue-cli3.0 的同学应该熟悉，其舍弃了以前常用的 build 文件夹下的`webpack.config.js`文件配置，配置内容全部放到`vue.config.js`文件中，实际上关于 webpack 的配置其实和之前大同小异。打包拆分不得不聊到常用的`CommonsChunkPlugin`。\n\n旧项目常用的方式就是通过`webpack.optimize.CommonsChunkPlugin(opts)`，加载该插件进行代码分割。但是其存在很多问题：\n\n*   它可能导致下载更多的超过我们使用的代码\n*   它在异步 chunks 中是低效的\n*   配置繁琐，很难使用\n*   难以被理解\n\n在 webpack4 抛弃了`CommonsChunkPlugin`，换成了更先进的`SplitChunksPlugin`。它们的区别就在于，`CommonChunksPlugin` 会找到多数模块中都共有的东西，并且把它提取出来（common.js），也就意味着如果你加载了 common.js，那么里面可能会存在一些当前模块不需要的东西。\n\n而 `SplitChunksPlugin` 采用了完全不同的 heuristics 方法，它会根据模块之间的依赖关系，自动打包出很多很多（而不是单个）通用模块，可以保证加载进来的代码一定是会被依赖到的。\n\n下面是一个简单的例子，假设我们有 4 个 chunk，分别依赖了以下模块：\n\n![image](webplan1.png)\n\n根据`CommonChunksPlugin`的默认配置，会打包成：  \n\n![image](webplan2.png)\n\n而`SplitChunksPlugin`会打包成：  \n\n![image](webplan3.png)\n\n显然进一步优化了空间。\n\n当然这不是本次讨论的重点，因为 vue-cli3.0 默认情况下已经是使用了`SplitChunksPlugin`的配置，查看 vue-cli service config 文件夹下的 app.js，有一段链式的 webpackConfig 配置了最终打包的 chunks 配置。\n\n```js\nif (isProd && !process.env.CYPRESS_ENV) {\n  webpackConfig\n    .optimization.splitChunks({\n      cacheGroups: {\n        vendors: {\n          name: `chunk-vendors`,\n          test: /[\\\\/]node_modules[\\\\/]/,\n          priority: -10,\n          chunks: 'initial'\n        },\n        common: {\n          name: `chunk-common`,\n          minChunks: 2,\n          priority: -20,\n          chunks: 'initial',\n          reuseExistingChunk: true\n        }\n      }\n    })\n}\n```\n\n通常该默认情况可以满足大部分应用场景，但是考虑我们项目的特殊性，我需要额外提高`chunk-vendors`的 minChunks 项，让一些偶尔出现但是频率没有太高的依赖滚出 vendors。\n\n* * *\n\n#### 动态懒加载\n\n先来聊聊 import 和 require 的区别。  \nrequire/exports 出生在野生规范当中，什么叫做野生规范？即这些规范是 JavaScript 社区中的开发者自己草拟的规则，得到了大家的承认或者广泛的应用。比如 CommonJS、AMD、CMD 等等。  \nimport/export 则是名门正派。TC39 制定的新的 ECMAScript 版本，即 ES6（ES2015）中包含进来。\n\n`const PAGE_A = require.ensure([], () => {require(\"a\")}`。早期写 vue-router，习惯以这种形式去完成异步加载。后续日常开发中，常用的就是 import from 来引入资源（千万避免全局引入 ui 组件，可能会导致资源包异常的大）webpack 官方就指出，应该用 import 来代替`require.ensure`\n\n```js\nfunction determineDate() {\n  import('moment').then(function(moment) {\n    console.log(moment().format());\n  }).catch(function(err) {\n    console.log('Failed to load moment', err);\n  });\n}\n\nimport('./component').then(Component => );\n\nasync function determineDate() {\n  const moment = await import('moment');\n  return moment().format('LLLL');\n}\ndetermineDate().then(str => console.log(str));\n```\n\n相比较而言，import 使用了 promise 的封装，只接受一个参数，就是引用包的地址，语法十分简单。\n\n由于 webpack 需要将所有 import() 的模块都进行单独打包，所以在工程打包阶段，webpack 会进行依赖收集。webpack 会找到所有 import() 的调用，将传入的参数处理成一个正则，如：\n\n```js\nimport('./app'+path+'/util') => /^\\.\\/app.*\\/util$/\n```\n\n也就是说，import 参数中的所有变量，都会被替换为【.*】，而 webpack 就根据这个正则，查找所有符合条件的包，将其作为 package 进行打包。  \n所以 import 的正确姿势，应该是**尽可能静态化表达包所处的路径，最小化变量控制的区域。**  \n如我们要引用一堆页面组件，可以使用`import('./pages/'+ComponentName)`，这样就可以实现引用的封装，同时也避免打包多余的内容。但是 webpack 会保证该路径下所有可能引入的文件是可用的，即会预请求。\n\n官方指出，在 import 内部添加注释，可以完成 chunkname 命名、打包模式等功能。4.6 + 还支持 Prefetching/Preloading 来提前加载 / 预加载资源。（prefetch 用于未来会发生的场合，preload 用于当前场合）\n\n```js\nimport(\n  \n  \n  'module'\n);\n\nimport(\n  \n  \n  \n  \n  \n  \n  `./locale/${language}`\n);\n```\n\n的确是可以完美取代 require 了\n\n* * *\n\n#### 分析结果\n\n借助`webpack-bundle-analyzer`，可以清晰的查看，打包后之后项目的文件大小以及其构成。对于做性能优化有很大的帮助。具体使用方法不再详述，建议直接移步[官方文档](https://links.jianshu.com/go?to=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fwebpack-bundle-analyzer)。\n\n* * *\n\n#### 心得\n\n其实大部分是关于 webpack 的使用方式。老的 require.ensure 也好，新的 import 也好，其实本质还是交给 webpack 去打包处理，在最后选择如何去引入。  \n重要的是 webpack 的配置，即便用了 vue-cli3.0 依然要考虑自定义配置如何去完成，再细化一点就是 import 的引入方式。\n\n* * *\n\n#### 参考\n\n[一步一步的了解 webpack4 的 splitChunk 插件](https://links.jianshu.com/go?to=https%3A%2F%2Fjuejin.im%2Fpost%2F5af1677c6fb9a07ab508dabb)  \n[require 和 import 的区别](https://links.jianshu.com/go?to=https%3A%2F%2Fwww.zhihu.com%2Fquestion%2F56820346)  \n[webpack import() 动态加载模块踩坑](https://links.jianshu.com/go?to=https%3A%2F%2Fsegmentfault.com%2Fa%2F1190000015648036)  \n[webpack-bundle-analyzer](https://links.jianshu.com/go?to=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fwebpack-bundle-analyzer)\n\n\n原文地址 https://www.jianshu.com/p/54015bf76047","slug":"webpack动态懒加载","published":1,"updated":"2020-05-18T10:24:47.000Z","comments":1,"photos":[],"link":"","_id":"ckbftlm7500207w2p12ns1pct","content":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>起因是因为一个基于 vue-cli3.0 的项目突然反馈 vendor 包过大，为了减少用户的白屏时间开始做优化。</p>\n<a id=\"more\"></a>\n<hr>\n<h4 id=\"webpack4-的-splitChunk-插件\"><a href=\"#webpack4-的-splitChunk-插件\" class=\"headerlink\" title=\"webpack4 的 splitChunk 插件\"></a>webpack4 的 splitChunk 插件</h4><p>用过 vue-cli3.0 的同学应该熟悉，其舍弃了以前常用的 build 文件夹下的<code>webpack.config.js</code>文件配置，配置内容全部放到<code>vue.config.js</code>文件中，实际上关于 webpack 的配置其实和之前大同小异。打包拆分不得不聊到常用的<code>CommonsChunkPlugin</code>。</p>\n<p>旧项目常用的方式就是通过<code>webpack.optimize.CommonsChunkPlugin(opts)</code>，加载该插件进行代码分割。但是其存在很多问题：</p>\n<ul>\n<li>它可能导致下载更多的超过我们使用的代码</li>\n<li>它在异步 chunks 中是低效的</li>\n<li>配置繁琐，很难使用</li>\n<li>难以被理解</li>\n</ul>\n<p>在 webpack4 抛弃了<code>CommonsChunkPlugin</code>，换成了更先进的<code>SplitChunksPlugin</code>。它们的区别就在于，<code>CommonChunksPlugin</code> 会找到多数模块中都共有的东西，并且把它提取出来（common.js），也就意味着如果你加载了 common.js，那么里面可能会存在一些当前模块不需要的东西。</p>\n<p>而 <code>SplitChunksPlugin</code> 采用了完全不同的 heuristics 方法，它会根据模块之间的依赖关系，自动打包出很多很多（而不是单个）通用模块，可以保证加载进来的代码一定是会被依赖到的。</p>\n<p>下面是一个简单的例子，假设我们有 4 个 chunk，分别依赖了以下模块：</p>\n<p><img src=\"/2020/04/24/webpack%E5%8A%A8%E6%80%81%E6%87%92%E5%8A%A0%E8%BD%BD/webplan1.png\" alt=\"image\"></p>\n<p>根据<code>CommonChunksPlugin</code>的默认配置，会打包成：  </p>\n<p><img src=\"/2020/04/24/webpack%E5%8A%A8%E6%80%81%E6%87%92%E5%8A%A0%E8%BD%BD/webplan2.png\" alt=\"image\"></p>\n<p>而<code>SplitChunksPlugin</code>会打包成：  </p>\n<p><img src=\"/2020/04/24/webpack%E5%8A%A8%E6%80%81%E6%87%92%E5%8A%A0%E8%BD%BD/webplan3.png\" alt=\"image\"></p>\n<p>显然进一步优化了空间。</p>\n<p>当然这不是本次讨论的重点，因为 vue-cli3.0 默认情况下已经是使用了<code>SplitChunksPlugin</code>的配置，查看 vue-cli service config 文件夹下的 app.js，有一段链式的 webpackConfig 配置了最终打包的 chunks 配置。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (isProd &amp;&amp; !process.env.CYPRESS_ENV) &#123;</span><br><span class=\"line\">  webpackConfig</span><br><span class=\"line\">    .optimization.splitChunks(&#123;</span><br><span class=\"line\">      cacheGroups: &#123;</span><br><span class=\"line\">        vendors: &#123;</span><br><span class=\"line\">          name: <span class=\"string\">`chunk-vendors`</span>,</span><br><span class=\"line\">          test: <span class=\"regexp\">/[\\\\/]node_modules[\\\\/]/</span>,</span><br><span class=\"line\">          priority: <span class=\"number\">-10</span>,</span><br><span class=\"line\">          chunks: <span class=\"string\">'initial'</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        common: &#123;</span><br><span class=\"line\">          name: <span class=\"string\">`chunk-common`</span>,</span><br><span class=\"line\">          minChunks: <span class=\"number\">2</span>,</span><br><span class=\"line\">          priority: <span class=\"number\">-20</span>,</span><br><span class=\"line\">          chunks: <span class=\"string\">'initial'</span>,</span><br><span class=\"line\">          reuseExistingChunk: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通常该默认情况可以满足大部分应用场景，但是考虑我们项目的特殊性，我需要额外提高<code>chunk-vendors</code>的 minChunks 项，让一些偶尔出现但是频率没有太高的依赖滚出 vendors。</p>\n<hr>\n<h4 id=\"动态懒加载\"><a href=\"#动态懒加载\" class=\"headerlink\" title=\"动态懒加载\"></a>动态懒加载</h4><p>先来聊聊 import 和 require 的区别。<br>require/exports 出生在野生规范当中，什么叫做野生规范？即这些规范是 JavaScript 社区中的开发者自己草拟的规则，得到了大家的承认或者广泛的应用。比如 CommonJS、AMD、CMD 等等。<br>import/export 则是名门正派。TC39 制定的新的 ECMAScript 版本，即 ES6（ES2015）中包含进来。</p>\n<p><code>const PAGE_A = require.ensure([], () =&gt; {require(&quot;a&quot;)}</code>。早期写 vue-router，习惯以这种形式去完成异步加载。后续日常开发中，常用的就是 import from 来引入资源（千万避免全局引入 ui 组件，可能会导致资源包异常的大）webpack 官方就指出，应该用 import 来代替<code>require.ensure</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">determineDate</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">import</span>(<span class=\"string\">'moment'</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">moment</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(moment().format());</span><br><span class=\"line\">  &#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Failed to load moment'</span>, err);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span>(<span class=\"string\">'./component'</span>).then(<span class=\"function\"><span class=\"params\">Component</span> =&gt;</span> );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">determineDate</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> moment = <span class=\"keyword\">await</span> <span class=\"keyword\">import</span>(<span class=\"string\">'moment'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> moment().format(<span class=\"string\">'LLLL'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">determineDate().then(<span class=\"function\"><span class=\"params\">str</span> =&gt;</span> <span class=\"built_in\">console</span>.log(str));</span><br></pre></td></tr></table></figure>\n\n<p>相比较而言，import 使用了 promise 的封装，只接受一个参数，就是引用包的地址，语法十分简单。</p>\n<p>由于 webpack 需要将所有 import() 的模块都进行单独打包，所以在工程打包阶段，webpack 会进行依赖收集。webpack 会找到所有 import() 的调用，将传入的参数处理成一个正则，如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span>(<span class=\"string\">'./app'</span>+path+<span class=\"string\">'/util'</span>) =&gt; <span class=\"regexp\">/^\\.\\/app.*\\/util$/</span></span><br></pre></td></tr></table></figure>\n\n<p>也就是说，import 参数中的所有变量，都会被替换为【.<em>】，而 webpack 就根据这个正则，查找所有符合条件的包，将其作为 package 进行打包。<br>所以 import 的正确姿势，应该是*</em>尽可能静态化表达包所处的路径，最小化变量控制的区域。**<br>如我们要引用一堆页面组件，可以使用<code>import(&#39;./pages/&#39;+ComponentName)</code>，这样就可以实现引用的封装，同时也避免打包多余的内容。但是 webpack 会保证该路径下所有可能引入的文件是可用的，即会预请求。</p>\n<p>官方指出，在 import 内部添加注释，可以完成 chunkname 命名、打包模式等功能。4.6 + 还支持 Prefetching/Preloading 来提前加载 / 预加载资源。（prefetch 用于未来会发生的场合，preload 用于当前场合）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span>(</span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"string\">'module'</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span>(</span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"string\">`./locale/<span class=\"subst\">$&#123;language&#125;</span>`</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>的确是可以完美取代 require 了</p>\n<hr>\n<h4 id=\"分析结果\"><a href=\"#分析结果\" class=\"headerlink\" title=\"分析结果\"></a>分析结果</h4><p>借助<code>webpack-bundle-analyzer</code>，可以清晰的查看，打包后之后项目的文件大小以及其构成。对于做性能优化有很大的帮助。具体使用方法不再详述，建议直接移步<a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fwebpack-bundle-analyzer\" target=\"_blank\" rel=\"noopener\">官方文档</a>。</p>\n<hr>\n<h4 id=\"心得\"><a href=\"#心得\" class=\"headerlink\" title=\"心得\"></a>心得</h4><p>其实大部分是关于 webpack 的使用方式。老的 require.ensure 也好，新的 import 也好，其实本质还是交给 webpack 去打包处理，在最后选择如何去引入。<br>重要的是 webpack 的配置，即便用了 vue-cli3.0 依然要考虑自定义配置如何去完成，再细化一点就是 import 的引入方式。</p>\n<hr>\n<h4 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h4><p><a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fjuejin.im%2Fpost%2F5af1677c6fb9a07ab508dabb\" target=\"_blank\" rel=\"noopener\">一步一步的了解 webpack4 的 splitChunk 插件</a><br><a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fwww.zhihu.com%2Fquestion%2F56820346\" target=\"_blank\" rel=\"noopener\">require 和 import 的区别</a><br><a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fsegmentfault.com%2Fa%2F1190000015648036\" target=\"_blank\" rel=\"noopener\">webpack import() 动态加载模块踩坑</a><br><a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fwebpack-bundle-analyzer\" target=\"_blank\" rel=\"noopener\">webpack-bundle-analyzer</a></p>\n<p>原文地址 <a href=\"https://www.jianshu.com/p/54015bf76047\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/54015bf76047</a></p>\n","site":{"data":{}},"excerpt":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>起因是因为一个基于 vue-cli3.0 的项目突然反馈 vendor 包过大，为了减少用户的白屏时间开始做优化。</p>","more":"<hr>\n<h4 id=\"webpack4-的-splitChunk-插件\"><a href=\"#webpack4-的-splitChunk-插件\" class=\"headerlink\" title=\"webpack4 的 splitChunk 插件\"></a>webpack4 的 splitChunk 插件</h4><p>用过 vue-cli3.0 的同学应该熟悉，其舍弃了以前常用的 build 文件夹下的<code>webpack.config.js</code>文件配置，配置内容全部放到<code>vue.config.js</code>文件中，实际上关于 webpack 的配置其实和之前大同小异。打包拆分不得不聊到常用的<code>CommonsChunkPlugin</code>。</p>\n<p>旧项目常用的方式就是通过<code>webpack.optimize.CommonsChunkPlugin(opts)</code>，加载该插件进行代码分割。但是其存在很多问题：</p>\n<ul>\n<li>它可能导致下载更多的超过我们使用的代码</li>\n<li>它在异步 chunks 中是低效的</li>\n<li>配置繁琐，很难使用</li>\n<li>难以被理解</li>\n</ul>\n<p>在 webpack4 抛弃了<code>CommonsChunkPlugin</code>，换成了更先进的<code>SplitChunksPlugin</code>。它们的区别就在于，<code>CommonChunksPlugin</code> 会找到多数模块中都共有的东西，并且把它提取出来（common.js），也就意味着如果你加载了 common.js，那么里面可能会存在一些当前模块不需要的东西。</p>\n<p>而 <code>SplitChunksPlugin</code> 采用了完全不同的 heuristics 方法，它会根据模块之间的依赖关系，自动打包出很多很多（而不是单个）通用模块，可以保证加载进来的代码一定是会被依赖到的。</p>\n<p>下面是一个简单的例子，假设我们有 4 个 chunk，分别依赖了以下模块：</p>\n<p><img src=\"/2020/04/24/webpack%E5%8A%A8%E6%80%81%E6%87%92%E5%8A%A0%E8%BD%BD/webplan1.png\" alt=\"image\"></p>\n<p>根据<code>CommonChunksPlugin</code>的默认配置，会打包成：  </p>\n<p><img src=\"/2020/04/24/webpack%E5%8A%A8%E6%80%81%E6%87%92%E5%8A%A0%E8%BD%BD/webplan2.png\" alt=\"image\"></p>\n<p>而<code>SplitChunksPlugin</code>会打包成：  </p>\n<p><img src=\"/2020/04/24/webpack%E5%8A%A8%E6%80%81%E6%87%92%E5%8A%A0%E8%BD%BD/webplan3.png\" alt=\"image\"></p>\n<p>显然进一步优化了空间。</p>\n<p>当然这不是本次讨论的重点，因为 vue-cli3.0 默认情况下已经是使用了<code>SplitChunksPlugin</code>的配置，查看 vue-cli service config 文件夹下的 app.js，有一段链式的 webpackConfig 配置了最终打包的 chunks 配置。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (isProd &amp;&amp; !process.env.CYPRESS_ENV) &#123;</span><br><span class=\"line\">  webpackConfig</span><br><span class=\"line\">    .optimization.splitChunks(&#123;</span><br><span class=\"line\">      cacheGroups: &#123;</span><br><span class=\"line\">        vendors: &#123;</span><br><span class=\"line\">          name: <span class=\"string\">`chunk-vendors`</span>,</span><br><span class=\"line\">          test: <span class=\"regexp\">/[\\\\/]node_modules[\\\\/]/</span>,</span><br><span class=\"line\">          priority: <span class=\"number\">-10</span>,</span><br><span class=\"line\">          chunks: <span class=\"string\">'initial'</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        common: &#123;</span><br><span class=\"line\">          name: <span class=\"string\">`chunk-common`</span>,</span><br><span class=\"line\">          minChunks: <span class=\"number\">2</span>,</span><br><span class=\"line\">          priority: <span class=\"number\">-20</span>,</span><br><span class=\"line\">          chunks: <span class=\"string\">'initial'</span>,</span><br><span class=\"line\">          reuseExistingChunk: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通常该默认情况可以满足大部分应用场景，但是考虑我们项目的特殊性，我需要额外提高<code>chunk-vendors</code>的 minChunks 项，让一些偶尔出现但是频率没有太高的依赖滚出 vendors。</p>\n<hr>\n<h4 id=\"动态懒加载\"><a href=\"#动态懒加载\" class=\"headerlink\" title=\"动态懒加载\"></a>动态懒加载</h4><p>先来聊聊 import 和 require 的区别。<br>require/exports 出生在野生规范当中，什么叫做野生规范？即这些规范是 JavaScript 社区中的开发者自己草拟的规则，得到了大家的承认或者广泛的应用。比如 CommonJS、AMD、CMD 等等。<br>import/export 则是名门正派。TC39 制定的新的 ECMAScript 版本，即 ES6（ES2015）中包含进来。</p>\n<p><code>const PAGE_A = require.ensure([], () =&gt; {require(&quot;a&quot;)}</code>。早期写 vue-router，习惯以这种形式去完成异步加载。后续日常开发中，常用的就是 import from 来引入资源（千万避免全局引入 ui 组件，可能会导致资源包异常的大）webpack 官方就指出，应该用 import 来代替<code>require.ensure</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">determineDate</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">import</span>(<span class=\"string\">'moment'</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">moment</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(moment().format());</span><br><span class=\"line\">  &#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Failed to load moment'</span>, err);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span>(<span class=\"string\">'./component'</span>).then(<span class=\"function\"><span class=\"params\">Component</span> =&gt;</span> );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">determineDate</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> moment = <span class=\"keyword\">await</span> <span class=\"keyword\">import</span>(<span class=\"string\">'moment'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> moment().format(<span class=\"string\">'LLLL'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">determineDate().then(<span class=\"function\"><span class=\"params\">str</span> =&gt;</span> <span class=\"built_in\">console</span>.log(str));</span><br></pre></td></tr></table></figure>\n\n<p>相比较而言，import 使用了 promise 的封装，只接受一个参数，就是引用包的地址，语法十分简单。</p>\n<p>由于 webpack 需要将所有 import() 的模块都进行单独打包，所以在工程打包阶段，webpack 会进行依赖收集。webpack 会找到所有 import() 的调用，将传入的参数处理成一个正则，如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span>(<span class=\"string\">'./app'</span>+path+<span class=\"string\">'/util'</span>) =&gt; <span class=\"regexp\">/^\\.\\/app.*\\/util$/</span></span><br></pre></td></tr></table></figure>\n\n<p>也就是说，import 参数中的所有变量，都会被替换为【.<em>】，而 webpack 就根据这个正则，查找所有符合条件的包，将其作为 package 进行打包。<br>所以 import 的正确姿势，应该是*</em>尽可能静态化表达包所处的路径，最小化变量控制的区域。**<br>如我们要引用一堆页面组件，可以使用<code>import(&#39;./pages/&#39;+ComponentName)</code>，这样就可以实现引用的封装，同时也避免打包多余的内容。但是 webpack 会保证该路径下所有可能引入的文件是可用的，即会预请求。</p>\n<p>官方指出，在 import 内部添加注释，可以完成 chunkname 命名、打包模式等功能。4.6 + 还支持 Prefetching/Preloading 来提前加载 / 预加载资源。（prefetch 用于未来会发生的场合，preload 用于当前场合）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span>(</span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"string\">'module'</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span>(</span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"string\">`./locale/<span class=\"subst\">$&#123;language&#125;</span>`</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>的确是可以完美取代 require 了</p>\n<hr>\n<h4 id=\"分析结果\"><a href=\"#分析结果\" class=\"headerlink\" title=\"分析结果\"></a>分析结果</h4><p>借助<code>webpack-bundle-analyzer</code>，可以清晰的查看，打包后之后项目的文件大小以及其构成。对于做性能优化有很大的帮助。具体使用方法不再详述，建议直接移步<a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fwebpack-bundle-analyzer\" target=\"_blank\" rel=\"noopener\">官方文档</a>。</p>\n<hr>\n<h4 id=\"心得\"><a href=\"#心得\" class=\"headerlink\" title=\"心得\"></a>心得</h4><p>其实大部分是关于 webpack 的使用方式。老的 require.ensure 也好，新的 import 也好，其实本质还是交给 webpack 去打包处理，在最后选择如何去引入。<br>重要的是 webpack 的配置，即便用了 vue-cli3.0 依然要考虑自定义配置如何去完成，再细化一点就是 import 的引入方式。</p>\n<hr>\n<h4 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h4><p><a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fjuejin.im%2Fpost%2F5af1677c6fb9a07ab508dabb\" target=\"_blank\" rel=\"noopener\">一步一步的了解 webpack4 的 splitChunk 插件</a><br><a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fwww.zhihu.com%2Fquestion%2F56820346\" target=\"_blank\" rel=\"noopener\">require 和 import 的区别</a><br><a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fsegmentfault.com%2Fa%2F1190000015648036\" target=\"_blank\" rel=\"noopener\">webpack import() 动态加载模块踩坑</a><br><a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fwebpack-bundle-analyzer\" target=\"_blank\" rel=\"noopener\">webpack-bundle-analyzer</a></p>\n<p>原文地址 <a href=\"https://www.jianshu.com/p/54015bf76047\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/54015bf76047</a></p>"},{"layout":"[post]","title":"webpack配置","date":"2020-04-17T10:20:47.000Z","_content":"## 多入口配置\n<!-- more -->\n\n```js\nconst path = require('path')\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\nconst { srcPath, distPath } = require('./paths')\n\nmodule.exports = {\n    entry: {\n        index: path.join(srcPath, 'index.js'),\n        other: path.join(srcPath, 'other.js')\n    },\n    module: {\n        rules: [\n            {\n                test: /\\.js$/,\n                loader: ['babel-loader'],\n                include: srcPath,\n                exclude: /node_modules/\n            },\n            // {\n            //     test: /\\.css$/,\n            //     // loader 的执行顺序是：从后往前\n            //     loader: ['style-loader', 'css-loader']\n            // },\n            {\n                test: /\\.css$/,\n                // loader 的执行顺序是：从后往前\n                loader: ['style-loader', 'css-loader', 'postcss-loader'] // 加了 postcss\n            },\n            {\n                test: /\\.less$/,\n                // 增加 'less-loader' ，注意顺序\n                loader: ['style-loader', 'css-loader', 'less-loader']\n            }\n        ]\n    },\n    plugins: [\n        // new HtmlWebpackPlugin({\n        //     template: path.join(srcPath, 'index.html'),\n        //     filename: 'index.html'\n        // })\n\n        // 多入口 - 生成 index.html\n        new HtmlWebpackPlugin({\n            template: path.join(srcPath, 'index.html'),\n            filename: 'index.html',\n            // chunks 表示该页面要引用哪些 chunk （即上面的 index 和 other），默认全部引用\n            chunks: ['index']  // 只引用 index.js\n        }),\n        // 多入口 - 生成 other.html\n        new HtmlWebpackPlugin({\n            template: path.join(srcPath, 'other.html'),\n            filename: 'other.html',\n            chunks: ['other']  // 只引用 other.js\n        })\n    ]\n}\n\n```\n## CSS压缩\n\n```js\nconst path = require('path')\nconst webpack = require('webpack')\nconst { smart } = require('webpack-merge')\nconst { CleanWebpackPlugin } = require('clean-webpack-plugin')\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin')\nconst TerserJSPlugin = require('terser-webpack-plugin')\nconst OptimizeCSSAssetsPlugin = require('optimize-css-assets-webpack-plugin')\nconst webpackCommonConf = require('./webpack.common.js')\nconst { srcPath, distPath } = require('./paths')  \n\nmodule.exports = smart(webpackCommonConf, {\n    mode: 'production',\n    output: {\n        // filename: 'bundle.[contentHash:8].js',  // 打包代码时，加上 hash 戳\n        filename: '[name].[contentHash:8].js', // name 即多入口时 entry 的 key\n        path: distPath,\n        // publicPath: 'http://cdn.abc.com'  // 修改所有静态文件 url 的前缀（如 cdn 域名），这里暂时用不到\n    },\n    module: {\n        rules: [\n            // 图片 - 考虑 base64 编码的情况\n            {\n                test: /\\.(png|jpg|jpeg|gif)$/,\n                use: {\n                    loader: 'url-loader',\n                    options: {\n                        // 小于 5kb 的图片用 base64 格式产出\n                        // 否则，依然延用 file-loader 的形式，产出 url 格式\n                        limit: 5 * 1024,\n\n                        // 打包到 img 目录下\n                        outputPath: '/img1/',\n\n                        // 设置图片的 cdn 地址（也可以统一在外面的 output 中设置，那将作用于所有静态资源）\n                        // publicPath: 'http://cdn.abc.com'\n                    }\n                }\n            },\n            // 抽离 css\n            {\n                test: /\\.css$/,\n                loader: [\n                    MiniCssExtractPlugin.loader,  // 注意，这里不再用 style-loader\n                    'css-loader',\n                    'postcss-loader'\n                ]\n            },\n            // 抽离 less --> css\n            {\n                test: /\\.less$/,\n                loader: [\n                    MiniCssExtractPlugin.loader,  // 注意，这里不再用 style-loader\n                    'css-loader',\n                    'less-loader',\n                    'postcss-loader'\n                ]\n            }\n        ]\n    },\n    plugins: [\n        new CleanWebpackPlugin(), // 会默认清空 output.path 文件夹\n        new webpack.DefinePlugin({\n            // window.ENV = 'production'\n            ENV: JSON.stringify('production')\n        }),\n\n        // 抽离 css 文件\n        new MiniCssExtractPlugin({\n            filename: 'css/main.[contentHash:8].css'\n        })\n    ],\n\n    optimization: {\n        // 压缩 css\n        minimizer: [new TerserJSPlugin({}), new OptimizeCSSAssetsPlugin({})],\n    }\n})\n\n```\n## 抽离公共代码\n\n```js\nconst path = require('path')\nconst webpack = require('webpack')\nconst { smart } = require('webpack-merge')\nconst { CleanWebpackPlugin } = require('clean-webpack-plugin')\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin')\nconst TerserJSPlugin = require('terser-webpack-plugin')\nconst OptimizeCSSAssetsPlugin = require('optimize-css-assets-webpack-plugin')\nconst webpackCommonConf = require('./webpack.common.js')\nconst { srcPath, distPath } = require('./paths')\n\nmodule.exports = smart(webpackCommonConf, {\n    mode: 'production',\n    output: {\n        // filename: 'bundle.[contentHash:8].js',  // 打包代码时，加上 hash 戳\n        filename: '[name].[contentHash:8].js', // name 即多入口时 entry 的 key\n        path: distPath,\n        // publicPath: 'http://cdn.abc.com'  // 修改所有静态文件 url 的前缀（如 cdn 域名），这里暂时用不到\n    },\n    module: {\n        rules: [\n            // 图片 - 考虑 base64 编码的情况\n            {\n                test: /\\.(png|jpg|jpeg|gif)$/,\n                use: {\n                    loader: 'url-loader',\n                    options: {\n                        // 小于 5kb 的图片用 base64 格式产出\n                        // 否则，依然延用 file-loader 的形式，产出 url 格式\n                        limit: 5 * 1024,\n\n                        // 打包到 img 目录下\n                        outputPath: '/img1/',\n\n                        // 设置图片的 cdn 地址（也可以统一在外面的 output 中设置，那将作用于所有静态资源）\n                        // publicPath: 'http://cdn.abc.com'\n                    }\n                }\n            },\n            // 抽离 css\n            {\n                test: /\\.css$/,\n                loader: [\n                    MiniCssExtractPlugin.loader,  // 注意，这里不再用 style-loader\n                    'css-loader',\n                    'postcss-loader'\n                ]\n            },\n            // 抽离 less\n            {\n                test: /\\.less$/,\n                loader: [\n                    MiniCssExtractPlugin.loader,  // 注意，这里不再用 style-loader\n                    'css-loader',\n                    'less-loader',\n                    'postcss-loader'\n                ]\n            }\n        ]\n    },\n    plugins: [\n        new CleanWebpackPlugin(), // 会默认清空 output.path 文件夹\n        new webpack.DefinePlugin({\n            // window.ENV = 'production'\n            ENV: JSON.stringify('production')\n        }),\n\n        // 抽离 css 文件\n        new MiniCssExtractPlugin({\n            filename: 'css/main.[contentHash:8].css'\n        })\n    ],\n\n    optimization: {\n        // 压缩 css\n        minimizer: [new TerserJSPlugin({}), new OptimizeCSSAssetsPlugin({})],\n\n        // 分割代码块\n        splitChunks: {\n            chunks: 'all',\n            /**\n             * initial 入口 chunk，对于异步导入的文件不处理\n                async 异步 chunk，只对异步导入的文件处理\n                all 全部 chunk\n             */\n\n            // 缓存分组\n            cacheGroups: {\n                // 第三方模块\n                vendor: {\n                    name: 'vendor', // chunk 名称\n                    priority: 1, // 权限更高，优先抽离，重要！！！\n                    test: /node_modules/,\n                    minSize: 0,  // 大小限制\n                    minChunks: 1  // 最少复用过几次\n                },\n\n                // 公共的模块\n                common: {\n                    name: 'common', // chunk 名称\n                    priority: 0, // 优先级\n                    minSize: 0,  // 公共模块的大小限制\n                    minChunks: 2  // 公共模块最少复用过几次\n                }\n            }\n        }\n    }\n})\n\n```\n","source":"_posts/webpack配置.md","raw":"---\nlayout: '[post]'\ntitle: webpack配置\ndate: 2020-04-17 18:20:47\ntags: webpack\n---\n## 多入口配置\n<!-- more -->\n\n```js\nconst path = require('path')\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\nconst { srcPath, distPath } = require('./paths')\n\nmodule.exports = {\n    entry: {\n        index: path.join(srcPath, 'index.js'),\n        other: path.join(srcPath, 'other.js')\n    },\n    module: {\n        rules: [\n            {\n                test: /\\.js$/,\n                loader: ['babel-loader'],\n                include: srcPath,\n                exclude: /node_modules/\n            },\n            // {\n            //     test: /\\.css$/,\n            //     // loader 的执行顺序是：从后往前\n            //     loader: ['style-loader', 'css-loader']\n            // },\n            {\n                test: /\\.css$/,\n                // loader 的执行顺序是：从后往前\n                loader: ['style-loader', 'css-loader', 'postcss-loader'] // 加了 postcss\n            },\n            {\n                test: /\\.less$/,\n                // 增加 'less-loader' ，注意顺序\n                loader: ['style-loader', 'css-loader', 'less-loader']\n            }\n        ]\n    },\n    plugins: [\n        // new HtmlWebpackPlugin({\n        //     template: path.join(srcPath, 'index.html'),\n        //     filename: 'index.html'\n        // })\n\n        // 多入口 - 生成 index.html\n        new HtmlWebpackPlugin({\n            template: path.join(srcPath, 'index.html'),\n            filename: 'index.html',\n            // chunks 表示该页面要引用哪些 chunk （即上面的 index 和 other），默认全部引用\n            chunks: ['index']  // 只引用 index.js\n        }),\n        // 多入口 - 生成 other.html\n        new HtmlWebpackPlugin({\n            template: path.join(srcPath, 'other.html'),\n            filename: 'other.html',\n            chunks: ['other']  // 只引用 other.js\n        })\n    ]\n}\n\n```\n## CSS压缩\n\n```js\nconst path = require('path')\nconst webpack = require('webpack')\nconst { smart } = require('webpack-merge')\nconst { CleanWebpackPlugin } = require('clean-webpack-plugin')\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin')\nconst TerserJSPlugin = require('terser-webpack-plugin')\nconst OptimizeCSSAssetsPlugin = require('optimize-css-assets-webpack-plugin')\nconst webpackCommonConf = require('./webpack.common.js')\nconst { srcPath, distPath } = require('./paths')  \n\nmodule.exports = smart(webpackCommonConf, {\n    mode: 'production',\n    output: {\n        // filename: 'bundle.[contentHash:8].js',  // 打包代码时，加上 hash 戳\n        filename: '[name].[contentHash:8].js', // name 即多入口时 entry 的 key\n        path: distPath,\n        // publicPath: 'http://cdn.abc.com'  // 修改所有静态文件 url 的前缀（如 cdn 域名），这里暂时用不到\n    },\n    module: {\n        rules: [\n            // 图片 - 考虑 base64 编码的情况\n            {\n                test: /\\.(png|jpg|jpeg|gif)$/,\n                use: {\n                    loader: 'url-loader',\n                    options: {\n                        // 小于 5kb 的图片用 base64 格式产出\n                        // 否则，依然延用 file-loader 的形式，产出 url 格式\n                        limit: 5 * 1024,\n\n                        // 打包到 img 目录下\n                        outputPath: '/img1/',\n\n                        // 设置图片的 cdn 地址（也可以统一在外面的 output 中设置，那将作用于所有静态资源）\n                        // publicPath: 'http://cdn.abc.com'\n                    }\n                }\n            },\n            // 抽离 css\n            {\n                test: /\\.css$/,\n                loader: [\n                    MiniCssExtractPlugin.loader,  // 注意，这里不再用 style-loader\n                    'css-loader',\n                    'postcss-loader'\n                ]\n            },\n            // 抽离 less --> css\n            {\n                test: /\\.less$/,\n                loader: [\n                    MiniCssExtractPlugin.loader,  // 注意，这里不再用 style-loader\n                    'css-loader',\n                    'less-loader',\n                    'postcss-loader'\n                ]\n            }\n        ]\n    },\n    plugins: [\n        new CleanWebpackPlugin(), // 会默认清空 output.path 文件夹\n        new webpack.DefinePlugin({\n            // window.ENV = 'production'\n            ENV: JSON.stringify('production')\n        }),\n\n        // 抽离 css 文件\n        new MiniCssExtractPlugin({\n            filename: 'css/main.[contentHash:8].css'\n        })\n    ],\n\n    optimization: {\n        // 压缩 css\n        minimizer: [new TerserJSPlugin({}), new OptimizeCSSAssetsPlugin({})],\n    }\n})\n\n```\n## 抽离公共代码\n\n```js\nconst path = require('path')\nconst webpack = require('webpack')\nconst { smart } = require('webpack-merge')\nconst { CleanWebpackPlugin } = require('clean-webpack-plugin')\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin')\nconst TerserJSPlugin = require('terser-webpack-plugin')\nconst OptimizeCSSAssetsPlugin = require('optimize-css-assets-webpack-plugin')\nconst webpackCommonConf = require('./webpack.common.js')\nconst { srcPath, distPath } = require('./paths')\n\nmodule.exports = smart(webpackCommonConf, {\n    mode: 'production',\n    output: {\n        // filename: 'bundle.[contentHash:8].js',  // 打包代码时，加上 hash 戳\n        filename: '[name].[contentHash:8].js', // name 即多入口时 entry 的 key\n        path: distPath,\n        // publicPath: 'http://cdn.abc.com'  // 修改所有静态文件 url 的前缀（如 cdn 域名），这里暂时用不到\n    },\n    module: {\n        rules: [\n            // 图片 - 考虑 base64 编码的情况\n            {\n                test: /\\.(png|jpg|jpeg|gif)$/,\n                use: {\n                    loader: 'url-loader',\n                    options: {\n                        // 小于 5kb 的图片用 base64 格式产出\n                        // 否则，依然延用 file-loader 的形式，产出 url 格式\n                        limit: 5 * 1024,\n\n                        // 打包到 img 目录下\n                        outputPath: '/img1/',\n\n                        // 设置图片的 cdn 地址（也可以统一在外面的 output 中设置，那将作用于所有静态资源）\n                        // publicPath: 'http://cdn.abc.com'\n                    }\n                }\n            },\n            // 抽离 css\n            {\n                test: /\\.css$/,\n                loader: [\n                    MiniCssExtractPlugin.loader,  // 注意，这里不再用 style-loader\n                    'css-loader',\n                    'postcss-loader'\n                ]\n            },\n            // 抽离 less\n            {\n                test: /\\.less$/,\n                loader: [\n                    MiniCssExtractPlugin.loader,  // 注意，这里不再用 style-loader\n                    'css-loader',\n                    'less-loader',\n                    'postcss-loader'\n                ]\n            }\n        ]\n    },\n    plugins: [\n        new CleanWebpackPlugin(), // 会默认清空 output.path 文件夹\n        new webpack.DefinePlugin({\n            // window.ENV = 'production'\n            ENV: JSON.stringify('production')\n        }),\n\n        // 抽离 css 文件\n        new MiniCssExtractPlugin({\n            filename: 'css/main.[contentHash:8].css'\n        })\n    ],\n\n    optimization: {\n        // 压缩 css\n        minimizer: [new TerserJSPlugin({}), new OptimizeCSSAssetsPlugin({})],\n\n        // 分割代码块\n        splitChunks: {\n            chunks: 'all',\n            /**\n             * initial 入口 chunk，对于异步导入的文件不处理\n                async 异步 chunk，只对异步导入的文件处理\n                all 全部 chunk\n             */\n\n            // 缓存分组\n            cacheGroups: {\n                // 第三方模块\n                vendor: {\n                    name: 'vendor', // chunk 名称\n                    priority: 1, // 权限更高，优先抽离，重要！！！\n                    test: /node_modules/,\n                    minSize: 0,  // 大小限制\n                    minChunks: 1  // 最少复用过几次\n                },\n\n                // 公共的模块\n                common: {\n                    name: 'common', // chunk 名称\n                    priority: 0, // 优先级\n                    minSize: 0,  // 公共模块的大小限制\n                    minChunks: 2  // 公共模块最少复用过几次\n                }\n            }\n        }\n    }\n})\n\n```\n","slug":"webpack配置","published":1,"updated":"2020-05-18T10:24:41.000Z","comments":1,"photos":[],"link":"","_id":"ckbftlm7700237w2p52fcgvgd","content":"<h2 id=\"多入口配置\"><a href=\"#多入口配置\" class=\"headerlink\" title=\"多入口配置\"></a>多入口配置</h2><a id=\"more\"></a>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; srcPath, distPath &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'./paths'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">        index: path.join(srcPath, <span class=\"string\">'index.js'</span>),</span><br><span class=\"line\">        other: path.join(srcPath, <span class=\"string\">'other.js'</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">        rules: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">                loader: [<span class=\"string\">'babel-loader'</span>],</span><br><span class=\"line\">                include: srcPath,</span><br><span class=\"line\">                exclude: <span class=\"regexp\">/node_modules/</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"comment\">// &#123;</span></span><br><span class=\"line\">            <span class=\"comment\">//     test: /\\.css$/,</span></span><br><span class=\"line\">            <span class=\"comment\">//     // loader 的执行顺序是：从后往前</span></span><br><span class=\"line\">            <span class=\"comment\">//     loader: ['style-loader', 'css-loader']</span></span><br><span class=\"line\">            <span class=\"comment\">// &#125;,</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">                <span class=\"comment\">// loader 的执行顺序是：从后往前</span></span><br><span class=\"line\">                loader: [<span class=\"string\">'style-loader'</span>, <span class=\"string\">'css-loader'</span>, <span class=\"string\">'postcss-loader'</span>] <span class=\"comment\">// 加了 postcss</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: <span class=\"regexp\">/\\.less$/</span>,</span><br><span class=\"line\">                <span class=\"comment\">// 增加 'less-loader' ，注意顺序</span></span><br><span class=\"line\">                loader: [<span class=\"string\">'style-loader'</span>, <span class=\"string\">'css-loader'</span>, <span class=\"string\">'less-loader'</span>]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        <span class=\"comment\">// new HtmlWebpackPlugin(&#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//     template: path.join(srcPath, 'index.html'),</span></span><br><span class=\"line\">        <span class=\"comment\">//     filename: 'index.html'</span></span><br><span class=\"line\">        <span class=\"comment\">// &#125;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 多入口 - 生成 index.html</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">            template: path.join(srcPath, <span class=\"string\">'index.html'</span>),</span><br><span class=\"line\">            filename: <span class=\"string\">'index.html'</span>,</span><br><span class=\"line\">            <span class=\"comment\">// chunks 表示该页面要引用哪些 chunk （即上面的 index 和 other），默认全部引用</span></span><br><span class=\"line\">            chunks: [<span class=\"string\">'index'</span>]  <span class=\"comment\">// 只引用 index.js</span></span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">        <span class=\"comment\">// 多入口 - 生成 other.html</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">            template: path.join(srcPath, <span class=\"string\">'other.html'</span>),</span><br><span class=\"line\">            filename: <span class=\"string\">'other.html'</span>,</span><br><span class=\"line\">            chunks: [<span class=\"string\">'other'</span>]  <span class=\"comment\">// 只引用 other.js</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"CSS压缩\"><a href=\"#CSS压缩\" class=\"headerlink\" title=\"CSS压缩\"></a>CSS压缩</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; smart &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack-merge'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; CleanWebpackPlugin &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'clean-webpack-plugin'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> MiniCssExtractPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'mini-css-extract-plugin'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> TerserJSPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'terser-webpack-plugin'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> OptimizeCSSAssetsPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'optimize-css-assets-webpack-plugin'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpackCommonConf = <span class=\"built_in\">require</span>(<span class=\"string\">'./webpack.common.js'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; srcPath, distPath &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'./paths'</span>)  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = smart(webpackCommonConf, &#123;</span><br><span class=\"line\">    mode: <span class=\"string\">'production'</span>,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// filename: 'bundle.[contentHash:8].js',  // 打包代码时，加上 hash 戳</span></span><br><span class=\"line\">        filename: <span class=\"string\">'[name].[contentHash:8].js'</span>, <span class=\"comment\">// name 即多入口时 entry 的 key</span></span><br><span class=\"line\">        path: distPath,</span><br><span class=\"line\">        <span class=\"comment\">// publicPath: 'http://cdn.abc.com'  // 修改所有静态文件 url 的前缀（如 cdn 域名），这里暂时用不到</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">        rules: [</span><br><span class=\"line\">            <span class=\"comment\">// 图片 - 考虑 base64 编码的情况</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: <span class=\"regexp\">/\\.(png|jpg|jpeg|gif)$/</span>,</span><br><span class=\"line\">                use: &#123;</span><br><span class=\"line\">                    loader: <span class=\"string\">'url-loader'</span>,</span><br><span class=\"line\">                    options: &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// 小于 5kb 的图片用 base64 格式产出</span></span><br><span class=\"line\">                        <span class=\"comment\">// 否则，依然延用 file-loader 的形式，产出 url 格式</span></span><br><span class=\"line\">                        limit: <span class=\"number\">5</span> * <span class=\"number\">1024</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"comment\">// 打包到 img 目录下</span></span><br><span class=\"line\">                        outputPath: <span class=\"string\">'/img1/'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"comment\">// 设置图片的 cdn 地址（也可以统一在外面的 output 中设置，那将作用于所有静态资源）</span></span><br><span class=\"line\">                        <span class=\"comment\">// publicPath: 'http://cdn.abc.com'</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"comment\">// 抽离 css</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">                loader: [</span><br><span class=\"line\">                    MiniCssExtractPlugin.loader,  <span class=\"comment\">// 注意，这里不再用 style-loader</span></span><br><span class=\"line\">                    <span class=\"string\">'css-loader'</span>,</span><br><span class=\"line\">                    <span class=\"string\">'postcss-loader'</span></span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"comment\">// 抽离 less --&gt; css</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: <span class=\"regexp\">/\\.less$/</span>,</span><br><span class=\"line\">                loader: [</span><br><span class=\"line\">                    MiniCssExtractPlugin.loader,  <span class=\"comment\">// 注意，这里不再用 style-loader</span></span><br><span class=\"line\">                    <span class=\"string\">'css-loader'</span>,</span><br><span class=\"line\">                    <span class=\"string\">'less-loader'</span>,</span><br><span class=\"line\">                    <span class=\"string\">'postcss-loader'</span></span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        <span class=\"keyword\">new</span> CleanWebpackPlugin(), <span class=\"comment\">// 会默认清空 output.path 文件夹</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> webpack.DefinePlugin(&#123;</span><br><span class=\"line\">            <span class=\"comment\">// window.ENV = 'production'</span></span><br><span class=\"line\">            ENV: <span class=\"built_in\">JSON</span>.stringify(<span class=\"string\">'production'</span>)</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 抽离 css 文件</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> MiniCssExtractPlugin(&#123;</span><br><span class=\"line\">            filename: <span class=\"string\">'css/main.[contentHash:8].css'</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    ],</span><br><span class=\"line\"></span><br><span class=\"line\">    optimization: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 压缩 css</span></span><br><span class=\"line\">        minimizer: [<span class=\"keyword\">new</span> TerserJSPlugin(&#123;&#125;), <span class=\"keyword\">new</span> OptimizeCSSAssetsPlugin(&#123;&#125;)],</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"抽离公共代码\"><a href=\"#抽离公共代码\" class=\"headerlink\" title=\"抽离公共代码\"></a>抽离公共代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; smart &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack-merge'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; CleanWebpackPlugin &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'clean-webpack-plugin'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> MiniCssExtractPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'mini-css-extract-plugin'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> TerserJSPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'terser-webpack-plugin'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> OptimizeCSSAssetsPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'optimize-css-assets-webpack-plugin'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpackCommonConf = <span class=\"built_in\">require</span>(<span class=\"string\">'./webpack.common.js'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; srcPath, distPath &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'./paths'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = smart(webpackCommonConf, &#123;</span><br><span class=\"line\">    mode: <span class=\"string\">'production'</span>,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// filename: 'bundle.[contentHash:8].js',  // 打包代码时，加上 hash 戳</span></span><br><span class=\"line\">        filename: <span class=\"string\">'[name].[contentHash:8].js'</span>, <span class=\"comment\">// name 即多入口时 entry 的 key</span></span><br><span class=\"line\">        path: distPath,</span><br><span class=\"line\">        <span class=\"comment\">// publicPath: 'http://cdn.abc.com'  // 修改所有静态文件 url 的前缀（如 cdn 域名），这里暂时用不到</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">        rules: [</span><br><span class=\"line\">            <span class=\"comment\">// 图片 - 考虑 base64 编码的情况</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: <span class=\"regexp\">/\\.(png|jpg|jpeg|gif)$/</span>,</span><br><span class=\"line\">                use: &#123;</span><br><span class=\"line\">                    loader: <span class=\"string\">'url-loader'</span>,</span><br><span class=\"line\">                    options: &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// 小于 5kb 的图片用 base64 格式产出</span></span><br><span class=\"line\">                        <span class=\"comment\">// 否则，依然延用 file-loader 的形式，产出 url 格式</span></span><br><span class=\"line\">                        limit: <span class=\"number\">5</span> * <span class=\"number\">1024</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"comment\">// 打包到 img 目录下</span></span><br><span class=\"line\">                        outputPath: <span class=\"string\">'/img1/'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"comment\">// 设置图片的 cdn 地址（也可以统一在外面的 output 中设置，那将作用于所有静态资源）</span></span><br><span class=\"line\">                        <span class=\"comment\">// publicPath: 'http://cdn.abc.com'</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"comment\">// 抽离 css</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">                loader: [</span><br><span class=\"line\">                    MiniCssExtractPlugin.loader,  <span class=\"comment\">// 注意，这里不再用 style-loader</span></span><br><span class=\"line\">                    <span class=\"string\">'css-loader'</span>,</span><br><span class=\"line\">                    <span class=\"string\">'postcss-loader'</span></span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"comment\">// 抽离 less</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: <span class=\"regexp\">/\\.less$/</span>,</span><br><span class=\"line\">                loader: [</span><br><span class=\"line\">                    MiniCssExtractPlugin.loader,  <span class=\"comment\">// 注意，这里不再用 style-loader</span></span><br><span class=\"line\">                    <span class=\"string\">'css-loader'</span>,</span><br><span class=\"line\">                    <span class=\"string\">'less-loader'</span>,</span><br><span class=\"line\">                    <span class=\"string\">'postcss-loader'</span></span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        <span class=\"keyword\">new</span> CleanWebpackPlugin(), <span class=\"comment\">// 会默认清空 output.path 文件夹</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> webpack.DefinePlugin(&#123;</span><br><span class=\"line\">            <span class=\"comment\">// window.ENV = 'production'</span></span><br><span class=\"line\">            ENV: <span class=\"built_in\">JSON</span>.stringify(<span class=\"string\">'production'</span>)</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 抽离 css 文件</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> MiniCssExtractPlugin(&#123;</span><br><span class=\"line\">            filename: <span class=\"string\">'css/main.[contentHash:8].css'</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    ],</span><br><span class=\"line\"></span><br><span class=\"line\">    optimization: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 压缩 css</span></span><br><span class=\"line\">        minimizer: [<span class=\"keyword\">new</span> TerserJSPlugin(&#123;&#125;), <span class=\"keyword\">new</span> OptimizeCSSAssetsPlugin(&#123;&#125;)],</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 分割代码块</span></span><br><span class=\"line\">        splitChunks: &#123;</span><br><span class=\"line\">            chunks: <span class=\"string\">'all'</span>,</span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             * initial 入口 chunk，对于异步导入的文件不处理</span></span><br><span class=\"line\"><span class=\"comment\">                async 异步 chunk，只对异步导入的文件处理</span></span><br><span class=\"line\"><span class=\"comment\">                all 全部 chunk</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 缓存分组</span></span><br><span class=\"line\">            cacheGroups: &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 第三方模块</span></span><br><span class=\"line\">                vendor: &#123;</span><br><span class=\"line\">                    name: <span class=\"string\">'vendor'</span>, <span class=\"comment\">// chunk 名称</span></span><br><span class=\"line\">                    priority: <span class=\"number\">1</span>, <span class=\"comment\">// 权限更高，优先抽离，重要！！！</span></span><br><span class=\"line\">                    test: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">                    minSize: <span class=\"number\">0</span>,  <span class=\"comment\">// 大小限制</span></span><br><span class=\"line\">                    minChunks: <span class=\"number\">1</span>  <span class=\"comment\">// 最少复用过几次</span></span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 公共的模块</span></span><br><span class=\"line\">                common: &#123;</span><br><span class=\"line\">                    name: <span class=\"string\">'common'</span>, <span class=\"comment\">// chunk 名称</span></span><br><span class=\"line\">                    priority: <span class=\"number\">0</span>, <span class=\"comment\">// 优先级</span></span><br><span class=\"line\">                    minSize: <span class=\"number\">0</span>,  <span class=\"comment\">// 公共模块的大小限制</span></span><br><span class=\"line\">                    minChunks: <span class=\"number\">2</span>  <span class=\"comment\">// 公共模块最少复用过几次</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"多入口配置\"><a href=\"#多入口配置\" class=\"headerlink\" title=\"多入口配置\"></a>多入口配置</h2>","more":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; srcPath, distPath &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'./paths'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">        index: path.join(srcPath, <span class=\"string\">'index.js'</span>),</span><br><span class=\"line\">        other: path.join(srcPath, <span class=\"string\">'other.js'</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">        rules: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">                loader: [<span class=\"string\">'babel-loader'</span>],</span><br><span class=\"line\">                include: srcPath,</span><br><span class=\"line\">                exclude: <span class=\"regexp\">/node_modules/</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"comment\">// &#123;</span></span><br><span class=\"line\">            <span class=\"comment\">//     test: /\\.css$/,</span></span><br><span class=\"line\">            <span class=\"comment\">//     // loader 的执行顺序是：从后往前</span></span><br><span class=\"line\">            <span class=\"comment\">//     loader: ['style-loader', 'css-loader']</span></span><br><span class=\"line\">            <span class=\"comment\">// &#125;,</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">                <span class=\"comment\">// loader 的执行顺序是：从后往前</span></span><br><span class=\"line\">                loader: [<span class=\"string\">'style-loader'</span>, <span class=\"string\">'css-loader'</span>, <span class=\"string\">'postcss-loader'</span>] <span class=\"comment\">// 加了 postcss</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: <span class=\"regexp\">/\\.less$/</span>,</span><br><span class=\"line\">                <span class=\"comment\">// 增加 'less-loader' ，注意顺序</span></span><br><span class=\"line\">                loader: [<span class=\"string\">'style-loader'</span>, <span class=\"string\">'css-loader'</span>, <span class=\"string\">'less-loader'</span>]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        <span class=\"comment\">// new HtmlWebpackPlugin(&#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//     template: path.join(srcPath, 'index.html'),</span></span><br><span class=\"line\">        <span class=\"comment\">//     filename: 'index.html'</span></span><br><span class=\"line\">        <span class=\"comment\">// &#125;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 多入口 - 生成 index.html</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">            template: path.join(srcPath, <span class=\"string\">'index.html'</span>),</span><br><span class=\"line\">            filename: <span class=\"string\">'index.html'</span>,</span><br><span class=\"line\">            <span class=\"comment\">// chunks 表示该页面要引用哪些 chunk （即上面的 index 和 other），默认全部引用</span></span><br><span class=\"line\">            chunks: [<span class=\"string\">'index'</span>]  <span class=\"comment\">// 只引用 index.js</span></span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">        <span class=\"comment\">// 多入口 - 生成 other.html</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">            template: path.join(srcPath, <span class=\"string\">'other.html'</span>),</span><br><span class=\"line\">            filename: <span class=\"string\">'other.html'</span>,</span><br><span class=\"line\">            chunks: [<span class=\"string\">'other'</span>]  <span class=\"comment\">// 只引用 other.js</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"CSS压缩\"><a href=\"#CSS压缩\" class=\"headerlink\" title=\"CSS压缩\"></a>CSS压缩</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; smart &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack-merge'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; CleanWebpackPlugin &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'clean-webpack-plugin'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> MiniCssExtractPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'mini-css-extract-plugin'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> TerserJSPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'terser-webpack-plugin'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> OptimizeCSSAssetsPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'optimize-css-assets-webpack-plugin'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpackCommonConf = <span class=\"built_in\">require</span>(<span class=\"string\">'./webpack.common.js'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; srcPath, distPath &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'./paths'</span>)  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = smart(webpackCommonConf, &#123;</span><br><span class=\"line\">    mode: <span class=\"string\">'production'</span>,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// filename: 'bundle.[contentHash:8].js',  // 打包代码时，加上 hash 戳</span></span><br><span class=\"line\">        filename: <span class=\"string\">'[name].[contentHash:8].js'</span>, <span class=\"comment\">// name 即多入口时 entry 的 key</span></span><br><span class=\"line\">        path: distPath,</span><br><span class=\"line\">        <span class=\"comment\">// publicPath: 'http://cdn.abc.com'  // 修改所有静态文件 url 的前缀（如 cdn 域名），这里暂时用不到</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">        rules: [</span><br><span class=\"line\">            <span class=\"comment\">// 图片 - 考虑 base64 编码的情况</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: <span class=\"regexp\">/\\.(png|jpg|jpeg|gif)$/</span>,</span><br><span class=\"line\">                use: &#123;</span><br><span class=\"line\">                    loader: <span class=\"string\">'url-loader'</span>,</span><br><span class=\"line\">                    options: &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// 小于 5kb 的图片用 base64 格式产出</span></span><br><span class=\"line\">                        <span class=\"comment\">// 否则，依然延用 file-loader 的形式，产出 url 格式</span></span><br><span class=\"line\">                        limit: <span class=\"number\">5</span> * <span class=\"number\">1024</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"comment\">// 打包到 img 目录下</span></span><br><span class=\"line\">                        outputPath: <span class=\"string\">'/img1/'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"comment\">// 设置图片的 cdn 地址（也可以统一在外面的 output 中设置，那将作用于所有静态资源）</span></span><br><span class=\"line\">                        <span class=\"comment\">// publicPath: 'http://cdn.abc.com'</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"comment\">// 抽离 css</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">                loader: [</span><br><span class=\"line\">                    MiniCssExtractPlugin.loader,  <span class=\"comment\">// 注意，这里不再用 style-loader</span></span><br><span class=\"line\">                    <span class=\"string\">'css-loader'</span>,</span><br><span class=\"line\">                    <span class=\"string\">'postcss-loader'</span></span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"comment\">// 抽离 less --&gt; css</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: <span class=\"regexp\">/\\.less$/</span>,</span><br><span class=\"line\">                loader: [</span><br><span class=\"line\">                    MiniCssExtractPlugin.loader,  <span class=\"comment\">// 注意，这里不再用 style-loader</span></span><br><span class=\"line\">                    <span class=\"string\">'css-loader'</span>,</span><br><span class=\"line\">                    <span class=\"string\">'less-loader'</span>,</span><br><span class=\"line\">                    <span class=\"string\">'postcss-loader'</span></span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        <span class=\"keyword\">new</span> CleanWebpackPlugin(), <span class=\"comment\">// 会默认清空 output.path 文件夹</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> webpack.DefinePlugin(&#123;</span><br><span class=\"line\">            <span class=\"comment\">// window.ENV = 'production'</span></span><br><span class=\"line\">            ENV: <span class=\"built_in\">JSON</span>.stringify(<span class=\"string\">'production'</span>)</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 抽离 css 文件</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> MiniCssExtractPlugin(&#123;</span><br><span class=\"line\">            filename: <span class=\"string\">'css/main.[contentHash:8].css'</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    ],</span><br><span class=\"line\"></span><br><span class=\"line\">    optimization: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 压缩 css</span></span><br><span class=\"line\">        minimizer: [<span class=\"keyword\">new</span> TerserJSPlugin(&#123;&#125;), <span class=\"keyword\">new</span> OptimizeCSSAssetsPlugin(&#123;&#125;)],</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"抽离公共代码\"><a href=\"#抽离公共代码\" class=\"headerlink\" title=\"抽离公共代码\"></a>抽离公共代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; smart &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack-merge'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; CleanWebpackPlugin &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'clean-webpack-plugin'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> MiniCssExtractPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'mini-css-extract-plugin'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> TerserJSPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'terser-webpack-plugin'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> OptimizeCSSAssetsPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'optimize-css-assets-webpack-plugin'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpackCommonConf = <span class=\"built_in\">require</span>(<span class=\"string\">'./webpack.common.js'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; srcPath, distPath &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'./paths'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = smart(webpackCommonConf, &#123;</span><br><span class=\"line\">    mode: <span class=\"string\">'production'</span>,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// filename: 'bundle.[contentHash:8].js',  // 打包代码时，加上 hash 戳</span></span><br><span class=\"line\">        filename: <span class=\"string\">'[name].[contentHash:8].js'</span>, <span class=\"comment\">// name 即多入口时 entry 的 key</span></span><br><span class=\"line\">        path: distPath,</span><br><span class=\"line\">        <span class=\"comment\">// publicPath: 'http://cdn.abc.com'  // 修改所有静态文件 url 的前缀（如 cdn 域名），这里暂时用不到</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">        rules: [</span><br><span class=\"line\">            <span class=\"comment\">// 图片 - 考虑 base64 编码的情况</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: <span class=\"regexp\">/\\.(png|jpg|jpeg|gif)$/</span>,</span><br><span class=\"line\">                use: &#123;</span><br><span class=\"line\">                    loader: <span class=\"string\">'url-loader'</span>,</span><br><span class=\"line\">                    options: &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// 小于 5kb 的图片用 base64 格式产出</span></span><br><span class=\"line\">                        <span class=\"comment\">// 否则，依然延用 file-loader 的形式，产出 url 格式</span></span><br><span class=\"line\">                        limit: <span class=\"number\">5</span> * <span class=\"number\">1024</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"comment\">// 打包到 img 目录下</span></span><br><span class=\"line\">                        outputPath: <span class=\"string\">'/img1/'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"comment\">// 设置图片的 cdn 地址（也可以统一在外面的 output 中设置，那将作用于所有静态资源）</span></span><br><span class=\"line\">                        <span class=\"comment\">// publicPath: 'http://cdn.abc.com'</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"comment\">// 抽离 css</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">                loader: [</span><br><span class=\"line\">                    MiniCssExtractPlugin.loader,  <span class=\"comment\">// 注意，这里不再用 style-loader</span></span><br><span class=\"line\">                    <span class=\"string\">'css-loader'</span>,</span><br><span class=\"line\">                    <span class=\"string\">'postcss-loader'</span></span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"comment\">// 抽离 less</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: <span class=\"regexp\">/\\.less$/</span>,</span><br><span class=\"line\">                loader: [</span><br><span class=\"line\">                    MiniCssExtractPlugin.loader,  <span class=\"comment\">// 注意，这里不再用 style-loader</span></span><br><span class=\"line\">                    <span class=\"string\">'css-loader'</span>,</span><br><span class=\"line\">                    <span class=\"string\">'less-loader'</span>,</span><br><span class=\"line\">                    <span class=\"string\">'postcss-loader'</span></span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        <span class=\"keyword\">new</span> CleanWebpackPlugin(), <span class=\"comment\">// 会默认清空 output.path 文件夹</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> webpack.DefinePlugin(&#123;</span><br><span class=\"line\">            <span class=\"comment\">// window.ENV = 'production'</span></span><br><span class=\"line\">            ENV: <span class=\"built_in\">JSON</span>.stringify(<span class=\"string\">'production'</span>)</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 抽离 css 文件</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> MiniCssExtractPlugin(&#123;</span><br><span class=\"line\">            filename: <span class=\"string\">'css/main.[contentHash:8].css'</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    ],</span><br><span class=\"line\"></span><br><span class=\"line\">    optimization: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 压缩 css</span></span><br><span class=\"line\">        minimizer: [<span class=\"keyword\">new</span> TerserJSPlugin(&#123;&#125;), <span class=\"keyword\">new</span> OptimizeCSSAssetsPlugin(&#123;&#125;)],</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 分割代码块</span></span><br><span class=\"line\">        splitChunks: &#123;</span><br><span class=\"line\">            chunks: <span class=\"string\">'all'</span>,</span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             * initial 入口 chunk，对于异步导入的文件不处理</span></span><br><span class=\"line\"><span class=\"comment\">                async 异步 chunk，只对异步导入的文件处理</span></span><br><span class=\"line\"><span class=\"comment\">                all 全部 chunk</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 缓存分组</span></span><br><span class=\"line\">            cacheGroups: &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 第三方模块</span></span><br><span class=\"line\">                vendor: &#123;</span><br><span class=\"line\">                    name: <span class=\"string\">'vendor'</span>, <span class=\"comment\">// chunk 名称</span></span><br><span class=\"line\">                    priority: <span class=\"number\">1</span>, <span class=\"comment\">// 权限更高，优先抽离，重要！！！</span></span><br><span class=\"line\">                    test: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">                    minSize: <span class=\"number\">0</span>,  <span class=\"comment\">// 大小限制</span></span><br><span class=\"line\">                    minChunks: <span class=\"number\">1</span>  <span class=\"comment\">// 最少复用过几次</span></span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 公共的模块</span></span><br><span class=\"line\">                common: &#123;</span><br><span class=\"line\">                    name: <span class=\"string\">'common'</span>, <span class=\"comment\">// chunk 名称</span></span><br><span class=\"line\">                    priority: <span class=\"number\">0</span>, <span class=\"comment\">// 优先级</span></span><br><span class=\"line\">                    minSize: <span class=\"number\">0</span>,  <span class=\"comment\">// 公共模块的大小限制</span></span><br><span class=\"line\">                    minChunks: <span class=\"number\">2</span>  <span class=\"comment\">// 公共模块最少复用过几次</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>"},{"layout":"[post]","title":"webp在项目中的应用","date":"2019-03-22T03:11:26.000Z","_content":"## 什么是webp？\nWebP格式，谷歌开发的一种旨在加快图片加载速度的图片格式。图片压缩体积大约只有JPEG的2/3，并能节省大量的服务器宽带资源和数据空间。\n<!-- more -->\n\n## 为什么要用webp\n1. 减小图片加载资源的大小、节省用户流量资源\n2. 降低服务器流量资源  \n### 压缩率\n![yasuo](yasuo.webp)\n\n## webp兼容性情况\n![yasuo](jianrong.webp)  \n结果：谷歌全面支持、安卓浏览器从4.2开始支持。那么在页面中对于安卓用户中图片资源加载大小会有大幅度下降。\n\n## webp在各大网站的使用\n淘宝中大量使用webp。  \n![yasuo](taobao.webp)  \n各大cdn也是支持webp图片格式输出。\n\n## 项目中的实践\n![yasuo](liucheng.webp) \n### 技术实现\n#### webp兼容性如何检测？\n1. 通过js浏览器端判断是否支持webp\n```js\nfunction check_webp_feature(feature, callback) {\n    var kTestImages = {\n        lossy: \"UklGRiIAAABXRUJQVlA4IBYAAAAwAQCdASoBAAEADsD+JaQAA3AAAAAA\",\n        lossless: \"UklGRhoAAABXRUJQVlA4TA0AAAAvAAAAEAcQERGIiP4HAA==\",\n        alpha: \"UklGRkoAAABXRUJQVlA4WAoAAAAQAAAAAAAAAAAAQUxQSAwAAAARBxAR/Q9ERP8DAABWUDggGAAAABQBAJ0BKgEAAQAAAP4AAA3AAP7mtQAAAA==\",\n        animation: \"UklGRlIAAABXRUJQVlA4WAoAAAASAAAAAAAAAAAAQU5JTQYAAAD/////AABBTk1GJgAAAAAAAAAAAAAAAAAAAGQAAABWUDhMDQAAAC8AAAAQBxAREYiI/gcA\"\n    };\n    var img = new Image();\n    img.onload = function () {\n        var result = (img.width > 0) && (img.height > 0);\n        callback(feature, result);\n    };\n    img.onerror = function () {\n        callback(feature, false);\n    };\n    img.src = \"data:image/webp;base64,\" + kTestImages[feature];\n}\n```\n2. 浏览器向服务端发起请求的时候accept 会带上image/webp 信息，在服务端判断是否支持webp。\n\n```js\nmap $http_accept $webp_suffix {\n        default   \"\";\n        \"~*webp\"  \".webp\";\n}\n```\n通过nginx中map方法，查找是否有webp字段，如果有设置$webp_suffix 为.webp值。通过该值就可以来判断是否支持webp。如果支持写入cookie，前端通过检测cookie做判断，是否加载webp图片。\n\nnginx 中设置cookie代码\n\n```java\nlocation / {\n  if ($webp_suffix ~* webp) {\n    add_header Set-Cookie 'webpAvaile=true; path= /; expires=3153600';\n  }\n}\n```\n\n### 在开发中使用  \n#### sass中使用\n\n```scss\n@mixin webpbg($url) {\n    background-image: url($url);\n    @at-root .webpa & {\n        background-image: url($url+'.webp');\n    }\n}\n```\nscss文件使用  \n\n```scss\n@include webpbg('../image/header.jpg');\n```\n\n#### html中使用\n\n```html\n<picture class=\"img\" >\n    <source class=\"img\" srcset=\"images/banner.jpg.webp\" type=\"image/webp\">\n    <img class=\"img\" id=\"headImg\" src=\"images/banner.jpg\"/>\n</picture>\n```\n\n#### 生成webp资源\n使用webpack的loader\n\n```js\nvar imagemin = require('imagemin');\nvar imageminWebp = require('imagemin-webp');\nvar loaderUtils = require('loader-utils');\n \nmodule.exports = function (content) {\n    this.cacheable && this.cacheable();\n    if (!this.emitFile) throw new Error(\"emitFile is required from module system\");\n    var callback = this.async();\n    var options = loaderUtils.getOptions(this);\n \n    // 写入原文件\n    var url = loaderUtils.interpolateName(this, options.name || \"[hash].[ext]\", {\n        content: content,\n        regExp: options.regExp\n    });\n    this.emitFile(url, content);\n \n    // 如果源文件比较小，则没必要转换为webp格式的图片，直接使用callback传递给下一个loader处理\n    var limit;\n    if (options.limit) {\n        limit = parseInt(options.limit, 10);\n    }\n    if (limit <= 0 || content.length < limit) {\n        callback(null, { buffer: content, url })\n        return;\n    }\n \n    // 根据options内容生成webpOptions\n    var webpOptions = {\n        preset: options.preset || 'default',\n        quality: options.quality || 75,\n        alphaQuality: options.alphaQuality || 100,\n        method: options.method || 1,\n        sns: options.sns || 80,\n        autoFilter: options.autoFilter || false,\n        sharpness: options.sharpness || 0,\n        lossless: options.lossless || false,\n    };\n    if (options.size) {\n        webpOptions.size = options.size;\n    }\n    if (options.filter) {\n        webpOptions.filter = options.filter;\n    }\n \n    // 生成的webp图片的名称为原图片的名称后面追加.webp,\n    // 例如：xxx.jpg.webp, 方便在css预处理器中的使用\n    var webpUrl = url + '.webp';\n    // 原图片异步转换为webp的图片\n    imagemin.buffer(content, { plugins: [imageminWebp(webpOptions)] }).then(file => {\n        // 写入webp图片并调用callback\n        this.emitFile(webpUrl, file);\n        // 传递给svg-placrholder-loader，继续处理成placeholder\n        callback(null, { buffer: content, url, webpUrl });\n \n        /* 如果要单独使用的话，可以使用该注释部分的代码\n        const exportJson = 'module.exports = { ' +\n            '\"originSrc\": __webpack_public_path__ + \"' + url +\n            '\" , \"webpSrc\": __webpack_public_path__ + \"' + webpUrl +\n            '\"' +\n            ' };';\n        callback(null, exportJson);   \n        */  \n    }).catch(err => {\n        callback(err);\n    });\n \n};\n \n// 要求webpack传入原始的buffer，方便处理图片\nmodule.exports.raw = true;\n```\n\nnginx生成  \n实现过程，对支持webp的请求设置cookies。利用nginx检测图片请求是否存在，如果不存在通过lua调用imageMagic创建webp图片并返回。需要注意的是nginx需要安装lua支持的模块。\n\n\n```java\nuser  root; # nginx 用户权限 执行lua创建图片命令需要读写权限\n# ...\nhttp {\n    include       mime.types;\n    server {\n        listen       80;\n        server_name  webp.leewr.com;\n        root         /home/leewr/mono/app/public/december;\n        location / {\n            if ($webp_suffix ~* webp) {\n                add_header Set-Cookie 'webpAvaile=true; path= /;';\n            }\n        }\n        location ~* ^(.+\\.(jpg|png|jpeg|gif))(.webp)$ { # 正则匹配图片 paht/name.jpg.webp 格式的图片请求\n            if (!-f $request_filename) { # 如果图片不存在\n                access_log /usr/local/nginx/logs/december.log main; # 设置日志文件\n                set $request_filepath /home/leewr/mono/app/public/december/$1; # 图片真实路径变量\n                set $ext $3; # 设置图片扩展名$ext变量\n                content_by_lua_file lua/webp.lua; # 调用nginx/lua目录下的webp.lua文件\n            }\n        }\n    }\n}\n```\n\n下面看lua, lua 中代码非常简单。定义command命令，调用系统os.execute(command)执行convert图片转换命令。convert是ImageMagic的命令。.. lua 中字符串连接。ngx.var.ext是nginx中定义的变量。\n\n\n```nginx\nlocal command\ncommand = \"convert \" ..ngx.var.request_filepath.. \" \" ..ngx.var.request_filepath..ngx.var.ext\nos.execute(command)\nngx.exec(ngx.var.request_uri)\n```\n\n[原文地址](https://www.jianshu.com/p/73ca9e8b986a)\n","source":"_posts/webp在项目中的应用.md","raw":"---\nlayout: '[post]'\ntitle: webp在项目中的应用\ndate: 2019-03-22 11:11:26\ntags: html\n---\n## 什么是webp？\nWebP格式，谷歌开发的一种旨在加快图片加载速度的图片格式。图片压缩体积大约只有JPEG的2/3，并能节省大量的服务器宽带资源和数据空间。\n<!-- more -->\n\n## 为什么要用webp\n1. 减小图片加载资源的大小、节省用户流量资源\n2. 降低服务器流量资源  \n### 压缩率\n![yasuo](yasuo.webp)\n\n## webp兼容性情况\n![yasuo](jianrong.webp)  \n结果：谷歌全面支持、安卓浏览器从4.2开始支持。那么在页面中对于安卓用户中图片资源加载大小会有大幅度下降。\n\n## webp在各大网站的使用\n淘宝中大量使用webp。  \n![yasuo](taobao.webp)  \n各大cdn也是支持webp图片格式输出。\n\n## 项目中的实践\n![yasuo](liucheng.webp) \n### 技术实现\n#### webp兼容性如何检测？\n1. 通过js浏览器端判断是否支持webp\n```js\nfunction check_webp_feature(feature, callback) {\n    var kTestImages = {\n        lossy: \"UklGRiIAAABXRUJQVlA4IBYAAAAwAQCdASoBAAEADsD+JaQAA3AAAAAA\",\n        lossless: \"UklGRhoAAABXRUJQVlA4TA0AAAAvAAAAEAcQERGIiP4HAA==\",\n        alpha: \"UklGRkoAAABXRUJQVlA4WAoAAAAQAAAAAAAAAAAAQUxQSAwAAAARBxAR/Q9ERP8DAABWUDggGAAAABQBAJ0BKgEAAQAAAP4AAA3AAP7mtQAAAA==\",\n        animation: \"UklGRlIAAABXRUJQVlA4WAoAAAASAAAAAAAAAAAAQU5JTQYAAAD/////AABBTk1GJgAAAAAAAAAAAAAAAAAAAGQAAABWUDhMDQAAAC8AAAAQBxAREYiI/gcA\"\n    };\n    var img = new Image();\n    img.onload = function () {\n        var result = (img.width > 0) && (img.height > 0);\n        callback(feature, result);\n    };\n    img.onerror = function () {\n        callback(feature, false);\n    };\n    img.src = \"data:image/webp;base64,\" + kTestImages[feature];\n}\n```\n2. 浏览器向服务端发起请求的时候accept 会带上image/webp 信息，在服务端判断是否支持webp。\n\n```js\nmap $http_accept $webp_suffix {\n        default   \"\";\n        \"~*webp\"  \".webp\";\n}\n```\n通过nginx中map方法，查找是否有webp字段，如果有设置$webp_suffix 为.webp值。通过该值就可以来判断是否支持webp。如果支持写入cookie，前端通过检测cookie做判断，是否加载webp图片。\n\nnginx 中设置cookie代码\n\n```java\nlocation / {\n  if ($webp_suffix ~* webp) {\n    add_header Set-Cookie 'webpAvaile=true; path= /; expires=3153600';\n  }\n}\n```\n\n### 在开发中使用  \n#### sass中使用\n\n```scss\n@mixin webpbg($url) {\n    background-image: url($url);\n    @at-root .webpa & {\n        background-image: url($url+'.webp');\n    }\n}\n```\nscss文件使用  \n\n```scss\n@include webpbg('../image/header.jpg');\n```\n\n#### html中使用\n\n```html\n<picture class=\"img\" >\n    <source class=\"img\" srcset=\"images/banner.jpg.webp\" type=\"image/webp\">\n    <img class=\"img\" id=\"headImg\" src=\"images/banner.jpg\"/>\n</picture>\n```\n\n#### 生成webp资源\n使用webpack的loader\n\n```js\nvar imagemin = require('imagemin');\nvar imageminWebp = require('imagemin-webp');\nvar loaderUtils = require('loader-utils');\n \nmodule.exports = function (content) {\n    this.cacheable && this.cacheable();\n    if (!this.emitFile) throw new Error(\"emitFile is required from module system\");\n    var callback = this.async();\n    var options = loaderUtils.getOptions(this);\n \n    // 写入原文件\n    var url = loaderUtils.interpolateName(this, options.name || \"[hash].[ext]\", {\n        content: content,\n        regExp: options.regExp\n    });\n    this.emitFile(url, content);\n \n    // 如果源文件比较小，则没必要转换为webp格式的图片，直接使用callback传递给下一个loader处理\n    var limit;\n    if (options.limit) {\n        limit = parseInt(options.limit, 10);\n    }\n    if (limit <= 0 || content.length < limit) {\n        callback(null, { buffer: content, url })\n        return;\n    }\n \n    // 根据options内容生成webpOptions\n    var webpOptions = {\n        preset: options.preset || 'default',\n        quality: options.quality || 75,\n        alphaQuality: options.alphaQuality || 100,\n        method: options.method || 1,\n        sns: options.sns || 80,\n        autoFilter: options.autoFilter || false,\n        sharpness: options.sharpness || 0,\n        lossless: options.lossless || false,\n    };\n    if (options.size) {\n        webpOptions.size = options.size;\n    }\n    if (options.filter) {\n        webpOptions.filter = options.filter;\n    }\n \n    // 生成的webp图片的名称为原图片的名称后面追加.webp,\n    // 例如：xxx.jpg.webp, 方便在css预处理器中的使用\n    var webpUrl = url + '.webp';\n    // 原图片异步转换为webp的图片\n    imagemin.buffer(content, { plugins: [imageminWebp(webpOptions)] }).then(file => {\n        // 写入webp图片并调用callback\n        this.emitFile(webpUrl, file);\n        // 传递给svg-placrholder-loader，继续处理成placeholder\n        callback(null, { buffer: content, url, webpUrl });\n \n        /* 如果要单独使用的话，可以使用该注释部分的代码\n        const exportJson = 'module.exports = { ' +\n            '\"originSrc\": __webpack_public_path__ + \"' + url +\n            '\" , \"webpSrc\": __webpack_public_path__ + \"' + webpUrl +\n            '\"' +\n            ' };';\n        callback(null, exportJson);   \n        */  \n    }).catch(err => {\n        callback(err);\n    });\n \n};\n \n// 要求webpack传入原始的buffer，方便处理图片\nmodule.exports.raw = true;\n```\n\nnginx生成  \n实现过程，对支持webp的请求设置cookies。利用nginx检测图片请求是否存在，如果不存在通过lua调用imageMagic创建webp图片并返回。需要注意的是nginx需要安装lua支持的模块。\n\n\n```java\nuser  root; # nginx 用户权限 执行lua创建图片命令需要读写权限\n# ...\nhttp {\n    include       mime.types;\n    server {\n        listen       80;\n        server_name  webp.leewr.com;\n        root         /home/leewr/mono/app/public/december;\n        location / {\n            if ($webp_suffix ~* webp) {\n                add_header Set-Cookie 'webpAvaile=true; path= /;';\n            }\n        }\n        location ~* ^(.+\\.(jpg|png|jpeg|gif))(.webp)$ { # 正则匹配图片 paht/name.jpg.webp 格式的图片请求\n            if (!-f $request_filename) { # 如果图片不存在\n                access_log /usr/local/nginx/logs/december.log main; # 设置日志文件\n                set $request_filepath /home/leewr/mono/app/public/december/$1; # 图片真实路径变量\n                set $ext $3; # 设置图片扩展名$ext变量\n                content_by_lua_file lua/webp.lua; # 调用nginx/lua目录下的webp.lua文件\n            }\n        }\n    }\n}\n```\n\n下面看lua, lua 中代码非常简单。定义command命令，调用系统os.execute(command)执行convert图片转换命令。convert是ImageMagic的命令。.. lua 中字符串连接。ngx.var.ext是nginx中定义的变量。\n\n\n```nginx\nlocal command\ncommand = \"convert \" ..ngx.var.request_filepath.. \" \" ..ngx.var.request_filepath..ngx.var.ext\nos.execute(command)\nngx.exec(ngx.var.request_uri)\n```\n\n[原文地址](https://www.jianshu.com/p/73ca9e8b986a)\n","slug":"webp在项目中的应用","published":1,"updated":"2020-02-03T09:29:59.000Z","comments":1,"photos":[],"link":"","_id":"ckbftlm7800257w2phck96ymk","content":"<h2 id=\"什么是webp？\"><a href=\"#什么是webp？\" class=\"headerlink\" title=\"什么是webp？\"></a>什么是webp？</h2><p>WebP格式，谷歌开发的一种旨在加快图片加载速度的图片格式。图片压缩体积大约只有JPEG的2/3，并能节省大量的服务器宽带资源和数据空间。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"为什么要用webp\"><a href=\"#为什么要用webp\" class=\"headerlink\" title=\"为什么要用webp\"></a>为什么要用webp</h2><ol>\n<li>减小图片加载资源的大小、节省用户流量资源</li>\n<li>降低服务器流量资源  <h3 id=\"压缩率\"><a href=\"#压缩率\" class=\"headerlink\" title=\"压缩率\"></a>压缩率</h3><img src=\"/2019/03/22/webp%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/yasuo.webp\" alt=\"yasuo\"></li>\n</ol>\n<h2 id=\"webp兼容性情况\"><a href=\"#webp兼容性情况\" class=\"headerlink\" title=\"webp兼容性情况\"></a>webp兼容性情况</h2><p><img src=\"/2019/03/22/webp%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/jianrong.webp\" alt=\"yasuo\"><br>结果：谷歌全面支持、安卓浏览器从4.2开始支持。那么在页面中对于安卓用户中图片资源加载大小会有大幅度下降。</p>\n<h2 id=\"webp在各大网站的使用\"><a href=\"#webp在各大网站的使用\" class=\"headerlink\" title=\"webp在各大网站的使用\"></a>webp在各大网站的使用</h2><p>淘宝中大量使用webp。<br><img src=\"/2019/03/22/webp%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/taobao.webp\" alt=\"yasuo\"><br>各大cdn也是支持webp图片格式输出。</p>\n<h2 id=\"项目中的实践\"><a href=\"#项目中的实践\" class=\"headerlink\" title=\"项目中的实践\"></a>项目中的实践</h2><p><img src=\"/2019/03/22/webp%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/liucheng.webp\" alt=\"yasuo\"> </p>\n<h3 id=\"技术实现\"><a href=\"#技术实现\" class=\"headerlink\" title=\"技术实现\"></a>技术实现</h3><h4 id=\"webp兼容性如何检测？\"><a href=\"#webp兼容性如何检测？\" class=\"headerlink\" title=\"webp兼容性如何检测？\"></a>webp兼容性如何检测？</h4><ol>\n<li>通过js浏览器端判断是否支持webp<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">check_webp_feature</span>(<span class=\"params\">feature, callback</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> kTestImages = &#123;</span><br><span class=\"line\">        lossy: <span class=\"string\">\"UklGRiIAAABXRUJQVlA4IBYAAAAwAQCdASoBAAEADsD+JaQAA3AAAAAA\"</span>,</span><br><span class=\"line\">        lossless: <span class=\"string\">\"UklGRhoAAABXRUJQVlA4TA0AAAAvAAAAEAcQERGIiP4HAA==\"</span>,</span><br><span class=\"line\">        alpha: <span class=\"string\">\"UklGRkoAAABXRUJQVlA4WAoAAAAQAAAAAAAAAAAAQUxQSAwAAAARBxAR/Q9ERP8DAABWUDggGAAAABQBAJ0BKgEAAQAAAP4AAA3AAP7mtQAAAA==\"</span>,</span><br><span class=\"line\">        animation: <span class=\"string\">\"UklGRlIAAABXRUJQVlA4WAoAAAASAAAAAAAAAAAAQU5JTQYAAAD/////AABBTk1GJgAAAAAAAAAAAAAAAAAAAGQAAABWUDhMDQAAAC8AAAAQBxAREYiI/gcA\"</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\">    img.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> result = (img.width &gt; <span class=\"number\">0</span>) &amp;&amp; (img.height &gt; <span class=\"number\">0</span>);</span><br><span class=\"line\">        callback(feature, result);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    img.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        callback(feature, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    img.src = <span class=\"string\">\"data:image/webp;base64,\"</span> + kTestImages[feature];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>浏览器向服务端发起请求的时候accept 会带上image/webp 信息，在服务端判断是否支持webp。</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map $http_accept $webp_suffix &#123;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>   <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        <span class=\"string\">\"~*webp\"</span>  <span class=\"string\">\".webp\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过nginx中map方法，查找是否有webp字段，如果有设置$webp_suffix 为.webp值。通过该值就可以来判断是否支持webp。如果支持写入cookie，前端通过检测cookie做判断，是否加载webp图片。</p>\n<p>nginx 中设置cookie代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location / &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ($webp_suffix ~* webp) &#123;</span><br><span class=\"line\">    add_header Set-Cookie <span class=\"string\">'webpAvaile=true; path= /; expires=3153600'</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在开发中使用\"><a href=\"#在开发中使用\" class=\"headerlink\" title=\"在开发中使用\"></a>在开发中使用</h3><h4 id=\"sass中使用\"><a href=\"#sass中使用\" class=\"headerlink\" title=\"sass中使用\"></a>sass中使用</h4><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@mixin</span> webpbg(<span class=\"variable\">$url</span>) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-image</span>: url(<span class=\"variable\">$url</span>);</span><br><span class=\"line\">    <span class=\"keyword\">@at-root</span> .webpa &amp; &#123;</span><br><span class=\"line\">        <span class=\"attribute\">background-image</span>: url(<span class=\"variable\">$url</span>+<span class=\"string\">'.webp'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>scss文件使用  </p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@include</span> webpbg(<span class=\"string\">'../image/header.jpg'</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"html中使用\"><a href=\"#html中使用\" class=\"headerlink\" title=\"html中使用\"></a>html中使用</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">picture</span> <span class=\"attr\">class</span>=<span class=\"string\">\"img\"</span> &gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">class</span>=<span class=\"string\">\"img\"</span> <span class=\"attr\">srcset</span>=<span class=\"string\">\"images/banner.jpg.webp\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"image/webp\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">class</span>=<span class=\"string\">\"img\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"headImg\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"images/banner.jpg\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">picture</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"生成webp资源\"><a href=\"#生成webp资源\" class=\"headerlink\" title=\"生成webp资源\"></a>生成webp资源</h4><p>使用webpack的loader</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> imagemin = <span class=\"built_in\">require</span>(<span class=\"string\">'imagemin'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> imageminWebp = <span class=\"built_in\">require</span>(<span class=\"string\">'imagemin-webp'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> loaderUtils = <span class=\"built_in\">require</span>(<span class=\"string\">'loader-utils'</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">content</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.cacheable &amp;&amp; <span class=\"keyword\">this</span>.cacheable();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.emitFile) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"emitFile is required from module system\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> callback = <span class=\"keyword\">this</span>.async();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> options = loaderUtils.getOptions(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 写入原文件</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> url = loaderUtils.interpolateName(<span class=\"keyword\">this</span>, options.name || <span class=\"string\">\"[hash].[ext]\"</span>, &#123;</span><br><span class=\"line\">        content: content,</span><br><span class=\"line\">        regExp: options.regExp</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.emitFile(url, content);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 如果源文件比较小，则没必要转换为webp格式的图片，直接使用callback传递给下一个loader处理</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> limit;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (options.limit) &#123;</span><br><span class=\"line\">        limit = <span class=\"built_in\">parseInt</span>(options.limit, <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (limit &lt;= <span class=\"number\">0</span> || content.length &lt; limit) &#123;</span><br><span class=\"line\">        callback(<span class=\"literal\">null</span>, &#123; <span class=\"attr\">buffer</span>: content, url &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 根据options内容生成webpOptions</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> webpOptions = &#123;</span><br><span class=\"line\">        preset: options.preset || <span class=\"string\">'default'</span>,</span><br><span class=\"line\">        quality: options.quality || <span class=\"number\">75</span>,</span><br><span class=\"line\">        alphaQuality: options.alphaQuality || <span class=\"number\">100</span>,</span><br><span class=\"line\">        method: options.method || <span class=\"number\">1</span>,</span><br><span class=\"line\">        sns: options.sns || <span class=\"number\">80</span>,</span><br><span class=\"line\">        autoFilter: options.autoFilter || <span class=\"literal\">false</span>,</span><br><span class=\"line\">        sharpness: options.sharpness || <span class=\"number\">0</span>,</span><br><span class=\"line\">        lossless: options.lossless || <span class=\"literal\">false</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (options.size) &#123;</span><br><span class=\"line\">        webpOptions.size = options.size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (options.filter) &#123;</span><br><span class=\"line\">        webpOptions.filter = options.filter;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 生成的webp图片的名称为原图片的名称后面追加.webp,</span></span><br><span class=\"line\">    <span class=\"comment\">// 例如：xxx.jpg.webp, 方便在css预处理器中的使用</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> webpUrl = url + <span class=\"string\">'.webp'</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 原图片异步转换为webp的图片</span></span><br><span class=\"line\">    imagemin.buffer(content, &#123; <span class=\"attr\">plugins</span>: [imageminWebp(webpOptions)] &#125;).then(<span class=\"function\"><span class=\"params\">file</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 写入webp图片并调用callback</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.emitFile(webpUrl, file);</span><br><span class=\"line\">        <span class=\"comment\">// 传递给svg-placrholder-loader，继续处理成placeholder</span></span><br><span class=\"line\">        callback(<span class=\"literal\">null</span>, &#123; <span class=\"attr\">buffer</span>: content, url, webpUrl &#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">/* 如果要单独使用的话，可以使用该注释部分的代码</span></span><br><span class=\"line\"><span class=\"comment\">        const exportJson = 'module.exports = &#123; ' +</span></span><br><span class=\"line\"><span class=\"comment\">            '\"originSrc\": __webpack_public_path__ + \"' + url +</span></span><br><span class=\"line\"><span class=\"comment\">            '\" , \"webpSrc\": __webpack_public_path__ + \"' + webpUrl +</span></span><br><span class=\"line\"><span class=\"comment\">            '\"' +</span></span><br><span class=\"line\"><span class=\"comment\">            ' &#125;;';</span></span><br><span class=\"line\"><span class=\"comment\">        callback(null, exportJson);   </span></span><br><span class=\"line\"><span class=\"comment\">        */</span>  </span><br><span class=\"line\">    &#125;).catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">        callback(err);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 要求webpack传入原始的buffer，方便处理图片</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports.raw = <span class=\"literal\">true</span>;</span><br></pre></td></tr></table></figure>\n\n<p>nginx生成<br>实现过程，对支持webp的请求设置cookies。利用nginx检测图片请求是否存在，如果不存在通过lua调用imageMagic创建webp图片并返回。需要注意的是nginx需要安装lua支持的模块。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user  root; # nginx 用户权限 执行lua创建图片命令需要读写权限</span><br><span class=\"line\"># ...</span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen       <span class=\"number\">80</span>;</span><br><span class=\"line\">        server_name  webp.leewr.com;</span><br><span class=\"line\">        root         /home/leewr/mono/app/<span class=\"keyword\">public</span>/december;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ($webp_suffix ~* webp) &#123;</span><br><span class=\"line\">                add_header Set-Cookie <span class=\"string\">'webpAvaile=true; path= /;'</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        location ~* ^(.+\\.(jpg|png|jpeg|gif))(.webp)$ &#123; # 正则匹配图片 paht/name.jpg.webp 格式的图片请求</span><br><span class=\"line\">            if (!-f $request_filename) &#123; # 如果图片不存在</span><br><span class=\"line\">                access_log /usr/local/nginx/logs/december.log main; # 设置日志文件</span><br><span class=\"line\">                set $request_filepath /home/leewr/mono/app/public/december/$1; # 图片真实路径变量</span><br><span class=\"line\">                set $ext $3; # 设置图片扩展名$ext变量</span><br><span class=\"line\">                content_by_lua_file lua/webp.lua; # 调用nginx/lua目录下的webp.lua文件</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面看lua, lua 中代码非常简单。定义command命令，调用系统os.execute(command)执行convert图片转换命令。convert是ImageMagic的命令。.. lua 中字符串连接。ngx.var.ext是nginx中定义的变量。</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">local</span> command</span><br><span class=\"line\">command = <span class=\"string\">\"convert \"</span> ..ngx.var.request_filepath.. <span class=\"string\">\" \"</span> ..ngx.var.request_filepath..ngx.var.ext</span><br><span class=\"line\">os.execute(command)</span><br><span class=\"line\">ngx.exec(ngx.var.request_uri)</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://www.jianshu.com/p/73ca9e8b986a\" target=\"_blank\" rel=\"noopener\">原文地址</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"什么是webp？\"><a href=\"#什么是webp？\" class=\"headerlink\" title=\"什么是webp？\"></a>什么是webp？</h2><p>WebP格式，谷歌开发的一种旨在加快图片加载速度的图片格式。图片压缩体积大约只有JPEG的2/3，并能节省大量的服务器宽带资源和数据空间。</p>","more":"<h2 id=\"为什么要用webp\"><a href=\"#为什么要用webp\" class=\"headerlink\" title=\"为什么要用webp\"></a>为什么要用webp</h2><ol>\n<li>减小图片加载资源的大小、节省用户流量资源</li>\n<li>降低服务器流量资源  <h3 id=\"压缩率\"><a href=\"#压缩率\" class=\"headerlink\" title=\"压缩率\"></a>压缩率</h3><img src=\"/2019/03/22/webp%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/yasuo.webp\" alt=\"yasuo\"></li>\n</ol>\n<h2 id=\"webp兼容性情况\"><a href=\"#webp兼容性情况\" class=\"headerlink\" title=\"webp兼容性情况\"></a>webp兼容性情况</h2><p><img src=\"/2019/03/22/webp%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/jianrong.webp\" alt=\"yasuo\"><br>结果：谷歌全面支持、安卓浏览器从4.2开始支持。那么在页面中对于安卓用户中图片资源加载大小会有大幅度下降。</p>\n<h2 id=\"webp在各大网站的使用\"><a href=\"#webp在各大网站的使用\" class=\"headerlink\" title=\"webp在各大网站的使用\"></a>webp在各大网站的使用</h2><p>淘宝中大量使用webp。<br><img src=\"/2019/03/22/webp%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/taobao.webp\" alt=\"yasuo\"><br>各大cdn也是支持webp图片格式输出。</p>\n<h2 id=\"项目中的实践\"><a href=\"#项目中的实践\" class=\"headerlink\" title=\"项目中的实践\"></a>项目中的实践</h2><p><img src=\"/2019/03/22/webp%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/liucheng.webp\" alt=\"yasuo\"> </p>\n<h3 id=\"技术实现\"><a href=\"#技术实现\" class=\"headerlink\" title=\"技术实现\"></a>技术实现</h3><h4 id=\"webp兼容性如何检测？\"><a href=\"#webp兼容性如何检测？\" class=\"headerlink\" title=\"webp兼容性如何检测？\"></a>webp兼容性如何检测？</h4><ol>\n<li>通过js浏览器端判断是否支持webp<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">check_webp_feature</span>(<span class=\"params\">feature, callback</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> kTestImages = &#123;</span><br><span class=\"line\">        lossy: <span class=\"string\">\"UklGRiIAAABXRUJQVlA4IBYAAAAwAQCdASoBAAEADsD+JaQAA3AAAAAA\"</span>,</span><br><span class=\"line\">        lossless: <span class=\"string\">\"UklGRhoAAABXRUJQVlA4TA0AAAAvAAAAEAcQERGIiP4HAA==\"</span>,</span><br><span class=\"line\">        alpha: <span class=\"string\">\"UklGRkoAAABXRUJQVlA4WAoAAAAQAAAAAAAAAAAAQUxQSAwAAAARBxAR/Q9ERP8DAABWUDggGAAAABQBAJ0BKgEAAQAAAP4AAA3AAP7mtQAAAA==\"</span>,</span><br><span class=\"line\">        animation: <span class=\"string\">\"UklGRlIAAABXRUJQVlA4WAoAAAASAAAAAAAAAAAAQU5JTQYAAAD/////AABBTk1GJgAAAAAAAAAAAAAAAAAAAGQAAABWUDhMDQAAAC8AAAAQBxAREYiI/gcA\"</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\">    img.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> result = (img.width &gt; <span class=\"number\">0</span>) &amp;&amp; (img.height &gt; <span class=\"number\">0</span>);</span><br><span class=\"line\">        callback(feature, result);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    img.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        callback(feature, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    img.src = <span class=\"string\">\"data:image/webp;base64,\"</span> + kTestImages[feature];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>浏览器向服务端发起请求的时候accept 会带上image/webp 信息，在服务端判断是否支持webp。</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map $http_accept $webp_suffix &#123;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>   <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        <span class=\"string\">\"~*webp\"</span>  <span class=\"string\">\".webp\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过nginx中map方法，查找是否有webp字段，如果有设置$webp_suffix 为.webp值。通过该值就可以来判断是否支持webp。如果支持写入cookie，前端通过检测cookie做判断，是否加载webp图片。</p>\n<p>nginx 中设置cookie代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location / &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ($webp_suffix ~* webp) &#123;</span><br><span class=\"line\">    add_header Set-Cookie <span class=\"string\">'webpAvaile=true; path= /; expires=3153600'</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在开发中使用\"><a href=\"#在开发中使用\" class=\"headerlink\" title=\"在开发中使用\"></a>在开发中使用</h3><h4 id=\"sass中使用\"><a href=\"#sass中使用\" class=\"headerlink\" title=\"sass中使用\"></a>sass中使用</h4><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@mixin</span> webpbg(<span class=\"variable\">$url</span>) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-image</span>: url(<span class=\"variable\">$url</span>);</span><br><span class=\"line\">    <span class=\"keyword\">@at-root</span> .webpa &amp; &#123;</span><br><span class=\"line\">        <span class=\"attribute\">background-image</span>: url(<span class=\"variable\">$url</span>+<span class=\"string\">'.webp'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>scss文件使用  </p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@include</span> webpbg(<span class=\"string\">'../image/header.jpg'</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"html中使用\"><a href=\"#html中使用\" class=\"headerlink\" title=\"html中使用\"></a>html中使用</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">picture</span> <span class=\"attr\">class</span>=<span class=\"string\">\"img\"</span> &gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">class</span>=<span class=\"string\">\"img\"</span> <span class=\"attr\">srcset</span>=<span class=\"string\">\"images/banner.jpg.webp\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"image/webp\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">class</span>=<span class=\"string\">\"img\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"headImg\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"images/banner.jpg\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">picture</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"生成webp资源\"><a href=\"#生成webp资源\" class=\"headerlink\" title=\"生成webp资源\"></a>生成webp资源</h4><p>使用webpack的loader</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> imagemin = <span class=\"built_in\">require</span>(<span class=\"string\">'imagemin'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> imageminWebp = <span class=\"built_in\">require</span>(<span class=\"string\">'imagemin-webp'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> loaderUtils = <span class=\"built_in\">require</span>(<span class=\"string\">'loader-utils'</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">content</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.cacheable &amp;&amp; <span class=\"keyword\">this</span>.cacheable();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.emitFile) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"emitFile is required from module system\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> callback = <span class=\"keyword\">this</span>.async();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> options = loaderUtils.getOptions(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 写入原文件</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> url = loaderUtils.interpolateName(<span class=\"keyword\">this</span>, options.name || <span class=\"string\">\"[hash].[ext]\"</span>, &#123;</span><br><span class=\"line\">        content: content,</span><br><span class=\"line\">        regExp: options.regExp</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.emitFile(url, content);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 如果源文件比较小，则没必要转换为webp格式的图片，直接使用callback传递给下一个loader处理</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> limit;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (options.limit) &#123;</span><br><span class=\"line\">        limit = <span class=\"built_in\">parseInt</span>(options.limit, <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (limit &lt;= <span class=\"number\">0</span> || content.length &lt; limit) &#123;</span><br><span class=\"line\">        callback(<span class=\"literal\">null</span>, &#123; <span class=\"attr\">buffer</span>: content, url &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 根据options内容生成webpOptions</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> webpOptions = &#123;</span><br><span class=\"line\">        preset: options.preset || <span class=\"string\">'default'</span>,</span><br><span class=\"line\">        quality: options.quality || <span class=\"number\">75</span>,</span><br><span class=\"line\">        alphaQuality: options.alphaQuality || <span class=\"number\">100</span>,</span><br><span class=\"line\">        method: options.method || <span class=\"number\">1</span>,</span><br><span class=\"line\">        sns: options.sns || <span class=\"number\">80</span>,</span><br><span class=\"line\">        autoFilter: options.autoFilter || <span class=\"literal\">false</span>,</span><br><span class=\"line\">        sharpness: options.sharpness || <span class=\"number\">0</span>,</span><br><span class=\"line\">        lossless: options.lossless || <span class=\"literal\">false</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (options.size) &#123;</span><br><span class=\"line\">        webpOptions.size = options.size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (options.filter) &#123;</span><br><span class=\"line\">        webpOptions.filter = options.filter;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 生成的webp图片的名称为原图片的名称后面追加.webp,</span></span><br><span class=\"line\">    <span class=\"comment\">// 例如：xxx.jpg.webp, 方便在css预处理器中的使用</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> webpUrl = url + <span class=\"string\">'.webp'</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 原图片异步转换为webp的图片</span></span><br><span class=\"line\">    imagemin.buffer(content, &#123; <span class=\"attr\">plugins</span>: [imageminWebp(webpOptions)] &#125;).then(<span class=\"function\"><span class=\"params\">file</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 写入webp图片并调用callback</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.emitFile(webpUrl, file);</span><br><span class=\"line\">        <span class=\"comment\">// 传递给svg-placrholder-loader，继续处理成placeholder</span></span><br><span class=\"line\">        callback(<span class=\"literal\">null</span>, &#123; <span class=\"attr\">buffer</span>: content, url, webpUrl &#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">/* 如果要单独使用的话，可以使用该注释部分的代码</span></span><br><span class=\"line\"><span class=\"comment\">        const exportJson = 'module.exports = &#123; ' +</span></span><br><span class=\"line\"><span class=\"comment\">            '\"originSrc\": __webpack_public_path__ + \"' + url +</span></span><br><span class=\"line\"><span class=\"comment\">            '\" , \"webpSrc\": __webpack_public_path__ + \"' + webpUrl +</span></span><br><span class=\"line\"><span class=\"comment\">            '\"' +</span></span><br><span class=\"line\"><span class=\"comment\">            ' &#125;;';</span></span><br><span class=\"line\"><span class=\"comment\">        callback(null, exportJson);   </span></span><br><span class=\"line\"><span class=\"comment\">        */</span>  </span><br><span class=\"line\">    &#125;).catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">        callback(err);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 要求webpack传入原始的buffer，方便处理图片</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports.raw = <span class=\"literal\">true</span>;</span><br></pre></td></tr></table></figure>\n\n<p>nginx生成<br>实现过程，对支持webp的请求设置cookies。利用nginx检测图片请求是否存在，如果不存在通过lua调用imageMagic创建webp图片并返回。需要注意的是nginx需要安装lua支持的模块。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user  root; # nginx 用户权限 执行lua创建图片命令需要读写权限</span><br><span class=\"line\"># ...</span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen       <span class=\"number\">80</span>;</span><br><span class=\"line\">        server_name  webp.leewr.com;</span><br><span class=\"line\">        root         /home/leewr/mono/app/<span class=\"keyword\">public</span>/december;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ($webp_suffix ~* webp) &#123;</span><br><span class=\"line\">                add_header Set-Cookie <span class=\"string\">'webpAvaile=true; path= /;'</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        location ~* ^(.+\\.(jpg|png|jpeg|gif))(.webp)$ &#123; # 正则匹配图片 paht/name.jpg.webp 格式的图片请求</span><br><span class=\"line\">            if (!-f $request_filename) &#123; # 如果图片不存在</span><br><span class=\"line\">                access_log /usr/local/nginx/logs/december.log main; # 设置日志文件</span><br><span class=\"line\">                set $request_filepath /home/leewr/mono/app/public/december/$1; # 图片真实路径变量</span><br><span class=\"line\">                set $ext $3; # 设置图片扩展名$ext变量</span><br><span class=\"line\">                content_by_lua_file lua/webp.lua; # 调用nginx/lua目录下的webp.lua文件</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面看lua, lua 中代码非常简单。定义command命令，调用系统os.execute(command)执行convert图片转换命令。convert是ImageMagic的命令。.. lua 中字符串连接。ngx.var.ext是nginx中定义的变量。</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">local</span> command</span><br><span class=\"line\">command = <span class=\"string\">\"convert \"</span> ..ngx.var.request_filepath.. <span class=\"string\">\" \"</span> ..ngx.var.request_filepath..ngx.var.ext</span><br><span class=\"line\">os.execute(command)</span><br><span class=\"line\">ngx.exec(ngx.var.request_uri)</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://www.jianshu.com/p/73ca9e8b986a\" target=\"_blank\" rel=\"noopener\">原文地址</a></p>"},{"layout":"[post]","title":"事件循环EventLoop","date":"2019-10-07T03:27:31.000Z","_content":"## 什么是Event Loop\n**event loop是一个执行模型，在不同的地方有不同的实现。浏览器和NodeJS基于不同的技术实现了各自的Event Loop。**\n\n - 浏览器的Event Loop是在html5的规范中明确定义。\n - NodeJS的Event Loop是基于libuv实现的。可以参考Node的官方文档以及libuv的官方文档。\n - libuv已经对Event Loop做出了实现，而HTML5规范中只是定义了浏览器中Event Loop的模型，具体的实现留给了浏览器厂商。\n <!-- more -->\n##  宏队列和微队列\n### 宏队列\n**宏队列，macrotask，也叫tasks。**\n\n一些异步任务的回调会依次进入macro task queue，等待后续被调用，这些异步任务包括：\n- setTimeout\n- setInterval\n- setImmediate (Node独有)\n- requestAnimationFrame (浏览器独有)\n- I/O\n- UI rendering (浏览器独有)\n### 微队列\n**微队列，microtask，也叫jobs。**\n\n另一些异步任务的回调会依次进入micro task queue，等待后续被调用，这些异步任务包括：\n- process.nextTick (Node独有)\n- Promise\n- Object.observe\n- MutationObserver\n\n## 浏览器的Event Loop\n![image](eventloop1.png)\n这张图将浏览器的Event Loop完整的描述了出来，我来讲执行一个JavaScript代码的具体流程：\n\n1. 执行全局Script同步代码，这些同步代码有一些是同步语句，有一些是异步语句（比如setTimeout等）；\n2. 全局Script代码执行完毕后，调用栈Stack会清空；\n3. 从微队列microtask queue中取出位于队首的回调任务，放入调用栈Stack中执行，执行完后microtask queue长度减1；\n4. 继续取出位于队首的任务，放入调用栈Stack中执行，以此类推，直到直到把microtask queue中的所有任务都执行完毕。注意，如果在执行microtask的过程中，又产生了microtask，那么会加入到队列的末尾，也会在这个周期被调用执行；\n5. microtask queue中的所有任务都执行完毕，此时microtask queue为空队列，调用栈Stack也为空；\n6. 取出宏队列macrotask queue中位于队首的任务，放入Stack中执行；\n7. 执行完毕后，调用栈Stack为空；\n8. 重复第3-7个步骤；\n9. 重复第3-7个步骤；\n10. ...\n\n**可以看到，这就是浏览器的事件循环Event Loop**\n这里归纳3个重点：\n\n1. 宏队列macrotask一次只从队列中取一个任务执行，执行完后就去执行微任务队列中的任务；\n2. 微任务队列中所有的任务都会被依次取出来执行，知道microtask queue为空；\n3. 图中没有画UI rendering的节点，因为这个是由浏览器自行判断决定的，但是只要执行UI rendering，它的节点是在执行完所有的microtask之后，下一个macrotask之前，紧跟着执行UI render。\n\n### 例子\n#### 例1\n```js\nconsole.log(1);\n\nsetTimeout(() => {\n  console.log(2);\n  Promise.resolve().then(() => {\n    console.log(3)\n  });\n});\n\nnew Promise((resolve, reject) => {\n  console.log(4)\n  resolve(5)\n}).then((data) => {\n  console.log(data);\n})\n\nsetTimeout(() => {\n  console.log(6);\n})\n\nconsole.log(7);\n```\n#### 结果\n\n```js\n// 正确答案\n1\n4\n7\n5\n2\n3\n6\n```\n\n#### 例2\n\n```js\nconsole.log(1);\n\nsetTimeout(() => {\n  console.log(2);\n  Promise.resolve().then(() => {\n    console.log(3)\n  });\n});\n\nnew Promise((resolve, reject) => {\n  console.log(4)\n  resolve(5)\n}).then((data) => {\n  console.log(data);\n  \n  Promise.resolve().then(() => {\n    console.log(6)\n  }).then(() => {\n    console.log(7)\n    \n    setTimeout(() => {\n      console.log(8)\n    }, 0);\n  });\n})\n\nsetTimeout(() => {\n  console.log(9);\n})\n\nconsole.log(10);\n```\n#### 结果\n\n```js\n// 正确答案\n1\n4\n10\n5\n6\n7\n2\n3\n9\n8\n```\n**在执行微队列microtask queue中任务的时候，如果又产生了microtask，那么会继续添加到队列的末尾，也会在这个周期执行，直到microtask queue为空停止。\n**\n注：当然如果你在microtask中不断的产生microtask，那么其他宏任务macrotask就无法执行了，但是这个操作也不是无限的，拿NodeJS中的微任务process.nextTick()来说，它的上限是1000个，后面我们会讲到。\n\n浏览器的Event Loop就说到这里，下面我们看一下NodeJS中的Event Loop，它更复杂一些，机制也不太一样。\n\n## NodeJS中的Event Loop\nNodeJS的Event Loop中，执行宏队列的回调任务有6个阶段，如下图：\n\n![image](eventloop2.png)\n\n各个阶段执行的任务如下：\n - **timers阶段**：这个阶段执行setTimeout和setInterval预定的callback\n - **I/O callback阶段**：执行除了close事件的callbacks、被timers设定的callbacks、setImmediate()设定的callbacks这些之外的callbacks\n - **idle, prepare阶段**：仅node内部使用\n - **poll阶段**：获取新的I/O事件，适当的条件下node将阻塞在这里\n - **check阶段**：执行setImmediate()设定的callbacks\n - **close callbacks阶段**：执行socket.on('close', ....)这些callbacks\n\n#### NodeJS中宏队列主要有4个\n由上面的介绍可以看到，回调事件主要位于4个macrotask queue中：\n1. Timers Queue\n2. IO Callbacks Queue\n3. Check Queue\n4. Close Callbacks Queue\n\n这4个都属于宏队列，但是在浏览器中，可以认为只有一个宏队列，所有的macrotask都会被加到这一个宏队列中，但是在NodeJS中，不同的macrotask会被放置在不同的宏队列中。\n\n#### NodeJS中微队列主要有2个：\n1. Next Tick Queue：是放置process.nextTick(callback)的回调任务的\n2. Other Micro Queue：放置其他microtask，比如Promise等\n\n在浏览器中，也可以认为只有一个微队列，所有的microtask都会被加到这一个微队列中，但是在NodeJS中，不同的microtask会被放置在不同的微队列中。\n\n具体可以通过下图加深一下理解：\n\n![image](eventloop3.png)\n\n大体解释一下NodeJS的Event Loop过程：\n\n1. 执行全局Script的同步代码\n2. 执行microtask微任务，先执行所有Next Tick Queue中的所有任务，再执行Other Microtask Queue中的所有任务\n3. 开始执行macrotask宏任务，共6个阶段，从第1个阶段开始执行相应每一个阶段macrotask中的所有任务，注意，这里是所有每个阶段宏任务队列的所有任务，在浏览器的Event Loop中是只取宏队列的第一个任务出来执行，每一个阶段的macrotask任务执行完毕后，开始执行微任务，也就是步骤2\n4. Timers Queue -> 步骤2 -> I/O Queue -> 步骤2 -> Check Queue -> 步骤2 -> Close Callback Queue -> 步骤2 -> Timers Queue ......\n5. 这就是Node的Event Loop\n\n#### 关于NodeJS的macrotask queue和microtask queue\n![image](eventloop4.png)\n\n![image](eventloop5.png)\n#### 例子\n\n```js\nconsole.log('start');\n\nsetTimeout(() => {          // callback1\n  console.log(111);\n  setTimeout(() => {        // callback2\n    console.log(222);\n  }, 0);\n  setImmediate(() => {      // callback3\n    console.log(333);\n  })\n  process.nextTick(() => {  // callback4\n    console.log(444);  \n  })\n}, 0);\n\nsetImmediate(() => {        // callback5\n  console.log(555);\n  process.nextTick(() => {  // callback6\n    console.log(666);  \n  })\n})\n\nsetTimeout(() => {          // callback7              \n  console.log(777);\n  process.nextTick(() => {  // callback8\n    console.log(888);   \n  })\n}, 0);\n\nprocess.nextTick(() => {    // callback9\n  console.log(999);  \n})\n\nconsole.log('end');\n\n```\n#### 结果\n\n```js\n// 正确答案\nstart\nend\n999\n111\n777\n444\n888\n555\n333\n666\n222\n```\n### setTimeout 对比 setImmediate\n - setTimeout(fn, 0)在Timers阶段执行，并且是在poll阶段进行判断是否达到指定的timer时间才会执行\n - setImmediate(fn)在Check阶段执行\n\n两者的执行顺序要根据当前的执行环境才能确定：\n\n\n - 如果两者都在主模块(main module)调用，那么执行先后取决于进程性能，顺序随机\n - 如果两者都不在主模块调用，即在一个I/O Circle中调用，那么setImmediate的回调永远先执行，因为会先到Check阶段\n\n### setImmediate 对比 process.nextTick\n\n - setImmediate(fn)的回调任务会插入到宏队列Check Queue中\n - process.nextTick(fn)的回调任务会插入到微队列Next Tick Queue中\n - process.nextTick(fn)调用深度有限制，上限是1000，而setImmedaite则没有\n\n\n## 总结\n1. 浏览器的Event Loop和NodeJS的Event Loop是不同的，实现机制也不一样，不要混为一谈。\n2. 浏览器可以理解成只有1个宏任务队列和1个微任务队列，先执行全局Script代码，执行完同步代码调用栈清空后，从微任务队列中依次取出所有的任务放入调用栈执行，微任务队列清空后，从宏任务队列中只取位于队首的任务放入调用栈执行，注意这里和Node的区别，只取一个，然后继续执行微队列中的所有任务，再去宏队列取一个，以此构成事件循环。\n3. NodeJS可以理解成有4个宏任务队列和2个微任务队列，但是执行宏任务时有6个阶段。先执行全局Script代码，执行完同步代码调用栈清空后，先从微任务队列Next Tick Queue中依次取出所有的任务放入调用栈中执行，再从微任务队列Other Microtask Queue中依次取出所有的任务放入调用栈中执行。Node 在新版本中，也是每个 Macrotask 执行完后，就去执行 Microtask 了，和浏览器的模型一致。\n4. MacroTask包括： setTimeout、setInterval、 setImmediate(Node)、requestAnimation(浏览器)、IO、UI rendering\n5. Microtask包括： process.nextTick(Node)、Promise、Object.observe、MutationObserver\n","source":"_posts/事件循环EventLoop.md","raw":"---\nlayout: '[post]'\ntitle: 事件循环EventLoop\ndate: 2019-10-07 11:27:31\ntags: javascript\n---\n## 什么是Event Loop\n**event loop是一个执行模型，在不同的地方有不同的实现。浏览器和NodeJS基于不同的技术实现了各自的Event Loop。**\n\n - 浏览器的Event Loop是在html5的规范中明确定义。\n - NodeJS的Event Loop是基于libuv实现的。可以参考Node的官方文档以及libuv的官方文档。\n - libuv已经对Event Loop做出了实现，而HTML5规范中只是定义了浏览器中Event Loop的模型，具体的实现留给了浏览器厂商。\n <!-- more -->\n##  宏队列和微队列\n### 宏队列\n**宏队列，macrotask，也叫tasks。**\n\n一些异步任务的回调会依次进入macro task queue，等待后续被调用，这些异步任务包括：\n- setTimeout\n- setInterval\n- setImmediate (Node独有)\n- requestAnimationFrame (浏览器独有)\n- I/O\n- UI rendering (浏览器独有)\n### 微队列\n**微队列，microtask，也叫jobs。**\n\n另一些异步任务的回调会依次进入micro task queue，等待后续被调用，这些异步任务包括：\n- process.nextTick (Node独有)\n- Promise\n- Object.observe\n- MutationObserver\n\n## 浏览器的Event Loop\n![image](eventloop1.png)\n这张图将浏览器的Event Loop完整的描述了出来，我来讲执行一个JavaScript代码的具体流程：\n\n1. 执行全局Script同步代码，这些同步代码有一些是同步语句，有一些是异步语句（比如setTimeout等）；\n2. 全局Script代码执行完毕后，调用栈Stack会清空；\n3. 从微队列microtask queue中取出位于队首的回调任务，放入调用栈Stack中执行，执行完后microtask queue长度减1；\n4. 继续取出位于队首的任务，放入调用栈Stack中执行，以此类推，直到直到把microtask queue中的所有任务都执行完毕。注意，如果在执行microtask的过程中，又产生了microtask，那么会加入到队列的末尾，也会在这个周期被调用执行；\n5. microtask queue中的所有任务都执行完毕，此时microtask queue为空队列，调用栈Stack也为空；\n6. 取出宏队列macrotask queue中位于队首的任务，放入Stack中执行；\n7. 执行完毕后，调用栈Stack为空；\n8. 重复第3-7个步骤；\n9. 重复第3-7个步骤；\n10. ...\n\n**可以看到，这就是浏览器的事件循环Event Loop**\n这里归纳3个重点：\n\n1. 宏队列macrotask一次只从队列中取一个任务执行，执行完后就去执行微任务队列中的任务；\n2. 微任务队列中所有的任务都会被依次取出来执行，知道microtask queue为空；\n3. 图中没有画UI rendering的节点，因为这个是由浏览器自行判断决定的，但是只要执行UI rendering，它的节点是在执行完所有的microtask之后，下一个macrotask之前，紧跟着执行UI render。\n\n### 例子\n#### 例1\n```js\nconsole.log(1);\n\nsetTimeout(() => {\n  console.log(2);\n  Promise.resolve().then(() => {\n    console.log(3)\n  });\n});\n\nnew Promise((resolve, reject) => {\n  console.log(4)\n  resolve(5)\n}).then((data) => {\n  console.log(data);\n})\n\nsetTimeout(() => {\n  console.log(6);\n})\n\nconsole.log(7);\n```\n#### 结果\n\n```js\n// 正确答案\n1\n4\n7\n5\n2\n3\n6\n```\n\n#### 例2\n\n```js\nconsole.log(1);\n\nsetTimeout(() => {\n  console.log(2);\n  Promise.resolve().then(() => {\n    console.log(3)\n  });\n});\n\nnew Promise((resolve, reject) => {\n  console.log(4)\n  resolve(5)\n}).then((data) => {\n  console.log(data);\n  \n  Promise.resolve().then(() => {\n    console.log(6)\n  }).then(() => {\n    console.log(7)\n    \n    setTimeout(() => {\n      console.log(8)\n    }, 0);\n  });\n})\n\nsetTimeout(() => {\n  console.log(9);\n})\n\nconsole.log(10);\n```\n#### 结果\n\n```js\n// 正确答案\n1\n4\n10\n5\n6\n7\n2\n3\n9\n8\n```\n**在执行微队列microtask queue中任务的时候，如果又产生了microtask，那么会继续添加到队列的末尾，也会在这个周期执行，直到microtask queue为空停止。\n**\n注：当然如果你在microtask中不断的产生microtask，那么其他宏任务macrotask就无法执行了，但是这个操作也不是无限的，拿NodeJS中的微任务process.nextTick()来说，它的上限是1000个，后面我们会讲到。\n\n浏览器的Event Loop就说到这里，下面我们看一下NodeJS中的Event Loop，它更复杂一些，机制也不太一样。\n\n## NodeJS中的Event Loop\nNodeJS的Event Loop中，执行宏队列的回调任务有6个阶段，如下图：\n\n![image](eventloop2.png)\n\n各个阶段执行的任务如下：\n - **timers阶段**：这个阶段执行setTimeout和setInterval预定的callback\n - **I/O callback阶段**：执行除了close事件的callbacks、被timers设定的callbacks、setImmediate()设定的callbacks这些之外的callbacks\n - **idle, prepare阶段**：仅node内部使用\n - **poll阶段**：获取新的I/O事件，适当的条件下node将阻塞在这里\n - **check阶段**：执行setImmediate()设定的callbacks\n - **close callbacks阶段**：执行socket.on('close', ....)这些callbacks\n\n#### NodeJS中宏队列主要有4个\n由上面的介绍可以看到，回调事件主要位于4个macrotask queue中：\n1. Timers Queue\n2. IO Callbacks Queue\n3. Check Queue\n4. Close Callbacks Queue\n\n这4个都属于宏队列，但是在浏览器中，可以认为只有一个宏队列，所有的macrotask都会被加到这一个宏队列中，但是在NodeJS中，不同的macrotask会被放置在不同的宏队列中。\n\n#### NodeJS中微队列主要有2个：\n1. Next Tick Queue：是放置process.nextTick(callback)的回调任务的\n2. Other Micro Queue：放置其他microtask，比如Promise等\n\n在浏览器中，也可以认为只有一个微队列，所有的microtask都会被加到这一个微队列中，但是在NodeJS中，不同的microtask会被放置在不同的微队列中。\n\n具体可以通过下图加深一下理解：\n\n![image](eventloop3.png)\n\n大体解释一下NodeJS的Event Loop过程：\n\n1. 执行全局Script的同步代码\n2. 执行microtask微任务，先执行所有Next Tick Queue中的所有任务，再执行Other Microtask Queue中的所有任务\n3. 开始执行macrotask宏任务，共6个阶段，从第1个阶段开始执行相应每一个阶段macrotask中的所有任务，注意，这里是所有每个阶段宏任务队列的所有任务，在浏览器的Event Loop中是只取宏队列的第一个任务出来执行，每一个阶段的macrotask任务执行完毕后，开始执行微任务，也就是步骤2\n4. Timers Queue -> 步骤2 -> I/O Queue -> 步骤2 -> Check Queue -> 步骤2 -> Close Callback Queue -> 步骤2 -> Timers Queue ......\n5. 这就是Node的Event Loop\n\n#### 关于NodeJS的macrotask queue和microtask queue\n![image](eventloop4.png)\n\n![image](eventloop5.png)\n#### 例子\n\n```js\nconsole.log('start');\n\nsetTimeout(() => {          // callback1\n  console.log(111);\n  setTimeout(() => {        // callback2\n    console.log(222);\n  }, 0);\n  setImmediate(() => {      // callback3\n    console.log(333);\n  })\n  process.nextTick(() => {  // callback4\n    console.log(444);  \n  })\n}, 0);\n\nsetImmediate(() => {        // callback5\n  console.log(555);\n  process.nextTick(() => {  // callback6\n    console.log(666);  \n  })\n})\n\nsetTimeout(() => {          // callback7              \n  console.log(777);\n  process.nextTick(() => {  // callback8\n    console.log(888);   \n  })\n}, 0);\n\nprocess.nextTick(() => {    // callback9\n  console.log(999);  \n})\n\nconsole.log('end');\n\n```\n#### 结果\n\n```js\n// 正确答案\nstart\nend\n999\n111\n777\n444\n888\n555\n333\n666\n222\n```\n### setTimeout 对比 setImmediate\n - setTimeout(fn, 0)在Timers阶段执行，并且是在poll阶段进行判断是否达到指定的timer时间才会执行\n - setImmediate(fn)在Check阶段执行\n\n两者的执行顺序要根据当前的执行环境才能确定：\n\n\n - 如果两者都在主模块(main module)调用，那么执行先后取决于进程性能，顺序随机\n - 如果两者都不在主模块调用，即在一个I/O Circle中调用，那么setImmediate的回调永远先执行，因为会先到Check阶段\n\n### setImmediate 对比 process.nextTick\n\n - setImmediate(fn)的回调任务会插入到宏队列Check Queue中\n - process.nextTick(fn)的回调任务会插入到微队列Next Tick Queue中\n - process.nextTick(fn)调用深度有限制，上限是1000，而setImmedaite则没有\n\n\n## 总结\n1. 浏览器的Event Loop和NodeJS的Event Loop是不同的，实现机制也不一样，不要混为一谈。\n2. 浏览器可以理解成只有1个宏任务队列和1个微任务队列，先执行全局Script代码，执行完同步代码调用栈清空后，从微任务队列中依次取出所有的任务放入调用栈执行，微任务队列清空后，从宏任务队列中只取位于队首的任务放入调用栈执行，注意这里和Node的区别，只取一个，然后继续执行微队列中的所有任务，再去宏队列取一个，以此构成事件循环。\n3. NodeJS可以理解成有4个宏任务队列和2个微任务队列，但是执行宏任务时有6个阶段。先执行全局Script代码，执行完同步代码调用栈清空后，先从微任务队列Next Tick Queue中依次取出所有的任务放入调用栈中执行，再从微任务队列Other Microtask Queue中依次取出所有的任务放入调用栈中执行。Node 在新版本中，也是每个 Macrotask 执行完后，就去执行 Microtask 了，和浏览器的模型一致。\n4. MacroTask包括： setTimeout、setInterval、 setImmediate(Node)、requestAnimation(浏览器)、IO、UI rendering\n5. Microtask包括： process.nextTick(Node)、Promise、Object.observe、MutationObserver\n","slug":"事件循环EventLoop","published":1,"updated":"2020-04-30T03:28:58.000Z","comments":1,"photos":[],"link":"","_id":"ckbftlm7900287w2p36t2dtx3","content":"<h2 id=\"什么是Event-Loop\"><a href=\"#什么是Event-Loop\" class=\"headerlink\" title=\"什么是Event Loop\"></a>什么是Event Loop</h2><p><strong>event loop是一个执行模型，在不同的地方有不同的实现。浏览器和NodeJS基于不同的技术实现了各自的Event Loop。</strong></p>\n<ul>\n<li>浏览器的Event Loop是在html5的规范中明确定义。</li>\n<li>NodeJS的Event Loop是基于libuv实现的。可以参考Node的官方文档以及libuv的官方文档。</li>\n<li>libuv已经对Event Loop做出了实现，而HTML5规范中只是定义了浏览器中Event Loop的模型，具体的实现留给了浏览器厂商。<a id=\"more\"></a>\n<h2 id=\"宏队列和微队列\"><a href=\"#宏队列和微队列\" class=\"headerlink\" title=\"宏队列和微队列\"></a>宏队列和微队列</h2><h3 id=\"宏队列\"><a href=\"#宏队列\" class=\"headerlink\" title=\"宏队列\"></a>宏队列</h3><strong>宏队列，macrotask，也叫tasks。</strong></li>\n</ul>\n<p>一些异步任务的回调会依次进入macro task queue，等待后续被调用，这些异步任务包括：</p>\n<ul>\n<li>setTimeout</li>\n<li>setInterval</li>\n<li>setImmediate (Node独有)</li>\n<li>requestAnimationFrame (浏览器独有)</li>\n<li>I/O</li>\n<li>UI rendering (浏览器独有)<h3 id=\"微队列\"><a href=\"#微队列\" class=\"headerlink\" title=\"微队列\"></a>微队列</h3></li>\n</ul>\n<p><strong>微队列，microtask，也叫jobs。</strong></p>\n<p>另一些异步任务的回调会依次进入micro task queue，等待后续被调用，这些异步任务包括：</p>\n<ul>\n<li>process.nextTick (Node独有)</li>\n<li>Promise</li>\n<li>Object.observe</li>\n<li>MutationObserver</li>\n</ul>\n<h2 id=\"浏览器的Event-Loop\"><a href=\"#浏览器的Event-Loop\" class=\"headerlink\" title=\"浏览器的Event Loop\"></a>浏览器的Event Loop</h2><p><img src=\"/2019/10/07/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AFEventLoop/eventloop1.png\" alt=\"image\"><br>这张图将浏览器的Event Loop完整的描述了出来，我来讲执行一个JavaScript代码的具体流程：</p>\n<ol>\n<li>执行全局Script同步代码，这些同步代码有一些是同步语句，有一些是异步语句（比如setTimeout等）；</li>\n<li>全局Script代码执行完毕后，调用栈Stack会清空；</li>\n<li>从微队列microtask queue中取出位于队首的回调任务，放入调用栈Stack中执行，执行完后microtask queue长度减1；</li>\n<li>继续取出位于队首的任务，放入调用栈Stack中执行，以此类推，直到直到把microtask queue中的所有任务都执行完毕。注意，如果在执行microtask的过程中，又产生了microtask，那么会加入到队列的末尾，也会在这个周期被调用执行；</li>\n<li>microtask queue中的所有任务都执行完毕，此时microtask queue为空队列，调用栈Stack也为空；</li>\n<li>取出宏队列macrotask queue中位于队首的任务，放入Stack中执行；</li>\n<li>执行完毕后，调用栈Stack为空；</li>\n<li>重复第3-7个步骤；</li>\n<li>重复第3-7个步骤；</li>\n<li>…</li>\n</ol>\n<p><strong>可以看到，这就是浏览器的事件循环Event Loop</strong><br>这里归纳3个重点：</p>\n<ol>\n<li>宏队列macrotask一次只从队列中取一个任务执行，执行完后就去执行微任务队列中的任务；</li>\n<li>微任务队列中所有的任务都会被依次取出来执行，知道microtask queue为空；</li>\n<li>图中没有画UI rendering的节点，因为这个是由浏览器自行判断决定的，但是只要执行UI rendering，它的节点是在执行完所有的microtask之后，下一个macrotask之前，紧跟着执行UI render。</li>\n</ol>\n<h3 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h3><h4 id=\"例1\"><a href=\"#例1\" class=\"headerlink\" title=\"例1\"></a>例1</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</span><br><span class=\"line\">  <span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>)</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>)</span><br><span class=\"line\">  resolve(<span class=\"number\">5</span>)</span><br><span class=\"line\">&#125;).then(<span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">6</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">7</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 正确答案</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">6</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"例2\"><a href=\"#例2\" class=\"headerlink\" title=\"例2\"></a>例2</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</span><br><span class=\"line\">  <span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>)</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>)</span><br><span class=\"line\">  resolve(<span class=\"number\">5</span>)</span><br><span class=\"line\">&#125;).then(<span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">6</span>)</span><br><span class=\"line\">  &#125;).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">7</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"number\">8</span>)</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">9</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"结果-1\"><a href=\"#结果-1\" class=\"headerlink\" title=\"结果\"></a>结果</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 正确答案</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">9</span></span><br><span class=\"line\"><span class=\"number\">8</span></span><br></pre></td></tr></table></figure>\n<p>*<em>在执行微队列microtask queue中任务的时候，如果又产生了microtask，那么会继续添加到队列的末尾，也会在这个周期执行，直到microtask queue为空停止。<br>*</em><br>注：当然如果你在microtask中不断的产生microtask，那么其他宏任务macrotask就无法执行了，但是这个操作也不是无限的，拿NodeJS中的微任务process.nextTick()来说，它的上限是1000个，后面我们会讲到。</p>\n<p>浏览器的Event Loop就说到这里，下面我们看一下NodeJS中的Event Loop，它更复杂一些，机制也不太一样。</p>\n<h2 id=\"NodeJS中的Event-Loop\"><a href=\"#NodeJS中的Event-Loop\" class=\"headerlink\" title=\"NodeJS中的Event Loop\"></a>NodeJS中的Event Loop</h2><p>NodeJS的Event Loop中，执行宏队列的回调任务有6个阶段，如下图：</p>\n<p><img src=\"/2019/10/07/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AFEventLoop/eventloop2.png\" alt=\"image\"></p>\n<p>各个阶段执行的任务如下：</p>\n<ul>\n<li><strong>timers阶段</strong>：这个阶段执行setTimeout和setInterval预定的callback</li>\n<li><strong>I/O callback阶段</strong>：执行除了close事件的callbacks、被timers设定的callbacks、setImmediate()设定的callbacks这些之外的callbacks</li>\n<li><strong>idle, prepare阶段</strong>：仅node内部使用</li>\n<li><strong>poll阶段</strong>：获取新的I/O事件，适当的条件下node将阻塞在这里</li>\n<li><strong>check阶段</strong>：执行setImmediate()设定的callbacks</li>\n<li><strong>close callbacks阶段</strong>：执行socket.on(‘close’, ….)这些callbacks</li>\n</ul>\n<h4 id=\"NodeJS中宏队列主要有4个\"><a href=\"#NodeJS中宏队列主要有4个\" class=\"headerlink\" title=\"NodeJS中宏队列主要有4个\"></a>NodeJS中宏队列主要有4个</h4><p>由上面的介绍可以看到，回调事件主要位于4个macrotask queue中：</p>\n<ol>\n<li>Timers Queue</li>\n<li>IO Callbacks Queue</li>\n<li>Check Queue</li>\n<li>Close Callbacks Queue</li>\n</ol>\n<p>这4个都属于宏队列，但是在浏览器中，可以认为只有一个宏队列，所有的macrotask都会被加到这一个宏队列中，但是在NodeJS中，不同的macrotask会被放置在不同的宏队列中。</p>\n<h4 id=\"NodeJS中微队列主要有2个：\"><a href=\"#NodeJS中微队列主要有2个：\" class=\"headerlink\" title=\"NodeJS中微队列主要有2个：\"></a>NodeJS中微队列主要有2个：</h4><ol>\n<li>Next Tick Queue：是放置process.nextTick(callback)的回调任务的</li>\n<li>Other Micro Queue：放置其他microtask，比如Promise等</li>\n</ol>\n<p>在浏览器中，也可以认为只有一个微队列，所有的microtask都会被加到这一个微队列中，但是在NodeJS中，不同的microtask会被放置在不同的微队列中。</p>\n<p>具体可以通过下图加深一下理解：</p>\n<p><img src=\"/2019/10/07/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AFEventLoop/eventloop3.png\" alt=\"image\"></p>\n<p>大体解释一下NodeJS的Event Loop过程：</p>\n<ol>\n<li>执行全局Script的同步代码</li>\n<li>执行microtask微任务，先执行所有Next Tick Queue中的所有任务，再执行Other Microtask Queue中的所有任务</li>\n<li>开始执行macrotask宏任务，共6个阶段，从第1个阶段开始执行相应每一个阶段macrotask中的所有任务，注意，这里是所有每个阶段宏任务队列的所有任务，在浏览器的Event Loop中是只取宏队列的第一个任务出来执行，每一个阶段的macrotask任务执行完毕后，开始执行微任务，也就是步骤2</li>\n<li>Timers Queue -&gt; 步骤2 -&gt; I/O Queue -&gt; 步骤2 -&gt; Check Queue -&gt; 步骤2 -&gt; Close Callback Queue -&gt; 步骤2 -&gt; Timers Queue ……</li>\n<li>这就是Node的Event Loop</li>\n</ol>\n<h4 id=\"关于NodeJS的macrotask-queue和microtask-queue\"><a href=\"#关于NodeJS的macrotask-queue和microtask-queue\" class=\"headerlink\" title=\"关于NodeJS的macrotask queue和microtask queue\"></a>关于NodeJS的macrotask queue和microtask queue</h4><p><img src=\"/2019/10/07/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AFEventLoop/eventloop4.png\" alt=\"image\"></p>\n<p><img src=\"/2019/10/07/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AFEventLoop/eventloop5.png\" alt=\"image\"></p>\n<h4 id=\"例子-1\"><a href=\"#例子-1\" class=\"headerlink\" title=\"例子\"></a>例子</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'start'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;          <span class=\"comment\">// callback1</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">111</span>);</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;        <span class=\"comment\">// callback2</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">222</span>);</span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">  setImmediate(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;      <span class=\"comment\">// callback3</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">333</span>);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  process.nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;  <span class=\"comment\">// callback4</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">444</span>);  </span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">setImmediate(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;        <span class=\"comment\">// callback5</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">555</span>);</span><br><span class=\"line\">  process.nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;  <span class=\"comment\">// callback6</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">666</span>);  </span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;          <span class=\"comment\">// callback7              </span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">777</span>);</span><br><span class=\"line\">  process.nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;  <span class=\"comment\">// callback8</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">888</span>);   </span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">process.nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;    <span class=\"comment\">// callback9</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">999</span>);  </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'end'</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"结果-2\"><a href=\"#结果-2\" class=\"headerlink\" title=\"结果\"></a>结果</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 正确答案</span></span><br><span class=\"line\">start</span><br><span class=\"line\">end</span><br><span class=\"line\"><span class=\"number\">999</span></span><br><span class=\"line\"><span class=\"number\">111</span></span><br><span class=\"line\"><span class=\"number\">777</span></span><br><span class=\"line\"><span class=\"number\">444</span></span><br><span class=\"line\"><span class=\"number\">888</span></span><br><span class=\"line\"><span class=\"number\">555</span></span><br><span class=\"line\"><span class=\"number\">333</span></span><br><span class=\"line\"><span class=\"number\">666</span></span><br><span class=\"line\"><span class=\"number\">222</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"setTimeout-对比-setImmediate\"><a href=\"#setTimeout-对比-setImmediate\" class=\"headerlink\" title=\"setTimeout 对比 setImmediate\"></a>setTimeout 对比 setImmediate</h3><ul>\n<li>setTimeout(fn, 0)在Timers阶段执行，并且是在poll阶段进行判断是否达到指定的timer时间才会执行</li>\n<li>setImmediate(fn)在Check阶段执行</li>\n</ul>\n<p>两者的执行顺序要根据当前的执行环境才能确定：</p>\n<ul>\n<li>如果两者都在主模块(main module)调用，那么执行先后取决于进程性能，顺序随机</li>\n<li>如果两者都不在主模块调用，即在一个I/O Circle中调用，那么setImmediate的回调永远先执行，因为会先到Check阶段</li>\n</ul>\n<h3 id=\"setImmediate-对比-process-nextTick\"><a href=\"#setImmediate-对比-process-nextTick\" class=\"headerlink\" title=\"setImmediate 对比 process.nextTick\"></a>setImmediate 对比 process.nextTick</h3><ul>\n<li>setImmediate(fn)的回调任务会插入到宏队列Check Queue中</li>\n<li>process.nextTick(fn)的回调任务会插入到微队列Next Tick Queue中</li>\n<li>process.nextTick(fn)调用深度有限制，上限是1000，而setImmedaite则没有</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ol>\n<li>浏览器的Event Loop和NodeJS的Event Loop是不同的，实现机制也不一样，不要混为一谈。</li>\n<li>浏览器可以理解成只有1个宏任务队列和1个微任务队列，先执行全局Script代码，执行完同步代码调用栈清空后，从微任务队列中依次取出所有的任务放入调用栈执行，微任务队列清空后，从宏任务队列中只取位于队首的任务放入调用栈执行，注意这里和Node的区别，只取一个，然后继续执行微队列中的所有任务，再去宏队列取一个，以此构成事件循环。</li>\n<li>NodeJS可以理解成有4个宏任务队列和2个微任务队列，但是执行宏任务时有6个阶段。先执行全局Script代码，执行完同步代码调用栈清空后，先从微任务队列Next Tick Queue中依次取出所有的任务放入调用栈中执行，再从微任务队列Other Microtask Queue中依次取出所有的任务放入调用栈中执行。Node 在新版本中，也是每个 Macrotask 执行完后，就去执行 Microtask 了，和浏览器的模型一致。</li>\n<li>MacroTask包括： setTimeout、setInterval、 setImmediate(Node)、requestAnimation(浏览器)、IO、UI rendering</li>\n<li>Microtask包括： process.nextTick(Node)、Promise、Object.observe、MutationObserver</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h2 id=\"什么是Event-Loop\"><a href=\"#什么是Event-Loop\" class=\"headerlink\" title=\"什么是Event Loop\"></a>什么是Event Loop</h2><p><strong>event loop是一个执行模型，在不同的地方有不同的实现。浏览器和NodeJS基于不同的技术实现了各自的Event Loop。</strong></p>\n<ul>\n<li>浏览器的Event Loop是在html5的规范中明确定义。</li>\n<li>NodeJS的Event Loop是基于libuv实现的。可以参考Node的官方文档以及libuv的官方文档。</li>\n<li>libuv已经对Event Loop做出了实现，而HTML5规范中只是定义了浏览器中Event Loop的模型，具体的实现留给了浏览器厂商。</li></ul>","more":"<h2 id=\"宏队列和微队列\"><a href=\"#宏队列和微队列\" class=\"headerlink\" title=\"宏队列和微队列\"></a>宏队列和微队列</h2><h3 id=\"宏队列\"><a href=\"#宏队列\" class=\"headerlink\" title=\"宏队列\"></a>宏队列</h3><strong>宏队列，macrotask，也叫tasks。</strong>\n\n<p>一些异步任务的回调会依次进入macro task queue，等待后续被调用，这些异步任务包括：</p>\n<ul>\n<li>setTimeout</li>\n<li>setInterval</li>\n<li>setImmediate (Node独有)</li>\n<li>requestAnimationFrame (浏览器独有)</li>\n<li>I/O</li>\n<li>UI rendering (浏览器独有)<h3 id=\"微队列\"><a href=\"#微队列\" class=\"headerlink\" title=\"微队列\"></a>微队列</h3></li>\n</ul>\n<p><strong>微队列，microtask，也叫jobs。</strong></p>\n<p>另一些异步任务的回调会依次进入micro task queue，等待后续被调用，这些异步任务包括：</p>\n<ul>\n<li>process.nextTick (Node独有)</li>\n<li>Promise</li>\n<li>Object.observe</li>\n<li>MutationObserver</li>\n</ul>\n<h2 id=\"浏览器的Event-Loop\"><a href=\"#浏览器的Event-Loop\" class=\"headerlink\" title=\"浏览器的Event Loop\"></a>浏览器的Event Loop</h2><p><img src=\"/2019/10/07/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AFEventLoop/eventloop1.png\" alt=\"image\"><br>这张图将浏览器的Event Loop完整的描述了出来，我来讲执行一个JavaScript代码的具体流程：</p>\n<ol>\n<li>执行全局Script同步代码，这些同步代码有一些是同步语句，有一些是异步语句（比如setTimeout等）；</li>\n<li>全局Script代码执行完毕后，调用栈Stack会清空；</li>\n<li>从微队列microtask queue中取出位于队首的回调任务，放入调用栈Stack中执行，执行完后microtask queue长度减1；</li>\n<li>继续取出位于队首的任务，放入调用栈Stack中执行，以此类推，直到直到把microtask queue中的所有任务都执行完毕。注意，如果在执行microtask的过程中，又产生了microtask，那么会加入到队列的末尾，也会在这个周期被调用执行；</li>\n<li>microtask queue中的所有任务都执行完毕，此时microtask queue为空队列，调用栈Stack也为空；</li>\n<li>取出宏队列macrotask queue中位于队首的任务，放入Stack中执行；</li>\n<li>执行完毕后，调用栈Stack为空；</li>\n<li>重复第3-7个步骤；</li>\n<li>重复第3-7个步骤；</li>\n<li>…</li>\n</ol>\n<p><strong>可以看到，这就是浏览器的事件循环Event Loop</strong><br>这里归纳3个重点：</p>\n<ol>\n<li>宏队列macrotask一次只从队列中取一个任务执行，执行完后就去执行微任务队列中的任务；</li>\n<li>微任务队列中所有的任务都会被依次取出来执行，知道microtask queue为空；</li>\n<li>图中没有画UI rendering的节点，因为这个是由浏览器自行判断决定的，但是只要执行UI rendering，它的节点是在执行完所有的microtask之后，下一个macrotask之前，紧跟着执行UI render。</li>\n</ol>\n<h3 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h3><h4 id=\"例1\"><a href=\"#例1\" class=\"headerlink\" title=\"例1\"></a>例1</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</span><br><span class=\"line\">  <span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>)</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>)</span><br><span class=\"line\">  resolve(<span class=\"number\">5</span>)</span><br><span class=\"line\">&#125;).then(<span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">6</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">7</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 正确答案</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">6</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"例2\"><a href=\"#例2\" class=\"headerlink\" title=\"例2\"></a>例2</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</span><br><span class=\"line\">  <span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>)</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>)</span><br><span class=\"line\">  resolve(<span class=\"number\">5</span>)</span><br><span class=\"line\">&#125;).then(<span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">6</span>)</span><br><span class=\"line\">  &#125;).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">7</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"number\">8</span>)</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">9</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"结果-1\"><a href=\"#结果-1\" class=\"headerlink\" title=\"结果\"></a>结果</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 正确答案</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">9</span></span><br><span class=\"line\"><span class=\"number\">8</span></span><br></pre></td></tr></table></figure>\n<p>*<em>在执行微队列microtask queue中任务的时候，如果又产生了microtask，那么会继续添加到队列的末尾，也会在这个周期执行，直到microtask queue为空停止。<br>*</em><br>注：当然如果你在microtask中不断的产生microtask，那么其他宏任务macrotask就无法执行了，但是这个操作也不是无限的，拿NodeJS中的微任务process.nextTick()来说，它的上限是1000个，后面我们会讲到。</p>\n<p>浏览器的Event Loop就说到这里，下面我们看一下NodeJS中的Event Loop，它更复杂一些，机制也不太一样。</p>\n<h2 id=\"NodeJS中的Event-Loop\"><a href=\"#NodeJS中的Event-Loop\" class=\"headerlink\" title=\"NodeJS中的Event Loop\"></a>NodeJS中的Event Loop</h2><p>NodeJS的Event Loop中，执行宏队列的回调任务有6个阶段，如下图：</p>\n<p><img src=\"/2019/10/07/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AFEventLoop/eventloop2.png\" alt=\"image\"></p>\n<p>各个阶段执行的任务如下：</p>\n<ul>\n<li><strong>timers阶段</strong>：这个阶段执行setTimeout和setInterval预定的callback</li>\n<li><strong>I/O callback阶段</strong>：执行除了close事件的callbacks、被timers设定的callbacks、setImmediate()设定的callbacks这些之外的callbacks</li>\n<li><strong>idle, prepare阶段</strong>：仅node内部使用</li>\n<li><strong>poll阶段</strong>：获取新的I/O事件，适当的条件下node将阻塞在这里</li>\n<li><strong>check阶段</strong>：执行setImmediate()设定的callbacks</li>\n<li><strong>close callbacks阶段</strong>：执行socket.on(‘close’, ….)这些callbacks</li>\n</ul>\n<h4 id=\"NodeJS中宏队列主要有4个\"><a href=\"#NodeJS中宏队列主要有4个\" class=\"headerlink\" title=\"NodeJS中宏队列主要有4个\"></a>NodeJS中宏队列主要有4个</h4><p>由上面的介绍可以看到，回调事件主要位于4个macrotask queue中：</p>\n<ol>\n<li>Timers Queue</li>\n<li>IO Callbacks Queue</li>\n<li>Check Queue</li>\n<li>Close Callbacks Queue</li>\n</ol>\n<p>这4个都属于宏队列，但是在浏览器中，可以认为只有一个宏队列，所有的macrotask都会被加到这一个宏队列中，但是在NodeJS中，不同的macrotask会被放置在不同的宏队列中。</p>\n<h4 id=\"NodeJS中微队列主要有2个：\"><a href=\"#NodeJS中微队列主要有2个：\" class=\"headerlink\" title=\"NodeJS中微队列主要有2个：\"></a>NodeJS中微队列主要有2个：</h4><ol>\n<li>Next Tick Queue：是放置process.nextTick(callback)的回调任务的</li>\n<li>Other Micro Queue：放置其他microtask，比如Promise等</li>\n</ol>\n<p>在浏览器中，也可以认为只有一个微队列，所有的microtask都会被加到这一个微队列中，但是在NodeJS中，不同的microtask会被放置在不同的微队列中。</p>\n<p>具体可以通过下图加深一下理解：</p>\n<p><img src=\"/2019/10/07/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AFEventLoop/eventloop3.png\" alt=\"image\"></p>\n<p>大体解释一下NodeJS的Event Loop过程：</p>\n<ol>\n<li>执行全局Script的同步代码</li>\n<li>执行microtask微任务，先执行所有Next Tick Queue中的所有任务，再执行Other Microtask Queue中的所有任务</li>\n<li>开始执行macrotask宏任务，共6个阶段，从第1个阶段开始执行相应每一个阶段macrotask中的所有任务，注意，这里是所有每个阶段宏任务队列的所有任务，在浏览器的Event Loop中是只取宏队列的第一个任务出来执行，每一个阶段的macrotask任务执行完毕后，开始执行微任务，也就是步骤2</li>\n<li>Timers Queue -&gt; 步骤2 -&gt; I/O Queue -&gt; 步骤2 -&gt; Check Queue -&gt; 步骤2 -&gt; Close Callback Queue -&gt; 步骤2 -&gt; Timers Queue ……</li>\n<li>这就是Node的Event Loop</li>\n</ol>\n<h4 id=\"关于NodeJS的macrotask-queue和microtask-queue\"><a href=\"#关于NodeJS的macrotask-queue和microtask-queue\" class=\"headerlink\" title=\"关于NodeJS的macrotask queue和microtask queue\"></a>关于NodeJS的macrotask queue和microtask queue</h4><p><img src=\"/2019/10/07/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AFEventLoop/eventloop4.png\" alt=\"image\"></p>\n<p><img src=\"/2019/10/07/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AFEventLoop/eventloop5.png\" alt=\"image\"></p>\n<h4 id=\"例子-1\"><a href=\"#例子-1\" class=\"headerlink\" title=\"例子\"></a>例子</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'start'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;          <span class=\"comment\">// callback1</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">111</span>);</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;        <span class=\"comment\">// callback2</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">222</span>);</span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">  setImmediate(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;      <span class=\"comment\">// callback3</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">333</span>);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  process.nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;  <span class=\"comment\">// callback4</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">444</span>);  </span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">setImmediate(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;        <span class=\"comment\">// callback5</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">555</span>);</span><br><span class=\"line\">  process.nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;  <span class=\"comment\">// callback6</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">666</span>);  </span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;          <span class=\"comment\">// callback7              </span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">777</span>);</span><br><span class=\"line\">  process.nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;  <span class=\"comment\">// callback8</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">888</span>);   </span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">process.nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;    <span class=\"comment\">// callback9</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">999</span>);  </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'end'</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"结果-2\"><a href=\"#结果-2\" class=\"headerlink\" title=\"结果\"></a>结果</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 正确答案</span></span><br><span class=\"line\">start</span><br><span class=\"line\">end</span><br><span class=\"line\"><span class=\"number\">999</span></span><br><span class=\"line\"><span class=\"number\">111</span></span><br><span class=\"line\"><span class=\"number\">777</span></span><br><span class=\"line\"><span class=\"number\">444</span></span><br><span class=\"line\"><span class=\"number\">888</span></span><br><span class=\"line\"><span class=\"number\">555</span></span><br><span class=\"line\"><span class=\"number\">333</span></span><br><span class=\"line\"><span class=\"number\">666</span></span><br><span class=\"line\"><span class=\"number\">222</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"setTimeout-对比-setImmediate\"><a href=\"#setTimeout-对比-setImmediate\" class=\"headerlink\" title=\"setTimeout 对比 setImmediate\"></a>setTimeout 对比 setImmediate</h3><ul>\n<li>setTimeout(fn, 0)在Timers阶段执行，并且是在poll阶段进行判断是否达到指定的timer时间才会执行</li>\n<li>setImmediate(fn)在Check阶段执行</li>\n</ul>\n<p>两者的执行顺序要根据当前的执行环境才能确定：</p>\n<ul>\n<li>如果两者都在主模块(main module)调用，那么执行先后取决于进程性能，顺序随机</li>\n<li>如果两者都不在主模块调用，即在一个I/O Circle中调用，那么setImmediate的回调永远先执行，因为会先到Check阶段</li>\n</ul>\n<h3 id=\"setImmediate-对比-process-nextTick\"><a href=\"#setImmediate-对比-process-nextTick\" class=\"headerlink\" title=\"setImmediate 对比 process.nextTick\"></a>setImmediate 对比 process.nextTick</h3><ul>\n<li>setImmediate(fn)的回调任务会插入到宏队列Check Queue中</li>\n<li>process.nextTick(fn)的回调任务会插入到微队列Next Tick Queue中</li>\n<li>process.nextTick(fn)调用深度有限制，上限是1000，而setImmedaite则没有</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ol>\n<li>浏览器的Event Loop和NodeJS的Event Loop是不同的，实现机制也不一样，不要混为一谈。</li>\n<li>浏览器可以理解成只有1个宏任务队列和1个微任务队列，先执行全局Script代码，执行完同步代码调用栈清空后，从微任务队列中依次取出所有的任务放入调用栈执行，微任务队列清空后，从宏任务队列中只取位于队首的任务放入调用栈执行，注意这里和Node的区别，只取一个，然后继续执行微队列中的所有任务，再去宏队列取一个，以此构成事件循环。</li>\n<li>NodeJS可以理解成有4个宏任务队列和2个微任务队列，但是执行宏任务时有6个阶段。先执行全局Script代码，执行完同步代码调用栈清空后，先从微任务队列Next Tick Queue中依次取出所有的任务放入调用栈中执行，再从微任务队列Other Microtask Queue中依次取出所有的任务放入调用栈中执行。Node 在新版本中，也是每个 Macrotask 执行完后，就去执行 Microtask 了，和浏览器的模型一致。</li>\n<li>MacroTask包括： setTimeout、setInterval、 setImmediate(Node)、requestAnimation(浏览器)、IO、UI rendering</li>\n<li>Microtask包括： process.nextTick(Node)、Promise、Object.observe、MutationObserver</li>\n</ol>"},{"layout":"[post]","title":"前端性能优化——DNS预解析","date":"2019-02-21T08:39:49.000Z","_content":"## 什么是DNS预解析？\n我们在进行前端性能优化时，涉及到DNS方面的优化一般有两点： 一个是减少DNS的请求次数，另一个就是进行DNS预解析 。\n\nDNS 实现域名到IP的映射。通过域名访问站点，每次请求都要做DNS解析。目前每次DNS解析，通常在200ms以下。针对DNS解析耗时问题，一些浏览器通过DNS Prefetch 来提高访问的流畅性。  \n\n**DNS Prefetch** 是一种DNS 预解析技术，当浏览网页时，浏览器会在加载网页时对网页中的域名进行解析缓存，这样在单击当前网页中的连接时就无需进行DNS的解析，减少用户等待时间，提高用户体验。\n#### **DNS Prefetch，即DNS预解析。**  \n<!-- more -->\n\n## 为什么使用DNS预解析？\nDNS 作为互联网的基础协议，其解析的速度似乎很容易被网站优化人员忽视。现在大多数新浏览器已经针对DNS解析进行了优化，典型的一次DNS解析需要耗费 20-120 毫秒，减少DNS解析时间和次数是个很好的优化方式。DNS预解析 是让具有此属性的域名不需要用户点击链接就在后台解析，而域名解析和内容载入是串行的网络操作，所以这个方式能 减少用户的等待时间，提升用户体验 。\n#### DNS解析的运行顺序\n浏览器对网站第一次的域名DNS解析查找流程依次为：  \n**浏览器缓存-系统缓存-路由器缓存-ISP DNS缓存-递归搜索**  \n## 支持DNS Prefetch的浏览器\n- Chrome\n- IE:9+\n- Firefox:3.5+\n- Safari:5+\n- Edge  \n\n## 如何在网站中使用DNS预解析\n因为浏览器的html解析是顺序的，所以DNS Prefetch 应该尽量的放在网页的前面，推荐放在 <meta charset=\"UTF-8\"> 后面：  \n```html\n<meta http-equiv=\"x-dns-prefetch-control\" content=\"on\">\n<!--打开和关闭DNS预预解析-->\n<link rel=\"dns-prefetch\" href=\"//www.baidu.com\">\n<!--解析的DNS的地址-->\n```\n注：dns-prefetch需慎用，多页面重复DNS预解析会增加重复DNS查询次数。\n","source":"_posts/前端性能优化——DNS预解析.md","raw":"---\nlayout: '[post]'\ntitle: 前端性能优化——DNS预解析\ndate: 2019-02-21 16:39:49\ntags: 前端性能优化\n---\n## 什么是DNS预解析？\n我们在进行前端性能优化时，涉及到DNS方面的优化一般有两点： 一个是减少DNS的请求次数，另一个就是进行DNS预解析 。\n\nDNS 实现域名到IP的映射。通过域名访问站点，每次请求都要做DNS解析。目前每次DNS解析，通常在200ms以下。针对DNS解析耗时问题，一些浏览器通过DNS Prefetch 来提高访问的流畅性。  \n\n**DNS Prefetch** 是一种DNS 预解析技术，当浏览网页时，浏览器会在加载网页时对网页中的域名进行解析缓存，这样在单击当前网页中的连接时就无需进行DNS的解析，减少用户等待时间，提高用户体验。\n#### **DNS Prefetch，即DNS预解析。**  \n<!-- more -->\n\n## 为什么使用DNS预解析？\nDNS 作为互联网的基础协议，其解析的速度似乎很容易被网站优化人员忽视。现在大多数新浏览器已经针对DNS解析进行了优化，典型的一次DNS解析需要耗费 20-120 毫秒，减少DNS解析时间和次数是个很好的优化方式。DNS预解析 是让具有此属性的域名不需要用户点击链接就在后台解析，而域名解析和内容载入是串行的网络操作，所以这个方式能 减少用户的等待时间，提升用户体验 。\n#### DNS解析的运行顺序\n浏览器对网站第一次的域名DNS解析查找流程依次为：  \n**浏览器缓存-系统缓存-路由器缓存-ISP DNS缓存-递归搜索**  \n## 支持DNS Prefetch的浏览器\n- Chrome\n- IE:9+\n- Firefox:3.5+\n- Safari:5+\n- Edge  \n\n## 如何在网站中使用DNS预解析\n因为浏览器的html解析是顺序的，所以DNS Prefetch 应该尽量的放在网页的前面，推荐放在 <meta charset=\"UTF-8\"> 后面：  \n```html\n<meta http-equiv=\"x-dns-prefetch-control\" content=\"on\">\n<!--打开和关闭DNS预预解析-->\n<link rel=\"dns-prefetch\" href=\"//www.baidu.com\">\n<!--解析的DNS的地址-->\n```\n注：dns-prefetch需慎用，多页面重复DNS预解析会增加重复DNS查询次数。\n","slug":"前端性能优化——DNS预解析","published":1,"updated":"2020-02-05T02:21:53.000Z","comments":1,"photos":[],"link":"","_id":"ckbftlm7a002a7w2p4wuya84v","content":"<h2 id=\"什么是DNS预解析？\"><a href=\"#什么是DNS预解析？\" class=\"headerlink\" title=\"什么是DNS预解析？\"></a>什么是DNS预解析？</h2><p>我们在进行前端性能优化时，涉及到DNS方面的优化一般有两点： 一个是减少DNS的请求次数，另一个就是进行DNS预解析 。</p>\n<p>DNS 实现域名到IP的映射。通过域名访问站点，每次请求都要做DNS解析。目前每次DNS解析，通常在200ms以下。针对DNS解析耗时问题，一些浏览器通过DNS Prefetch 来提高访问的流畅性。  </p>\n<p><strong>DNS Prefetch</strong> 是一种DNS 预解析技术，当浏览网页时，浏览器会在加载网页时对网页中的域名进行解析缓存，这样在单击当前网页中的连接时就无需进行DNS的解析，减少用户等待时间，提高用户体验。</p>\n<h4 id=\"DNS-Prefetch，即DNS预解析。\"><a href=\"#DNS-Prefetch，即DNS预解析。\" class=\"headerlink\" title=\"DNS Prefetch，即DNS预解析。\"></a><strong>DNS Prefetch，即DNS预解析。</strong></h4><a id=\"more\"></a>\n\n<h2 id=\"为什么使用DNS预解析？\"><a href=\"#为什么使用DNS预解析？\" class=\"headerlink\" title=\"为什么使用DNS预解析？\"></a>为什么使用DNS预解析？</h2><p>DNS 作为互联网的基础协议，其解析的速度似乎很容易被网站优化人员忽视。现在大多数新浏览器已经针对DNS解析进行了优化，典型的一次DNS解析需要耗费 20-120 毫秒，减少DNS解析时间和次数是个很好的优化方式。DNS预解析 是让具有此属性的域名不需要用户点击链接就在后台解析，而域名解析和内容载入是串行的网络操作，所以这个方式能 减少用户的等待时间，提升用户体验 。</p>\n<h4 id=\"DNS解析的运行顺序\"><a href=\"#DNS解析的运行顺序\" class=\"headerlink\" title=\"DNS解析的运行顺序\"></a>DNS解析的运行顺序</h4><p>浏览器对网站第一次的域名DNS解析查找流程依次为：<br><strong>浏览器缓存-系统缓存-路由器缓存-ISP DNS缓存-递归搜索</strong>  </p>\n<h2 id=\"支持DNS-Prefetch的浏览器\"><a href=\"#支持DNS-Prefetch的浏览器\" class=\"headerlink\" title=\"支持DNS Prefetch的浏览器\"></a>支持DNS Prefetch的浏览器</h2><ul>\n<li>Chrome</li>\n<li>IE:9+</li>\n<li>Firefox:3.5+</li>\n<li>Safari:5+</li>\n<li>Edge  </li>\n</ul>\n<h2 id=\"如何在网站中使用DNS预解析\"><a href=\"#如何在网站中使用DNS预解析\" class=\"headerlink\" title=\"如何在网站中使用DNS预解析\"></a>如何在网站中使用DNS预解析</h2><p>因为浏览器的html解析是顺序的，所以DNS Prefetch 应该尽量的放在网页的前面，推荐放在 <meta charset=\"UTF-8\"> 后面：  </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"x-dns-prefetch-control\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"on\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--打开和关闭DNS预预解析--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"dns-prefetch\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"//www.baidu.com\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--解析的DNS的地址--&gt;</span></span><br></pre></td></tr></table></figure>\n<p>注：dns-prefetch需慎用，多页面重复DNS预解析会增加重复DNS查询次数。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"什么是DNS预解析？\"><a href=\"#什么是DNS预解析？\" class=\"headerlink\" title=\"什么是DNS预解析？\"></a>什么是DNS预解析？</h2><p>我们在进行前端性能优化时，涉及到DNS方面的优化一般有两点： 一个是减少DNS的请求次数，另一个就是进行DNS预解析 。</p>\n<p>DNS 实现域名到IP的映射。通过域名访问站点，每次请求都要做DNS解析。目前每次DNS解析，通常在200ms以下。针对DNS解析耗时问题，一些浏览器通过DNS Prefetch 来提高访问的流畅性。  </p>\n<p><strong>DNS Prefetch</strong> 是一种DNS 预解析技术，当浏览网页时，浏览器会在加载网页时对网页中的域名进行解析缓存，这样在单击当前网页中的连接时就无需进行DNS的解析，减少用户等待时间，提高用户体验。</p>\n<h4 id=\"DNS-Prefetch，即DNS预解析。\"><a href=\"#DNS-Prefetch，即DNS预解析。\" class=\"headerlink\" title=\"DNS Prefetch，即DNS预解析。\"></a><strong>DNS Prefetch，即DNS预解析。</strong></h4>","more":"<h2 id=\"为什么使用DNS预解析？\"><a href=\"#为什么使用DNS预解析？\" class=\"headerlink\" title=\"为什么使用DNS预解析？\"></a>为什么使用DNS预解析？</h2><p>DNS 作为互联网的基础协议，其解析的速度似乎很容易被网站优化人员忽视。现在大多数新浏览器已经针对DNS解析进行了优化，典型的一次DNS解析需要耗费 20-120 毫秒，减少DNS解析时间和次数是个很好的优化方式。DNS预解析 是让具有此属性的域名不需要用户点击链接就在后台解析，而域名解析和内容载入是串行的网络操作，所以这个方式能 减少用户的等待时间，提升用户体验 。</p>\n<h4 id=\"DNS解析的运行顺序\"><a href=\"#DNS解析的运行顺序\" class=\"headerlink\" title=\"DNS解析的运行顺序\"></a>DNS解析的运行顺序</h4><p>浏览器对网站第一次的域名DNS解析查找流程依次为：<br><strong>浏览器缓存-系统缓存-路由器缓存-ISP DNS缓存-递归搜索</strong>  </p>\n<h2 id=\"支持DNS-Prefetch的浏览器\"><a href=\"#支持DNS-Prefetch的浏览器\" class=\"headerlink\" title=\"支持DNS Prefetch的浏览器\"></a>支持DNS Prefetch的浏览器</h2><ul>\n<li>Chrome</li>\n<li>IE:9+</li>\n<li>Firefox:3.5+</li>\n<li>Safari:5+</li>\n<li>Edge  </li>\n</ul>\n<h2 id=\"如何在网站中使用DNS预解析\"><a href=\"#如何在网站中使用DNS预解析\" class=\"headerlink\" title=\"如何在网站中使用DNS预解析\"></a>如何在网站中使用DNS预解析</h2><p>因为浏览器的html解析是顺序的，所以DNS Prefetch 应该尽量的放在网页的前面，推荐放在 <meta charset=\"UTF-8\"> 后面：  </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"x-dns-prefetch-control\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"on\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--打开和关闭DNS预预解析--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"dns-prefetch\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"//www.baidu.com\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--解析的DNS的地址--&gt;</span></span><br></pre></td></tr></table></figure>\n<p>注：dns-prefetch需慎用，多页面重复DNS预解析会增加重复DNS查询次数。</p>"},{"layout":"[post]","title":"初次使用hexo","date":"2019-01-14T01:57:01.000Z","_content":"\n偶然间发现了hexo这个博客搭建工具，于是决定将使用多年的云笔记的内容搬迁至这个博客上，分享我的搬迁经历以及踩过的坑吧~。\n<!-- more -->\n\n## 我们开始吧\n\n### 新建仓库\n\n在github新建仓库，如果想要部署在github上，要仓库名为 ==<user-name>.github.io== 而不是user-name ，其中 ==<user-name>== 是你 ==github== 的昵称，要是问为什么，都是眼泪的教训。\n### 安装hexo\n\n```\nnpm install -g hexo-cli\n```\n或者\n```linux\nnpm install hexo\n```\n### 初始化项目\n初始化命令\n```\nhexo init\n```\n运行\n```\nhexo server\n```\n大功告成，访问 ==localhost:4000== 我们就能看到建的博客的效果了！\n### 将Hexo部署到GitHub Pages上\n1. 将[Travis CI](https://github.com/marketplace/travis-ci) 添加到你的 GitHub 账户中。\n2. 前往 GitHub 的 [Applications settings](https://github.com/settings/installations)，配置 Travis CI 权限，使其能够访问你的 repository。\n3. 你应该会被重定向到 Travis CI 的页面。如果没有，请 [手动前往](https://travis-ci.com/)。\n4. 在浏览器新建一个标签页，前往 GitHub [新建 Personal Access Token](https://github.com/settings/tokens) ，只勾选 repo 的权限并生成一个新的 Token。Token 生成后请复制并保存好。\n5. 回到 Travis CI，前往你的 repository 的设置页面，在 **Environment Variables** 下新建一个环境变量，**Name** 为 GH_TOKEN，**Value** 为刚才你在 GitHub 生成的 Token。确保 **DISPLAY VALUE IN BUILD LOG** 保持 **不被勾选** 避免你的 Token 泄漏。点击 Add 保存。\n6. 在你的 Hexo 站点文件夹中新建一个 ==.travis.yml== 文件：\n\n```\nsudo: false\nlanguage: node_js\nnode_js:\n  - 10 # use nodejs v10 LTS\ncache: npm\nbranches:\n  only:\n    - master # build master branch only\nscript:\n  - hexo generate # generate static files\ndeploy:\n  provider: pages\n  skip-cleanup: true\n  github-token: $GH_TOKEN\n  keep-history: true\n  on:\n    branch: master\n  local-dir: public\n```\n\n7. 将.travis.yml 推送到 repository 中。Travis CI 应该会自动开始运行，并将生成的文件推送到同一 repository 下的 gh-pages 分支下\n\n8. 在GitHub中前往你的repository 的设置页面，修改 GitHub Pages 的部署分支为 gh-pages。\n9.  完成以上步骤，我们就能在<user-name>.github.io上看到自己建设的博客了。\n### 其他配置项\n请参考[hexo文档](https://hexo.io/zh-cn/docs)。\n\n\n","source":"_posts/初尝hexo.md","raw":"---\nlayout: '[post]'\ntitle: 初次使用hexo\ndate: 2019-01-14 09:57:01\ntags: hexo\n---\n\n偶然间发现了hexo这个博客搭建工具，于是决定将使用多年的云笔记的内容搬迁至这个博客上，分享我的搬迁经历以及踩过的坑吧~。\n<!-- more -->\n\n## 我们开始吧\n\n### 新建仓库\n\n在github新建仓库，如果想要部署在github上，要仓库名为 ==<user-name>.github.io== 而不是user-name ，其中 ==<user-name>== 是你 ==github== 的昵称，要是问为什么，都是眼泪的教训。\n### 安装hexo\n\n```\nnpm install -g hexo-cli\n```\n或者\n```linux\nnpm install hexo\n```\n### 初始化项目\n初始化命令\n```\nhexo init\n```\n运行\n```\nhexo server\n```\n大功告成，访问 ==localhost:4000== 我们就能看到建的博客的效果了！\n### 将Hexo部署到GitHub Pages上\n1. 将[Travis CI](https://github.com/marketplace/travis-ci) 添加到你的 GitHub 账户中。\n2. 前往 GitHub 的 [Applications settings](https://github.com/settings/installations)，配置 Travis CI 权限，使其能够访问你的 repository。\n3. 你应该会被重定向到 Travis CI 的页面。如果没有，请 [手动前往](https://travis-ci.com/)。\n4. 在浏览器新建一个标签页，前往 GitHub [新建 Personal Access Token](https://github.com/settings/tokens) ，只勾选 repo 的权限并生成一个新的 Token。Token 生成后请复制并保存好。\n5. 回到 Travis CI，前往你的 repository 的设置页面，在 **Environment Variables** 下新建一个环境变量，**Name** 为 GH_TOKEN，**Value** 为刚才你在 GitHub 生成的 Token。确保 **DISPLAY VALUE IN BUILD LOG** 保持 **不被勾选** 避免你的 Token 泄漏。点击 Add 保存。\n6. 在你的 Hexo 站点文件夹中新建一个 ==.travis.yml== 文件：\n\n```\nsudo: false\nlanguage: node_js\nnode_js:\n  - 10 # use nodejs v10 LTS\ncache: npm\nbranches:\n  only:\n    - master # build master branch only\nscript:\n  - hexo generate # generate static files\ndeploy:\n  provider: pages\n  skip-cleanup: true\n  github-token: $GH_TOKEN\n  keep-history: true\n  on:\n    branch: master\n  local-dir: public\n```\n\n7. 将.travis.yml 推送到 repository 中。Travis CI 应该会自动开始运行，并将生成的文件推送到同一 repository 下的 gh-pages 分支下\n\n8. 在GitHub中前往你的repository 的设置页面，修改 GitHub Pages 的部署分支为 gh-pages。\n9.  完成以上步骤，我们就能在<user-name>.github.io上看到自己建设的博客了。\n### 其他配置项\n请参考[hexo文档](https://hexo.io/zh-cn/docs)。\n\n\n","slug":"初尝hexo","published":1,"updated":"2020-01-24T14:58:06.000Z","comments":1,"photos":[],"link":"","_id":"ckbftlm7b002c7w2pfkt60s16","content":"<p>偶然间发现了hexo这个博客搭建工具，于是决定将使用多年的云笔记的内容搬迁至这个博客上，分享我的搬迁经历以及踩过的坑吧~。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"我们开始吧\"><a href=\"#我们开始吧\" class=\"headerlink\" title=\"我们开始吧\"></a>我们开始吧</h2><h3 id=\"新建仓库\"><a href=\"#新建仓库\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3><p>在github新建仓库，如果想要部署在github上，要仓库名为 ==<user-name>.github.io== 而不是user-name ，其中 ==<user-name>== 是你 ==github== 的昵称，要是问为什么，都是眼泪的教训。</user-name></user-name></p>\n<h3 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo</span><br></pre></td></tr></table></figure>\n<h3 id=\"初始化项目\"><a href=\"#初始化项目\" class=\"headerlink\" title=\"初始化项目\"></a>初始化项目</h3><p>初始化命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init</span><br></pre></td></tr></table></figure>\n<p>运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure>\n<p>大功告成，访问 ==localhost:4000== 我们就能看到建的博客的效果了！</p>\n<h3 id=\"将Hexo部署到GitHub-Pages上\"><a href=\"#将Hexo部署到GitHub-Pages上\" class=\"headerlink\" title=\"将Hexo部署到GitHub Pages上\"></a>将Hexo部署到GitHub Pages上</h3><ol>\n<li>将<a href=\"https://github.com/marketplace/travis-ci\" target=\"_blank\" rel=\"noopener\">Travis CI</a> 添加到你的 GitHub 账户中。</li>\n<li>前往 GitHub 的 <a href=\"https://github.com/settings/installations\" target=\"_blank\" rel=\"noopener\">Applications settings</a>，配置 Travis CI 权限，使其能够访问你的 repository。</li>\n<li>你应该会被重定向到 Travis CI 的页面。如果没有，请 <a href=\"https://travis-ci.com/\" target=\"_blank\" rel=\"noopener\">手动前往</a>。</li>\n<li>在浏览器新建一个标签页，前往 GitHub <a href=\"https://github.com/settings/tokens\" target=\"_blank\" rel=\"noopener\">新建 Personal Access Token</a> ，只勾选 repo 的权限并生成一个新的 Token。Token 生成后请复制并保存好。</li>\n<li>回到 Travis CI，前往你的 repository 的设置页面，在 <strong>Environment Variables</strong> 下新建一个环境变量，<strong>Name</strong> 为 GH_TOKEN，<strong>Value</strong> 为刚才你在 GitHub 生成的 Token。确保 <strong>DISPLAY VALUE IN BUILD LOG</strong> 保持 <strong>不被勾选</strong> 避免你的 Token 泄漏。点击 Add 保存。</li>\n<li>在你的 Hexo 站点文件夹中新建一个 ==.travis.yml== 文件：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo: false</span><br><span class=\"line\">language: node_js</span><br><span class=\"line\">node_js:</span><br><span class=\"line\">  - 10 # use nodejs v10 LTS</span><br><span class=\"line\">cache: npm</span><br><span class=\"line\">branches:</span><br><span class=\"line\">  only:</span><br><span class=\"line\">    - master # build master branch only</span><br><span class=\"line\">script:</span><br><span class=\"line\">  - hexo generate # generate static files</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  provider: pages</span><br><span class=\"line\">  skip-cleanup: true</span><br><span class=\"line\">  github-token: $GH_TOKEN</span><br><span class=\"line\">  keep-history: true</span><br><span class=\"line\">  on:</span><br><span class=\"line\">    branch: master</span><br><span class=\"line\">  local-dir: public</span><br></pre></td></tr></table></figure>\n\n<ol start=\"7\">\n<li><p>将.travis.yml 推送到 repository 中。Travis CI 应该会自动开始运行，并将生成的文件推送到同一 repository 下的 gh-pages 分支下</p>\n</li>\n<li><p>在GitHub中前往你的repository 的设置页面，修改 GitHub Pages 的部署分支为 gh-pages。</p>\n</li>\n<li><p>完成以上步骤，我们就能在<user-name>.github.io上看到自己建设的博客了。</user-name></p>\n<h3 id=\"其他配置项\"><a href=\"#其他配置项\" class=\"headerlink\" title=\"其他配置项\"></a>其他配置项</h3><p>请参考<a href=\"https://hexo.io/zh-cn/docs\" target=\"_blank\" rel=\"noopener\">hexo文档</a>。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>偶然间发现了hexo这个博客搭建工具，于是决定将使用多年的云笔记的内容搬迁至这个博客上，分享我的搬迁经历以及踩过的坑吧~。</p>","more":"<h2 id=\"我们开始吧\"><a href=\"#我们开始吧\" class=\"headerlink\" title=\"我们开始吧\"></a>我们开始吧</h2><h3 id=\"新建仓库\"><a href=\"#新建仓库\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3><p>在github新建仓库，如果想要部署在github上，要仓库名为 ==<user-name>.github.io== 而不是user-name ，其中 ==<user-name>== 是你 ==github== 的昵称，要是问为什么，都是眼泪的教训。</user-name></user-name></p>\n<h3 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo</span><br></pre></td></tr></table></figure>\n<h3 id=\"初始化项目\"><a href=\"#初始化项目\" class=\"headerlink\" title=\"初始化项目\"></a>初始化项目</h3><p>初始化命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init</span><br></pre></td></tr></table></figure>\n<p>运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure>\n<p>大功告成，访问 ==localhost:4000== 我们就能看到建的博客的效果了！</p>\n<h3 id=\"将Hexo部署到GitHub-Pages上\"><a href=\"#将Hexo部署到GitHub-Pages上\" class=\"headerlink\" title=\"将Hexo部署到GitHub Pages上\"></a>将Hexo部署到GitHub Pages上</h3><ol>\n<li>将<a href=\"https://github.com/marketplace/travis-ci\" target=\"_blank\" rel=\"noopener\">Travis CI</a> 添加到你的 GitHub 账户中。</li>\n<li>前往 GitHub 的 <a href=\"https://github.com/settings/installations\" target=\"_blank\" rel=\"noopener\">Applications settings</a>，配置 Travis CI 权限，使其能够访问你的 repository。</li>\n<li>你应该会被重定向到 Travis CI 的页面。如果没有，请 <a href=\"https://travis-ci.com/\" target=\"_blank\" rel=\"noopener\">手动前往</a>。</li>\n<li>在浏览器新建一个标签页，前往 GitHub <a href=\"https://github.com/settings/tokens\" target=\"_blank\" rel=\"noopener\">新建 Personal Access Token</a> ，只勾选 repo 的权限并生成一个新的 Token。Token 生成后请复制并保存好。</li>\n<li>回到 Travis CI，前往你的 repository 的设置页面，在 <strong>Environment Variables</strong> 下新建一个环境变量，<strong>Name</strong> 为 GH_TOKEN，<strong>Value</strong> 为刚才你在 GitHub 生成的 Token。确保 <strong>DISPLAY VALUE IN BUILD LOG</strong> 保持 <strong>不被勾选</strong> 避免你的 Token 泄漏。点击 Add 保存。</li>\n<li>在你的 Hexo 站点文件夹中新建一个 ==.travis.yml== 文件：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo: false</span><br><span class=\"line\">language: node_js</span><br><span class=\"line\">node_js:</span><br><span class=\"line\">  - 10 # use nodejs v10 LTS</span><br><span class=\"line\">cache: npm</span><br><span class=\"line\">branches:</span><br><span class=\"line\">  only:</span><br><span class=\"line\">    - master # build master branch only</span><br><span class=\"line\">script:</span><br><span class=\"line\">  - hexo generate # generate static files</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  provider: pages</span><br><span class=\"line\">  skip-cleanup: true</span><br><span class=\"line\">  github-token: $GH_TOKEN</span><br><span class=\"line\">  keep-history: true</span><br><span class=\"line\">  on:</span><br><span class=\"line\">    branch: master</span><br><span class=\"line\">  local-dir: public</span><br></pre></td></tr></table></figure>\n\n<ol start=\"7\">\n<li><p>将.travis.yml 推送到 repository 中。Travis CI 应该会自动开始运行，并将生成的文件推送到同一 repository 下的 gh-pages 分支下</p>\n</li>\n<li><p>在GitHub中前往你的repository 的设置页面，修改 GitHub Pages 的部署分支为 gh-pages。</p>\n</li>\n<li><p>完成以上步骤，我们就能在<user-name>.github.io上看到自己建设的博客了。</user-name></p>\n<h3 id=\"其他配置项\"><a href=\"#其他配置项\" class=\"headerlink\" title=\"其他配置项\"></a>其他配置项</h3><p>请参考<a href=\"https://hexo.io/zh-cn/docs\" target=\"_blank\" rel=\"noopener\">hexo文档</a>。</p>\n</li>\n</ol>"},{"layout":"[post]","title":"函数的防抖和节流","date":"2019-04-07T07:13:43.000Z","_content":"## 什么是防抖？什么是节流？\n### 防抖（debounce）\n> **当持续触发事件时，一定时间段内没有再触发事件，事件处理函数才会执行一次，如果设定的时间到来之前，又一次触发了事件，就重新开始延时。**\n\n### 节流（throttle）\n> **当持续触发事件时，保证一定时间段内只调用一次事件处理函数。**\n\n<!-- more -->\n## 防抖和节流的应用场景\n在前端开发的过程中，我们经常会需要绑定一些持续触发的事件，如 resize、scroll、mousemove 等等，但有些时候我们并不希望在事件持续触发的过程中那么频繁地去执行函数。\n\n### 防抖\n\n**所谓防抖，就是指触发事件后在 n 秒（或毫秒）内函数只能执行一次，如果在 n 秒（或毫秒）内又触发了事件，则会重新计算函数执行时间。**\n\n比如我们进行实时的搜索功能、对用户输入框进行监测，对用户的滚动条进行监测等等。\n\n### 节流\n**所谓节流，就是指连续触发事件但是在 n 秒中只执行一次函数。**\n\n比如我们在做搜索输入时，用户连续点击多次搜索按钮，我们使用节流的方式。\n\n## 防抖和节流的实现\n### 防抖\n防抖可以分为两种，一种是延时、一种是立即执行。\n\n#### 延时版\n\n```js\nfunction debounce(func, wait) {\n    let timeout;\n    return function () {\n        let context = this;\n        let args = arguments;\n\n        if (timeout) clearTimeout(timeout);\n        \n        timeout = setTimeout(() => {\n            func.apply(context, args)\n        }, wait);\n    }\n}\n```\n#### 立即执行版\n\n```js\nfunction debounce(func,wait) {\n    let timeout;\n    return function () {\n        let context = this;\n        let args = arguments;\n\n        if (timeout) clearTimeout(timeout);\n\n        let callNow = !timeout;\n        timeout = setTimeout(() => {\n            timeout = null;\n        }, wait)\n\n        if (callNow) func.apply(context, args)\n    }\n}\n```\n\n\n**二者的区别在于，前者在延时n秒后执行，后者是立即执行，但是在n秒后才能再次执行。**\n\n#### 延时版和立即执行版结合\n\n```js\n/**\n * @desc 函数防抖\n * @param func 函数\n * @param wait 延迟执行毫秒数\n * @param immediate true 表立即执行，false 表非立即执行\n */\n\nfunction debounce(func,wait,immediate) {\n    let timeout;\n\n    return function () {\n        let context = this;\n        let args = arguments;\n\n        if (timeout) clearTimeout(timeout);\n        if (immediate) {\n            var callNow = !timeout;\n            timeout = setTimeout(() => {\n                timeout = null;\n            }, wait)\n            if (callNow) func.apply(context, args)\n        }\n        else {\n            timeout = setTimeout(function(){\n                func.apply(context, args)\n            }, wait);\n        }\n    }\n}\n```\n**这个方法可以作为公用的服务实现防抖。**\n\n### 节流\n节流也可以分为两种，一种是时间戳版，一种是定时器版。\n#### 时间戳\n\n```js\nfunction throttle(func, wait) {\n    let previous = 0;\n    return function() {\n        let now = Date.now();\n        let context = this;\n        let args = arguments;\n        if (now - previous > wait) {\n            func.apply(context, args);\n            previous = now;\n        }\n    }\n}\n```\n#### 定时器\n\n```js\nfunction throttle(func, wait) {\n    let timeout;\n    return function() {\n        let context = this;\n        let args = arguments;\n        if (!timeout) {\n            timeout = setTimeout(() => {\n                timeout = null;\n                func.apply(context, args)\n            }, wait)\n        }\n\n    }\n}\n```\n\n\n**时间戳版和定时器版的节流函数的区别就是，时间戳版的函数触发是在时间段内开始的时候，而定时器版的函数触发是在时间段内结束的时候。**\n\n#### 结合版本\n\n```js\n/**\n * @desc 函数节流\n * @param func 函数\n * @param wait 延迟执行毫秒数\n * @param type 1 表时间戳版，2 表定时器版\n */\nfunction throttle(func, wait ,type) {\n    if(type===1){\n        let previous = 0;\n    }else if(type===2){\n        let timeout;\n    }\n    return function() {\n        let context = this;\n        let args = arguments;\n        if(type===1){\n            let now = Date.now();\n\n            if (now - previous > wait) {\n                func.apply(context, args);\n                previous = now;\n            }\n        }else if(type===2){\n            if (!timeout) {\n                timeout = setTimeout(() => {\n                    timeout = null;\n                    func.apply(context, args)\n                }, wait)\n            }\n        }\n    }\n}\n```\n","source":"_posts/函数的防抖和节流.md","raw":"---\nlayout: '[post]'\ntitle: 函数的防抖和节流\ndate: 2019-04-07 15:13:43\ntags: javascript\n---\n## 什么是防抖？什么是节流？\n### 防抖（debounce）\n> **当持续触发事件时，一定时间段内没有再触发事件，事件处理函数才会执行一次，如果设定的时间到来之前，又一次触发了事件，就重新开始延时。**\n\n### 节流（throttle）\n> **当持续触发事件时，保证一定时间段内只调用一次事件处理函数。**\n\n<!-- more -->\n## 防抖和节流的应用场景\n在前端开发的过程中，我们经常会需要绑定一些持续触发的事件，如 resize、scroll、mousemove 等等，但有些时候我们并不希望在事件持续触发的过程中那么频繁地去执行函数。\n\n### 防抖\n\n**所谓防抖，就是指触发事件后在 n 秒（或毫秒）内函数只能执行一次，如果在 n 秒（或毫秒）内又触发了事件，则会重新计算函数执行时间。**\n\n比如我们进行实时的搜索功能、对用户输入框进行监测，对用户的滚动条进行监测等等。\n\n### 节流\n**所谓节流，就是指连续触发事件但是在 n 秒中只执行一次函数。**\n\n比如我们在做搜索输入时，用户连续点击多次搜索按钮，我们使用节流的方式。\n\n## 防抖和节流的实现\n### 防抖\n防抖可以分为两种，一种是延时、一种是立即执行。\n\n#### 延时版\n\n```js\nfunction debounce(func, wait) {\n    let timeout;\n    return function () {\n        let context = this;\n        let args = arguments;\n\n        if (timeout) clearTimeout(timeout);\n        \n        timeout = setTimeout(() => {\n            func.apply(context, args)\n        }, wait);\n    }\n}\n```\n#### 立即执行版\n\n```js\nfunction debounce(func,wait) {\n    let timeout;\n    return function () {\n        let context = this;\n        let args = arguments;\n\n        if (timeout) clearTimeout(timeout);\n\n        let callNow = !timeout;\n        timeout = setTimeout(() => {\n            timeout = null;\n        }, wait)\n\n        if (callNow) func.apply(context, args)\n    }\n}\n```\n\n\n**二者的区别在于，前者在延时n秒后执行，后者是立即执行，但是在n秒后才能再次执行。**\n\n#### 延时版和立即执行版结合\n\n```js\n/**\n * @desc 函数防抖\n * @param func 函数\n * @param wait 延迟执行毫秒数\n * @param immediate true 表立即执行，false 表非立即执行\n */\n\nfunction debounce(func,wait,immediate) {\n    let timeout;\n\n    return function () {\n        let context = this;\n        let args = arguments;\n\n        if (timeout) clearTimeout(timeout);\n        if (immediate) {\n            var callNow = !timeout;\n            timeout = setTimeout(() => {\n                timeout = null;\n            }, wait)\n            if (callNow) func.apply(context, args)\n        }\n        else {\n            timeout = setTimeout(function(){\n                func.apply(context, args)\n            }, wait);\n        }\n    }\n}\n```\n**这个方法可以作为公用的服务实现防抖。**\n\n### 节流\n节流也可以分为两种，一种是时间戳版，一种是定时器版。\n#### 时间戳\n\n```js\nfunction throttle(func, wait) {\n    let previous = 0;\n    return function() {\n        let now = Date.now();\n        let context = this;\n        let args = arguments;\n        if (now - previous > wait) {\n            func.apply(context, args);\n            previous = now;\n        }\n    }\n}\n```\n#### 定时器\n\n```js\nfunction throttle(func, wait) {\n    let timeout;\n    return function() {\n        let context = this;\n        let args = arguments;\n        if (!timeout) {\n            timeout = setTimeout(() => {\n                timeout = null;\n                func.apply(context, args)\n            }, wait)\n        }\n\n    }\n}\n```\n\n\n**时间戳版和定时器版的节流函数的区别就是，时间戳版的函数触发是在时间段内开始的时候，而定时器版的函数触发是在时间段内结束的时候。**\n\n#### 结合版本\n\n```js\n/**\n * @desc 函数节流\n * @param func 函数\n * @param wait 延迟执行毫秒数\n * @param type 1 表时间戳版，2 表定时器版\n */\nfunction throttle(func, wait ,type) {\n    if(type===1){\n        let previous = 0;\n    }else if(type===2){\n        let timeout;\n    }\n    return function() {\n        let context = this;\n        let args = arguments;\n        if(type===1){\n            let now = Date.now();\n\n            if (now - previous > wait) {\n                func.apply(context, args);\n                previous = now;\n            }\n        }else if(type===2){\n            if (!timeout) {\n                timeout = setTimeout(() => {\n                    timeout = null;\n                    func.apply(context, args)\n                }, wait)\n            }\n        }\n    }\n}\n```\n","slug":"函数的防抖和节流","published":1,"updated":"2020-02-05T07:42:37.000Z","comments":1,"photos":[],"link":"","_id":"ckbftlm7d002f7w2p325ph92i","content":"<h2 id=\"什么是防抖？什么是节流？\"><a href=\"#什么是防抖？什么是节流？\" class=\"headerlink\" title=\"什么是防抖？什么是节流？\"></a>什么是防抖？什么是节流？</h2><h3 id=\"防抖（debounce）\"><a href=\"#防抖（debounce）\" class=\"headerlink\" title=\"防抖（debounce）\"></a>防抖（debounce）</h3><blockquote>\n<p><strong>当持续触发事件时，一定时间段内没有再触发事件，事件处理函数才会执行一次，如果设定的时间到来之前，又一次触发了事件，就重新开始延时。</strong></p>\n</blockquote>\n<h3 id=\"节流（throttle）\"><a href=\"#节流（throttle）\" class=\"headerlink\" title=\"节流（throttle）\"></a>节流（throttle）</h3><blockquote>\n<p><strong>当持续触发事件时，保证一定时间段内只调用一次事件处理函数。</strong></p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"防抖和节流的应用场景\"><a href=\"#防抖和节流的应用场景\" class=\"headerlink\" title=\"防抖和节流的应用场景\"></a>防抖和节流的应用场景</h2><p>在前端开发的过程中，我们经常会需要绑定一些持续触发的事件，如 resize、scroll、mousemove 等等，但有些时候我们并不希望在事件持续触发的过程中那么频繁地去执行函数。</p>\n<h3 id=\"防抖\"><a href=\"#防抖\" class=\"headerlink\" title=\"防抖\"></a>防抖</h3><p><strong>所谓防抖，就是指触发事件后在 n 秒（或毫秒）内函数只能执行一次，如果在 n 秒（或毫秒）内又触发了事件，则会重新计算函数执行时间。</strong></p>\n<p>比如我们进行实时的搜索功能、对用户输入框进行监测，对用户的滚动条进行监测等等。</p>\n<h3 id=\"节流\"><a href=\"#节流\" class=\"headerlink\" title=\"节流\"></a>节流</h3><p><strong>所谓节流，就是指连续触发事件但是在 n 秒中只执行一次函数。</strong></p>\n<p>比如我们在做搜索输入时，用户连续点击多次搜索按钮，我们使用节流的方式。</p>\n<h2 id=\"防抖和节流的实现\"><a href=\"#防抖和节流的实现\" class=\"headerlink\" title=\"防抖和节流的实现\"></a>防抖和节流的实现</h2><h3 id=\"防抖-1\"><a href=\"#防抖-1\" class=\"headerlink\" title=\"防抖\"></a>防抖</h3><p>防抖可以分为两种，一种是延时、一种是立即执行。</p>\n<h4 id=\"延时版\"><a href=\"#延时版\" class=\"headerlink\" title=\"延时版\"></a>延时版</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">func, wait</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timeout;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> context = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timeout) clearTimeout(timeout);</span><br><span class=\"line\">        </span><br><span class=\"line\">        timeout = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            func.apply(context, args)</span><br><span class=\"line\">        &#125;, wait);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"立即执行版\"><a href=\"#立即执行版\" class=\"headerlink\" title=\"立即执行版\"></a>立即执行版</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">func,wait</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timeout;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> context = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timeout) clearTimeout(timeout);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> callNow = !timeout;</span><br><span class=\"line\">        timeout = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;, wait)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (callNow) func.apply(context, args)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p><strong>二者的区别在于，前者在延时n秒后执行，后者是立即执行，但是在n秒后才能再次执行。</strong></p>\n<h4 id=\"延时版和立即执行版结合\"><a href=\"#延时版和立即执行版结合\" class=\"headerlink\" title=\"延时版和立即执行版结合\"></a>延时版和立即执行版结合</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@desc </span>函数防抖</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param </span>func 函数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param </span>wait 延迟执行毫秒数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param </span>immediate true 表立即执行，false 表非立即执行</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">func,wait,immediate</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timeout;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> context = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timeout) clearTimeout(timeout);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (immediate) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> callNow = !timeout;</span><br><span class=\"line\">            timeout = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">                timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">            &#125;, wait)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (callNow) func.apply(context, args)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            timeout = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">                func.apply(context, args)</span><br><span class=\"line\">            &#125;, wait);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>这个方法可以作为公用的服务实现防抖。</strong></p>\n<h3 id=\"节流-1\"><a href=\"#节流-1\" class=\"headerlink\" title=\"节流\"></a>节流</h3><p>节流也可以分为两种，一种是时间戳版，一种是定时器版。</p>\n<h4 id=\"时间戳\"><a href=\"#时间戳\" class=\"headerlink\" title=\"时间戳\"></a>时间戳</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">throttle</span>(<span class=\"params\">func, wait</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> previous = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> now = <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\">        <span class=\"keyword\">let</span> context = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (now - previous &gt; wait) &#123;</span><br><span class=\"line\">            func.apply(context, args);</span><br><span class=\"line\">            previous = now;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"定时器\"><a href=\"#定时器\" class=\"headerlink\" title=\"定时器\"></a>定时器</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">throttle</span>(<span class=\"params\">func, wait</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timeout;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> context = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!timeout) &#123;</span><br><span class=\"line\">            timeout = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">                timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                func.apply(context, args)</span><br><span class=\"line\">            &#125;, wait)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p><strong>时间戳版和定时器版的节流函数的区别就是，时间戳版的函数触发是在时间段内开始的时候，而定时器版的函数触发是在时间段内结束的时候。</strong></p>\n<h4 id=\"结合版本\"><a href=\"#结合版本\" class=\"headerlink\" title=\"结合版本\"></a>结合版本</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@desc </span>函数节流</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param </span>func 函数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param </span>wait 延迟执行毫秒数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param </span>type 1 表时间戳版，2 表定时器版</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">throttle</span>(<span class=\"params\">func, wait ,type</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(type===<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> previous = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(type===<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> timeout;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> context = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(type===<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> now = <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (now - previous &gt; wait) &#123;</span><br><span class=\"line\">                func.apply(context, args);</span><br><span class=\"line\">                previous = now;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(type===<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!timeout) &#123;</span><br><span class=\"line\">                timeout = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">                    timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                    func.apply(context, args)</span><br><span class=\"line\">                &#125;, wait)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"什么是防抖？什么是节流？\"><a href=\"#什么是防抖？什么是节流？\" class=\"headerlink\" title=\"什么是防抖？什么是节流？\"></a>什么是防抖？什么是节流？</h2><h3 id=\"防抖（debounce）\"><a href=\"#防抖（debounce）\" class=\"headerlink\" title=\"防抖（debounce）\"></a>防抖（debounce）</h3><blockquote>\n<p><strong>当持续触发事件时，一定时间段内没有再触发事件，事件处理函数才会执行一次，如果设定的时间到来之前，又一次触发了事件，就重新开始延时。</strong></p>\n</blockquote>\n<h3 id=\"节流（throttle）\"><a href=\"#节流（throttle）\" class=\"headerlink\" title=\"节流（throttle）\"></a>节流（throttle）</h3><blockquote>\n<p><strong>当持续触发事件时，保证一定时间段内只调用一次事件处理函数。</strong></p>\n</blockquote>","more":"<h2 id=\"防抖和节流的应用场景\"><a href=\"#防抖和节流的应用场景\" class=\"headerlink\" title=\"防抖和节流的应用场景\"></a>防抖和节流的应用场景</h2><p>在前端开发的过程中，我们经常会需要绑定一些持续触发的事件，如 resize、scroll、mousemove 等等，但有些时候我们并不希望在事件持续触发的过程中那么频繁地去执行函数。</p>\n<h3 id=\"防抖\"><a href=\"#防抖\" class=\"headerlink\" title=\"防抖\"></a>防抖</h3><p><strong>所谓防抖，就是指触发事件后在 n 秒（或毫秒）内函数只能执行一次，如果在 n 秒（或毫秒）内又触发了事件，则会重新计算函数执行时间。</strong></p>\n<p>比如我们进行实时的搜索功能、对用户输入框进行监测，对用户的滚动条进行监测等等。</p>\n<h3 id=\"节流\"><a href=\"#节流\" class=\"headerlink\" title=\"节流\"></a>节流</h3><p><strong>所谓节流，就是指连续触发事件但是在 n 秒中只执行一次函数。</strong></p>\n<p>比如我们在做搜索输入时，用户连续点击多次搜索按钮，我们使用节流的方式。</p>\n<h2 id=\"防抖和节流的实现\"><a href=\"#防抖和节流的实现\" class=\"headerlink\" title=\"防抖和节流的实现\"></a>防抖和节流的实现</h2><h3 id=\"防抖-1\"><a href=\"#防抖-1\" class=\"headerlink\" title=\"防抖\"></a>防抖</h3><p>防抖可以分为两种，一种是延时、一种是立即执行。</p>\n<h4 id=\"延时版\"><a href=\"#延时版\" class=\"headerlink\" title=\"延时版\"></a>延时版</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">func, wait</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timeout;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> context = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timeout) clearTimeout(timeout);</span><br><span class=\"line\">        </span><br><span class=\"line\">        timeout = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            func.apply(context, args)</span><br><span class=\"line\">        &#125;, wait);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"立即执行版\"><a href=\"#立即执行版\" class=\"headerlink\" title=\"立即执行版\"></a>立即执行版</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">func,wait</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timeout;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> context = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timeout) clearTimeout(timeout);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> callNow = !timeout;</span><br><span class=\"line\">        timeout = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;, wait)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (callNow) func.apply(context, args)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p><strong>二者的区别在于，前者在延时n秒后执行，后者是立即执行，但是在n秒后才能再次执行。</strong></p>\n<h4 id=\"延时版和立即执行版结合\"><a href=\"#延时版和立即执行版结合\" class=\"headerlink\" title=\"延时版和立即执行版结合\"></a>延时版和立即执行版结合</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@desc </span>函数防抖</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param </span>func 函数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param </span>wait 延迟执行毫秒数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param </span>immediate true 表立即执行，false 表非立即执行</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">func,wait,immediate</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timeout;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> context = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timeout) clearTimeout(timeout);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (immediate) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> callNow = !timeout;</span><br><span class=\"line\">            timeout = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">                timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">            &#125;, wait)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (callNow) func.apply(context, args)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            timeout = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">                func.apply(context, args)</span><br><span class=\"line\">            &#125;, wait);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>这个方法可以作为公用的服务实现防抖。</strong></p>\n<h3 id=\"节流-1\"><a href=\"#节流-1\" class=\"headerlink\" title=\"节流\"></a>节流</h3><p>节流也可以分为两种，一种是时间戳版，一种是定时器版。</p>\n<h4 id=\"时间戳\"><a href=\"#时间戳\" class=\"headerlink\" title=\"时间戳\"></a>时间戳</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">throttle</span>(<span class=\"params\">func, wait</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> previous = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> now = <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\">        <span class=\"keyword\">let</span> context = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (now - previous &gt; wait) &#123;</span><br><span class=\"line\">            func.apply(context, args);</span><br><span class=\"line\">            previous = now;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"定时器\"><a href=\"#定时器\" class=\"headerlink\" title=\"定时器\"></a>定时器</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">throttle</span>(<span class=\"params\">func, wait</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timeout;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> context = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!timeout) &#123;</span><br><span class=\"line\">            timeout = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">                timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                func.apply(context, args)</span><br><span class=\"line\">            &#125;, wait)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p><strong>时间戳版和定时器版的节流函数的区别就是，时间戳版的函数触发是在时间段内开始的时候，而定时器版的函数触发是在时间段内结束的时候。</strong></p>\n<h4 id=\"结合版本\"><a href=\"#结合版本\" class=\"headerlink\" title=\"结合版本\"></a>结合版本</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@desc </span>函数节流</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param </span>func 函数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param </span>wait 延迟执行毫秒数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param </span>type 1 表时间戳版，2 表定时器版</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">throttle</span>(<span class=\"params\">func, wait ,type</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(type===<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> previous = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(type===<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> timeout;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> context = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(type===<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> now = <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (now - previous &gt; wait) &#123;</span><br><span class=\"line\">                func.apply(context, args);</span><br><span class=\"line\">                previous = now;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(type===<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!timeout) &#123;</span><br><span class=\"line\">                timeout = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">                    timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                    func.apply(context, args)</span><br><span class=\"line\">                &#125;, wait)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"layout":"[post]","title":"前端错误监控","date":"2019-10-21T15:53:43.000Z","_content":"## 前端错误的分类\n一般来说前端错误分为两类\n1. 即时运行错误\n2. 资源加载错误\n\n<!-- more -->\n## 错误捕获方式\n### 即时运行错误\n1. try catch\n2. window.onerror\n\n### 资源加载错误\n\n**资源加载错误不会冒泡，所以window.onerror捕获不到**\n1. object.onerror\n2. performance.getEntries()（获取所有加载资源）\n3. Error事件捕获\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <title>错误监控</title>\n    <script type=\"text/javascript\">\n      window.addEventListener('error', function (e) {\n          console.log('捕获', e);\n      }, false);\n    </script>\n  </head>\n  <body>\n    <script src=\"//badu.com/test.js\" charset=\"utf-8\"></script>\n  </body>\n</html>\n\n```\n\n#### 跨域js的运行错误\n**所有跨域js的运行错误都会显示为Script error**  \n解决方法：\n1. 在script标签上增加crossorigin属性(客户端)\n2. 设置资源响应头Access-Control-Allow-Origin:*（服务端）\n\n## 上报错误\n### 用ajax通信上报\n不建议这么来做\n### 利用Image对象进行上报\n\n```html\n <script type=\"text/javascript\">\n      (new Image()).src = 'http://baidu.com/tesjk?r=tksjk';\n    </script>\n```\n很容易实现请求，比ajax方便的多\n\n","source":"_posts/前端错误监控.md","raw":"---\nlayout: '[post]'\ntitle: 前端错误监控\ndate: 2019-10-21 23:53:43\ntags: 前端性能优化\n---\n## 前端错误的分类\n一般来说前端错误分为两类\n1. 即时运行错误\n2. 资源加载错误\n\n<!-- more -->\n## 错误捕获方式\n### 即时运行错误\n1. try catch\n2. window.onerror\n\n### 资源加载错误\n\n**资源加载错误不会冒泡，所以window.onerror捕获不到**\n1. object.onerror\n2. performance.getEntries()（获取所有加载资源）\n3. Error事件捕获\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <title>错误监控</title>\n    <script type=\"text/javascript\">\n      window.addEventListener('error', function (e) {\n          console.log('捕获', e);\n      }, false);\n    </script>\n  </head>\n  <body>\n    <script src=\"//badu.com/test.js\" charset=\"utf-8\"></script>\n  </body>\n</html>\n\n```\n\n#### 跨域js的运行错误\n**所有跨域js的运行错误都会显示为Script error**  \n解决方法：\n1. 在script标签上增加crossorigin属性(客户端)\n2. 设置资源响应头Access-Control-Allow-Origin:*（服务端）\n\n## 上报错误\n### 用ajax通信上报\n不建议这么来做\n### 利用Image对象进行上报\n\n```html\n <script type=\"text/javascript\">\n      (new Image()).src = 'http://baidu.com/tesjk?r=tksjk';\n    </script>\n```\n很容易实现请求，比ajax方便的多\n\n","slug":"前端错误监控","published":1,"updated":"2020-05-04T15:54:55.000Z","comments":1,"photos":[],"link":"","_id":"ckbftlm7e002h7w2p9d2hb2jl","content":"<h2 id=\"前端错误的分类\"><a href=\"#前端错误的分类\" class=\"headerlink\" title=\"前端错误的分类\"></a>前端错误的分类</h2><p>一般来说前端错误分为两类</p>\n<ol>\n<li>即时运行错误</li>\n<li>资源加载错误</li>\n</ol>\n<a id=\"more\"></a>\n<h2 id=\"错误捕获方式\"><a href=\"#错误捕获方式\" class=\"headerlink\" title=\"错误捕获方式\"></a>错误捕获方式</h2><h3 id=\"即时运行错误\"><a href=\"#即时运行错误\" class=\"headerlink\" title=\"即时运行错误\"></a>即时运行错误</h3><ol>\n<li>try catch</li>\n<li>window.onerror</li>\n</ol>\n<h3 id=\"资源加载错误\"><a href=\"#资源加载错误\" class=\"headerlink\" title=\"资源加载错误\"></a>资源加载错误</h3><p><strong>资源加载错误不会冒泡，所以window.onerror捕获不到</strong></p>\n<ol>\n<li>object.onerror</li>\n<li>performance.getEntries()（获取所有加载资源）</li>\n<li>Error事件捕获<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>错误监控<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'error'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">'捕获'</span>, e);</span></span><br><span class=\"line\"><span class=\"actionscript\">      &#125;, <span class=\"literal\">false</span>);</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"//badu.com/test.js\"</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h4 id=\"跨域js的运行错误\"><a href=\"#跨域js的运行错误\" class=\"headerlink\" title=\"跨域js的运行错误\"></a>跨域js的运行错误</h4><p><strong>所有跨域js的运行错误都会显示为Script error</strong><br>解决方法：</p>\n<ol>\n<li>在script标签上增加crossorigin属性(客户端)</li>\n<li>设置资源响应头Access-Control-Allow-Origin:*（服务端）</li>\n</ol>\n<h2 id=\"上报错误\"><a href=\"#上报错误\" class=\"headerlink\" title=\"上报错误\"></a>上报错误</h2><h3 id=\"用ajax通信上报\"><a href=\"#用ajax通信上报\" class=\"headerlink\" title=\"用ajax通信上报\"></a>用ajax通信上报</h3><p>不建议这么来做</p>\n<h3 id=\"利用Image对象进行上报\"><a href=\"#利用Image对象进行上报\" class=\"headerlink\" title=\"利用Image对象进行上报\"></a>利用Image对象进行上报</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">     (<span class=\"keyword\">new</span> Image()).src = <span class=\"string\">'http://baidu.com/tesjk?r=tksjk'</span>;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>很容易实现请求，比ajax方便的多</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"前端错误的分类\"><a href=\"#前端错误的分类\" class=\"headerlink\" title=\"前端错误的分类\"></a>前端错误的分类</h2><p>一般来说前端错误分为两类</p>\n<ol>\n<li>即时运行错误</li>\n<li>资源加载错误</li>\n</ol>","more":"<h2 id=\"错误捕获方式\"><a href=\"#错误捕获方式\" class=\"headerlink\" title=\"错误捕获方式\"></a>错误捕获方式</h2><h3 id=\"即时运行错误\"><a href=\"#即时运行错误\" class=\"headerlink\" title=\"即时运行错误\"></a>即时运行错误</h3><ol>\n<li>try catch</li>\n<li>window.onerror</li>\n</ol>\n<h3 id=\"资源加载错误\"><a href=\"#资源加载错误\" class=\"headerlink\" title=\"资源加载错误\"></a>资源加载错误</h3><p><strong>资源加载错误不会冒泡，所以window.onerror捕获不到</strong></p>\n<ol>\n<li>object.onerror</li>\n<li>performance.getEntries()（获取所有加载资源）</li>\n<li>Error事件捕获<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>错误监控<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'error'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">'捕获'</span>, e);</span></span><br><span class=\"line\"><span class=\"actionscript\">      &#125;, <span class=\"literal\">false</span>);</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"//badu.com/test.js\"</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h4 id=\"跨域js的运行错误\"><a href=\"#跨域js的运行错误\" class=\"headerlink\" title=\"跨域js的运行错误\"></a>跨域js的运行错误</h4><p><strong>所有跨域js的运行错误都会显示为Script error</strong><br>解决方法：</p>\n<ol>\n<li>在script标签上增加crossorigin属性(客户端)</li>\n<li>设置资源响应头Access-Control-Allow-Origin:*（服务端）</li>\n</ol>\n<h2 id=\"上报错误\"><a href=\"#上报错误\" class=\"headerlink\" title=\"上报错误\"></a>上报错误</h2><h3 id=\"用ajax通信上报\"><a href=\"#用ajax通信上报\" class=\"headerlink\" title=\"用ajax通信上报\"></a>用ajax通信上报</h3><p>不建议这么来做</p>\n<h3 id=\"利用Image对象进行上报\"><a href=\"#利用Image对象进行上报\" class=\"headerlink\" title=\"利用Image对象进行上报\"></a>利用Image对象进行上报</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">     (<span class=\"keyword\">new</span> Image()).src = <span class=\"string\">'http://baidu.com/tesjk?r=tksjk'</span>;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>很容易实现请求，比ajax方便的多</p>"},{"layout":"[post]","title":"原型链","date":"2019-07-24T08:19:43.000Z","_content":"## 原型链的介绍\n### 什么是原型？\njs中，任何对象都有一个原型对象，这个原型对象由对象的内置属性_proto_指向它的构造函数的prototype指向的对象，即任何对象都是由一个构造函数创建的，但是不是每一个对象都有prototype，只有方法才有prototype。\n### 什么是原型链？\n  原型链的核心就是依赖对象的_proto_的指向，当自身不存在的属性时，就一层层的扒出创建对象的构造函数，直至到Object时，就没有_proto_指向了。\n\n<!-- more -->\n## 创建对象的方法\n1. 字面量\n```js\nvar a = { name: 'demo' };\n```\n2. 字面量（使用了Object的构造方法）\n```js\nvar b = new Object({ name: 'demo' });\n```\n3. 构造函数\n```js\nvar func = function () {\n    this.name = 'demo';\n}\nvar c = new func();\n```\n4. Object.create\n```js\nvar demo = { name: 'demo' };\nvar d = Object.create(demo);\n```\n\n### 创建对象的过程\n\n**首先，当我们声明一个function关键字的方法时，会为这个方法添加一个prototype属性，指向默认的原型对象，并且此prototype的constructor属性也指向方法对象。此二个属性会在创建对象时被对象的属性引用。**\n\n```js\nfunction Hello() {\n\t}\n\tconsole.log(Hello.prototype); // Object {} -- > 内部的constructor 指向Hello方法\n\tconsole.log(Hello.prototype.constructor); // function Hello(){}\n```\n**我们如果用Hello创建一个对象h，看这个对象有什么属性。**\n\n```js\n    console.log(h.constructor); // function Hello(){}\n\tconsole.log(Object.getPrototypeOf(h)==Hello.prototype); // true  备注：getPrototypeOf是获取_proto_\n```\n 我们惊喜的发现，new出来的对象，它的constructor指向了方法对象，它的_proto_和prototype相等。\n\n  即new一个对象，它的_proto_属性指向了方法的prototype属性，并且constructor指向了prototype的constructor属性。\n\n### 创建对象的过程\n\n```js\nfunction Hehe(name) {\n\t\tthis.name = name;\n\t}\n\tvar h = new Hehe(\"笑你妹\");\n\t//伪代码:\n\tfunction newObj(name){\n\t\t var obj = {};\n\t\t obj.__proto__ = Hehe.prototype; \n\t\t obj.constructor = Hehe.prototype.constructor;\n\t\t var result = Hehe.call(obj, name);\n\t\t return typeof result==='object'&& result!=null ? result : obj;  //当无返回对象或默认时返回obj。\n\t}\n\tvar hh = newObj(\"笑你妹\");\n\tconsole.log(hh);\n\tconsole.log(h);\n\t//虽然hh!=h,但是可以看到这个hh就和h的结构一样了。\n\n```\n**过程：先创建一个空对象，设置一个_proto_指向方法的原型，设置constructor，用新对象做this指向方法，返回新对象。**\n\n## 原型以及原型链关系\n\n![image](yuanxing.png)\n\n![image](gouzao.png)\n\n### 原型\n> 任何对象都有一个原型对象，这个原型对象由对象的内置属性_proto_指向它的构造函数的prototype指向的对象，即任何对象都是由一个构造函数创建的，但是不是每一个对象都有prototype，只有方法才有prototype。\n\n```js\nfunction Person() {\n\t}\n\tvar p = new Person();\n\t//方法才有prototype,普通对象无prototype\n\tconsole.log(Person.prototype); // Object{} \n\tconsole.log(p.prototype); // undifined\n\t\n\t//任何对象都是有构造函数的,Person这种方法的构造函数是Function。\n\t//备注:constructor很容易被改变，一般不用它，此处只是打印下列对象的构造函数是什么。\n\tconsole.log(p.constructor); //function Person(){}  \n\tconsole.log(Person.constructor); //function Function(){} \n\tconsole.log({}.constructor); // function Object(){}\n\tconsole.log(Object.constructor); // function Function() {}\n\tconsole.log([].constructor);  //function Array(){}\n```\n\n### 构造函数\n>  用function声明的都是函数，而如果直接调用的话，那么Person()就是一个普通函数，只有用函数new产生对象时，这个函数才是new出来对象的构造函数。\n\n### 原型链\n> 原型链的核心就是依赖对象的_proto_的指向，当自身不存在的属性时，就一层层的扒出创建对象的构造函数，直至到Object时，就没有_proto_指向了。\n\n属性搜索原则：\n\n1. 当访问一个对象的成员的时候，会现在自身找有没有,如果找到直接使用。\n2. 如果没有找到，则去原型链指向的对象的构造函数的prototype中找，找到直接使用，没找到就返回undifined或报错。\n```js\n function Person(name){\n            this.name = name;\n     }\n     var p = new Person();\n     //p ---> Person.prototype --->Object.prototype---->null\n```\n### 原型继承\n\n```js\n//原型继承的基本案例\nfunction Person(name, age) {\n\tthis.name = name;\n\tthis.age = age;\n}\n//1.直接替换原型对象 \nvar parent = {\n\tsayHello : function() {\n\t\tconsole.log(\"方式1：替换原型对象\");\n\t}\n}\nPerson.prototype = parent;\nvar p = new Person(\"张三\", 50);\np.sayHello();\n//2.混入式原型继承\nconsole.log(\".............混入式原型继承..............\");\nfunction Student(name, age) {\n\tthis.name = name;\n\tthis.age = age;\n}\nvar parent2 = {\n\tsayHello : function() {\n\t\tconsole.log(\"方式2：原型继承之混入式加载成员\");\n\t}\n}\nfor ( var k in parent2) {\n\tStudent.prototype[k] = parent2[k];\n}\nvar p = new Student(\"张三\", 50);\np.sayHello();\n```\n### instanceof\n**instanceof运算符用来判断一个构造函数的prototype属性所指向的对象是否存在另外一个要检测对象的原型链上**\n\n```js\n\tc; // function {name: \"demo\"}\n\tc instanceof Object; // true\n```\n为什么会是true呢？？\n\n```js\n    c; // function {name: \"demo\"}\n\tc instanceof func; // true\n\tc.__proto__ === func.prototype; // true\n\tfunc.prototype.__proto__ === Object.prototype; // true\n\tc instanceof Object; // true\n```\n**所以，instanceof不能用来判断对象的类型！！！**  \n\n那么我们用什么来判断对象的类型呢？\n\n### constructor\n\n```js\n    c.__proto__.constructor===func // true\n\tc.__proto__.constructor===Object // false\n```\n## new 运算符\n当我们用new运算符new一个构造函数产生一个实例时，比如说： var obj = new Func 时，其背后的步骤是这样的：\n\n1. 创建一个继承自 Func.prototype 的新对象；\n2. 执行构造函数 Func ，执行的时候，相应的传参会被传入，同时上下文(this)会被指定为第一步创建的新实例；\n3. 如果构造函数返回了一个“对象”,那么这个对象会取代步骤1中new出来的实例被返回。如果构造函数没有返回对象,那么new出来的结果为步骤1创建的对象。\n\n**注意：new Func 等同于new Func()，只能用在不传递任何参数的情况。**\n### new的模拟实现\n\n```js\n//new运算符原理实现\nvar new1 = function(fun){\n    var newObj = Object.create(fun.prototype);\n    var returnObj = fun.call(newObj);\n    if(typeof returnObj === 'object'){\n        return returnObj\n    }else{\n        return newObj\n    }\n}\n```\n其中  var newObj  = Object.create(fun.prototype)  的意思是：创建一个新对象newObj，并让``` newObj.__proto__  ```指向 fun，即  ```newObj.__proto__=== fun ```返回true。\n**方法的使用**\n\n```js\nvar strObj = new1(String);\nalert(strObj instanceof String); //true\nalert(strObj.__proto__.constructor === String); //true\n```\n**可以看到，new1函数的运行效果和new运算符是一样的。我们继续给String的原型上添加一个方法，看看new1函数得到的strObj能否继承到这个方法：**\n\n\n```js\nString.prototype.defineByN = function(){\n    alert(\"我是自定义方法\");\n}\nstrObj.defineByN();  //弹出“我是自定义方法”\n```\n可以看到new1函数得到的strObj继承了到这个方法。\n\n## 问题：为什么Object.create创建的对象和其他几种不一样呢？\n因为使用原型链进行的创造对象。\n\n```\n\td.__proto__===demo; // true\n```\n","source":"_posts/原型链.md","raw":"---\nlayout: '[post]'\ntitle: 原型链\ndate: 2019-07-24 16:19:43\ntags: javascript\n---\n## 原型链的介绍\n### 什么是原型？\njs中，任何对象都有一个原型对象，这个原型对象由对象的内置属性_proto_指向它的构造函数的prototype指向的对象，即任何对象都是由一个构造函数创建的，但是不是每一个对象都有prototype，只有方法才有prototype。\n### 什么是原型链？\n  原型链的核心就是依赖对象的_proto_的指向，当自身不存在的属性时，就一层层的扒出创建对象的构造函数，直至到Object时，就没有_proto_指向了。\n\n<!-- more -->\n## 创建对象的方法\n1. 字面量\n```js\nvar a = { name: 'demo' };\n```\n2. 字面量（使用了Object的构造方法）\n```js\nvar b = new Object({ name: 'demo' });\n```\n3. 构造函数\n```js\nvar func = function () {\n    this.name = 'demo';\n}\nvar c = new func();\n```\n4. Object.create\n```js\nvar demo = { name: 'demo' };\nvar d = Object.create(demo);\n```\n\n### 创建对象的过程\n\n**首先，当我们声明一个function关键字的方法时，会为这个方法添加一个prototype属性，指向默认的原型对象，并且此prototype的constructor属性也指向方法对象。此二个属性会在创建对象时被对象的属性引用。**\n\n```js\nfunction Hello() {\n\t}\n\tconsole.log(Hello.prototype); // Object {} -- > 内部的constructor 指向Hello方法\n\tconsole.log(Hello.prototype.constructor); // function Hello(){}\n```\n**我们如果用Hello创建一个对象h，看这个对象有什么属性。**\n\n```js\n    console.log(h.constructor); // function Hello(){}\n\tconsole.log(Object.getPrototypeOf(h)==Hello.prototype); // true  备注：getPrototypeOf是获取_proto_\n```\n 我们惊喜的发现，new出来的对象，它的constructor指向了方法对象，它的_proto_和prototype相等。\n\n  即new一个对象，它的_proto_属性指向了方法的prototype属性，并且constructor指向了prototype的constructor属性。\n\n### 创建对象的过程\n\n```js\nfunction Hehe(name) {\n\t\tthis.name = name;\n\t}\n\tvar h = new Hehe(\"笑你妹\");\n\t//伪代码:\n\tfunction newObj(name){\n\t\t var obj = {};\n\t\t obj.__proto__ = Hehe.prototype; \n\t\t obj.constructor = Hehe.prototype.constructor;\n\t\t var result = Hehe.call(obj, name);\n\t\t return typeof result==='object'&& result!=null ? result : obj;  //当无返回对象或默认时返回obj。\n\t}\n\tvar hh = newObj(\"笑你妹\");\n\tconsole.log(hh);\n\tconsole.log(h);\n\t//虽然hh!=h,但是可以看到这个hh就和h的结构一样了。\n\n```\n**过程：先创建一个空对象，设置一个_proto_指向方法的原型，设置constructor，用新对象做this指向方法，返回新对象。**\n\n## 原型以及原型链关系\n\n![image](yuanxing.png)\n\n![image](gouzao.png)\n\n### 原型\n> 任何对象都有一个原型对象，这个原型对象由对象的内置属性_proto_指向它的构造函数的prototype指向的对象，即任何对象都是由一个构造函数创建的，但是不是每一个对象都有prototype，只有方法才有prototype。\n\n```js\nfunction Person() {\n\t}\n\tvar p = new Person();\n\t//方法才有prototype,普通对象无prototype\n\tconsole.log(Person.prototype); // Object{} \n\tconsole.log(p.prototype); // undifined\n\t\n\t//任何对象都是有构造函数的,Person这种方法的构造函数是Function。\n\t//备注:constructor很容易被改变，一般不用它，此处只是打印下列对象的构造函数是什么。\n\tconsole.log(p.constructor); //function Person(){}  \n\tconsole.log(Person.constructor); //function Function(){} \n\tconsole.log({}.constructor); // function Object(){}\n\tconsole.log(Object.constructor); // function Function() {}\n\tconsole.log([].constructor);  //function Array(){}\n```\n\n### 构造函数\n>  用function声明的都是函数，而如果直接调用的话，那么Person()就是一个普通函数，只有用函数new产生对象时，这个函数才是new出来对象的构造函数。\n\n### 原型链\n> 原型链的核心就是依赖对象的_proto_的指向，当自身不存在的属性时，就一层层的扒出创建对象的构造函数，直至到Object时，就没有_proto_指向了。\n\n属性搜索原则：\n\n1. 当访问一个对象的成员的时候，会现在自身找有没有,如果找到直接使用。\n2. 如果没有找到，则去原型链指向的对象的构造函数的prototype中找，找到直接使用，没找到就返回undifined或报错。\n```js\n function Person(name){\n            this.name = name;\n     }\n     var p = new Person();\n     //p ---> Person.prototype --->Object.prototype---->null\n```\n### 原型继承\n\n```js\n//原型继承的基本案例\nfunction Person(name, age) {\n\tthis.name = name;\n\tthis.age = age;\n}\n//1.直接替换原型对象 \nvar parent = {\n\tsayHello : function() {\n\t\tconsole.log(\"方式1：替换原型对象\");\n\t}\n}\nPerson.prototype = parent;\nvar p = new Person(\"张三\", 50);\np.sayHello();\n//2.混入式原型继承\nconsole.log(\".............混入式原型继承..............\");\nfunction Student(name, age) {\n\tthis.name = name;\n\tthis.age = age;\n}\nvar parent2 = {\n\tsayHello : function() {\n\t\tconsole.log(\"方式2：原型继承之混入式加载成员\");\n\t}\n}\nfor ( var k in parent2) {\n\tStudent.prototype[k] = parent2[k];\n}\nvar p = new Student(\"张三\", 50);\np.sayHello();\n```\n### instanceof\n**instanceof运算符用来判断一个构造函数的prototype属性所指向的对象是否存在另外一个要检测对象的原型链上**\n\n```js\n\tc; // function {name: \"demo\"}\n\tc instanceof Object; // true\n```\n为什么会是true呢？？\n\n```js\n    c; // function {name: \"demo\"}\n\tc instanceof func; // true\n\tc.__proto__ === func.prototype; // true\n\tfunc.prototype.__proto__ === Object.prototype; // true\n\tc instanceof Object; // true\n```\n**所以，instanceof不能用来判断对象的类型！！！**  \n\n那么我们用什么来判断对象的类型呢？\n\n### constructor\n\n```js\n    c.__proto__.constructor===func // true\n\tc.__proto__.constructor===Object // false\n```\n## new 运算符\n当我们用new运算符new一个构造函数产生一个实例时，比如说： var obj = new Func 时，其背后的步骤是这样的：\n\n1. 创建一个继承自 Func.prototype 的新对象；\n2. 执行构造函数 Func ，执行的时候，相应的传参会被传入，同时上下文(this)会被指定为第一步创建的新实例；\n3. 如果构造函数返回了一个“对象”,那么这个对象会取代步骤1中new出来的实例被返回。如果构造函数没有返回对象,那么new出来的结果为步骤1创建的对象。\n\n**注意：new Func 等同于new Func()，只能用在不传递任何参数的情况。**\n### new的模拟实现\n\n```js\n//new运算符原理实现\nvar new1 = function(fun){\n    var newObj = Object.create(fun.prototype);\n    var returnObj = fun.call(newObj);\n    if(typeof returnObj === 'object'){\n        return returnObj\n    }else{\n        return newObj\n    }\n}\n```\n其中  var newObj  = Object.create(fun.prototype)  的意思是：创建一个新对象newObj，并让``` newObj.__proto__  ```指向 fun，即  ```newObj.__proto__=== fun ```返回true。\n**方法的使用**\n\n```js\nvar strObj = new1(String);\nalert(strObj instanceof String); //true\nalert(strObj.__proto__.constructor === String); //true\n```\n**可以看到，new1函数的运行效果和new运算符是一样的。我们继续给String的原型上添加一个方法，看看new1函数得到的strObj能否继承到这个方法：**\n\n\n```js\nString.prototype.defineByN = function(){\n    alert(\"我是自定义方法\");\n}\nstrObj.defineByN();  //弹出“我是自定义方法”\n```\n可以看到new1函数得到的strObj继承了到这个方法。\n\n## 问题：为什么Object.create创建的对象和其他几种不一样呢？\n因为使用原型链进行的创造对象。\n\n```\n\td.__proto__===demo; // true\n```\n","slug":"原型链","published":1,"updated":"2020-03-13T10:38:45.000Z","comments":1,"photos":[],"link":"","_id":"ckbftlm7f002j7w2pajvgaaxf","content":"<h2 id=\"原型链的介绍\"><a href=\"#原型链的介绍\" class=\"headerlink\" title=\"原型链的介绍\"></a>原型链的介绍</h2><h3 id=\"什么是原型？\"><a href=\"#什么是原型？\" class=\"headerlink\" title=\"什么是原型？\"></a>什么是原型？</h3><p>js中，任何对象都有一个原型对象，这个原型对象由对象的内置属性_proto_指向它的构造函数的prototype指向的对象，即任何对象都是由一个构造函数创建的，但是不是每一个对象都有prototype，只有方法才有prototype。</p>\n<h3 id=\"什么是原型链？\"><a href=\"#什么是原型链？\" class=\"headerlink\" title=\"什么是原型链？\"></a>什么是原型链？</h3><p>  原型链的核心就是依赖对象的_proto_的指向，当自身不存在的属性时，就一层层的扒出创建对象的构造函数，直至到Object时，就没有_proto_指向了。</p>\n<a id=\"more\"></a>\n<h2 id=\"创建对象的方法\"><a href=\"#创建对象的方法\" class=\"headerlink\" title=\"创建对象的方法\"></a>创建对象的方法</h2><ol>\n<li>字面量<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123; <span class=\"attr\">name</span>: <span class=\"string\">'demo'</span> &#125;;</span><br></pre></td></tr></table></figure></li>\n<li>字面量（使用了Object的构造方法）<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>(&#123; <span class=\"attr\">name</span>: <span class=\"string\">'demo'</span> &#125;);</span><br></pre></td></tr></table></figure></li>\n<li>构造函数<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> func = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'demo'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"keyword\">new</span> func();</span><br></pre></td></tr></table></figure></li>\n<li>Object.create<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> demo = &#123; <span class=\"attr\">name</span>: <span class=\"string\">'demo'</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> d = <span class=\"built_in\">Object</span>.create(demo);</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"创建对象的过程\"><a href=\"#创建对象的过程\" class=\"headerlink\" title=\"创建对象的过程\"></a>创建对象的过程</h3><p><strong>首先，当我们声明一个function关键字的方法时，会为这个方法添加一个prototype属性，指向默认的原型对象，并且此prototype的constructor属性也指向方法对象。此二个属性会在创建对象时被对象的属性引用。</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Hello</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(Hello.prototype); <span class=\"comment\">// Object &#123;&#125; -- &gt; 内部的constructor 指向Hello方法</span></span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(Hello.prototype.constructor); <span class=\"comment\">// function Hello()&#123;&#125;</span></span><br></pre></td></tr></table></figure>\n<p><strong>我们如果用Hello创建一个对象h，看这个对象有什么属性。</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"built_in\">console</span>.log(h.constructor); <span class=\"comment\">// function Hello()&#123;&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.getPrototypeOf(h)==Hello.prototype); <span class=\"comment\">// true  备注：getPrototypeOf是获取_proto_</span></span><br></pre></td></tr></table></figure>\n<p> 我们惊喜的发现，new出来的对象，它的constructor指向了方法对象，它的_proto_和prototype相等。</p>\n<p>  即new一个对象，它的_proto_属性指向了方法的prototype属性，并且constructor指向了prototype的constructor属性。</p>\n<h3 id=\"创建对象的过程-1\"><a href=\"#创建对象的过程-1\" class=\"headerlink\" title=\"创建对象的过程\"></a>创建对象的过程</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Hehe</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> h = <span class=\"keyword\">new</span> Hehe(<span class=\"string\">\"笑你妹\"</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//伪代码:</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">newObj</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">\t\t <span class=\"keyword\">var</span> obj = &#123;&#125;;</span><br><span class=\"line\">\t\t obj.__proto__ = Hehe.prototype; </span><br><span class=\"line\">\t\t obj.constructor = Hehe.prototype.constructor;</span><br><span class=\"line\">\t\t <span class=\"keyword\">var</span> result = Hehe.call(obj, name);</span><br><span class=\"line\">\t\t <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> result===<span class=\"string\">'object'</span>&amp;&amp; result!=<span class=\"literal\">null</span> ? result : obj;  <span class=\"comment\">//当无返回对象或默认时返回obj。</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> hh = newObj(<span class=\"string\">\"笑你妹\"</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(hh);</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(h);</span><br><span class=\"line\">\t<span class=\"comment\">//虽然hh!=h,但是可以看到这个hh就和h的结构一样了。</span></span><br></pre></td></tr></table></figure>\n<p><strong>过程：先创建一个空对象，设置一个_proto_指向方法的原型，设置constructor，用新对象做this指向方法，返回新对象。</strong></p>\n<h2 id=\"原型以及原型链关系\"><a href=\"#原型以及原型链关系\" class=\"headerlink\" title=\"原型以及原型链关系\"></a>原型以及原型链关系</h2><p><img src=\"/2019/07/24/%E5%8E%9F%E5%9E%8B%E9%93%BE/yuanxing.png\" alt=\"image\"></p>\n<p><img src=\"/2019/07/24/%E5%8E%9F%E5%9E%8B%E9%93%BE/gouzao.png\" alt=\"image\"></p>\n<h3 id=\"原型\"><a href=\"#原型\" class=\"headerlink\" title=\"原型\"></a>原型</h3><blockquote>\n<p>任何对象都有一个原型对象，这个原型对象由对象的内置属性_proto_指向它的构造函数的prototype指向的对象，即任何对象都是由一个构造函数创建的，但是不是每一个对象都有prototype，只有方法才有prototype。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">\t<span class=\"comment\">//方法才有prototype,普通对象无prototype</span></span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(Person.prototype); <span class=\"comment\">// Object&#123;&#125; </span></span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(p.prototype); <span class=\"comment\">// undifined</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//任何对象都是有构造函数的,Person这种方法的构造函数是Function。</span></span><br><span class=\"line\">\t<span class=\"comment\">//备注:constructor很容易被改变，一般不用它，此处只是打印下列对象的构造函数是什么。</span></span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(p.constructor); <span class=\"comment\">//function Person()&#123;&#125;  </span></span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(Person.constructor); <span class=\"comment\">//function Function()&#123;&#125; </span></span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(&#123;&#125;.constructor); <span class=\"comment\">// function Object()&#123;&#125;</span></span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.constructor); <span class=\"comment\">// function Function() &#123;&#125;</span></span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log([].constructor);  <span class=\"comment\">//function Array()&#123;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h3><blockquote>\n<p> 用function声明的都是函数，而如果直接调用的话，那么Person()就是一个普通函数，只有用函数new产生对象时，这个函数才是new出来对象的构造函数。</p>\n</blockquote>\n<h3 id=\"原型链\"><a href=\"#原型链\" class=\"headerlink\" title=\"原型链\"></a>原型链</h3><blockquote>\n<p>原型链的核心就是依赖对象的_proto_的指向，当自身不存在的属性时，就一层层的扒出创建对象的构造函数，直至到Object时，就没有_proto_指向了。</p>\n</blockquote>\n<p>属性搜索原则：</p>\n<ol>\n<li>当访问一个对象的成员的时候，会现在自身找有没有,如果找到直接使用。</li>\n<li>如果没有找到，则去原型链指向的对象的构造函数的prototype中找，找到直接使用，没找到就返回undifined或报错。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">    <span class=\"comment\">//p ---&gt; Person.prototype ---&gt;Object.prototype----&gt;null</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"原型继承\"><a href=\"#原型继承\" class=\"headerlink\" title=\"原型继承\"></a>原型继承</h3></li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//原型继承的基本案例</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//1.直接替换原型对象 </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> parent = &#123;</span><br><span class=\"line\">\tsayHello : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"方式1：替换原型对象\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Person.prototype = parent;</span><br><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"张三\"</span>, <span class=\"number\">50</span>);</span><br><span class=\"line\">p.sayHello();</span><br><span class=\"line\"><span class=\"comment\">//2.混入式原型继承</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\".............混入式原型继承..............\"</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Student</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> parent2 = &#123;</span><br><span class=\"line\">\tsayHello : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"方式2：原型继承之混入式加载成员\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> ( <span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> parent2) &#123;</span><br><span class=\"line\">\tStudent.prototype[k] = parent2[k];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Student(<span class=\"string\">\"张三\"</span>, <span class=\"number\">50</span>);</span><br><span class=\"line\">p.sayHello();</span><br></pre></td></tr></table></figure>\n<h3 id=\"instanceof\"><a href=\"#instanceof\" class=\"headerlink\" title=\"instanceof\"></a>instanceof</h3><p><strong>instanceof运算符用来判断一个构造函数的prototype属性所指向的对象是否存在另外一个要检测对象的原型链上</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c; <span class=\"comment\">// function &#123;name: \"demo\"&#125;</span></span><br><span class=\"line\">c <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>; <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>为什么会是true呢？？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   c; <span class=\"comment\">// function &#123;name: \"demo\"&#125;</span></span><br><span class=\"line\">c <span class=\"keyword\">instanceof</span> func; <span class=\"comment\">// true</span></span><br><span class=\"line\">c.__proto__ === func.prototype; <span class=\"comment\">// true</span></span><br><span class=\"line\">func.prototype.__proto__ === <span class=\"built_in\">Object</span>.prototype; <span class=\"comment\">// true</span></span><br><span class=\"line\">c <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>; <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p><strong>所以，instanceof不能用来判断对象的类型！！！</strong>  </p>\n<p>那么我们用什么来判断对象的类型呢？</p>\n<h3 id=\"constructor-NaN\"><a href=\"#constructor-NaN\" class=\"headerlink\" title=\"constructor\"></a>constructor</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   c.__proto__.constructor===func <span class=\"comment\">// true</span></span><br><span class=\"line\">c.__proto__.constructor===<span class=\"built_in\">Object</span> <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"new-运算符\"><a href=\"#new-运算符\" class=\"headerlink\" title=\"new 运算符\"></a>new 运算符</h2><p>当我们用new运算符new一个构造函数产生一个实例时，比如说： var obj = new Func 时，其背后的步骤是这样的：</p>\n<ol>\n<li>创建一个继承自 Func.prototype 的新对象；</li>\n<li>执行构造函数 Func ，执行的时候，相应的传参会被传入，同时上下文(this)会被指定为第一步创建的新实例；</li>\n<li>如果构造函数返回了一个“对象”,那么这个对象会取代步骤1中new出来的实例被返回。如果构造函数没有返回对象,那么new出来的结果为步骤1创建的对象。</li>\n</ol>\n<p><strong>注意：new Func 等同于new Func()，只能用在不传递任何参数的情况。</strong></p>\n<h3 id=\"new的模拟实现\"><a href=\"#new的模拟实现\" class=\"headerlink\" title=\"new的模拟实现\"></a>new的模拟实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//new运算符原理实现</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> new1 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fun</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> newObj = <span class=\"built_in\">Object</span>.create(fun.prototype);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> returnObj = fun.call(newObj);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> returnObj === <span class=\"string\">'object'</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> returnObj</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> newObj</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中  var newObj  = Object.create(fun.prototype)  的意思是：创建一个新对象newObj，并让<code>newObj.__proto__</code>指向 fun，即  <code>newObj.__proto__=== fun</code>返回true。<br><strong>方法的使用</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> strObj = new1(<span class=\"built_in\">String</span>);</span><br><span class=\"line\">alert(strObj <span class=\"keyword\">instanceof</span> <span class=\"built_in\">String</span>); <span class=\"comment\">//true</span></span><br><span class=\"line\">alert(strObj.__proto__.constructor === <span class=\"built_in\">String</span>); <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<p><strong>可以看到，new1函数的运行效果和new运算符是一样的。我们继续给String的原型上添加一个方法，看看new1函数得到的strObj能否继承到这个方法：</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span>.prototype.defineByN = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">\"我是自定义方法\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">strObj.defineByN();  <span class=\"comment\">//弹出“我是自定义方法”</span></span><br></pre></td></tr></table></figure>\n<p>可以看到new1函数得到的strObj继承了到这个方法。</p>\n<h2 id=\"问题：为什么Object-create创建的对象和其他几种不一样呢？\"><a href=\"#问题：为什么Object-create创建的对象和其他几种不一样呢？\" class=\"headerlink\" title=\"问题：为什么Object.create创建的对象和其他几种不一样呢？\"></a>问题：为什么Object.create创建的对象和其他几种不一样呢？</h2><p>因为使用原型链进行的创造对象。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d.__proto__&#x3D;&#x3D;&#x3D;demo; &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"原型链的介绍\"><a href=\"#原型链的介绍\" class=\"headerlink\" title=\"原型链的介绍\"></a>原型链的介绍</h2><h3 id=\"什么是原型？\"><a href=\"#什么是原型？\" class=\"headerlink\" title=\"什么是原型？\"></a>什么是原型？</h3><p>js中，任何对象都有一个原型对象，这个原型对象由对象的内置属性_proto_指向它的构造函数的prototype指向的对象，即任何对象都是由一个构造函数创建的，但是不是每一个对象都有prototype，只有方法才有prototype。</p>\n<h3 id=\"什么是原型链？\"><a href=\"#什么是原型链？\" class=\"headerlink\" title=\"什么是原型链？\"></a>什么是原型链？</h3><p>  原型链的核心就是依赖对象的_proto_的指向，当自身不存在的属性时，就一层层的扒出创建对象的构造函数，直至到Object时，就没有_proto_指向了。</p>","more":"<h2 id=\"创建对象的方法\"><a href=\"#创建对象的方法\" class=\"headerlink\" title=\"创建对象的方法\"></a>创建对象的方法</h2><ol>\n<li>字面量<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123; <span class=\"attr\">name</span>: <span class=\"string\">'demo'</span> &#125;;</span><br></pre></td></tr></table></figure></li>\n<li>字面量（使用了Object的构造方法）<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>(&#123; <span class=\"attr\">name</span>: <span class=\"string\">'demo'</span> &#125;);</span><br></pre></td></tr></table></figure></li>\n<li>构造函数<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> func = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'demo'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"keyword\">new</span> func();</span><br></pre></td></tr></table></figure></li>\n<li>Object.create<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> demo = &#123; <span class=\"attr\">name</span>: <span class=\"string\">'demo'</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> d = <span class=\"built_in\">Object</span>.create(demo);</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"创建对象的过程\"><a href=\"#创建对象的过程\" class=\"headerlink\" title=\"创建对象的过程\"></a>创建对象的过程</h3><p><strong>首先，当我们声明一个function关键字的方法时，会为这个方法添加一个prototype属性，指向默认的原型对象，并且此prototype的constructor属性也指向方法对象。此二个属性会在创建对象时被对象的属性引用。</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Hello</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(Hello.prototype); <span class=\"comment\">// Object &#123;&#125; -- &gt; 内部的constructor 指向Hello方法</span></span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(Hello.prototype.constructor); <span class=\"comment\">// function Hello()&#123;&#125;</span></span><br></pre></td></tr></table></figure>\n<p><strong>我们如果用Hello创建一个对象h，看这个对象有什么属性。</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"built_in\">console</span>.log(h.constructor); <span class=\"comment\">// function Hello()&#123;&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.getPrototypeOf(h)==Hello.prototype); <span class=\"comment\">// true  备注：getPrototypeOf是获取_proto_</span></span><br></pre></td></tr></table></figure>\n<p> 我们惊喜的发现，new出来的对象，它的constructor指向了方法对象，它的_proto_和prototype相等。</p>\n<p>  即new一个对象，它的_proto_属性指向了方法的prototype属性，并且constructor指向了prototype的constructor属性。</p>\n<h3 id=\"创建对象的过程-1\"><a href=\"#创建对象的过程-1\" class=\"headerlink\" title=\"创建对象的过程\"></a>创建对象的过程</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Hehe</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> h = <span class=\"keyword\">new</span> Hehe(<span class=\"string\">\"笑你妹\"</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//伪代码:</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">newObj</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">\t\t <span class=\"keyword\">var</span> obj = &#123;&#125;;</span><br><span class=\"line\">\t\t obj.__proto__ = Hehe.prototype; </span><br><span class=\"line\">\t\t obj.constructor = Hehe.prototype.constructor;</span><br><span class=\"line\">\t\t <span class=\"keyword\">var</span> result = Hehe.call(obj, name);</span><br><span class=\"line\">\t\t <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> result===<span class=\"string\">'object'</span>&amp;&amp; result!=<span class=\"literal\">null</span> ? result : obj;  <span class=\"comment\">//当无返回对象或默认时返回obj。</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> hh = newObj(<span class=\"string\">\"笑你妹\"</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(hh);</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(h);</span><br><span class=\"line\">\t<span class=\"comment\">//虽然hh!=h,但是可以看到这个hh就和h的结构一样了。</span></span><br></pre></td></tr></table></figure>\n<p><strong>过程：先创建一个空对象，设置一个_proto_指向方法的原型，设置constructor，用新对象做this指向方法，返回新对象。</strong></p>\n<h2 id=\"原型以及原型链关系\"><a href=\"#原型以及原型链关系\" class=\"headerlink\" title=\"原型以及原型链关系\"></a>原型以及原型链关系</h2><p><img src=\"/2019/07/24/%E5%8E%9F%E5%9E%8B%E9%93%BE/yuanxing.png\" alt=\"image\"></p>\n<p><img src=\"/2019/07/24/%E5%8E%9F%E5%9E%8B%E9%93%BE/gouzao.png\" alt=\"image\"></p>\n<h3 id=\"原型\"><a href=\"#原型\" class=\"headerlink\" title=\"原型\"></a>原型</h3><blockquote>\n<p>任何对象都有一个原型对象，这个原型对象由对象的内置属性_proto_指向它的构造函数的prototype指向的对象，即任何对象都是由一个构造函数创建的，但是不是每一个对象都有prototype，只有方法才有prototype。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">\t<span class=\"comment\">//方法才有prototype,普通对象无prototype</span></span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(Person.prototype); <span class=\"comment\">// Object&#123;&#125; </span></span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(p.prototype); <span class=\"comment\">// undifined</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//任何对象都是有构造函数的,Person这种方法的构造函数是Function。</span></span><br><span class=\"line\">\t<span class=\"comment\">//备注:constructor很容易被改变，一般不用它，此处只是打印下列对象的构造函数是什么。</span></span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(p.constructor); <span class=\"comment\">//function Person()&#123;&#125;  </span></span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(Person.constructor); <span class=\"comment\">//function Function()&#123;&#125; </span></span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(&#123;&#125;.constructor); <span class=\"comment\">// function Object()&#123;&#125;</span></span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.constructor); <span class=\"comment\">// function Function() &#123;&#125;</span></span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log([].constructor);  <span class=\"comment\">//function Array()&#123;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h3><blockquote>\n<p> 用function声明的都是函数，而如果直接调用的话，那么Person()就是一个普通函数，只有用函数new产生对象时，这个函数才是new出来对象的构造函数。</p>\n</blockquote>\n<h3 id=\"原型链\"><a href=\"#原型链\" class=\"headerlink\" title=\"原型链\"></a>原型链</h3><blockquote>\n<p>原型链的核心就是依赖对象的_proto_的指向，当自身不存在的属性时，就一层层的扒出创建对象的构造函数，直至到Object时，就没有_proto_指向了。</p>\n</blockquote>\n<p>属性搜索原则：</p>\n<ol>\n<li>当访问一个对象的成员的时候，会现在自身找有没有,如果找到直接使用。</li>\n<li>如果没有找到，则去原型链指向的对象的构造函数的prototype中找，找到直接使用，没找到就返回undifined或报错。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">    <span class=\"comment\">//p ---&gt; Person.prototype ---&gt;Object.prototype----&gt;null</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"原型继承\"><a href=\"#原型继承\" class=\"headerlink\" title=\"原型继承\"></a>原型继承</h3></li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//原型继承的基本案例</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//1.直接替换原型对象 </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> parent = &#123;</span><br><span class=\"line\">\tsayHello : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"方式1：替换原型对象\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Person.prototype = parent;</span><br><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"张三\"</span>, <span class=\"number\">50</span>);</span><br><span class=\"line\">p.sayHello();</span><br><span class=\"line\"><span class=\"comment\">//2.混入式原型继承</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\".............混入式原型继承..............\"</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Student</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> parent2 = &#123;</span><br><span class=\"line\">\tsayHello : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"方式2：原型继承之混入式加载成员\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> ( <span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> parent2) &#123;</span><br><span class=\"line\">\tStudent.prototype[k] = parent2[k];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Student(<span class=\"string\">\"张三\"</span>, <span class=\"number\">50</span>);</span><br><span class=\"line\">p.sayHello();</span><br></pre></td></tr></table></figure>\n<h3 id=\"instanceof\"><a href=\"#instanceof\" class=\"headerlink\" title=\"instanceof\"></a>instanceof</h3><p><strong>instanceof运算符用来判断一个构造函数的prototype属性所指向的对象是否存在另外一个要检测对象的原型链上</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c; <span class=\"comment\">// function &#123;name: \"demo\"&#125;</span></span><br><span class=\"line\">c <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>; <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>为什么会是true呢？？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   c; <span class=\"comment\">// function &#123;name: \"demo\"&#125;</span></span><br><span class=\"line\">c <span class=\"keyword\">instanceof</span> func; <span class=\"comment\">// true</span></span><br><span class=\"line\">c.__proto__ === func.prototype; <span class=\"comment\">// true</span></span><br><span class=\"line\">func.prototype.__proto__ === <span class=\"built_in\">Object</span>.prototype; <span class=\"comment\">// true</span></span><br><span class=\"line\">c <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>; <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p><strong>所以，instanceof不能用来判断对象的类型！！！</strong>  </p>\n<p>那么我们用什么来判断对象的类型呢？</p>\n<h3 id=\"constructor-NaN\"><a href=\"#constructor-NaN\" class=\"headerlink\" title=\"constructor\"></a>constructor</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   c.__proto__.constructor===func <span class=\"comment\">// true</span></span><br><span class=\"line\">c.__proto__.constructor===<span class=\"built_in\">Object</span> <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"new-运算符\"><a href=\"#new-运算符\" class=\"headerlink\" title=\"new 运算符\"></a>new 运算符</h2><p>当我们用new运算符new一个构造函数产生一个实例时，比如说： var obj = new Func 时，其背后的步骤是这样的：</p>\n<ol>\n<li>创建一个继承自 Func.prototype 的新对象；</li>\n<li>执行构造函数 Func ，执行的时候，相应的传参会被传入，同时上下文(this)会被指定为第一步创建的新实例；</li>\n<li>如果构造函数返回了一个“对象”,那么这个对象会取代步骤1中new出来的实例被返回。如果构造函数没有返回对象,那么new出来的结果为步骤1创建的对象。</li>\n</ol>\n<p><strong>注意：new Func 等同于new Func()，只能用在不传递任何参数的情况。</strong></p>\n<h3 id=\"new的模拟实现\"><a href=\"#new的模拟实现\" class=\"headerlink\" title=\"new的模拟实现\"></a>new的模拟实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//new运算符原理实现</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> new1 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fun</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> newObj = <span class=\"built_in\">Object</span>.create(fun.prototype);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> returnObj = fun.call(newObj);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> returnObj === <span class=\"string\">'object'</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> returnObj</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> newObj</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中  var newObj  = Object.create(fun.prototype)  的意思是：创建一个新对象newObj，并让<code>newObj.__proto__</code>指向 fun，即  <code>newObj.__proto__=== fun</code>返回true。<br><strong>方法的使用</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> strObj = new1(<span class=\"built_in\">String</span>);</span><br><span class=\"line\">alert(strObj <span class=\"keyword\">instanceof</span> <span class=\"built_in\">String</span>); <span class=\"comment\">//true</span></span><br><span class=\"line\">alert(strObj.__proto__.constructor === <span class=\"built_in\">String</span>); <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<p><strong>可以看到，new1函数的运行效果和new运算符是一样的。我们继续给String的原型上添加一个方法，看看new1函数得到的strObj能否继承到这个方法：</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span>.prototype.defineByN = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">\"我是自定义方法\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">strObj.defineByN();  <span class=\"comment\">//弹出“我是自定义方法”</span></span><br></pre></td></tr></table></figure>\n<p>可以看到new1函数得到的strObj继承了到这个方法。</p>\n<h2 id=\"问题：为什么Object-create创建的对象和其他几种不一样呢？\"><a href=\"#问题：为什么Object-create创建的对象和其他几种不一样呢？\" class=\"headerlink\" title=\"问题：为什么Object.create创建的对象和其他几种不一样呢？\"></a>问题：为什么Object.create创建的对象和其他几种不一样呢？</h2><p>因为使用原型链进行的创造对象。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d.__proto__&#x3D;&#x3D;&#x3D;demo; &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure>"},{"layout":"[post]","title":"实现call","date":"2020-05-21T05:23:36.000Z","_content":"\n\n### call\n\n> call() 方法在使用一个指定的 this 值和若干个指定的参数值的前提下调用某个函数或方法。  \n> 举个栗子：\n <!-- more -->\n```js\nvar foo ={\n  value:1\n}\nfunction bar(){\n  console.log(this.value)\n}\nbar.call(foo);\n```\n\n**需要注意两点：**\n\n*   call 改变了 this 的指向，指向到 foo；\n*   调用了 bar 函数\n\n### 模拟实现第一步\n\n试想当调用 call 的时候，把 foo 对象改造成如下：\n\n```js\nvar foo = {\n    value: 1,\n    bar: function() {\n        console.log(this.value)\n    }\n};\nfoo.bar();\n```\n\n这样我们就实现了 this 指向 foo；  \n但是我们给 foo 添加了一个属性才实现了这个效果，那我们用完可以删除掉这个属性。  \n模拟步骤可分为：\n\n```js\nfoo.fn = bar\n\nfoo.fn()\n\ndelete foo.fn\n```\n\n根据这个思路，我们可以尝试着去写第一版的 call2 函数：\n\n```js\nFunction.Prototype.call2 = function(context){\n  \n  context.fn = this;\n  context.fn();\n  delete context.fn;\n\n}\n\nvar foo = {\n    value: 1\n};\n\nfunction bar() {\n    console.log(this.value);\n}\n\nbar.call2(foo);\n```\n\n这样我们就轻松模拟了 call 指定 this 指向的功能；\n\n### 模拟实现第二步\n\ncall 函数还能给定参数执行函数。  \n举个例子：\n\n```js\nvar foo = {\n    value: 1\n};\n\nfunction bar(name, age) {\n    console.log(name)\n    console.log(age)\n    console.log(this.value);\n}\n\nbar.call(foo, 'Cherry', 18);\n```\n\n注意：传入的参数并不确定，这可咋办？\n\n不急，我们可以从 Arguments 对象中取值，取出第二个到最后一个参数，然后放到一个数组里。\n\n比如这样：\n\n```js\nvar args = [];\nfor(var i = 1, len = arguments.length; i < len; i++) {\n    args.push('arguments[' + i + ']');\n}\n```\n\n不定长的参数问题解决了，我们接着要把这个参数数组放到要执行的函数的参数里面去。\n\n```js\neval('context.fn(' + args +')')\n```\n\n所以我们的第二版克服了两个大问题，代码如下：\n\n```js\nFunction.prototype.call2 = function(context) {\n    context.fn = this;\n    var args = [];\n    for(var i = 1, len = arguments.length; i < len; i++) {\n        args.push('arguments[' + i + ']');\n    }\n    eval('context.fn(' + args +')');\n    delete context.fn;\n}\n\n\nvar foo = {\n    value: 1\n};\n\nfunction bar(name, age) {\n    console.log(name)\n    console.log(age)\n    console.log(this.value);\n}\n\nbar.call2(foo, 'Cherry', 18);\n```\n\n### 模拟实现第三步\n\n模拟代码已经完成 80%，还有两个小点要注意：\n\n**1.this 参数可以传 null，当为 null 的时候，视为指向 window**  \n**2. 函数是可以有返回值的！**  \n解决方法：\n\n```js\nFunction.prototype.call2 = function (context) {\n    var context = context || window;\n    context.fn = this;\n\n    var args = [];\n    for(var i = 1, len = arguments.length; i < len; i++) {\n        args.push('arguments[' + i + ']');\n    }\n\n    var result = eval('context.fn(' + args +')');\n\n    delete context.fn\n    return result;\n}\n\n\nvar value = 2;\n\nvar obj = {\n    value: 1\n}\n\nfunction bar(name, age) {\n    console.log(this.value);\n    return {\n        value: this.value,\n        name: name,\n        age: age\n    }\n}\n\nbar.call(null); \n\nconsole.log(bar.call2(obj, 'Cherry', 18));\n```\n\n到此，我们完成了 call 的模拟实现。\n\n文章非原创，有侵权请告知，文章出处：  \n[https://github.com/mqyqingfeng/Blog/issues/11](https://link.jianshu.com/?t=https://github.com/mqyqingfeng/Blog/issues/11)\n\n","source":"_posts/实现call.md","raw":"---\nlayout: '[post]'\ntitle: 实现call\ndate: 2020-05-21 13:23:36\ntags: javascript\n---\n\n\n### call\n\n> call() 方法在使用一个指定的 this 值和若干个指定的参数值的前提下调用某个函数或方法。  \n> 举个栗子：\n <!-- more -->\n```js\nvar foo ={\n  value:1\n}\nfunction bar(){\n  console.log(this.value)\n}\nbar.call(foo);\n```\n\n**需要注意两点：**\n\n*   call 改变了 this 的指向，指向到 foo；\n*   调用了 bar 函数\n\n### 模拟实现第一步\n\n试想当调用 call 的时候，把 foo 对象改造成如下：\n\n```js\nvar foo = {\n    value: 1,\n    bar: function() {\n        console.log(this.value)\n    }\n};\nfoo.bar();\n```\n\n这样我们就实现了 this 指向 foo；  \n但是我们给 foo 添加了一个属性才实现了这个效果，那我们用完可以删除掉这个属性。  \n模拟步骤可分为：\n\n```js\nfoo.fn = bar\n\nfoo.fn()\n\ndelete foo.fn\n```\n\n根据这个思路，我们可以尝试着去写第一版的 call2 函数：\n\n```js\nFunction.Prototype.call2 = function(context){\n  \n  context.fn = this;\n  context.fn();\n  delete context.fn;\n\n}\n\nvar foo = {\n    value: 1\n};\n\nfunction bar() {\n    console.log(this.value);\n}\n\nbar.call2(foo);\n```\n\n这样我们就轻松模拟了 call 指定 this 指向的功能；\n\n### 模拟实现第二步\n\ncall 函数还能给定参数执行函数。  \n举个例子：\n\n```js\nvar foo = {\n    value: 1\n};\n\nfunction bar(name, age) {\n    console.log(name)\n    console.log(age)\n    console.log(this.value);\n}\n\nbar.call(foo, 'Cherry', 18);\n```\n\n注意：传入的参数并不确定，这可咋办？\n\n不急，我们可以从 Arguments 对象中取值，取出第二个到最后一个参数，然后放到一个数组里。\n\n比如这样：\n\n```js\nvar args = [];\nfor(var i = 1, len = arguments.length; i < len; i++) {\n    args.push('arguments[' + i + ']');\n}\n```\n\n不定长的参数问题解决了，我们接着要把这个参数数组放到要执行的函数的参数里面去。\n\n```js\neval('context.fn(' + args +')')\n```\n\n所以我们的第二版克服了两个大问题，代码如下：\n\n```js\nFunction.prototype.call2 = function(context) {\n    context.fn = this;\n    var args = [];\n    for(var i = 1, len = arguments.length; i < len; i++) {\n        args.push('arguments[' + i + ']');\n    }\n    eval('context.fn(' + args +')');\n    delete context.fn;\n}\n\n\nvar foo = {\n    value: 1\n};\n\nfunction bar(name, age) {\n    console.log(name)\n    console.log(age)\n    console.log(this.value);\n}\n\nbar.call2(foo, 'Cherry', 18);\n```\n\n### 模拟实现第三步\n\n模拟代码已经完成 80%，还有两个小点要注意：\n\n**1.this 参数可以传 null，当为 null 的时候，视为指向 window**  \n**2. 函数是可以有返回值的！**  \n解决方法：\n\n```js\nFunction.prototype.call2 = function (context) {\n    var context = context || window;\n    context.fn = this;\n\n    var args = [];\n    for(var i = 1, len = arguments.length; i < len; i++) {\n        args.push('arguments[' + i + ']');\n    }\n\n    var result = eval('context.fn(' + args +')');\n\n    delete context.fn\n    return result;\n}\n\n\nvar value = 2;\n\nvar obj = {\n    value: 1\n}\n\nfunction bar(name, age) {\n    console.log(this.value);\n    return {\n        value: this.value,\n        name: name,\n        age: age\n    }\n}\n\nbar.call(null); \n\nconsole.log(bar.call2(obj, 'Cherry', 18));\n```\n\n到此，我们完成了 call 的模拟实现。\n\n文章非原创，有侵权请告知，文章出处：  \n[https://github.com/mqyqingfeng/Blog/issues/11](https://link.jianshu.com/?t=https://github.com/mqyqingfeng/Blog/issues/11)\n\n","slug":"实现call","published":1,"updated":"2020-06-03T07:49:18.000Z","comments":1,"photos":[],"link":"","_id":"ckbftlm7g002m7w2p1qfd2eaf","content":"<h3 id=\"call\"><a href=\"#call\" class=\"headerlink\" title=\"call\"></a>call</h3><blockquote>\n<p>call() 方法在使用一个指定的 this 值和若干个指定的参数值的前提下调用某个函数或方法。<br>举个栗子：<br> <a id=\"more\"></a></p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo =&#123;</span><br><span class=\"line\">  value:<span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.value)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">bar.call(foo);</span><br></pre></td></tr></table></figure>\n\n<p><strong>需要注意两点：</strong></p>\n<ul>\n<li>call 改变了 this 的指向，指向到 foo；</li>\n<li>调用了 bar 函数</li>\n</ul>\n<h3 id=\"模拟实现第一步\"><a href=\"#模拟实现第一步\" class=\"headerlink\" title=\"模拟实现第一步\"></a>模拟实现第一步</h3><p>试想当调用 call 的时候，把 foo 对象改造成如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = &#123;</span><br><span class=\"line\">    value: <span class=\"number\">1</span>,</span><br><span class=\"line\">    bar: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.value)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">foo.bar();</span><br></pre></td></tr></table></figure>\n\n<p>这样我们就实现了 this 指向 foo；<br>但是我们给 foo 添加了一个属性才实现了这个效果，那我们用完可以删除掉这个属性。<br>模拟步骤可分为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo.fn = bar</span><br><span class=\"line\"></span><br><span class=\"line\">foo.fn()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">delete</span> foo.fn</span><br></pre></td></tr></table></figure>\n\n<p>根据这个思路，我们可以尝试着去写第一版的 call2 函数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.Prototype.call2 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context</span>)</span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  context.fn = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  context.fn();</span><br><span class=\"line\">  <span class=\"keyword\">delete</span> context.fn;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = &#123;</span><br><span class=\"line\">    value: <span class=\"number\">1</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">bar.call2(foo);</span><br></pre></td></tr></table></figure>\n\n<p>这样我们就轻松模拟了 call 指定 this 指向的功能；</p>\n<h3 id=\"模拟实现第二步\"><a href=\"#模拟实现第二步\" class=\"headerlink\" title=\"模拟实现第二步\"></a>模拟实现第二步</h3><p>call 函数还能给定参数执行函数。<br>举个例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = &#123;</span><br><span class=\"line\">    value: <span class=\"number\">1</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(name)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(age)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">bar.call(foo, <span class=\"string\">'Cherry'</span>, <span class=\"number\">18</span>);</span><br></pre></td></tr></table></figure>\n\n<p>注意：传入的参数并不确定，这可咋办？</p>\n<p>不急，我们可以从 Arguments 对象中取值，取出第二个到最后一个参数，然后放到一个数组里。</p>\n<p>比如这样：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> args = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>, len = <span class=\"built_in\">arguments</span>.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">    args.push(<span class=\"string\">'arguments['</span> + i + <span class=\"string\">']'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>不定长的参数问题解决了，我们接着要把这个参数数组放到要执行的函数的参数里面去。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">eval</span>(<span class=\"string\">'context.fn('</span> + args +<span class=\"string\">')'</span>)</span><br></pre></td></tr></table></figure>\n\n<p>所以我们的第二版克服了两个大问题，代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.call2 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context</span>) </span>&#123;</span><br><span class=\"line\">    context.fn = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> args = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>, len = <span class=\"built_in\">arguments</span>.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">        args.push(<span class=\"string\">'arguments['</span> + i + <span class=\"string\">']'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">eval</span>(<span class=\"string\">'context.fn('</span> + args +<span class=\"string\">')'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> context.fn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = &#123;</span><br><span class=\"line\">    value: <span class=\"number\">1</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(name)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(age)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">bar.call2(foo, <span class=\"string\">'Cherry'</span>, <span class=\"number\">18</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"模拟实现第三步\"><a href=\"#模拟实现第三步\" class=\"headerlink\" title=\"模拟实现第三步\"></a>模拟实现第三步</h3><p>模拟代码已经完成 80%，还有两个小点要注意：</p>\n<p><strong>1.this 参数可以传 null，当为 null 的时候，视为指向 window</strong><br><strong>2. 函数是可以有返回值的！</strong><br>解决方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.call2 = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">context</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> context = context || <span class=\"built_in\">window</span>;</span><br><span class=\"line\">    context.fn = <span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> args = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>, len = <span class=\"built_in\">arguments</span>.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">        args.push(<span class=\"string\">'arguments['</span> + i + <span class=\"string\">']'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = <span class=\"built_in\">eval</span>(<span class=\"string\">'context.fn('</span> + args +<span class=\"string\">')'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">delete</span> context.fn</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> value = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    value: <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        value: <span class=\"keyword\">this</span>.value,</span><br><span class=\"line\">        name: name,</span><br><span class=\"line\">        age: age</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">bar.call(<span class=\"literal\">null</span>); </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bar.call2(obj, <span class=\"string\">'Cherry'</span>, <span class=\"number\">18</span>));</span><br></pre></td></tr></table></figure>\n\n<p>到此，我们完成了 call 的模拟实现。</p>\n<p>文章非原创，有侵权请告知，文章出处：<br><a href=\"https://link.jianshu.com/?t=https://github.com/mqyqingfeng/Blog/issues/11\" target=\"_blank\" rel=\"noopener\">https://github.com/mqyqingfeng/Blog/issues/11</a></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"call\"><a href=\"#call\" class=\"headerlink\" title=\"call\"></a>call</h3><blockquote>\n<p>call() 方法在使用一个指定的 this 值和若干个指定的参数值的前提下调用某个函数或方法。<br>举个栗子：<br></p></blockquote>","more":"<p></p>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo =&#123;</span><br><span class=\"line\">  value:<span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.value)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">bar.call(foo);</span><br></pre></td></tr></table></figure>\n\n<p><strong>需要注意两点：</strong></p>\n<ul>\n<li>call 改变了 this 的指向，指向到 foo；</li>\n<li>调用了 bar 函数</li>\n</ul>\n<h3 id=\"模拟实现第一步\"><a href=\"#模拟实现第一步\" class=\"headerlink\" title=\"模拟实现第一步\"></a>模拟实现第一步</h3><p>试想当调用 call 的时候，把 foo 对象改造成如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = &#123;</span><br><span class=\"line\">    value: <span class=\"number\">1</span>,</span><br><span class=\"line\">    bar: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.value)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">foo.bar();</span><br></pre></td></tr></table></figure>\n\n<p>这样我们就实现了 this 指向 foo；<br>但是我们给 foo 添加了一个属性才实现了这个效果，那我们用完可以删除掉这个属性。<br>模拟步骤可分为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo.fn = bar</span><br><span class=\"line\"></span><br><span class=\"line\">foo.fn()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">delete</span> foo.fn</span><br></pre></td></tr></table></figure>\n\n<p>根据这个思路，我们可以尝试着去写第一版的 call2 函数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.Prototype.call2 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context</span>)</span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  context.fn = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  context.fn();</span><br><span class=\"line\">  <span class=\"keyword\">delete</span> context.fn;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = &#123;</span><br><span class=\"line\">    value: <span class=\"number\">1</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">bar.call2(foo);</span><br></pre></td></tr></table></figure>\n\n<p>这样我们就轻松模拟了 call 指定 this 指向的功能；</p>\n<h3 id=\"模拟实现第二步\"><a href=\"#模拟实现第二步\" class=\"headerlink\" title=\"模拟实现第二步\"></a>模拟实现第二步</h3><p>call 函数还能给定参数执行函数。<br>举个例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = &#123;</span><br><span class=\"line\">    value: <span class=\"number\">1</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(name)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(age)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">bar.call(foo, <span class=\"string\">'Cherry'</span>, <span class=\"number\">18</span>);</span><br></pre></td></tr></table></figure>\n\n<p>注意：传入的参数并不确定，这可咋办？</p>\n<p>不急，我们可以从 Arguments 对象中取值，取出第二个到最后一个参数，然后放到一个数组里。</p>\n<p>比如这样：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> args = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>, len = <span class=\"built_in\">arguments</span>.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">    args.push(<span class=\"string\">'arguments['</span> + i + <span class=\"string\">']'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>不定长的参数问题解决了，我们接着要把这个参数数组放到要执行的函数的参数里面去。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">eval</span>(<span class=\"string\">'context.fn('</span> + args +<span class=\"string\">')'</span>)</span><br></pre></td></tr></table></figure>\n\n<p>所以我们的第二版克服了两个大问题，代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.call2 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context</span>) </span>&#123;</span><br><span class=\"line\">    context.fn = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> args = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>, len = <span class=\"built_in\">arguments</span>.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">        args.push(<span class=\"string\">'arguments['</span> + i + <span class=\"string\">']'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">eval</span>(<span class=\"string\">'context.fn('</span> + args +<span class=\"string\">')'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> context.fn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = &#123;</span><br><span class=\"line\">    value: <span class=\"number\">1</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(name)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(age)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">bar.call2(foo, <span class=\"string\">'Cherry'</span>, <span class=\"number\">18</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"模拟实现第三步\"><a href=\"#模拟实现第三步\" class=\"headerlink\" title=\"模拟实现第三步\"></a>模拟实现第三步</h3><p>模拟代码已经完成 80%，还有两个小点要注意：</p>\n<p><strong>1.this 参数可以传 null，当为 null 的时候，视为指向 window</strong><br><strong>2. 函数是可以有返回值的！</strong><br>解决方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.call2 = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">context</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> context = context || <span class=\"built_in\">window</span>;</span><br><span class=\"line\">    context.fn = <span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> args = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>, len = <span class=\"built_in\">arguments</span>.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">        args.push(<span class=\"string\">'arguments['</span> + i + <span class=\"string\">']'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = <span class=\"built_in\">eval</span>(<span class=\"string\">'context.fn('</span> + args +<span class=\"string\">')'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">delete</span> context.fn</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> value = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    value: <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        value: <span class=\"keyword\">this</span>.value,</span><br><span class=\"line\">        name: name,</span><br><span class=\"line\">        age: age</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">bar.call(<span class=\"literal\">null</span>); </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bar.call2(obj, <span class=\"string\">'Cherry'</span>, <span class=\"number\">18</span>));</span><br></pre></td></tr></table></figure>\n\n<p>到此，我们完成了 call 的模拟实现。</p>\n<p>文章非原创，有侵权请告知，文章出处：<br><a href=\"https://link.jianshu.com/?t=https://github.com/mqyqingfeng/Blog/issues/11\" target=\"_blank\" rel=\"noopener\">https://github.com/mqyqingfeng/Blog/issues/11</a></p>"},{"layout":"[post]","title":"如何实现一个深拷贝","date":"2020-05-14T07:20:41.000Z","_content":"\n\n引言\n--\n\n上篇文章详细介绍了浅拷贝 `Object.assign`，并对其进行了模拟实现，在实现的过程中，介绍了很多基础知识。今天这篇文章我们来看看一道必会面试题，即如何实现一个深拷贝。本文会详细介绍对象、数组、循环引用、引用丢失、Symbol 和递归爆栈等情况下的深拷贝实践，欢迎阅读。\n <!-- more -->\n第一步：简单实现\n--------\n\n其实深拷贝可以拆分成 2 步，浅拷贝 + 递归，浅拷贝时判断属性值是否是对象，如果是对象就进行递归操作，两个一结合就实现了深拷贝。\n\n根据上篇文章内容，我们可以写出简单浅拷贝代码如下。\n\n```js\n// 木易杨\nfunction cloneShallow(source) {\n    var target = {};\n    for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n            target[key] = source[key];\n        }\n    }\n    return target;\n}\n\n// 测试用例\nvar a = {\n    name: \"muyiy\",\n    book: {\n        title: \"You Don't Know JS\",\n        price: \"45\"\n    },\n    a1: undefined,\n    a2: null,\n    a3: 123\n}\nvar b = cloneShallow(a);\n\na.name = \"高级前端进阶\";\na.book.price = \"55\";\n\nconsole.log(b);\n// { \n//   name: 'muyiy', \n//   book: { title: 'You Don\\'t Know JS', price: '55' },\n//   a1: undefined,\n//   a2: null,\n//   a3: 123\n// }\n```\n\n上面代码是浅拷贝实现，只要稍微改动下，加上是否是对象的判断并在相应的位置使用递归就可以实现简单深拷贝。\n\n```js\n// 木易杨\nfunction cloneDeep1(source) {\n    var target = {};\n    for(var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n            if (typeof source[key] === 'object') {\n                target[key] = cloneDeep1(source[key]); // 注意这里\n            } else {\n                target[key] = source[key];\n            }\n        }\n    }\n    return target;\n}\n\n// 使用上面测试用例测试一下\nvar b = cloneDeep1(a);\nconsole.log(b);\n// { \n//   name: 'muyiy', \n//   book: { title: 'You Don\\'t Know JS', price: '45' }, \n//   a1: undefined,\n//   a2: {},\n//   a3: 123\n// }\n```\n\n一个简单的深拷贝就完成了，但是这个实现还存在很多问题。\n\n*   1、没有对传入参数进行校验，传入 `null` 时应该返回 `null` 而不是 `{}`\n    \n*   2、对于对象的判断逻辑不严谨，因为 `typeof null === 'object'`\n    \n*   3、没有考虑数组的兼容\n    \n\n第二步：拷贝数组\n--------\n\n我们来看下对于对象的判断，之前在【进阶 3-3 期】有过介绍，判断方案如下。\n\n```js\n// 木易杨\nfunction isObject(obj) {\n    return Object.prototype.toString.call(obj) === '[object Object]';\n}\n```\n\n但是用在这里并不合适，因为我们要保留数组这种情况，所以这里使用 `typeof` 来处理。\n\n```js\n// 木易杨\ntypeof null //\"object\"\ntypeof {} //\"object\"\ntypeof [] //\"object\"\ntypeof function foo(){} //\"function\" (特殊情况)\n```\n\n改动过后的 isObject 判断逻辑如下。\n\n```js\n// 木易杨\nfunction isObject(obj) {\n\treturn typeof obj === 'object' && obj != null;\n}\n```\n\n所以兼容数组的写法如下。\n\n```js\n// 木易杨\nfunction cloneDeep2(source) {\n\n    if (!isObject(source)) return source; // 非对象返回自身\n      \n    var target = Array.isArray(source) ? [] : {};\n    for(var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n            if (isObject(source[key])) {\n                target[key] = cloneDeep2(source[key]); // 注意这里\n            } else {\n                target[key] = source[key];\n            }\n        }\n    }\n    return target;\n}\n\n// 使用上面测试用例测试一下\nvar b = cloneDeep2(a);\nconsole.log(b);\n// { \n//   name: 'muyiy', \n//   book: { title: 'You Don\\'t Know JS', price: '45' },\n//   a1: undefined,\n//   a2: null,\n//   a3: 123\n// }\n```\n\n第三步：循环引用\n--------\n\n我们知道 `JSON` 无法深拷贝循环引用，遇到这种情况会抛出异常。\n\n```js\n// 木易杨\n// 此处 a 是文章开始的测试用例\na.circleRef = a;\n\nJSON.parse(JSON.stringify(a));\n// TypeError: Converting circular structure to JSON\n```\n\n### 1、使用哈希表\n\n解决方案很简单，其实就是循环检测，我们设置一个数组或者哈希表存储已拷贝过的对象，当检测到当前对象已存在于哈希表中时，取出该值并返回即可。\n\n```js\n// 木易杨\nfunction cloneDeep3(source, hash = new WeakMap()) {\n\n    if (!isObject(source)) return source; \n    if (hash.has(source)) return hash.get(source); // 新增代码，查哈希表\n      \n    var target = Array.isArray(source) ? [] : {};\n    hash.set(source, target); // 新增代码，哈希表设值\n    \n    for(var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n            if (isObject(source[key])) {\n                target[key] = cloneDeep3(source[key], hash); // 新增代码，传入哈希表\n            } else {\n                target[key] = source[key];\n            }\n        }\n    }\n    return target;\n}\n```\n\n测试一下，看看效果如何。\n\n```js\n// 木易杨\n// 此处 a 是文章开始的测试用例\na.circleRef = a;\n\nvar b = cloneDeep3(a);\nconsole.log(b);\n// {\n// \tname: \"muyiy\",\n// \ta1: undefined,\n//\ta2: null,\n// \ta3: 123,\n// \tbook: {title: \"You Don't Know JS\", price: \"45\"},\n// \tcircleRef: {name: \"muyiy\", book: {…}, a1: undefined, a2: null, a3: 123, …}\n// }\n```\n\n完美！\n\n### 2、使用数组\n\n这里使用了 `ES6` 中的 `WeakMap` 来处理，那在 `ES5` 下应该如何处理呢？\n\n也很简单，使用数组来处理就好啦，代码如下。\n\n```js\n// 木易杨\nfunction cloneDeep3(source, uniqueList) {\n\n    if (!isObject(source)) return source; \n    if (!uniqueList) uniqueList = []; // 新增代码，初始化数组\n      \n    var target = Array.isArray(source) ? [] : {};\n    \n    // ============= 新增代码\n    // 数据已经存在，返回保存的数据\n    var uniqueData = find(uniqueList, source);\n    if (uniqueData) {\n        return uniqueData.target;\n    };\n        \n    // 数据不存在，保存源数据，以及对应的引用\n    uniqueList.push({\n        source: source,\n        target: target\n    });\n    // =============\n\n    for(var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n            if (isObject(source[key])) {\n                target[key] = cloneDeep3(source[key], uniqueList); // 新增代码，传入数组\n            } else {\n                target[key] = source[key];\n            }\n        }\n    }\n    return target;\n}\n\n// 新增方法，用于查找\nfunction find(arr, item) {\n    for(var i = 0; i < arr.length; i++) {\n        if (arr[i].source === item) {\n            return arr[i];\n        }\n    }\n    return null;\n}\n\n// 用上面测试用例已测试通过\n```\n\n现在已经很完美的解决了循环引用这种情况，那其实还是一种情况是引用丢失，我们看下面的例子。\n\n```js\n// 木易杨\nvar obj1 = {};\nvar obj2 = {a: obj1, b: obj1};\n\nobj2.a === obj2.b; \n// true\n\nvar obj3 = cloneDeep2(obj2);\nobj3.a === obj3.b; \n// false\n```\n\n引用丢失在某些情况下是有问题的，比如上面的对象 obj2，obj2 的键值 a 和 b 同时引用了同一个对象 obj1，使用 cloneDeep2 进行深拷贝后就丢失了引用关系变成了两个不同的对象，那如何处理呢。\n\n其实你有没有发现，我们的 cloneDeep3 已经解决了这个问题，因为只要存储已拷贝过的对象就可以了。\n\n```\n// 木易杨\nvar obj3 = cloneDeep3(obj2);\nobj3.a === obj3.b; \n// true\n```\n\n完美！\n\n第四步：拷贝 `Symbol`\n---------------\n\n这个时候可能要搞事情了，那我们能不能拷贝 Symol 类型呢？\n\n当然可以，不过 `Symbol` 在 `ES6` 下才有，我们需要一些方法来检测出 `Symble` 类型。\n\n方法一：`Object.getOwnPropertySymbols(...)`\n\n方法二：`Reflect.ownKeys(...)`\n\n**对于方法一**可以查找一个给定对象的符号属性时返回一个 `?symbol` 类型的数组。注意，每个初始化的对象都是没有自己的 `symbol` 属性的，因此这个数组可能为空，除非你已经在对象上设置了 `symbol` 属性。（来自 MDN）\n\n```js\nvar obj = {};\nvar a = Symbol(\"a\"); // 创建新的symbol类型\nvar b = Symbol.for(\"b\"); // 从全局的symbol注册?表设置和取得symbol\n\nobj[a] = \"localSymbol\";\nobj[b] = \"globalSymbol\";\n\nvar objectSymbols = Object.getOwnPropertySymbols(obj);\n\nconsole.log(objectSymbols.length); // 2\nconsole.log(objectSymbols)         // [Symbol(a), Symbol(b)]\nconsole.log(objectSymbols[0])      // Symbol(a)\n```\n\n**对于方法二**返回一个由目标对象**自身**的属性键组成的数组。它的返回值等同于`Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target))`。(来自 MDN)\n\n```\nReflect.ownKeys({z: 3, y: 2, x: 1}); // [ \"z\", \"y\", \"x\" ]\nReflect.ownKeys([]); // [\"length\"]\n\nvar sym = Symbol.for(\"comet\");\nvar sym2 = Symbol.for(\"meteor\");\nvar obj = {[sym]: 0, \"str\": 0, \"773\": 0, \"0\": 0,\n           [sym2]: 0, \"-1\": 0, \"8\": 0, \"second str\": 0};\nReflect.ownKeys(obj);\n// [ \"0\", \"8\", \"773\", \"str\", \"-1\", \"second str\", Symbol(comet), Symbol(meteor) ]\n// 注意顺序\n// Indexes in numeric order, \n// strings in insertion order, \n// symbols in insertion order\n```\n\n### 方法一\n\n思路就是先查找有没有 `Symbol` 属性，如果查找到则先遍历处理 `Symbol` 情况，然后再处理正常情况，多出来的逻辑就是下面的新增代码。\n\n```js\n// 木易杨\nfunction cloneDeep4(source, hash = new WeakMap()) {\n\n    if (!isObject(source)) return source; \n    if (hash.has(source)) return hash.get(source); \n      \n    let target = Array.isArray(source) ? [] : {};\n    hash.set(source, target);\n    \n    // ============= 新增代码\n    let symKeys = Object.getOwnPropertySymbols(source); // 查找\n    if (symKeys.length) { // 查找成功\t\n        symKeys.forEach(symKey => {\n            if (isObject(source[symKey])) {\n                target[symKey] = cloneDeep4(source[symKey], hash); \n            } else {\n                target[symKey] = source[symKey];\n            }    \n        });\n    }\n    // =============\n    \n    for(let key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n            if (isObject(source[key])) {\n                target[key] = cloneDeep4(source[key], hash); \n            } else {\n                target[key] = source[key];\n            }\n        }\n    }\n    return target;\n}\n```\n\n测试下效果\n\n```js\n// 木易杨\n// 此处 a 是文章开始的测试用例\nvar sym1 = Symbol(\"a\"); // 创建新的symbol类型\nvar sym2 = Symbol.for(\"b\"); // 从全局的symbol注册?表设置和取得symbol\n\na[sym1] = \"localSymbol\";\na[sym2] = \"globalSymbol\";\n\nvar b = cloneDeep4(a);\nconsole.log(b);\n// {\n// \tname: \"muyiy\",\n// \ta1: undefined,\n//\ta2: null,\n// \ta3: 123,\n// \tbook: {title: \"You Don't Know JS\", price: \"45\"},\n// \tcircleRef: {name: \"muyiy\", book: {…}, a1: undefined, a2: null, a3: 123, …},\n//  [Symbol(a)]: 'localSymbol',\n//  [Symbol(b)]: 'globalSymbol'\n// }\n```\n\n完美！\n\n### 方法二\n\n```js\n// 木易杨\nfunction cloneDeep4(source, hash = new WeakMap()) {\n\n    if (!isObject(source)) return source; \n    if (hash.has(source)) return hash.get(source); \n      \n    let target = Array.isArray(source) ? [] : {};\n    hash.set(source, target);\n    \n  \tReflect.ownKeys(source).forEach(key => { // 改动\n        if (isObject(source[key])) {\n            target[key] = cloneDeep4(source[key], hash); \n        } else {\n            target[key] = source[key];\n        }  \n  \t});\n    return target;\n}\n\n// 测试已通过\n```\n\n这里使用了 `Reflect.ownKeys()` 获取所有的键值，同时包括 `Symbol`，对 source 遍历赋值即可。\n\n写到这里已经差不多了，我们再延伸下，对于 `target` 换一种写法，改动如下。\n\n```js\n// 木易杨\nfunction cloneDeep4(source, hash = new WeakMap()) {\n\n    if (!isObject(source)) return source; \n    if (hash.has(source)) return hash.get(source); \n      \n    let target = Array.isArray(source) ? [...source] : { ...source }; // 改动 1\n    hash.set(source, target);\n    \n  \tReflect.ownKeys(target).forEach(key => { // 改动 2\n        if (isObject(source[key])) {\n            target[key] = cloneDeep4(source[key], hash); \n        } else {\n            target[key] = source[key];\n        }  \n  \t});\n    return target;\n}\n\n// 测试已通过\n```\n\n在改动 1 中，返回一个新数组或者新对象，获取到源对象之后就可以如改动 2 所示传入 target 遍历赋值即可。\n\n`Reflect.ownKeys()` 这种方式的问题在于不能深拷贝原型链上的数据，因为返回的是目标对象**自身**的属性键组成的数组。如果想深拷贝原型链上的数据怎么办，那用 `for..in` 就可以了。\n\n我们再介绍下两个知识点，分别是**构造字面量数组时使用展开语法**和**构造字面量对象时使用展开语法**。（以下代码示例来源于 MDN）\n\n#### 1、展开语法之字面量数组\n\n这是 `ES2015 （ES6）` 才有的语法，可以通过字面量方式, 构造新数组，而不再需要组合使用 `push`, `splice`, `concat` 等方法。\n\n```js\nvar parts = ['shoulders', 'knees']; \nvar lyrics = ['head', ...parts, 'and', 'toes']; \n// [\"head\", \"shoulders\", \"knees\", \"and\", \"toes\"]\n```\n\n这里的使用方法和参数列表的展开有点类似。\n\n```js\nfunction myFunction(v, w, x, y, z) { }\nvar args = [0, 1];\nmyFunction(-1, ...args, 2, ...[3]);\n```\n\n返回的是新数组，对新数组修改之后不会影响到旧数组，类似于 `arr.slice()`。\n\n```js\nvar arr = [1, 2, 3];\nvar arr2 = [...arr]; // like arr.slice()\narr2.push(4); \n\n// arr2 此时变成 [1, 2, 3, 4]\n// arr 不受影响\n```\n\n展开语法和 `Object.assign()` 行为一致, 执行的都是浅拷贝（即只遍历一层）。\n\n```js\nvar a = [[1], [2], [3]];\nvar b = [...a];\nb.shift().shift(); // 1\n// [[], [2], [3]]\n```\n\n这里 a 是多层数组，b 只拷贝了第一层，对于第二层依旧和 a 持有同一个地址，所以对 b 的修改会影响到 a。\n\n#### 2、展开语法之字面量对象\n\n这是 `ES2018` 才有的语法，将已有对象的所有**可枚举属性**拷贝到新构造的对象中，类似于 `Object.assign()` 方法。\n\n```js\nvar obj1 = { foo: 'bar', x: 42 };\nvar obj2 = { foo: 'baz', y: 13 };\n\nvar clonedObj = { ...obj1 };\n// { foo: \"bar\", x: 42 }\n\nvar mergedObj = { ...obj1, ...obj2 };\n// { foo: \"baz\", x: 42, y: 13 }\n```\n\n`Object.assign()` 函数会触发 setters，而展开语法不会。有时候不能替换或者模拟 `Object.assign()` 函数，因为会得到意想不到的结果，如下所示。\n\n```js\nvar obj1 = { foo: 'bar', x: 42 };\nvar obj2 = { foo: 'baz', y: 13 };\nconst merge = ( ...objects ) => ( { ...objects } );\n\nvar mergedObj = merge ( obj1, obj2);\n// { 0: { foo: 'bar', x: 42 }, 1: { foo: 'baz', y: 13 } }\n\nvar mergedObj = merge ( {}, obj1, obj2);\n// { 0: {}, 1: { foo: 'bar', x: 42 }, 2: { foo: 'baz', y: 13 } }\n```\n\n这里实际上是将多个解构变为剩余参数（ `rest` ），然后再将剩余参数展开为字面量对象.\n\n第五步：破解递归爆栈\n----------\n\n上面四步使用的都是递归方法，但是有一个问题在于会爆栈，错误提示如下。\n\n```js\n// RangeError: Maximum call stack size exceeded\n```\n\n那应该如何解决呢？其实我们使用循环就可以了，代码如下。\n\n```js\nfunction cloneDeep5(x) {\n    const root = {};\n\n    // 栈\n    const loopList = [\n        {\n            parent: root,\n            key: undefined,\n            data: x,\n        }\n    ];\n\n    while(loopList.length) {\n        // 广度优先\n        const node = loopList.pop();\n        const parent = node.parent;\n        const key = node.key;\n        const data = node.data;\n\n        // 初始化赋值目标，key为undefined则拷贝到父元素，否则拷贝到子元素\n        let res = parent;\n        if (typeof key !== 'undefined') {\n            res = parent[key] = {};\n        }\n\n        for(let k in data) {\n            if (data.hasOwnProperty(k)) {\n                if (typeof data[k] === 'object') {\n                    // 下一次循环\n                    loopList.push({\n                        parent: res,\n                        key: k,\n                        data: data[k],\n                    });\n                } else {\n                    res[k] = data[k];\n                }\n            }\n        }\n    }\n\n    return root;\n}\n```\n\n由于篇幅问题就不过多介绍了，详情请参考下面这篇文章。\n\n> [深拷贝的终极探索（99% 的人都不知道）](https://segmentfault.com/a/1190000016672263)\n\n本期思考题\n-----\n\n```\n如何用 JS 实现 JSON.parse?\n```\n\n参考\n--\n\n> [深入剖析 JavaScript 的深复制](http://jerryzou.com/posts/dive-into-deep-clone-in-javascript/)\n> \n> [深拷贝的终极探索（99% 的人都不知道）](https://segmentfault.com/a/1190000016672263)\n> \n> [深入 js 深拷贝对象](https://www.jianshu.com/p/b08bc61714c7)\n> \n> [MDN 之展开语法](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Spread_syntax)\n> \n> [MDN 之 Symbol](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol)\n\n\n\n> [https://github.com/yygmind/blog](https://github.com/yygmind/blog)\n\n","source":"_posts/如何实现一个深拷贝.md","raw":"---\nlayout: '[post]'\ntitle: 如何实现一个深拷贝\ndate: 2020-05-14 15:20:41\ntags: 面试\n---\n\n\n引言\n--\n\n上篇文章详细介绍了浅拷贝 `Object.assign`，并对其进行了模拟实现，在实现的过程中，介绍了很多基础知识。今天这篇文章我们来看看一道必会面试题，即如何实现一个深拷贝。本文会详细介绍对象、数组、循环引用、引用丢失、Symbol 和递归爆栈等情况下的深拷贝实践，欢迎阅读。\n <!-- more -->\n第一步：简单实现\n--------\n\n其实深拷贝可以拆分成 2 步，浅拷贝 + 递归，浅拷贝时判断属性值是否是对象，如果是对象就进行递归操作，两个一结合就实现了深拷贝。\n\n根据上篇文章内容，我们可以写出简单浅拷贝代码如下。\n\n```js\n// 木易杨\nfunction cloneShallow(source) {\n    var target = {};\n    for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n            target[key] = source[key];\n        }\n    }\n    return target;\n}\n\n// 测试用例\nvar a = {\n    name: \"muyiy\",\n    book: {\n        title: \"You Don't Know JS\",\n        price: \"45\"\n    },\n    a1: undefined,\n    a2: null,\n    a3: 123\n}\nvar b = cloneShallow(a);\n\na.name = \"高级前端进阶\";\na.book.price = \"55\";\n\nconsole.log(b);\n// { \n//   name: 'muyiy', \n//   book: { title: 'You Don\\'t Know JS', price: '55' },\n//   a1: undefined,\n//   a2: null,\n//   a3: 123\n// }\n```\n\n上面代码是浅拷贝实现，只要稍微改动下，加上是否是对象的判断并在相应的位置使用递归就可以实现简单深拷贝。\n\n```js\n// 木易杨\nfunction cloneDeep1(source) {\n    var target = {};\n    for(var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n            if (typeof source[key] === 'object') {\n                target[key] = cloneDeep1(source[key]); // 注意这里\n            } else {\n                target[key] = source[key];\n            }\n        }\n    }\n    return target;\n}\n\n// 使用上面测试用例测试一下\nvar b = cloneDeep1(a);\nconsole.log(b);\n// { \n//   name: 'muyiy', \n//   book: { title: 'You Don\\'t Know JS', price: '45' }, \n//   a1: undefined,\n//   a2: {},\n//   a3: 123\n// }\n```\n\n一个简单的深拷贝就完成了，但是这个实现还存在很多问题。\n\n*   1、没有对传入参数进行校验，传入 `null` 时应该返回 `null` 而不是 `{}`\n    \n*   2、对于对象的判断逻辑不严谨，因为 `typeof null === 'object'`\n    \n*   3、没有考虑数组的兼容\n    \n\n第二步：拷贝数组\n--------\n\n我们来看下对于对象的判断，之前在【进阶 3-3 期】有过介绍，判断方案如下。\n\n```js\n// 木易杨\nfunction isObject(obj) {\n    return Object.prototype.toString.call(obj) === '[object Object]';\n}\n```\n\n但是用在这里并不合适，因为我们要保留数组这种情况，所以这里使用 `typeof` 来处理。\n\n```js\n// 木易杨\ntypeof null //\"object\"\ntypeof {} //\"object\"\ntypeof [] //\"object\"\ntypeof function foo(){} //\"function\" (特殊情况)\n```\n\n改动过后的 isObject 判断逻辑如下。\n\n```js\n// 木易杨\nfunction isObject(obj) {\n\treturn typeof obj === 'object' && obj != null;\n}\n```\n\n所以兼容数组的写法如下。\n\n```js\n// 木易杨\nfunction cloneDeep2(source) {\n\n    if (!isObject(source)) return source; // 非对象返回自身\n      \n    var target = Array.isArray(source) ? [] : {};\n    for(var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n            if (isObject(source[key])) {\n                target[key] = cloneDeep2(source[key]); // 注意这里\n            } else {\n                target[key] = source[key];\n            }\n        }\n    }\n    return target;\n}\n\n// 使用上面测试用例测试一下\nvar b = cloneDeep2(a);\nconsole.log(b);\n// { \n//   name: 'muyiy', \n//   book: { title: 'You Don\\'t Know JS', price: '45' },\n//   a1: undefined,\n//   a2: null,\n//   a3: 123\n// }\n```\n\n第三步：循环引用\n--------\n\n我们知道 `JSON` 无法深拷贝循环引用，遇到这种情况会抛出异常。\n\n```js\n// 木易杨\n// 此处 a 是文章开始的测试用例\na.circleRef = a;\n\nJSON.parse(JSON.stringify(a));\n// TypeError: Converting circular structure to JSON\n```\n\n### 1、使用哈希表\n\n解决方案很简单，其实就是循环检测，我们设置一个数组或者哈希表存储已拷贝过的对象，当检测到当前对象已存在于哈希表中时，取出该值并返回即可。\n\n```js\n// 木易杨\nfunction cloneDeep3(source, hash = new WeakMap()) {\n\n    if (!isObject(source)) return source; \n    if (hash.has(source)) return hash.get(source); // 新增代码，查哈希表\n      \n    var target = Array.isArray(source) ? [] : {};\n    hash.set(source, target); // 新增代码，哈希表设值\n    \n    for(var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n            if (isObject(source[key])) {\n                target[key] = cloneDeep3(source[key], hash); // 新增代码，传入哈希表\n            } else {\n                target[key] = source[key];\n            }\n        }\n    }\n    return target;\n}\n```\n\n测试一下，看看效果如何。\n\n```js\n// 木易杨\n// 此处 a 是文章开始的测试用例\na.circleRef = a;\n\nvar b = cloneDeep3(a);\nconsole.log(b);\n// {\n// \tname: \"muyiy\",\n// \ta1: undefined,\n//\ta2: null,\n// \ta3: 123,\n// \tbook: {title: \"You Don't Know JS\", price: \"45\"},\n// \tcircleRef: {name: \"muyiy\", book: {…}, a1: undefined, a2: null, a3: 123, …}\n// }\n```\n\n完美！\n\n### 2、使用数组\n\n这里使用了 `ES6` 中的 `WeakMap` 来处理，那在 `ES5` 下应该如何处理呢？\n\n也很简单，使用数组来处理就好啦，代码如下。\n\n```js\n// 木易杨\nfunction cloneDeep3(source, uniqueList) {\n\n    if (!isObject(source)) return source; \n    if (!uniqueList) uniqueList = []; // 新增代码，初始化数组\n      \n    var target = Array.isArray(source) ? [] : {};\n    \n    // ============= 新增代码\n    // 数据已经存在，返回保存的数据\n    var uniqueData = find(uniqueList, source);\n    if (uniqueData) {\n        return uniqueData.target;\n    };\n        \n    // 数据不存在，保存源数据，以及对应的引用\n    uniqueList.push({\n        source: source,\n        target: target\n    });\n    // =============\n\n    for(var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n            if (isObject(source[key])) {\n                target[key] = cloneDeep3(source[key], uniqueList); // 新增代码，传入数组\n            } else {\n                target[key] = source[key];\n            }\n        }\n    }\n    return target;\n}\n\n// 新增方法，用于查找\nfunction find(arr, item) {\n    for(var i = 0; i < arr.length; i++) {\n        if (arr[i].source === item) {\n            return arr[i];\n        }\n    }\n    return null;\n}\n\n// 用上面测试用例已测试通过\n```\n\n现在已经很完美的解决了循环引用这种情况，那其实还是一种情况是引用丢失，我们看下面的例子。\n\n```js\n// 木易杨\nvar obj1 = {};\nvar obj2 = {a: obj1, b: obj1};\n\nobj2.a === obj2.b; \n// true\n\nvar obj3 = cloneDeep2(obj2);\nobj3.a === obj3.b; \n// false\n```\n\n引用丢失在某些情况下是有问题的，比如上面的对象 obj2，obj2 的键值 a 和 b 同时引用了同一个对象 obj1，使用 cloneDeep2 进行深拷贝后就丢失了引用关系变成了两个不同的对象，那如何处理呢。\n\n其实你有没有发现，我们的 cloneDeep3 已经解决了这个问题，因为只要存储已拷贝过的对象就可以了。\n\n```\n// 木易杨\nvar obj3 = cloneDeep3(obj2);\nobj3.a === obj3.b; \n// true\n```\n\n完美！\n\n第四步：拷贝 `Symbol`\n---------------\n\n这个时候可能要搞事情了，那我们能不能拷贝 Symol 类型呢？\n\n当然可以，不过 `Symbol` 在 `ES6` 下才有，我们需要一些方法来检测出 `Symble` 类型。\n\n方法一：`Object.getOwnPropertySymbols(...)`\n\n方法二：`Reflect.ownKeys(...)`\n\n**对于方法一**可以查找一个给定对象的符号属性时返回一个 `?symbol` 类型的数组。注意，每个初始化的对象都是没有自己的 `symbol` 属性的，因此这个数组可能为空，除非你已经在对象上设置了 `symbol` 属性。（来自 MDN）\n\n```js\nvar obj = {};\nvar a = Symbol(\"a\"); // 创建新的symbol类型\nvar b = Symbol.for(\"b\"); // 从全局的symbol注册?表设置和取得symbol\n\nobj[a] = \"localSymbol\";\nobj[b] = \"globalSymbol\";\n\nvar objectSymbols = Object.getOwnPropertySymbols(obj);\n\nconsole.log(objectSymbols.length); // 2\nconsole.log(objectSymbols)         // [Symbol(a), Symbol(b)]\nconsole.log(objectSymbols[0])      // Symbol(a)\n```\n\n**对于方法二**返回一个由目标对象**自身**的属性键组成的数组。它的返回值等同于`Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target))`。(来自 MDN)\n\n```\nReflect.ownKeys({z: 3, y: 2, x: 1}); // [ \"z\", \"y\", \"x\" ]\nReflect.ownKeys([]); // [\"length\"]\n\nvar sym = Symbol.for(\"comet\");\nvar sym2 = Symbol.for(\"meteor\");\nvar obj = {[sym]: 0, \"str\": 0, \"773\": 0, \"0\": 0,\n           [sym2]: 0, \"-1\": 0, \"8\": 0, \"second str\": 0};\nReflect.ownKeys(obj);\n// [ \"0\", \"8\", \"773\", \"str\", \"-1\", \"second str\", Symbol(comet), Symbol(meteor) ]\n// 注意顺序\n// Indexes in numeric order, \n// strings in insertion order, \n// symbols in insertion order\n```\n\n### 方法一\n\n思路就是先查找有没有 `Symbol` 属性，如果查找到则先遍历处理 `Symbol` 情况，然后再处理正常情况，多出来的逻辑就是下面的新增代码。\n\n```js\n// 木易杨\nfunction cloneDeep4(source, hash = new WeakMap()) {\n\n    if (!isObject(source)) return source; \n    if (hash.has(source)) return hash.get(source); \n      \n    let target = Array.isArray(source) ? [] : {};\n    hash.set(source, target);\n    \n    // ============= 新增代码\n    let symKeys = Object.getOwnPropertySymbols(source); // 查找\n    if (symKeys.length) { // 查找成功\t\n        symKeys.forEach(symKey => {\n            if (isObject(source[symKey])) {\n                target[symKey] = cloneDeep4(source[symKey], hash); \n            } else {\n                target[symKey] = source[symKey];\n            }    \n        });\n    }\n    // =============\n    \n    for(let key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n            if (isObject(source[key])) {\n                target[key] = cloneDeep4(source[key], hash); \n            } else {\n                target[key] = source[key];\n            }\n        }\n    }\n    return target;\n}\n```\n\n测试下效果\n\n```js\n// 木易杨\n// 此处 a 是文章开始的测试用例\nvar sym1 = Symbol(\"a\"); // 创建新的symbol类型\nvar sym2 = Symbol.for(\"b\"); // 从全局的symbol注册?表设置和取得symbol\n\na[sym1] = \"localSymbol\";\na[sym2] = \"globalSymbol\";\n\nvar b = cloneDeep4(a);\nconsole.log(b);\n// {\n// \tname: \"muyiy\",\n// \ta1: undefined,\n//\ta2: null,\n// \ta3: 123,\n// \tbook: {title: \"You Don't Know JS\", price: \"45\"},\n// \tcircleRef: {name: \"muyiy\", book: {…}, a1: undefined, a2: null, a3: 123, …},\n//  [Symbol(a)]: 'localSymbol',\n//  [Symbol(b)]: 'globalSymbol'\n// }\n```\n\n完美！\n\n### 方法二\n\n```js\n// 木易杨\nfunction cloneDeep4(source, hash = new WeakMap()) {\n\n    if (!isObject(source)) return source; \n    if (hash.has(source)) return hash.get(source); \n      \n    let target = Array.isArray(source) ? [] : {};\n    hash.set(source, target);\n    \n  \tReflect.ownKeys(source).forEach(key => { // 改动\n        if (isObject(source[key])) {\n            target[key] = cloneDeep4(source[key], hash); \n        } else {\n            target[key] = source[key];\n        }  \n  \t});\n    return target;\n}\n\n// 测试已通过\n```\n\n这里使用了 `Reflect.ownKeys()` 获取所有的键值，同时包括 `Symbol`，对 source 遍历赋值即可。\n\n写到这里已经差不多了，我们再延伸下，对于 `target` 换一种写法，改动如下。\n\n```js\n// 木易杨\nfunction cloneDeep4(source, hash = new WeakMap()) {\n\n    if (!isObject(source)) return source; \n    if (hash.has(source)) return hash.get(source); \n      \n    let target = Array.isArray(source) ? [...source] : { ...source }; // 改动 1\n    hash.set(source, target);\n    \n  \tReflect.ownKeys(target).forEach(key => { // 改动 2\n        if (isObject(source[key])) {\n            target[key] = cloneDeep4(source[key], hash); \n        } else {\n            target[key] = source[key];\n        }  \n  \t});\n    return target;\n}\n\n// 测试已通过\n```\n\n在改动 1 中，返回一个新数组或者新对象，获取到源对象之后就可以如改动 2 所示传入 target 遍历赋值即可。\n\n`Reflect.ownKeys()` 这种方式的问题在于不能深拷贝原型链上的数据，因为返回的是目标对象**自身**的属性键组成的数组。如果想深拷贝原型链上的数据怎么办，那用 `for..in` 就可以了。\n\n我们再介绍下两个知识点，分别是**构造字面量数组时使用展开语法**和**构造字面量对象时使用展开语法**。（以下代码示例来源于 MDN）\n\n#### 1、展开语法之字面量数组\n\n这是 `ES2015 （ES6）` 才有的语法，可以通过字面量方式, 构造新数组，而不再需要组合使用 `push`, `splice`, `concat` 等方法。\n\n```js\nvar parts = ['shoulders', 'knees']; \nvar lyrics = ['head', ...parts, 'and', 'toes']; \n// [\"head\", \"shoulders\", \"knees\", \"and\", \"toes\"]\n```\n\n这里的使用方法和参数列表的展开有点类似。\n\n```js\nfunction myFunction(v, w, x, y, z) { }\nvar args = [0, 1];\nmyFunction(-1, ...args, 2, ...[3]);\n```\n\n返回的是新数组，对新数组修改之后不会影响到旧数组，类似于 `arr.slice()`。\n\n```js\nvar arr = [1, 2, 3];\nvar arr2 = [...arr]; // like arr.slice()\narr2.push(4); \n\n// arr2 此时变成 [1, 2, 3, 4]\n// arr 不受影响\n```\n\n展开语法和 `Object.assign()` 行为一致, 执行的都是浅拷贝（即只遍历一层）。\n\n```js\nvar a = [[1], [2], [3]];\nvar b = [...a];\nb.shift().shift(); // 1\n// [[], [2], [3]]\n```\n\n这里 a 是多层数组，b 只拷贝了第一层，对于第二层依旧和 a 持有同一个地址，所以对 b 的修改会影响到 a。\n\n#### 2、展开语法之字面量对象\n\n这是 `ES2018` 才有的语法，将已有对象的所有**可枚举属性**拷贝到新构造的对象中，类似于 `Object.assign()` 方法。\n\n```js\nvar obj1 = { foo: 'bar', x: 42 };\nvar obj2 = { foo: 'baz', y: 13 };\n\nvar clonedObj = { ...obj1 };\n// { foo: \"bar\", x: 42 }\n\nvar mergedObj = { ...obj1, ...obj2 };\n// { foo: \"baz\", x: 42, y: 13 }\n```\n\n`Object.assign()` 函数会触发 setters，而展开语法不会。有时候不能替换或者模拟 `Object.assign()` 函数，因为会得到意想不到的结果，如下所示。\n\n```js\nvar obj1 = { foo: 'bar', x: 42 };\nvar obj2 = { foo: 'baz', y: 13 };\nconst merge = ( ...objects ) => ( { ...objects } );\n\nvar mergedObj = merge ( obj1, obj2);\n// { 0: { foo: 'bar', x: 42 }, 1: { foo: 'baz', y: 13 } }\n\nvar mergedObj = merge ( {}, obj1, obj2);\n// { 0: {}, 1: { foo: 'bar', x: 42 }, 2: { foo: 'baz', y: 13 } }\n```\n\n这里实际上是将多个解构变为剩余参数（ `rest` ），然后再将剩余参数展开为字面量对象.\n\n第五步：破解递归爆栈\n----------\n\n上面四步使用的都是递归方法，但是有一个问题在于会爆栈，错误提示如下。\n\n```js\n// RangeError: Maximum call stack size exceeded\n```\n\n那应该如何解决呢？其实我们使用循环就可以了，代码如下。\n\n```js\nfunction cloneDeep5(x) {\n    const root = {};\n\n    // 栈\n    const loopList = [\n        {\n            parent: root,\n            key: undefined,\n            data: x,\n        }\n    ];\n\n    while(loopList.length) {\n        // 广度优先\n        const node = loopList.pop();\n        const parent = node.parent;\n        const key = node.key;\n        const data = node.data;\n\n        // 初始化赋值目标，key为undefined则拷贝到父元素，否则拷贝到子元素\n        let res = parent;\n        if (typeof key !== 'undefined') {\n            res = parent[key] = {};\n        }\n\n        for(let k in data) {\n            if (data.hasOwnProperty(k)) {\n                if (typeof data[k] === 'object') {\n                    // 下一次循环\n                    loopList.push({\n                        parent: res,\n                        key: k,\n                        data: data[k],\n                    });\n                } else {\n                    res[k] = data[k];\n                }\n            }\n        }\n    }\n\n    return root;\n}\n```\n\n由于篇幅问题就不过多介绍了，详情请参考下面这篇文章。\n\n> [深拷贝的终极探索（99% 的人都不知道）](https://segmentfault.com/a/1190000016672263)\n\n本期思考题\n-----\n\n```\n如何用 JS 实现 JSON.parse?\n```\n\n参考\n--\n\n> [深入剖析 JavaScript 的深复制](http://jerryzou.com/posts/dive-into-deep-clone-in-javascript/)\n> \n> [深拷贝的终极探索（99% 的人都不知道）](https://segmentfault.com/a/1190000016672263)\n> \n> [深入 js 深拷贝对象](https://www.jianshu.com/p/b08bc61714c7)\n> \n> [MDN 之展开语法](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Spread_syntax)\n> \n> [MDN 之 Symbol](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol)\n\n\n\n> [https://github.com/yygmind/blog](https://github.com/yygmind/blog)\n\n","slug":"如何实现一个深拷贝","published":1,"updated":"2020-05-27T07:22:31.000Z","comments":1,"photos":[],"link":"","_id":"ckbftlm7h002o7w2pciz6ez7b","content":"<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>上篇文章详细介绍了浅拷贝 <code>Object.assign</code>，并对其进行了模拟实现，在实现的过程中，介绍了很多基础知识。今天这篇文章我们来看看一道必会面试题，即如何实现一个深拷贝。本文会详细介绍对象、数组、循环引用、引用丢失、Symbol 和递归爆栈等情况下的深拷贝实践，欢迎阅读。<br> <a id=\"more\"></a><br>第一步：简单实现</p>\n<hr>\n<p>其实深拷贝可以拆分成 2 步，浅拷贝 + 递归，浅拷贝时判断属性值是否是对象，如果是对象就进行递归操作，两个一结合就实现了深拷贝。</p>\n<p>根据上篇文章内容，我们可以写出简单浅拷贝代码如下。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 木易杨</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cloneShallow</span>(<span class=\"params\">source</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> target = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> source) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.prototype.hasOwnProperty.call(source, key)) &#123;</span><br><span class=\"line\">            target[key] = source[key];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> target;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试用例</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">\"muyiy\"</span>,</span><br><span class=\"line\">    book: &#123;</span><br><span class=\"line\">        title: <span class=\"string\">\"You Don't Know JS\"</span>,</span><br><span class=\"line\">        price: <span class=\"string\">\"45\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    a1: <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">    a2: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    a3: <span class=\"number\">123</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = cloneShallow(a);</span><br><span class=\"line\"></span><br><span class=\"line\">a.name = <span class=\"string\">\"高级前端进阶\"</span>;</span><br><span class=\"line\">a.book.price = <span class=\"string\">\"55\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\"><span class=\"comment\">// &#123; </span></span><br><span class=\"line\"><span class=\"comment\">//   name: 'muyiy', </span></span><br><span class=\"line\"><span class=\"comment\">//   book: &#123; title: 'You Don\\'t Know JS', price: '55' &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">//   a1: undefined,</span></span><br><span class=\"line\"><span class=\"comment\">//   a2: null,</span></span><br><span class=\"line\"><span class=\"comment\">//   a3: 123</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码是浅拷贝实现，只要稍微改动下，加上是否是对象的判断并在相应的位置使用递归就可以实现简单深拷贝。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 木易杨</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cloneDeep1</span>(<span class=\"params\">source</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> target = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> source) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.prototype.hasOwnProperty.call(source, key)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> source[key] === <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">                target[key] = cloneDeep1(source[key]); <span class=\"comment\">// 注意这里</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                target[key] = source[key];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> target;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用上面测试用例测试一下</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = cloneDeep1(a);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\"><span class=\"comment\">// &#123; </span></span><br><span class=\"line\"><span class=\"comment\">//   name: 'muyiy', </span></span><br><span class=\"line\"><span class=\"comment\">//   book: &#123; title: 'You Don\\'t Know JS', price: '45' &#125;, </span></span><br><span class=\"line\"><span class=\"comment\">//   a1: undefined,</span></span><br><span class=\"line\"><span class=\"comment\">//   a2: &#123;&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">//   a3: 123</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>一个简单的深拷贝就完成了，但是这个实现还存在很多问题。</p>\n<ul>\n<li><p>1、没有对传入参数进行校验，传入 <code>null</code> 时应该返回 <code>null</code> 而不是 <code>{}</code></p>\n</li>\n<li><p>2、对于对象的判断逻辑不严谨，因为 <code>typeof null === &#39;object&#39;</code></p>\n</li>\n<li><p>3、没有考虑数组的兼容</p>\n</li>\n</ul>\n<h2 id=\"第二步：拷贝数组\"><a href=\"#第二步：拷贝数组\" class=\"headerlink\" title=\"第二步：拷贝数组\"></a>第二步：拷贝数组</h2><p>我们来看下对于对象的判断，之前在【进阶 3-3 期】有过介绍，判断方案如下。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 木易杨</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isObject</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(obj) === <span class=\"string\">'[object Object]'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但是用在这里并不合适，因为我们要保留数组这种情况，所以这里使用 <code>typeof</code> 来处理。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 木易杨</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">null</span> <span class=\"comment\">//\"object\"</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> &#123;&#125; <span class=\"comment\">//\"object\"</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> [] <span class=\"comment\">//\"object\"</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;&#125; <span class=\"comment\">//\"function\" (特殊情况)</span></span><br></pre></td></tr></table></figure>\n\n<p>改动过后的 isObject 判断逻辑如下。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 木易杨</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isObject</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> obj === <span class=\"string\">'object'</span> &amp;&amp; obj != <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>所以兼容数组的写法如下。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 木易杨</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cloneDeep2</span>(<span class=\"params\">source</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isObject(source)) <span class=\"keyword\">return</span> source; <span class=\"comment\">// 非对象返回自身</span></span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"keyword\">var</span> target = <span class=\"built_in\">Array</span>.isArray(source) ? [] : &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> source) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.prototype.hasOwnProperty.call(source, key)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isObject(source[key])) &#123;</span><br><span class=\"line\">                target[key] = cloneDeep2(source[key]); <span class=\"comment\">// 注意这里</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                target[key] = source[key];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> target;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用上面测试用例测试一下</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = cloneDeep2(a);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\"><span class=\"comment\">// &#123; </span></span><br><span class=\"line\"><span class=\"comment\">//   name: 'muyiy', </span></span><br><span class=\"line\"><span class=\"comment\">//   book: &#123; title: 'You Don\\'t Know JS', price: '45' &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">//   a1: undefined,</span></span><br><span class=\"line\"><span class=\"comment\">//   a2: null,</span></span><br><span class=\"line\"><span class=\"comment\">//   a3: 123</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第三步：循环引用\"><a href=\"#第三步：循环引用\" class=\"headerlink\" title=\"第三步：循环引用\"></a>第三步：循环引用</h2><p>我们知道 <code>JSON</code> 无法深拷贝循环引用，遇到这种情况会抛出异常。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 木易杨</span></span><br><span class=\"line\"><span class=\"comment\">// 此处 a 是文章开始的测试用例</span></span><br><span class=\"line\">a.circleRef = a;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(a));</span><br><span class=\"line\"><span class=\"comment\">// TypeError: Converting circular structure to JSON</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1、使用哈希表\"><a href=\"#1、使用哈希表\" class=\"headerlink\" title=\"1、使用哈希表\"></a>1、使用哈希表</h3><p>解决方案很简单，其实就是循环检测，我们设置一个数组或者哈希表存储已拷贝过的对象，当检测到当前对象已存在于哈希表中时，取出该值并返回即可。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 木易杨</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cloneDeep3</span>(<span class=\"params\">source, hash = new WeakMap(</span>)) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isObject(source)) <span class=\"keyword\">return</span> source; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hash.has(source)) <span class=\"keyword\">return</span> hash.get(source); <span class=\"comment\">// 新增代码，查哈希表</span></span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"keyword\">var</span> target = <span class=\"built_in\">Array</span>.isArray(source) ? [] : &#123;&#125;;</span><br><span class=\"line\">    hash.set(source, target); <span class=\"comment\">// 新增代码，哈希表设值</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> source) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.prototype.hasOwnProperty.call(source, key)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isObject(source[key])) &#123;</span><br><span class=\"line\">                target[key] = cloneDeep3(source[key], hash); <span class=\"comment\">// 新增代码，传入哈希表</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                target[key] = source[key];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> target;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试一下，看看效果如何。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 木易杨</span></span><br><span class=\"line\"><span class=\"comment\">// 此处 a 是文章开始的测试用例</span></span><br><span class=\"line\">a.circleRef = a;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = cloneDeep3(a);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\"><span class=\"comment\">// &#123;</span></span><br><span class=\"line\"><span class=\"comment\">// \tname: \"muyiy\",</span></span><br><span class=\"line\"><span class=\"comment\">// \ta1: undefined,</span></span><br><span class=\"line\"><span class=\"comment\">//\ta2: null,</span></span><br><span class=\"line\"><span class=\"comment\">// \ta3: 123,</span></span><br><span class=\"line\"><span class=\"comment\">// \tbook: &#123;title: \"You Don't Know JS\", price: \"45\"&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">// \tcircleRef: &#123;name: \"muyiy\", book: &#123;…&#125;, a1: undefined, a2: null, a3: 123, …&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>完美！</p>\n<h3 id=\"2、使用数组\"><a href=\"#2、使用数组\" class=\"headerlink\" title=\"2、使用数组\"></a>2、使用数组</h3><p>这里使用了 <code>ES6</code> 中的 <code>WeakMap</code> 来处理，那在 <code>ES5</code> 下应该如何处理呢？</p>\n<p>也很简单，使用数组来处理就好啦，代码如下。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 木易杨</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cloneDeep3</span>(<span class=\"params\">source, uniqueList</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isObject(source)) <span class=\"keyword\">return</span> source; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!uniqueList) uniqueList = []; <span class=\"comment\">// 新增代码，初始化数组</span></span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"keyword\">var</span> target = <span class=\"built_in\">Array</span>.isArray(source) ? [] : &#123;&#125;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// ============= 新增代码</span></span><br><span class=\"line\">    <span class=\"comment\">// 数据已经存在，返回保存的数据</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> uniqueData = find(uniqueList, source);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (uniqueData) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> uniqueData.target;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"comment\">// 数据不存在，保存源数据，以及对应的引用</span></span><br><span class=\"line\">    uniqueList.push(&#123;</span><br><span class=\"line\">        source: source,</span><br><span class=\"line\">        target: target</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">// =============</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> source) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.prototype.hasOwnProperty.call(source, key)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isObject(source[key])) &#123;</span><br><span class=\"line\">                target[key] = cloneDeep3(source[key], uniqueList); <span class=\"comment\">// 新增代码，传入数组</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                target[key] = source[key];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> target;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 新增方法，用于查找</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">find</span>(<span class=\"params\">arr, item</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arr[i].source === item) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> arr[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 用上面测试用例已测试通过</span></span><br></pre></td></tr></table></figure>\n\n<p>现在已经很完美的解决了循环引用这种情况，那其实还是一种情况是引用丢失，我们看下面的例子。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 木易杨</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = &#123;<span class=\"attr\">a</span>: obj1, <span class=\"attr\">b</span>: obj1&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">obj2.a === obj2.b; </span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj3 = cloneDeep2(obj2);</span><br><span class=\"line\">obj3.a === obj3.b; </span><br><span class=\"line\"><span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<p>引用丢失在某些情况下是有问题的，比如上面的对象 obj2，obj2 的键值 a 和 b 同时引用了同一个对象 obj1，使用 cloneDeep2 进行深拷贝后就丢失了引用关系变成了两个不同的对象，那如何处理呢。</p>\n<p>其实你有没有发现，我们的 cloneDeep3 已经解决了这个问题，因为只要存储已拷贝过的对象就可以了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 木易杨</span><br><span class=\"line\">var obj3 &#x3D; cloneDeep3(obj2);</span><br><span class=\"line\">obj3.a &#x3D;&#x3D;&#x3D; obj3.b; </span><br><span class=\"line\">&#x2F;&#x2F; true</span><br></pre></td></tr></table></figure>\n\n<p>完美！</p>\n<h2 id=\"第四步：拷贝-Symbol\"><a href=\"#第四步：拷贝-Symbol\" class=\"headerlink\" title=\"第四步：拷贝 Symbol\"></a>第四步：拷贝 <code>Symbol</code></h2><p>这个时候可能要搞事情了，那我们能不能拷贝 Symol 类型呢？</p>\n<p>当然可以，不过 <code>Symbol</code> 在 <code>ES6</code> 下才有，我们需要一些方法来检测出 <code>Symble</code> 类型。</p>\n<p>方法一：<code>Object.getOwnPropertySymbols(...)</code></p>\n<p>方法二：<code>Reflect.ownKeys(...)</code></p>\n<p><strong>对于方法一</strong>可以查找一个给定对象的符号属性时返回一个 <code>?symbol</code> 类型的数组。注意，每个初始化的对象都是没有自己的 <code>symbol</code> 属性的，因此这个数组可能为空，除非你已经在对象上设置了 <code>symbol</code> 属性。（来自 MDN）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"built_in\">Symbol</span>(<span class=\"string\">\"a\"</span>); <span class=\"comment\">// 创建新的symbol类型</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"built_in\">Symbol</span>.for(<span class=\"string\">\"b\"</span>); <span class=\"comment\">// 从全局的symbol注册?表设置和取得symbol</span></span><br><span class=\"line\"></span><br><span class=\"line\">obj[a] = <span class=\"string\">\"localSymbol\"</span>;</span><br><span class=\"line\">obj[b] = <span class=\"string\">\"globalSymbol\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> objectSymbols = <span class=\"built_in\">Object</span>.getOwnPropertySymbols(obj);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(objectSymbols.length); <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(objectSymbols)         <span class=\"comment\">// [Symbol(a), Symbol(b)]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(objectSymbols[<span class=\"number\">0</span>])      <span class=\"comment\">// Symbol(a)</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>对于方法二</strong>返回一个由目标对象<strong>自身</strong>的属性键组成的数组。它的返回值等同于<code>Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target))</code>。(来自 MDN)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Reflect.ownKeys(&#123;z: 3, y: 2, x: 1&#125;); &#x2F;&#x2F; [ &quot;z&quot;, &quot;y&quot;, &quot;x&quot; ]</span><br><span class=\"line\">Reflect.ownKeys([]); &#x2F;&#x2F; [&quot;length&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">var sym &#x3D; Symbol.for(&quot;comet&quot;);</span><br><span class=\"line\">var sym2 &#x3D; Symbol.for(&quot;meteor&quot;);</span><br><span class=\"line\">var obj &#x3D; &#123;[sym]: 0, &quot;str&quot;: 0, &quot;773&quot;: 0, &quot;0&quot;: 0,</span><br><span class=\"line\">           [sym2]: 0, &quot;-1&quot;: 0, &quot;8&quot;: 0, &quot;second str&quot;: 0&#125;;</span><br><span class=\"line\">Reflect.ownKeys(obj);</span><br><span class=\"line\">&#x2F;&#x2F; [ &quot;0&quot;, &quot;8&quot;, &quot;773&quot;, &quot;str&quot;, &quot;-1&quot;, &quot;second str&quot;, Symbol(comet), Symbol(meteor) ]</span><br><span class=\"line\">&#x2F;&#x2F; 注意顺序</span><br><span class=\"line\">&#x2F;&#x2F; Indexes in numeric order, </span><br><span class=\"line\">&#x2F;&#x2F; strings in insertion order, </span><br><span class=\"line\">&#x2F;&#x2F; symbols in insertion order</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h3><p>思路就是先查找有没有 <code>Symbol</code> 属性，如果查找到则先遍历处理 <code>Symbol</code> 情况，然后再处理正常情况，多出来的逻辑就是下面的新增代码。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 木易杨</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cloneDeep4</span>(<span class=\"params\">source, hash = new WeakMap(</span>)) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isObject(source)) <span class=\"keyword\">return</span> source; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hash.has(source)) <span class=\"keyword\">return</span> hash.get(source); </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"keyword\">let</span> target = <span class=\"built_in\">Array</span>.isArray(source) ? [] : &#123;&#125;;</span><br><span class=\"line\">    hash.set(source, target);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// ============= 新增代码</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> symKeys = <span class=\"built_in\">Object</span>.getOwnPropertySymbols(source); <span class=\"comment\">// 查找</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (symKeys.length) &#123; <span class=\"comment\">// 查找成功\t</span></span><br><span class=\"line\">        symKeys.forEach(<span class=\"function\"><span class=\"params\">symKey</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isObject(source[symKey])) &#123;</span><br><span class=\"line\">                target[symKey] = cloneDeep4(source[symKey], hash); </span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                target[symKey] = source[symKey];</span><br><span class=\"line\">            &#125;    </span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// =============</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> source) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.prototype.hasOwnProperty.call(source, key)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isObject(source[key])) &#123;</span><br><span class=\"line\">                target[key] = cloneDeep4(source[key], hash); </span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                target[key] = source[key];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> target;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试下效果</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 木易杨</span></span><br><span class=\"line\"><span class=\"comment\">// 此处 a 是文章开始的测试用例</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sym1 = <span class=\"built_in\">Symbol</span>(<span class=\"string\">\"a\"</span>); <span class=\"comment\">// 创建新的symbol类型</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sym2 = <span class=\"built_in\">Symbol</span>.for(<span class=\"string\">\"b\"</span>); <span class=\"comment\">// 从全局的symbol注册?表设置和取得symbol</span></span><br><span class=\"line\"></span><br><span class=\"line\">a[sym1] = <span class=\"string\">\"localSymbol\"</span>;</span><br><span class=\"line\">a[sym2] = <span class=\"string\">\"globalSymbol\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = cloneDeep4(a);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\"><span class=\"comment\">// &#123;</span></span><br><span class=\"line\"><span class=\"comment\">// \tname: \"muyiy\",</span></span><br><span class=\"line\"><span class=\"comment\">// \ta1: undefined,</span></span><br><span class=\"line\"><span class=\"comment\">//\ta2: null,</span></span><br><span class=\"line\"><span class=\"comment\">// \ta3: 123,</span></span><br><span class=\"line\"><span class=\"comment\">// \tbook: &#123;title: \"You Don't Know JS\", price: \"45\"&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">// \tcircleRef: &#123;name: \"muyiy\", book: &#123;…&#125;, a1: undefined, a2: null, a3: 123, …&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">//  [Symbol(a)]: 'localSymbol',</span></span><br><span class=\"line\"><span class=\"comment\">//  [Symbol(b)]: 'globalSymbol'</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>完美！</p>\n<h3 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 木易杨</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cloneDeep4</span>(<span class=\"params\">source, hash = new WeakMap(</span>)) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isObject(source)) <span class=\"keyword\">return</span> source; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hash.has(source)) <span class=\"keyword\">return</span> hash.get(source); </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"keyword\">let</span> target = <span class=\"built_in\">Array</span>.isArray(source) ? [] : &#123;&#125;;</span><br><span class=\"line\">    hash.set(source, target);</span><br><span class=\"line\">    </span><br><span class=\"line\">  \t<span class=\"built_in\">Reflect</span>.ownKeys(source).forEach(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123; <span class=\"comment\">// 改动</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isObject(source[key])) &#123;</span><br><span class=\"line\">            target[key] = cloneDeep4(source[key], hash); </span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            target[key] = source[key];</span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">  \t&#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> target;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试已通过</span></span><br></pre></td></tr></table></figure>\n\n<p>这里使用了 <code>Reflect.ownKeys()</code> 获取所有的键值，同时包括 <code>Symbol</code>，对 source 遍历赋值即可。</p>\n<p>写到这里已经差不多了，我们再延伸下，对于 <code>target</code> 换一种写法，改动如下。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 木易杨</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cloneDeep4</span>(<span class=\"params\">source, hash = new WeakMap(</span>)) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isObject(source)) <span class=\"keyword\">return</span> source; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hash.has(source)) <span class=\"keyword\">return</span> hash.get(source); </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"keyword\">let</span> target = <span class=\"built_in\">Array</span>.isArray(source) ? [...source] : &#123; ...source &#125;; <span class=\"comment\">// 改动 1</span></span><br><span class=\"line\">    hash.set(source, target);</span><br><span class=\"line\">    </span><br><span class=\"line\">  \t<span class=\"built_in\">Reflect</span>.ownKeys(target).forEach(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123; <span class=\"comment\">// 改动 2</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isObject(source[key])) &#123;</span><br><span class=\"line\">            target[key] = cloneDeep4(source[key], hash); </span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            target[key] = source[key];</span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">  \t&#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> target;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试已通过</span></span><br></pre></td></tr></table></figure>\n\n<p>在改动 1 中，返回一个新数组或者新对象，获取到源对象之后就可以如改动 2 所示传入 target 遍历赋值即可。</p>\n<p><code>Reflect.ownKeys()</code> 这种方式的问题在于不能深拷贝原型链上的数据，因为返回的是目标对象<strong>自身</strong>的属性键组成的数组。如果想深拷贝原型链上的数据怎么办，那用 <code>for..in</code> 就可以了。</p>\n<p>我们再介绍下两个知识点，分别是<strong>构造字面量数组时使用展开语法</strong>和<strong>构造字面量对象时使用展开语法</strong>。（以下代码示例来源于 MDN）</p>\n<h4 id=\"1、展开语法之字面量数组\"><a href=\"#1、展开语法之字面量数组\" class=\"headerlink\" title=\"1、展开语法之字面量数组\"></a>1、展开语法之字面量数组</h4><p>这是 <code>ES2015 （ES6）</code> 才有的语法，可以通过字面量方式, 构造新数组，而不再需要组合使用 <code>push</code>, <code>splice</code>, <code>concat</code> 等方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> parts = [<span class=\"string\">'shoulders'</span>, <span class=\"string\">'knees'</span>]; </span><br><span class=\"line\"><span class=\"keyword\">var</span> lyrics = [<span class=\"string\">'head'</span>, ...parts, <span class=\"string\">'and'</span>, <span class=\"string\">'toes'</span>]; </span><br><span class=\"line\"><span class=\"comment\">// [\"head\", \"shoulders\", \"knees\", \"and\", \"toes\"]</span></span><br></pre></td></tr></table></figure>\n\n<p>这里的使用方法和参数列表的展开有点类似。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myFunction</span>(<span class=\"params\">v, w, x, y, z</span>) </span>&#123; &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> args = [<span class=\"number\">0</span>, <span class=\"number\">1</span>];</span><br><span class=\"line\">myFunction(<span class=\"number\">-1</span>, ...args, <span class=\"number\">2</span>, ...[<span class=\"number\">3</span>]);</span><br></pre></td></tr></table></figure>\n\n<p>返回的是新数组，对新数组修改之后不会影响到旧数组，类似于 <code>arr.slice()</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = [...arr]; <span class=\"comment\">// like arr.slice()</span></span><br><span class=\"line\">arr2.push(<span class=\"number\">4</span>); </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// arr2 此时变成 [1, 2, 3, 4]</span></span><br><span class=\"line\"><span class=\"comment\">// arr 不受影响</span></span><br></pre></td></tr></table></figure>\n\n<p>展开语法和 <code>Object.assign()</code> 行为一致, 执行的都是浅拷贝（即只遍历一层）。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [[<span class=\"number\">1</span>], [<span class=\"number\">2</span>], [<span class=\"number\">3</span>]];</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = [...a];</span><br><span class=\"line\">b.shift().shift(); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// [[], [2], [3]]</span></span><br></pre></td></tr></table></figure>\n\n<p>这里 a 是多层数组，b 只拷贝了第一层，对于第二层依旧和 a 持有同一个地址，所以对 b 的修改会影响到 a。</p>\n<h4 id=\"2、展开语法之字面量对象\"><a href=\"#2、展开语法之字面量对象\" class=\"headerlink\" title=\"2、展开语法之字面量对象\"></a>2、展开语法之字面量对象</h4><p>这是 <code>ES2018</code> 才有的语法，将已有对象的所有<strong>可枚举属性</strong>拷贝到新构造的对象中，类似于 <code>Object.assign()</code> 方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">'bar'</span>, <span class=\"attr\">x</span>: <span class=\"number\">42</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">'baz'</span>, <span class=\"attr\">y</span>: <span class=\"number\">13</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> clonedObj = &#123; ...obj1 &#125;;</span><br><span class=\"line\"><span class=\"comment\">// &#123; foo: \"bar\", x: 42 &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> mergedObj = &#123; ...obj1, ...obj2 &#125;;</span><br><span class=\"line\"><span class=\"comment\">// &#123; foo: \"baz\", x: 42, y: 13 &#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>Object.assign()</code> 函数会触发 setters，而展开语法不会。有时候不能替换或者模拟 <code>Object.assign()</code> 函数，因为会得到意想不到的结果，如下所示。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">'bar'</span>, <span class=\"attr\">x</span>: <span class=\"number\">42</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">'baz'</span>, <span class=\"attr\">y</span>: <span class=\"number\">13</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> merge = <span class=\"function\">(<span class=\"params\"> ...objects </span>) =&gt;</span> ( &#123; ...objects &#125; );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> mergedObj = merge ( obj1, obj2);</span><br><span class=\"line\"><span class=\"comment\">// &#123; 0: &#123; foo: 'bar', x: 42 &#125;, 1: &#123; foo: 'baz', y: 13 &#125; &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> mergedObj = merge ( &#123;&#125;, obj1, obj2);</span><br><span class=\"line\"><span class=\"comment\">// &#123; 0: &#123;&#125;, 1: &#123; foo: 'bar', x: 42 &#125;, 2: &#123; foo: 'baz', y: 13 &#125; &#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>这里实际上是将多个解构变为剩余参数（ <code>rest</code> ），然后再将剩余参数展开为字面量对象.</p>\n<h2 id=\"第五步：破解递归爆栈\"><a href=\"#第五步：破解递归爆栈\" class=\"headerlink\" title=\"第五步：破解递归爆栈\"></a>第五步：破解递归爆栈</h2><p>上面四步使用的都是递归方法，但是有一个问题在于会爆栈，错误提示如下。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// RangeError: Maximum call stack size exceeded</span></span><br></pre></td></tr></table></figure>\n\n<p>那应该如何解决呢？其实我们使用循环就可以了，代码如下。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cloneDeep5</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> root = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 栈</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> loopList = [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            parent: root,</span><br><span class=\"line\">            key: <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">            data: x,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(loopList.length) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 广度优先</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> node = loopList.pop();</span><br><span class=\"line\">        <span class=\"keyword\">const</span> parent = node.parent;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> key = node.key;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> data = node.data;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 初始化赋值目标，key为undefined则拷贝到父元素，否则拷贝到子元素</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> res = parent;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> key !== <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">            res = parent[key] = &#123;&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> k <span class=\"keyword\">in</span> data) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (data.hasOwnProperty(k)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> data[k] === <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 下一次循环</span></span><br><span class=\"line\">                    loopList.push(&#123;</span><br><span class=\"line\">                        parent: res,</span><br><span class=\"line\">                        key: k,</span><br><span class=\"line\">                        data: data[k],</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    res[k] = data[k];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>由于篇幅问题就不过多介绍了，详情请参考下面这篇文章。</p>\n<blockquote>\n<p><a href=\"https://segmentfault.com/a/1190000016672263\" target=\"_blank\" rel=\"noopener\">深拷贝的终极探索（99% 的人都不知道）</a></p>\n</blockquote>\n<h2 id=\"本期思考题\"><a href=\"#本期思考题\" class=\"headerlink\" title=\"本期思考题\"></a>本期思考题</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如何用 JS 实现 JSON.parse?</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><blockquote>\n<p><a href=\"http://jerryzou.com/posts/dive-into-deep-clone-in-javascript/\" target=\"_blank\" rel=\"noopener\">深入剖析 JavaScript 的深复制</a></p>\n<p><a href=\"https://segmentfault.com/a/1190000016672263\" target=\"_blank\" rel=\"noopener\">深拷贝的终极探索（99% 的人都不知道）</a></p>\n<p><a href=\"https://www.jianshu.com/p/b08bc61714c7\" target=\"_blank\" rel=\"noopener\">深入 js 深拷贝对象</a></p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Spread_syntax\" target=\"_blank\" rel=\"noopener\">MDN 之展开语法</a></p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol\" target=\"_blank\" rel=\"noopener\">MDN 之 Symbol</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://github.com/yygmind/blog\" target=\"_blank\" rel=\"noopener\">https://github.com/yygmind/blog</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>上篇文章详细介绍了浅拷贝 <code>Object.assign</code>，并对其进行了模拟实现，在实现的过程中，介绍了很多基础知识。今天这篇文章我们来看看一道必会面试题，即如何实现一个深拷贝。本文会详细介绍对象、数组、循环引用、引用丢失、Symbol 和递归爆栈等情况下的深拷贝实践，欢迎阅读。<br></p>","more":"<br>第一步：简单实现<p></p>\n<hr>\n<p>其实深拷贝可以拆分成 2 步，浅拷贝 + 递归，浅拷贝时判断属性值是否是对象，如果是对象就进行递归操作，两个一结合就实现了深拷贝。</p>\n<p>根据上篇文章内容，我们可以写出简单浅拷贝代码如下。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 木易杨</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cloneShallow</span>(<span class=\"params\">source</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> target = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> source) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.prototype.hasOwnProperty.call(source, key)) &#123;</span><br><span class=\"line\">            target[key] = source[key];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> target;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试用例</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">\"muyiy\"</span>,</span><br><span class=\"line\">    book: &#123;</span><br><span class=\"line\">        title: <span class=\"string\">\"You Don't Know JS\"</span>,</span><br><span class=\"line\">        price: <span class=\"string\">\"45\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    a1: <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">    a2: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    a3: <span class=\"number\">123</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = cloneShallow(a);</span><br><span class=\"line\"></span><br><span class=\"line\">a.name = <span class=\"string\">\"高级前端进阶\"</span>;</span><br><span class=\"line\">a.book.price = <span class=\"string\">\"55\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\"><span class=\"comment\">// &#123; </span></span><br><span class=\"line\"><span class=\"comment\">//   name: 'muyiy', </span></span><br><span class=\"line\"><span class=\"comment\">//   book: &#123; title: 'You Don\\'t Know JS', price: '55' &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">//   a1: undefined,</span></span><br><span class=\"line\"><span class=\"comment\">//   a2: null,</span></span><br><span class=\"line\"><span class=\"comment\">//   a3: 123</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码是浅拷贝实现，只要稍微改动下，加上是否是对象的判断并在相应的位置使用递归就可以实现简单深拷贝。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 木易杨</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cloneDeep1</span>(<span class=\"params\">source</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> target = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> source) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.prototype.hasOwnProperty.call(source, key)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> source[key] === <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">                target[key] = cloneDeep1(source[key]); <span class=\"comment\">// 注意这里</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                target[key] = source[key];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> target;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用上面测试用例测试一下</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = cloneDeep1(a);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\"><span class=\"comment\">// &#123; </span></span><br><span class=\"line\"><span class=\"comment\">//   name: 'muyiy', </span></span><br><span class=\"line\"><span class=\"comment\">//   book: &#123; title: 'You Don\\'t Know JS', price: '45' &#125;, </span></span><br><span class=\"line\"><span class=\"comment\">//   a1: undefined,</span></span><br><span class=\"line\"><span class=\"comment\">//   a2: &#123;&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">//   a3: 123</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>一个简单的深拷贝就完成了，但是这个实现还存在很多问题。</p>\n<ul>\n<li><p>1、没有对传入参数进行校验，传入 <code>null</code> 时应该返回 <code>null</code> 而不是 <code>{}</code></p>\n</li>\n<li><p>2、对于对象的判断逻辑不严谨，因为 <code>typeof null === &#39;object&#39;</code></p>\n</li>\n<li><p>3、没有考虑数组的兼容</p>\n</li>\n</ul>\n<h2 id=\"第二步：拷贝数组\"><a href=\"#第二步：拷贝数组\" class=\"headerlink\" title=\"第二步：拷贝数组\"></a>第二步：拷贝数组</h2><p>我们来看下对于对象的判断，之前在【进阶 3-3 期】有过介绍，判断方案如下。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 木易杨</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isObject</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(obj) === <span class=\"string\">'[object Object]'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但是用在这里并不合适，因为我们要保留数组这种情况，所以这里使用 <code>typeof</code> 来处理。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 木易杨</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">null</span> <span class=\"comment\">//\"object\"</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> &#123;&#125; <span class=\"comment\">//\"object\"</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> [] <span class=\"comment\">//\"object\"</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;&#125; <span class=\"comment\">//\"function\" (特殊情况)</span></span><br></pre></td></tr></table></figure>\n\n<p>改动过后的 isObject 判断逻辑如下。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 木易杨</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isObject</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> obj === <span class=\"string\">'object'</span> &amp;&amp; obj != <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>所以兼容数组的写法如下。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 木易杨</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cloneDeep2</span>(<span class=\"params\">source</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isObject(source)) <span class=\"keyword\">return</span> source; <span class=\"comment\">// 非对象返回自身</span></span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"keyword\">var</span> target = <span class=\"built_in\">Array</span>.isArray(source) ? [] : &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> source) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.prototype.hasOwnProperty.call(source, key)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isObject(source[key])) &#123;</span><br><span class=\"line\">                target[key] = cloneDeep2(source[key]); <span class=\"comment\">// 注意这里</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                target[key] = source[key];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> target;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用上面测试用例测试一下</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = cloneDeep2(a);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\"><span class=\"comment\">// &#123; </span></span><br><span class=\"line\"><span class=\"comment\">//   name: 'muyiy', </span></span><br><span class=\"line\"><span class=\"comment\">//   book: &#123; title: 'You Don\\'t Know JS', price: '45' &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">//   a1: undefined,</span></span><br><span class=\"line\"><span class=\"comment\">//   a2: null,</span></span><br><span class=\"line\"><span class=\"comment\">//   a3: 123</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第三步：循环引用\"><a href=\"#第三步：循环引用\" class=\"headerlink\" title=\"第三步：循环引用\"></a>第三步：循环引用</h2><p>我们知道 <code>JSON</code> 无法深拷贝循环引用，遇到这种情况会抛出异常。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 木易杨</span></span><br><span class=\"line\"><span class=\"comment\">// 此处 a 是文章开始的测试用例</span></span><br><span class=\"line\">a.circleRef = a;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(a));</span><br><span class=\"line\"><span class=\"comment\">// TypeError: Converting circular structure to JSON</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1、使用哈希表\"><a href=\"#1、使用哈希表\" class=\"headerlink\" title=\"1、使用哈希表\"></a>1、使用哈希表</h3><p>解决方案很简单，其实就是循环检测，我们设置一个数组或者哈希表存储已拷贝过的对象，当检测到当前对象已存在于哈希表中时，取出该值并返回即可。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 木易杨</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cloneDeep3</span>(<span class=\"params\">source, hash = new WeakMap(</span>)) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isObject(source)) <span class=\"keyword\">return</span> source; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hash.has(source)) <span class=\"keyword\">return</span> hash.get(source); <span class=\"comment\">// 新增代码，查哈希表</span></span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"keyword\">var</span> target = <span class=\"built_in\">Array</span>.isArray(source) ? [] : &#123;&#125;;</span><br><span class=\"line\">    hash.set(source, target); <span class=\"comment\">// 新增代码，哈希表设值</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> source) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.prototype.hasOwnProperty.call(source, key)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isObject(source[key])) &#123;</span><br><span class=\"line\">                target[key] = cloneDeep3(source[key], hash); <span class=\"comment\">// 新增代码，传入哈希表</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                target[key] = source[key];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> target;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试一下，看看效果如何。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 木易杨</span></span><br><span class=\"line\"><span class=\"comment\">// 此处 a 是文章开始的测试用例</span></span><br><span class=\"line\">a.circleRef = a;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = cloneDeep3(a);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\"><span class=\"comment\">// &#123;</span></span><br><span class=\"line\"><span class=\"comment\">// \tname: \"muyiy\",</span></span><br><span class=\"line\"><span class=\"comment\">// \ta1: undefined,</span></span><br><span class=\"line\"><span class=\"comment\">//\ta2: null,</span></span><br><span class=\"line\"><span class=\"comment\">// \ta3: 123,</span></span><br><span class=\"line\"><span class=\"comment\">// \tbook: &#123;title: \"You Don't Know JS\", price: \"45\"&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">// \tcircleRef: &#123;name: \"muyiy\", book: &#123;…&#125;, a1: undefined, a2: null, a3: 123, …&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>完美！</p>\n<h3 id=\"2、使用数组\"><a href=\"#2、使用数组\" class=\"headerlink\" title=\"2、使用数组\"></a>2、使用数组</h3><p>这里使用了 <code>ES6</code> 中的 <code>WeakMap</code> 来处理，那在 <code>ES5</code> 下应该如何处理呢？</p>\n<p>也很简单，使用数组来处理就好啦，代码如下。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 木易杨</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cloneDeep3</span>(<span class=\"params\">source, uniqueList</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isObject(source)) <span class=\"keyword\">return</span> source; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!uniqueList) uniqueList = []; <span class=\"comment\">// 新增代码，初始化数组</span></span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"keyword\">var</span> target = <span class=\"built_in\">Array</span>.isArray(source) ? [] : &#123;&#125;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// ============= 新增代码</span></span><br><span class=\"line\">    <span class=\"comment\">// 数据已经存在，返回保存的数据</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> uniqueData = find(uniqueList, source);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (uniqueData) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> uniqueData.target;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"comment\">// 数据不存在，保存源数据，以及对应的引用</span></span><br><span class=\"line\">    uniqueList.push(&#123;</span><br><span class=\"line\">        source: source,</span><br><span class=\"line\">        target: target</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">// =============</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> source) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.prototype.hasOwnProperty.call(source, key)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isObject(source[key])) &#123;</span><br><span class=\"line\">                target[key] = cloneDeep3(source[key], uniqueList); <span class=\"comment\">// 新增代码，传入数组</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                target[key] = source[key];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> target;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 新增方法，用于查找</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">find</span>(<span class=\"params\">arr, item</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arr[i].source === item) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> arr[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 用上面测试用例已测试通过</span></span><br></pre></td></tr></table></figure>\n\n<p>现在已经很完美的解决了循环引用这种情况，那其实还是一种情况是引用丢失，我们看下面的例子。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 木易杨</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = &#123;<span class=\"attr\">a</span>: obj1, <span class=\"attr\">b</span>: obj1&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">obj2.a === obj2.b; </span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj3 = cloneDeep2(obj2);</span><br><span class=\"line\">obj3.a === obj3.b; </span><br><span class=\"line\"><span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<p>引用丢失在某些情况下是有问题的，比如上面的对象 obj2，obj2 的键值 a 和 b 同时引用了同一个对象 obj1，使用 cloneDeep2 进行深拷贝后就丢失了引用关系变成了两个不同的对象，那如何处理呢。</p>\n<p>其实你有没有发现，我们的 cloneDeep3 已经解决了这个问题，因为只要存储已拷贝过的对象就可以了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 木易杨</span><br><span class=\"line\">var obj3 &#x3D; cloneDeep3(obj2);</span><br><span class=\"line\">obj3.a &#x3D;&#x3D;&#x3D; obj3.b; </span><br><span class=\"line\">&#x2F;&#x2F; true</span><br></pre></td></tr></table></figure>\n\n<p>完美！</p>\n<h2 id=\"第四步：拷贝-Symbol\"><a href=\"#第四步：拷贝-Symbol\" class=\"headerlink\" title=\"第四步：拷贝 Symbol\"></a>第四步：拷贝 <code>Symbol</code></h2><p>这个时候可能要搞事情了，那我们能不能拷贝 Symol 类型呢？</p>\n<p>当然可以，不过 <code>Symbol</code> 在 <code>ES6</code> 下才有，我们需要一些方法来检测出 <code>Symble</code> 类型。</p>\n<p>方法一：<code>Object.getOwnPropertySymbols(...)</code></p>\n<p>方法二：<code>Reflect.ownKeys(...)</code></p>\n<p><strong>对于方法一</strong>可以查找一个给定对象的符号属性时返回一个 <code>?symbol</code> 类型的数组。注意，每个初始化的对象都是没有自己的 <code>symbol</code> 属性的，因此这个数组可能为空，除非你已经在对象上设置了 <code>symbol</code> 属性。（来自 MDN）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"built_in\">Symbol</span>(<span class=\"string\">\"a\"</span>); <span class=\"comment\">// 创建新的symbol类型</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"built_in\">Symbol</span>.for(<span class=\"string\">\"b\"</span>); <span class=\"comment\">// 从全局的symbol注册?表设置和取得symbol</span></span><br><span class=\"line\"></span><br><span class=\"line\">obj[a] = <span class=\"string\">\"localSymbol\"</span>;</span><br><span class=\"line\">obj[b] = <span class=\"string\">\"globalSymbol\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> objectSymbols = <span class=\"built_in\">Object</span>.getOwnPropertySymbols(obj);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(objectSymbols.length); <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(objectSymbols)         <span class=\"comment\">// [Symbol(a), Symbol(b)]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(objectSymbols[<span class=\"number\">0</span>])      <span class=\"comment\">// Symbol(a)</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>对于方法二</strong>返回一个由目标对象<strong>自身</strong>的属性键组成的数组。它的返回值等同于<code>Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target))</code>。(来自 MDN)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Reflect.ownKeys(&#123;z: 3, y: 2, x: 1&#125;); &#x2F;&#x2F; [ &quot;z&quot;, &quot;y&quot;, &quot;x&quot; ]</span><br><span class=\"line\">Reflect.ownKeys([]); &#x2F;&#x2F; [&quot;length&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">var sym &#x3D; Symbol.for(&quot;comet&quot;);</span><br><span class=\"line\">var sym2 &#x3D; Symbol.for(&quot;meteor&quot;);</span><br><span class=\"line\">var obj &#x3D; &#123;[sym]: 0, &quot;str&quot;: 0, &quot;773&quot;: 0, &quot;0&quot;: 0,</span><br><span class=\"line\">           [sym2]: 0, &quot;-1&quot;: 0, &quot;8&quot;: 0, &quot;second str&quot;: 0&#125;;</span><br><span class=\"line\">Reflect.ownKeys(obj);</span><br><span class=\"line\">&#x2F;&#x2F; [ &quot;0&quot;, &quot;8&quot;, &quot;773&quot;, &quot;str&quot;, &quot;-1&quot;, &quot;second str&quot;, Symbol(comet), Symbol(meteor) ]</span><br><span class=\"line\">&#x2F;&#x2F; 注意顺序</span><br><span class=\"line\">&#x2F;&#x2F; Indexes in numeric order, </span><br><span class=\"line\">&#x2F;&#x2F; strings in insertion order, </span><br><span class=\"line\">&#x2F;&#x2F; symbols in insertion order</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h3><p>思路就是先查找有没有 <code>Symbol</code> 属性，如果查找到则先遍历处理 <code>Symbol</code> 情况，然后再处理正常情况，多出来的逻辑就是下面的新增代码。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 木易杨</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cloneDeep4</span>(<span class=\"params\">source, hash = new WeakMap(</span>)) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isObject(source)) <span class=\"keyword\">return</span> source; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hash.has(source)) <span class=\"keyword\">return</span> hash.get(source); </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"keyword\">let</span> target = <span class=\"built_in\">Array</span>.isArray(source) ? [] : &#123;&#125;;</span><br><span class=\"line\">    hash.set(source, target);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// ============= 新增代码</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> symKeys = <span class=\"built_in\">Object</span>.getOwnPropertySymbols(source); <span class=\"comment\">// 查找</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (symKeys.length) &#123; <span class=\"comment\">// 查找成功\t</span></span><br><span class=\"line\">        symKeys.forEach(<span class=\"function\"><span class=\"params\">symKey</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isObject(source[symKey])) &#123;</span><br><span class=\"line\">                target[symKey] = cloneDeep4(source[symKey], hash); </span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                target[symKey] = source[symKey];</span><br><span class=\"line\">            &#125;    </span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// =============</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> source) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.prototype.hasOwnProperty.call(source, key)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isObject(source[key])) &#123;</span><br><span class=\"line\">                target[key] = cloneDeep4(source[key], hash); </span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                target[key] = source[key];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> target;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试下效果</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 木易杨</span></span><br><span class=\"line\"><span class=\"comment\">// 此处 a 是文章开始的测试用例</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sym1 = <span class=\"built_in\">Symbol</span>(<span class=\"string\">\"a\"</span>); <span class=\"comment\">// 创建新的symbol类型</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sym2 = <span class=\"built_in\">Symbol</span>.for(<span class=\"string\">\"b\"</span>); <span class=\"comment\">// 从全局的symbol注册?表设置和取得symbol</span></span><br><span class=\"line\"></span><br><span class=\"line\">a[sym1] = <span class=\"string\">\"localSymbol\"</span>;</span><br><span class=\"line\">a[sym2] = <span class=\"string\">\"globalSymbol\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = cloneDeep4(a);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\"><span class=\"comment\">// &#123;</span></span><br><span class=\"line\"><span class=\"comment\">// \tname: \"muyiy\",</span></span><br><span class=\"line\"><span class=\"comment\">// \ta1: undefined,</span></span><br><span class=\"line\"><span class=\"comment\">//\ta2: null,</span></span><br><span class=\"line\"><span class=\"comment\">// \ta3: 123,</span></span><br><span class=\"line\"><span class=\"comment\">// \tbook: &#123;title: \"You Don't Know JS\", price: \"45\"&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">// \tcircleRef: &#123;name: \"muyiy\", book: &#123;…&#125;, a1: undefined, a2: null, a3: 123, …&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">//  [Symbol(a)]: 'localSymbol',</span></span><br><span class=\"line\"><span class=\"comment\">//  [Symbol(b)]: 'globalSymbol'</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>完美！</p>\n<h3 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 木易杨</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cloneDeep4</span>(<span class=\"params\">source, hash = new WeakMap(</span>)) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isObject(source)) <span class=\"keyword\">return</span> source; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hash.has(source)) <span class=\"keyword\">return</span> hash.get(source); </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"keyword\">let</span> target = <span class=\"built_in\">Array</span>.isArray(source) ? [] : &#123;&#125;;</span><br><span class=\"line\">    hash.set(source, target);</span><br><span class=\"line\">    </span><br><span class=\"line\">  \t<span class=\"built_in\">Reflect</span>.ownKeys(source).forEach(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123; <span class=\"comment\">// 改动</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isObject(source[key])) &#123;</span><br><span class=\"line\">            target[key] = cloneDeep4(source[key], hash); </span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            target[key] = source[key];</span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">  \t&#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> target;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试已通过</span></span><br></pre></td></tr></table></figure>\n\n<p>这里使用了 <code>Reflect.ownKeys()</code> 获取所有的键值，同时包括 <code>Symbol</code>，对 source 遍历赋值即可。</p>\n<p>写到这里已经差不多了，我们再延伸下，对于 <code>target</code> 换一种写法，改动如下。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 木易杨</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cloneDeep4</span>(<span class=\"params\">source, hash = new WeakMap(</span>)) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isObject(source)) <span class=\"keyword\">return</span> source; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hash.has(source)) <span class=\"keyword\">return</span> hash.get(source); </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"keyword\">let</span> target = <span class=\"built_in\">Array</span>.isArray(source) ? [...source] : &#123; ...source &#125;; <span class=\"comment\">// 改动 1</span></span><br><span class=\"line\">    hash.set(source, target);</span><br><span class=\"line\">    </span><br><span class=\"line\">  \t<span class=\"built_in\">Reflect</span>.ownKeys(target).forEach(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123; <span class=\"comment\">// 改动 2</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isObject(source[key])) &#123;</span><br><span class=\"line\">            target[key] = cloneDeep4(source[key], hash); </span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            target[key] = source[key];</span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">  \t&#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> target;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试已通过</span></span><br></pre></td></tr></table></figure>\n\n<p>在改动 1 中，返回一个新数组或者新对象，获取到源对象之后就可以如改动 2 所示传入 target 遍历赋值即可。</p>\n<p><code>Reflect.ownKeys()</code> 这种方式的问题在于不能深拷贝原型链上的数据，因为返回的是目标对象<strong>自身</strong>的属性键组成的数组。如果想深拷贝原型链上的数据怎么办，那用 <code>for..in</code> 就可以了。</p>\n<p>我们再介绍下两个知识点，分别是<strong>构造字面量数组时使用展开语法</strong>和<strong>构造字面量对象时使用展开语法</strong>。（以下代码示例来源于 MDN）</p>\n<h4 id=\"1、展开语法之字面量数组\"><a href=\"#1、展开语法之字面量数组\" class=\"headerlink\" title=\"1、展开语法之字面量数组\"></a>1、展开语法之字面量数组</h4><p>这是 <code>ES2015 （ES6）</code> 才有的语法，可以通过字面量方式, 构造新数组，而不再需要组合使用 <code>push</code>, <code>splice</code>, <code>concat</code> 等方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> parts = [<span class=\"string\">'shoulders'</span>, <span class=\"string\">'knees'</span>]; </span><br><span class=\"line\"><span class=\"keyword\">var</span> lyrics = [<span class=\"string\">'head'</span>, ...parts, <span class=\"string\">'and'</span>, <span class=\"string\">'toes'</span>]; </span><br><span class=\"line\"><span class=\"comment\">// [\"head\", \"shoulders\", \"knees\", \"and\", \"toes\"]</span></span><br></pre></td></tr></table></figure>\n\n<p>这里的使用方法和参数列表的展开有点类似。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myFunction</span>(<span class=\"params\">v, w, x, y, z</span>) </span>&#123; &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> args = [<span class=\"number\">0</span>, <span class=\"number\">1</span>];</span><br><span class=\"line\">myFunction(<span class=\"number\">-1</span>, ...args, <span class=\"number\">2</span>, ...[<span class=\"number\">3</span>]);</span><br></pre></td></tr></table></figure>\n\n<p>返回的是新数组，对新数组修改之后不会影响到旧数组，类似于 <code>arr.slice()</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = [...arr]; <span class=\"comment\">// like arr.slice()</span></span><br><span class=\"line\">arr2.push(<span class=\"number\">4</span>); </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// arr2 此时变成 [1, 2, 3, 4]</span></span><br><span class=\"line\"><span class=\"comment\">// arr 不受影响</span></span><br></pre></td></tr></table></figure>\n\n<p>展开语法和 <code>Object.assign()</code> 行为一致, 执行的都是浅拷贝（即只遍历一层）。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [[<span class=\"number\">1</span>], [<span class=\"number\">2</span>], [<span class=\"number\">3</span>]];</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = [...a];</span><br><span class=\"line\">b.shift().shift(); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// [[], [2], [3]]</span></span><br></pre></td></tr></table></figure>\n\n<p>这里 a 是多层数组，b 只拷贝了第一层，对于第二层依旧和 a 持有同一个地址，所以对 b 的修改会影响到 a。</p>\n<h4 id=\"2、展开语法之字面量对象\"><a href=\"#2、展开语法之字面量对象\" class=\"headerlink\" title=\"2、展开语法之字面量对象\"></a>2、展开语法之字面量对象</h4><p>这是 <code>ES2018</code> 才有的语法，将已有对象的所有<strong>可枚举属性</strong>拷贝到新构造的对象中，类似于 <code>Object.assign()</code> 方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">'bar'</span>, <span class=\"attr\">x</span>: <span class=\"number\">42</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">'baz'</span>, <span class=\"attr\">y</span>: <span class=\"number\">13</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> clonedObj = &#123; ...obj1 &#125;;</span><br><span class=\"line\"><span class=\"comment\">// &#123; foo: \"bar\", x: 42 &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> mergedObj = &#123; ...obj1, ...obj2 &#125;;</span><br><span class=\"line\"><span class=\"comment\">// &#123; foo: \"baz\", x: 42, y: 13 &#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>Object.assign()</code> 函数会触发 setters，而展开语法不会。有时候不能替换或者模拟 <code>Object.assign()</code> 函数，因为会得到意想不到的结果，如下所示。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">'bar'</span>, <span class=\"attr\">x</span>: <span class=\"number\">42</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">'baz'</span>, <span class=\"attr\">y</span>: <span class=\"number\">13</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> merge = <span class=\"function\">(<span class=\"params\"> ...objects </span>) =&gt;</span> ( &#123; ...objects &#125; );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> mergedObj = merge ( obj1, obj2);</span><br><span class=\"line\"><span class=\"comment\">// &#123; 0: &#123; foo: 'bar', x: 42 &#125;, 1: &#123; foo: 'baz', y: 13 &#125; &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> mergedObj = merge ( &#123;&#125;, obj1, obj2);</span><br><span class=\"line\"><span class=\"comment\">// &#123; 0: &#123;&#125;, 1: &#123; foo: 'bar', x: 42 &#125;, 2: &#123; foo: 'baz', y: 13 &#125; &#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>这里实际上是将多个解构变为剩余参数（ <code>rest</code> ），然后再将剩余参数展开为字面量对象.</p>\n<h2 id=\"第五步：破解递归爆栈\"><a href=\"#第五步：破解递归爆栈\" class=\"headerlink\" title=\"第五步：破解递归爆栈\"></a>第五步：破解递归爆栈</h2><p>上面四步使用的都是递归方法，但是有一个问题在于会爆栈，错误提示如下。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// RangeError: Maximum call stack size exceeded</span></span><br></pre></td></tr></table></figure>\n\n<p>那应该如何解决呢？其实我们使用循环就可以了，代码如下。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cloneDeep5</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> root = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 栈</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> loopList = [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            parent: root,</span><br><span class=\"line\">            key: <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">            data: x,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(loopList.length) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 广度优先</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> node = loopList.pop();</span><br><span class=\"line\">        <span class=\"keyword\">const</span> parent = node.parent;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> key = node.key;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> data = node.data;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 初始化赋值目标，key为undefined则拷贝到父元素，否则拷贝到子元素</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> res = parent;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> key !== <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">            res = parent[key] = &#123;&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> k <span class=\"keyword\">in</span> data) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (data.hasOwnProperty(k)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> data[k] === <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 下一次循环</span></span><br><span class=\"line\">                    loopList.push(&#123;</span><br><span class=\"line\">                        parent: res,</span><br><span class=\"line\">                        key: k,</span><br><span class=\"line\">                        data: data[k],</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    res[k] = data[k];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>由于篇幅问题就不过多介绍了，详情请参考下面这篇文章。</p>\n<blockquote>\n<p><a href=\"https://segmentfault.com/a/1190000016672263\" target=\"_blank\" rel=\"noopener\">深拷贝的终极探索（99% 的人都不知道）</a></p>\n</blockquote>\n<h2 id=\"本期思考题\"><a href=\"#本期思考题\" class=\"headerlink\" title=\"本期思考题\"></a>本期思考题</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如何用 JS 实现 JSON.parse?</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><blockquote>\n<p><a href=\"http://jerryzou.com/posts/dive-into-deep-clone-in-javascript/\" target=\"_blank\" rel=\"noopener\">深入剖析 JavaScript 的深复制</a></p>\n<p><a href=\"https://segmentfault.com/a/1190000016672263\" target=\"_blank\" rel=\"noopener\">深拷贝的终极探索（99% 的人都不知道）</a></p>\n<p><a href=\"https://www.jianshu.com/p/b08bc61714c7\" target=\"_blank\" rel=\"noopener\">深入 js 深拷贝对象</a></p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Spread_syntax\" target=\"_blank\" rel=\"noopener\">MDN 之展开语法</a></p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol\" target=\"_blank\" rel=\"noopener\">MDN 之 Symbol</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://github.com/yygmind/blog\" target=\"_blank\" rel=\"noopener\">https://github.com/yygmind/blog</a></p>\n</blockquote>"},{"layout":"[post]","title":"手撕代码","date":"2020-05-30T09:18:36.000Z","_content":"手写代码\n----\n<!-- more -->\n\n### new 操作符\n\n```js\nvar New = function(Fn) {\n  var obj = {}; // 创建空对象\n  var arg = Array.prototype.slice.call(arguments, 1);\n  obj.__proto__ = Fn.prototype; // 将obj的原型链__proto__指向构造函数的原型prototype\n  obj.__proto__.constructor = Fn; // 在原型链 __proto__上设置构造函数的构造器constructor，为了实例化Fn\n  Fn.apply(obj, arg); // 执行Fn，并将构造函数Fn执行obj\n  return obj; // 返回结果\n};\n```\n\n### 深拷贝\n\n```js\nconst getType = data => {\n  // 获取数据类型\n  const baseType = Object.prototype.toString\n    .call(data)\n    .replace(/^\\[object\\s(.+)\\]$/g, \"$1\")\n    .toLowerCase();\n  const type = data instanceof Element ? \"element\" : baseType;\n  return type;\n};\nconst isPrimitive = data => {\n  // 判断是否是基本数据类型\n  const primitiveType = \"undefined,null,boolean,string,symbol,number,bigint,map,set,weakmap,weakset\".split(\n    \",\"\n  ); // 其实还有很多类型\n  return primitiveType.includes(getType(data));\n};\nconst isObject = data => getType(data) === \"object\";\nconst isArray = data => getType(data) === \"array\";\nconst deepClone = data => {\n  let cache = {}; // 缓存值，防止循环引用\n  const baseClone = _data => {\n    let res;\n    if (isPrimitive(_data)) {\n      return data;\n    } else if (isObject(_data)) {\n      res = { ..._data };\n    } else if (isArray(_data)) {\n      res = [..._data];\n    }\n    // 判断是否有复杂类型的数据，有就递归\n    Reflect.ownKeys(res).forEach(key => {\n      if (res[key] && getType(res[key]) === \"object\") {\n        // 用cache来记录已经被复制过的引用地址。用来解决循环引用的问题\n        if (cache[res[key]]) {\n          res[key] = cache[res[key]];\n        } else {\n          cache[res[key]] = res[key];\n          res[key] = baseClone(res[key]);\n        }\n      }\n    });\n    return res;\n  };\n  return baseClone(data);\n};\n```\n\n### 手写 bind\n\n```js\nFunction.prototype.bind2 = function(context) {\n  if (typeof this !== \"function\") {\n    throw new Error(\"...\");\n  }\n  var that = this;\n  var args1 = Array.prototype.slice.call(arguments, 1);\n  var bindFn = function() {\n    var args2 = Array.prototype.slice.call(arguments);\n    var that2 = this instanceof bindFn ? this : context; // 如果当前函数的this指向的是构造函数中的this 则判定为new 操作。如果this是构造函数bindFn new出来的实例，那么此处的this一定是该实例本身。\n    return that.apply(that2, args1.concat(args2));\n  };\n  var Fn = function() {}; // 连接原型链用Fn\n  // 原型赋值\n  Fn.prototype = this.prototype; // bindFn的prototype指向和this的prototype一样，指向同一个原型对象\n  bindFn.prototype = new Fn();\n  return bindFn;\n};\n```\n\n### 手写函数柯里化\n\n```\nconst curry = fn => {\n  if (typeof fn !== \"function\") {\n    throw Error(\"No function provided\");\n  }\n  return function curriedFn(...args) {\n    if (args.length < fn.length) {\n      return function() {\n        return curriedFn.apply(null, args.concat([].slice.call(arguments)));\n      };\n    }\n    return fn.apply(null, args);\n  };\n};\n```\n\n### 手写 Promise\n\n```js\n// 来源于 https://github.com/bailnl/promise/blob/master/src/promise.js\nconst PENDING = 0;\nconst FULFILLED = 1;\nconst REJECTED = 2;\n\nconst isFunction = fn => typeof fn === \"function\";\nconst isObject = obj => obj !== null && typeof obj === \"object\";\nconst noop = () => {};\n\nconst nextTick = fn => setTimeout(fn, 0);\n\nconst resolve = (promise, x) => {\n  if (promise === x) {\n    reject(promise, new TypeError(\"You cannot resolve a promise with itself\"));\n  } else if (x && x.constructor === Promise) {\n    if (x._stauts === PENDING) {\n      const handler = statusHandler => value => statusHandler(promise, value);\n      x.then(handler(resolve), handler(reject));\n    } else if (x._stauts === FULFILLED) {\n      fulfill(promise, x._value);\n    } else if (x._stauts === REJECTED) {\n      reject(promise, x._value);\n    }\n  } else if (isFunction(x) || isObject(x)) {\n    let isCalled = false;\n    try {\n      const then = x.then;\n      if (isFunction(then)) {\n        const handler = statusHandler => value => {\n          if (!isCalled) {\n            statusHandler(promise, value);\n          }\n          isCalled = true;\n        };\n        then.call(x, handler(resolve), handler(reject));\n      } else {\n        fulfill(promise, x);\n      }\n    } catch (e) {\n      if (!isCalled) {\n        reject(promise, e);\n      }\n    }\n  } else {\n    fulfill(promise, x);\n  }\n};\n\nconst reject = (promise, reason) => {\n  if (promise._stauts !== PENDING) {\n    return;\n  }\n  promise._stauts = REJECTED;\n  promise._value = reason;\n  invokeCallback(promise);\n};\n\nconst fulfill = (promise, value) => {\n  if (promise._stauts !== PENDING) {\n    return;\n  }\n  promise._stauts = FULFILLED;\n  promise._value = value;\n  invokeCallback(promise);\n};\n\nconst invokeCallback = promise => {\n  if (promise._stauts === PENDING) {\n    return;\n  }\n  nextTick(() => {\n    while (promise._callbacks.length) {\n      const {\n        onFulfilled = value => value,\n        onRejected = reason => {\n          throw reason;\n        },\n        thenPromise\n      } = promise._callbacks.shift();\n      let value;\n      try {\n        value = (promise._stauts === FULFILLED ? onFulfilled : onRejected)(\n          promise._value\n        );\n      } catch (e) {\n        reject(thenPromise, e);\n        continue;\n      }\n      resolve(thenPromise, value);\n    }\n  });\n};\n\nclass Promise {\n  static resolve(value) {\n    return new Promise((resolve, reject) => resolve(value));\n  }\n  static reject(reason) {\n    return new Promise((resolve, reject) => reject(reason));\n  }\n  constructor(resolver) {\n    if (!(this instanceof Promise)) {\n      throw new TypeError(\n        `Class constructor Promise cannot be invoked without 'new'`\n      );\n    }\n\n    if (!isFunction(resolver)) {\n      throw new TypeError(`Promise resolver ${resolver} is not a function`);\n    }\n\n    this._stauts = PENDING;\n    this._value = undefined;\n    this._callbacks = [];\n\n    try {\n      resolver(value => resolve(this, value), reason => reject(this, reason));\n    } catch (e) {\n      reject(this, e);\n    }\n  }\n\n  then(onFulfilled, onRejected) {\n    const thenPromise = new this.constructor(noop);\n    this._callbacks = this._callbacks.concat([\n      {\n        onFulfilled: isFunction(onFulfilled) ? onFulfilled : void 0,\n        onRejected: isFunction(onRejected) ? onRejected : void 0,\n        thenPromise\n      }\n    ]);\n    invokeCallback(this);\n    return thenPromise;\n  }\n  catch(onRejected) {\n    return this.then(void 0, onRejected);\n  }\n}\n```\n\n### 手写防抖函数\n\n```js\nconst debounce = (fn = {}, wait = 50, immediate) => {\n  let timer;\n  return function() {\n    if (immediate) {\n      fn.apply(this, arguments);\n    }\n    if (timer) {\n      clearTimeout(timer);\n      timer = null;\n    }\n    timer = setTimeout(() => {\n      fn.apply(this, arguments);\n    }, wait);\n  };\n};\n```\n\n### 手写节流函数\n\n```js\nvar throttle = (fn = {}, wait = 0) => {\n  let prev = new Date();\n  return function() {\n    const args = arguments;\n    const now = new Date();\n    if (now - prev > wait) {\n      fn.apply(this, args);\n      prev = new Date();\n    }\n  };\n};\n```\n\n### 手写 instanceOf\n\n```js\nconst instanceOf = (left, right) => {\n  let proto = left.__proto__;\n  let prototype = right.prototype;\n  while (true) {\n    if (proto === null) {\n      return false;\n    } else if (proto === prototype) {\n      return true;\n    }\n    proto = proto.__proto__;\n  }\n};\n```\n","source":"_posts/手撕代码.md","raw":"---\nlayout: '[post]'\ntitle: 手撕代码\ndate: 2020-05-30 17:18:36\ntags: 面试\n---\n手写代码\n----\n<!-- more -->\n\n### new 操作符\n\n```js\nvar New = function(Fn) {\n  var obj = {}; // 创建空对象\n  var arg = Array.prototype.slice.call(arguments, 1);\n  obj.__proto__ = Fn.prototype; // 将obj的原型链__proto__指向构造函数的原型prototype\n  obj.__proto__.constructor = Fn; // 在原型链 __proto__上设置构造函数的构造器constructor，为了实例化Fn\n  Fn.apply(obj, arg); // 执行Fn，并将构造函数Fn执行obj\n  return obj; // 返回结果\n};\n```\n\n### 深拷贝\n\n```js\nconst getType = data => {\n  // 获取数据类型\n  const baseType = Object.prototype.toString\n    .call(data)\n    .replace(/^\\[object\\s(.+)\\]$/g, \"$1\")\n    .toLowerCase();\n  const type = data instanceof Element ? \"element\" : baseType;\n  return type;\n};\nconst isPrimitive = data => {\n  // 判断是否是基本数据类型\n  const primitiveType = \"undefined,null,boolean,string,symbol,number,bigint,map,set,weakmap,weakset\".split(\n    \",\"\n  ); // 其实还有很多类型\n  return primitiveType.includes(getType(data));\n};\nconst isObject = data => getType(data) === \"object\";\nconst isArray = data => getType(data) === \"array\";\nconst deepClone = data => {\n  let cache = {}; // 缓存值，防止循环引用\n  const baseClone = _data => {\n    let res;\n    if (isPrimitive(_data)) {\n      return data;\n    } else if (isObject(_data)) {\n      res = { ..._data };\n    } else if (isArray(_data)) {\n      res = [..._data];\n    }\n    // 判断是否有复杂类型的数据，有就递归\n    Reflect.ownKeys(res).forEach(key => {\n      if (res[key] && getType(res[key]) === \"object\") {\n        // 用cache来记录已经被复制过的引用地址。用来解决循环引用的问题\n        if (cache[res[key]]) {\n          res[key] = cache[res[key]];\n        } else {\n          cache[res[key]] = res[key];\n          res[key] = baseClone(res[key]);\n        }\n      }\n    });\n    return res;\n  };\n  return baseClone(data);\n};\n```\n\n### 手写 bind\n\n```js\nFunction.prototype.bind2 = function(context) {\n  if (typeof this !== \"function\") {\n    throw new Error(\"...\");\n  }\n  var that = this;\n  var args1 = Array.prototype.slice.call(arguments, 1);\n  var bindFn = function() {\n    var args2 = Array.prototype.slice.call(arguments);\n    var that2 = this instanceof bindFn ? this : context; // 如果当前函数的this指向的是构造函数中的this 则判定为new 操作。如果this是构造函数bindFn new出来的实例，那么此处的this一定是该实例本身。\n    return that.apply(that2, args1.concat(args2));\n  };\n  var Fn = function() {}; // 连接原型链用Fn\n  // 原型赋值\n  Fn.prototype = this.prototype; // bindFn的prototype指向和this的prototype一样，指向同一个原型对象\n  bindFn.prototype = new Fn();\n  return bindFn;\n};\n```\n\n### 手写函数柯里化\n\n```\nconst curry = fn => {\n  if (typeof fn !== \"function\") {\n    throw Error(\"No function provided\");\n  }\n  return function curriedFn(...args) {\n    if (args.length < fn.length) {\n      return function() {\n        return curriedFn.apply(null, args.concat([].slice.call(arguments)));\n      };\n    }\n    return fn.apply(null, args);\n  };\n};\n```\n\n### 手写 Promise\n\n```js\n// 来源于 https://github.com/bailnl/promise/blob/master/src/promise.js\nconst PENDING = 0;\nconst FULFILLED = 1;\nconst REJECTED = 2;\n\nconst isFunction = fn => typeof fn === \"function\";\nconst isObject = obj => obj !== null && typeof obj === \"object\";\nconst noop = () => {};\n\nconst nextTick = fn => setTimeout(fn, 0);\n\nconst resolve = (promise, x) => {\n  if (promise === x) {\n    reject(promise, new TypeError(\"You cannot resolve a promise with itself\"));\n  } else if (x && x.constructor === Promise) {\n    if (x._stauts === PENDING) {\n      const handler = statusHandler => value => statusHandler(promise, value);\n      x.then(handler(resolve), handler(reject));\n    } else if (x._stauts === FULFILLED) {\n      fulfill(promise, x._value);\n    } else if (x._stauts === REJECTED) {\n      reject(promise, x._value);\n    }\n  } else if (isFunction(x) || isObject(x)) {\n    let isCalled = false;\n    try {\n      const then = x.then;\n      if (isFunction(then)) {\n        const handler = statusHandler => value => {\n          if (!isCalled) {\n            statusHandler(promise, value);\n          }\n          isCalled = true;\n        };\n        then.call(x, handler(resolve), handler(reject));\n      } else {\n        fulfill(promise, x);\n      }\n    } catch (e) {\n      if (!isCalled) {\n        reject(promise, e);\n      }\n    }\n  } else {\n    fulfill(promise, x);\n  }\n};\n\nconst reject = (promise, reason) => {\n  if (promise._stauts !== PENDING) {\n    return;\n  }\n  promise._stauts = REJECTED;\n  promise._value = reason;\n  invokeCallback(promise);\n};\n\nconst fulfill = (promise, value) => {\n  if (promise._stauts !== PENDING) {\n    return;\n  }\n  promise._stauts = FULFILLED;\n  promise._value = value;\n  invokeCallback(promise);\n};\n\nconst invokeCallback = promise => {\n  if (promise._stauts === PENDING) {\n    return;\n  }\n  nextTick(() => {\n    while (promise._callbacks.length) {\n      const {\n        onFulfilled = value => value,\n        onRejected = reason => {\n          throw reason;\n        },\n        thenPromise\n      } = promise._callbacks.shift();\n      let value;\n      try {\n        value = (promise._stauts === FULFILLED ? onFulfilled : onRejected)(\n          promise._value\n        );\n      } catch (e) {\n        reject(thenPromise, e);\n        continue;\n      }\n      resolve(thenPromise, value);\n    }\n  });\n};\n\nclass Promise {\n  static resolve(value) {\n    return new Promise((resolve, reject) => resolve(value));\n  }\n  static reject(reason) {\n    return new Promise((resolve, reject) => reject(reason));\n  }\n  constructor(resolver) {\n    if (!(this instanceof Promise)) {\n      throw new TypeError(\n        `Class constructor Promise cannot be invoked without 'new'`\n      );\n    }\n\n    if (!isFunction(resolver)) {\n      throw new TypeError(`Promise resolver ${resolver} is not a function`);\n    }\n\n    this._stauts = PENDING;\n    this._value = undefined;\n    this._callbacks = [];\n\n    try {\n      resolver(value => resolve(this, value), reason => reject(this, reason));\n    } catch (e) {\n      reject(this, e);\n    }\n  }\n\n  then(onFulfilled, onRejected) {\n    const thenPromise = new this.constructor(noop);\n    this._callbacks = this._callbacks.concat([\n      {\n        onFulfilled: isFunction(onFulfilled) ? onFulfilled : void 0,\n        onRejected: isFunction(onRejected) ? onRejected : void 0,\n        thenPromise\n      }\n    ]);\n    invokeCallback(this);\n    return thenPromise;\n  }\n  catch(onRejected) {\n    return this.then(void 0, onRejected);\n  }\n}\n```\n\n### 手写防抖函数\n\n```js\nconst debounce = (fn = {}, wait = 50, immediate) => {\n  let timer;\n  return function() {\n    if (immediate) {\n      fn.apply(this, arguments);\n    }\n    if (timer) {\n      clearTimeout(timer);\n      timer = null;\n    }\n    timer = setTimeout(() => {\n      fn.apply(this, arguments);\n    }, wait);\n  };\n};\n```\n\n### 手写节流函数\n\n```js\nvar throttle = (fn = {}, wait = 0) => {\n  let prev = new Date();\n  return function() {\n    const args = arguments;\n    const now = new Date();\n    if (now - prev > wait) {\n      fn.apply(this, args);\n      prev = new Date();\n    }\n  };\n};\n```\n\n### 手写 instanceOf\n\n```js\nconst instanceOf = (left, right) => {\n  let proto = left.__proto__;\n  let prototype = right.prototype;\n  while (true) {\n    if (proto === null) {\n      return false;\n    } else if (proto === prototype) {\n      return true;\n    }\n    proto = proto.__proto__;\n  }\n};\n```\n","slug":"手撕代码","published":1,"updated":"2020-06-11T09:21:24.000Z","comments":1,"photos":[],"link":"","_id":"ckbftlm7j002q7w2pf91w8hme","content":"<h2 id=\"手写代码\"><a href=\"#手写代码\" class=\"headerlink\" title=\"手写代码\"></a>手写代码</h2><a id=\"more\"></a>\n\n<h3 id=\"new-操作符\"><a href=\"#new-操作符\" class=\"headerlink\" title=\"new 操作符\"></a>new 操作符</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> New = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">Fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> obj = &#123;&#125;; <span class=\"comment\">// 创建空对象</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> arg = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">  obj.__proto__ = Fn.prototype; <span class=\"comment\">// 将obj的原型链__proto__指向构造函数的原型prototype</span></span><br><span class=\"line\">  obj.__proto__.constructor = Fn; <span class=\"comment\">// 在原型链 __proto__上设置构造函数的构造器constructor，为了实例化Fn</span></span><br><span class=\"line\">  Fn.apply(obj, arg); <span class=\"comment\">// 执行Fn，并将构造函数Fn执行obj</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> obj; <span class=\"comment\">// 返回结果</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"深拷贝\"><a href=\"#深拷贝\" class=\"headerlink\" title=\"深拷贝\"></a>深拷贝</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getType = <span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 获取数据类型</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> baseType = <span class=\"built_in\">Object</span>.prototype.toString</span><br><span class=\"line\">    .call(data)</span><br><span class=\"line\">    .replace(<span class=\"regexp\">/^\\[object\\s(.+)\\]$/g</span>, <span class=\"string\">\"$1\"</span>)</span><br><span class=\"line\">    .toLowerCase();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> type = data <span class=\"keyword\">instanceof</span> Element ? <span class=\"string\">\"element\"</span> : baseType;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> type;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> isPrimitive = <span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 判断是否是基本数据类型</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> primitiveType = <span class=\"string\">\"undefined,null,boolean,string,symbol,number,bigint,map,set,weakmap,weakset\"</span>.split(</span><br><span class=\"line\">    <span class=\"string\">\",\"</span></span><br><span class=\"line\">  ); <span class=\"comment\">// 其实还有很多类型</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> primitiveType.includes(getType(data));</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> isObject = <span class=\"function\"><span class=\"params\">data</span> =&gt;</span> getType(data) === <span class=\"string\">\"object\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> isArray = <span class=\"function\"><span class=\"params\">data</span> =&gt;</span> getType(data) === <span class=\"string\">\"array\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> deepClone = <span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> cache = &#123;&#125;; <span class=\"comment\">// 缓存值，防止循环引用</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> baseClone = <span class=\"function\"><span class=\"params\">_data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> res;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isPrimitive(_data)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> data;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isObject(_data)) &#123;</span><br><span class=\"line\">      res = &#123; ..._data &#125;;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isArray(_data)) &#123;</span><br><span class=\"line\">      res = [..._data];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 判断是否有复杂类型的数据，有就递归</span></span><br><span class=\"line\">    <span class=\"built_in\">Reflect</span>.ownKeys(res).forEach(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (res[key] &amp;&amp; getType(res[key]) === <span class=\"string\">\"object\"</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 用cache来记录已经被复制过的引用地址。用来解决循环引用的问题</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cache[res[key]]) &#123;</span><br><span class=\"line\">          res[key] = cache[res[key]];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          cache[res[key]] = res[key];</span><br><span class=\"line\">          res[key] = baseClone(res[key]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> baseClone(data);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"手写-bind\"><a href=\"#手写-bind\" class=\"headerlink\" title=\"手写 bind\"></a>手写 bind</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.bind2 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"keyword\">this</span> !== <span class=\"string\">\"function\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"...\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> args1 = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> bindFn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> args2 = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> that2 = <span class=\"keyword\">this</span> <span class=\"keyword\">instanceof</span> bindFn ? <span class=\"keyword\">this</span> : context; <span class=\"comment\">// 如果当前函数的this指向的是构造函数中的this 则判定为new 操作。如果this是构造函数bindFn new出来的实例，那么此处的this一定是该实例本身。</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> that.apply(that2, args1.concat(args2));</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> Fn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;; <span class=\"comment\">// 连接原型链用Fn</span></span><br><span class=\"line\">  <span class=\"comment\">// 原型赋值</span></span><br><span class=\"line\">  Fn.prototype = <span class=\"keyword\">this</span>.prototype; <span class=\"comment\">// bindFn的prototype指向和this的prototype一样，指向同一个原型对象</span></span><br><span class=\"line\">  bindFn.prototype = <span class=\"keyword\">new</span> Fn();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> bindFn;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"手写函数柯里化\"><a href=\"#手写函数柯里化\" class=\"headerlink\" title=\"手写函数柯里化\"></a>手写函数柯里化</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const curry &#x3D; fn &#x3D;&gt; &#123;</span><br><span class=\"line\">  if (typeof fn !&#x3D;&#x3D; &quot;function&quot;) &#123;</span><br><span class=\"line\">    throw Error(&quot;No function provided&quot;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return function curriedFn(...args) &#123;</span><br><span class=\"line\">    if (args.length &lt; fn.length) &#123;</span><br><span class=\"line\">      return function() &#123;</span><br><span class=\"line\">        return curriedFn.apply(null, args.concat([].slice.call(arguments)));</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return fn.apply(null, args);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"手写-Promise\"><a href=\"#手写-Promise\" class=\"headerlink\" title=\"手写 Promise\"></a>手写 Promise</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 来源于 https://github.com/bailnl/promise/blob/master/src/promise.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> PENDING = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> FULFILLED = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> REJECTED = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> isFunction = <span class=\"function\"><span class=\"params\">fn</span> =&gt;</span> <span class=\"keyword\">typeof</span> fn === <span class=\"string\">\"function\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> isObject = <span class=\"function\"><span class=\"params\">obj</span> =&gt;</span> obj !== <span class=\"literal\">null</span> &amp;&amp; <span class=\"keyword\">typeof</span> obj === <span class=\"string\">\"object\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> noop = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> nextTick = <span class=\"function\"><span class=\"params\">fn</span> =&gt;</span> setTimeout(fn, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> resolve = <span class=\"function\">(<span class=\"params\">promise, x</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (promise === x) &#123;</span><br><span class=\"line\">    reject(promise, <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">\"You cannot resolve a promise with itself\"</span>));</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (x &amp;&amp; x.constructor === <span class=\"built_in\">Promise</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x._stauts === PENDING) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> handler = <span class=\"function\"><span class=\"params\">statusHandler</span> =&gt;</span> <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> statusHandler(promise, value);</span><br><span class=\"line\">      x.then(handler(resolve), handler(reject));</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (x._stauts === FULFILLED) &#123;</span><br><span class=\"line\">      fulfill(promise, x._value);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (x._stauts === REJECTED) &#123;</span><br><span class=\"line\">      reject(promise, x._value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isFunction(x) || isObject(x)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> isCalled = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> then = x.then;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isFunction(then)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> handler = <span class=\"function\"><span class=\"params\">statusHandler</span> =&gt;</span> <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (!isCalled) &#123;</span><br><span class=\"line\">            statusHandler(promise, value);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          isCalled = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        then.call(x, handler(resolve), handler(reject));</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        fulfill(promise, x);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!isCalled) &#123;</span><br><span class=\"line\">        reject(promise, e);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    fulfill(promise, x);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> reject = <span class=\"function\">(<span class=\"params\">promise, reason</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (promise._stauts !== PENDING) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  promise._stauts = REJECTED;</span><br><span class=\"line\">  promise._value = reason;</span><br><span class=\"line\">  invokeCallback(promise);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> fulfill = <span class=\"function\">(<span class=\"params\">promise, value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (promise._stauts !== PENDING) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  promise._stauts = FULFILLED;</span><br><span class=\"line\">  promise._value = value;</span><br><span class=\"line\">  invokeCallback(promise);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> invokeCallback = <span class=\"function\"><span class=\"params\">promise</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (promise._stauts === PENDING) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (promise._callbacks.length) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">        onFulfilled = <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> value,</span><br><span class=\"line\">        onRejected = <span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">throw</span> reason;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        thenPromise</span><br><span class=\"line\">      &#125; = promise._callbacks.shift();</span><br><span class=\"line\">      <span class=\"keyword\">let</span> value;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        value = (promise._stauts === FULFILLED ? onFulfilled : onRejected)(</span><br><span class=\"line\">          promise._value</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">        reject(thenPromise, e);</span><br><span class=\"line\">        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      resolve(thenPromise, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Promise</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> resolve(value) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> resolve(value));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> reject(reason) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> reject(reason));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(resolver) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(<span class=\"keyword\">this</span> <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(</span><br><span class=\"line\">        <span class=\"string\">`Class constructor Promise cannot be invoked without 'new'`</span></span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isFunction(resolver)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">`Promise resolver <span class=\"subst\">$&#123;resolver&#125;</span> is not a function`</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._stauts = PENDING;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._value = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._callbacks = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      resolver(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> resolve(<span class=\"keyword\">this</span>, value), reason =&gt; reject(<span class=\"keyword\">this</span>, reason));</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">      reject(<span class=\"keyword\">this</span>, e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  then(onFulfilled, onRejected) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> thenPromise = <span class=\"keyword\">new</span> <span class=\"keyword\">this</span>.constructor(noop);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._callbacks = <span class=\"keyword\">this</span>._callbacks.concat([</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        onFulfilled: isFunction(onFulfilled) ? onFulfilled : <span class=\"keyword\">void</span> <span class=\"number\">0</span>,</span><br><span class=\"line\">        onRejected: isFunction(onRejected) ? onRejected : <span class=\"keyword\">void</span> <span class=\"number\">0</span>,</span><br><span class=\"line\">        thenPromise</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]);</span><br><span class=\"line\">    invokeCallback(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> thenPromise;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">catch</span>(onRejected) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.then(<span class=\"keyword\">void</span> <span class=\"number\">0</span>, onRejected);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"手写防抖函数\"><a href=\"#手写防抖函数\" class=\"headerlink\" title=\"手写防抖函数\"></a>手写防抖函数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> debounce = <span class=\"function\">(<span class=\"params\">fn = &#123;&#125;, wait = <span class=\"number\">50</span>, immediate</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timer;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (immediate) &#123;</span><br><span class=\"line\">      fn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (timer) &#123;</span><br><span class=\"line\">      clearTimeout(timer);</span><br><span class=\"line\">      timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    timer = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      fn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    &#125;, wait);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"手写节流函数\"><a href=\"#手写节流函数\" class=\"headerlink\" title=\"手写节流函数\"></a>手写节流函数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> throttle = <span class=\"function\">(<span class=\"params\">fn = &#123;&#125;, wait = <span class=\"number\">0</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> prev = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> now = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (now - prev &gt; wait) &#123;</span><br><span class=\"line\">      fn.apply(<span class=\"keyword\">this</span>, args);</span><br><span class=\"line\">      prev = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"手写-instanceOf\"><a href=\"#手写-instanceOf\" class=\"headerlink\" title=\"手写 instanceOf\"></a>手写 instanceOf</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> instanceOf = <span class=\"function\">(<span class=\"params\">left, right</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> proto = left.__proto__;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> prototype = right.prototype;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (proto === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (proto === prototype) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    proto = proto.__proto__;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"手写代码\"><a href=\"#手写代码\" class=\"headerlink\" title=\"手写代码\"></a>手写代码</h2>","more":"<h3 id=\"new-操作符\"><a href=\"#new-操作符\" class=\"headerlink\" title=\"new 操作符\"></a>new 操作符</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> New = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">Fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> obj = &#123;&#125;; <span class=\"comment\">// 创建空对象</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> arg = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">  obj.__proto__ = Fn.prototype; <span class=\"comment\">// 将obj的原型链__proto__指向构造函数的原型prototype</span></span><br><span class=\"line\">  obj.__proto__.constructor = Fn; <span class=\"comment\">// 在原型链 __proto__上设置构造函数的构造器constructor，为了实例化Fn</span></span><br><span class=\"line\">  Fn.apply(obj, arg); <span class=\"comment\">// 执行Fn，并将构造函数Fn执行obj</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> obj; <span class=\"comment\">// 返回结果</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"深拷贝\"><a href=\"#深拷贝\" class=\"headerlink\" title=\"深拷贝\"></a>深拷贝</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getType = <span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 获取数据类型</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> baseType = <span class=\"built_in\">Object</span>.prototype.toString</span><br><span class=\"line\">    .call(data)</span><br><span class=\"line\">    .replace(<span class=\"regexp\">/^\\[object\\s(.+)\\]$/g</span>, <span class=\"string\">\"$1\"</span>)</span><br><span class=\"line\">    .toLowerCase();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> type = data <span class=\"keyword\">instanceof</span> Element ? <span class=\"string\">\"element\"</span> : baseType;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> type;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> isPrimitive = <span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 判断是否是基本数据类型</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> primitiveType = <span class=\"string\">\"undefined,null,boolean,string,symbol,number,bigint,map,set,weakmap,weakset\"</span>.split(</span><br><span class=\"line\">    <span class=\"string\">\",\"</span></span><br><span class=\"line\">  ); <span class=\"comment\">// 其实还有很多类型</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> primitiveType.includes(getType(data));</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> isObject = <span class=\"function\"><span class=\"params\">data</span> =&gt;</span> getType(data) === <span class=\"string\">\"object\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> isArray = <span class=\"function\"><span class=\"params\">data</span> =&gt;</span> getType(data) === <span class=\"string\">\"array\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> deepClone = <span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> cache = &#123;&#125;; <span class=\"comment\">// 缓存值，防止循环引用</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> baseClone = <span class=\"function\"><span class=\"params\">_data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> res;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isPrimitive(_data)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> data;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isObject(_data)) &#123;</span><br><span class=\"line\">      res = &#123; ..._data &#125;;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isArray(_data)) &#123;</span><br><span class=\"line\">      res = [..._data];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 判断是否有复杂类型的数据，有就递归</span></span><br><span class=\"line\">    <span class=\"built_in\">Reflect</span>.ownKeys(res).forEach(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (res[key] &amp;&amp; getType(res[key]) === <span class=\"string\">\"object\"</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 用cache来记录已经被复制过的引用地址。用来解决循环引用的问题</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cache[res[key]]) &#123;</span><br><span class=\"line\">          res[key] = cache[res[key]];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          cache[res[key]] = res[key];</span><br><span class=\"line\">          res[key] = baseClone(res[key]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> baseClone(data);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"手写-bind\"><a href=\"#手写-bind\" class=\"headerlink\" title=\"手写 bind\"></a>手写 bind</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.bind2 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"keyword\">this</span> !== <span class=\"string\">\"function\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"...\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> args1 = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> bindFn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> args2 = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> that2 = <span class=\"keyword\">this</span> <span class=\"keyword\">instanceof</span> bindFn ? <span class=\"keyword\">this</span> : context; <span class=\"comment\">// 如果当前函数的this指向的是构造函数中的this 则判定为new 操作。如果this是构造函数bindFn new出来的实例，那么此处的this一定是该实例本身。</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> that.apply(that2, args1.concat(args2));</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> Fn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;; <span class=\"comment\">// 连接原型链用Fn</span></span><br><span class=\"line\">  <span class=\"comment\">// 原型赋值</span></span><br><span class=\"line\">  Fn.prototype = <span class=\"keyword\">this</span>.prototype; <span class=\"comment\">// bindFn的prototype指向和this的prototype一样，指向同一个原型对象</span></span><br><span class=\"line\">  bindFn.prototype = <span class=\"keyword\">new</span> Fn();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> bindFn;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"手写函数柯里化\"><a href=\"#手写函数柯里化\" class=\"headerlink\" title=\"手写函数柯里化\"></a>手写函数柯里化</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const curry &#x3D; fn &#x3D;&gt; &#123;</span><br><span class=\"line\">  if (typeof fn !&#x3D;&#x3D; &quot;function&quot;) &#123;</span><br><span class=\"line\">    throw Error(&quot;No function provided&quot;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return function curriedFn(...args) &#123;</span><br><span class=\"line\">    if (args.length &lt; fn.length) &#123;</span><br><span class=\"line\">      return function() &#123;</span><br><span class=\"line\">        return curriedFn.apply(null, args.concat([].slice.call(arguments)));</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return fn.apply(null, args);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"手写-Promise\"><a href=\"#手写-Promise\" class=\"headerlink\" title=\"手写 Promise\"></a>手写 Promise</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 来源于 https://github.com/bailnl/promise/blob/master/src/promise.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> PENDING = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> FULFILLED = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> REJECTED = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> isFunction = <span class=\"function\"><span class=\"params\">fn</span> =&gt;</span> <span class=\"keyword\">typeof</span> fn === <span class=\"string\">\"function\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> isObject = <span class=\"function\"><span class=\"params\">obj</span> =&gt;</span> obj !== <span class=\"literal\">null</span> &amp;&amp; <span class=\"keyword\">typeof</span> obj === <span class=\"string\">\"object\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> noop = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> nextTick = <span class=\"function\"><span class=\"params\">fn</span> =&gt;</span> setTimeout(fn, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> resolve = <span class=\"function\">(<span class=\"params\">promise, x</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (promise === x) &#123;</span><br><span class=\"line\">    reject(promise, <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">\"You cannot resolve a promise with itself\"</span>));</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (x &amp;&amp; x.constructor === <span class=\"built_in\">Promise</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x._stauts === PENDING) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> handler = <span class=\"function\"><span class=\"params\">statusHandler</span> =&gt;</span> <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> statusHandler(promise, value);</span><br><span class=\"line\">      x.then(handler(resolve), handler(reject));</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (x._stauts === FULFILLED) &#123;</span><br><span class=\"line\">      fulfill(promise, x._value);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (x._stauts === REJECTED) &#123;</span><br><span class=\"line\">      reject(promise, x._value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isFunction(x) || isObject(x)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> isCalled = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> then = x.then;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isFunction(then)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> handler = <span class=\"function\"><span class=\"params\">statusHandler</span> =&gt;</span> <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (!isCalled) &#123;</span><br><span class=\"line\">            statusHandler(promise, value);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          isCalled = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        then.call(x, handler(resolve), handler(reject));</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        fulfill(promise, x);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!isCalled) &#123;</span><br><span class=\"line\">        reject(promise, e);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    fulfill(promise, x);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> reject = <span class=\"function\">(<span class=\"params\">promise, reason</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (promise._stauts !== PENDING) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  promise._stauts = REJECTED;</span><br><span class=\"line\">  promise._value = reason;</span><br><span class=\"line\">  invokeCallback(promise);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> fulfill = <span class=\"function\">(<span class=\"params\">promise, value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (promise._stauts !== PENDING) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  promise._stauts = FULFILLED;</span><br><span class=\"line\">  promise._value = value;</span><br><span class=\"line\">  invokeCallback(promise);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> invokeCallback = <span class=\"function\"><span class=\"params\">promise</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (promise._stauts === PENDING) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (promise._callbacks.length) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">        onFulfilled = <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> value,</span><br><span class=\"line\">        onRejected = <span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">throw</span> reason;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        thenPromise</span><br><span class=\"line\">      &#125; = promise._callbacks.shift();</span><br><span class=\"line\">      <span class=\"keyword\">let</span> value;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        value = (promise._stauts === FULFILLED ? onFulfilled : onRejected)(</span><br><span class=\"line\">          promise._value</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">        reject(thenPromise, e);</span><br><span class=\"line\">        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      resolve(thenPromise, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Promise</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> resolve(value) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> resolve(value));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> reject(reason) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> reject(reason));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(resolver) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(<span class=\"keyword\">this</span> <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(</span><br><span class=\"line\">        <span class=\"string\">`Class constructor Promise cannot be invoked without 'new'`</span></span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isFunction(resolver)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">`Promise resolver <span class=\"subst\">$&#123;resolver&#125;</span> is not a function`</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._stauts = PENDING;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._value = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._callbacks = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      resolver(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> resolve(<span class=\"keyword\">this</span>, value), reason =&gt; reject(<span class=\"keyword\">this</span>, reason));</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">      reject(<span class=\"keyword\">this</span>, e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  then(onFulfilled, onRejected) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> thenPromise = <span class=\"keyword\">new</span> <span class=\"keyword\">this</span>.constructor(noop);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._callbacks = <span class=\"keyword\">this</span>._callbacks.concat([</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        onFulfilled: isFunction(onFulfilled) ? onFulfilled : <span class=\"keyword\">void</span> <span class=\"number\">0</span>,</span><br><span class=\"line\">        onRejected: isFunction(onRejected) ? onRejected : <span class=\"keyword\">void</span> <span class=\"number\">0</span>,</span><br><span class=\"line\">        thenPromise</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]);</span><br><span class=\"line\">    invokeCallback(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> thenPromise;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">catch</span>(onRejected) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.then(<span class=\"keyword\">void</span> <span class=\"number\">0</span>, onRejected);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"手写防抖函数\"><a href=\"#手写防抖函数\" class=\"headerlink\" title=\"手写防抖函数\"></a>手写防抖函数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> debounce = <span class=\"function\">(<span class=\"params\">fn = &#123;&#125;, wait = <span class=\"number\">50</span>, immediate</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timer;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (immediate) &#123;</span><br><span class=\"line\">      fn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (timer) &#123;</span><br><span class=\"line\">      clearTimeout(timer);</span><br><span class=\"line\">      timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    timer = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      fn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    &#125;, wait);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"手写节流函数\"><a href=\"#手写节流函数\" class=\"headerlink\" title=\"手写节流函数\"></a>手写节流函数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> throttle = <span class=\"function\">(<span class=\"params\">fn = &#123;&#125;, wait = <span class=\"number\">0</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> prev = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> now = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (now - prev &gt; wait) &#123;</span><br><span class=\"line\">      fn.apply(<span class=\"keyword\">this</span>, args);</span><br><span class=\"line\">      prev = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"手写-instanceOf\"><a href=\"#手写-instanceOf\" class=\"headerlink\" title=\"手写 instanceOf\"></a>手写 instanceOf</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> instanceOf = <span class=\"function\">(<span class=\"params\">left, right</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> proto = left.__proto__;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> prototype = right.prototype;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (proto === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (proto === prototype) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    proto = proto.__proto__;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"layout":"[post]","title":"浏览器渲染原理与过程","date":"2019-09-27T07:45:31.000Z","_content":"## 浏览器如何渲染网页\n### 什么是DOCTYPE\n在w3school上是这么解释的：<!DOCTYPE>声明不是HTML标签，指示web浏览器关于页面使用哪个HTML版本进行编写的指令；在 HTML 4.01 中，```<!DOCTYPE>``` 声明引用 DTD，因为 HTML 4.01 基于 SGML。DTD 规定了标记语言的规则，这样浏览器才能正确地呈现内容。HTML5 不基于 SGML，所以不需要引用 DTD\n<!-- more -->\n\n**简而言之，<!DOCTYPE>规定了浏览器文档使用哪种html或者xhtml规范**\n\n#### h5中使用\n```\n<!DOCTYPE html>\n```\n#### HTML 4.01 Strict（严格模式）\n\n该 DTD 包含所有 HTML 元素和属性，但不包括展示性的和弃用的元素（比如 font）。不允许框架集（Framesets）。\n\n```\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\n```\n#### HTML 4.01 Transitional（宽松模式）\n\n该 DTD 包含所有 HTML 元素和属性，包括展示性的和弃用的元素（比如 font）。不允许框架集（Framesets）。\n\n```\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \n\"http://www.w3.org/TR/html4/loose.dtd\">\n```\n#### HTML 4.01 Frameset\n该 DTD 等同于 HTML 4.01 Transitional，但允许框架集内容。\n\n```\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Frameset//EN\" \n\"http://www.w3.org/TR/html4/frameset.dtd\">\n```\n#### 名词解释\n##### DTD\nDocument Type Definition，中文翻译为：文档类型定义。DTD可定义合法的XML文档构建模块。它使用一系列合法的元素来定义文档的结构。因为早期的版本基于SGML，所以需要套用SGML的解析规则。DTD的作用在于定义SGML文档的文档类型以便于浏览器解析。\n\n##### SGML\nStandard Generalized Markup language。标准通用标记语言（以下简称“通用标言”），是一种定义电子文档结构和描述其内容的国际标准语言。\n\n\n如果没有<!DOCTYPE>声明，那么不同的浏览器将会以自己不同的怪异的模式去解析渲染页面，这样页面在不同的浏览器上呈现出来的效果也就不一样，人们把这称之为“怪异模式”。\n\n### 浏览器渲染网页过程\n\n要了解浏览器渲染页面的过程，首先得知道一个名词——关键渲染路径。关键渲染路径是指浏览器从最初接收请求来的HTML、CSS、javascript等资源，然后解析、构建树、渲染布局、绘制，最后呈现给客户能看到的界面这整个过程。\n用户看到页面实际上可以分为两个阶段：页面内容加载完成和页面资源加载完成，分别对应于**DOMContentLoaded**和**Load**。\n\n- **DOMContentLoaded**事件触发时，仅当DOM加载完成，不包括样式表，图片等\n - **load**事件触发时，页面上所有的DOM，样式表，脚本，图片都已加载完成\n \n#### 浏览器渲染的过程主要包括以下五步\n1. 浏览器将获取的HTML文档解析成DOM树。\n2. 处理CSS标记，构成层叠样式表模型CSSOM(CSS Object Model)。\n3. 将DOM和CSSOM合并为渲染树(rendering tree)将会被创建，代表一系列将被渲染的对象。\n4. 渲染树的每个元素包含的内容都是计算过的，它被称之为布局layout。浏览器使用一种流式处理的方法，只需要一次绘制操作就可以布局所有的元素。\n5. 将渲染树的各个节点绘制到屏幕上，这一步被称为绘制painting。\n\n\n需要注意的是，**以上五个步骤并不一定一次性顺序完成**，比如DOM或CSSOM被修改时，亦或是哪个过程会重复执行，这样才能计算出哪些像素需要在屏幕上进行重新渲染。而在实际情况中，JavaScript和CSS的某些操作往往会多次修改DOM或者CSSOM。\n![image](liulanqi1.webp)\n\n### 浏览器渲染网页的具体流程\n\n#### 构建DOM树\n当浏览器接收到服务器响应来的HTML文档后，会遍历文档节点，生成DOM树。\n\n需要注意以下几点：\n1. DOM树在构建的过程中可能会被CSS和JS的加载而执行阻塞\n2. display:none的元素也会在DOM树中\n3. 注释也会在DOM树中\n4. script标签会在DOM树中\n\n无论是DOM还是CSSOM，都是要经过```Bytes→characters→tokens→nodes→objectmodel```这个过程。\n\n![image](liulanqi2.webp)\n当前节点的所有子节点都构建好后才会去构建当前节点的下一个兄弟节点。\n\n#### 构建CSSOM规则树\n浏览器解析CSS文件并生成CSSOM，每个CSS文件都被分析成一个StyleSheet对象，每个对象都包含CSS规则。CSS规则对象包含对应于CSS语法的选择器和声明对象以及其他对象。\n\n在这个过程需要注意的是：\n1. CSS解析可以与DOM解析同时进行。\n2. CSS解析与script的执行互斥 。\n3. 在Webkit内核中进行了script执行优化，只有在JS访问CSS时才会发生互斥。\n\n#### 构建渲染树（Render Tree）\n\n通过DOM树和CSS规则树，浏览器就可以通过它两构建渲染树了。浏览器会先从DOM树的根节点开始遍历每个可见节点，然后对每个可见节点找到适配的CSS样式规则并应用。\n\n有以下几点需要注意：\n1. Render Tree和DOM Tree不完全对应\n2. display: none的元素不在Render Tree中\n3. visibility: hidden的元素在Render Tree中\n\n![image](liulanqi3.webp)\n\n渲染树生成后，还是没有办法渲染到屏幕上，渲染到屏幕需要得到各个节点的位置信息，这就需要布局（Layout）的处理了。\n#### 渲染树布局(layout of the render tree)\n\n布局阶段会从渲染树的根节点开始遍历，由于渲染树的每个节点都是一个Render Object对象，包含宽高，位置，背景色等样式信息。所以浏览器就可以通过这些样式信息来确定每个节点对象在页面上的确切大小和位置，布局阶段的输出就是我们常说的盒子模型，它会精确地捕获每个元素在屏幕内的确切位置与大小。需要注意的是：\n\n1. float元素，absoulte元素，fixed元素会发生位置偏移。\n2. 我们常说的脱离文档流，其实就是脱离Render Tree。\n\n#### 渲染树绘制（Painting the render tree）\n\n在绘制阶段，浏览器会遍历渲染树，调用渲染器的paint()方法在屏幕上显示其内容。渲染树的绘制工作是由浏览器的UI后端组件完成的。\n\n### 浏览器渲染网页的那些事儿\n\n#### 浏览器主要组件结构\n![image](liulanqi4.webp)\n渲染引擎主要有两个：webkit和Gecko\n\nFirefox使用Geoko，Mozilla自主研发的渲染引擎。Safari和Chrome都使用webkit。Webkit是一款开源渲染引擎，它本来是为linux平台研发的，后来由Apple移植到Mac及Windows上。\n\n虽然主流浏览器渲染过程叫法有区别，但是主要流程还是相同的。\n\n#### 渲染阻塞\nJS可以操作DOM来修改DOM结构，可以操作CSSOM来修改节点样式，这就导致了浏览器在遇到```<script>```标签时，DOM构建将暂停，直至脚本完成执行，然后继续构建DOM。如果脚本是外部的，会等待脚本下载完毕，再继续解析文档。现在可以在script标签上增加属性defer或者async。脚本解析会将脚本中改变DOM和CSS的地方分别解析出来，追加到DOM树和CSSOM规则树上。\n\n每次去执行JavaScript脚本都会严重地阻塞DOM树的构建，如果JavaScript脚本还操作了CSSOM，而正好这个CSSOM还没有下载和构建，浏览器甚至会延迟脚本执行和构建DOM，直至完成其CSSOM的下载和构建。所以，script标签的位置很重要。\n\nJS阻塞了构建DOM树，也阻塞了其后的构建CSSOM规则树，整个解析进程必须等待JS的执行完成才能够继续，这就是所谓的JS阻塞页面。\n\n由于CSSOM负责存储渲染信息，浏览器就必须保证在合成渲染树之前，CSSOM是完备的，这种完备是指所有的CSS（内联、内部和外部）都已经下载完，并解析完，只有CSSOM和DOM的解析完全结束，浏览器才会进入下一步的渲染，这就是CSS阻塞渲染。\n\nCSS阻塞渲染意味着，在CSSOM完备前，页面将一直处理白屏状态，这就是为什么样式放在head中，仅仅是为了更快的解析CSS，保证更快的首次渲染。\n\n需要注意的是，即便你没有给页面任何的样式声明，CSSOM依然会生成，默认生成的CSSOM自带浏览器默认样式。\n\n当解析HTML的时候，会把新来的元素插入DOM树里面，同时去查找CSS，然后把对应的样式规则应用到元素上，查找样式表是按照从右到左的顺序去匹配的。\n\n例如：div p {font-size: 16px}，会先寻找所有p标签并判断它的父标签是否为div之后才会决定要不要采用这个样式进行渲染）。\n所以，我们平时写CSS时，尽量用id和class，千万不要过渡层叠。\n\n### 回流和重绘（reflow和repaint）\n我们都知道HTML默认是流式布局的，但CSS和JS会打破这种布局，改变DOM的外观样式以及大小和位置。因此我们就需要知道两个概念：replaint和reflow。\n#### reflow（回流）\n当浏览器发现布局发生了变化，这个时候就需要倒回去重新渲染，大家称这个回退的过程叫```reflow```。```reflow```会从```html```这个```root frame```开始递归往下，依次计算所有的结点几何尺寸和位置，以确认是渲染树的一部分发生变化还是整个渲染树。reflow几乎是无法避免的，因为只要用户进行交互操作，就势必会发生页面的一部分的重新渲染，且通常我们也无法预估浏览器到底会```reflow```哪一部分的代码，因为他们会相互影响。\n\n#### repaint（重绘）\n```repaint``` 则是当我们改变某个元素的背景色、文字颜色、边框颜色等等不影响它周围或内部布局的属性时，屏幕的一部分要重画，但是元素的几何尺寸和位置没有发生改变。\n\n需要注意的是，```display:none会触发reflow，而visibility: hidden```属性则并不算是不可见属性，它的语义是隐藏元素，但元素仍然占据着布局空间，它会被渲染成一个空框。所以visibility:hidden只会触发repaint，因为没有发生位置变化。\n\n另外有些情况下，比如修改了元素的样式，浏览器并不会立刻```reflow```或```repaint```一次，而是会把这样的操作积攒一批，然后做一次```reflow```，这又叫异步```reflow```或增量异步```reflow```。但是在有些情况下，比如```resize```窗口，改变了页面默认的字体等。对于这些操作，浏览器会马上进行```reflow```。\n\n#### 引起reflow\n现代浏览器会对回流做优化，它会等到足够数量的变化发生，再做一次批处理回流。\n\n1. 页面第一次渲染（初始化）\n2. DOM树变化（如：增删节点）\n3. Render树变化（如：padding改变）\n4. 浏览器窗口resize\n5. 获取元素的某些属性\n\n浏览器为了获得正确的值也会提前触发回流，这样就使得浏览器的优化失效了，这些属性包括```offsetLeft、offsetTop、offsetWidth、offsetHeight、 scrollTop/Left/Width/Height、clientTop/Left/Width/Height、```调用了```getComputedStyle()```。\n\n#### 引起repaint\n```reflow``` 回流必定引起```repaint```重绘，重绘可以单独触发。\n\n背景色、颜色、字体改变（注意：字体大小发生变化时，会触发回流）\n\n#### 减少reflow、repaint触发次数\n1. 用transform做形变和位移可以减少reflow\n2. 避免逐个修改节点样式，尽量一次性修改\n3. 使用DocumentFragment将需要多次修改的DOM元素缓存，最后一次性append到真实DOM中渲染\n4. 可以将需要多次修改的DOM元素设置display:none，操作完再显示。（因为隐藏元素不在render树内，因此修改隐藏元素不会触发回流重绘）\n5. 避免多次读取某些属性\n6. 通过绝对位移将复杂的节点元素脱离文档流，形成新的Render Layer，降低回流成本\n\n### 几条关于优化渲染效率的建议\n结合上文有以下几点可以优化渲染效率。\n\n - 合法地去书写HTML和CSS ，且不要忘了文档编码类型。\n - 样式文件应当在head标签中，而脚本文件在body结束前，这样可以防止阻塞的方式。\n - 简化并优化CSS选择器，尽量将嵌套层减少到最小。\n - DOM 的多个读操作（或多个写操作），应该放在一起。不要两个读操作之间，加入一个写操作。\n - 如果某个样式是通过重排得到的，那么最好缓存结果。避免下一次用到的时候，浏览器又要重排。\n - 不要一条条地改变样式，而要通过改变class，或者csstext属性，一次性地改变样式。\n - 尽量用transform来做形变和位移\n - 尽量使用离线DOM，而不是真实的网面DOM，来改变元素样式。比如，操作Document Fragment对象，完成后再把这个对象加入DOM。再比如，使用cloneNode()方法，在克隆的节点上进行操作，然后再用克隆的节点替换原始节点。\n - 先将元素设为display: none（需要1次重排和重绘），然后对这个节点进行100次操作，最后再恢复显示（需要1次重排和重绘）。这样一来，你就用两次重新渲染，取代了可能高达100次的重新渲染。\n - position属性为absolute或fixed的元素，重排的开销会比较小，因为不用考虑它对其他元素的影响。\n - 只在必要的时候，才将元素的display属性为可见，因为不可见的元素不影响重排和重绘。另外，visibility : hidden的元素只对重绘有影响，不影响重排。\n - 使用window.requestAnimationFrame()、window.requestIdleCallback()这两个方法调节重新渲染。\n\n[原文地址](https://www.jianshu.com/p/e6252dc9be32)\n\n","source":"_posts/浏览器渲染原理与过程.md","raw":"---\nlayout: '[post]'\ntitle: 浏览器渲染原理与过程\ndate: 2019-09-27 15:45:31\ntags: 浏览器\n---\n## 浏览器如何渲染网页\n### 什么是DOCTYPE\n在w3school上是这么解释的：<!DOCTYPE>声明不是HTML标签，指示web浏览器关于页面使用哪个HTML版本进行编写的指令；在 HTML 4.01 中，```<!DOCTYPE>``` 声明引用 DTD，因为 HTML 4.01 基于 SGML。DTD 规定了标记语言的规则，这样浏览器才能正确地呈现内容。HTML5 不基于 SGML，所以不需要引用 DTD\n<!-- more -->\n\n**简而言之，<!DOCTYPE>规定了浏览器文档使用哪种html或者xhtml规范**\n\n#### h5中使用\n```\n<!DOCTYPE html>\n```\n#### HTML 4.01 Strict（严格模式）\n\n该 DTD 包含所有 HTML 元素和属性，但不包括展示性的和弃用的元素（比如 font）。不允许框架集（Framesets）。\n\n```\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\n```\n#### HTML 4.01 Transitional（宽松模式）\n\n该 DTD 包含所有 HTML 元素和属性，包括展示性的和弃用的元素（比如 font）。不允许框架集（Framesets）。\n\n```\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \n\"http://www.w3.org/TR/html4/loose.dtd\">\n```\n#### HTML 4.01 Frameset\n该 DTD 等同于 HTML 4.01 Transitional，但允许框架集内容。\n\n```\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Frameset//EN\" \n\"http://www.w3.org/TR/html4/frameset.dtd\">\n```\n#### 名词解释\n##### DTD\nDocument Type Definition，中文翻译为：文档类型定义。DTD可定义合法的XML文档构建模块。它使用一系列合法的元素来定义文档的结构。因为早期的版本基于SGML，所以需要套用SGML的解析规则。DTD的作用在于定义SGML文档的文档类型以便于浏览器解析。\n\n##### SGML\nStandard Generalized Markup language。标准通用标记语言（以下简称“通用标言”），是一种定义电子文档结构和描述其内容的国际标准语言。\n\n\n如果没有<!DOCTYPE>声明，那么不同的浏览器将会以自己不同的怪异的模式去解析渲染页面，这样页面在不同的浏览器上呈现出来的效果也就不一样，人们把这称之为“怪异模式”。\n\n### 浏览器渲染网页过程\n\n要了解浏览器渲染页面的过程，首先得知道一个名词——关键渲染路径。关键渲染路径是指浏览器从最初接收请求来的HTML、CSS、javascript等资源，然后解析、构建树、渲染布局、绘制，最后呈现给客户能看到的界面这整个过程。\n用户看到页面实际上可以分为两个阶段：页面内容加载完成和页面资源加载完成，分别对应于**DOMContentLoaded**和**Load**。\n\n- **DOMContentLoaded**事件触发时，仅当DOM加载完成，不包括样式表，图片等\n - **load**事件触发时，页面上所有的DOM，样式表，脚本，图片都已加载完成\n \n#### 浏览器渲染的过程主要包括以下五步\n1. 浏览器将获取的HTML文档解析成DOM树。\n2. 处理CSS标记，构成层叠样式表模型CSSOM(CSS Object Model)。\n3. 将DOM和CSSOM合并为渲染树(rendering tree)将会被创建，代表一系列将被渲染的对象。\n4. 渲染树的每个元素包含的内容都是计算过的，它被称之为布局layout。浏览器使用一种流式处理的方法，只需要一次绘制操作就可以布局所有的元素。\n5. 将渲染树的各个节点绘制到屏幕上，这一步被称为绘制painting。\n\n\n需要注意的是，**以上五个步骤并不一定一次性顺序完成**，比如DOM或CSSOM被修改时，亦或是哪个过程会重复执行，这样才能计算出哪些像素需要在屏幕上进行重新渲染。而在实际情况中，JavaScript和CSS的某些操作往往会多次修改DOM或者CSSOM。\n![image](liulanqi1.webp)\n\n### 浏览器渲染网页的具体流程\n\n#### 构建DOM树\n当浏览器接收到服务器响应来的HTML文档后，会遍历文档节点，生成DOM树。\n\n需要注意以下几点：\n1. DOM树在构建的过程中可能会被CSS和JS的加载而执行阻塞\n2. display:none的元素也会在DOM树中\n3. 注释也会在DOM树中\n4. script标签会在DOM树中\n\n无论是DOM还是CSSOM，都是要经过```Bytes→characters→tokens→nodes→objectmodel```这个过程。\n\n![image](liulanqi2.webp)\n当前节点的所有子节点都构建好后才会去构建当前节点的下一个兄弟节点。\n\n#### 构建CSSOM规则树\n浏览器解析CSS文件并生成CSSOM，每个CSS文件都被分析成一个StyleSheet对象，每个对象都包含CSS规则。CSS规则对象包含对应于CSS语法的选择器和声明对象以及其他对象。\n\n在这个过程需要注意的是：\n1. CSS解析可以与DOM解析同时进行。\n2. CSS解析与script的执行互斥 。\n3. 在Webkit内核中进行了script执行优化，只有在JS访问CSS时才会发生互斥。\n\n#### 构建渲染树（Render Tree）\n\n通过DOM树和CSS规则树，浏览器就可以通过它两构建渲染树了。浏览器会先从DOM树的根节点开始遍历每个可见节点，然后对每个可见节点找到适配的CSS样式规则并应用。\n\n有以下几点需要注意：\n1. Render Tree和DOM Tree不完全对应\n2. display: none的元素不在Render Tree中\n3. visibility: hidden的元素在Render Tree中\n\n![image](liulanqi3.webp)\n\n渲染树生成后，还是没有办法渲染到屏幕上，渲染到屏幕需要得到各个节点的位置信息，这就需要布局（Layout）的处理了。\n#### 渲染树布局(layout of the render tree)\n\n布局阶段会从渲染树的根节点开始遍历，由于渲染树的每个节点都是一个Render Object对象，包含宽高，位置，背景色等样式信息。所以浏览器就可以通过这些样式信息来确定每个节点对象在页面上的确切大小和位置，布局阶段的输出就是我们常说的盒子模型，它会精确地捕获每个元素在屏幕内的确切位置与大小。需要注意的是：\n\n1. float元素，absoulte元素，fixed元素会发生位置偏移。\n2. 我们常说的脱离文档流，其实就是脱离Render Tree。\n\n#### 渲染树绘制（Painting the render tree）\n\n在绘制阶段，浏览器会遍历渲染树，调用渲染器的paint()方法在屏幕上显示其内容。渲染树的绘制工作是由浏览器的UI后端组件完成的。\n\n### 浏览器渲染网页的那些事儿\n\n#### 浏览器主要组件结构\n![image](liulanqi4.webp)\n渲染引擎主要有两个：webkit和Gecko\n\nFirefox使用Geoko，Mozilla自主研发的渲染引擎。Safari和Chrome都使用webkit。Webkit是一款开源渲染引擎，它本来是为linux平台研发的，后来由Apple移植到Mac及Windows上。\n\n虽然主流浏览器渲染过程叫法有区别，但是主要流程还是相同的。\n\n#### 渲染阻塞\nJS可以操作DOM来修改DOM结构，可以操作CSSOM来修改节点样式，这就导致了浏览器在遇到```<script>```标签时，DOM构建将暂停，直至脚本完成执行，然后继续构建DOM。如果脚本是外部的，会等待脚本下载完毕，再继续解析文档。现在可以在script标签上增加属性defer或者async。脚本解析会将脚本中改变DOM和CSS的地方分别解析出来，追加到DOM树和CSSOM规则树上。\n\n每次去执行JavaScript脚本都会严重地阻塞DOM树的构建，如果JavaScript脚本还操作了CSSOM，而正好这个CSSOM还没有下载和构建，浏览器甚至会延迟脚本执行和构建DOM，直至完成其CSSOM的下载和构建。所以，script标签的位置很重要。\n\nJS阻塞了构建DOM树，也阻塞了其后的构建CSSOM规则树，整个解析进程必须等待JS的执行完成才能够继续，这就是所谓的JS阻塞页面。\n\n由于CSSOM负责存储渲染信息，浏览器就必须保证在合成渲染树之前，CSSOM是完备的，这种完备是指所有的CSS（内联、内部和外部）都已经下载完，并解析完，只有CSSOM和DOM的解析完全结束，浏览器才会进入下一步的渲染，这就是CSS阻塞渲染。\n\nCSS阻塞渲染意味着，在CSSOM完备前，页面将一直处理白屏状态，这就是为什么样式放在head中，仅仅是为了更快的解析CSS，保证更快的首次渲染。\n\n需要注意的是，即便你没有给页面任何的样式声明，CSSOM依然会生成，默认生成的CSSOM自带浏览器默认样式。\n\n当解析HTML的时候，会把新来的元素插入DOM树里面，同时去查找CSS，然后把对应的样式规则应用到元素上，查找样式表是按照从右到左的顺序去匹配的。\n\n例如：div p {font-size: 16px}，会先寻找所有p标签并判断它的父标签是否为div之后才会决定要不要采用这个样式进行渲染）。\n所以，我们平时写CSS时，尽量用id和class，千万不要过渡层叠。\n\n### 回流和重绘（reflow和repaint）\n我们都知道HTML默认是流式布局的，但CSS和JS会打破这种布局，改变DOM的外观样式以及大小和位置。因此我们就需要知道两个概念：replaint和reflow。\n#### reflow（回流）\n当浏览器发现布局发生了变化，这个时候就需要倒回去重新渲染，大家称这个回退的过程叫```reflow```。```reflow```会从```html```这个```root frame```开始递归往下，依次计算所有的结点几何尺寸和位置，以确认是渲染树的一部分发生变化还是整个渲染树。reflow几乎是无法避免的，因为只要用户进行交互操作，就势必会发生页面的一部分的重新渲染，且通常我们也无法预估浏览器到底会```reflow```哪一部分的代码，因为他们会相互影响。\n\n#### repaint（重绘）\n```repaint``` 则是当我们改变某个元素的背景色、文字颜色、边框颜色等等不影响它周围或内部布局的属性时，屏幕的一部分要重画，但是元素的几何尺寸和位置没有发生改变。\n\n需要注意的是，```display:none会触发reflow，而visibility: hidden```属性则并不算是不可见属性，它的语义是隐藏元素，但元素仍然占据着布局空间，它会被渲染成一个空框。所以visibility:hidden只会触发repaint，因为没有发生位置变化。\n\n另外有些情况下，比如修改了元素的样式，浏览器并不会立刻```reflow```或```repaint```一次，而是会把这样的操作积攒一批，然后做一次```reflow```，这又叫异步```reflow```或增量异步```reflow```。但是在有些情况下，比如```resize```窗口，改变了页面默认的字体等。对于这些操作，浏览器会马上进行```reflow```。\n\n#### 引起reflow\n现代浏览器会对回流做优化，它会等到足够数量的变化发生，再做一次批处理回流。\n\n1. 页面第一次渲染（初始化）\n2. DOM树变化（如：增删节点）\n3. Render树变化（如：padding改变）\n4. 浏览器窗口resize\n5. 获取元素的某些属性\n\n浏览器为了获得正确的值也会提前触发回流，这样就使得浏览器的优化失效了，这些属性包括```offsetLeft、offsetTop、offsetWidth、offsetHeight、 scrollTop/Left/Width/Height、clientTop/Left/Width/Height、```调用了```getComputedStyle()```。\n\n#### 引起repaint\n```reflow``` 回流必定引起```repaint```重绘，重绘可以单独触发。\n\n背景色、颜色、字体改变（注意：字体大小发生变化时，会触发回流）\n\n#### 减少reflow、repaint触发次数\n1. 用transform做形变和位移可以减少reflow\n2. 避免逐个修改节点样式，尽量一次性修改\n3. 使用DocumentFragment将需要多次修改的DOM元素缓存，最后一次性append到真实DOM中渲染\n4. 可以将需要多次修改的DOM元素设置display:none，操作完再显示。（因为隐藏元素不在render树内，因此修改隐藏元素不会触发回流重绘）\n5. 避免多次读取某些属性\n6. 通过绝对位移将复杂的节点元素脱离文档流，形成新的Render Layer，降低回流成本\n\n### 几条关于优化渲染效率的建议\n结合上文有以下几点可以优化渲染效率。\n\n - 合法地去书写HTML和CSS ，且不要忘了文档编码类型。\n - 样式文件应当在head标签中，而脚本文件在body结束前，这样可以防止阻塞的方式。\n - 简化并优化CSS选择器，尽量将嵌套层减少到最小。\n - DOM 的多个读操作（或多个写操作），应该放在一起。不要两个读操作之间，加入一个写操作。\n - 如果某个样式是通过重排得到的，那么最好缓存结果。避免下一次用到的时候，浏览器又要重排。\n - 不要一条条地改变样式，而要通过改变class，或者csstext属性，一次性地改变样式。\n - 尽量用transform来做形变和位移\n - 尽量使用离线DOM，而不是真实的网面DOM，来改变元素样式。比如，操作Document Fragment对象，完成后再把这个对象加入DOM。再比如，使用cloneNode()方法，在克隆的节点上进行操作，然后再用克隆的节点替换原始节点。\n - 先将元素设为display: none（需要1次重排和重绘），然后对这个节点进行100次操作，最后再恢复显示（需要1次重排和重绘）。这样一来，你就用两次重新渲染，取代了可能高达100次的重新渲染。\n - position属性为absolute或fixed的元素，重排的开销会比较小，因为不用考虑它对其他元素的影响。\n - 只在必要的时候，才将元素的display属性为可见，因为不可见的元素不影响重排和重绘。另外，visibility : hidden的元素只对重绘有影响，不影响重排。\n - 使用window.requestAnimationFrame()、window.requestIdleCallback()这两个方法调节重新渲染。\n\n[原文地址](https://www.jianshu.com/p/e6252dc9be32)\n\n","slug":"浏览器渲染原理与过程","published":1,"updated":"2020-04-27T07:48:50.000Z","comments":1,"photos":[],"link":"","_id":"ckbftlm7k002t7w2paeo0bsd1","content":"<h2 id=\"浏览器如何渲染网页\"><a href=\"#浏览器如何渲染网页\" class=\"headerlink\" title=\"浏览器如何渲染网页\"></a>浏览器如何渲染网页</h2><h3 id=\"什么是DOCTYPE\"><a href=\"#什么是DOCTYPE\" class=\"headerlink\" title=\"什么是DOCTYPE\"></a>什么是DOCTYPE</h3><p>在w3school上是这么解释的：&lt;!DOCTYPE&gt;声明不是HTML标签，指示web浏览器关于页面使用哪个HTML版本进行编写的指令；在 HTML 4.01 中，<code>&lt;!DOCTYPE&gt;</code> 声明引用 DTD，因为 HTML 4.01 基于 SGML。DTD 规定了标记语言的规则，这样浏览器才能正确地呈现内容。HTML5 不基于 SGML，所以不需要引用 DTD</p>\n<a id=\"more\"></a>\n\n<p><strong>简而言之，&lt;!DOCTYPE&gt;规定了浏览器文档使用哪种html或者xhtml规范</strong></p>\n<h4 id=\"h5中使用\"><a href=\"#h5中使用\" class=\"headerlink\" title=\"h5中使用\"></a>h5中使用</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"HTML-4-01-Strict（严格模式）\"><a href=\"#HTML-4-01-Strict（严格模式）\" class=\"headerlink\" title=\"HTML 4.01 Strict（严格模式）\"></a>HTML 4.01 Strict（严格模式）</h4><p>该 DTD 包含所有 HTML 元素和属性，但不包括展示性的和弃用的元素（比如 font）。不允许框架集（Framesets）。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE HTML PUBLIC &quot;-&#x2F;&#x2F;W3C&#x2F;&#x2F;DTD HTML 4.01&#x2F;&#x2F;EN&quot; &quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;html4&#x2F;strict.dtd&quot;&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"HTML-4-01-Transitional（宽松模式）\"><a href=\"#HTML-4-01-Transitional（宽松模式）\" class=\"headerlink\" title=\"HTML 4.01 Transitional（宽松模式）\"></a>HTML 4.01 Transitional（宽松模式）</h4><p>该 DTD 包含所有 HTML 元素和属性，包括展示性的和弃用的元素（比如 font）。不允许框架集（Framesets）。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE HTML PUBLIC &quot;-&#x2F;&#x2F;W3C&#x2F;&#x2F;DTD HTML 4.01 Transitional&#x2F;&#x2F;EN&quot; </span><br><span class=\"line\">&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;html4&#x2F;loose.dtd&quot;&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"HTML-4-01-Frameset\"><a href=\"#HTML-4-01-Frameset\" class=\"headerlink\" title=\"HTML 4.01 Frameset\"></a>HTML 4.01 Frameset</h4><p>该 DTD 等同于 HTML 4.01 Transitional，但允许框架集内容。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE HTML PUBLIC &quot;-&#x2F;&#x2F;W3C&#x2F;&#x2F;DTD HTML 4.01 Frameset&#x2F;&#x2F;EN&quot; </span><br><span class=\"line\">&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;html4&#x2F;frameset.dtd&quot;&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"名词解释\"><a href=\"#名词解释\" class=\"headerlink\" title=\"名词解释\"></a>名词解释</h4><h5 id=\"DTD\"><a href=\"#DTD\" class=\"headerlink\" title=\"DTD\"></a>DTD</h5><p>Document Type Definition，中文翻译为：文档类型定义。DTD可定义合法的XML文档构建模块。它使用一系列合法的元素来定义文档的结构。因为早期的版本基于SGML，所以需要套用SGML的解析规则。DTD的作用在于定义SGML文档的文档类型以便于浏览器解析。</p>\n<h5 id=\"SGML\"><a href=\"#SGML\" class=\"headerlink\" title=\"SGML\"></a>SGML</h5><p>Standard Generalized Markup language。标准通用标记语言（以下简称“通用标言”），是一种定义电子文档结构和描述其内容的国际标准语言。</p>\n<p>如果没有&lt;!DOCTYPE&gt;声明，那么不同的浏览器将会以自己不同的怪异的模式去解析渲染页面，这样页面在不同的浏览器上呈现出来的效果也就不一样，人们把这称之为“怪异模式”。</p>\n<h3 id=\"浏览器渲染网页过程\"><a href=\"#浏览器渲染网页过程\" class=\"headerlink\" title=\"浏览器渲染网页过程\"></a>浏览器渲染网页过程</h3><p>要了解浏览器渲染页面的过程，首先得知道一个名词——关键渲染路径。关键渲染路径是指浏览器从最初接收请求来的HTML、CSS、javascript等资源，然后解析、构建树、渲染布局、绘制，最后呈现给客户能看到的界面这整个过程。<br>用户看到页面实际上可以分为两个阶段：页面内容加载完成和页面资源加载完成，分别对应于<strong>DOMContentLoaded</strong>和<strong>Load</strong>。</p>\n<ul>\n<li><strong>DOMContentLoaded</strong>事件触发时，仅当DOM加载完成，不包括样式表，图片等<ul>\n<li><strong>load</strong>事件触发时，页面上所有的DOM，样式表，脚本，图片都已加载完成</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"浏览器渲染的过程主要包括以下五步\"><a href=\"#浏览器渲染的过程主要包括以下五步\" class=\"headerlink\" title=\"浏览器渲染的过程主要包括以下五步\"></a>浏览器渲染的过程主要包括以下五步</h4><ol>\n<li>浏览器将获取的HTML文档解析成DOM树。</li>\n<li>处理CSS标记，构成层叠样式表模型CSSOM(CSS Object Model)。</li>\n<li>将DOM和CSSOM合并为渲染树(rendering tree)将会被创建，代表一系列将被渲染的对象。</li>\n<li>渲染树的每个元素包含的内容都是计算过的，它被称之为布局layout。浏览器使用一种流式处理的方法，只需要一次绘制操作就可以布局所有的元素。</li>\n<li>将渲染树的各个节点绘制到屏幕上，这一步被称为绘制painting。</li>\n</ol>\n<p>需要注意的是，<strong>以上五个步骤并不一定一次性顺序完成</strong>，比如DOM或CSSOM被修改时，亦或是哪个过程会重复执行，这样才能计算出哪些像素需要在屏幕上进行重新渲染。而在实际情况中，JavaScript和CSS的某些操作往往会多次修改DOM或者CSSOM。<br><img src=\"/2019/09/27/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86%E4%B8%8E%E8%BF%87%E7%A8%8B/liulanqi1.webp\" alt=\"image\"></p>\n<h3 id=\"浏览器渲染网页的具体流程\"><a href=\"#浏览器渲染网页的具体流程\" class=\"headerlink\" title=\"浏览器渲染网页的具体流程\"></a>浏览器渲染网页的具体流程</h3><h4 id=\"构建DOM树\"><a href=\"#构建DOM树\" class=\"headerlink\" title=\"构建DOM树\"></a>构建DOM树</h4><p>当浏览器接收到服务器响应来的HTML文档后，会遍历文档节点，生成DOM树。</p>\n<p>需要注意以下几点：</p>\n<ol>\n<li>DOM树在构建的过程中可能会被CSS和JS的加载而执行阻塞</li>\n<li>display:none的元素也会在DOM树中</li>\n<li>注释也会在DOM树中</li>\n<li>script标签会在DOM树中</li>\n</ol>\n<p>无论是DOM还是CSSOM，都是要经过<code>Bytes→characters→tokens→nodes→objectmodel</code>这个过程。</p>\n<p><img src=\"/2019/09/27/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86%E4%B8%8E%E8%BF%87%E7%A8%8B/liulanqi2.webp\" alt=\"image\"><br>当前节点的所有子节点都构建好后才会去构建当前节点的下一个兄弟节点。</p>\n<h4 id=\"构建CSSOM规则树\"><a href=\"#构建CSSOM规则树\" class=\"headerlink\" title=\"构建CSSOM规则树\"></a>构建CSSOM规则树</h4><p>浏览器解析CSS文件并生成CSSOM，每个CSS文件都被分析成一个StyleSheet对象，每个对象都包含CSS规则。CSS规则对象包含对应于CSS语法的选择器和声明对象以及其他对象。</p>\n<p>在这个过程需要注意的是：</p>\n<ol>\n<li>CSS解析可以与DOM解析同时进行。</li>\n<li>CSS解析与script的执行互斥 。</li>\n<li>在Webkit内核中进行了script执行优化，只有在JS访问CSS时才会发生互斥。</li>\n</ol>\n<h4 id=\"构建渲染树（Render-Tree）\"><a href=\"#构建渲染树（Render-Tree）\" class=\"headerlink\" title=\"构建渲染树（Render Tree）\"></a>构建渲染树（Render Tree）</h4><p>通过DOM树和CSS规则树，浏览器就可以通过它两构建渲染树了。浏览器会先从DOM树的根节点开始遍历每个可见节点，然后对每个可见节点找到适配的CSS样式规则并应用。</p>\n<p>有以下几点需要注意：</p>\n<ol>\n<li>Render Tree和DOM Tree不完全对应</li>\n<li>display: none的元素不在Render Tree中</li>\n<li>visibility: hidden的元素在Render Tree中</li>\n</ol>\n<p><img src=\"/2019/09/27/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86%E4%B8%8E%E8%BF%87%E7%A8%8B/liulanqi3.webp\" alt=\"image\"></p>\n<p>渲染树生成后，还是没有办法渲染到屏幕上，渲染到屏幕需要得到各个节点的位置信息，这就需要布局（Layout）的处理了。</p>\n<h4 id=\"渲染树布局-layout-of-the-render-tree\"><a href=\"#渲染树布局-layout-of-the-render-tree\" class=\"headerlink\" title=\"渲染树布局(layout of the render tree)\"></a>渲染树布局(layout of the render tree)</h4><p>布局阶段会从渲染树的根节点开始遍历，由于渲染树的每个节点都是一个Render Object对象，包含宽高，位置，背景色等样式信息。所以浏览器就可以通过这些样式信息来确定每个节点对象在页面上的确切大小和位置，布局阶段的输出就是我们常说的盒子模型，它会精确地捕获每个元素在屏幕内的确切位置与大小。需要注意的是：</p>\n<ol>\n<li>float元素，absoulte元素，fixed元素会发生位置偏移。</li>\n<li>我们常说的脱离文档流，其实就是脱离Render Tree。</li>\n</ol>\n<h4 id=\"渲染树绘制（Painting-the-render-tree）\"><a href=\"#渲染树绘制（Painting-the-render-tree）\" class=\"headerlink\" title=\"渲染树绘制（Painting the render tree）\"></a>渲染树绘制（Painting the render tree）</h4><p>在绘制阶段，浏览器会遍历渲染树，调用渲染器的paint()方法在屏幕上显示其内容。渲染树的绘制工作是由浏览器的UI后端组件完成的。</p>\n<h3 id=\"浏览器渲染网页的那些事儿\"><a href=\"#浏览器渲染网页的那些事儿\" class=\"headerlink\" title=\"浏览器渲染网页的那些事儿\"></a>浏览器渲染网页的那些事儿</h3><h4 id=\"浏览器主要组件结构\"><a href=\"#浏览器主要组件结构\" class=\"headerlink\" title=\"浏览器主要组件结构\"></a>浏览器主要组件结构</h4><p><img src=\"/2019/09/27/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86%E4%B8%8E%E8%BF%87%E7%A8%8B/liulanqi4.webp\" alt=\"image\"><br>渲染引擎主要有两个：webkit和Gecko</p>\n<p>Firefox使用Geoko，Mozilla自主研发的渲染引擎。Safari和Chrome都使用webkit。Webkit是一款开源渲染引擎，它本来是为linux平台研发的，后来由Apple移植到Mac及Windows上。</p>\n<p>虽然主流浏览器渲染过程叫法有区别，但是主要流程还是相同的。</p>\n<h4 id=\"渲染阻塞\"><a href=\"#渲染阻塞\" class=\"headerlink\" title=\"渲染阻塞\"></a>渲染阻塞</h4><p>JS可以操作DOM来修改DOM结构，可以操作CSSOM来修改节点样式，这就导致了浏览器在遇到<code>&lt;script&gt;</code>标签时，DOM构建将暂停，直至脚本完成执行，然后继续构建DOM。如果脚本是外部的，会等待脚本下载完毕，再继续解析文档。现在可以在script标签上增加属性defer或者async。脚本解析会将脚本中改变DOM和CSS的地方分别解析出来，追加到DOM树和CSSOM规则树上。</p>\n<p>每次去执行JavaScript脚本都会严重地阻塞DOM树的构建，如果JavaScript脚本还操作了CSSOM，而正好这个CSSOM还没有下载和构建，浏览器甚至会延迟脚本执行和构建DOM，直至完成其CSSOM的下载和构建。所以，script标签的位置很重要。</p>\n<p>JS阻塞了构建DOM树，也阻塞了其后的构建CSSOM规则树，整个解析进程必须等待JS的执行完成才能够继续，这就是所谓的JS阻塞页面。</p>\n<p>由于CSSOM负责存储渲染信息，浏览器就必须保证在合成渲染树之前，CSSOM是完备的，这种完备是指所有的CSS（内联、内部和外部）都已经下载完，并解析完，只有CSSOM和DOM的解析完全结束，浏览器才会进入下一步的渲染，这就是CSS阻塞渲染。</p>\n<p>CSS阻塞渲染意味着，在CSSOM完备前，页面将一直处理白屏状态，这就是为什么样式放在head中，仅仅是为了更快的解析CSS，保证更快的首次渲染。</p>\n<p>需要注意的是，即便你没有给页面任何的样式声明，CSSOM依然会生成，默认生成的CSSOM自带浏览器默认样式。</p>\n<p>当解析HTML的时候，会把新来的元素插入DOM树里面，同时去查找CSS，然后把对应的样式规则应用到元素上，查找样式表是按照从右到左的顺序去匹配的。</p>\n<p>例如：div p {font-size: 16px}，会先寻找所有p标签并判断它的父标签是否为div之后才会决定要不要采用这个样式进行渲染）。<br>所以，我们平时写CSS时，尽量用id和class，千万不要过渡层叠。</p>\n<h3 id=\"回流和重绘（reflow和repaint）\"><a href=\"#回流和重绘（reflow和repaint）\" class=\"headerlink\" title=\"回流和重绘（reflow和repaint）\"></a>回流和重绘（reflow和repaint）</h3><p>我们都知道HTML默认是流式布局的，但CSS和JS会打破这种布局，改变DOM的外观样式以及大小和位置。因此我们就需要知道两个概念：replaint和reflow。</p>\n<h4 id=\"reflow（回流）\"><a href=\"#reflow（回流）\" class=\"headerlink\" title=\"reflow（回流）\"></a>reflow（回流）</h4><p>当浏览器发现布局发生了变化，这个时候就需要倒回去重新渲染，大家称这个回退的过程叫<code>reflow</code>。<code>reflow</code>会从<code>html</code>这个<code>root frame</code>开始递归往下，依次计算所有的结点几何尺寸和位置，以确认是渲染树的一部分发生变化还是整个渲染树。reflow几乎是无法避免的，因为只要用户进行交互操作，就势必会发生页面的一部分的重新渲染，且通常我们也无法预估浏览器到底会<code>reflow</code>哪一部分的代码，因为他们会相互影响。</p>\n<h4 id=\"repaint（重绘）\"><a href=\"#repaint（重绘）\" class=\"headerlink\" title=\"repaint（重绘）\"></a>repaint（重绘）</h4><p><code>repaint</code> 则是当我们改变某个元素的背景色、文字颜色、边框颜色等等不影响它周围或内部布局的属性时，屏幕的一部分要重画，但是元素的几何尺寸和位置没有发生改变。</p>\n<p>需要注意的是，<code>display:none会触发reflow，而visibility: hidden</code>属性则并不算是不可见属性，它的语义是隐藏元素，但元素仍然占据着布局空间，它会被渲染成一个空框。所以visibility:hidden只会触发repaint，因为没有发生位置变化。</p>\n<p>另外有些情况下，比如修改了元素的样式，浏览器并不会立刻<code>reflow</code>或<code>repaint</code>一次，而是会把这样的操作积攒一批，然后做一次<code>reflow</code>，这又叫异步<code>reflow</code>或增量异步<code>reflow</code>。但是在有些情况下，比如<code>resize</code>窗口，改变了页面默认的字体等。对于这些操作，浏览器会马上进行<code>reflow</code>。</p>\n<h4 id=\"引起reflow\"><a href=\"#引起reflow\" class=\"headerlink\" title=\"引起reflow\"></a>引起reflow</h4><p>现代浏览器会对回流做优化，它会等到足够数量的变化发生，再做一次批处理回流。</p>\n<ol>\n<li>页面第一次渲染（初始化）</li>\n<li>DOM树变化（如：增删节点）</li>\n<li>Render树变化（如：padding改变）</li>\n<li>浏览器窗口resize</li>\n<li>获取元素的某些属性</li>\n</ol>\n<p>浏览器为了获得正确的值也会提前触发回流，这样就使得浏览器的优化失效了，这些属性包括<code>offsetLeft、offsetTop、offsetWidth、offsetHeight、 scrollTop/Left/Width/Height、clientTop/Left/Width/Height、</code>调用了<code>getComputedStyle()</code>。</p>\n<h4 id=\"引起repaint\"><a href=\"#引起repaint\" class=\"headerlink\" title=\"引起repaint\"></a>引起repaint</h4><p><code>reflow</code> 回流必定引起<code>repaint</code>重绘，重绘可以单独触发。</p>\n<p>背景色、颜色、字体改变（注意：字体大小发生变化时，会触发回流）</p>\n<h4 id=\"减少reflow、repaint触发次数\"><a href=\"#减少reflow、repaint触发次数\" class=\"headerlink\" title=\"减少reflow、repaint触发次数\"></a>减少reflow、repaint触发次数</h4><ol>\n<li>用transform做形变和位移可以减少reflow</li>\n<li>避免逐个修改节点样式，尽量一次性修改</li>\n<li>使用DocumentFragment将需要多次修改的DOM元素缓存，最后一次性append到真实DOM中渲染</li>\n<li>可以将需要多次修改的DOM元素设置display:none，操作完再显示。（因为隐藏元素不在render树内，因此修改隐藏元素不会触发回流重绘）</li>\n<li>避免多次读取某些属性</li>\n<li>通过绝对位移将复杂的节点元素脱离文档流，形成新的Render Layer，降低回流成本</li>\n</ol>\n<h3 id=\"几条关于优化渲染效率的建议\"><a href=\"#几条关于优化渲染效率的建议\" class=\"headerlink\" title=\"几条关于优化渲染效率的建议\"></a>几条关于优化渲染效率的建议</h3><p>结合上文有以下几点可以优化渲染效率。</p>\n<ul>\n<li>合法地去书写HTML和CSS ，且不要忘了文档编码类型。</li>\n<li>样式文件应当在head标签中，而脚本文件在body结束前，这样可以防止阻塞的方式。</li>\n<li>简化并优化CSS选择器，尽量将嵌套层减少到最小。</li>\n<li>DOM 的多个读操作（或多个写操作），应该放在一起。不要两个读操作之间，加入一个写操作。</li>\n<li>如果某个样式是通过重排得到的，那么最好缓存结果。避免下一次用到的时候，浏览器又要重排。</li>\n<li>不要一条条地改变样式，而要通过改变class，或者csstext属性，一次性地改变样式。</li>\n<li>尽量用transform来做形变和位移</li>\n<li>尽量使用离线DOM，而不是真实的网面DOM，来改变元素样式。比如，操作Document Fragment对象，完成后再把这个对象加入DOM。再比如，使用cloneNode()方法，在克隆的节点上进行操作，然后再用克隆的节点替换原始节点。</li>\n<li>先将元素设为display: none（需要1次重排和重绘），然后对这个节点进行100次操作，最后再恢复显示（需要1次重排和重绘）。这样一来，你就用两次重新渲染，取代了可能高达100次的重新渲染。</li>\n<li>position属性为absolute或fixed的元素，重排的开销会比较小，因为不用考虑它对其他元素的影响。</li>\n<li>只在必要的时候，才将元素的display属性为可见，因为不可见的元素不影响重排和重绘。另外，visibility : hidden的元素只对重绘有影响，不影响重排。</li>\n<li>使用window.requestAnimationFrame()、window.requestIdleCallback()这两个方法调节重新渲染。</li>\n</ul>\n<p><a href=\"https://www.jianshu.com/p/e6252dc9be32\" target=\"_blank\" rel=\"noopener\">原文地址</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"浏览器如何渲染网页\"><a href=\"#浏览器如何渲染网页\" class=\"headerlink\" title=\"浏览器如何渲染网页\"></a>浏览器如何渲染网页</h2><h3 id=\"什么是DOCTYPE\"><a href=\"#什么是DOCTYPE\" class=\"headerlink\" title=\"什么是DOCTYPE\"></a>什么是DOCTYPE</h3><p>在w3school上是这么解释的：&lt;!DOCTYPE&gt;声明不是HTML标签，指示web浏览器关于页面使用哪个HTML版本进行编写的指令；在 HTML 4.01 中，<code>&lt;!DOCTYPE&gt;</code> 声明引用 DTD，因为 HTML 4.01 基于 SGML。DTD 规定了标记语言的规则，这样浏览器才能正确地呈现内容。HTML5 不基于 SGML，所以不需要引用 DTD</p>","more":"<p><strong>简而言之，&lt;!DOCTYPE&gt;规定了浏览器文档使用哪种html或者xhtml规范</strong></p>\n<h4 id=\"h5中使用\"><a href=\"#h5中使用\" class=\"headerlink\" title=\"h5中使用\"></a>h5中使用</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"HTML-4-01-Strict（严格模式）\"><a href=\"#HTML-4-01-Strict（严格模式）\" class=\"headerlink\" title=\"HTML 4.01 Strict（严格模式）\"></a>HTML 4.01 Strict（严格模式）</h4><p>该 DTD 包含所有 HTML 元素和属性，但不包括展示性的和弃用的元素（比如 font）。不允许框架集（Framesets）。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE HTML PUBLIC &quot;-&#x2F;&#x2F;W3C&#x2F;&#x2F;DTD HTML 4.01&#x2F;&#x2F;EN&quot; &quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;html4&#x2F;strict.dtd&quot;&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"HTML-4-01-Transitional（宽松模式）\"><a href=\"#HTML-4-01-Transitional（宽松模式）\" class=\"headerlink\" title=\"HTML 4.01 Transitional（宽松模式）\"></a>HTML 4.01 Transitional（宽松模式）</h4><p>该 DTD 包含所有 HTML 元素和属性，包括展示性的和弃用的元素（比如 font）。不允许框架集（Framesets）。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE HTML PUBLIC &quot;-&#x2F;&#x2F;W3C&#x2F;&#x2F;DTD HTML 4.01 Transitional&#x2F;&#x2F;EN&quot; </span><br><span class=\"line\">&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;html4&#x2F;loose.dtd&quot;&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"HTML-4-01-Frameset\"><a href=\"#HTML-4-01-Frameset\" class=\"headerlink\" title=\"HTML 4.01 Frameset\"></a>HTML 4.01 Frameset</h4><p>该 DTD 等同于 HTML 4.01 Transitional，但允许框架集内容。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE HTML PUBLIC &quot;-&#x2F;&#x2F;W3C&#x2F;&#x2F;DTD HTML 4.01 Frameset&#x2F;&#x2F;EN&quot; </span><br><span class=\"line\">&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;html4&#x2F;frameset.dtd&quot;&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"名词解释\"><a href=\"#名词解释\" class=\"headerlink\" title=\"名词解释\"></a>名词解释</h4><h5 id=\"DTD\"><a href=\"#DTD\" class=\"headerlink\" title=\"DTD\"></a>DTD</h5><p>Document Type Definition，中文翻译为：文档类型定义。DTD可定义合法的XML文档构建模块。它使用一系列合法的元素来定义文档的结构。因为早期的版本基于SGML，所以需要套用SGML的解析规则。DTD的作用在于定义SGML文档的文档类型以便于浏览器解析。</p>\n<h5 id=\"SGML\"><a href=\"#SGML\" class=\"headerlink\" title=\"SGML\"></a>SGML</h5><p>Standard Generalized Markup language。标准通用标记语言（以下简称“通用标言”），是一种定义电子文档结构和描述其内容的国际标准语言。</p>\n<p>如果没有&lt;!DOCTYPE&gt;声明，那么不同的浏览器将会以自己不同的怪异的模式去解析渲染页面，这样页面在不同的浏览器上呈现出来的效果也就不一样，人们把这称之为“怪异模式”。</p>\n<h3 id=\"浏览器渲染网页过程\"><a href=\"#浏览器渲染网页过程\" class=\"headerlink\" title=\"浏览器渲染网页过程\"></a>浏览器渲染网页过程</h3><p>要了解浏览器渲染页面的过程，首先得知道一个名词——关键渲染路径。关键渲染路径是指浏览器从最初接收请求来的HTML、CSS、javascript等资源，然后解析、构建树、渲染布局、绘制，最后呈现给客户能看到的界面这整个过程。<br>用户看到页面实际上可以分为两个阶段：页面内容加载完成和页面资源加载完成，分别对应于<strong>DOMContentLoaded</strong>和<strong>Load</strong>。</p>\n<ul>\n<li><strong>DOMContentLoaded</strong>事件触发时，仅当DOM加载完成，不包括样式表，图片等<ul>\n<li><strong>load</strong>事件触发时，页面上所有的DOM，样式表，脚本，图片都已加载完成</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"浏览器渲染的过程主要包括以下五步\"><a href=\"#浏览器渲染的过程主要包括以下五步\" class=\"headerlink\" title=\"浏览器渲染的过程主要包括以下五步\"></a>浏览器渲染的过程主要包括以下五步</h4><ol>\n<li>浏览器将获取的HTML文档解析成DOM树。</li>\n<li>处理CSS标记，构成层叠样式表模型CSSOM(CSS Object Model)。</li>\n<li>将DOM和CSSOM合并为渲染树(rendering tree)将会被创建，代表一系列将被渲染的对象。</li>\n<li>渲染树的每个元素包含的内容都是计算过的，它被称之为布局layout。浏览器使用一种流式处理的方法，只需要一次绘制操作就可以布局所有的元素。</li>\n<li>将渲染树的各个节点绘制到屏幕上，这一步被称为绘制painting。</li>\n</ol>\n<p>需要注意的是，<strong>以上五个步骤并不一定一次性顺序完成</strong>，比如DOM或CSSOM被修改时，亦或是哪个过程会重复执行，这样才能计算出哪些像素需要在屏幕上进行重新渲染。而在实际情况中，JavaScript和CSS的某些操作往往会多次修改DOM或者CSSOM。<br><img src=\"/2019/09/27/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86%E4%B8%8E%E8%BF%87%E7%A8%8B/liulanqi1.webp\" alt=\"image\"></p>\n<h3 id=\"浏览器渲染网页的具体流程\"><a href=\"#浏览器渲染网页的具体流程\" class=\"headerlink\" title=\"浏览器渲染网页的具体流程\"></a>浏览器渲染网页的具体流程</h3><h4 id=\"构建DOM树\"><a href=\"#构建DOM树\" class=\"headerlink\" title=\"构建DOM树\"></a>构建DOM树</h4><p>当浏览器接收到服务器响应来的HTML文档后，会遍历文档节点，生成DOM树。</p>\n<p>需要注意以下几点：</p>\n<ol>\n<li>DOM树在构建的过程中可能会被CSS和JS的加载而执行阻塞</li>\n<li>display:none的元素也会在DOM树中</li>\n<li>注释也会在DOM树中</li>\n<li>script标签会在DOM树中</li>\n</ol>\n<p>无论是DOM还是CSSOM，都是要经过<code>Bytes→characters→tokens→nodes→objectmodel</code>这个过程。</p>\n<p><img src=\"/2019/09/27/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86%E4%B8%8E%E8%BF%87%E7%A8%8B/liulanqi2.webp\" alt=\"image\"><br>当前节点的所有子节点都构建好后才会去构建当前节点的下一个兄弟节点。</p>\n<h4 id=\"构建CSSOM规则树\"><a href=\"#构建CSSOM规则树\" class=\"headerlink\" title=\"构建CSSOM规则树\"></a>构建CSSOM规则树</h4><p>浏览器解析CSS文件并生成CSSOM，每个CSS文件都被分析成一个StyleSheet对象，每个对象都包含CSS规则。CSS规则对象包含对应于CSS语法的选择器和声明对象以及其他对象。</p>\n<p>在这个过程需要注意的是：</p>\n<ol>\n<li>CSS解析可以与DOM解析同时进行。</li>\n<li>CSS解析与script的执行互斥 。</li>\n<li>在Webkit内核中进行了script执行优化，只有在JS访问CSS时才会发生互斥。</li>\n</ol>\n<h4 id=\"构建渲染树（Render-Tree）\"><a href=\"#构建渲染树（Render-Tree）\" class=\"headerlink\" title=\"构建渲染树（Render Tree）\"></a>构建渲染树（Render Tree）</h4><p>通过DOM树和CSS规则树，浏览器就可以通过它两构建渲染树了。浏览器会先从DOM树的根节点开始遍历每个可见节点，然后对每个可见节点找到适配的CSS样式规则并应用。</p>\n<p>有以下几点需要注意：</p>\n<ol>\n<li>Render Tree和DOM Tree不完全对应</li>\n<li>display: none的元素不在Render Tree中</li>\n<li>visibility: hidden的元素在Render Tree中</li>\n</ol>\n<p><img src=\"/2019/09/27/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86%E4%B8%8E%E8%BF%87%E7%A8%8B/liulanqi3.webp\" alt=\"image\"></p>\n<p>渲染树生成后，还是没有办法渲染到屏幕上，渲染到屏幕需要得到各个节点的位置信息，这就需要布局（Layout）的处理了。</p>\n<h4 id=\"渲染树布局-layout-of-the-render-tree\"><a href=\"#渲染树布局-layout-of-the-render-tree\" class=\"headerlink\" title=\"渲染树布局(layout of the render tree)\"></a>渲染树布局(layout of the render tree)</h4><p>布局阶段会从渲染树的根节点开始遍历，由于渲染树的每个节点都是一个Render Object对象，包含宽高，位置，背景色等样式信息。所以浏览器就可以通过这些样式信息来确定每个节点对象在页面上的确切大小和位置，布局阶段的输出就是我们常说的盒子模型，它会精确地捕获每个元素在屏幕内的确切位置与大小。需要注意的是：</p>\n<ol>\n<li>float元素，absoulte元素，fixed元素会发生位置偏移。</li>\n<li>我们常说的脱离文档流，其实就是脱离Render Tree。</li>\n</ol>\n<h4 id=\"渲染树绘制（Painting-the-render-tree）\"><a href=\"#渲染树绘制（Painting-the-render-tree）\" class=\"headerlink\" title=\"渲染树绘制（Painting the render tree）\"></a>渲染树绘制（Painting the render tree）</h4><p>在绘制阶段，浏览器会遍历渲染树，调用渲染器的paint()方法在屏幕上显示其内容。渲染树的绘制工作是由浏览器的UI后端组件完成的。</p>\n<h3 id=\"浏览器渲染网页的那些事儿\"><a href=\"#浏览器渲染网页的那些事儿\" class=\"headerlink\" title=\"浏览器渲染网页的那些事儿\"></a>浏览器渲染网页的那些事儿</h3><h4 id=\"浏览器主要组件结构\"><a href=\"#浏览器主要组件结构\" class=\"headerlink\" title=\"浏览器主要组件结构\"></a>浏览器主要组件结构</h4><p><img src=\"/2019/09/27/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86%E4%B8%8E%E8%BF%87%E7%A8%8B/liulanqi4.webp\" alt=\"image\"><br>渲染引擎主要有两个：webkit和Gecko</p>\n<p>Firefox使用Geoko，Mozilla自主研发的渲染引擎。Safari和Chrome都使用webkit。Webkit是一款开源渲染引擎，它本来是为linux平台研发的，后来由Apple移植到Mac及Windows上。</p>\n<p>虽然主流浏览器渲染过程叫法有区别，但是主要流程还是相同的。</p>\n<h4 id=\"渲染阻塞\"><a href=\"#渲染阻塞\" class=\"headerlink\" title=\"渲染阻塞\"></a>渲染阻塞</h4><p>JS可以操作DOM来修改DOM结构，可以操作CSSOM来修改节点样式，这就导致了浏览器在遇到<code>&lt;script&gt;</code>标签时，DOM构建将暂停，直至脚本完成执行，然后继续构建DOM。如果脚本是外部的，会等待脚本下载完毕，再继续解析文档。现在可以在script标签上增加属性defer或者async。脚本解析会将脚本中改变DOM和CSS的地方分别解析出来，追加到DOM树和CSSOM规则树上。</p>\n<p>每次去执行JavaScript脚本都会严重地阻塞DOM树的构建，如果JavaScript脚本还操作了CSSOM，而正好这个CSSOM还没有下载和构建，浏览器甚至会延迟脚本执行和构建DOM，直至完成其CSSOM的下载和构建。所以，script标签的位置很重要。</p>\n<p>JS阻塞了构建DOM树，也阻塞了其后的构建CSSOM规则树，整个解析进程必须等待JS的执行完成才能够继续，这就是所谓的JS阻塞页面。</p>\n<p>由于CSSOM负责存储渲染信息，浏览器就必须保证在合成渲染树之前，CSSOM是完备的，这种完备是指所有的CSS（内联、内部和外部）都已经下载完，并解析完，只有CSSOM和DOM的解析完全结束，浏览器才会进入下一步的渲染，这就是CSS阻塞渲染。</p>\n<p>CSS阻塞渲染意味着，在CSSOM完备前，页面将一直处理白屏状态，这就是为什么样式放在head中，仅仅是为了更快的解析CSS，保证更快的首次渲染。</p>\n<p>需要注意的是，即便你没有给页面任何的样式声明，CSSOM依然会生成，默认生成的CSSOM自带浏览器默认样式。</p>\n<p>当解析HTML的时候，会把新来的元素插入DOM树里面，同时去查找CSS，然后把对应的样式规则应用到元素上，查找样式表是按照从右到左的顺序去匹配的。</p>\n<p>例如：div p {font-size: 16px}，会先寻找所有p标签并判断它的父标签是否为div之后才会决定要不要采用这个样式进行渲染）。<br>所以，我们平时写CSS时，尽量用id和class，千万不要过渡层叠。</p>\n<h3 id=\"回流和重绘（reflow和repaint）\"><a href=\"#回流和重绘（reflow和repaint）\" class=\"headerlink\" title=\"回流和重绘（reflow和repaint）\"></a>回流和重绘（reflow和repaint）</h3><p>我们都知道HTML默认是流式布局的，但CSS和JS会打破这种布局，改变DOM的外观样式以及大小和位置。因此我们就需要知道两个概念：replaint和reflow。</p>\n<h4 id=\"reflow（回流）\"><a href=\"#reflow（回流）\" class=\"headerlink\" title=\"reflow（回流）\"></a>reflow（回流）</h4><p>当浏览器发现布局发生了变化，这个时候就需要倒回去重新渲染，大家称这个回退的过程叫<code>reflow</code>。<code>reflow</code>会从<code>html</code>这个<code>root frame</code>开始递归往下，依次计算所有的结点几何尺寸和位置，以确认是渲染树的一部分发生变化还是整个渲染树。reflow几乎是无法避免的，因为只要用户进行交互操作，就势必会发生页面的一部分的重新渲染，且通常我们也无法预估浏览器到底会<code>reflow</code>哪一部分的代码，因为他们会相互影响。</p>\n<h4 id=\"repaint（重绘）\"><a href=\"#repaint（重绘）\" class=\"headerlink\" title=\"repaint（重绘）\"></a>repaint（重绘）</h4><p><code>repaint</code> 则是当我们改变某个元素的背景色、文字颜色、边框颜色等等不影响它周围或内部布局的属性时，屏幕的一部分要重画，但是元素的几何尺寸和位置没有发生改变。</p>\n<p>需要注意的是，<code>display:none会触发reflow，而visibility: hidden</code>属性则并不算是不可见属性，它的语义是隐藏元素，但元素仍然占据着布局空间，它会被渲染成一个空框。所以visibility:hidden只会触发repaint，因为没有发生位置变化。</p>\n<p>另外有些情况下，比如修改了元素的样式，浏览器并不会立刻<code>reflow</code>或<code>repaint</code>一次，而是会把这样的操作积攒一批，然后做一次<code>reflow</code>，这又叫异步<code>reflow</code>或增量异步<code>reflow</code>。但是在有些情况下，比如<code>resize</code>窗口，改变了页面默认的字体等。对于这些操作，浏览器会马上进行<code>reflow</code>。</p>\n<h4 id=\"引起reflow\"><a href=\"#引起reflow\" class=\"headerlink\" title=\"引起reflow\"></a>引起reflow</h4><p>现代浏览器会对回流做优化，它会等到足够数量的变化发生，再做一次批处理回流。</p>\n<ol>\n<li>页面第一次渲染（初始化）</li>\n<li>DOM树变化（如：增删节点）</li>\n<li>Render树变化（如：padding改变）</li>\n<li>浏览器窗口resize</li>\n<li>获取元素的某些属性</li>\n</ol>\n<p>浏览器为了获得正确的值也会提前触发回流，这样就使得浏览器的优化失效了，这些属性包括<code>offsetLeft、offsetTop、offsetWidth、offsetHeight、 scrollTop/Left/Width/Height、clientTop/Left/Width/Height、</code>调用了<code>getComputedStyle()</code>。</p>\n<h4 id=\"引起repaint\"><a href=\"#引起repaint\" class=\"headerlink\" title=\"引起repaint\"></a>引起repaint</h4><p><code>reflow</code> 回流必定引起<code>repaint</code>重绘，重绘可以单独触发。</p>\n<p>背景色、颜色、字体改变（注意：字体大小发生变化时，会触发回流）</p>\n<h4 id=\"减少reflow、repaint触发次数\"><a href=\"#减少reflow、repaint触发次数\" class=\"headerlink\" title=\"减少reflow、repaint触发次数\"></a>减少reflow、repaint触发次数</h4><ol>\n<li>用transform做形变和位移可以减少reflow</li>\n<li>避免逐个修改节点样式，尽量一次性修改</li>\n<li>使用DocumentFragment将需要多次修改的DOM元素缓存，最后一次性append到真实DOM中渲染</li>\n<li>可以将需要多次修改的DOM元素设置display:none，操作完再显示。（因为隐藏元素不在render树内，因此修改隐藏元素不会触发回流重绘）</li>\n<li>避免多次读取某些属性</li>\n<li>通过绝对位移将复杂的节点元素脱离文档流，形成新的Render Layer，降低回流成本</li>\n</ol>\n<h3 id=\"几条关于优化渲染效率的建议\"><a href=\"#几条关于优化渲染效率的建议\" class=\"headerlink\" title=\"几条关于优化渲染效率的建议\"></a>几条关于优化渲染效率的建议</h3><p>结合上文有以下几点可以优化渲染效率。</p>\n<ul>\n<li>合法地去书写HTML和CSS ，且不要忘了文档编码类型。</li>\n<li>样式文件应当在head标签中，而脚本文件在body结束前，这样可以防止阻塞的方式。</li>\n<li>简化并优化CSS选择器，尽量将嵌套层减少到最小。</li>\n<li>DOM 的多个读操作（或多个写操作），应该放在一起。不要两个读操作之间，加入一个写操作。</li>\n<li>如果某个样式是通过重排得到的，那么最好缓存结果。避免下一次用到的时候，浏览器又要重排。</li>\n<li>不要一条条地改变样式，而要通过改变class，或者csstext属性，一次性地改变样式。</li>\n<li>尽量用transform来做形变和位移</li>\n<li>尽量使用离线DOM，而不是真实的网面DOM，来改变元素样式。比如，操作Document Fragment对象，完成后再把这个对象加入DOM。再比如，使用cloneNode()方法，在克隆的节点上进行操作，然后再用克隆的节点替换原始节点。</li>\n<li>先将元素设为display: none（需要1次重排和重绘），然后对这个节点进行100次操作，最后再恢复显示（需要1次重排和重绘）。这样一来，你就用两次重新渲染，取代了可能高达100次的重新渲染。</li>\n<li>position属性为absolute或fixed的元素，重排的开销会比较小，因为不用考虑它对其他元素的影响。</li>\n<li>只在必要的时候，才将元素的display属性为可见，因为不可见的元素不影响重排和重绘。另外，visibility : hidden的元素只对重绘有影响，不影响重排。</li>\n<li>使用window.requestAnimationFrame()、window.requestIdleCallback()这两个方法调节重新渲染。</li>\n</ul>\n<p><a href=\"https://www.jianshu.com/p/e6252dc9be32\" target=\"_blank\" rel=\"noopener\">原文地址</a></p>"},{"layout":"[post]","title":"路由原理","date":"2020-03-22T05:59:15.000Z","_content":"## 原理\n\n- 稍微复杂一点的SPA，都需要路由\n- vue-router是标配\n\n## vue-router\n\n### 模式\n\n- hash\n- history\n<!-- more -->\n\n### hash\n\n- hash变化会触发网页跳转，即浏览器前进或后退\n- hash变化不会刷新页面\n- hash不会提交到server端\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>hash test</title>\n</head>\n<body>\n    <p>hash test</p>\n    <button id=\"btn1\">修改 hash</button>\n\n    <script>\n        // hash 变化，包括：\n        // a. JS 修改 url\n        // b. 手动修改 url 的 hash\n        // c. 浏览器前进、后退\n        window.onhashchange = (event) => {\n            console.log('old url', event.oldURL)\n            console.log('new url', event.newURL)\n\n            console.log('hash:', location.hash)\n        }\n\n        // 页面初次加载，获取 hash\n        document.addEventListener('DOMContentLoaded', () => {\n            console.log('hash:', location.hash)\n        })\n\n        // JS 修改 url\n        document.getElementById('btn1').addEventListener('click', () => {\n            location.href = '#/user'\n        })\n    </script>\n</body>\n</html>\n```\n\n### history\n\n- 用url规范的路由，跳转时不刷新页面\n- history.pushState\n- window.onpopState\n\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>history API test</title>\n</head>\n<body>\n    <p>history API test</p>\n    <button id=\"btn1\">修改 url</button>\n\n    <script>\n        // 页面初次加载，获取 path\n        document.addEventListener('DOMContentLoaded', () => {\n            console.log('load', location.pathname)\n        })\n\n        // 打开一个新的路由\n        // 【注意】用 pushState 方式，浏览器不会刷新页面\n        document.getElementById('btn1').addEventListener('click', () => {\n            const state = { name: 'page1' }\n            console.log('切换路由到', 'page1')\n            history.pushState(state, '', 'page1') // 重要！！\n        })\n\n        // 监听浏览器前进、后退\n        window.onpopstate = (event) => { // 重要！！\n            console.log('onpopstate', event.state, location.pathname)\n        }\n\n        // 需要 server 端配合，可参考\n        // https://router.vuejs.org/zh/guide/essentials/history-mode.html#%E5%90%8E%E7%AB%AF%E9%85%8D%E7%BD%AE%E4%BE%8B%E5%AD%90\n    </script>\n</body>\n</html>\n```\n\n\n\n\n\n\n\n","source":"_posts/路由原理.md","raw":"---\nlayout: '[post]'\ntitle: 路由原理\ndate: 2020-03-22 13:59:15\ntags: Vue\n---\n## 原理\n\n- 稍微复杂一点的SPA，都需要路由\n- vue-router是标配\n\n## vue-router\n\n### 模式\n\n- hash\n- history\n<!-- more -->\n\n### hash\n\n- hash变化会触发网页跳转，即浏览器前进或后退\n- hash变化不会刷新页面\n- hash不会提交到server端\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>hash test</title>\n</head>\n<body>\n    <p>hash test</p>\n    <button id=\"btn1\">修改 hash</button>\n\n    <script>\n        // hash 变化，包括：\n        // a. JS 修改 url\n        // b. 手动修改 url 的 hash\n        // c. 浏览器前进、后退\n        window.onhashchange = (event) => {\n            console.log('old url', event.oldURL)\n            console.log('new url', event.newURL)\n\n            console.log('hash:', location.hash)\n        }\n\n        // 页面初次加载，获取 hash\n        document.addEventListener('DOMContentLoaded', () => {\n            console.log('hash:', location.hash)\n        })\n\n        // JS 修改 url\n        document.getElementById('btn1').addEventListener('click', () => {\n            location.href = '#/user'\n        })\n    </script>\n</body>\n</html>\n```\n\n### history\n\n- 用url规范的路由，跳转时不刷新页面\n- history.pushState\n- window.onpopState\n\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>history API test</title>\n</head>\n<body>\n    <p>history API test</p>\n    <button id=\"btn1\">修改 url</button>\n\n    <script>\n        // 页面初次加载，获取 path\n        document.addEventListener('DOMContentLoaded', () => {\n            console.log('load', location.pathname)\n        })\n\n        // 打开一个新的路由\n        // 【注意】用 pushState 方式，浏览器不会刷新页面\n        document.getElementById('btn1').addEventListener('click', () => {\n            const state = { name: 'page1' }\n            console.log('切换路由到', 'page1')\n            history.pushState(state, '', 'page1') // 重要！！\n        })\n\n        // 监听浏览器前进、后退\n        window.onpopstate = (event) => { // 重要！！\n            console.log('onpopstate', event.state, location.pathname)\n        }\n\n        // 需要 server 端配合，可参考\n        // https://router.vuejs.org/zh/guide/essentials/history-mode.html#%E5%90%8E%E7%AB%AF%E9%85%8D%E7%BD%AE%E4%BE%8B%E5%AD%90\n    </script>\n</body>\n</html>\n```\n\n\n\n\n\n\n\n","slug":"路由原理","published":1,"updated":"2020-05-13T06:04:59.000Z","comments":1,"photos":[],"link":"","_id":"ckbftlm7l002v7w2pdxidad6p","content":"<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><ul>\n<li>稍微复杂一点的SPA，都需要路由</li>\n<li>vue-router是标配</li>\n</ul>\n<h2 id=\"vue-router\"><a href=\"#vue-router\" class=\"headerlink\" title=\"vue-router\"></a>vue-router</h2><h3 id=\"模式\"><a href=\"#模式\" class=\"headerlink\" title=\"模式\"></a>模式</h3><ul>\n<li>hash</li>\n<li>history<a id=\"more\"></a>\n\n</li>\n</ul>\n<h3 id=\"hash\"><a href=\"#hash\" class=\"headerlink\" title=\"hash\"></a>hash</h3><ul>\n<li>hash变化会触发网页跳转，即浏览器前进或后退</li>\n<li>hash变化不会刷新页面</li>\n<li>hash不会提交到server端</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>hash test<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>hash test<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"btn1\"</span>&gt;</span>修改 hash<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// hash 变化，包括：</span></span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// a. JS 修改 url</span></span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// b. 手动修改 url 的 hash</span></span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// c. 浏览器前进、后退</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">window</span>.onhashchange = <span class=\"function\">(<span class=\"params\">event</span>) =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'old url'</span>, event.oldURL)</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'new url'</span>, event.newURL)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'hash:'</span>, location.hash)</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// 页面初次加载，获取 hash</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">'DOMContentLoaded'</span>, () =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'hash:'</span>, location.hash)</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// JS 修改 url</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'btn1'</span>).addEventListener(<span class=\"string\">'click'</span>, () =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">            location.href = <span class=\"string\">'#/user'</span></span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"history\"><a href=\"#history\" class=\"headerlink\" title=\"history\"></a>history</h3><ul>\n<li>用url规范的路由，跳转时不刷新页面</li>\n<li>history.pushState</li>\n<li>window.onpopState</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>history API test<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>history API test<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"btn1\"</span>&gt;</span>修改 url<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// 页面初次加载，获取 path</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">'DOMContentLoaded'</span>, () =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'load'</span>, location.pathname)</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// 打开一个新的路由</span></span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// 【注意】用 pushState 方式，浏览器不会刷新页面</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'btn1'</span>).addEventListener(<span class=\"string\">'click'</span>, () =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"keyword\">const</span> state = &#123; name: <span class=\"string\">'page1'</span> &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'切换路由到'</span>, <span class=\"string\">'page1'</span>)</span></span><br><span class=\"line\"><span class=\"actionscript\">            history.pushState(state, <span class=\"string\">''</span>, <span class=\"string\">'page1'</span>) <span class=\"comment\">// 重要！！</span></span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// 监听浏览器前进、后退</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">window</span>.onpopstate = <span class=\"function\">(<span class=\"params\">event</span>) =&gt;</span> &#123; <span class=\"comment\">// 重要！！</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'onpopstate'</span>, event.state, location.pathname)</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// 需要 server 端配合，可参考</span></span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// https://router.vuejs.org/zh/guide/essentials/history-mode.html#%E5%90%8E%E7%AB%AF%E9%85%8D%E7%BD%AE%E4%BE%8B%E5%AD%90</span></span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n","site":{"data":{}},"excerpt":"<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><ul>\n<li>稍微复杂一点的SPA，都需要路由</li>\n<li>vue-router是标配</li>\n</ul>\n<h2 id=\"vue-router\"><a href=\"#vue-router\" class=\"headerlink\" title=\"vue-router\"></a>vue-router</h2><h3 id=\"模式\"><a href=\"#模式\" class=\"headerlink\" title=\"模式\"></a>模式</h3><ul>\n<li>hash</li>\n<li>history</li></ul>","more":"\n\n<h3 id=\"hash\"><a href=\"#hash\" class=\"headerlink\" title=\"hash\"></a>hash</h3><ul>\n<li>hash变化会触发网页跳转，即浏览器前进或后退</li>\n<li>hash变化不会刷新页面</li>\n<li>hash不会提交到server端</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>hash test<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>hash test<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"btn1\"</span>&gt;</span>修改 hash<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// hash 变化，包括：</span></span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// a. JS 修改 url</span></span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// b. 手动修改 url 的 hash</span></span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// c. 浏览器前进、后退</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">window</span>.onhashchange = <span class=\"function\">(<span class=\"params\">event</span>) =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'old url'</span>, event.oldURL)</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'new url'</span>, event.newURL)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'hash:'</span>, location.hash)</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// 页面初次加载，获取 hash</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">'DOMContentLoaded'</span>, () =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'hash:'</span>, location.hash)</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// JS 修改 url</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'btn1'</span>).addEventListener(<span class=\"string\">'click'</span>, () =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">            location.href = <span class=\"string\">'#/user'</span></span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"history\"><a href=\"#history\" class=\"headerlink\" title=\"history\"></a>history</h3><ul>\n<li>用url规范的路由，跳转时不刷新页面</li>\n<li>history.pushState</li>\n<li>window.onpopState</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>history API test<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>history API test<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"btn1\"</span>&gt;</span>修改 url<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// 页面初次加载，获取 path</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">'DOMContentLoaded'</span>, () =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'load'</span>, location.pathname)</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// 打开一个新的路由</span></span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// 【注意】用 pushState 方式，浏览器不会刷新页面</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'btn1'</span>).addEventListener(<span class=\"string\">'click'</span>, () =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"keyword\">const</span> state = &#123; name: <span class=\"string\">'page1'</span> &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'切换路由到'</span>, <span class=\"string\">'page1'</span>)</span></span><br><span class=\"line\"><span class=\"actionscript\">            history.pushState(state, <span class=\"string\">''</span>, <span class=\"string\">'page1'</span>) <span class=\"comment\">// 重要！！</span></span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// 监听浏览器前进、后退</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">window</span>.onpopstate = <span class=\"function\">(<span class=\"params\">event</span>) =&gt;</span> &#123; <span class=\"comment\">// 重要！！</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'onpopstate'</span>, event.state, location.pathname)</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// 需要 server 端配合，可参考</span></span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// https://router.vuejs.org/zh/guide/essentials/history-mode.html#%E5%90%8E%E7%AB%AF%E9%85%8D%E7%BD%AE%E4%BE%8B%E5%AD%90</span></span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>"},{"layout":"[post]","title":"通信相关问题","date":"2019-08-22T08:11:16.000Z","_content":"## 同源策略以及限制\n<!-- more -->\n### 同源策略的含义\n1. 协议相同\n2. 域名相同\n3. 端口相同 举例来说，```\nhttp://www.example.com/dir/page.html ```这个网址，协议是http://，域名是www.example.com，端口是80（默认端口可以省略）。\n4. ```http://www.example.com/dir2/other.html```  ：同源\n5. ```http://example.com/dir/other.html```：不同源（域名不同）\n6. ```http://v2.www.example.com/dir/other.html```：不同源（域名不同）\n7. ```http://www.example.com:81/dir/other.html```：不同源（端口不同）\n\n### 同源的目的以及限制\n\n举个例子：  \n比如一个恶意网站的页面通过iframe嵌入了银行的登录页面（二者不同源），如果没有同源限制，恶意网页上的javascript脚本就可以在用户登录银行的时候获取用户名和密码。\n\n在浏览器中，script，img、iframe、link等标签都可以加载跨域资源，而不受同源限制，但浏览器限制了JavaScript的权限使其不能读、写加载的内容。\n\n### 同源策略的作用范围\n同源策略限制了客户端javascript代码的部分行为\n1. Cookie、LocalStorage 和 IndexDB 无法读取。\n2. DOM 无法获得。\n3. AJAX 请求不能发送。\n\n## 前后端通信方式\n1. ajax\n2. Websocket\n3. CORS\n\n### AJAX实现\n\n```js\n/**\n * [json 实现ajax的json]\n * @param  {[type]} options [description]\n * @return {[type]}         [description]\n */\n util.json = function (options) {\n     var opt = {\n         url: '',\n         type: 'get',\n         data: {},\n         success: function () {},\n         error: function () {},\n     };\n     util.extend(opt, options);\n     if (opt.url) {\n         var xhr = XMLHttpRequest\n            ? new XMLHttpRequest()\n            : new ActiveXObject('Microsoft.XMLHTTP');\n         var data = opt.data,\n             url = opt.url,\n             type = opt.type.toUpperCase(),\n             dataArr = [];\n         for (var k in data) {\n             dataArr.push(k + '=' + data[k]);\n         }\n         if (type === 'GET') {\n             url = url + '?' + dataArr.join('&');\n             xhr.open(type, url.replace(/\\?$/g, ''), true);\n             xhr.send();\n         }\n         if (type === 'POST') {\n             xhr.open(type, url, true);\n             xmlhttp.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\n             xhr.send(dataArr.join('&'));\n         }\n         xhr.onload = function () {\n             if (xhr.status === 200 || xhr.status === 304) {\n                 var res;\n                 if (opt.success && opt.success instanceof Function) {\n                     res = xhr.responseText;\n                     if (typeof res ==== 'string') {\n                         res = JSON.parse(res);\n                         opt.success.call(xhr, res);\n                     }\n                 }\n             } else {\n                 if (opt.error && opt.error instanceof Function) {\n                     opt.error.call(xhr, res);\n                 }\n             }\n         };\n     }\n };\n\n```\n**在封装ajax请求时，要注意是否兼容IE浏览器。**\n\n## 跨域通信的方式\n\n1. JSONP\n2. Hash\n3. postMessage\n4. WebSocket\n5. CORS\n\n### JSONP\n\n```js\n /**\n  * [function jsonp]\n  * @param  {[type]} url      [description]\n  * @param  {[type]} onsucess [description]\n  * @param  {[type]} onerror  [description]\n  * @param  {[type]} charset  [description]\n  * @return {[type]}          [description]\n  */\n util.jsonp = function (url, onsuccess, onerror, charset) {\n     var callbackName = util.getName('tt_player');\n     window[callbackName] = function () {\n         if (onsuccess && util.isFunction(onsuccess)) {\n             onsuccess(arguments[0]);\n         }\n     };\n     var script = util.createScript(url + '&callback=' + callbackName, charset);\n     script.onload = script.onreadystatechange = function () {\n         if (!script.readyState || /loaded|complete/.test(script.readyState)) {\n             script.onload = script.onreadystatechange = null;\n             // 移除该script的 DOM 对象\n             if (script.parentNode) {\n                 script.parentNode.removeChild(script);\n             }\n             // 删除函数或变量\n             window[callbackName] = null;\n         }\n     };\n     script.onerror = function () {\n         if (onerror && util.isFunction(onerror)) {\n             onerror();\n         }\n     };\n    //添加标签获取js\n     document.getElementsByTagName('head')[0].appendChild(script);\n };\n\n```\n我的理解就是伪装成script标签的请求，获取内容，实现跨域请求。\n\n```html\n <script src=\"http://www.abc.com/?data=name&callback=jsonp\" charset=\"utf-8\"></script>\n\n```\n请求时需要在后面添加callback的返回，```callback=jsonp```,这个是作为函数名返回，本地必须有个同名的函数才能使用。\n\n该函数应该注册在window对象上。 \n\n### Hash\n\n```js\n      // 利用hash，场景是当前页面 A 通过iframe或frame嵌入了跨域的页面 B\n      // 在A中伪代码如下：\n      var B = document.getElementsByTagName('iframe');\n      B.src = B.src + '#' + 'data';\n      // 在B中的伪代码如下\n      window.onhashchange = function () {\n          var data = window.location.hash;\n      };\n```\n### postMessage\n\n```js\n      // postMessage\n      // 窗口A(http:A.com)向跨域的窗口B(http:B.com)发送信息\n      Bwindow.postMessage('data', 'http://B.com');\n      // 在窗口B中监听\n      Awindow.addEventListener('message', function (event) {\n          console.log(event.origin);\n          console.log(event.source);\n          console.log(event.data);\n      }, false);\n\n```\n### WebSocket\n\n```js\n     \n      var ws = new WebSocket('wss://echo.websocket.org');\n\n      ws.onopen = function (evt) {\n          console.log('Connection open ...');\n          ws.send('Hello WebSockets!');\n      };\n\n      ws.onmessage = function (evt) {\n          console.log('Received Message: ', evt.data);\n          ws.close();\n      };\n\n      ws.onclose = function (evt) {\n          console.log('Connection closed.');\n      };\n\n```\n[Websocket【参考资料】](http://www.ruanyifeng.com/blog/2017/05/websocket.html)\n\nws和wss，前者未加密后者加密\n### CORS\n\n```js\n      \n      // url（必选），options（可选）\n      fetch('/some/url/', {\n          method: 'get',\n      }).then(function (response) {\n\n      }).catch(function (err) {\n        // 出错了，等价于 then 的第二个参数，但这样更好用更直观\n      });\n```\n请求头中添加这个\n```Access-Control-Allow-Origin: http://api.bob.com```\n\n [CORS【参考资料】](http://www.ruanyifeng.com/blog/2016/04/cors.html)\n","source":"_posts/通信相关问题.md","raw":"---\nlayout: '[post]'\ntitle: 通信相关问题\ndate: 2019-08-22 16:11:16\ntags: 通信\n---\n## 同源策略以及限制\n<!-- more -->\n### 同源策略的含义\n1. 协议相同\n2. 域名相同\n3. 端口相同 举例来说，```\nhttp://www.example.com/dir/page.html ```这个网址，协议是http://，域名是www.example.com，端口是80（默认端口可以省略）。\n4. ```http://www.example.com/dir2/other.html```  ：同源\n5. ```http://example.com/dir/other.html```：不同源（域名不同）\n6. ```http://v2.www.example.com/dir/other.html```：不同源（域名不同）\n7. ```http://www.example.com:81/dir/other.html```：不同源（端口不同）\n\n### 同源的目的以及限制\n\n举个例子：  \n比如一个恶意网站的页面通过iframe嵌入了银行的登录页面（二者不同源），如果没有同源限制，恶意网页上的javascript脚本就可以在用户登录银行的时候获取用户名和密码。\n\n在浏览器中，script，img、iframe、link等标签都可以加载跨域资源，而不受同源限制，但浏览器限制了JavaScript的权限使其不能读、写加载的内容。\n\n### 同源策略的作用范围\n同源策略限制了客户端javascript代码的部分行为\n1. Cookie、LocalStorage 和 IndexDB 无法读取。\n2. DOM 无法获得。\n3. AJAX 请求不能发送。\n\n## 前后端通信方式\n1. ajax\n2. Websocket\n3. CORS\n\n### AJAX实现\n\n```js\n/**\n * [json 实现ajax的json]\n * @param  {[type]} options [description]\n * @return {[type]}         [description]\n */\n util.json = function (options) {\n     var opt = {\n         url: '',\n         type: 'get',\n         data: {},\n         success: function () {},\n         error: function () {},\n     };\n     util.extend(opt, options);\n     if (opt.url) {\n         var xhr = XMLHttpRequest\n            ? new XMLHttpRequest()\n            : new ActiveXObject('Microsoft.XMLHTTP');\n         var data = opt.data,\n             url = opt.url,\n             type = opt.type.toUpperCase(),\n             dataArr = [];\n         for (var k in data) {\n             dataArr.push(k + '=' + data[k]);\n         }\n         if (type === 'GET') {\n             url = url + '?' + dataArr.join('&');\n             xhr.open(type, url.replace(/\\?$/g, ''), true);\n             xhr.send();\n         }\n         if (type === 'POST') {\n             xhr.open(type, url, true);\n             xmlhttp.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\n             xhr.send(dataArr.join('&'));\n         }\n         xhr.onload = function () {\n             if (xhr.status === 200 || xhr.status === 304) {\n                 var res;\n                 if (opt.success && opt.success instanceof Function) {\n                     res = xhr.responseText;\n                     if (typeof res ==== 'string') {\n                         res = JSON.parse(res);\n                         opt.success.call(xhr, res);\n                     }\n                 }\n             } else {\n                 if (opt.error && opt.error instanceof Function) {\n                     opt.error.call(xhr, res);\n                 }\n             }\n         };\n     }\n };\n\n```\n**在封装ajax请求时，要注意是否兼容IE浏览器。**\n\n## 跨域通信的方式\n\n1. JSONP\n2. Hash\n3. postMessage\n4. WebSocket\n5. CORS\n\n### JSONP\n\n```js\n /**\n  * [function jsonp]\n  * @param  {[type]} url      [description]\n  * @param  {[type]} onsucess [description]\n  * @param  {[type]} onerror  [description]\n  * @param  {[type]} charset  [description]\n  * @return {[type]}          [description]\n  */\n util.jsonp = function (url, onsuccess, onerror, charset) {\n     var callbackName = util.getName('tt_player');\n     window[callbackName] = function () {\n         if (onsuccess && util.isFunction(onsuccess)) {\n             onsuccess(arguments[0]);\n         }\n     };\n     var script = util.createScript(url + '&callback=' + callbackName, charset);\n     script.onload = script.onreadystatechange = function () {\n         if (!script.readyState || /loaded|complete/.test(script.readyState)) {\n             script.onload = script.onreadystatechange = null;\n             // 移除该script的 DOM 对象\n             if (script.parentNode) {\n                 script.parentNode.removeChild(script);\n             }\n             // 删除函数或变量\n             window[callbackName] = null;\n         }\n     };\n     script.onerror = function () {\n         if (onerror && util.isFunction(onerror)) {\n             onerror();\n         }\n     };\n    //添加标签获取js\n     document.getElementsByTagName('head')[0].appendChild(script);\n };\n\n```\n我的理解就是伪装成script标签的请求，获取内容，实现跨域请求。\n\n```html\n <script src=\"http://www.abc.com/?data=name&callback=jsonp\" charset=\"utf-8\"></script>\n\n```\n请求时需要在后面添加callback的返回，```callback=jsonp```,这个是作为函数名返回，本地必须有个同名的函数才能使用。\n\n该函数应该注册在window对象上。 \n\n### Hash\n\n```js\n      // 利用hash，场景是当前页面 A 通过iframe或frame嵌入了跨域的页面 B\n      // 在A中伪代码如下：\n      var B = document.getElementsByTagName('iframe');\n      B.src = B.src + '#' + 'data';\n      // 在B中的伪代码如下\n      window.onhashchange = function () {\n          var data = window.location.hash;\n      };\n```\n### postMessage\n\n```js\n      // postMessage\n      // 窗口A(http:A.com)向跨域的窗口B(http:B.com)发送信息\n      Bwindow.postMessage('data', 'http://B.com');\n      // 在窗口B中监听\n      Awindow.addEventListener('message', function (event) {\n          console.log(event.origin);\n          console.log(event.source);\n          console.log(event.data);\n      }, false);\n\n```\n### WebSocket\n\n```js\n     \n      var ws = new WebSocket('wss://echo.websocket.org');\n\n      ws.onopen = function (evt) {\n          console.log('Connection open ...');\n          ws.send('Hello WebSockets!');\n      };\n\n      ws.onmessage = function (evt) {\n          console.log('Received Message: ', evt.data);\n          ws.close();\n      };\n\n      ws.onclose = function (evt) {\n          console.log('Connection closed.');\n      };\n\n```\n[Websocket【参考资料】](http://www.ruanyifeng.com/blog/2017/05/websocket.html)\n\nws和wss，前者未加密后者加密\n### CORS\n\n```js\n      \n      // url（必选），options（可选）\n      fetch('/some/url/', {\n          method: 'get',\n      }).then(function (response) {\n\n      }).catch(function (err) {\n        // 出错了，等价于 then 的第二个参数，但这样更好用更直观\n      });\n```\n请求头中添加这个\n```Access-Control-Allow-Origin: http://api.bob.com```\n\n [CORS【参考资料】](http://www.ruanyifeng.com/blog/2016/04/cors.html)\n","slug":"通信相关问题","published":1,"updated":"2020-04-16T08:14:46.000Z","comments":1,"photos":[],"link":"","_id":"ckbftlm7m002x7w2p8h6654rj","content":"<h2 id=\"同源策略以及限制\"><a href=\"#同源策略以及限制\" class=\"headerlink\" title=\"同源策略以及限制\"></a>同源策略以及限制</h2><a id=\"more\"></a>\n<h3 id=\"同源策略的含义\"><a href=\"#同源策略的含义\" class=\"headerlink\" title=\"同源策略的含义\"></a>同源策略的含义</h3><ol>\n<li>协议相同</li>\n<li>域名相同</li>\n<li>端口相同 举例来说，<code>http://www.example.com/dir/page.html</code>这个网址，协议是http://，域名是<a href=\"http://www.example.com，端口是80（默认端口可以省略）。\" target=\"_blank\" rel=\"noopener\">www.example.com，端口是80（默认端口可以省略）。</a></li>\n<li><code>http://www.example.com/dir2/other.html</code>  ：同源</li>\n<li><code>http://example.com/dir/other.html</code>：不同源（域名不同）</li>\n<li><code>http://v2.www.example.com/dir/other.html</code>：不同源（域名不同）</li>\n<li><code>http://www.example.com:81/dir/other.html</code>：不同源（端口不同）</li>\n</ol>\n<h3 id=\"同源的目的以及限制\"><a href=\"#同源的目的以及限制\" class=\"headerlink\" title=\"同源的目的以及限制\"></a>同源的目的以及限制</h3><p>举个例子：<br>比如一个恶意网站的页面通过iframe嵌入了银行的登录页面（二者不同源），如果没有同源限制，恶意网页上的javascript脚本就可以在用户登录银行的时候获取用户名和密码。</p>\n<p>在浏览器中，script，img、iframe、link等标签都可以加载跨域资源，而不受同源限制，但浏览器限制了JavaScript的权限使其不能读、写加载的内容。</p>\n<h3 id=\"同源策略的作用范围\"><a href=\"#同源策略的作用范围\" class=\"headerlink\" title=\"同源策略的作用范围\"></a>同源策略的作用范围</h3><p>同源策略限制了客户端javascript代码的部分行为</p>\n<ol>\n<li>Cookie、LocalStorage 和 IndexDB 无法读取。</li>\n<li>DOM 无法获得。</li>\n<li>AJAX 请求不能发送。</li>\n</ol>\n<h2 id=\"前后端通信方式\"><a href=\"#前后端通信方式\" class=\"headerlink\" title=\"前后端通信方式\"></a>前后端通信方式</h2><ol>\n<li>ajax</li>\n<li>Websocket</li>\n<li>CORS</li>\n</ol>\n<h3 id=\"AJAX实现\"><a href=\"#AJAX实现\" class=\"headerlink\" title=\"AJAX实现\"></a>AJAX实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * [json 实现ajax的json]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[type]&#125;</span> </span>options [description]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;[type]&#125;</span>         </span>[description]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> util.json = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">options</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">var</span> opt = &#123;</span><br><span class=\"line\">         url: <span class=\"string\">''</span>,</span><br><span class=\"line\">         type: <span class=\"string\">'get'</span>,</span><br><span class=\"line\">         data: &#123;&#125;,</span><br><span class=\"line\">         success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;,</span><br><span class=\"line\">         error: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;,</span><br><span class=\"line\">     &#125;;</span><br><span class=\"line\">     util.extend(opt, options);</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (opt.url) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">var</span> xhr = XMLHttpRequest</span><br><span class=\"line\">            ? <span class=\"keyword\">new</span> XMLHttpRequest()</span><br><span class=\"line\">            : <span class=\"keyword\">new</span> ActiveXObject(<span class=\"string\">'Microsoft.XMLHTTP'</span>);</span><br><span class=\"line\">         <span class=\"keyword\">var</span> data = opt.data,</span><br><span class=\"line\">             url = opt.url,</span><br><span class=\"line\">             type = opt.type.toUpperCase(),</span><br><span class=\"line\">             dataArr = [];</span><br><span class=\"line\">         <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> data) &#123;</span><br><span class=\"line\">             dataArr.push(k + <span class=\"string\">'='</span> + data[k]);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (type === <span class=\"string\">'GET'</span>) &#123;</span><br><span class=\"line\">             url = url + <span class=\"string\">'?'</span> + dataArr.join(<span class=\"string\">'&amp;'</span>);</span><br><span class=\"line\">             xhr.open(type, url.replace(<span class=\"regexp\">/\\?$/g</span>, <span class=\"string\">''</span>), <span class=\"literal\">true</span>);</span><br><span class=\"line\">             xhr.send();</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (type === <span class=\"string\">'POST'</span>) &#123;</span><br><span class=\"line\">             xhr.open(type, url, <span class=\"literal\">true</span>);</span><br><span class=\"line\">             xmlhttp.setRequestHeader(<span class=\"string\">'Content-type'</span>, <span class=\"string\">'application/x-www-form-urlencoded'</span>);</span><br><span class=\"line\">             xhr.send(dataArr.join(<span class=\"string\">'&amp;'</span>));</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         xhr.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">             <span class=\"keyword\">if</span> (xhr.status === <span class=\"number\">200</span> || xhr.status === <span class=\"number\">304</span>) &#123;</span><br><span class=\"line\">                 <span class=\"keyword\">var</span> res;</span><br><span class=\"line\">                 <span class=\"keyword\">if</span> (opt.success &amp;&amp; opt.success <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Function</span>) &#123;</span><br><span class=\"line\">                     res = xhr.responseText;</span><br><span class=\"line\">                     <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> res ==== <span class=\"string\">'string'</span>) &#123;</span><br><span class=\"line\">                         res = <span class=\"built_in\">JSON</span>.parse(res);</span><br><span class=\"line\">                         opt.success.call(xhr, res);</span><br><span class=\"line\">                     &#125;</span><br><span class=\"line\">                 &#125;</span><br><span class=\"line\">             &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                 <span class=\"keyword\">if</span> (opt.error &amp;&amp; opt.error <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Function</span>) &#123;</span><br><span class=\"line\">                     opt.error.call(xhr, res);</span><br><span class=\"line\">                 &#125;</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">         &#125;;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;;</span><br></pre></td></tr></table></figure>\n<p><strong>在封装ajax请求时，要注意是否兼容IE浏览器。</strong></p>\n<h2 id=\"跨域通信的方式\"><a href=\"#跨域通信的方式\" class=\"headerlink\" title=\"跨域通信的方式\"></a>跨域通信的方式</h2><ol>\n<li>JSONP</li>\n<li>Hash</li>\n<li>postMessage</li>\n<li>WebSocket</li>\n<li>CORS</li>\n</ol>\n<h3 id=\"JSONP\"><a href=\"#JSONP\" class=\"headerlink\" title=\"JSONP\"></a>JSONP</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * [function jsonp]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[type]&#125;</span> </span>url      [description]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[type]&#125;</span> </span>onsucess [description]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[type]&#125;</span> </span>onerror  [description]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[type]&#125;</span> </span>charset  [description]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;[type]&#125;</span>          </span>[description]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">util.jsonp = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">url, onsuccess, onerror, charset</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> callbackName = util.getName(<span class=\"string\">'tt_player'</span>);</span><br><span class=\"line\">    <span class=\"built_in\">window</span>[callbackName] = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (onsuccess &amp;&amp; util.isFunction(onsuccess)) &#123;</span><br><span class=\"line\">            onsuccess(<span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> script = util.createScript(url + <span class=\"string\">'&amp;callback='</span> + callbackName, charset);</span><br><span class=\"line\">    script.onload = script.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!script.readyState || <span class=\"regexp\">/loaded|complete/</span>.test(script.readyState)) &#123;</span><br><span class=\"line\">            script.onload = script.onreadystatechange = <span class=\"literal\">null</span>;</span><br><span class=\"line\">            <span class=\"comment\">// 移除该script的 DOM 对象</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (script.parentNode) &#123;</span><br><span class=\"line\">                script.parentNode.removeChild(script);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 删除函数或变量</span></span><br><span class=\"line\">            <span class=\"built_in\">window</span>[callbackName] = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    script.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (onerror &amp;&amp; util.isFunction(onerror)) &#123;</span><br><span class=\"line\">            onerror();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">   <span class=\"comment\">//添加标签获取js</span></span><br><span class=\"line\">    <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'head'</span>)[<span class=\"number\">0</span>].appendChild(script);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>我的理解就是伪装成script标签的请求，获取内容，实现跨域请求。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://www.abc.com/?data=name&amp;callback=jsonp\"</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>请求时需要在后面添加callback的返回，<code>callback=jsonp</code>,这个是作为函数名返回，本地必须有个同名的函数才能使用。</p>\n<p>该函数应该注册在window对象上。 </p>\n<h3 id=\"Hash\"><a href=\"#Hash\" class=\"headerlink\" title=\"Hash\"></a>Hash</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 利用hash，场景是当前页面 A 通过iframe或frame嵌入了跨域的页面 B</span></span><br><span class=\"line\"><span class=\"comment\">// 在A中伪代码如下：</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> B = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'iframe'</span>);</span><br><span class=\"line\">B.src = B.src + <span class=\"string\">'#'</span> + <span class=\"string\">'data'</span>;</span><br><span class=\"line\"><span class=\"comment\">// 在B中的伪代码如下</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.onhashchange = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> data = <span class=\"built_in\">window</span>.location.hash;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"postMessage\"><a href=\"#postMessage\" class=\"headerlink\" title=\"postMessage\"></a>postMessage</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// postMessage</span></span><br><span class=\"line\"><span class=\"comment\">// 窗口A(http:A.com)向跨域的窗口B(http:B.com)发送信息</span></span><br><span class=\"line\">Bwindow.postMessage(<span class=\"string\">'data'</span>, <span class=\"string\">'http://B.com'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 在窗口B中监听</span></span><br><span class=\"line\">Awindow.addEventListener(<span class=\"string\">'message'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(event.origin);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(event.source);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(event.data);</span><br><span class=\"line\">&#125;, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"WebSocket\"><a href=\"#WebSocket\" class=\"headerlink\" title=\"WebSocket\"></a>WebSocket</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     </span><br><span class=\"line\"><span class=\"keyword\">var</span> ws = <span class=\"keyword\">new</span> WebSocket(<span class=\"string\">'wss://echo.websocket.org'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">ws.onopen = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">evt</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Connection open ...'</span>);</span><br><span class=\"line\">    ws.send(<span class=\"string\">'Hello WebSockets!'</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">ws.onmessage = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">evt</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Received Message: '</span>, evt.data);</span><br><span class=\"line\">    ws.close();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">ws.onclose = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">evt</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Connection closed.'</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://www.ruanyifeng.com/blog/2017/05/websocket.html\" target=\"_blank\" rel=\"noopener\">Websocket【参考资料】</a></p>\n<p>ws和wss，前者未加密后者加密</p>\n<h3 id=\"CORS\"><a href=\"#CORS\" class=\"headerlink\" title=\"CORS\"></a>CORS</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// url（必选），options（可选）</span></span><br><span class=\"line\">fetch(<span class=\"string\">'/some/url/'</span>, &#123;</span><br><span class=\"line\">    method: <span class=\"string\">'get'</span>,</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">response</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 出错了，等价于 then 的第二个参数，但这样更好用更直观</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>请求头中添加这个<br><code>Access-Control-Allow-Origin: http://api.bob.com</code></p>\n<p> <a href=\"http://www.ruanyifeng.com/blog/2016/04/cors.html\" target=\"_blank\" rel=\"noopener\">CORS【参考资料】</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"同源策略以及限制\"><a href=\"#同源策略以及限制\" class=\"headerlink\" title=\"同源策略以及限制\"></a>同源策略以及限制</h2>","more":"<h3 id=\"同源策略的含义\"><a href=\"#同源策略的含义\" class=\"headerlink\" title=\"同源策略的含义\"></a>同源策略的含义</h3><ol>\n<li>协议相同</li>\n<li>域名相同</li>\n<li>端口相同 举例来说，<code>http://www.example.com/dir/page.html</code>这个网址，协议是http://，域名是<a href=\"http://www.example.com，端口是80（默认端口可以省略）。\" target=\"_blank\" rel=\"noopener\">www.example.com，端口是80（默认端口可以省略）。</a></li>\n<li><code>http://www.example.com/dir2/other.html</code>  ：同源</li>\n<li><code>http://example.com/dir/other.html</code>：不同源（域名不同）</li>\n<li><code>http://v2.www.example.com/dir/other.html</code>：不同源（域名不同）</li>\n<li><code>http://www.example.com:81/dir/other.html</code>：不同源（端口不同）</li>\n</ol>\n<h3 id=\"同源的目的以及限制\"><a href=\"#同源的目的以及限制\" class=\"headerlink\" title=\"同源的目的以及限制\"></a>同源的目的以及限制</h3><p>举个例子：<br>比如一个恶意网站的页面通过iframe嵌入了银行的登录页面（二者不同源），如果没有同源限制，恶意网页上的javascript脚本就可以在用户登录银行的时候获取用户名和密码。</p>\n<p>在浏览器中，script，img、iframe、link等标签都可以加载跨域资源，而不受同源限制，但浏览器限制了JavaScript的权限使其不能读、写加载的内容。</p>\n<h3 id=\"同源策略的作用范围\"><a href=\"#同源策略的作用范围\" class=\"headerlink\" title=\"同源策略的作用范围\"></a>同源策略的作用范围</h3><p>同源策略限制了客户端javascript代码的部分行为</p>\n<ol>\n<li>Cookie、LocalStorage 和 IndexDB 无法读取。</li>\n<li>DOM 无法获得。</li>\n<li>AJAX 请求不能发送。</li>\n</ol>\n<h2 id=\"前后端通信方式\"><a href=\"#前后端通信方式\" class=\"headerlink\" title=\"前后端通信方式\"></a>前后端通信方式</h2><ol>\n<li>ajax</li>\n<li>Websocket</li>\n<li>CORS</li>\n</ol>\n<h3 id=\"AJAX实现\"><a href=\"#AJAX实现\" class=\"headerlink\" title=\"AJAX实现\"></a>AJAX实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * [json 实现ajax的json]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[type]&#125;</span> </span>options [description]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;[type]&#125;</span>         </span>[description]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> util.json = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">options</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">var</span> opt = &#123;</span><br><span class=\"line\">         url: <span class=\"string\">''</span>,</span><br><span class=\"line\">         type: <span class=\"string\">'get'</span>,</span><br><span class=\"line\">         data: &#123;&#125;,</span><br><span class=\"line\">         success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;,</span><br><span class=\"line\">         error: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;,</span><br><span class=\"line\">     &#125;;</span><br><span class=\"line\">     util.extend(opt, options);</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (opt.url) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">var</span> xhr = XMLHttpRequest</span><br><span class=\"line\">            ? <span class=\"keyword\">new</span> XMLHttpRequest()</span><br><span class=\"line\">            : <span class=\"keyword\">new</span> ActiveXObject(<span class=\"string\">'Microsoft.XMLHTTP'</span>);</span><br><span class=\"line\">         <span class=\"keyword\">var</span> data = opt.data,</span><br><span class=\"line\">             url = opt.url,</span><br><span class=\"line\">             type = opt.type.toUpperCase(),</span><br><span class=\"line\">             dataArr = [];</span><br><span class=\"line\">         <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> data) &#123;</span><br><span class=\"line\">             dataArr.push(k + <span class=\"string\">'='</span> + data[k]);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (type === <span class=\"string\">'GET'</span>) &#123;</span><br><span class=\"line\">             url = url + <span class=\"string\">'?'</span> + dataArr.join(<span class=\"string\">'&amp;'</span>);</span><br><span class=\"line\">             xhr.open(type, url.replace(<span class=\"regexp\">/\\?$/g</span>, <span class=\"string\">''</span>), <span class=\"literal\">true</span>);</span><br><span class=\"line\">             xhr.send();</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (type === <span class=\"string\">'POST'</span>) &#123;</span><br><span class=\"line\">             xhr.open(type, url, <span class=\"literal\">true</span>);</span><br><span class=\"line\">             xmlhttp.setRequestHeader(<span class=\"string\">'Content-type'</span>, <span class=\"string\">'application/x-www-form-urlencoded'</span>);</span><br><span class=\"line\">             xhr.send(dataArr.join(<span class=\"string\">'&amp;'</span>));</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         xhr.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">             <span class=\"keyword\">if</span> (xhr.status === <span class=\"number\">200</span> || xhr.status === <span class=\"number\">304</span>) &#123;</span><br><span class=\"line\">                 <span class=\"keyword\">var</span> res;</span><br><span class=\"line\">                 <span class=\"keyword\">if</span> (opt.success &amp;&amp; opt.success <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Function</span>) &#123;</span><br><span class=\"line\">                     res = xhr.responseText;</span><br><span class=\"line\">                     <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> res ==== <span class=\"string\">'string'</span>) &#123;</span><br><span class=\"line\">                         res = <span class=\"built_in\">JSON</span>.parse(res);</span><br><span class=\"line\">                         opt.success.call(xhr, res);</span><br><span class=\"line\">                     &#125;</span><br><span class=\"line\">                 &#125;</span><br><span class=\"line\">             &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                 <span class=\"keyword\">if</span> (opt.error &amp;&amp; opt.error <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Function</span>) &#123;</span><br><span class=\"line\">                     opt.error.call(xhr, res);</span><br><span class=\"line\">                 &#125;</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">         &#125;;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;;</span><br></pre></td></tr></table></figure>\n<p><strong>在封装ajax请求时，要注意是否兼容IE浏览器。</strong></p>\n<h2 id=\"跨域通信的方式\"><a href=\"#跨域通信的方式\" class=\"headerlink\" title=\"跨域通信的方式\"></a>跨域通信的方式</h2><ol>\n<li>JSONP</li>\n<li>Hash</li>\n<li>postMessage</li>\n<li>WebSocket</li>\n<li>CORS</li>\n</ol>\n<h3 id=\"JSONP\"><a href=\"#JSONP\" class=\"headerlink\" title=\"JSONP\"></a>JSONP</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * [function jsonp]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[type]&#125;</span> </span>url      [description]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[type]&#125;</span> </span>onsucess [description]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[type]&#125;</span> </span>onerror  [description]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[type]&#125;</span> </span>charset  [description]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;[type]&#125;</span>          </span>[description]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">util.jsonp = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">url, onsuccess, onerror, charset</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> callbackName = util.getName(<span class=\"string\">'tt_player'</span>);</span><br><span class=\"line\">    <span class=\"built_in\">window</span>[callbackName] = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (onsuccess &amp;&amp; util.isFunction(onsuccess)) &#123;</span><br><span class=\"line\">            onsuccess(<span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> script = util.createScript(url + <span class=\"string\">'&amp;callback='</span> + callbackName, charset);</span><br><span class=\"line\">    script.onload = script.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!script.readyState || <span class=\"regexp\">/loaded|complete/</span>.test(script.readyState)) &#123;</span><br><span class=\"line\">            script.onload = script.onreadystatechange = <span class=\"literal\">null</span>;</span><br><span class=\"line\">            <span class=\"comment\">// 移除该script的 DOM 对象</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (script.parentNode) &#123;</span><br><span class=\"line\">                script.parentNode.removeChild(script);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 删除函数或变量</span></span><br><span class=\"line\">            <span class=\"built_in\">window</span>[callbackName] = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    script.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (onerror &amp;&amp; util.isFunction(onerror)) &#123;</span><br><span class=\"line\">            onerror();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">   <span class=\"comment\">//添加标签获取js</span></span><br><span class=\"line\">    <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'head'</span>)[<span class=\"number\">0</span>].appendChild(script);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>我的理解就是伪装成script标签的请求，获取内容，实现跨域请求。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://www.abc.com/?data=name&amp;callback=jsonp\"</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>请求时需要在后面添加callback的返回，<code>callback=jsonp</code>,这个是作为函数名返回，本地必须有个同名的函数才能使用。</p>\n<p>该函数应该注册在window对象上。 </p>\n<h3 id=\"Hash\"><a href=\"#Hash\" class=\"headerlink\" title=\"Hash\"></a>Hash</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 利用hash，场景是当前页面 A 通过iframe或frame嵌入了跨域的页面 B</span></span><br><span class=\"line\"><span class=\"comment\">// 在A中伪代码如下：</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> B = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'iframe'</span>);</span><br><span class=\"line\">B.src = B.src + <span class=\"string\">'#'</span> + <span class=\"string\">'data'</span>;</span><br><span class=\"line\"><span class=\"comment\">// 在B中的伪代码如下</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.onhashchange = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> data = <span class=\"built_in\">window</span>.location.hash;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"postMessage\"><a href=\"#postMessage\" class=\"headerlink\" title=\"postMessage\"></a>postMessage</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// postMessage</span></span><br><span class=\"line\"><span class=\"comment\">// 窗口A(http:A.com)向跨域的窗口B(http:B.com)发送信息</span></span><br><span class=\"line\">Bwindow.postMessage(<span class=\"string\">'data'</span>, <span class=\"string\">'http://B.com'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 在窗口B中监听</span></span><br><span class=\"line\">Awindow.addEventListener(<span class=\"string\">'message'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(event.origin);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(event.source);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(event.data);</span><br><span class=\"line\">&#125;, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"WebSocket\"><a href=\"#WebSocket\" class=\"headerlink\" title=\"WebSocket\"></a>WebSocket</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     </span><br><span class=\"line\"><span class=\"keyword\">var</span> ws = <span class=\"keyword\">new</span> WebSocket(<span class=\"string\">'wss://echo.websocket.org'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">ws.onopen = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">evt</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Connection open ...'</span>);</span><br><span class=\"line\">    ws.send(<span class=\"string\">'Hello WebSockets!'</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">ws.onmessage = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">evt</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Received Message: '</span>, evt.data);</span><br><span class=\"line\">    ws.close();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">ws.onclose = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">evt</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Connection closed.'</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://www.ruanyifeng.com/blog/2017/05/websocket.html\" target=\"_blank\" rel=\"noopener\">Websocket【参考资料】</a></p>\n<p>ws和wss，前者未加密后者加密</p>\n<h3 id=\"CORS\"><a href=\"#CORS\" class=\"headerlink\" title=\"CORS\"></a>CORS</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// url（必选），options（可选）</span></span><br><span class=\"line\">fetch(<span class=\"string\">'/some/url/'</span>, &#123;</span><br><span class=\"line\">    method: <span class=\"string\">'get'</span>,</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">response</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 出错了，等价于 then 的第二个参数，但这样更好用更直观</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>请求头中添加这个<br><code>Access-Control-Allow-Origin: http://api.bob.com</code></p>\n<p> <a href=\"http://www.ruanyifeng.com/blog/2016/04/cors.html\" target=\"_blank\" rel=\"noopener\">CORS【参考资料】</a></p>"},{"layout":"[post]","title":"页面布局","date":"2019-04-19T07:13:43.000Z","_content":"## 页面布局\n页面布局是作为前端开发的必备技能，能够让页面适应多种规格大小的屏幕，才是一个合格的开发，那么我们有多少种形式呢？  \n<!-- more -->\n**我们使用最基本的三格式布局来做这个尝试**\n### float方式\n\n```css\n        .area {\n            min-height: 200px;\n            \n        }\n\n        .box-one {\n            width: 300px;\n            background: red;\n            float: left;\n        }\n\n        .box-two {\n            background: blue;\n            color: #ffffff;\n            text-align: center;\n        }\n\n        .box-three {\n            width: 300px;\n            background: orange;\n            float: right;\n        }\n```\n\n```html\n    <article class=\"area\">\n        <div class=\"box-one\">box1</div>\n        <div class=\"box-three\">box3</div>\n        <div class=\"box-two\">\n            <h2>页面布局</h2>\n            <p>我是第一行</p>\n            <p>我是第二行</p>\n            <p>我是第三行</p>\n        </div>\n    </article>\n```\n**需要注意box-two是放在最后位置的，因为float的关系，放到最后会将三号挤下去**\n### 使用绝对定位\n**过于low，不必了解了。**\n### flex布局\n\n```css\n.area {\n            min-height: 200px;\n            display: grid;\n            width: 100%;\n        }\n\n        .box-one {\n            width: 300px;\n            background: red;\n        }\n\n        .box-two {\n            background: blue;\n            color: #ffffff;\n            text-align: center;\n            flex-grow: 1;\n        }\n\n        .box-three {\n            width: 300px;\n            background: orange;\n        }\n```\n\n```html\n <article class=\"area\">\n        <div class=\"box-one\">box1</div>\n        <div class=\"box-two\">\n            <h2>页面布局</h2>\n            <p>我是第一行</p>\n            <p>我是第二行</p>\n            <p>我是第三行</p>\n        </div>\n        <div class=\"box-three\">box3</div>\n\n    </article>\n```\n### grid布局\n\n```css\n.area {\n            min-height: 200px;\n            display: grid;\n            width: 100%;\n            grid-template-columns: 33% 34% 33%;\n        }\n\n        .box-one {\n            background: red;\n        }\n\n        .box-two {\n            background: blue;\n            color: #ffffff;\n            text-align: center;\n        }\n\n        .box-three {\n            background: orange;\n        }\n```\n```html\n <article class=\"area\">\n        <div class=\"box-one\">box1</div>\n        <div class=\"box-two\">\n            <h2>页面布局</h2>\n            <p>我是第一行</p>\n            <p>我是第二行</p>\n            <p>我是第三行</p>\n        </div>\n        <div class=\"box-three\">box3</div>\n\n    </article>\n```\n### table布局\n\n```css\n        .area {\n            min-height: 200px;\n            display: table;\n            width: 100%;\n\n        }\n\n        .area div {\n            display: table-cell;\n            height: 200px;\n        }\n\n        .box-one {\n            background: red;\n        }\n\n        .box-two {\n            background: blue;\n            color: #ffffff;\n            text-align: center;\n        }\n\n        .box-three {\n            background: orange;\n        }\n```\n```html\n <article class=\"area\">\n        <div class=\"box-one\">box1</div>\n        <div class=\"box-two\">\n            <h2>页面布局</h2>\n            <p>我是第一行</p>\n            <p>我是第二行</p>\n            <p>我是第三行</p>\n        </div>\n        <div class=\"box-three\">box3</div>\n\n    </article>\n```\n各方案优缺点：\n\n1.浮动和绝对定位都脱离了文档流，浮动如果周边处理得当，兼容性就会比较好，绝对定位使用较方便。\n\n2.flex布局是CSS3中新增，就是为了解决浮动和绝对顶对带来的不足，是一种比较完美的解决方案。\n\n3.网格布局是最新特性，就像是栅格系统。代码量少。\n\n4.表格布局一旦有一部分高度发生变化，如当表格中内容较多，超出设定高度后，其余部分都会发生变化，这样会不符合开发要求，用户体检也不好。\n\n5.上述题目，当高度未知时，只有flex布局和table布局通用。\n\n\n\n","source":"_posts/页面布局.md","raw":"---\nlayout: '[post]'\ntitle: 页面布局\ndate: 2019-04-19 15:13:43\ntags: html\n---\n## 页面布局\n页面布局是作为前端开发的必备技能，能够让页面适应多种规格大小的屏幕，才是一个合格的开发，那么我们有多少种形式呢？  \n<!-- more -->\n**我们使用最基本的三格式布局来做这个尝试**\n### float方式\n\n```css\n        .area {\n            min-height: 200px;\n            \n        }\n\n        .box-one {\n            width: 300px;\n            background: red;\n            float: left;\n        }\n\n        .box-two {\n            background: blue;\n            color: #ffffff;\n            text-align: center;\n        }\n\n        .box-three {\n            width: 300px;\n            background: orange;\n            float: right;\n        }\n```\n\n```html\n    <article class=\"area\">\n        <div class=\"box-one\">box1</div>\n        <div class=\"box-three\">box3</div>\n        <div class=\"box-two\">\n            <h2>页面布局</h2>\n            <p>我是第一行</p>\n            <p>我是第二行</p>\n            <p>我是第三行</p>\n        </div>\n    </article>\n```\n**需要注意box-two是放在最后位置的，因为float的关系，放到最后会将三号挤下去**\n### 使用绝对定位\n**过于low，不必了解了。**\n### flex布局\n\n```css\n.area {\n            min-height: 200px;\n            display: grid;\n            width: 100%;\n        }\n\n        .box-one {\n            width: 300px;\n            background: red;\n        }\n\n        .box-two {\n            background: blue;\n            color: #ffffff;\n            text-align: center;\n            flex-grow: 1;\n        }\n\n        .box-three {\n            width: 300px;\n            background: orange;\n        }\n```\n\n```html\n <article class=\"area\">\n        <div class=\"box-one\">box1</div>\n        <div class=\"box-two\">\n            <h2>页面布局</h2>\n            <p>我是第一行</p>\n            <p>我是第二行</p>\n            <p>我是第三行</p>\n        </div>\n        <div class=\"box-three\">box3</div>\n\n    </article>\n```\n### grid布局\n\n```css\n.area {\n            min-height: 200px;\n            display: grid;\n            width: 100%;\n            grid-template-columns: 33% 34% 33%;\n        }\n\n        .box-one {\n            background: red;\n        }\n\n        .box-two {\n            background: blue;\n            color: #ffffff;\n            text-align: center;\n        }\n\n        .box-three {\n            background: orange;\n        }\n```\n```html\n <article class=\"area\">\n        <div class=\"box-one\">box1</div>\n        <div class=\"box-two\">\n            <h2>页面布局</h2>\n            <p>我是第一行</p>\n            <p>我是第二行</p>\n            <p>我是第三行</p>\n        </div>\n        <div class=\"box-three\">box3</div>\n\n    </article>\n```\n### table布局\n\n```css\n        .area {\n            min-height: 200px;\n            display: table;\n            width: 100%;\n\n        }\n\n        .area div {\n            display: table-cell;\n            height: 200px;\n        }\n\n        .box-one {\n            background: red;\n        }\n\n        .box-two {\n            background: blue;\n            color: #ffffff;\n            text-align: center;\n        }\n\n        .box-three {\n            background: orange;\n        }\n```\n```html\n <article class=\"area\">\n        <div class=\"box-one\">box1</div>\n        <div class=\"box-two\">\n            <h2>页面布局</h2>\n            <p>我是第一行</p>\n            <p>我是第二行</p>\n            <p>我是第三行</p>\n        </div>\n        <div class=\"box-three\">box3</div>\n\n    </article>\n```\n各方案优缺点：\n\n1.浮动和绝对定位都脱离了文档流，浮动如果周边处理得当，兼容性就会比较好，绝对定位使用较方便。\n\n2.flex布局是CSS3中新增，就是为了解决浮动和绝对顶对带来的不足，是一种比较完美的解决方案。\n\n3.网格布局是最新特性，就像是栅格系统。代码量少。\n\n4.表格布局一旦有一部分高度发生变化，如当表格中内容较多，超出设定高度后，其余部分都会发生变化，这样会不符合开发要求，用户体检也不好。\n\n5.上述题目，当高度未知时，只有flex布局和table布局通用。\n\n\n\n","slug":"页面布局","published":1,"updated":"2020-02-12T10:03:14.000Z","comments":1,"photos":[],"link":"","_id":"ckbftlm7o00307w2pcptw0nea","content":"<h2 id=\"页面布局\"><a href=\"#页面布局\" class=\"headerlink\" title=\"页面布局\"></a>页面布局</h2><p>页面布局是作为前端开发的必备技能，能够让页面适应多种规格大小的屏幕，才是一个合格的开发，那么我们有多少种形式呢？  </p>\n<a id=\"more\"></a>\n<p><strong>我们使用最基本的三格式布局来做这个尝试</strong></p>\n<h3 id=\"float方式\"><a href=\"#float方式\" class=\"headerlink\" title=\"float方式\"></a>float方式</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.area</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">min-height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box-one</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box-two</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: blue;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#ffffff</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box-three</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: orange;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: right;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">article</span> <span class=\"attr\">class</span>=<span class=\"string\">\"area\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box-one\"</span>&gt;</span>box1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box-three\"</span>&gt;</span>box3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box-two\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>页面布局<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是第一行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是第二行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是第三行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>需要注意box-two是放在最后位置的，因为float的关系，放到最后会将三号挤下去</strong></p>\n<h3 id=\"使用绝对定位\"><a href=\"#使用绝对定位\" class=\"headerlink\" title=\"使用绝对定位\"></a>使用绝对定位</h3><p><strong>过于low，不必了解了。</strong></p>\n<h3 id=\"flex布局\"><a href=\"#flex布局\" class=\"headerlink\" title=\"flex布局\"></a>flex布局</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.area</span> &#123;</span><br><span class=\"line\">            <span class=\"attribute\">min-height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">            <span class=\"attribute\">display</span>: grid;</span><br><span class=\"line\">            <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"selector-class\">.box-one</span> &#123;</span><br><span class=\"line\">            <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">            <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"selector-class\">.box-two</span> &#123;</span><br><span class=\"line\">            <span class=\"attribute\">background</span>: blue;</span><br><span class=\"line\">            <span class=\"attribute\">color</span>: <span class=\"number\">#ffffff</span>;</span><br><span class=\"line\">            <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">            <span class=\"attribute\">flex-grow</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"selector-class\">.box-three</span> &#123;</span><br><span class=\"line\">            <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">            <span class=\"attribute\">background</span>: orange;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">article</span> <span class=\"attr\">class</span>=<span class=\"string\">\"area\"</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box-one\"</span>&gt;</span>box1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box-two\"</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>页面布局<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是第一行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是第二行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是第三行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box-three\"</span>&gt;</span>box3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"grid布局\"><a href=\"#grid布局\" class=\"headerlink\" title=\"grid布局\"></a>grid布局</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.area</span> &#123;</span><br><span class=\"line\">            <span class=\"attribute\">min-height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">            <span class=\"attribute\">display</span>: grid;</span><br><span class=\"line\">            <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">            <span class=\"attribute\">grid-template-columns</span>: <span class=\"number\">33%</span> <span class=\"number\">34%</span> <span class=\"number\">33%</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"selector-class\">.box-one</span> &#123;</span><br><span class=\"line\">            <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"selector-class\">.box-two</span> &#123;</span><br><span class=\"line\">            <span class=\"attribute\">background</span>: blue;</span><br><span class=\"line\">            <span class=\"attribute\">color</span>: <span class=\"number\">#ffffff</span>;</span><br><span class=\"line\">            <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"selector-class\">.box-three</span> &#123;</span><br><span class=\"line\">            <span class=\"attribute\">background</span>: orange;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">article</span> <span class=\"attr\">class</span>=<span class=\"string\">\"area\"</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box-one\"</span>&gt;</span>box1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box-two\"</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>页面布局<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是第一行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是第二行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是第三行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box-three\"</span>&gt;</span>box3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"table布局\"><a href=\"#table布局\" class=\"headerlink\" title=\"table布局\"></a>table布局</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.area</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">min-height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: table;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.area</span> <span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: table-cell;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box-one</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box-two</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: blue;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#ffffff</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box-three</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: orange;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">article</span> <span class=\"attr\">class</span>=<span class=\"string\">\"area\"</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box-one\"</span>&gt;</span>box1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box-two\"</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>页面布局<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是第一行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是第二行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是第三行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box-three\"</span>&gt;</span>box3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>各方案优缺点：</p>\n<p>1.浮动和绝对定位都脱离了文档流，浮动如果周边处理得当，兼容性就会比较好，绝对定位使用较方便。</p>\n<p>2.flex布局是CSS3中新增，就是为了解决浮动和绝对顶对带来的不足，是一种比较完美的解决方案。</p>\n<p>3.网格布局是最新特性，就像是栅格系统。代码量少。</p>\n<p>4.表格布局一旦有一部分高度发生变化，如当表格中内容较多，超出设定高度后，其余部分都会发生变化，这样会不符合开发要求，用户体检也不好。</p>\n<p>5.上述题目，当高度未知时，只有flex布局和table布局通用。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"页面布局\"><a href=\"#页面布局\" class=\"headerlink\" title=\"页面布局\"></a>页面布局</h2><p>页面布局是作为前端开发的必备技能，能够让页面适应多种规格大小的屏幕，才是一个合格的开发，那么我们有多少种形式呢？  </p>","more":"<p><strong>我们使用最基本的三格式布局来做这个尝试</strong></p>\n<h3 id=\"float方式\"><a href=\"#float方式\" class=\"headerlink\" title=\"float方式\"></a>float方式</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.area</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">min-height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box-one</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box-two</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: blue;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#ffffff</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box-three</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: orange;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: right;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">article</span> <span class=\"attr\">class</span>=<span class=\"string\">\"area\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box-one\"</span>&gt;</span>box1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box-three\"</span>&gt;</span>box3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box-two\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>页面布局<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是第一行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是第二行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是第三行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>需要注意box-two是放在最后位置的，因为float的关系，放到最后会将三号挤下去</strong></p>\n<h3 id=\"使用绝对定位\"><a href=\"#使用绝对定位\" class=\"headerlink\" title=\"使用绝对定位\"></a>使用绝对定位</h3><p><strong>过于low，不必了解了。</strong></p>\n<h3 id=\"flex布局\"><a href=\"#flex布局\" class=\"headerlink\" title=\"flex布局\"></a>flex布局</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.area</span> &#123;</span><br><span class=\"line\">            <span class=\"attribute\">min-height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">            <span class=\"attribute\">display</span>: grid;</span><br><span class=\"line\">            <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"selector-class\">.box-one</span> &#123;</span><br><span class=\"line\">            <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">            <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"selector-class\">.box-two</span> &#123;</span><br><span class=\"line\">            <span class=\"attribute\">background</span>: blue;</span><br><span class=\"line\">            <span class=\"attribute\">color</span>: <span class=\"number\">#ffffff</span>;</span><br><span class=\"line\">            <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">            <span class=\"attribute\">flex-grow</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"selector-class\">.box-three</span> &#123;</span><br><span class=\"line\">            <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">            <span class=\"attribute\">background</span>: orange;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">article</span> <span class=\"attr\">class</span>=<span class=\"string\">\"area\"</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box-one\"</span>&gt;</span>box1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box-two\"</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>页面布局<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是第一行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是第二行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是第三行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box-three\"</span>&gt;</span>box3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"grid布局\"><a href=\"#grid布局\" class=\"headerlink\" title=\"grid布局\"></a>grid布局</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.area</span> &#123;</span><br><span class=\"line\">            <span class=\"attribute\">min-height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">            <span class=\"attribute\">display</span>: grid;</span><br><span class=\"line\">            <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">            <span class=\"attribute\">grid-template-columns</span>: <span class=\"number\">33%</span> <span class=\"number\">34%</span> <span class=\"number\">33%</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"selector-class\">.box-one</span> &#123;</span><br><span class=\"line\">            <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"selector-class\">.box-two</span> &#123;</span><br><span class=\"line\">            <span class=\"attribute\">background</span>: blue;</span><br><span class=\"line\">            <span class=\"attribute\">color</span>: <span class=\"number\">#ffffff</span>;</span><br><span class=\"line\">            <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"selector-class\">.box-three</span> &#123;</span><br><span class=\"line\">            <span class=\"attribute\">background</span>: orange;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">article</span> <span class=\"attr\">class</span>=<span class=\"string\">\"area\"</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box-one\"</span>&gt;</span>box1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box-two\"</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>页面布局<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是第一行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是第二行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是第三行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box-three\"</span>&gt;</span>box3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"table布局\"><a href=\"#table布局\" class=\"headerlink\" title=\"table布局\"></a>table布局</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.area</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">min-height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: table;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.area</span> <span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: table-cell;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box-one</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box-two</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: blue;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#ffffff</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box-three</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: orange;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">article</span> <span class=\"attr\">class</span>=<span class=\"string\">\"area\"</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box-one\"</span>&gt;</span>box1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box-two\"</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>页面布局<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是第一行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是第二行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是第三行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box-three\"</span>&gt;</span>box3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>各方案优缺点：</p>\n<p>1.浮动和绝对定位都脱离了文档流，浮动如果周边处理得当，兼容性就会比较好，绝对定位使用较方便。</p>\n<p>2.flex布局是CSS3中新增，就是为了解决浮动和绝对顶对带来的不足，是一种比较完美的解决方案。</p>\n<p>3.网格布局是最新特性，就像是栅格系统。代码量少。</p>\n<p>4.表格布局一旦有一部分高度发生变化，如当表格中内容较多，超出设定高度后，其余部分都会发生变化，这样会不符合开发要求，用户体检也不好。</p>\n<p>5.上述题目，当高度未知时，只有flex布局和table布局通用。</p>"},{"layout":"[post]","title":"算法高频问题","date":"2020-05-07T06:04:21.000Z","_content":"\n\n简介\n--\n\n文中所有题目均为精心挑选过的超高频题目，所以大家可以收藏起来\n\n适用人群\n----\n\n针对有一定数据结构基础 (了解链表, 二叉树, 二叉堆, 递归) 的基本概念, 并对时间空间复杂度有基本认知的。\n\n食用指南\n----\n\n将文中列出的每道题至少手写 3 遍\n\n面试前可以按照本文整理出来的题目直接过一遍\n<!-- more -->\n说明\n--\n\n文章更新频率: 除休息日外, 每天在题目下方更新一道题的题解\n\n有 LeetCode 原题的将贴上原地址，不在文章内做题目描述\n\n> Tc: Time complexity (时间复杂度)\n\n> Sc: Space complexity (空间复杂度)\n\n题目类型\n----\n\n### 数组篇\n\n#### 1.twoSum [要求 Tc: O(n) Sc:O(n)] (字节跳动)\n\n[LeetCode 第 1 题](https://leetcode-cn.com/problems/two-sum/)\n\n按照题目要求, 我们第一时间想到的会是两层循环暴力解法：\n\n**解法 1：Time = O(n²), Space = O(1)**\n\n思路: 遍历每个元素 nums[j]，并查找是否存在一个值与 target - nums[j] 相等的目标元素。\n\n```js\nfunction twoSum(nums, target) {\n     for (let i = 0; i < nums.length; i++) {\n         for (let j = i + 1; j < nums.length; j++) {\n             if (nums[j] == target - nums[i]) {\n                 return [i,j];\n             }\n         }\n     }\n     return [];\n}\n\n```\n\n**解法 2:Time = O(n), Space = O(n)**：\n\n我们可以通过哈希表空间换时间。在进行迭代并将元素插入到表中的同时，我们回过头来检查哈希表中是否已经存在当前元素所对应的目标元素，如果存在，那我们就找到了问题的解，将其返回即可.(时间复杂度为 O(n), 空间复杂度也为 O(n))\n\n符合题目要求 bingo✌\n\n```js\nvar twoSum = function(nums, target) {\n    let reduceHash = {};\n    for (let i = 0; i < nums.length; i++) {\n        let reduceResult = target - nums[i];\n        if (reduceHash[reduceResult] !== undefined) {\n            return [reduceHash[reduceResult], i];\n        }\n        reduceHash[nums[i]] = i;\n    }\n};\n\n```\n\n#### 2. 缺失的数字 [要求 Tc: O(n) Sc:O(n)] (字节跳动)\n\n[剑指 Offer 第 53 题](https://leetcode-cn.com/problems/que-shi-de-shu-zi-lcof/)\n\n**解法：**\n\n思路: 我们先把所有输入了的数字存入 hash 表, 因为给定的数组是有序的，所以可以再过一遍 hash 表，遍历过程中如果某个数字在 hash 表中不存在，则该数字就是缺失的那个数字\n\n```js\nvar missingNumber = function(nums) {\n    const hash = {};\n    for (let i = 0; i < nums.length; i++) {\n        hash[nums[i]] = true;\n    }\n    let expectedNumCount = nums.length + 1;\n    for (let i = 0; i < expectedNumCount; i++) {\n        if (!hash[i]) {\n            return i;\n        }\n    }\n    return -1;\n};\n\nconsole.log(missingNumber([0,1,2,4]));//3\n\n```\n\n#### 3. 移动零 [要求 Tc: O(n) Sc:O(1), 移动后不能改变原来其他元素的相对位置] (二线公司)\n\n[LeetCode 第 283 题](https://leetcode-cn.com/problems/move-zeroes/)\n\n**解法：**\n\n**思路:** 双指针同向而行, fast 指针遇到非 0 就把 slow 指针位置的字符替换掉，slow 指针前进一步。直到 fast 指针把数组所有元素遍历完毕。(典型的两个挡板，三个区域思想), 再把 slow 指针后面的所有元素替换为 0。\n\n同向性质:\n\n**变量的物理意义:** slow 的左侧不包含 slow 都是非 0 的数字，slow 的右侧包含 slow 都应该为 0，按照这个物理意义就可以达到原地算法的要求。因为快慢指针是同向而行的，所以算法为稳定算法 (不会影响元素的相对位置)\n\n```js\nvar moveZeroes = function(nums) {\n    let slow = 0;\n    for (let fast = 0; fast < nums.length; fast++) {\n        if (nums[fast] !== 0) {\n            nums[slow++] = nums[fast];\n        }\n    }\n    while (slow < nums.length) {\n        nums[slow++] = 0;\n    }\n};\nconst input = [0,1,5,8,4,3,0,5,0];\nmoveZeroes(input);\nconsole.log(input);\n\n```\n\n#### 4. 洗牌算法 (乱序数组)[要求 Tc: O(n) Sc:O(1), 要求每个元素的打乱的概率相同] (快手)\n\n[LeetCode 第 384 题](https://leetcode-cn.com/problems/shuffle-an-array/)\n\n**解法:**\n\n**思路:** 本题思路就是使用 Fisher-Yates 洗牌算法。\n\n```js\nfunction shuffle(arr) {\n    let m = arr.length;\n    while (m) {\n        let random = (Math.random() * m--) | 0;\n        [arr[random],arr[m]] = [arr[m],arr[random]];\n    }\n    return arr;\n}\nconsole.log(shuffle([1,5,6,7,6]));\n\n```\n\n#### 5. 两个数组的交集 [要求 Tc: O(n) Sc:O(n)] (阿里)\n\n[LeetCode 第 349 题](https://leetcode-cn.com/problems/intersection-of-two-arrays/)\n\n**解法:**\n\n**思路:** 本题思路是看 nums1 数组里是否含有 nums2 的元素，如果有就添加到结果中返回。\n\n```js\nlet res = [];\nfor (let i = 0; i < nums1.length; i++) {\n   const cur = nums1[i];\n   if (nums2.includes(cur)) {\n       res.push(cur);\n   }\n}\nreturn Array.from(new Set(res));\n\n```\n\n#### 6.RainbowSort [要求 Tc: O(n) Sc:O(1)] (盛大)\n\n给定一系列球，其中球的颜色只能是红色，黄色或蓝色，对球进行排序，以使所有红色球都分组在左侧，所有黄色球都分组在中间，所有蓝色球分组在右侧。\n\n例：\n\n> [红] 被排序为 [红]\n\n> [黄，红] 被排序为 [红，黄]\n\n> [黄, 红, 红, 蓝, 黄, 红, 蓝] 被排序为 [红, 红, 红, 黄, 黄, 蓝, 蓝]\n\n假设条件:\n\n> 输入数组不为 null。\n\ncorner case:\n\n如果输入数组的长度为零怎么办？在这种情况下，我们应该直接返回空数组。\n\n**解法：**\n\n**思路:** 本题思路是挡板思想, 使用三个挡板四个区域的思想进行划分 (交换数组元素位置)\n\n**挡板的物理意义: [0-i) 全是红色,[i,j) 之间为黄色,(k->n-1] 全为蓝色，[j-k] 为未知探索区域**\n\nj 为快指针\n\n```js\nconst input = ['黄','红','红','蓝','黄','红','蓝']\nfunction rainbowSort(rainbow) {\n    let i = 0, j = 0, k = rainbow.length - 1;\n    while (j <= k) {\n        if (rainbow[j] === '红') {\n            swap(rainbow,i,j);\n            i++;\n            j++;\n        }\n        if (rainbow[j] === '黄') {\n            j++;\n        }\n        if (rainbow[j] === '蓝') {\n            swap(rainbow, j, k); //这里不写j++是因为从k交换过来的元素不能保证就是黄色,为了安全起见下次循环再检查一次j位置。\n            k--;\n        }\n    }\n}\n//辅助交换函数\nfunction swap(arr,i,j) {\n    [arr[i],arr[j]] = [arr[j],arr[i]]\n}\nrainbowSort(input);\nconsole.log(input);\n\n```\n\n#### 7. 移除元素 [要求 Tc: O(n) Sc:O(1)]\n\n[LeetCode 第 27 题](https://leetcode-cn.com/problems/remove-element/)\n\n**解法：**\n\n**思路:** 双指针同向而行, 快指针遇到非 val 就把 slow 指针位置的字符替换掉，slow 指针前进，直到数组所有元素遍历完毕。(典型的两个挡板，三个区域思想)\n\n**变量的物理意义:** slow 的左侧不包含 slow 都是非 val 的元素，slow 的右侧包含 slow 都应该为不包含 val 的元素，按照这个物理意义就可以达到原地算法的要求。因为快慢指针是同向而行的，所以算法为稳定算法 (不会影响元素的相对位置)\n\n**挡板性质:**\n\n**同向而行:** slow 指针左边是处理好的元素 fast 指针右边是未知探索区域, 两个挡板中间不关注 (最后的结果不会改变元素相对位置)\n\n```js\nvar removeElement = function(nums, val) {\n    let slow = 0;\n    for(let fast = 0; fast < nums.length; fast++) {\n        if (nums[fast] !== val) {\n         nums[slow++] = nums[fast];\n        }\n    }\n    return slow; //想要拿到去除后的数组可以: nums.slice(0,slow);\n};\n\n```\n\n#### 8. 按奇偶排序数组 [要求 Tc: O(n) Sc:O(1)] (腾讯)\n\n[LeetCode 第 905 题](https://leetcode-cn.com/problems/sort-array-by-parity/)\n\n**解法：**\n\n**思路:** 继续使用挡板思想, 两个挡板三个区域, 同向而行,[0-i) 是偶数,[j-n-1] 是未探索区域\n\n**挡板性质:**\n\n**同向而行:** slow 指针左边是处理好的元素 fast 指针右边是未知探索区域, 两个挡板中间不关注 (最后的结果不会改变元素相对位置)\n\n**解法 1:(不改变元素相对位置: 同向而行)**\n\n```js\nvar sortArrayByParity = function(A) {\n    for (let i = 0, j = 0; j < A.length; j++) {\n        if (A[j] % 2 === 0) swap(A, i++, j);\n    }\n    return A;\n};\nfunction swap(arr,l,r) {\n    [arr[l],arr[r]] = [arr[r],arr[l]];\n}\n\nconsole.log(sortArrayByParity([3,1,2,4]));\n\n```\n\n**挡板性质:**\n\n**相向而行:** left 指针左边是处理好的元素, right 指针右边也是处理好的元素, 两个挡板中间是未处理区域 (最后的结果可能会改变元素相对位置)\n\n**解法 2:(改变元素相对位置: 相向而行)**\n\n```js\nvar sortArrayByParityII = function(A) {\n    let i = 0, j = A.length - 1;\n    while (i <= j) {\n        if (A[i] % 2 === 0) {\n           i++;\n        } else if (A[j] % 2 !== 0) {\n           j--;\n        } else { //i % 2 !== 0 && j % 2 === 0\n            swap(A,i,j);\n            i++;\n            j--;\n        }\n    }\n    return A;\n};\nfunction swap(arr, l, r) {\n    [arr[l], arr[r]] = [arr[r], arr[l]];\n}\n\nconsole.log(sortArrayByParityII([3,1,2,4]));\n\n```\n\n#### 9. 数组中出现次数超过一半的数字 [要求 Tc: O(n) Sc:O(1)]\n\n[LeetCode 第 169 题](https://leetcode-cn.com/problems/majority-element/)\n\n**思路:** 这道题属于火拼问题, 见一个 sha 一个 (抵消), 最后留下的就是超过一半的元素。\n\n先保留第一个元素，接着遍历，如果遇到和他相同的则加次数，否则就减次数，如果次数为 0 了就要换另一个元素了。\n\n比如: A B C A\n\n第一次保留 A, 用 A 跟剩下的打架，碰到不是 A 的就把 A 的个数减 1，如果遇到 A 就增加个数，直到遇到不同的元素把 A 的次数抵消完就把 A 踢下去, 并且把次数重新设置为 1。\n\n如此下去最后肯定有个多出来的就是题解了。\n\n```js\nvar majorityElement = function(array) {\n    let count = 1;\n    let num = array[0];\n    for (let i = 1; i < array.length; i++) {\n        if (num !== array[i]) {\n            count--;\n            if (count === 0) {\n                num = array[i];\n                count = 1;\n            }\n        } else {\n            count++;\n        }\n    }\n    return num;\n};\nlet halfValue = majorityElement([1,1,2,3]);\nconsole.log(halfValue); //1\n\n```\n\n#### 10. 合并两个有序数组 [要求 Tc: O(m + n) Sc:O(n)] (腾讯)\n\n例:\n\n> 输入: nums1 = [1,3], nums2 = [4,5,7]\n\n> 输出: [1,3,4,5,7]\n\n```js\nfunction merge(left, right) {\n    let result = [];\n    let i = 0, j = 0;\n    while (i < left.length && j < right.length) {\n        result.push(left[i] < right[j] ? left[i++] : right[j++]);\n    }\n    while (i < left.length) {\n        result.push(left[i++]);\n    }\n    while (j < right.length) {\n        result.push(right[j++]);\n    }\n    return result;\n}\nlet merged = merge([1,3],[4,5,7]);\nconsole.log(merged);\n\n```\n\n#### 11. 有序数组中小于某个数的个数 [要求 Tc: O(logn) Sc:O(1)] (今日头条)\n\n例:\n\n> 输入:[1, 2, 3, 4]\n\n> 输入目标值: 2\n\n> 输出: 1\n\n**思路:** 题目提到有序数组，第一时间就应该想到二分 (再加之复杂度要求 logn 级别)。其实这道题就是让写个二分查找, 仔细想想，你要找的那个数的下标不就代表前面有几个比他小的数字吗？\n\n```js\nfunction binarySearch(array, target) {\n    let low = 0;\n    let high = array.length - 1;\n    while (low <= high) {\n        const mid = (low + (high - low) / 2) | 0;\n        const middleValue = array[mid];\n        if (middleValue > target) {\n            high = mid - 1;\n        } else if (middleValue < target) {\n            low = mid + 1;\n        } else {\n            return mid;\n        }\n    }\n}\nconst minCount = binarySearch([1, 2, 3, 4], 2);\nconsole.log(minCount); // 1\n\n```\n\n#### 12. 数组去重 [要求 Tc: O(n) Sc:O(1)]\n\n[LeetCode 第 26 题](https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/)\n\n该算法要求原地算法，所以继续使用挡板思想 (没理解的可以回到上文提及处继续理解)。\n\n因为他至少有一个元素是不会重复的 (至少会保留一个元素)，所以从下标 1 开始处理。\n\n**解法 1:** 从索引 1 开始 (处理好的元素不包含 slow 位置)\n\n```js\nvar removeDuplicates = function(arr) {\n    let slow = 1;\n    for (let fast = 1; fast < arr.length; fast++) {\n        if (arr[fast] === arr[slow - 1]) {\n            continue;\n        }\n        arr[slow++] = arr[fast];\n    }\n    return slow; //想要拿到去除后的数组可以: arr.slice(0, slow);\n};\n\n```\n\n**解法 2:** 从索引 0 开始,(处理好的元素包含 slow 位置)\n\n```js\nvar removeDuplicates = function(arr) {\n    let slow = 0;\n    for (let fast = 1; fast < arr.length; fast++) {\n        if (arr[fast] === arr[slow]) {\n            continue;\n        }\n        arr[++slow] = arr[fast];\n    }\n    return slow + 1; //想要拿到去除后的数组可以: arr.slice(0, slow + 1);\n};\n\n```\n\n#### 13. 去掉连续的 a 和 c, 保留所有 b [要求 Tc: O(n) Sc:O(1) 元素相对位置不变] (字节跳动)\n\n**思路:** 还是使用快慢指针, 同向而行\n\n```js\nfunction removeAC(arr) {\n    let slow = 0,fast = 0;\n    while (fast < arr.length) {\n        if (arr[fast] === 'b') {\n            arr[slow++] = arr[fast++];\n        } else {\n            let begin = fast;\n            while (fast < arr.length && arr[fast + 1] === arr[begin]) {\n                fast++;\n            }\n            if (fast - begin === 0) {\n                arr[slow++] = arr[fast++];\n            } else {\n                fast++;\n            }\n        }\n  }\n  return arr.slice(0,slow).join('');\n}\nconst result = j1(['a','a','b','c','b','c','c']);\nconsole.log(result);//bcb\n\n```\n\n#### 14. 最长公共前缀 (拼多多)\n\n> 例: ['aaafsd', 'aawwewer', 'aaddfff'] => 'aa'\n\n[LeetCode 第 14 题](https://leetcode-cn.com/problems/longest-common-prefix/)\n\n```js\nfunction LCP(arr) {\n    if (!arr.length) {   \n        return '';\n    }\n    let ans = arr[0];\n    for (let i = 1; i < arr.length; i++) {\n        let j = 0;\n        for (;j < ans.length && j < arr[i].length; j++) {\n            if (ans[j] !== arr[i][j]) {\n                break;\n            }\n        }\n        ans = ans.substr(0,j);\n        if (ans === \"\") {\n            return ans;\n        }\n    }\n    return ans;\n}\nlet result = LCP(['aaafsd', 'aawwewer', 'aaddfff']);\nconsole.log(result);\n\n```\n\n#### 15. 给定一个整数数组 a，其中 1 ≤ a[i] ≤ n （n 为数组长度）, 其中有些元素出现两次而其他元素出现一次, 找到所有出现两次的元素 [要求 Tc: O(n) Sc:O(1)] (字节跳动)\n\n> 例: 输入: [4,3,2,7,8,2,3,1] 输出: [2,3]\n\n解：**目前没有思路**\n\n#### 16. 数组中所有元素组成的最大数是多少 (作业帮)\n\n> 例: [50, 2, 5, 9] => 95502\n\n**思路:** 我们把最大的数字依次排序肯定就是最大数 (降序排列)\n\n```js\nvar largestNumber = function(nums) {\n    nums = nums.sort((a, b) => {\n        let S1 = `${a}${b}`;\n        let S2 = `${b}${a}`;\n        return S2 - S1;\n    });\n    return nums[0] ? nums.join('') : '0';\n};\n\n```\n\n[LeetCode 第 179 题](https://leetcode-cn.com/problems/largest-number)\n\n### 字符串篇\n\n#### 1. 回文数 [要求 Tc: O(log10n) Sc:O(1) 或 Tc: O(n) Sc:O(1)] (腾讯)\n\n[LeetCode 第 9 题](https://leetcode-cn.com/problems/palindrome-number/)\n\n**思路:** 使用双指针一个在前，一个在后, 前后对比。遇到两个指针不同就返回 false。\n\n```js\nfunction palindrome(x) {\n    let i = 0, j = x.length - 1;\n    while (i <= j) {\n        if (x[i] !== x[j]) {\n           return false;\n        } else {\n           i++;\n           j--;\n        }\n    }\n    return true;\n}\nlet result = palindrome('lol');\nconsole.log(result);\n\n```\n\n#### 2. 反转字符串 [要求 Tc: O(n) Sc:O(1)]\n\n[LeetCode 第 344 题](https://leetcode-cn.com/problems/reverse-string/)\n\n**思路:** 使用双指针一个在前，一个在后, 每次都交换即可\n\n```js\nvar reverseString = function(s) {\n    let slow = 0;\n    for (let fast = s.length - 1, slow = 0; fast >= slow; fast--) {\n        swap(s, slow++, fast);\n    }\n};\nfunction swap(arr, l, r){\n    let temp = arr[l];\n    arr[l] = arr[r];\n    arr[r] = temp;\n}\n\n```\n\n#### 3. 翻转单词顺序 [要求 Tc: O(n) Sc:O(n)] (字节跳动)\n\n[剑指 Offer 第 58 题](https://leetcode-cn.com/problems/fan-zhuan-dan-ci-shun-xu-lcof/)\n\n**思路:** 将字符串按空格分割, 然后按照上题的方法交换单词顺序即可。\n\n```js\nvar reverseWords = function(s) {\n    let strArr = s.split(' ').filter(Boolean);\n    let reversed = strArr;\n    reverse(reversed, 0, reversed.length - 1);\n    return reversed.join(' ');\n};\nfunction reverse(input, left, right) {\n    if (left >= right) {\n        return;\n    }\n    swap(input, left, right);\n    reverse(input, left + 1, right -1);\n}\nfunction swap(arr, l, r) {\n    [arr[l],arr[r]] = [arr[r],arr[l]];\n}\n\n```\n\n#### 4. 有效的字母异位词 (Anagram) [要求 Tc: O(n) Sc:O(n)]\n\n[LeetCode 第 242 题](https://leetcode-cn.com/problems/valid-anagram/)\n\n**思路:** 我们可以使用 hash 存储每个单词出现的次数，再用另一个字符串遍历一次进行减减操作，只要次数有不等于 0 的字母则返回 false\n\n```js\nvar isAnagram = function(s, t) {\n    if (s.length !== t.length) return false;\n    \n    let map = new Map();\n    \n    for (let item of s) {\n    \tif (map.get(item)) {\n            map.set(item, map.get(item) + 1);\n    \t} else {\n            map.set(item, 1);\n    \t}\n    }\n    for (let item of t) {\n    \tif (map.get(item)) {\n            map.set(item, map.get(item) - 1);\n    \t} else {\n            return false;\n    \t}\n    }\n    return true;\n};\n\n```\n\n#### 5. 找出字符串中出现次数最多的字母 [要求 Tc: O(n) Sc:O(n)]\n\n> 例 1: 输入'abccdtc'\n\n> 输出: 'c'\n\n> 例 2: 输入'abbbbccdtc'\n\n> 输出: 'b'\n\n```js\nfunction maxCount(str) {\n    let hash = {};\n    let maxCount = 0;\n    let maxElement = '';\n    for (let i = 0; i < str.length; i++) {\n        let cur = str[i];\n        if (hash[cur]) {\n            hash[cur]++;\n        } else {\n            hash[cur] = 1;\n        }\n        if (maxCount < hash[cur]) {\n            maxElement = cur;\n            maxCount = hash[cur];\n        } \n    }\n    return maxElement;\n}\nlet letter = maxCount('abccdtc');\nconsole.log(letter);\n\n```\n\n#### 6. 替换空格 [要求 Tc: O(n) Sc:O(1) 不允许使用正则表达式] (今日头条)\n\n[剑指 Offer 第 5 题](https://leetcode-cn.com/problems/ti-huan-kong-ge-lcof/)\n\n**思路:** 使用快慢指针, 同向而行，快指针负责判断是不是空格，慢指针左侧都是处理好的元素。\n\n```js\nvar replaceSpace = function(s) {\n    s = s.split('');\n    for (let fast = 0; fast < s.length; fast++) {\n        if (s[fast] === ' ') {\n            s[fast] = '%20';\n        }\n    }\n    return s.join('');\n};\n\n```\n\n**其他解法 (不推荐面试中使用):**\n\n```js\nvar replaceSpace = function(s) {\n    s = s.split(' ').join('%20');\n    return s;\n};\n\nvar replaceSpace = function(s) {\n    s = s.replace(/\\s+/g,'%20');\n    return s;\n};\n\n```\n\n#### 7. 第一个只出现一次的字符 [要求 Tc: O(n) Sc:O(n)]\n\n[剑指 Offer 第 50 题](https://leetcode-cn.com/problems/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof/)\n\n**思路:** 遍历过程中存 hash 表, 如果当前值第一次出现就设置为 false, 后续处理遍历值为 false 的, 遇到为 false 的就直接返回。\n\n```js\nvar firstUniqChar = function(s) {\n    let hash = {};\n    let firstAppearLetter = '';\n    if (s === '') {\n        return ' ';\n    } else {\n        for (let i = 0; i < s.length; i++) {\n            if (hash[s[i]] === undefined) {\n                hash[s[i]] = false;\n            } else {\n                hash[s[i]] = true;\n            }\n        }\n    }\n    for (let [key, value] of Object.entries(hash)) {\n        if (!value) {\n            return key;\n        }\n    }\n    return ' '\n};\n\n```\n\n#### 8. 左旋转字符串 [要求 Tc: O(n) Sc:O(n)]\n\n[剑指 Offer 第 58 题](https://leetcode-cn.com/problems/zuo-xuan-zhuan-zi-fu-chuan-lcof/)\n\n```js\nvar reverseLeftWords = function(s, n) {\n    let frontStr = s.slice(0, n);\n    let backStr = s.slice(n);\n    return backStr + frontStr;\n};\n\n```\n\n#### 9. 字符串全排列 [要求 Tc: O(n!) Sc:O(n²)] (阿里)\n\n[剑指 Offer 第 38 题](https://leetcode-cn.com/problems/zi-fu-chuan-de-pai-lie-lcof/)\n\n```js\nvar permutation = function(s) {\n    let solution = [];\n    if (s.length === 0) {\n        return solution;\n    }\n    permutationHelper(s, solution);\n    return solution;\n};\nfunction permutationHelper(s, solution, used = [], path = []) {\n    if (path.length === s.length) {\n        solution.push(path.slice(0).join(''));\n        return;\n    }\n    let levelSet = new Set();\n    for (let i = 0; i < s.length; i++) {\n        if (!levelSet.has(s[i])) {\n            if (!used[i]) {\n                used[i] = true;\n                levelSet.add(s[i]);\n                path.push(s[i]);\n                permutationHelper(s, solution, used, path);\n                used[i] = false; //回溯\n                path.pop();//回到母节点往右走时应该删除添加过的节点,防止保留意外的结果\n            }   \n        }\n    }\n}\n\n```\n\n#### 10. 合并连续数字 [要求 Tc: O(n) Sc:O(1)] (今日头条)\n\n> 题目描述:\n\n> 输入:[0, 2, 3, 5, 6, 7, 8, 9, 11, 13, 56, 57]\n\n> 输出结果：\n\n> 0,2-3,5-9,11,13,56-57\n\n**思路:** 三指针, 同向而行, slow 左边的为处理好的元素, f 指针快速向前走, begin 指针记录区间开始区间, prev 指针记录区间结束位置。\n\n```js\nfunction combine(arr) {\n    let f = 1, slow = 0;\n    let prev = -1;\n    while (f < arr.length) {\n        let begin = f - 1;\n        prev = arr[begin];\n        while (f < arr.length && arr[f] - prev === 1) {\n            prev = arr[f];\n            f++;\n        }\n        if (f - begin === 1) {\n            if (arr[f + 1] - arr[f] !== 1) {\n                !begin ? arr[slow++] = arr[begin] : arr[slow++] = arr[f];\n            } else {\n                if (!begin) arr[slow++] = arr[begin];\n            }\n            f++;\n        } else {\n            arr[slow++] = arr[begin] + `-` + prev;\n        }\n    }\n    return arr.slice(0, slow).join(',');\n}\nlet res = combine([0, 2, 3, 5, 6, 7, 8, 9, 11, 13, 56, 57]);\nconsole.log(res);\n\n```\n\n#### 11. 字符串相加 (腾讯)\n\n[LeetCode 第 415 题](https://leetcode-cn.com/problems/add-strings/)\n\n```js\nvar addStrings = function(num1, num2) {\n    let res = [];\n    let i = num1.length - 1, j = num2.length - 1, carry = 0;\n    while (i >= 0 || j >= 0) {\n        let n1 = i >= 0 ? num1.charAt(i) - 0: 0;\n        let n2 = j >= 0 ? num2.charAt(j) - 0: 0;\n        let tmp = n1 + n2 + carry;\n        carry = parseInt(tmp / 10);//算出十位数\n        res.push(tmp % 10);//算出个位数\n        i--; j--;\n    }\n    if(carry == 1) res.push('1');\n    return res.reverse().join('')\n};\n\n```\n\n### 栈 / 队列篇\n\n#### 1. 实现一个栈，入栈 push、出栈 pop、返回最小值 min 的复杂度为 0(1) (滴滴)\n\n[LeetCode 第 115 题](https://leetcode-cn.com/problems/min-stack/)\n\n**思路:** stack2 为存储最小值的数组, 使用同步加同步减的思路, stack1 进来的新元素比 stack2 的 top 元素大则无视, 否则 stack2 顶部的元素变成刚刚进来的小值。\n\n```js\nvar MinStack = function() {\n    this.stack1 = [];\n    this.stack2 = []; \n};\n/** \n * @param {number} x\n * @return {void}\n */\nMinStack.prototype.push = function(x) { //同步加同步减push pop\n    this.stack1.push(x);\n    if (this.stack2.length === 0) {\n        this.stack2.push(x);\n    } else {\n        let temp = this.stack2[this.stack2.length - 1];\n        if (x < temp) {\n            this.stack2.push(x)\n        } else {\n            this.stack2.push(temp);\n        }\n    }\n};\n\n/**\n * @return {void}\n */\nMinStack.prototype.pop = function() {\n    if (this.stack1.length) {\n        this.stack1.pop();\n        this.stack2.pop();\n    }\n    \n};\n\n/**\n * @return {number}\n */\nMinStack.prototype.top = function() {\n    return this.stack1[this.stack1.length - 1];\n};\n\n/**\n * @return {number}\n */\nMinStack.prototype.getMin = function() {\n    return this.stack2[this.stack2.length - 1];\n};\n\n\n\n```\n\n#### 2. 使用两个栈实现一个队列 (滴滴)\n\n[剑指 Offer 第 9 题](https://leetcode-cn.com/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof/)\n\n**思路:** 我们既然要实现队列, 那肯定就是要有其中一个栈作为辅助栈，用来倒腾另一个栈中的数据 (我们这里的 stack1 为主栈，stack2 为辅助栈);\n\n```js\nvar CQueue = function() {\n    this.stack1 = [];//2 1\n    this.stack2 = [];\n    this.count = 0;\n};\n\n/** \n * @param {number} value\n * @return {void}\n */\nCQueue.prototype.appendTail = function(value) {\n    while (this.stack1.length) { //如果stack1中有元素那就先把stack1中所有元素放到stack2中\n        this.stack2.push(this.stack1.pop()); \n    }\n    this.stack1.push(value);//添加新的值到stack1中\n    while (this.stack2.length) {\n        this.stack1.push(this.stack2.pop()); //然后再把stack2中的元素放到stack1中\n    }\n    //这几步的意思是让stack1具有队列的性质(先进先出) 因为stack2代表stack1中之前的数据，然后会压到新数据的上面\n    this.count++;\n\n};\n\n/**\n * @return {number}\n */\nCQueue.prototype.deleteHead = function() {\n    if (this.count == 0) {\n        return -1;\n    }\n    this.count--;\n    return this.stack1.pop();//使用pop栈的方法，因为咱们利用辅助栈倒腾了一下所以直接pop后结果就是按照队列的性质输出了先进的值\n};\n\n```\n\n#### 3. 有效的括号 [要求 Tc: O(n) Sc:O(n)] (哔哩哔哩)\n\n[LeetCode 第 20 题](https://leetcode-cn.com/problems/valid-parentheses/)\n\n**思路:** 使用栈保存括号，遇到左括号直接入栈，遇到右括号就把栈顶的弹出来和当前的右括号匹配, 如果匹配失败说明不合法直接返回 false, 最后判断栈是不是空 (是不是所有括号都抵消完毕了), 不为空也说明不合法。\n\n```js\nvar isValid = function(str) {\n    let map = {\n        '{': '}',\n        '(': ')',\n        '[': ']'\n    }\n    let stack = []\n    for (let i = 0; i < str.length; i++) {\n        if (map[str[i]]) {\n            stack.push(str[i]);\n        } else if (str[i] !== map[stack.pop()]) {\n            return false;\n        }\n    }\n    return stack.length === 0\n};\n\n```\n\n### 链表篇\n\n#### 1. 从尾到头打印单链表 [要求 Tc: O(n) Sc:O(n)]\n\n[剑指 Offer 第 6 题](https://leetcode-cn.com/problems/cong-wei-dao-tou-da-yin-lian-biao-lcof/)\n\n**思路:** 基于 stack 的特性 (后进先出), 所以我们从头到尾过一遍链表，最后按照栈的顺序弹出就可以得到结果。\n\n```js\nvar reversePrint = function(head) {\n    let stack = [];\n    let cur = head;\n    while (cur !== null) {\n        stack.push(cur.val);\n        cur = cur.next;\n    }\n    let print = [];\n    while (stack.length) {\n        print.push(stack.pop())\n    }\n    return print;\n};\n\n```\n\n#### 2. 删除链表的倒数第 K 个结点 [要求 Tc: O(L) Sc:O(1)]\n\n[LeetCode 第 19 题](https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/)\n\n```js\nvar removeNthFromEnd = function(head, n) {\n    let dummyNode = new ListNode(0);\n    dummyNode.next = head;\n    let fast = dummyNode, slow = dummyNode;\n    // 快先走 n+1 步\n    while(n--) {\n        fast = fast.next\n    }\n    // fast、slow 一起前进\n    while(fast && fast.next) {\n        fast = fast.next\n        slow = slow.next\n    }\n    slow.next = slow.next.next\n    return dummyNode.next\n};\n\n```\n\n#### 3. 判断单链表是否有环 [要求 Tc: O(n) Sc:O(1)] (有赞)\n\n[LeetCode 第 141 题](https://leetcode-cn.com/problems/linked-list-cycle/)\n\n```js\nvar hasCycle = function(head) {\n    if (head === null) {\n        return false;\n    }\n    let slow = fast = head;\n    while (fast.next !== null && fast.next.next !== null) {\n        slow = slow.next;\n        fast = fast.next.next;\n        if (slow === fast) {\n            return true;\n        }\n    }\n    return false;\n};\n\n```\n\n#### 4. 反转单链表 [要求 Tc: O(n) Sc:O(1)] (链表类超高频)\n\n[剑指 Offer 第 24 题](https://leetcode-cn.com/problems/fan-zhuan-lian-biao-lcof/)\n\n**反转思路如下过程:**\n\n原始链表: head -> 2 -> 3 -> 4 -> null\n\n```js\n<- 2    3  ->  4 -> null\npre(null)    cur  next\n        \nnull  <- 2  <-  3      4 -> null\n        pre    cur   next\n                \nnull  <- 2  <-  3  <-  4   null\n                      cur  next\n                pre  \nnull  <- 2  <-  3  <-  4    null\n                      pre   cur  next\n <--------------------pre is the newHead to be returned\n\n```\n\n**迭代解法 (从左到右反转):**\n\n```js\nvar reverseList = function(head) {\n    if (head === null || head.next === null) {\n        return head;\n    }\n    let pre = null, cur = head;\n    while (cur !== null) {\n        let next = cur.next;\n        cur.next = pre;\n        pre = cur;\n        cur = next;\n    }\n    return pre;\n};\n\n```\n\n**递归解法:(从右往左反转)**\n\n```js\nvar reverseList = function(head) {\n    if(head === null || head.next === null) {\n        return head;\n    }\n    let newHead = reverseList(head.next);\n    head.next.next = head;\n    head.next = null;\n    return newHead;\n}\n\n```\n\n原始链表: 2 -> 3 -> null\n\n第一次调用 reverseList:\n\n```js\n2  ->  3 -> null\nhead  newHead\n\n```\n\n```js\nhead.next.next = head 干的事是: (2的next是3,将3的next指向2)：\n2  <->  3\n\n```\n\n```js\nhead.next = null 干的事是:\nnull <- 2  <- 3\n       head\n\n```\n\n```js\nreturn newHead 干的事是:\nnull <- 2  <- 3\n             newHead\n\n```\n\n第二次调用 reverseList:\n\n```js\n2  ->  3 -> null\n      head       \nbase case: return newHead = 3\n\n```\n\n#### 5. 判断两个链表是否相交，若相交，求交点 (链表没有环)[要求 Tc: O(m+n) Sc:O(n)] (字节跳动)\n\n[LeetCode 第 160 题](https://leetcode-cn.com/problems/intersection-of-two-linked-lists/solution/xiang-jiao-lian-biao-by-leetcode/)\n\nheadA:a+c+b  \nheadB:b+c+a\n\n因为 a+c+b === b+c+a 因此终有一刻他们能相交\n\n```js\nvar getIntersectionNode = function(headA, headB) {\n    if (headA === null || headB === null) {\n        return null;\n    }\n    let nodeA = headA;\n    let nodeB = headB;\n    while (nodeA !== nodeB) {\n        nodeA = nodeA ? nodeA.next : headB;\n        nodeB = nodeB ? nodeB.next : headA;\n    }\n    return nodeA;\n};\n\n```\n\n#### 6. 查找单链表的中间节点，要求只能遍历一次链表 [要求 Tc: O(n) Sc:O(1)]\n\n[LeetCode 第 876 题](https://leetcode-cn.com/problems/middle-of-the-linked-list/)\n\n```js\nvar middleNode = function(head) {\n    let slow = head;\n    let fast = head;\n    while (fast !== null && fast.next !== null) {\n        slow = slow.next;\n        fast = fast.next.next;\n    }\n    return slow;\n};\n\n```\n\n#### 7. 合并两个有序链表，合并后依然有序 [要求 Tc: O(m+n) Sc:O(1)]\n\n[剑指 Offer 第 25 题](https://leetcode-cn.com/problems/he-bing-liang-ge-pai-xu-de-lian-biao-lcof/)\n\n```js\nvar mergeTwoLists = function(l1, l2) {\n    let dummyHead = new ListNode(0);\n    let cur1 = l1;\n    let cur2 = l2;\n    let tail = dummyHead;\n    while (cur1 !== null && cur2 !== null) {\n        if (cur1.val < cur2.val) {\n            tail.next = cur1;\n            cur1 = cur1.next;\n        } else {\n            tail.next = cur2;\n            cur2 = cur2.next;\n        }\n        tail = tail.next;\n    }\n    if (cur1 !== null) {\n        tail.next = cur1;\n    }\n    if (cur2 !== null) {\n        tail.next = cur2;\n    }\n    return dummyHead.next;\n};\n\n```\n\n#### 8. 查找单链表的倒数第 K 个节点，要求只能遍历一次链表 [要求 Tc: O(n) Sc:O(1)]\n\n[剑指 Offer 第 22 题](https://leetcode-cn.com/problems/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof/solution/mian-shi-ti-22-lian-biao-zhong-dao-shu-di-kge-j-11/)\n\n```js\nvar getKthFromEnd = function(head, k) {\n    let fast = head, slow = head;\n    for (let i = 0; i < k; i++) {\n        fast = fast.next;\n    }\n    while (fast != null) {\n        fast = fast.next;\n        slow = slow.next;\n    }\n    return slow;\n}\n\n```\n\n### 二叉树篇\n\n#### 1. 二叉树的删除实现 [要求 Tc: O(H) Sc:O(H)] (字节跳动)\n\n[LeetCode 第 450 题](https://leetcode-cn.com/problems/delete-node-in-a-bst/)\n\n```js\nvar deleteNode = function(root, key) {\n    this.root = recursionDelete(root, key);\n    return this.root;\n};\nfunction recursionDelete(root, key) {\n    if (root === null) {\n        return null;\n    }\n    if (root.val > key) {\n        root.left = recursionDelete(root.left, key);\n        return root;\n    } else if (root.val < key) {\n        root.right = recursionDelete(root.right, key);\n        return root;\n    } else {  //3种情况\n        if (root.left === null && root.right === null) { //1\n            root === null;\n            return root;\n        }\n        if (root.left === null) { //2\n            root = root.right;\n            return root;\n        } else if (root.right === null) { //2\n            root = root.left;\n            return root;\n        }\n        let aux = null; //3\n        let current = root.right;\n        while (current != null && current.left != null) {\n        \tcurrent = current.left;\n        }\n        aux = current;\n        root.val = aux.val;\n        root.right = recursionDelete(root.right,aux.val);\n        return root;\n    }\n}\n\n```\n\n#### 2. 判断一棵树是否是平衡树 [要求 Tc: O(n) Sc:O(n)] (字节跳动)\n\n[LeetCode 第 110 题](https://leetcode-cn.com/problems/balanced-binary-tree/)\n\n```js\nvar isBalanced = function(root) {\n    if (root === null) {\n        return true;\n    }\n    const lh = maxDepth(root.left);\n    const rh = maxDepth(root.right);\n    if (Math.abs(lh - rh) > 1) {\n        return false;\n    }\n    return isBalanced(root.left) && isBalanced(root.right);\n};\nfunction maxDepth(root) {\n    if (root === null) {\n        return 0;\n    }\n    const left = maxDepth(root.left);\n    const right = maxDepth(root.right);\n    return Math.max(left, right) + 1;\n};\n\n```\n\n#### 3. 二叉树最大深度 [要求 Tc: O(n) Sc:O(n)] (阿里)\n\n[剑指 Offer 第 55 题](https://leetcode-cn.com/problems/er-cha-shu-de-shen-du-lcof/)\n\n```js\nfunction maxDepth(root) {\n    if (root === null) {\n        return 0;\n    }\n    const left = maxDepth(root.left);\n    const right = maxDepth(root.right);\n    return Math.max(left, right) + 1;\n};\n\n```\n\n#### 5. 二叉树中和为某一值的路径 [要求 Tc: O(n) Sc:O(n)] (字节跳动)\n\n[剑指 Offer 第 34 题](https://leetcode-cn.com/problems/er-cha-shu-zhong-he-wei-mou-yi-zhi-de-lu-jing-lcof/)\n\n第 34 题解:\n\n```js\nvar pathSum = function(root, sum) {\n    if(!root) return [];\n    const solution = [];\n    let path = []\n    pathSumHelper(root,sum,solution,path);\n    return solution;\n};\nfunction pathSumHelper(root,sum,solution,path) {\n    path.push(root.val);\n    if(root.left == null && root.right == null && calcPath(path) == sum) {\n        solution.push([...path]);\n    }\n    if(root.left){\n        pathSumHelper(root.left,sum,solution,path);\n    }\n    if(root.right){\n        pathSumHelper(root.right,sum,solution,path);\n    }\n    path.pop();\n}\nfunction calcPath(path){\n    let total = 0;\n    for(let i = 0;i<path.length;i++){\n        total += path[i];\n    }\n    return total;\n}\n\n```\n\n#### 6.LCA[要求 Tc: O(n) Sc:O(n)] (字节跳动)\n\n[LeetCode 第 236 题](https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/)\n\n```js\nvar lowestCommonAncestor = function(root, p, q) {\n    if(!root || root.val == p.val || root.val == q.val) return root;\n    let left = lowestCommonAncestor(root.left, p, q);\n    let right = lowestCommonAncestor(root.right, p, q);\n    //如果left不存在p或q就返回right的结果。如果left存在，right不存在就返回left结果。如果left和right都存在就返回根节点\n    if(left == null) return right;\n    else if(right == null) return left;\n    return root;\n};\n\n```\n\n#### 7. 二叉树层序遍历 [要求 Tc: O(n) Sc:O(n)] (必会题)\n\n[LeetCode 第 102 题](https://leetcode-cn.com/problems/binary-tree-level-order-traversal/)\n\n```js\nvar levelOrder = function(root) {\n    if (root === null) {\n        return [];\n    }\n    const result = [];\n    let queue = [root];\n    while (queue.length) {\n        const level = [];\n        let size = queue.length;\n        for (let i = 0; i < size; i++) {\n            let cur = queue.shift();\n            if (cur.left) {\n                queue.push(cur.left);\n            }\n            if (cur.right) {\n                queue.push(cur.right);\n            }\n            level.push(cur.val);\n        }\n        result.push(level);\n    }\n    return result;\n};\n\n```\n\n#### 8. 是否是 BST[要求 Tc: O(n) Sc:O(n)] (有赞)\n\n[LeetCode 第 98 题](https://leetcode-cn.com/problems/validate-binary-search-tree/)\n\n```js\nvar isValidBST = function(root) {\n    let min = -Infinity;\n    let max = Infinity;\n    return isValidBSTHelper(root, min, max);\n};\nfunction isValidBSTHelper(root, min, max) {\n    if (root === null) {\n        return true;\n    } \n    if(root.val <= min || root.val >= max) {\n        return false;\n    }\n    return isValidBSTHelper(root.left, min, root.val) && isValidBSTHelper(root.right, root.val, max);\n}\n\n```\n\n#### 9. 是否是完全二叉树 [要求 Tc: O(n) Sc:O(n)] (字节跳动)\n\n[LeetCode 第 958 题](https://leetcode-cn.com/problems/check-completeness-of-a-binary-tree/)\n\n```js\nvar isCompleteTree = function(root) {\n    if (root === null) {\n        return true;\n    }\n    let queue = [root];\n    let flag = false;\n    while (queue.length) {\n       let cur = queue.shift();\n       if (cur.left === null) {\n           flag = true;\n       } else if (flag) {\n           return false;\n       } else {\n           queue.push(cur.left);\n       }\n       if (cur.right === null) {\n           flag = true;\n       } else if (flag) {\n           return false;\n       } else {\n           queue.push(cur.right);\n       }\n    }\n    return true;\n};\n\n```\n\n#### 10. 翻转二叉树 [要求 Tc: O(n) Sc:O(n)]\n\n[LeetCode 第 226 题](https://leetcode-cn.com/problems/invert-binary-tree/)\n\n```js\nvar invertTree = function(root) {\n    if(root == null) {\n        return [];\n    }\n    invertTreeHelper(root);\n    return root;\n};\nfunction invertTreeHelper(root) {\n    if (root == null) {\n        return;\n    }\n    let tmp = root.left;\n    root.left = root.right;\n    root.right = tmp;\n    invertTree(root.left);\n    invertTree(root.right);\n}\n\n```\n\n#### 11. 二叉树的右视图 [要求 Tc: O(n) Sc:O(n)] (字节跳动)\n\n[LeetCode 第 199 题](https://leetcode-cn.com/problems/binary-tree-right-side-view/)\n\n```js\nvar rightSideView = function(root) {\n    const result = [];\n    if (root === null) {\n        return result;\n    }\n    let queue = [root];\n    while (queue.length) {\n        const level = [];\n        let size = queue.length;\n        for (let i = 0; i < size; i++) {\n            let cur = queue.shift();\n            if (i === size - 1) {\n                level.push(cur.val);\n            }\n            if (cur.left) {\n                queue.push(cur.left);\n            }\n            if (cur.right) {\n                queue.push(cur.right);\n            }\n        }\n        result.push(level);\n    }\n    return result;\n};\n\n```\n\n#### 12. 判断对称二叉树 [要求 Tc: O(n) Sc:O(n)]\n\n[LeetCode 第 101 题](https://leetcode-cn.com/problems/symmetric-tree/)\n\n```js\nvar isSymmetric = function(root) {\n    return isSymmetricHelper(root, root);\n};\nfunction isSymmetricHelper(one, two) {\n    if (one === null && two === null) {\n        return true;\n    } else if (one === null || two === null) {\n        return false;\n    } else if (one.val !== two.val) {\n        return false;\n    }\n    return isSymmetricHelper(one.left,two.right) && isSymmetricHelper(one.right,two.left);\n}\n\n```\n\n#### 13. 二叉树的锯齿形层次遍历 [要求 Tc: O(n) Sc:O(n)] (字节跳动)\n\n[LeetCode 第 103 题](https://leetcode-cn.com/problems/binary-tree-zigzag-level-order-traversal/)\n\n```js\nvar zigzagLevelOrder = function(root) {\n  const printArr = []\n  if (!root) return printArr\n  const list = []\n  list.push({ level: 0, node: root })\n  while(list.length > 0) {\n    const { level, node } = list.shift()\n    if (!printArr[level]) {\n      printArr[level] = []\n    }\n    if (level % 2 === 0) {\n      printArr[level].push(node.val)\n    } else {\n      printArr[level].unshift(node.val)\n    }\n    node.left && list.push({ level: level + 1, node: node.left })\n    node.right && list.push({ level: level + 1, node: node.right })\n  }\n  return printArr\n};\n\n```\n\n#### 14. 构造二叉树\n\n[LeetCode 第 106 题](https://leetcode-cn.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/)\n\n```js\nvar buildTree = function(preorder, inorder) {\n    function help(inorder) {\n        if (!inorder|| !inorder.length) return null;\n        let top = preorder.shift(), p = inorder.indexOf(top);\n        let root = new TreeNode(top);\n        root.left = help(inorder.slice(0, p));\n        root.right = help(inorder.slice(p+1));\n        return root;\n    }\n    return help(inorder);\n};\n\n```\n\n[LeetCode 第 105 题](https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/)\n\n```js\nvar buildTree = function(preorder, inorder) {\n    function help(inorder) {\n        if (!inorder|| !inorder.length) return null;\n        let top = preorder.shift(), p = inorder.indexOf(top);\n        let root = new TreeNode(top);\n        root.left = help(inorder.slice(0, p));\n        root.right = help(inorder.slice(p + 1));\n        return root;\n    }\n    return help(inorder);\n};\n\n```\n\n### 堆 / 优先队列篇\n\n#### 1. 寻找第 k 大元素 [要求 Tc: O(nlogn) Sc:O(1)] (腾讯, 字节跳动, 阿里)\n\n[常见题型](https://leetcode-cn.com/explore/interview/card/top-interview-questions/266/heap-stack-queue/1154/)\n\n```js\n\n```\n\n### 二分查找篇\n\n#### 1. 查找给定值 [要求 Tc: O(logn) Sc:O(1)] (二分查找高频)\n\n[LeetCode 第 704 题](https://leetcode-cn.com/problems/binary-search/)\n\n```js\nfunction binarySearch(array, target) {\n    let left = 0;\n    let right = array.length - 1;\n    while (left <= right) {\n        const mid = (left + (right - left) / 2) | 0;\n        const middleValue = array[mid];\n        if (middleValue > target) {\n            right = mid - 1;\n        } else if (middleValue < target) {\n            left = mid + 1;\n        } else {\n            return mid;\n        }\n    }\n}\nconst index = binarySearch([1, 2, 3, 4], 2);\nconsole.log(index); // 1\n\n```\n\n#### 2. 查找最接近目标值的值 [要求 Tc: O(logn) Sc:O(1)]\n\n给定目标整数 T 和按升序排序的整数数组 A，找到 A 中的索引 i，以使 A [i] 最接近 T。\n\n假设条件:\n\n数组中可以有重复的元素，并且我们可以返回具有相同值的任何索引。\n\n例:\n\nA = [1,2,3]，T = 2，返回 1\n\nA =[1，4，6]，T = 3，返回 1\n\nA = [1，4，6]，T = 5，返回 1 或 2\n\nA = [1、3、3、4]，T = 2，返回 0 或 1 或 2\n\ncorner case:\n\n如果 A 为空或 A 为零长度怎么办？在这种情况下，我们应该返回 - 1。\n\n```js\nfunction binarySearch(array, target) {\n    if (array.length === 0) {\n        return -1;\n    }\n    let left = 0;\n    let right = array.length - 1;\n    while (left < right - 1) {\n        const mid = (left + (right - left) / 2) | 0;\n        const middleValue = array[mid];\n        if (middleValue === target) {\n            return mid;\n        } else if (middleValue < target) {\n            left = mid;\n        } else {\n            right = mid;\n        }\n    }\n    if (Math.abs(target - array[left]) >= Math.abs(target - array[right])) {\n        return right;\n    } else {\n        return left;\n    }\n}\nconst index = binarySearch([1, 2, 5, 6], 4);\nconsole.log(index); // 2\n\n```\n\n#### 3. 第一个出现的目标值 [要求 Tc: O(logn) Sc:O(1)] (二分查找高频)\n\n给定目标整数 T 和按升序排序的整数数组 A，请找到 A 中 T 首次出现的索引，如果没有这样的索引，则返回 - 1。\n\n假设条件\n\n数组中可以有重复的元素。\n\n例:\n\nA = [1,2,3]，T = 2，返回 1\n\nA = [1,2,3]，T = 4，返回 - 1\n\nA = [1,2,2,2,3]，T = 2，返回 1\n\ncorner case:\n\n如果 A 为零或长度为零的 A 怎么办？在这种情况下，我们应该返回 - 1。\n\n```js\nfunction binarySearch(array, target) {\n    if (array.length === 0) {\n        return -1;\n    }\n    let left = 0;\n    let right = array.length - 1;\n    while (left < right - 1) {\n        const mid = (left + (right - left) / 2) | 0;\n        const middleValue = array[mid];\n        if (middleValue === target) {\n            right = mid;\n        } else if (middleValue < target) {\n            left = mid + 1;\n        } else {\n            right = mid + 1;\n        }\n    }\n    return array[right] === target ? right : array[left] === target ? left : -1;\n}\nconsole.log(binarySearch([1,2,2,2,3], 2)); //1\n\n```\n\n#### 4. 查找最接近目标值的 k 个数 [要求 Tc: O(logn + k) Sc:O(1)]\n\n给定目标整数 T，非负整数 K 和按升序排序的整数数组 A，找到 A 中最接近 T 的 K 个数字。 如果存在平局，则始终首选较小的元素。\n\n假设条件:\n\nA 不为空 K 保证大于等于 0，K 保证小于等于 A.length 返回大小为 K 的整数数组，其中包含 A 中的 K 个最接近的数字（不是索引），并按数字和 T 之间的差值升序排列。\n\n例:\n\nA = [1，2，3]，T = 2，K = 3，返回 [2，1，3] 或[2，3，1]\n\nA = [1，4，6，8]，T = 3，K = 3，返回 [4，1，6]\n\n```js\nfunction binarySearch(array, target, k) {\n    if (array.length === 0) {\n        return -1;\n    }\n    let left = 0;\n    let right = array.length - 1;\n    while (left < right - 1) {\n        const mid = (left + (right - left) / 2) | 0;\n        const middleValue = array[mid];\n        if (middleValue === target) {\n            right = mid;\n        } else if (middleValue < target) {\n            left = mid;\n        } else {\n            right = mid;\n        }\n    }\n    // post-processing find the closest number\n    let closeIdx = 0;\n    if (Math.abs(array[left] - target) <= Math.abs(array[right] - target)) {\n    \tcloseIdx = left;\n    } else {\n    \tcloseIdx = right;\n    }\n    // These two should be the closest to target\n    let result = new Array(k);\n    let l = closeIdx;\n    let r = closeIdx + 1;\n    // this is a typical merge operation\n    for (let i = 0; i < k; i++) {\n    \t// we can advance the left pointer when:\n    \t// 1. right pointer is already out of bound\n    \t// 2. right pointer is not out of bound, left pointer is not out of bound and array[left] is closer to target.\n    \tif (r >= array.length) {//can be merged two conditions\n            result[i] = array[l--];\n    \t} else if (l < 0) {\n            result[i] = array[r++];\n    \t} else if (Math.abs(array[l] - target) <= Math.abs(array[r] - target)) {\n            result[i] = array[l--];\n    \t} else {\n            result[i] = array[r++];\n    \t}\n    }\n    return result;\n}\nconsole.log(binarySearch([1,4,6,8], 3, 3)); // [4，1，6]\n\n```\n\n#### 5. 有一个排序数组，返回第一个比目标数字小的数 (要求: Tc: O(logn) Sc:O(1)) (快手)\n\n### 动态规划篇\n\n#### 1. 斐波那契数列 (要求 Tc: O(n) Sc:O(n)/O(1)) (动态规划类超高频)\n\n[LeetCode 第 704 题](https://leetcode-cn.com/problems/fei-bo-na-qi-shu-lie-lcof/solution/mian-shi-ti-10-i-fei-bo-na-qi-shu-lie-dong-tai-gui/)\n\n```js\nvar fib = function(n) {\n    let a = 0, b = 1, sum;\n    for (let i = 0; i < n; i++) {\n        sum = a + b;\n        a = b;\n        b = sum;\n    }\n    return a;\n};\n\n```\n\n#### 2. 爬楼梯 (要求 Tc: O(n) Sc:O(n)/O(1)) (动态规划类超高频)\n\n[LeetCode 第 70 题](https://leetcode-cn.com/problems/climbing-stairs/)\n\n```js\nvar climbStairs = function(n) {\n    if (n === 1) {\n        return 1;\n    }\n    let dp = [];\n    dp[1] = 1;\n    dp[2] = 2;\n    for (let i = 3; i <= n; i++) {\n        dp[i] = dp[i - 1] + dp[i - 2];\n    }\n    return dp[n];\n};\n\n```\n\n### 递归篇\n\n#### 1. 岛屿数量 (要求 Tc: O(MN) Sc:O(MN)) (微信)\n\n[LeetCode 第 200 题](https://leetcode-cn.com/problems/number-of-islands/)\n\n```js\nlet dfs = function (grid, i, j) {\n  // 把当前项变为0, 防止重新查找\n  grid[i][j] = 0;     \n  // 当前项 上下左右检查\n  if (grid[i - 1] && grid[i - 1][j] == 1) dfs(grid, i - 1, j);  // 上\n  if (grid[i + 1] && grid[i + 1][j] == 1) dfs(grid, i + 1, j);  // 下\n  if (grid[i][j - 1] && grid[i][j - 1] == 1) dfs(grid, i, j - 1);  // 左\n  if (grid[i][j + 1] && grid[i][j + 1] == 1) dfs(grid, i, j + 1);  // 右\n}\nvar numIslands = function(grid) {\n  if (grid.length < 1) return 0;\n  let islands = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[0].length; j++) {\n      if (grid[i][j] == 1) {\n        islands++;             // 岛屿加1\n        dfs(grid, i, j);       // 寻找与当前项相邻的 1 并把它们变成0\n      }\n    }\n  }\n  return islands;\n};\n\n```\n\n#### 2. 从一个数组中找出 N 个数，其和为 M 的所有可能 (不能重复使用已经使用过的元素) (今日头条)\n\n[参考题解 1](https://blog.csdn.net/weixin_34130269/article/details/91382220)\n\n[参考题解 2](https://juejin.im/post/5e46425f51882549652d4580#heading-8)\n\n#### 3. 子集 (要求 Tc: O(N×2N) Sc:O(N×2N)) (腾讯)\n\n[LeetCode 第 78 题](https://leetcode-cn.com/problems/subsets/)\n\n```js\nvar subsets = function(nums) {\n    if (!nums.length) {\n        return [];\n    }\n    let solution = [];\n    let levelResult = [];\n    subsetsHelper(nums,0,levelResult,solution);\n    return solution;\n};\nfunction subsetsHelper(nums,level,lresult,solution) {\n    //base base\n    if (level === nums.length) {\n        solution.push([].concat(lresult));\n        return;\n    }\n    lresult.push(nums[level]);\n    subsetsHelper(nums, level + 1,lresult, solution);//回溯\n    lresult.pop();\n    subsetsHelper(nums, level + 1, lresult, solution);//回溯\n}\n\n```\n\n#### 5. 扁平化对象 (虾皮)\n\n> 输入:\n\n```js\n{\n  \"a\": {\n    \"b\": {\n      \"c\": {\n        \"d\": 1\n      }\n    }\n  },\n  \"aa\": 2,\n  \"c\": [\n    1,\n  ]\n} \n\n```\n\n> 要求输出:\n\n```js\n{ 'a.b.c.d': 1, aa: 2, 'c[0]': 1, 'c[1]': 2 }\n\n```\n\n```js\nfunction convert(obj) {\n  let str = '', res = {};\n  const inner = (obj) => {\n    const keys = Object.keys(obj);\n    keys.forEach((item) => {\n      const type = Object.prototype.toString.call(obj[item]).slice(8, -1);\n      if (type === 'Object') {\n        str += item + '.';\n        inner(obj[item], str, res);\n      } else if (type === 'Array') {\n        obj[item].forEach((items, index) => {\n          const key = `${item}[${index}]`;\n          res[key] = items;\n        });\n      } else {\n        str += item;\n        res[str] = obj[item];\n        str = '';\n      }\n    });\n    return res;\n  };\n  return inner(obj);\n}\n\nconsole.log(convert(obj));\n\n```\n\n#### 6. 归类 (天猫)\n\n```js\n输入:\n\nconst industry_list = [\n  {\n    \"parent_ind\": \"女装\",\n    \"name\": \"连衣裙\"\n  },\n  {\n    \"name\": \"女装\"\n  },\n  {\n    \"parent_ind\": \"女装\",\n    \"name\": \"半身裙\"\n  },\n  {\n    \"parent_ind\": \"女装\",\n    \"name\": \"A字裙\"\n  },\n  {\n    \"name\": \"数码\"\n  },\n  {\n    \"parent_ind\": \"数码\",\n    \"name\": \"电脑配件\"\n  },\n  {\n    \"parent_ind\": \"电脑配件\",\n    \"name\": \"内存\"\n  },\n];\n> 输出:\n/*\n{\n  \"数码\": {\n    \"电脑配件\": {\n        \"内存\" : {}\n     }\n  },\n  \"女装\" : {\n     \"连衣裙\": {},\n    \"半身裙\": {},\n    \"A字裙\": {}\n  }\n}\n*/\nfunction convert_format(data) {\n  const res = {};\n  const map = data.reduce((res, v) => (res[v.name] = v, res), {});\n  console.log(map);\n  for (const item of data) {\n    if (!item.parent_ind) {\n      res[item.name] = {};\n    }\n  }\n  for (const item of data) {\n    if (item.parent_ind in map) {\n      if (map[item.parent_ind].parent_ind) {\n        const path = dfs(item.name);\n        let re = res[path[0]];\n        for (let i = 1; i < path.length; i++) {\n          if (i === path.length - 1) {\n            re[path[i]] = {};\n          } else {\n            re = re[path[i]];\n          }\n        }\n      } else {\n        res[item.parent_ind][item.name] = {};\n      }\n    }\n  }\n  return res;\n\n\n  function dfs(name) {\n    let path = [];\n    const inner = (name, path) => {\n      path.unshift(name);\n      if (!map[name].parent_ind) {\n        return;\n      }\n      inner(map[name].parent_ind, path);\n    };\n    inner(name, path);\n    return path;\n  }\n}\n\n\nconst result = convert_format(industry_list);\nconsole.log(result);\n\n```\n\n### 排序篇\n\n#### 1. 快速排序 (要求 Tc: O(nlogn) Sc:O(nlogn)) (排序类超高频)\n\n```js\nfunction quickSort(array) {\n    if (array === null || array.length === 0) {\n        return array;\n    }\n    doQuickSort(array, 0, array.length - 1);\n    return array;\n}\nfunction doQuickSort(array,left,right) {\n    if (left >= right) {\n        return;\n    }\n    let pivotPos = partition(array,left,right);\n    doQuickSort(array,left, pivotPos - 1);\n    doQuickSort(array,pivotPos + 1, right);\n}\nfunction partition(array,left,right) {\n        let pivotIdx = (left + Math.random() * (right - left + 1)) | 0;\n\tlet pivot = array[pivotIdx];\n\t// swap pivot 元素到最右边的位置\n\tswap(array, right, pivotIdx);\n\n\tlet leftBound = left;\n\tlet rightBound = right - 1;\n\n\twhile (leftBound <= rightBound) {\n        \t// [0,leftBound),(rightBound,right-1]是已探索区域，[leftBound+1,rightBound-1]是未探索区域。\n        \t// 当 leftBound == rightBound时, 索引不需要检查了\n        \tif (array[leftBound] < pivot) {\n        \t\tleftBound++;\n        \t} else if (array[rightBound] >= pivot) {\n        \t\trightBound--;\n        \t} else {\n        \t\tswap(array, leftBound, rightBound);\n        \t\tleftBound++;\n        \t\trightBound--;\n        \t}\n\t} // leftBound == rightBound + 1\n\t// swap 回 pivot元素到中间的位置\n\tswap(array, leftBound, right);\n\treturn leftBound;\n}\nfunction swap(array, i, j) {\n    let tmp = array[i];\n    array[i] = array[j];\n    array[j] = tmp;\n}\n\n```\n\n#### 2. 归并排序 (要求 Tc: O(nlogn) Sc:O(n))\n\n```js\nfunction mergeSort(array) {\n    if (array.length > 1) {\n        const length = array.length;\n        const mid = Math.floor(length / 2);\n        const left = mergeSort(array.slice(0,mid));\n        const right = mergeSort(array.slice(mid,length));\n        array = merge(left,right);\n    }\n    return array;\n}\nfunction merge(left,right) {\n    let i = 0,j = 0;\n    const result = [];\n    while (i < left.length && j < right.length) {\n        result.push(left[i] > right[j] ? left[i++] : right[j++]);\n    }\n    return result.concat(i < left.length ? left.slice(i) : right.slice(j));\n}\n\n```\n\n#### 3. 插入排序 (要求 Tc: O(n²) Sc:O(1))\n\n```js\nfunction insertionSort(array) {\n    for (let i = 1; i < array.length; i++) {\n        let j = i;\n        temp = array[i];\n        while (j > 0 && array[j - 1] > temp) {\n            array[j] = array[j - 1];\n            j--;\n        }\n        array[j] = temp;\n    }\n    return array;\n}\n\n```\n\n[LeetCode 第 912 题](https://leetcode-cn.com/problems/sort-an-array/)\n\n结语\n--\n\n以上题目均为精选高频题，希望对大家有帮助.\n\n\n\n 原文地址 https://juejin.im/post/5e9d4eaa51882573834edfb5","source":"_posts/算法高频问题.md","raw":"---\nlayout: '[post]'\ntitle: 算法高频问题\ndate: 2020-05-07 14:04:21\ntags: 面试\n---\n\n\n简介\n--\n\n文中所有题目均为精心挑选过的超高频题目，所以大家可以收藏起来\n\n适用人群\n----\n\n针对有一定数据结构基础 (了解链表, 二叉树, 二叉堆, 递归) 的基本概念, 并对时间空间复杂度有基本认知的。\n\n食用指南\n----\n\n将文中列出的每道题至少手写 3 遍\n\n面试前可以按照本文整理出来的题目直接过一遍\n<!-- more -->\n说明\n--\n\n文章更新频率: 除休息日外, 每天在题目下方更新一道题的题解\n\n有 LeetCode 原题的将贴上原地址，不在文章内做题目描述\n\n> Tc: Time complexity (时间复杂度)\n\n> Sc: Space complexity (空间复杂度)\n\n题目类型\n----\n\n### 数组篇\n\n#### 1.twoSum [要求 Tc: O(n) Sc:O(n)] (字节跳动)\n\n[LeetCode 第 1 题](https://leetcode-cn.com/problems/two-sum/)\n\n按照题目要求, 我们第一时间想到的会是两层循环暴力解法：\n\n**解法 1：Time = O(n²), Space = O(1)**\n\n思路: 遍历每个元素 nums[j]，并查找是否存在一个值与 target - nums[j] 相等的目标元素。\n\n```js\nfunction twoSum(nums, target) {\n     for (let i = 0; i < nums.length; i++) {\n         for (let j = i + 1; j < nums.length; j++) {\n             if (nums[j] == target - nums[i]) {\n                 return [i,j];\n             }\n         }\n     }\n     return [];\n}\n\n```\n\n**解法 2:Time = O(n), Space = O(n)**：\n\n我们可以通过哈希表空间换时间。在进行迭代并将元素插入到表中的同时，我们回过头来检查哈希表中是否已经存在当前元素所对应的目标元素，如果存在，那我们就找到了问题的解，将其返回即可.(时间复杂度为 O(n), 空间复杂度也为 O(n))\n\n符合题目要求 bingo✌\n\n```js\nvar twoSum = function(nums, target) {\n    let reduceHash = {};\n    for (let i = 0; i < nums.length; i++) {\n        let reduceResult = target - nums[i];\n        if (reduceHash[reduceResult] !== undefined) {\n            return [reduceHash[reduceResult], i];\n        }\n        reduceHash[nums[i]] = i;\n    }\n};\n\n```\n\n#### 2. 缺失的数字 [要求 Tc: O(n) Sc:O(n)] (字节跳动)\n\n[剑指 Offer 第 53 题](https://leetcode-cn.com/problems/que-shi-de-shu-zi-lcof/)\n\n**解法：**\n\n思路: 我们先把所有输入了的数字存入 hash 表, 因为给定的数组是有序的，所以可以再过一遍 hash 表，遍历过程中如果某个数字在 hash 表中不存在，则该数字就是缺失的那个数字\n\n```js\nvar missingNumber = function(nums) {\n    const hash = {};\n    for (let i = 0; i < nums.length; i++) {\n        hash[nums[i]] = true;\n    }\n    let expectedNumCount = nums.length + 1;\n    for (let i = 0; i < expectedNumCount; i++) {\n        if (!hash[i]) {\n            return i;\n        }\n    }\n    return -1;\n};\n\nconsole.log(missingNumber([0,1,2,4]));//3\n\n```\n\n#### 3. 移动零 [要求 Tc: O(n) Sc:O(1), 移动后不能改变原来其他元素的相对位置] (二线公司)\n\n[LeetCode 第 283 题](https://leetcode-cn.com/problems/move-zeroes/)\n\n**解法：**\n\n**思路:** 双指针同向而行, fast 指针遇到非 0 就把 slow 指针位置的字符替换掉，slow 指针前进一步。直到 fast 指针把数组所有元素遍历完毕。(典型的两个挡板，三个区域思想), 再把 slow 指针后面的所有元素替换为 0。\n\n同向性质:\n\n**变量的物理意义:** slow 的左侧不包含 slow 都是非 0 的数字，slow 的右侧包含 slow 都应该为 0，按照这个物理意义就可以达到原地算法的要求。因为快慢指针是同向而行的，所以算法为稳定算法 (不会影响元素的相对位置)\n\n```js\nvar moveZeroes = function(nums) {\n    let slow = 0;\n    for (let fast = 0; fast < nums.length; fast++) {\n        if (nums[fast] !== 0) {\n            nums[slow++] = nums[fast];\n        }\n    }\n    while (slow < nums.length) {\n        nums[slow++] = 0;\n    }\n};\nconst input = [0,1,5,8,4,3,0,5,0];\nmoveZeroes(input);\nconsole.log(input);\n\n```\n\n#### 4. 洗牌算法 (乱序数组)[要求 Tc: O(n) Sc:O(1), 要求每个元素的打乱的概率相同] (快手)\n\n[LeetCode 第 384 题](https://leetcode-cn.com/problems/shuffle-an-array/)\n\n**解法:**\n\n**思路:** 本题思路就是使用 Fisher-Yates 洗牌算法。\n\n```js\nfunction shuffle(arr) {\n    let m = arr.length;\n    while (m) {\n        let random = (Math.random() * m--) | 0;\n        [arr[random],arr[m]] = [arr[m],arr[random]];\n    }\n    return arr;\n}\nconsole.log(shuffle([1,5,6,7,6]));\n\n```\n\n#### 5. 两个数组的交集 [要求 Tc: O(n) Sc:O(n)] (阿里)\n\n[LeetCode 第 349 题](https://leetcode-cn.com/problems/intersection-of-two-arrays/)\n\n**解法:**\n\n**思路:** 本题思路是看 nums1 数组里是否含有 nums2 的元素，如果有就添加到结果中返回。\n\n```js\nlet res = [];\nfor (let i = 0; i < nums1.length; i++) {\n   const cur = nums1[i];\n   if (nums2.includes(cur)) {\n       res.push(cur);\n   }\n}\nreturn Array.from(new Set(res));\n\n```\n\n#### 6.RainbowSort [要求 Tc: O(n) Sc:O(1)] (盛大)\n\n给定一系列球，其中球的颜色只能是红色，黄色或蓝色，对球进行排序，以使所有红色球都分组在左侧，所有黄色球都分组在中间，所有蓝色球分组在右侧。\n\n例：\n\n> [红] 被排序为 [红]\n\n> [黄，红] 被排序为 [红，黄]\n\n> [黄, 红, 红, 蓝, 黄, 红, 蓝] 被排序为 [红, 红, 红, 黄, 黄, 蓝, 蓝]\n\n假设条件:\n\n> 输入数组不为 null。\n\ncorner case:\n\n如果输入数组的长度为零怎么办？在这种情况下，我们应该直接返回空数组。\n\n**解法：**\n\n**思路:** 本题思路是挡板思想, 使用三个挡板四个区域的思想进行划分 (交换数组元素位置)\n\n**挡板的物理意义: [0-i) 全是红色,[i,j) 之间为黄色,(k->n-1] 全为蓝色，[j-k] 为未知探索区域**\n\nj 为快指针\n\n```js\nconst input = ['黄','红','红','蓝','黄','红','蓝']\nfunction rainbowSort(rainbow) {\n    let i = 0, j = 0, k = rainbow.length - 1;\n    while (j <= k) {\n        if (rainbow[j] === '红') {\n            swap(rainbow,i,j);\n            i++;\n            j++;\n        }\n        if (rainbow[j] === '黄') {\n            j++;\n        }\n        if (rainbow[j] === '蓝') {\n            swap(rainbow, j, k); //这里不写j++是因为从k交换过来的元素不能保证就是黄色,为了安全起见下次循环再检查一次j位置。\n            k--;\n        }\n    }\n}\n//辅助交换函数\nfunction swap(arr,i,j) {\n    [arr[i],arr[j]] = [arr[j],arr[i]]\n}\nrainbowSort(input);\nconsole.log(input);\n\n```\n\n#### 7. 移除元素 [要求 Tc: O(n) Sc:O(1)]\n\n[LeetCode 第 27 题](https://leetcode-cn.com/problems/remove-element/)\n\n**解法：**\n\n**思路:** 双指针同向而行, 快指针遇到非 val 就把 slow 指针位置的字符替换掉，slow 指针前进，直到数组所有元素遍历完毕。(典型的两个挡板，三个区域思想)\n\n**变量的物理意义:** slow 的左侧不包含 slow 都是非 val 的元素，slow 的右侧包含 slow 都应该为不包含 val 的元素，按照这个物理意义就可以达到原地算法的要求。因为快慢指针是同向而行的，所以算法为稳定算法 (不会影响元素的相对位置)\n\n**挡板性质:**\n\n**同向而行:** slow 指针左边是处理好的元素 fast 指针右边是未知探索区域, 两个挡板中间不关注 (最后的结果不会改变元素相对位置)\n\n```js\nvar removeElement = function(nums, val) {\n    let slow = 0;\n    for(let fast = 0; fast < nums.length; fast++) {\n        if (nums[fast] !== val) {\n         nums[slow++] = nums[fast];\n        }\n    }\n    return slow; //想要拿到去除后的数组可以: nums.slice(0,slow);\n};\n\n```\n\n#### 8. 按奇偶排序数组 [要求 Tc: O(n) Sc:O(1)] (腾讯)\n\n[LeetCode 第 905 题](https://leetcode-cn.com/problems/sort-array-by-parity/)\n\n**解法：**\n\n**思路:** 继续使用挡板思想, 两个挡板三个区域, 同向而行,[0-i) 是偶数,[j-n-1] 是未探索区域\n\n**挡板性质:**\n\n**同向而行:** slow 指针左边是处理好的元素 fast 指针右边是未知探索区域, 两个挡板中间不关注 (最后的结果不会改变元素相对位置)\n\n**解法 1:(不改变元素相对位置: 同向而行)**\n\n```js\nvar sortArrayByParity = function(A) {\n    for (let i = 0, j = 0; j < A.length; j++) {\n        if (A[j] % 2 === 0) swap(A, i++, j);\n    }\n    return A;\n};\nfunction swap(arr,l,r) {\n    [arr[l],arr[r]] = [arr[r],arr[l]];\n}\n\nconsole.log(sortArrayByParity([3,1,2,4]));\n\n```\n\n**挡板性质:**\n\n**相向而行:** left 指针左边是处理好的元素, right 指针右边也是处理好的元素, 两个挡板中间是未处理区域 (最后的结果可能会改变元素相对位置)\n\n**解法 2:(改变元素相对位置: 相向而行)**\n\n```js\nvar sortArrayByParityII = function(A) {\n    let i = 0, j = A.length - 1;\n    while (i <= j) {\n        if (A[i] % 2 === 0) {\n           i++;\n        } else if (A[j] % 2 !== 0) {\n           j--;\n        } else { //i % 2 !== 0 && j % 2 === 0\n            swap(A,i,j);\n            i++;\n            j--;\n        }\n    }\n    return A;\n};\nfunction swap(arr, l, r) {\n    [arr[l], arr[r]] = [arr[r], arr[l]];\n}\n\nconsole.log(sortArrayByParityII([3,1,2,4]));\n\n```\n\n#### 9. 数组中出现次数超过一半的数字 [要求 Tc: O(n) Sc:O(1)]\n\n[LeetCode 第 169 题](https://leetcode-cn.com/problems/majority-element/)\n\n**思路:** 这道题属于火拼问题, 见一个 sha 一个 (抵消), 最后留下的就是超过一半的元素。\n\n先保留第一个元素，接着遍历，如果遇到和他相同的则加次数，否则就减次数，如果次数为 0 了就要换另一个元素了。\n\n比如: A B C A\n\n第一次保留 A, 用 A 跟剩下的打架，碰到不是 A 的就把 A 的个数减 1，如果遇到 A 就增加个数，直到遇到不同的元素把 A 的次数抵消完就把 A 踢下去, 并且把次数重新设置为 1。\n\n如此下去最后肯定有个多出来的就是题解了。\n\n```js\nvar majorityElement = function(array) {\n    let count = 1;\n    let num = array[0];\n    for (let i = 1; i < array.length; i++) {\n        if (num !== array[i]) {\n            count--;\n            if (count === 0) {\n                num = array[i];\n                count = 1;\n            }\n        } else {\n            count++;\n        }\n    }\n    return num;\n};\nlet halfValue = majorityElement([1,1,2,3]);\nconsole.log(halfValue); //1\n\n```\n\n#### 10. 合并两个有序数组 [要求 Tc: O(m + n) Sc:O(n)] (腾讯)\n\n例:\n\n> 输入: nums1 = [1,3], nums2 = [4,5,7]\n\n> 输出: [1,3,4,5,7]\n\n```js\nfunction merge(left, right) {\n    let result = [];\n    let i = 0, j = 0;\n    while (i < left.length && j < right.length) {\n        result.push(left[i] < right[j] ? left[i++] : right[j++]);\n    }\n    while (i < left.length) {\n        result.push(left[i++]);\n    }\n    while (j < right.length) {\n        result.push(right[j++]);\n    }\n    return result;\n}\nlet merged = merge([1,3],[4,5,7]);\nconsole.log(merged);\n\n```\n\n#### 11. 有序数组中小于某个数的个数 [要求 Tc: O(logn) Sc:O(1)] (今日头条)\n\n例:\n\n> 输入:[1, 2, 3, 4]\n\n> 输入目标值: 2\n\n> 输出: 1\n\n**思路:** 题目提到有序数组，第一时间就应该想到二分 (再加之复杂度要求 logn 级别)。其实这道题就是让写个二分查找, 仔细想想，你要找的那个数的下标不就代表前面有几个比他小的数字吗？\n\n```js\nfunction binarySearch(array, target) {\n    let low = 0;\n    let high = array.length - 1;\n    while (low <= high) {\n        const mid = (low + (high - low) / 2) | 0;\n        const middleValue = array[mid];\n        if (middleValue > target) {\n            high = mid - 1;\n        } else if (middleValue < target) {\n            low = mid + 1;\n        } else {\n            return mid;\n        }\n    }\n}\nconst minCount = binarySearch([1, 2, 3, 4], 2);\nconsole.log(minCount); // 1\n\n```\n\n#### 12. 数组去重 [要求 Tc: O(n) Sc:O(1)]\n\n[LeetCode 第 26 题](https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/)\n\n该算法要求原地算法，所以继续使用挡板思想 (没理解的可以回到上文提及处继续理解)。\n\n因为他至少有一个元素是不会重复的 (至少会保留一个元素)，所以从下标 1 开始处理。\n\n**解法 1:** 从索引 1 开始 (处理好的元素不包含 slow 位置)\n\n```js\nvar removeDuplicates = function(arr) {\n    let slow = 1;\n    for (let fast = 1; fast < arr.length; fast++) {\n        if (arr[fast] === arr[slow - 1]) {\n            continue;\n        }\n        arr[slow++] = arr[fast];\n    }\n    return slow; //想要拿到去除后的数组可以: arr.slice(0, slow);\n};\n\n```\n\n**解法 2:** 从索引 0 开始,(处理好的元素包含 slow 位置)\n\n```js\nvar removeDuplicates = function(arr) {\n    let slow = 0;\n    for (let fast = 1; fast < arr.length; fast++) {\n        if (arr[fast] === arr[slow]) {\n            continue;\n        }\n        arr[++slow] = arr[fast];\n    }\n    return slow + 1; //想要拿到去除后的数组可以: arr.slice(0, slow + 1);\n};\n\n```\n\n#### 13. 去掉连续的 a 和 c, 保留所有 b [要求 Tc: O(n) Sc:O(1) 元素相对位置不变] (字节跳动)\n\n**思路:** 还是使用快慢指针, 同向而行\n\n```js\nfunction removeAC(arr) {\n    let slow = 0,fast = 0;\n    while (fast < arr.length) {\n        if (arr[fast] === 'b') {\n            arr[slow++] = arr[fast++];\n        } else {\n            let begin = fast;\n            while (fast < arr.length && arr[fast + 1] === arr[begin]) {\n                fast++;\n            }\n            if (fast - begin === 0) {\n                arr[slow++] = arr[fast++];\n            } else {\n                fast++;\n            }\n        }\n  }\n  return arr.slice(0,slow).join('');\n}\nconst result = j1(['a','a','b','c','b','c','c']);\nconsole.log(result);//bcb\n\n```\n\n#### 14. 最长公共前缀 (拼多多)\n\n> 例: ['aaafsd', 'aawwewer', 'aaddfff'] => 'aa'\n\n[LeetCode 第 14 题](https://leetcode-cn.com/problems/longest-common-prefix/)\n\n```js\nfunction LCP(arr) {\n    if (!arr.length) {   \n        return '';\n    }\n    let ans = arr[0];\n    for (let i = 1; i < arr.length; i++) {\n        let j = 0;\n        for (;j < ans.length && j < arr[i].length; j++) {\n            if (ans[j] !== arr[i][j]) {\n                break;\n            }\n        }\n        ans = ans.substr(0,j);\n        if (ans === \"\") {\n            return ans;\n        }\n    }\n    return ans;\n}\nlet result = LCP(['aaafsd', 'aawwewer', 'aaddfff']);\nconsole.log(result);\n\n```\n\n#### 15. 给定一个整数数组 a，其中 1 ≤ a[i] ≤ n （n 为数组长度）, 其中有些元素出现两次而其他元素出现一次, 找到所有出现两次的元素 [要求 Tc: O(n) Sc:O(1)] (字节跳动)\n\n> 例: 输入: [4,3,2,7,8,2,3,1] 输出: [2,3]\n\n解：**目前没有思路**\n\n#### 16. 数组中所有元素组成的最大数是多少 (作业帮)\n\n> 例: [50, 2, 5, 9] => 95502\n\n**思路:** 我们把最大的数字依次排序肯定就是最大数 (降序排列)\n\n```js\nvar largestNumber = function(nums) {\n    nums = nums.sort((a, b) => {\n        let S1 = `${a}${b}`;\n        let S2 = `${b}${a}`;\n        return S2 - S1;\n    });\n    return nums[0] ? nums.join('') : '0';\n};\n\n```\n\n[LeetCode 第 179 题](https://leetcode-cn.com/problems/largest-number)\n\n### 字符串篇\n\n#### 1. 回文数 [要求 Tc: O(log10n) Sc:O(1) 或 Tc: O(n) Sc:O(1)] (腾讯)\n\n[LeetCode 第 9 题](https://leetcode-cn.com/problems/palindrome-number/)\n\n**思路:** 使用双指针一个在前，一个在后, 前后对比。遇到两个指针不同就返回 false。\n\n```js\nfunction palindrome(x) {\n    let i = 0, j = x.length - 1;\n    while (i <= j) {\n        if (x[i] !== x[j]) {\n           return false;\n        } else {\n           i++;\n           j--;\n        }\n    }\n    return true;\n}\nlet result = palindrome('lol');\nconsole.log(result);\n\n```\n\n#### 2. 反转字符串 [要求 Tc: O(n) Sc:O(1)]\n\n[LeetCode 第 344 题](https://leetcode-cn.com/problems/reverse-string/)\n\n**思路:** 使用双指针一个在前，一个在后, 每次都交换即可\n\n```js\nvar reverseString = function(s) {\n    let slow = 0;\n    for (let fast = s.length - 1, slow = 0; fast >= slow; fast--) {\n        swap(s, slow++, fast);\n    }\n};\nfunction swap(arr, l, r){\n    let temp = arr[l];\n    arr[l] = arr[r];\n    arr[r] = temp;\n}\n\n```\n\n#### 3. 翻转单词顺序 [要求 Tc: O(n) Sc:O(n)] (字节跳动)\n\n[剑指 Offer 第 58 题](https://leetcode-cn.com/problems/fan-zhuan-dan-ci-shun-xu-lcof/)\n\n**思路:** 将字符串按空格分割, 然后按照上题的方法交换单词顺序即可。\n\n```js\nvar reverseWords = function(s) {\n    let strArr = s.split(' ').filter(Boolean);\n    let reversed = strArr;\n    reverse(reversed, 0, reversed.length - 1);\n    return reversed.join(' ');\n};\nfunction reverse(input, left, right) {\n    if (left >= right) {\n        return;\n    }\n    swap(input, left, right);\n    reverse(input, left + 1, right -1);\n}\nfunction swap(arr, l, r) {\n    [arr[l],arr[r]] = [arr[r],arr[l]];\n}\n\n```\n\n#### 4. 有效的字母异位词 (Anagram) [要求 Tc: O(n) Sc:O(n)]\n\n[LeetCode 第 242 题](https://leetcode-cn.com/problems/valid-anagram/)\n\n**思路:** 我们可以使用 hash 存储每个单词出现的次数，再用另一个字符串遍历一次进行减减操作，只要次数有不等于 0 的字母则返回 false\n\n```js\nvar isAnagram = function(s, t) {\n    if (s.length !== t.length) return false;\n    \n    let map = new Map();\n    \n    for (let item of s) {\n    \tif (map.get(item)) {\n            map.set(item, map.get(item) + 1);\n    \t} else {\n            map.set(item, 1);\n    \t}\n    }\n    for (let item of t) {\n    \tif (map.get(item)) {\n            map.set(item, map.get(item) - 1);\n    \t} else {\n            return false;\n    \t}\n    }\n    return true;\n};\n\n```\n\n#### 5. 找出字符串中出现次数最多的字母 [要求 Tc: O(n) Sc:O(n)]\n\n> 例 1: 输入'abccdtc'\n\n> 输出: 'c'\n\n> 例 2: 输入'abbbbccdtc'\n\n> 输出: 'b'\n\n```js\nfunction maxCount(str) {\n    let hash = {};\n    let maxCount = 0;\n    let maxElement = '';\n    for (let i = 0; i < str.length; i++) {\n        let cur = str[i];\n        if (hash[cur]) {\n            hash[cur]++;\n        } else {\n            hash[cur] = 1;\n        }\n        if (maxCount < hash[cur]) {\n            maxElement = cur;\n            maxCount = hash[cur];\n        } \n    }\n    return maxElement;\n}\nlet letter = maxCount('abccdtc');\nconsole.log(letter);\n\n```\n\n#### 6. 替换空格 [要求 Tc: O(n) Sc:O(1) 不允许使用正则表达式] (今日头条)\n\n[剑指 Offer 第 5 题](https://leetcode-cn.com/problems/ti-huan-kong-ge-lcof/)\n\n**思路:** 使用快慢指针, 同向而行，快指针负责判断是不是空格，慢指针左侧都是处理好的元素。\n\n```js\nvar replaceSpace = function(s) {\n    s = s.split('');\n    for (let fast = 0; fast < s.length; fast++) {\n        if (s[fast] === ' ') {\n            s[fast] = '%20';\n        }\n    }\n    return s.join('');\n};\n\n```\n\n**其他解法 (不推荐面试中使用):**\n\n```js\nvar replaceSpace = function(s) {\n    s = s.split(' ').join('%20');\n    return s;\n};\n\nvar replaceSpace = function(s) {\n    s = s.replace(/\\s+/g,'%20');\n    return s;\n};\n\n```\n\n#### 7. 第一个只出现一次的字符 [要求 Tc: O(n) Sc:O(n)]\n\n[剑指 Offer 第 50 题](https://leetcode-cn.com/problems/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof/)\n\n**思路:** 遍历过程中存 hash 表, 如果当前值第一次出现就设置为 false, 后续处理遍历值为 false 的, 遇到为 false 的就直接返回。\n\n```js\nvar firstUniqChar = function(s) {\n    let hash = {};\n    let firstAppearLetter = '';\n    if (s === '') {\n        return ' ';\n    } else {\n        for (let i = 0; i < s.length; i++) {\n            if (hash[s[i]] === undefined) {\n                hash[s[i]] = false;\n            } else {\n                hash[s[i]] = true;\n            }\n        }\n    }\n    for (let [key, value] of Object.entries(hash)) {\n        if (!value) {\n            return key;\n        }\n    }\n    return ' '\n};\n\n```\n\n#### 8. 左旋转字符串 [要求 Tc: O(n) Sc:O(n)]\n\n[剑指 Offer 第 58 题](https://leetcode-cn.com/problems/zuo-xuan-zhuan-zi-fu-chuan-lcof/)\n\n```js\nvar reverseLeftWords = function(s, n) {\n    let frontStr = s.slice(0, n);\n    let backStr = s.slice(n);\n    return backStr + frontStr;\n};\n\n```\n\n#### 9. 字符串全排列 [要求 Tc: O(n!) Sc:O(n²)] (阿里)\n\n[剑指 Offer 第 38 题](https://leetcode-cn.com/problems/zi-fu-chuan-de-pai-lie-lcof/)\n\n```js\nvar permutation = function(s) {\n    let solution = [];\n    if (s.length === 0) {\n        return solution;\n    }\n    permutationHelper(s, solution);\n    return solution;\n};\nfunction permutationHelper(s, solution, used = [], path = []) {\n    if (path.length === s.length) {\n        solution.push(path.slice(0).join(''));\n        return;\n    }\n    let levelSet = new Set();\n    for (let i = 0; i < s.length; i++) {\n        if (!levelSet.has(s[i])) {\n            if (!used[i]) {\n                used[i] = true;\n                levelSet.add(s[i]);\n                path.push(s[i]);\n                permutationHelper(s, solution, used, path);\n                used[i] = false; //回溯\n                path.pop();//回到母节点往右走时应该删除添加过的节点,防止保留意外的结果\n            }   \n        }\n    }\n}\n\n```\n\n#### 10. 合并连续数字 [要求 Tc: O(n) Sc:O(1)] (今日头条)\n\n> 题目描述:\n\n> 输入:[0, 2, 3, 5, 6, 7, 8, 9, 11, 13, 56, 57]\n\n> 输出结果：\n\n> 0,2-3,5-9,11,13,56-57\n\n**思路:** 三指针, 同向而行, slow 左边的为处理好的元素, f 指针快速向前走, begin 指针记录区间开始区间, prev 指针记录区间结束位置。\n\n```js\nfunction combine(arr) {\n    let f = 1, slow = 0;\n    let prev = -1;\n    while (f < arr.length) {\n        let begin = f - 1;\n        prev = arr[begin];\n        while (f < arr.length && arr[f] - prev === 1) {\n            prev = arr[f];\n            f++;\n        }\n        if (f - begin === 1) {\n            if (arr[f + 1] - arr[f] !== 1) {\n                !begin ? arr[slow++] = arr[begin] : arr[slow++] = arr[f];\n            } else {\n                if (!begin) arr[slow++] = arr[begin];\n            }\n            f++;\n        } else {\n            arr[slow++] = arr[begin] + `-` + prev;\n        }\n    }\n    return arr.slice(0, slow).join(',');\n}\nlet res = combine([0, 2, 3, 5, 6, 7, 8, 9, 11, 13, 56, 57]);\nconsole.log(res);\n\n```\n\n#### 11. 字符串相加 (腾讯)\n\n[LeetCode 第 415 题](https://leetcode-cn.com/problems/add-strings/)\n\n```js\nvar addStrings = function(num1, num2) {\n    let res = [];\n    let i = num1.length - 1, j = num2.length - 1, carry = 0;\n    while (i >= 0 || j >= 0) {\n        let n1 = i >= 0 ? num1.charAt(i) - 0: 0;\n        let n2 = j >= 0 ? num2.charAt(j) - 0: 0;\n        let tmp = n1 + n2 + carry;\n        carry = parseInt(tmp / 10);//算出十位数\n        res.push(tmp % 10);//算出个位数\n        i--; j--;\n    }\n    if(carry == 1) res.push('1');\n    return res.reverse().join('')\n};\n\n```\n\n### 栈 / 队列篇\n\n#### 1. 实现一个栈，入栈 push、出栈 pop、返回最小值 min 的复杂度为 0(1) (滴滴)\n\n[LeetCode 第 115 题](https://leetcode-cn.com/problems/min-stack/)\n\n**思路:** stack2 为存储最小值的数组, 使用同步加同步减的思路, stack1 进来的新元素比 stack2 的 top 元素大则无视, 否则 stack2 顶部的元素变成刚刚进来的小值。\n\n```js\nvar MinStack = function() {\n    this.stack1 = [];\n    this.stack2 = []; \n};\n/** \n * @param {number} x\n * @return {void}\n */\nMinStack.prototype.push = function(x) { //同步加同步减push pop\n    this.stack1.push(x);\n    if (this.stack2.length === 0) {\n        this.stack2.push(x);\n    } else {\n        let temp = this.stack2[this.stack2.length - 1];\n        if (x < temp) {\n            this.stack2.push(x)\n        } else {\n            this.stack2.push(temp);\n        }\n    }\n};\n\n/**\n * @return {void}\n */\nMinStack.prototype.pop = function() {\n    if (this.stack1.length) {\n        this.stack1.pop();\n        this.stack2.pop();\n    }\n    \n};\n\n/**\n * @return {number}\n */\nMinStack.prototype.top = function() {\n    return this.stack1[this.stack1.length - 1];\n};\n\n/**\n * @return {number}\n */\nMinStack.prototype.getMin = function() {\n    return this.stack2[this.stack2.length - 1];\n};\n\n\n\n```\n\n#### 2. 使用两个栈实现一个队列 (滴滴)\n\n[剑指 Offer 第 9 题](https://leetcode-cn.com/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof/)\n\n**思路:** 我们既然要实现队列, 那肯定就是要有其中一个栈作为辅助栈，用来倒腾另一个栈中的数据 (我们这里的 stack1 为主栈，stack2 为辅助栈);\n\n```js\nvar CQueue = function() {\n    this.stack1 = [];//2 1\n    this.stack2 = [];\n    this.count = 0;\n};\n\n/** \n * @param {number} value\n * @return {void}\n */\nCQueue.prototype.appendTail = function(value) {\n    while (this.stack1.length) { //如果stack1中有元素那就先把stack1中所有元素放到stack2中\n        this.stack2.push(this.stack1.pop()); \n    }\n    this.stack1.push(value);//添加新的值到stack1中\n    while (this.stack2.length) {\n        this.stack1.push(this.stack2.pop()); //然后再把stack2中的元素放到stack1中\n    }\n    //这几步的意思是让stack1具有队列的性质(先进先出) 因为stack2代表stack1中之前的数据，然后会压到新数据的上面\n    this.count++;\n\n};\n\n/**\n * @return {number}\n */\nCQueue.prototype.deleteHead = function() {\n    if (this.count == 0) {\n        return -1;\n    }\n    this.count--;\n    return this.stack1.pop();//使用pop栈的方法，因为咱们利用辅助栈倒腾了一下所以直接pop后结果就是按照队列的性质输出了先进的值\n};\n\n```\n\n#### 3. 有效的括号 [要求 Tc: O(n) Sc:O(n)] (哔哩哔哩)\n\n[LeetCode 第 20 题](https://leetcode-cn.com/problems/valid-parentheses/)\n\n**思路:** 使用栈保存括号，遇到左括号直接入栈，遇到右括号就把栈顶的弹出来和当前的右括号匹配, 如果匹配失败说明不合法直接返回 false, 最后判断栈是不是空 (是不是所有括号都抵消完毕了), 不为空也说明不合法。\n\n```js\nvar isValid = function(str) {\n    let map = {\n        '{': '}',\n        '(': ')',\n        '[': ']'\n    }\n    let stack = []\n    for (let i = 0; i < str.length; i++) {\n        if (map[str[i]]) {\n            stack.push(str[i]);\n        } else if (str[i] !== map[stack.pop()]) {\n            return false;\n        }\n    }\n    return stack.length === 0\n};\n\n```\n\n### 链表篇\n\n#### 1. 从尾到头打印单链表 [要求 Tc: O(n) Sc:O(n)]\n\n[剑指 Offer 第 6 题](https://leetcode-cn.com/problems/cong-wei-dao-tou-da-yin-lian-biao-lcof/)\n\n**思路:** 基于 stack 的特性 (后进先出), 所以我们从头到尾过一遍链表，最后按照栈的顺序弹出就可以得到结果。\n\n```js\nvar reversePrint = function(head) {\n    let stack = [];\n    let cur = head;\n    while (cur !== null) {\n        stack.push(cur.val);\n        cur = cur.next;\n    }\n    let print = [];\n    while (stack.length) {\n        print.push(stack.pop())\n    }\n    return print;\n};\n\n```\n\n#### 2. 删除链表的倒数第 K 个结点 [要求 Tc: O(L) Sc:O(1)]\n\n[LeetCode 第 19 题](https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/)\n\n```js\nvar removeNthFromEnd = function(head, n) {\n    let dummyNode = new ListNode(0);\n    dummyNode.next = head;\n    let fast = dummyNode, slow = dummyNode;\n    // 快先走 n+1 步\n    while(n--) {\n        fast = fast.next\n    }\n    // fast、slow 一起前进\n    while(fast && fast.next) {\n        fast = fast.next\n        slow = slow.next\n    }\n    slow.next = slow.next.next\n    return dummyNode.next\n};\n\n```\n\n#### 3. 判断单链表是否有环 [要求 Tc: O(n) Sc:O(1)] (有赞)\n\n[LeetCode 第 141 题](https://leetcode-cn.com/problems/linked-list-cycle/)\n\n```js\nvar hasCycle = function(head) {\n    if (head === null) {\n        return false;\n    }\n    let slow = fast = head;\n    while (fast.next !== null && fast.next.next !== null) {\n        slow = slow.next;\n        fast = fast.next.next;\n        if (slow === fast) {\n            return true;\n        }\n    }\n    return false;\n};\n\n```\n\n#### 4. 反转单链表 [要求 Tc: O(n) Sc:O(1)] (链表类超高频)\n\n[剑指 Offer 第 24 题](https://leetcode-cn.com/problems/fan-zhuan-lian-biao-lcof/)\n\n**反转思路如下过程:**\n\n原始链表: head -> 2 -> 3 -> 4 -> null\n\n```js\n<- 2    3  ->  4 -> null\npre(null)    cur  next\n        \nnull  <- 2  <-  3      4 -> null\n        pre    cur   next\n                \nnull  <- 2  <-  3  <-  4   null\n                      cur  next\n                pre  \nnull  <- 2  <-  3  <-  4    null\n                      pre   cur  next\n <--------------------pre is the newHead to be returned\n\n```\n\n**迭代解法 (从左到右反转):**\n\n```js\nvar reverseList = function(head) {\n    if (head === null || head.next === null) {\n        return head;\n    }\n    let pre = null, cur = head;\n    while (cur !== null) {\n        let next = cur.next;\n        cur.next = pre;\n        pre = cur;\n        cur = next;\n    }\n    return pre;\n};\n\n```\n\n**递归解法:(从右往左反转)**\n\n```js\nvar reverseList = function(head) {\n    if(head === null || head.next === null) {\n        return head;\n    }\n    let newHead = reverseList(head.next);\n    head.next.next = head;\n    head.next = null;\n    return newHead;\n}\n\n```\n\n原始链表: 2 -> 3 -> null\n\n第一次调用 reverseList:\n\n```js\n2  ->  3 -> null\nhead  newHead\n\n```\n\n```js\nhead.next.next = head 干的事是: (2的next是3,将3的next指向2)：\n2  <->  3\n\n```\n\n```js\nhead.next = null 干的事是:\nnull <- 2  <- 3\n       head\n\n```\n\n```js\nreturn newHead 干的事是:\nnull <- 2  <- 3\n             newHead\n\n```\n\n第二次调用 reverseList:\n\n```js\n2  ->  3 -> null\n      head       \nbase case: return newHead = 3\n\n```\n\n#### 5. 判断两个链表是否相交，若相交，求交点 (链表没有环)[要求 Tc: O(m+n) Sc:O(n)] (字节跳动)\n\n[LeetCode 第 160 题](https://leetcode-cn.com/problems/intersection-of-two-linked-lists/solution/xiang-jiao-lian-biao-by-leetcode/)\n\nheadA:a+c+b  \nheadB:b+c+a\n\n因为 a+c+b === b+c+a 因此终有一刻他们能相交\n\n```js\nvar getIntersectionNode = function(headA, headB) {\n    if (headA === null || headB === null) {\n        return null;\n    }\n    let nodeA = headA;\n    let nodeB = headB;\n    while (nodeA !== nodeB) {\n        nodeA = nodeA ? nodeA.next : headB;\n        nodeB = nodeB ? nodeB.next : headA;\n    }\n    return nodeA;\n};\n\n```\n\n#### 6. 查找单链表的中间节点，要求只能遍历一次链表 [要求 Tc: O(n) Sc:O(1)]\n\n[LeetCode 第 876 题](https://leetcode-cn.com/problems/middle-of-the-linked-list/)\n\n```js\nvar middleNode = function(head) {\n    let slow = head;\n    let fast = head;\n    while (fast !== null && fast.next !== null) {\n        slow = slow.next;\n        fast = fast.next.next;\n    }\n    return slow;\n};\n\n```\n\n#### 7. 合并两个有序链表，合并后依然有序 [要求 Tc: O(m+n) Sc:O(1)]\n\n[剑指 Offer 第 25 题](https://leetcode-cn.com/problems/he-bing-liang-ge-pai-xu-de-lian-biao-lcof/)\n\n```js\nvar mergeTwoLists = function(l1, l2) {\n    let dummyHead = new ListNode(0);\n    let cur1 = l1;\n    let cur2 = l2;\n    let tail = dummyHead;\n    while (cur1 !== null && cur2 !== null) {\n        if (cur1.val < cur2.val) {\n            tail.next = cur1;\n            cur1 = cur1.next;\n        } else {\n            tail.next = cur2;\n            cur2 = cur2.next;\n        }\n        tail = tail.next;\n    }\n    if (cur1 !== null) {\n        tail.next = cur1;\n    }\n    if (cur2 !== null) {\n        tail.next = cur2;\n    }\n    return dummyHead.next;\n};\n\n```\n\n#### 8. 查找单链表的倒数第 K 个节点，要求只能遍历一次链表 [要求 Tc: O(n) Sc:O(1)]\n\n[剑指 Offer 第 22 题](https://leetcode-cn.com/problems/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof/solution/mian-shi-ti-22-lian-biao-zhong-dao-shu-di-kge-j-11/)\n\n```js\nvar getKthFromEnd = function(head, k) {\n    let fast = head, slow = head;\n    for (let i = 0; i < k; i++) {\n        fast = fast.next;\n    }\n    while (fast != null) {\n        fast = fast.next;\n        slow = slow.next;\n    }\n    return slow;\n}\n\n```\n\n### 二叉树篇\n\n#### 1. 二叉树的删除实现 [要求 Tc: O(H) Sc:O(H)] (字节跳动)\n\n[LeetCode 第 450 题](https://leetcode-cn.com/problems/delete-node-in-a-bst/)\n\n```js\nvar deleteNode = function(root, key) {\n    this.root = recursionDelete(root, key);\n    return this.root;\n};\nfunction recursionDelete(root, key) {\n    if (root === null) {\n        return null;\n    }\n    if (root.val > key) {\n        root.left = recursionDelete(root.left, key);\n        return root;\n    } else if (root.val < key) {\n        root.right = recursionDelete(root.right, key);\n        return root;\n    } else {  //3种情况\n        if (root.left === null && root.right === null) { //1\n            root === null;\n            return root;\n        }\n        if (root.left === null) { //2\n            root = root.right;\n            return root;\n        } else if (root.right === null) { //2\n            root = root.left;\n            return root;\n        }\n        let aux = null; //3\n        let current = root.right;\n        while (current != null && current.left != null) {\n        \tcurrent = current.left;\n        }\n        aux = current;\n        root.val = aux.val;\n        root.right = recursionDelete(root.right,aux.val);\n        return root;\n    }\n}\n\n```\n\n#### 2. 判断一棵树是否是平衡树 [要求 Tc: O(n) Sc:O(n)] (字节跳动)\n\n[LeetCode 第 110 题](https://leetcode-cn.com/problems/balanced-binary-tree/)\n\n```js\nvar isBalanced = function(root) {\n    if (root === null) {\n        return true;\n    }\n    const lh = maxDepth(root.left);\n    const rh = maxDepth(root.right);\n    if (Math.abs(lh - rh) > 1) {\n        return false;\n    }\n    return isBalanced(root.left) && isBalanced(root.right);\n};\nfunction maxDepth(root) {\n    if (root === null) {\n        return 0;\n    }\n    const left = maxDepth(root.left);\n    const right = maxDepth(root.right);\n    return Math.max(left, right) + 1;\n};\n\n```\n\n#### 3. 二叉树最大深度 [要求 Tc: O(n) Sc:O(n)] (阿里)\n\n[剑指 Offer 第 55 题](https://leetcode-cn.com/problems/er-cha-shu-de-shen-du-lcof/)\n\n```js\nfunction maxDepth(root) {\n    if (root === null) {\n        return 0;\n    }\n    const left = maxDepth(root.left);\n    const right = maxDepth(root.right);\n    return Math.max(left, right) + 1;\n};\n\n```\n\n#### 5. 二叉树中和为某一值的路径 [要求 Tc: O(n) Sc:O(n)] (字节跳动)\n\n[剑指 Offer 第 34 题](https://leetcode-cn.com/problems/er-cha-shu-zhong-he-wei-mou-yi-zhi-de-lu-jing-lcof/)\n\n第 34 题解:\n\n```js\nvar pathSum = function(root, sum) {\n    if(!root) return [];\n    const solution = [];\n    let path = []\n    pathSumHelper(root,sum,solution,path);\n    return solution;\n};\nfunction pathSumHelper(root,sum,solution,path) {\n    path.push(root.val);\n    if(root.left == null && root.right == null && calcPath(path) == sum) {\n        solution.push([...path]);\n    }\n    if(root.left){\n        pathSumHelper(root.left,sum,solution,path);\n    }\n    if(root.right){\n        pathSumHelper(root.right,sum,solution,path);\n    }\n    path.pop();\n}\nfunction calcPath(path){\n    let total = 0;\n    for(let i = 0;i<path.length;i++){\n        total += path[i];\n    }\n    return total;\n}\n\n```\n\n#### 6.LCA[要求 Tc: O(n) Sc:O(n)] (字节跳动)\n\n[LeetCode 第 236 题](https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/)\n\n```js\nvar lowestCommonAncestor = function(root, p, q) {\n    if(!root || root.val == p.val || root.val == q.val) return root;\n    let left = lowestCommonAncestor(root.left, p, q);\n    let right = lowestCommonAncestor(root.right, p, q);\n    //如果left不存在p或q就返回right的结果。如果left存在，right不存在就返回left结果。如果left和right都存在就返回根节点\n    if(left == null) return right;\n    else if(right == null) return left;\n    return root;\n};\n\n```\n\n#### 7. 二叉树层序遍历 [要求 Tc: O(n) Sc:O(n)] (必会题)\n\n[LeetCode 第 102 题](https://leetcode-cn.com/problems/binary-tree-level-order-traversal/)\n\n```js\nvar levelOrder = function(root) {\n    if (root === null) {\n        return [];\n    }\n    const result = [];\n    let queue = [root];\n    while (queue.length) {\n        const level = [];\n        let size = queue.length;\n        for (let i = 0; i < size; i++) {\n            let cur = queue.shift();\n            if (cur.left) {\n                queue.push(cur.left);\n            }\n            if (cur.right) {\n                queue.push(cur.right);\n            }\n            level.push(cur.val);\n        }\n        result.push(level);\n    }\n    return result;\n};\n\n```\n\n#### 8. 是否是 BST[要求 Tc: O(n) Sc:O(n)] (有赞)\n\n[LeetCode 第 98 题](https://leetcode-cn.com/problems/validate-binary-search-tree/)\n\n```js\nvar isValidBST = function(root) {\n    let min = -Infinity;\n    let max = Infinity;\n    return isValidBSTHelper(root, min, max);\n};\nfunction isValidBSTHelper(root, min, max) {\n    if (root === null) {\n        return true;\n    } \n    if(root.val <= min || root.val >= max) {\n        return false;\n    }\n    return isValidBSTHelper(root.left, min, root.val) && isValidBSTHelper(root.right, root.val, max);\n}\n\n```\n\n#### 9. 是否是完全二叉树 [要求 Tc: O(n) Sc:O(n)] (字节跳动)\n\n[LeetCode 第 958 题](https://leetcode-cn.com/problems/check-completeness-of-a-binary-tree/)\n\n```js\nvar isCompleteTree = function(root) {\n    if (root === null) {\n        return true;\n    }\n    let queue = [root];\n    let flag = false;\n    while (queue.length) {\n       let cur = queue.shift();\n       if (cur.left === null) {\n           flag = true;\n       } else if (flag) {\n           return false;\n       } else {\n           queue.push(cur.left);\n       }\n       if (cur.right === null) {\n           flag = true;\n       } else if (flag) {\n           return false;\n       } else {\n           queue.push(cur.right);\n       }\n    }\n    return true;\n};\n\n```\n\n#### 10. 翻转二叉树 [要求 Tc: O(n) Sc:O(n)]\n\n[LeetCode 第 226 题](https://leetcode-cn.com/problems/invert-binary-tree/)\n\n```js\nvar invertTree = function(root) {\n    if(root == null) {\n        return [];\n    }\n    invertTreeHelper(root);\n    return root;\n};\nfunction invertTreeHelper(root) {\n    if (root == null) {\n        return;\n    }\n    let tmp = root.left;\n    root.left = root.right;\n    root.right = tmp;\n    invertTree(root.left);\n    invertTree(root.right);\n}\n\n```\n\n#### 11. 二叉树的右视图 [要求 Tc: O(n) Sc:O(n)] (字节跳动)\n\n[LeetCode 第 199 题](https://leetcode-cn.com/problems/binary-tree-right-side-view/)\n\n```js\nvar rightSideView = function(root) {\n    const result = [];\n    if (root === null) {\n        return result;\n    }\n    let queue = [root];\n    while (queue.length) {\n        const level = [];\n        let size = queue.length;\n        for (let i = 0; i < size; i++) {\n            let cur = queue.shift();\n            if (i === size - 1) {\n                level.push(cur.val);\n            }\n            if (cur.left) {\n                queue.push(cur.left);\n            }\n            if (cur.right) {\n                queue.push(cur.right);\n            }\n        }\n        result.push(level);\n    }\n    return result;\n};\n\n```\n\n#### 12. 判断对称二叉树 [要求 Tc: O(n) Sc:O(n)]\n\n[LeetCode 第 101 题](https://leetcode-cn.com/problems/symmetric-tree/)\n\n```js\nvar isSymmetric = function(root) {\n    return isSymmetricHelper(root, root);\n};\nfunction isSymmetricHelper(one, two) {\n    if (one === null && two === null) {\n        return true;\n    } else if (one === null || two === null) {\n        return false;\n    } else if (one.val !== two.val) {\n        return false;\n    }\n    return isSymmetricHelper(one.left,two.right) && isSymmetricHelper(one.right,two.left);\n}\n\n```\n\n#### 13. 二叉树的锯齿形层次遍历 [要求 Tc: O(n) Sc:O(n)] (字节跳动)\n\n[LeetCode 第 103 题](https://leetcode-cn.com/problems/binary-tree-zigzag-level-order-traversal/)\n\n```js\nvar zigzagLevelOrder = function(root) {\n  const printArr = []\n  if (!root) return printArr\n  const list = []\n  list.push({ level: 0, node: root })\n  while(list.length > 0) {\n    const { level, node } = list.shift()\n    if (!printArr[level]) {\n      printArr[level] = []\n    }\n    if (level % 2 === 0) {\n      printArr[level].push(node.val)\n    } else {\n      printArr[level].unshift(node.val)\n    }\n    node.left && list.push({ level: level + 1, node: node.left })\n    node.right && list.push({ level: level + 1, node: node.right })\n  }\n  return printArr\n};\n\n```\n\n#### 14. 构造二叉树\n\n[LeetCode 第 106 题](https://leetcode-cn.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/)\n\n```js\nvar buildTree = function(preorder, inorder) {\n    function help(inorder) {\n        if (!inorder|| !inorder.length) return null;\n        let top = preorder.shift(), p = inorder.indexOf(top);\n        let root = new TreeNode(top);\n        root.left = help(inorder.slice(0, p));\n        root.right = help(inorder.slice(p+1));\n        return root;\n    }\n    return help(inorder);\n};\n\n```\n\n[LeetCode 第 105 题](https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/)\n\n```js\nvar buildTree = function(preorder, inorder) {\n    function help(inorder) {\n        if (!inorder|| !inorder.length) return null;\n        let top = preorder.shift(), p = inorder.indexOf(top);\n        let root = new TreeNode(top);\n        root.left = help(inorder.slice(0, p));\n        root.right = help(inorder.slice(p + 1));\n        return root;\n    }\n    return help(inorder);\n};\n\n```\n\n### 堆 / 优先队列篇\n\n#### 1. 寻找第 k 大元素 [要求 Tc: O(nlogn) Sc:O(1)] (腾讯, 字节跳动, 阿里)\n\n[常见题型](https://leetcode-cn.com/explore/interview/card/top-interview-questions/266/heap-stack-queue/1154/)\n\n```js\n\n```\n\n### 二分查找篇\n\n#### 1. 查找给定值 [要求 Tc: O(logn) Sc:O(1)] (二分查找高频)\n\n[LeetCode 第 704 题](https://leetcode-cn.com/problems/binary-search/)\n\n```js\nfunction binarySearch(array, target) {\n    let left = 0;\n    let right = array.length - 1;\n    while (left <= right) {\n        const mid = (left + (right - left) / 2) | 0;\n        const middleValue = array[mid];\n        if (middleValue > target) {\n            right = mid - 1;\n        } else if (middleValue < target) {\n            left = mid + 1;\n        } else {\n            return mid;\n        }\n    }\n}\nconst index = binarySearch([1, 2, 3, 4], 2);\nconsole.log(index); // 1\n\n```\n\n#### 2. 查找最接近目标值的值 [要求 Tc: O(logn) Sc:O(1)]\n\n给定目标整数 T 和按升序排序的整数数组 A，找到 A 中的索引 i，以使 A [i] 最接近 T。\n\n假设条件:\n\n数组中可以有重复的元素，并且我们可以返回具有相同值的任何索引。\n\n例:\n\nA = [1,2,3]，T = 2，返回 1\n\nA =[1，4，6]，T = 3，返回 1\n\nA = [1，4，6]，T = 5，返回 1 或 2\n\nA = [1、3、3、4]，T = 2，返回 0 或 1 或 2\n\ncorner case:\n\n如果 A 为空或 A 为零长度怎么办？在这种情况下，我们应该返回 - 1。\n\n```js\nfunction binarySearch(array, target) {\n    if (array.length === 0) {\n        return -1;\n    }\n    let left = 0;\n    let right = array.length - 1;\n    while (left < right - 1) {\n        const mid = (left + (right - left) / 2) | 0;\n        const middleValue = array[mid];\n        if (middleValue === target) {\n            return mid;\n        } else if (middleValue < target) {\n            left = mid;\n        } else {\n            right = mid;\n        }\n    }\n    if (Math.abs(target - array[left]) >= Math.abs(target - array[right])) {\n        return right;\n    } else {\n        return left;\n    }\n}\nconst index = binarySearch([1, 2, 5, 6], 4);\nconsole.log(index); // 2\n\n```\n\n#### 3. 第一个出现的目标值 [要求 Tc: O(logn) Sc:O(1)] (二分查找高频)\n\n给定目标整数 T 和按升序排序的整数数组 A，请找到 A 中 T 首次出现的索引，如果没有这样的索引，则返回 - 1。\n\n假设条件\n\n数组中可以有重复的元素。\n\n例:\n\nA = [1,2,3]，T = 2，返回 1\n\nA = [1,2,3]，T = 4，返回 - 1\n\nA = [1,2,2,2,3]，T = 2，返回 1\n\ncorner case:\n\n如果 A 为零或长度为零的 A 怎么办？在这种情况下，我们应该返回 - 1。\n\n```js\nfunction binarySearch(array, target) {\n    if (array.length === 0) {\n        return -1;\n    }\n    let left = 0;\n    let right = array.length - 1;\n    while (left < right - 1) {\n        const mid = (left + (right - left) / 2) | 0;\n        const middleValue = array[mid];\n        if (middleValue === target) {\n            right = mid;\n        } else if (middleValue < target) {\n            left = mid + 1;\n        } else {\n            right = mid + 1;\n        }\n    }\n    return array[right] === target ? right : array[left] === target ? left : -1;\n}\nconsole.log(binarySearch([1,2,2,2,3], 2)); //1\n\n```\n\n#### 4. 查找最接近目标值的 k 个数 [要求 Tc: O(logn + k) Sc:O(1)]\n\n给定目标整数 T，非负整数 K 和按升序排序的整数数组 A，找到 A 中最接近 T 的 K 个数字。 如果存在平局，则始终首选较小的元素。\n\n假设条件:\n\nA 不为空 K 保证大于等于 0，K 保证小于等于 A.length 返回大小为 K 的整数数组，其中包含 A 中的 K 个最接近的数字（不是索引），并按数字和 T 之间的差值升序排列。\n\n例:\n\nA = [1，2，3]，T = 2，K = 3，返回 [2，1，3] 或[2，3，1]\n\nA = [1，4，6，8]，T = 3，K = 3，返回 [4，1，6]\n\n```js\nfunction binarySearch(array, target, k) {\n    if (array.length === 0) {\n        return -1;\n    }\n    let left = 0;\n    let right = array.length - 1;\n    while (left < right - 1) {\n        const mid = (left + (right - left) / 2) | 0;\n        const middleValue = array[mid];\n        if (middleValue === target) {\n            right = mid;\n        } else if (middleValue < target) {\n            left = mid;\n        } else {\n            right = mid;\n        }\n    }\n    // post-processing find the closest number\n    let closeIdx = 0;\n    if (Math.abs(array[left] - target) <= Math.abs(array[right] - target)) {\n    \tcloseIdx = left;\n    } else {\n    \tcloseIdx = right;\n    }\n    // These two should be the closest to target\n    let result = new Array(k);\n    let l = closeIdx;\n    let r = closeIdx + 1;\n    // this is a typical merge operation\n    for (let i = 0; i < k; i++) {\n    \t// we can advance the left pointer when:\n    \t// 1. right pointer is already out of bound\n    \t// 2. right pointer is not out of bound, left pointer is not out of bound and array[left] is closer to target.\n    \tif (r >= array.length) {//can be merged two conditions\n            result[i] = array[l--];\n    \t} else if (l < 0) {\n            result[i] = array[r++];\n    \t} else if (Math.abs(array[l] - target) <= Math.abs(array[r] - target)) {\n            result[i] = array[l--];\n    \t} else {\n            result[i] = array[r++];\n    \t}\n    }\n    return result;\n}\nconsole.log(binarySearch([1,4,6,8], 3, 3)); // [4，1，6]\n\n```\n\n#### 5. 有一个排序数组，返回第一个比目标数字小的数 (要求: Tc: O(logn) Sc:O(1)) (快手)\n\n### 动态规划篇\n\n#### 1. 斐波那契数列 (要求 Tc: O(n) Sc:O(n)/O(1)) (动态规划类超高频)\n\n[LeetCode 第 704 题](https://leetcode-cn.com/problems/fei-bo-na-qi-shu-lie-lcof/solution/mian-shi-ti-10-i-fei-bo-na-qi-shu-lie-dong-tai-gui/)\n\n```js\nvar fib = function(n) {\n    let a = 0, b = 1, sum;\n    for (let i = 0; i < n; i++) {\n        sum = a + b;\n        a = b;\n        b = sum;\n    }\n    return a;\n};\n\n```\n\n#### 2. 爬楼梯 (要求 Tc: O(n) Sc:O(n)/O(1)) (动态规划类超高频)\n\n[LeetCode 第 70 题](https://leetcode-cn.com/problems/climbing-stairs/)\n\n```js\nvar climbStairs = function(n) {\n    if (n === 1) {\n        return 1;\n    }\n    let dp = [];\n    dp[1] = 1;\n    dp[2] = 2;\n    for (let i = 3; i <= n; i++) {\n        dp[i] = dp[i - 1] + dp[i - 2];\n    }\n    return dp[n];\n};\n\n```\n\n### 递归篇\n\n#### 1. 岛屿数量 (要求 Tc: O(MN) Sc:O(MN)) (微信)\n\n[LeetCode 第 200 题](https://leetcode-cn.com/problems/number-of-islands/)\n\n```js\nlet dfs = function (grid, i, j) {\n  // 把当前项变为0, 防止重新查找\n  grid[i][j] = 0;     \n  // 当前项 上下左右检查\n  if (grid[i - 1] && grid[i - 1][j] == 1) dfs(grid, i - 1, j);  // 上\n  if (grid[i + 1] && grid[i + 1][j] == 1) dfs(grid, i + 1, j);  // 下\n  if (grid[i][j - 1] && grid[i][j - 1] == 1) dfs(grid, i, j - 1);  // 左\n  if (grid[i][j + 1] && grid[i][j + 1] == 1) dfs(grid, i, j + 1);  // 右\n}\nvar numIslands = function(grid) {\n  if (grid.length < 1) return 0;\n  let islands = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[0].length; j++) {\n      if (grid[i][j] == 1) {\n        islands++;             // 岛屿加1\n        dfs(grid, i, j);       // 寻找与当前项相邻的 1 并把它们变成0\n      }\n    }\n  }\n  return islands;\n};\n\n```\n\n#### 2. 从一个数组中找出 N 个数，其和为 M 的所有可能 (不能重复使用已经使用过的元素) (今日头条)\n\n[参考题解 1](https://blog.csdn.net/weixin_34130269/article/details/91382220)\n\n[参考题解 2](https://juejin.im/post/5e46425f51882549652d4580#heading-8)\n\n#### 3. 子集 (要求 Tc: O(N×2N) Sc:O(N×2N)) (腾讯)\n\n[LeetCode 第 78 题](https://leetcode-cn.com/problems/subsets/)\n\n```js\nvar subsets = function(nums) {\n    if (!nums.length) {\n        return [];\n    }\n    let solution = [];\n    let levelResult = [];\n    subsetsHelper(nums,0,levelResult,solution);\n    return solution;\n};\nfunction subsetsHelper(nums,level,lresult,solution) {\n    //base base\n    if (level === nums.length) {\n        solution.push([].concat(lresult));\n        return;\n    }\n    lresult.push(nums[level]);\n    subsetsHelper(nums, level + 1,lresult, solution);//回溯\n    lresult.pop();\n    subsetsHelper(nums, level + 1, lresult, solution);//回溯\n}\n\n```\n\n#### 5. 扁平化对象 (虾皮)\n\n> 输入:\n\n```js\n{\n  \"a\": {\n    \"b\": {\n      \"c\": {\n        \"d\": 1\n      }\n    }\n  },\n  \"aa\": 2,\n  \"c\": [\n    1,\n  ]\n} \n\n```\n\n> 要求输出:\n\n```js\n{ 'a.b.c.d': 1, aa: 2, 'c[0]': 1, 'c[1]': 2 }\n\n```\n\n```js\nfunction convert(obj) {\n  let str = '', res = {};\n  const inner = (obj) => {\n    const keys = Object.keys(obj);\n    keys.forEach((item) => {\n      const type = Object.prototype.toString.call(obj[item]).slice(8, -1);\n      if (type === 'Object') {\n        str += item + '.';\n        inner(obj[item], str, res);\n      } else if (type === 'Array') {\n        obj[item].forEach((items, index) => {\n          const key = `${item}[${index}]`;\n          res[key] = items;\n        });\n      } else {\n        str += item;\n        res[str] = obj[item];\n        str = '';\n      }\n    });\n    return res;\n  };\n  return inner(obj);\n}\n\nconsole.log(convert(obj));\n\n```\n\n#### 6. 归类 (天猫)\n\n```js\n输入:\n\nconst industry_list = [\n  {\n    \"parent_ind\": \"女装\",\n    \"name\": \"连衣裙\"\n  },\n  {\n    \"name\": \"女装\"\n  },\n  {\n    \"parent_ind\": \"女装\",\n    \"name\": \"半身裙\"\n  },\n  {\n    \"parent_ind\": \"女装\",\n    \"name\": \"A字裙\"\n  },\n  {\n    \"name\": \"数码\"\n  },\n  {\n    \"parent_ind\": \"数码\",\n    \"name\": \"电脑配件\"\n  },\n  {\n    \"parent_ind\": \"电脑配件\",\n    \"name\": \"内存\"\n  },\n];\n> 输出:\n/*\n{\n  \"数码\": {\n    \"电脑配件\": {\n        \"内存\" : {}\n     }\n  },\n  \"女装\" : {\n     \"连衣裙\": {},\n    \"半身裙\": {},\n    \"A字裙\": {}\n  }\n}\n*/\nfunction convert_format(data) {\n  const res = {};\n  const map = data.reduce((res, v) => (res[v.name] = v, res), {});\n  console.log(map);\n  for (const item of data) {\n    if (!item.parent_ind) {\n      res[item.name] = {};\n    }\n  }\n  for (const item of data) {\n    if (item.parent_ind in map) {\n      if (map[item.parent_ind].parent_ind) {\n        const path = dfs(item.name);\n        let re = res[path[0]];\n        for (let i = 1; i < path.length; i++) {\n          if (i === path.length - 1) {\n            re[path[i]] = {};\n          } else {\n            re = re[path[i]];\n          }\n        }\n      } else {\n        res[item.parent_ind][item.name] = {};\n      }\n    }\n  }\n  return res;\n\n\n  function dfs(name) {\n    let path = [];\n    const inner = (name, path) => {\n      path.unshift(name);\n      if (!map[name].parent_ind) {\n        return;\n      }\n      inner(map[name].parent_ind, path);\n    };\n    inner(name, path);\n    return path;\n  }\n}\n\n\nconst result = convert_format(industry_list);\nconsole.log(result);\n\n```\n\n### 排序篇\n\n#### 1. 快速排序 (要求 Tc: O(nlogn) Sc:O(nlogn)) (排序类超高频)\n\n```js\nfunction quickSort(array) {\n    if (array === null || array.length === 0) {\n        return array;\n    }\n    doQuickSort(array, 0, array.length - 1);\n    return array;\n}\nfunction doQuickSort(array,left,right) {\n    if (left >= right) {\n        return;\n    }\n    let pivotPos = partition(array,left,right);\n    doQuickSort(array,left, pivotPos - 1);\n    doQuickSort(array,pivotPos + 1, right);\n}\nfunction partition(array,left,right) {\n        let pivotIdx = (left + Math.random() * (right - left + 1)) | 0;\n\tlet pivot = array[pivotIdx];\n\t// swap pivot 元素到最右边的位置\n\tswap(array, right, pivotIdx);\n\n\tlet leftBound = left;\n\tlet rightBound = right - 1;\n\n\twhile (leftBound <= rightBound) {\n        \t// [0,leftBound),(rightBound,right-1]是已探索区域，[leftBound+1,rightBound-1]是未探索区域。\n        \t// 当 leftBound == rightBound时, 索引不需要检查了\n        \tif (array[leftBound] < pivot) {\n        \t\tleftBound++;\n        \t} else if (array[rightBound] >= pivot) {\n        \t\trightBound--;\n        \t} else {\n        \t\tswap(array, leftBound, rightBound);\n        \t\tleftBound++;\n        \t\trightBound--;\n        \t}\n\t} // leftBound == rightBound + 1\n\t// swap 回 pivot元素到中间的位置\n\tswap(array, leftBound, right);\n\treturn leftBound;\n}\nfunction swap(array, i, j) {\n    let tmp = array[i];\n    array[i] = array[j];\n    array[j] = tmp;\n}\n\n```\n\n#### 2. 归并排序 (要求 Tc: O(nlogn) Sc:O(n))\n\n```js\nfunction mergeSort(array) {\n    if (array.length > 1) {\n        const length = array.length;\n        const mid = Math.floor(length / 2);\n        const left = mergeSort(array.slice(0,mid));\n        const right = mergeSort(array.slice(mid,length));\n        array = merge(left,right);\n    }\n    return array;\n}\nfunction merge(left,right) {\n    let i = 0,j = 0;\n    const result = [];\n    while (i < left.length && j < right.length) {\n        result.push(left[i] > right[j] ? left[i++] : right[j++]);\n    }\n    return result.concat(i < left.length ? left.slice(i) : right.slice(j));\n}\n\n```\n\n#### 3. 插入排序 (要求 Tc: O(n²) Sc:O(1))\n\n```js\nfunction insertionSort(array) {\n    for (let i = 1; i < array.length; i++) {\n        let j = i;\n        temp = array[i];\n        while (j > 0 && array[j - 1] > temp) {\n            array[j] = array[j - 1];\n            j--;\n        }\n        array[j] = temp;\n    }\n    return array;\n}\n\n```\n\n[LeetCode 第 912 题](https://leetcode-cn.com/problems/sort-an-array/)\n\n结语\n--\n\n以上题目均为精选高频题，希望对大家有帮助.\n\n\n\n 原文地址 https://juejin.im/post/5e9d4eaa51882573834edfb5","slug":"算法高频问题","published":1,"updated":"2020-05-26T06:18:22.000Z","comments":1,"photos":[],"link":"","_id":"ckbftlm7p00327w2p21k4dbjw","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>文中所有题目均为精心挑选过的超高频题目，所以大家可以收藏起来</p>\n<h2 id=\"适用人群\"><a href=\"#适用人群\" class=\"headerlink\" title=\"适用人群\"></a>适用人群</h2><p>针对有一定数据结构基础 (了解链表, 二叉树, 二叉堆, 递归) 的基本概念, 并对时间空间复杂度有基本认知的。</p>\n<h2 id=\"食用指南\"><a href=\"#食用指南\" class=\"headerlink\" title=\"食用指南\"></a>食用指南</h2><p>将文中列出的每道题至少手写 3 遍</p>\n<p>面试前可以按照本文整理出来的题目直接过一遍</p>\n<a id=\"more\"></a>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>文章更新频率: 除休息日外, 每天在题目下方更新一道题的题解</p>\n<p>有 LeetCode 原题的将贴上原地址，不在文章内做题目描述</p>\n<blockquote>\n<p>Tc: Time complexity (时间复杂度)</p>\n</blockquote>\n<blockquote>\n<p>Sc: Space complexity (空间复杂度)</p>\n</blockquote>\n<h2 id=\"题目类型\"><a href=\"#题目类型\" class=\"headerlink\" title=\"题目类型\"></a>题目类型</h2><h3 id=\"数组篇\"><a href=\"#数组篇\" class=\"headerlink\" title=\"数组篇\"></a>数组篇</h3><h4 id=\"1-twoSum-要求-Tc-O-n-Sc-O-n-字节跳动\"><a href=\"#1-twoSum-要求-Tc-O-n-Sc-O-n-字节跳动\" class=\"headerlink\" title=\"1.twoSum [要求 Tc: O(n) Sc:O(n)] (字节跳动)\"></a>1.twoSum [要求 Tc: O(n) Sc:O(n)] (字节跳动)</h4><p><a href=\"https://leetcode-cn.com/problems/two-sum/\" target=\"_blank\" rel=\"noopener\">LeetCode 第 1 题</a></p>\n<p>按照题目要求, 我们第一时间想到的会是两层循环暴力解法：</p>\n<p><strong>解法 1：Time = O(n²), Space = O(1)</strong></p>\n<p>思路: 遍历每个元素 nums[j]，并查找是否存在一个值与 target - nums[j] 相等的目标元素。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">twoSum</span>(<span class=\"params\">nums, target</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = i + <span class=\"number\">1</span>; j &lt; nums.length; j++) &#123;</span><br><span class=\"line\">             <span class=\"keyword\">if</span> (nums[j] == target - nums[i]) &#123;</span><br><span class=\"line\">                 <span class=\"keyword\">return</span> [i,j];</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>解法 2:Time = O(n), Space = O(n)</strong>：</p>\n<p>我们可以通过哈希表空间换时间。在进行迭代并将元素插入到表中的同时，我们回过头来检查哈希表中是否已经存在当前元素所对应的目标元素，如果存在，那我们就找到了问题的解，将其返回即可.(时间复杂度为 O(n), 空间复杂度也为 O(n))</p>\n<p>符合题目要求 bingo✌</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> twoSum = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums, target</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> reduceHash = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> reduceResult = target - nums[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (reduceHash[reduceResult] !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> [reduceHash[reduceResult], i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        reduceHash[nums[i]] = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-缺失的数字-要求-Tc-O-n-Sc-O-n-字节跳动\"><a href=\"#2-缺失的数字-要求-Tc-O-n-Sc-O-n-字节跳动\" class=\"headerlink\" title=\"2. 缺失的数字 [要求 Tc: O(n) Sc:O(n)] (字节跳动)\"></a>2. 缺失的数字 [要求 Tc: O(n) Sc:O(n)] (字节跳动)</h4><p><a href=\"https://leetcode-cn.com/problems/que-shi-de-shu-zi-lcof/\" target=\"_blank\" rel=\"noopener\">剑指 Offer 第 53 题</a></p>\n<p><strong>解法：</strong></p>\n<p>思路: 我们先把所有输入了的数字存入 hash 表, 因为给定的数组是有序的，所以可以再过一遍 hash 表，遍历过程中如果某个数字在 hash 表中不存在，则该数字就是缺失的那个数字</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> missingNumber = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> hash = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        hash[nums[i]] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> expectedNumCount = nums.length + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; expectedNumCount; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!hash[i]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(missingNumber([<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>]));<span class=\"comment\">//3</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-移动零-要求-Tc-O-n-Sc-O-1-移动后不能改变原来其他元素的相对位置-二线公司\"><a href=\"#3-移动零-要求-Tc-O-n-Sc-O-1-移动后不能改变原来其他元素的相对位置-二线公司\" class=\"headerlink\" title=\"3. 移动零 [要求 Tc: O(n) Sc:O(1), 移动后不能改变原来其他元素的相对位置] (二线公司)\"></a>3. 移动零 [要求 Tc: O(n) Sc:O(1), 移动后不能改变原来其他元素的相对位置] (二线公司)</h4><p><a href=\"https://leetcode-cn.com/problems/move-zeroes/\" target=\"_blank\" rel=\"noopener\">LeetCode 第 283 题</a></p>\n<p><strong>解法：</strong></p>\n<p><strong>思路:</strong> 双指针同向而行, fast 指针遇到非 0 就把 slow 指针位置的字符替换掉，slow 指针前进一步。直到 fast 指针把数组所有元素遍历完毕。(典型的两个挡板，三个区域思想), 再把 slow 指针后面的所有元素替换为 0。</p>\n<p>同向性质:</p>\n<p><strong>变量的物理意义:</strong> slow 的左侧不包含 slow 都是非 0 的数字，slow 的右侧包含 slow 都应该为 0，按照这个物理意义就可以达到原地算法的要求。因为快慢指针是同向而行的，所以算法为稳定算法 (不会影响元素的相对位置)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> moveZeroes = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> slow = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> fast = <span class=\"number\">0</span>; fast &lt; nums.length; fast++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[fast] !== <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            nums[slow++] = nums[fast];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (slow &lt; nums.length) &#123;</span><br><span class=\"line\">        nums[slow++] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> input = [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">8</span>,<span class=\"number\">4</span>,<span class=\"number\">3</span>,<span class=\"number\">0</span>,<span class=\"number\">5</span>,<span class=\"number\">0</span>];</span><br><span class=\"line\">moveZeroes(input);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(input);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-洗牌算法-乱序数组-要求-Tc-O-n-Sc-O-1-要求每个元素的打乱的概率相同-快手\"><a href=\"#4-洗牌算法-乱序数组-要求-Tc-O-n-Sc-O-1-要求每个元素的打乱的概率相同-快手\" class=\"headerlink\" title=\"4. 洗牌算法 (乱序数组)[要求 Tc: O(n) Sc:O(1), 要求每个元素的打乱的概率相同] (快手)\"></a>4. 洗牌算法 (乱序数组)[要求 Tc: O(n) Sc:O(1), 要求每个元素的打乱的概率相同] (快手)</h4><p><a href=\"https://leetcode-cn.com/problems/shuffle-an-array/\" target=\"_blank\" rel=\"noopener\">LeetCode 第 384 题</a></p>\n<p><strong>解法:</strong></p>\n<p><strong>思路:</strong> 本题思路就是使用 Fisher-Yates 洗牌算法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">shuffle</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> m = arr.length;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (m) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> random = (<span class=\"built_in\">Math</span>.random() * m--) | <span class=\"number\">0</span>;</span><br><span class=\"line\">        [arr[random],arr[m]] = [arr[m],arr[random]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(shuffle([<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">6</span>]));</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-两个数组的交集-要求-Tc-O-n-Sc-O-n-阿里\"><a href=\"#5-两个数组的交集-要求-Tc-O-n-Sc-O-n-阿里\" class=\"headerlink\" title=\"5. 两个数组的交集 [要求 Tc: O(n) Sc:O(n)] (阿里)\"></a>5. 两个数组的交集 [要求 Tc: O(n) Sc:O(n)] (阿里)</h4><p><a href=\"https://leetcode-cn.com/problems/intersection-of-two-arrays/\" target=\"_blank\" rel=\"noopener\">LeetCode 第 349 题</a></p>\n<p><strong>解法:</strong></p>\n<p><strong>思路:</strong> 本题思路是看 nums1 数组里是否含有 nums2 的元素，如果有就添加到结果中返回。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> res = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; nums1.length; i++) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">const</span> cur = nums1[i];</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (nums2.includes(cur)) &#123;</span><br><span class=\"line\">       res.push(cur);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.from(<span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(res));</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"6-RainbowSort-要求-Tc-O-n-Sc-O-1-盛大\"><a href=\"#6-RainbowSort-要求-Tc-O-n-Sc-O-1-盛大\" class=\"headerlink\" title=\"6.RainbowSort [要求 Tc: O(n) Sc:O(1)] (盛大)\"></a>6.RainbowSort [要求 Tc: O(n) Sc:O(1)] (盛大)</h4><p>给定一系列球，其中球的颜色只能是红色，黄色或蓝色，对球进行排序，以使所有红色球都分组在左侧，所有黄色球都分组在中间，所有蓝色球分组在右侧。</p>\n<p>例：</p>\n<blockquote>\n<p>[红] 被排序为 [红]</p>\n</blockquote>\n<blockquote>\n<p>[黄，红] 被排序为 [红，黄]</p>\n</blockquote>\n<blockquote>\n<p>[黄, 红, 红, 蓝, 黄, 红, 蓝] 被排序为 [红, 红, 红, 黄, 黄, 蓝, 蓝]</p>\n</blockquote>\n<p>假设条件:</p>\n<blockquote>\n<p>输入数组不为 null。</p>\n</blockquote>\n<p>corner case:</p>\n<p>如果输入数组的长度为零怎么办？在这种情况下，我们应该直接返回空数组。</p>\n<p><strong>解法：</strong></p>\n<p><strong>思路:</strong> 本题思路是挡板思想, 使用三个挡板四个区域的思想进行划分 (交换数组元素位置)</p>\n<p><strong>挡板的物理意义: [0-i) 全是红色,[i,j) 之间为黄色,(k-&gt;n-1] 全为蓝色，[j-k] 为未知探索区域</strong></p>\n<p>j 为快指针</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> input = [<span class=\"string\">'黄'</span>,<span class=\"string\">'红'</span>,<span class=\"string\">'红'</span>,<span class=\"string\">'蓝'</span>,<span class=\"string\">'黄'</span>,<span class=\"string\">'红'</span>,<span class=\"string\">'蓝'</span>]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">rainbowSort</span>(<span class=\"params\">rainbow</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>, k = rainbow.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (j &lt;= k) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rainbow[j] === <span class=\"string\">'红'</span>) &#123;</span><br><span class=\"line\">            swap(rainbow,i,j);</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">            j++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rainbow[j] === <span class=\"string\">'黄'</span>) &#123;</span><br><span class=\"line\">            j++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rainbow[j] === <span class=\"string\">'蓝'</span>) &#123;</span><br><span class=\"line\">            swap(rainbow, j, k); <span class=\"comment\">//这里不写j++是因为从k交换过来的元素不能保证就是黄色,为了安全起见下次循环再检查一次j位置。</span></span><br><span class=\"line\">            k--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//辅助交换函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">swap</span>(<span class=\"params\">arr,i,j</span>) </span>&#123;</span><br><span class=\"line\">    [arr[i],arr[j]] = [arr[j],arr[i]]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">rainbowSort(input);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(input);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"7-移除元素-要求-Tc-O-n-Sc-O-1\"><a href=\"#7-移除元素-要求-Tc-O-n-Sc-O-1\" class=\"headerlink\" title=\"7. 移除元素 [要求 Tc: O(n) Sc:O(1)]\"></a>7. 移除元素 [要求 Tc: O(n) Sc:O(1)]</h4><p><a href=\"https://leetcode-cn.com/problems/remove-element/\" target=\"_blank\" rel=\"noopener\">LeetCode 第 27 题</a></p>\n<p><strong>解法：</strong></p>\n<p><strong>思路:</strong> 双指针同向而行, 快指针遇到非 val 就把 slow 指针位置的字符替换掉，slow 指针前进，直到数组所有元素遍历完毕。(典型的两个挡板，三个区域思想)</p>\n<p><strong>变量的物理意义:</strong> slow 的左侧不包含 slow 都是非 val 的元素，slow 的右侧包含 slow 都应该为不包含 val 的元素，按照这个物理意义就可以达到原地算法的要求。因为快慢指针是同向而行的，所以算法为稳定算法 (不会影响元素的相对位置)</p>\n<p><strong>挡板性质:</strong></p>\n<p><strong>同向而行:</strong> slow 指针左边是处理好的元素 fast 指针右边是未知探索区域, 两个挡板中间不关注 (最后的结果不会改变元素相对位置)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> removeElement = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums, val</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> slow = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> fast = <span class=\"number\">0</span>; fast &lt; nums.length; fast++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[fast] !== val) &#123;</span><br><span class=\"line\">         nums[slow++] = nums[fast];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> slow; <span class=\"comment\">//想要拿到去除后的数组可以: nums.slice(0,slow);</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"8-按奇偶排序数组-要求-Tc-O-n-Sc-O-1-腾讯\"><a href=\"#8-按奇偶排序数组-要求-Tc-O-n-Sc-O-1-腾讯\" class=\"headerlink\" title=\"8. 按奇偶排序数组 [要求 Tc: O(n) Sc:O(1)] (腾讯)\"></a>8. 按奇偶排序数组 [要求 Tc: O(n) Sc:O(1)] (腾讯)</h4><p><a href=\"https://leetcode-cn.com/problems/sort-array-by-parity/\" target=\"_blank\" rel=\"noopener\">LeetCode 第 905 题</a></p>\n<p><strong>解法：</strong></p>\n<p><strong>思路:</strong> 继续使用挡板思想, 两个挡板三个区域, 同向而行,[0-i) 是偶数,[j-n-1] 是未探索区域</p>\n<p><strong>挡板性质:</strong></p>\n<p><strong>同向而行:</strong> slow 指针左边是处理好的元素 fast 指针右边是未知探索区域, 两个挡板中间不关注 (最后的结果不会改变元素相对位置)</p>\n<p><strong>解法 1:(不改变元素相对位置: 同向而行)</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> sortArrayByParity = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">A</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>; j &lt; A.length; j++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (A[j] % <span class=\"number\">2</span> === <span class=\"number\">0</span>) swap(A, i++, j);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> A;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">swap</span>(<span class=\"params\">arr,l,r</span>) </span>&#123;</span><br><span class=\"line\">    [arr[l],arr[r]] = [arr[r],arr[l]];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sortArrayByParity([<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>]));</span><br></pre></td></tr></table></figure>\n\n<p><strong>挡板性质:</strong></p>\n<p><strong>相向而行:</strong> left 指针左边是处理好的元素, right 指针右边也是处理好的元素, 两个挡板中间是未处理区域 (最后的结果可能会改变元素相对位置)</p>\n<p><strong>解法 2:(改变元素相对位置: 相向而行)</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> sortArrayByParityII = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">A</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, j = A.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt;= j) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (A[i] % <span class=\"number\">2</span> === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">           i++;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (A[j] % <span class=\"number\">2</span> !== <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">           j--;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">//i % 2 !== 0 &amp;&amp; j % 2 === 0</span></span><br><span class=\"line\">            swap(A,i,j);</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">            j--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> A;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">swap</span>(<span class=\"params\">arr, l, r</span>) </span>&#123;</span><br><span class=\"line\">    [arr[l], arr[r]] = [arr[r], arr[l]];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sortArrayByParityII([<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>]));</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"9-数组中出现次数超过一半的数字-要求-Tc-O-n-Sc-O-1\"><a href=\"#9-数组中出现次数超过一半的数字-要求-Tc-O-n-Sc-O-1\" class=\"headerlink\" title=\"9. 数组中出现次数超过一半的数字 [要求 Tc: O(n) Sc:O(1)]\"></a>9. 数组中出现次数超过一半的数字 [要求 Tc: O(n) Sc:O(1)]</h4><p><a href=\"https://leetcode-cn.com/problems/majority-element/\" target=\"_blank\" rel=\"noopener\">LeetCode 第 169 题</a></p>\n<p><strong>思路:</strong> 这道题属于火拼问题, 见一个 sha 一个 (抵消), 最后留下的就是超过一半的元素。</p>\n<p>先保留第一个元素，接着遍历，如果遇到和他相同的则加次数，否则就减次数，如果次数为 0 了就要换另一个元素了。</p>\n<p>比如: A B C A</p>\n<p>第一次保留 A, 用 A 跟剩下的打架，碰到不是 A 的就把 A 的个数减 1，如果遇到 A 就增加个数，直到遇到不同的元素把 A 的次数抵消完就把 A 踢下去, 并且把次数重新设置为 1。</p>\n<p>如此下去最后肯定有个多出来的就是题解了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> majorityElement = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> count = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> num = array[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt; array.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (num !== array[i]) &#123;</span><br><span class=\"line\">            count--;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (count === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                num = array[i];</span><br><span class=\"line\">                count = <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            count++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> halfValue = majorityElement([<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(halfValue); <span class=\"comment\">//1</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"10-合并两个有序数组-要求-Tc-O-m-n-Sc-O-n-腾讯\"><a href=\"#10-合并两个有序数组-要求-Tc-O-m-n-Sc-O-n-腾讯\" class=\"headerlink\" title=\"10. 合并两个有序数组 [要求 Tc: O(m + n) Sc:O(n)] (腾讯)\"></a>10. 合并两个有序数组 [要求 Tc: O(m + n) Sc:O(n)] (腾讯)</h4><p>例:</p>\n<blockquote>\n<p>输入: nums1 = [1,3], nums2 = [4,5,7]</p>\n</blockquote>\n<blockquote>\n<p>输出: [1,3,4,5,7]</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">merge</span>(<span class=\"params\">left, right</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = [];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt; left.length &amp;&amp; j &lt; right.length) &#123;</span><br><span class=\"line\">        result.push(left[i] &lt; right[j] ? left[i++] : right[j++]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt; left.length) &#123;</span><br><span class=\"line\">        result.push(left[i++]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (j &lt; right.length) &#123;</span><br><span class=\"line\">        result.push(right[j++]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> merged = merge([<span class=\"number\">1</span>,<span class=\"number\">3</span>],[<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>]);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(merged);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"11-有序数组中小于某个数的个数-要求-Tc-O-logn-Sc-O-1-今日头条\"><a href=\"#11-有序数组中小于某个数的个数-要求-Tc-O-logn-Sc-O-1-今日头条\" class=\"headerlink\" title=\"11. 有序数组中小于某个数的个数 [要求 Tc: O(logn) Sc:O(1)] (今日头条)\"></a>11. 有序数组中小于某个数的个数 [要求 Tc: O(logn) Sc:O(1)] (今日头条)</h4><p>例:</p>\n<blockquote>\n<p>输入:[1, 2, 3, 4]</p>\n</blockquote>\n<blockquote>\n<p>输入目标值: 2</p>\n</blockquote>\n<blockquote>\n<p>输出: 1</p>\n</blockquote>\n<p><strong>思路:</strong> 题目提到有序数组，第一时间就应该想到二分 (再加之复杂度要求 logn 级别)。其实这道题就是让写个二分查找, 仔细想想，你要找的那个数的下标不就代表前面有几个比他小的数字吗？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">binarySearch</span>(<span class=\"params\">array, target</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> low = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> high = array.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (low &lt;= high) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> mid = (low + (high - low) / <span class=\"number\">2</span>) | <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> middleValue = array[mid];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (middleValue &gt; target) &#123;</span><br><span class=\"line\">            high = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (middleValue &lt; target) &#123;</span><br><span class=\"line\">            low = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> minCount = binarySearch([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>], <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(minCount); <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"12-数组去重-要求-Tc-O-n-Sc-O-1\"><a href=\"#12-数组去重-要求-Tc-O-n-Sc-O-1\" class=\"headerlink\" title=\"12. 数组去重 [要求 Tc: O(n) Sc:O(1)]\"></a>12. 数组去重 [要求 Tc: O(n) Sc:O(1)]</h4><p><a href=\"https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/\" target=\"_blank\" rel=\"noopener\">LeetCode 第 26 题</a></p>\n<p>该算法要求原地算法，所以继续使用挡板思想 (没理解的可以回到上文提及处继续理解)。</p>\n<p>因为他至少有一个元素是不会重复的 (至少会保留一个元素)，所以从下标 1 开始处理。</p>\n<p><strong>解法 1:</strong> 从索引 1 开始 (处理好的元素不包含 slow 位置)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> removeDuplicates = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> slow = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> fast = <span class=\"number\">1</span>; fast &lt; arr.length; fast++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arr[fast] === arr[slow - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        arr[slow++] = arr[fast];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> slow; <span class=\"comment\">//想要拿到去除后的数组可以: arr.slice(0, slow);</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>解法 2:</strong> 从索引 0 开始,(处理好的元素包含 slow 位置)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> removeDuplicates = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> slow = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> fast = <span class=\"number\">1</span>; fast &lt; arr.length; fast++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arr[fast] === arr[slow]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        arr[++slow] = arr[fast];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> slow + <span class=\"number\">1</span>; <span class=\"comment\">//想要拿到去除后的数组可以: arr.slice(0, slow + 1);</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"13-去掉连续的-a-和-c-保留所有-b-要求-Tc-O-n-Sc-O-1-元素相对位置不变-字节跳动\"><a href=\"#13-去掉连续的-a-和-c-保留所有-b-要求-Tc-O-n-Sc-O-1-元素相对位置不变-字节跳动\" class=\"headerlink\" title=\"13. 去掉连续的 a 和 c, 保留所有 b [要求 Tc: O(n) Sc:O(1) 元素相对位置不变] (字节跳动)\"></a>13. 去掉连续的 a 和 c, 保留所有 b [要求 Tc: O(n) Sc:O(1) 元素相对位置不变] (字节跳动)</h4><p><strong>思路:</strong> 还是使用快慢指针, 同向而行</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">removeAC</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> slow = <span class=\"number\">0</span>,fast = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (fast &lt; arr.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arr[fast] === <span class=\"string\">'b'</span>) &#123;</span><br><span class=\"line\">            arr[slow++] = arr[fast++];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> begin = fast;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (fast &lt; arr.length &amp;&amp; arr[fast + <span class=\"number\">1</span>] === arr[begin]) &#123;</span><br><span class=\"line\">                fast++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fast - begin === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                arr[slow++] = arr[fast++];</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                fast++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr.slice(<span class=\"number\">0</span>,slow).join(<span class=\"string\">''</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> result = j1([<span class=\"string\">'a'</span>,<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>,<span class=\"string\">'c'</span>]);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);<span class=\"comment\">//bcb</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"14-最长公共前缀-拼多多\"><a href=\"#14-最长公共前缀-拼多多\" class=\"headerlink\" title=\"14. 最长公共前缀 (拼多多)\"></a>14. 最长公共前缀 (拼多多)</h4><blockquote>\n<p>例: [‘aaafsd’, ‘aawwewer’, ‘aaddfff’] =&gt; ‘aa’</p>\n</blockquote>\n<p><a href=\"https://leetcode-cn.com/problems/longest-common-prefix/\" target=\"_blank\" rel=\"noopener\">LeetCode 第 14 题</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">LCP</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!arr.length) &#123;   </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">''</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> ans = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> j = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (;j &lt; ans.length &amp;&amp; j &lt; arr[i].length; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ans[j] !== arr[i][j]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ans = ans.substr(<span class=\"number\">0</span>,j);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ans === <span class=\"string\">\"\"</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> result = LCP([<span class=\"string\">'aaafsd'</span>, <span class=\"string\">'aawwewer'</span>, <span class=\"string\">'aaddfff'</span>]);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"15-给定一个整数数组-a，其中-1-≤-a-i-≤-n-（n-为数组长度）-其中有些元素出现两次而其他元素出现一次-找到所有出现两次的元素-要求-Tc-O-n-Sc-O-1-字节跳动\"><a href=\"#15-给定一个整数数组-a，其中-1-≤-a-i-≤-n-（n-为数组长度）-其中有些元素出现两次而其他元素出现一次-找到所有出现两次的元素-要求-Tc-O-n-Sc-O-1-字节跳动\" class=\"headerlink\" title=\"15. 给定一个整数数组 a，其中 1 ≤ a[i] ≤ n （n 为数组长度）, 其中有些元素出现两次而其他元素出现一次, 找到所有出现两次的元素 [要求 Tc: O(n) Sc:O(1)] (字节跳动)\"></a>15. 给定一个整数数组 a，其中 1 ≤ a[i] ≤ n （n 为数组长度）, 其中有些元素出现两次而其他元素出现一次, 找到所有出现两次的元素 [要求 Tc: O(n) Sc:O(1)] (字节跳动)</h4><blockquote>\n<p>例: 输入: [4,3,2,7,8,2,3,1] 输出: [2,3]</p>\n</blockquote>\n<p>解：<strong>目前没有思路</strong></p>\n<h4 id=\"16-数组中所有元素组成的最大数是多少-作业帮\"><a href=\"#16-数组中所有元素组成的最大数是多少-作业帮\" class=\"headerlink\" title=\"16. 数组中所有元素组成的最大数是多少 (作业帮)\"></a>16. 数组中所有元素组成的最大数是多少 (作业帮)</h4><blockquote>\n<p>例: [50, 2, 5, 9] =&gt; 95502</p>\n</blockquote>\n<p><strong>思路:</strong> 我们把最大的数字依次排序肯定就是最大数 (降序排列)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> largestNumber = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    nums = nums.sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> S1 = <span class=\"string\">`<span class=\"subst\">$&#123;a&#125;</span><span class=\"subst\">$&#123;b&#125;</span>`</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> S2 = <span class=\"string\">`<span class=\"subst\">$&#123;b&#125;</span><span class=\"subst\">$&#123;a&#125;</span>`</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> S2 - S1;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nums[<span class=\"number\">0</span>] ? nums.join(<span class=\"string\">''</span>) : <span class=\"string\">'0'</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://leetcode-cn.com/problems/largest-number\" target=\"_blank\" rel=\"noopener\">LeetCode 第 179 题</a></p>\n<h3 id=\"字符串篇\"><a href=\"#字符串篇\" class=\"headerlink\" title=\"字符串篇\"></a>字符串篇</h3><h4 id=\"1-回文数-要求-Tc-O-log10n-Sc-O-1-或-Tc-O-n-Sc-O-1-腾讯\"><a href=\"#1-回文数-要求-Tc-O-log10n-Sc-O-1-或-Tc-O-n-Sc-O-1-腾讯\" class=\"headerlink\" title=\"1. 回文数 [要求 Tc: O(log10n) Sc:O(1) 或 Tc: O(n) Sc:O(1)] (腾讯)\"></a>1. 回文数 [要求 Tc: O(log10n) Sc:O(1) 或 Tc: O(n) Sc:O(1)] (腾讯)</h4><p><a href=\"https://leetcode-cn.com/problems/palindrome-number/\" target=\"_blank\" rel=\"noopener\">LeetCode 第 9 题</a></p>\n<p><strong>思路:</strong> 使用双指针一个在前，一个在后, 前后对比。遇到两个指针不同就返回 false。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">palindrome</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, j = x.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt;= j) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x[i] !== x[j]) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">           i++;</span><br><span class=\"line\">           j--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> result = palindrome(<span class=\"string\">'lol'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-反转字符串-要求-Tc-O-n-Sc-O-1\"><a href=\"#2-反转字符串-要求-Tc-O-n-Sc-O-1\" class=\"headerlink\" title=\"2. 反转字符串 [要求 Tc: O(n) Sc:O(1)]\"></a>2. 反转字符串 [要求 Tc: O(n) Sc:O(1)]</h4><p><a href=\"https://leetcode-cn.com/problems/reverse-string/\" target=\"_blank\" rel=\"noopener\">LeetCode 第 344 题</a></p>\n<p><strong>思路:</strong> 使用双指针一个在前，一个在后, 每次都交换即可</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reverseString = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> slow = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> fast = s.length - <span class=\"number\">1</span>, slow = <span class=\"number\">0</span>; fast &gt;= slow; fast--) &#123;</span><br><span class=\"line\">        swap(s, slow++, fast);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">swap</span>(<span class=\"params\">arr, l, r</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> temp = arr[l];</span><br><span class=\"line\">    arr[l] = arr[r];</span><br><span class=\"line\">    arr[r] = temp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-翻转单词顺序-要求-Tc-O-n-Sc-O-n-字节跳动\"><a href=\"#3-翻转单词顺序-要求-Tc-O-n-Sc-O-n-字节跳动\" class=\"headerlink\" title=\"3. 翻转单词顺序 [要求 Tc: O(n) Sc:O(n)] (字节跳动)\"></a>3. 翻转单词顺序 [要求 Tc: O(n) Sc:O(n)] (字节跳动)</h4><p><a href=\"https://leetcode-cn.com/problems/fan-zhuan-dan-ci-shun-xu-lcof/\" target=\"_blank\" rel=\"noopener\">剑指 Offer 第 58 题</a></p>\n<p><strong>思路:</strong> 将字符串按空格分割, 然后按照上题的方法交换单词顺序即可。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reverseWords = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> strArr = s.split(<span class=\"string\">' '</span>).filter(<span class=\"built_in\">Boolean</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> reversed = strArr;</span><br><span class=\"line\">    reverse(reversed, <span class=\"number\">0</span>, reversed.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> reversed.join(<span class=\"string\">' '</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reverse</span>(<span class=\"params\">input, left, right</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (left &gt;= right) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    swap(input, left, right);</span><br><span class=\"line\">    reverse(input, left + <span class=\"number\">1</span>, right <span class=\"number\">-1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">swap</span>(<span class=\"params\">arr, l, r</span>) </span>&#123;</span><br><span class=\"line\">    [arr[l],arr[r]] = [arr[r],arr[l]];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-有效的字母异位词-Anagram-要求-Tc-O-n-Sc-O-n\"><a href=\"#4-有效的字母异位词-Anagram-要求-Tc-O-n-Sc-O-n\" class=\"headerlink\" title=\"4. 有效的字母异位词 (Anagram) [要求 Tc: O(n) Sc:O(n)]\"></a>4. 有效的字母异位词 (Anagram) [要求 Tc: O(n) Sc:O(n)]</h4><p><a href=\"https://leetcode-cn.com/problems/valid-anagram/\" target=\"_blank\" rel=\"noopener\">LeetCode 第 242 题</a></p>\n<p><strong>思路:</strong> 我们可以使用 hash 存储每个单词出现的次数，再用另一个字符串遍历一次进行减减操作，只要次数有不等于 0 的字母则返回 false</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> isAnagram = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s, t</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s.length !== t.length) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> item <span class=\"keyword\">of</span> s) &#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span> (map.get(item)) &#123;</span><br><span class=\"line\">            map.set(item, map.get(item) + <span class=\"number\">1</span>);</span><br><span class=\"line\">    \t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            map.set(item, <span class=\"number\">1</span>);</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> item <span class=\"keyword\">of</span> t) &#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span> (map.get(item)) &#123;</span><br><span class=\"line\">            map.set(item, map.get(item) - <span class=\"number\">1</span>);</span><br><span class=\"line\">    \t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-找出字符串中出现次数最多的字母-要求-Tc-O-n-Sc-O-n\"><a href=\"#5-找出字符串中出现次数最多的字母-要求-Tc-O-n-Sc-O-n\" class=\"headerlink\" title=\"5. 找出字符串中出现次数最多的字母 [要求 Tc: O(n) Sc:O(n)]\"></a>5. 找出字符串中出现次数最多的字母 [要求 Tc: O(n) Sc:O(n)]</h4><blockquote>\n<p>例 1: 输入’abccdtc’</p>\n</blockquote>\n<blockquote>\n<p>输出: ‘c’</p>\n</blockquote>\n<blockquote>\n<p>例 2: 输入’abbbbccdtc’</p>\n</blockquote>\n<blockquote>\n<p>输出: ‘b’</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">maxCount</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> hash = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> maxCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> maxElement = <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; str.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> cur = str[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (hash[cur]) &#123;</span><br><span class=\"line\">            hash[cur]++;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            hash[cur] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (maxCount &lt; hash[cur]) &#123;</span><br><span class=\"line\">            maxElement = cur;</span><br><span class=\"line\">            maxCount = hash[cur];</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> maxElement;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> letter = maxCount(<span class=\"string\">'abccdtc'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(letter);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"6-替换空格-要求-Tc-O-n-Sc-O-1-不允许使用正则表达式-今日头条\"><a href=\"#6-替换空格-要求-Tc-O-n-Sc-O-1-不允许使用正则表达式-今日头条\" class=\"headerlink\" title=\"6. 替换空格 [要求 Tc: O(n) Sc:O(1) 不允许使用正则表达式] (今日头条)\"></a>6. 替换空格 [要求 Tc: O(n) Sc:O(1) 不允许使用正则表达式] (今日头条)</h4><p><a href=\"https://leetcode-cn.com/problems/ti-huan-kong-ge-lcof/\" target=\"_blank\" rel=\"noopener\">剑指 Offer 第 5 题</a></p>\n<p><strong>思路:</strong> 使用快慢指针, 同向而行，快指针负责判断是不是空格，慢指针左侧都是处理好的元素。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> replaceSpace = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    s = s.split(<span class=\"string\">''</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> fast = <span class=\"number\">0</span>; fast &lt; s.length; fast++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s[fast] === <span class=\"string\">' '</span>) &#123;</span><br><span class=\"line\">            s[fast] = <span class=\"string\">'%20'</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s.join(<span class=\"string\">''</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>其他解法 (不推荐面试中使用):</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> replaceSpace = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    s = s.split(<span class=\"string\">' '</span>).join(<span class=\"string\">'%20'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> replaceSpace = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    s = s.replace(<span class=\"regexp\">/\\s+/g</span>,<span class=\"string\">'%20'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"7-第一个只出现一次的字符-要求-Tc-O-n-Sc-O-n\"><a href=\"#7-第一个只出现一次的字符-要求-Tc-O-n-Sc-O-n\" class=\"headerlink\" title=\"7. 第一个只出现一次的字符 [要求 Tc: O(n) Sc:O(n)]\"></a>7. 第一个只出现一次的字符 [要求 Tc: O(n) Sc:O(n)]</h4><p><a href=\"https://leetcode-cn.com/problems/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof/\" target=\"_blank\" rel=\"noopener\">剑指 Offer 第 50 题</a></p>\n<p><strong>思路:</strong> 遍历过程中存 hash 表, 如果当前值第一次出现就设置为 false, 后续处理遍历值为 false 的, 遇到为 false 的就直接返回。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> firstUniqChar = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> hash = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> firstAppearLetter = <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s === <span class=\"string\">''</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">' '</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; s.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (hash[s[i]] === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">                hash[s[i]] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                hash[s[i]] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [key, value] <span class=\"keyword\">of</span> <span class=\"built_in\">Object</span>.entries(hash)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!value) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> key;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">' '</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"8-左旋转字符串-要求-Tc-O-n-Sc-O-n\"><a href=\"#8-左旋转字符串-要求-Tc-O-n-Sc-O-n\" class=\"headerlink\" title=\"8. 左旋转字符串 [要求 Tc: O(n) Sc:O(n)]\"></a>8. 左旋转字符串 [要求 Tc: O(n) Sc:O(n)]</h4><p><a href=\"https://leetcode-cn.com/problems/zuo-xuan-zhuan-zi-fu-chuan-lcof/\" target=\"_blank\" rel=\"noopener\">剑指 Offer 第 58 题</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reverseLeftWords = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s, n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> frontStr = s.slice(<span class=\"number\">0</span>, n);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> backStr = s.slice(n);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> backStr + frontStr;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"9-字符串全排列-要求-Tc-O-n-Sc-O-n²-阿里\"><a href=\"#9-字符串全排列-要求-Tc-O-n-Sc-O-n²-阿里\" class=\"headerlink\" title=\"9. 字符串全排列 [要求 Tc: O(n!) Sc:O(n²)] (阿里)\"></a>9. 字符串全排列 [要求 Tc: O(n!) Sc:O(n²)] (阿里)</h4><p><a href=\"https://leetcode-cn.com/problems/zi-fu-chuan-de-pai-lie-lcof/\" target=\"_blank\" rel=\"noopener\">剑指 Offer 第 38 题</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> permutation = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> solution = [];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s.length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> solution;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    permutationHelper(s, solution);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> solution;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">permutationHelper</span>(<span class=\"params\">s, solution, used = [], path = []</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (path.length === s.length) &#123;</span><br><span class=\"line\">        solution.push(path.slice(<span class=\"number\">0</span>).join(<span class=\"string\">''</span>));</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> levelSet = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; s.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!levelSet.has(s[i])) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!used[i]) &#123;</span><br><span class=\"line\">                used[i] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                levelSet.add(s[i]);</span><br><span class=\"line\">                path.push(s[i]);</span><br><span class=\"line\">                permutationHelper(s, solution, used, path);</span><br><span class=\"line\">                used[i] = <span class=\"literal\">false</span>; <span class=\"comment\">//回溯</span></span><br><span class=\"line\">                path.pop();<span class=\"comment\">//回到母节点往右走时应该删除添加过的节点,防止保留意外的结果</span></span><br><span class=\"line\">            &#125;   </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"10-合并连续数字-要求-Tc-O-n-Sc-O-1-今日头条\"><a href=\"#10-合并连续数字-要求-Tc-O-n-Sc-O-1-今日头条\" class=\"headerlink\" title=\"10. 合并连续数字 [要求 Tc: O(n) Sc:O(1)] (今日头条)\"></a>10. 合并连续数字 [要求 Tc: O(n) Sc:O(1)] (今日头条)</h4><blockquote>\n<p>题目描述:</p>\n</blockquote>\n<blockquote>\n<p>输入:[0, 2, 3, 5, 6, 7, 8, 9, 11, 13, 56, 57]</p>\n</blockquote>\n<blockquote>\n<p>输出结果：</p>\n</blockquote>\n<blockquote>\n<p>0,2-3,5-9,11,13,56-57</p>\n</blockquote>\n<p><strong>思路:</strong> 三指针, 同向而行, slow 左边的为处理好的元素, f 指针快速向前走, begin 指针记录区间开始区间, prev 指针记录区间结束位置。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">combine</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> f = <span class=\"number\">1</span>, slow = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> prev = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (f &lt; arr.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> begin = f - <span class=\"number\">1</span>;</span><br><span class=\"line\">        prev = arr[begin];</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (f &lt; arr.length &amp;&amp; arr[f] - prev === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            prev = arr[f];</span><br><span class=\"line\">            f++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (f - begin === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[f + <span class=\"number\">1</span>] - arr[f] !== <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                !begin ? arr[slow++] = arr[begin] : arr[slow++] = arr[f];</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!begin) arr[slow++] = arr[begin];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            f++;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            arr[slow++] = arr[begin] + <span class=\"string\">`-`</span> + prev;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr.slice(<span class=\"number\">0</span>, slow).join(<span class=\"string\">','</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> res = combine([<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">11</span>, <span class=\"number\">13</span>, <span class=\"number\">56</span>, <span class=\"number\">57</span>]);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(res);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"11-字符串相加-腾讯\"><a href=\"#11-字符串相加-腾讯\" class=\"headerlink\" title=\"11. 字符串相加 (腾讯)\"></a>11. 字符串相加 (腾讯)</h4><p><a href=\"https://leetcode-cn.com/problems/add-strings/\" target=\"_blank\" rel=\"noopener\">LeetCode 第 415 题</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> addStrings = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num1, num2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = [];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = num1.length - <span class=\"number\">1</span>, j = num2.length - <span class=\"number\">1</span>, carry = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &gt;= <span class=\"number\">0</span> || j &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> n1 = i &gt;= <span class=\"number\">0</span> ? num1.charAt(i) - <span class=\"number\">0</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> n2 = j &gt;= <span class=\"number\">0</span> ? num2.charAt(j) - <span class=\"number\">0</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> tmp = n1 + n2 + carry;</span><br><span class=\"line\">        carry = <span class=\"built_in\">parseInt</span>(tmp / <span class=\"number\">10</span>);<span class=\"comment\">//算出十位数</span></span><br><span class=\"line\">        res.push(tmp % <span class=\"number\">10</span>);<span class=\"comment\">//算出个位数</span></span><br><span class=\"line\">        i--; j--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(carry == <span class=\"number\">1</span>) res.push(<span class=\"string\">'1'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res.reverse().join(<span class=\"string\">''</span>)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"栈-队列篇\"><a href=\"#栈-队列篇\" class=\"headerlink\" title=\"栈 / 队列篇\"></a>栈 / 队列篇</h3><h4 id=\"1-实现一个栈，入栈-push、出栈-pop、返回最小值-min-的复杂度为-0-1-滴滴\"><a href=\"#1-实现一个栈，入栈-push、出栈-pop、返回最小值-min-的复杂度为-0-1-滴滴\" class=\"headerlink\" title=\"1. 实现一个栈，入栈 push、出栈 pop、返回最小值 min 的复杂度为 0(1) (滴滴)\"></a>1. 实现一个栈，入栈 push、出栈 pop、返回最小值 min 的复杂度为 0(1) (滴滴)</h4><p><a href=\"https://leetcode-cn.com/problems/min-stack/\" target=\"_blank\" rel=\"noopener\">LeetCode 第 115 题</a></p>\n<p><strong>思路:</strong> stack2 为存储最小值的数组, 使用同步加同步减的思路, stack1 进来的新元素比 stack2 的 top 元素大则无视, 否则 stack2 顶部的元素变成刚刚进来的小值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> MinStack = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.stack1 = [];</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.stack2 = []; </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">x</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;void&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">MinStack.prototype.push = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123; <span class=\"comment\">//同步加同步减push pop</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.stack1.push(x);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.stack2.length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.stack2.push(x);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> temp = <span class=\"keyword\">this</span>.stack2[<span class=\"keyword\">this</span>.stack2.length - <span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x &lt; temp) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.stack2.push(x)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.stack2.push(temp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;void&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">MinStack.prototype.pop = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.stack1.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.stack1.pop();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.stack2.pop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">MinStack.prototype.top = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.stack1[<span class=\"keyword\">this</span>.stack1.length - <span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">MinStack.prototype.getMin = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.stack2[<span class=\"keyword\">this</span>.stack2.length - <span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-使用两个栈实现一个队列-滴滴\"><a href=\"#2-使用两个栈实现一个队列-滴滴\" class=\"headerlink\" title=\"2. 使用两个栈实现一个队列 (滴滴)\"></a>2. 使用两个栈实现一个队列 (滴滴)</h4><p><a href=\"https://leetcode-cn.com/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof/\" target=\"_blank\" rel=\"noopener\">剑指 Offer 第 9 题</a></p>\n<p><strong>思路:</strong> 我们既然要实现队列, 那肯定就是要有其中一个栈作为辅助栈，用来倒腾另一个栈中的数据 (我们这里的 stack1 为主栈，stack2 为辅助栈);</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> CQueue = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.stack1 = [];<span class=\"comment\">//2 1</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.stack2 = [];</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.count = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">value</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;void&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">CQueue.prototype.appendTail = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"keyword\">this</span>.stack1.length) &#123; <span class=\"comment\">//如果stack1中有元素那就先把stack1中所有元素放到stack2中</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.stack2.push(<span class=\"keyword\">this</span>.stack1.pop()); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.stack1.push(value);<span class=\"comment\">//添加新的值到stack1中</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"keyword\">this</span>.stack2.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.stack1.push(<span class=\"keyword\">this</span>.stack2.pop()); <span class=\"comment\">//然后再把stack2中的元素放到stack1中</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//这几步的意思是让stack1具有队列的性质(先进先出) 因为stack2代表stack1中之前的数据，然后会压到新数据的上面</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.count++;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">CQueue.prototype.deleteHead = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.count == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.count--;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.stack1.pop();<span class=\"comment\">//使用pop栈的方法，因为咱们利用辅助栈倒腾了一下所以直接pop后结果就是按照队列的性质输出了先进的值</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-有效的括号-要求-Tc-O-n-Sc-O-n-哔哩哔哩\"><a href=\"#3-有效的括号-要求-Tc-O-n-Sc-O-n-哔哩哔哩\" class=\"headerlink\" title=\"3. 有效的括号 [要求 Tc: O(n) Sc:O(n)] (哔哩哔哩)\"></a>3. 有效的括号 [要求 Tc: O(n) Sc:O(n)] (哔哩哔哩)</h4><p><a href=\"https://leetcode-cn.com/problems/valid-parentheses/\" target=\"_blank\" rel=\"noopener\">LeetCode 第 20 题</a></p>\n<p><strong>思路:</strong> 使用栈保存括号，遇到左括号直接入栈，遇到右括号就把栈顶的弹出来和当前的右括号匹配, 如果匹配失败说明不合法直接返回 false, 最后判断栈是不是空 (是不是所有括号都抵消完毕了), 不为空也说明不合法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> isValid = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> map = &#123;</span><br><span class=\"line\">        <span class=\"string\">'&#123;'</span>: <span class=\"string\">'&#125;'</span>,</span><br><span class=\"line\">        <span class=\"string\">'('</span>: <span class=\"string\">')'</span>,</span><br><span class=\"line\">        <span class=\"string\">'['</span>: <span class=\"string\">']'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> stack = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; str.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (map[str[i]]) &#123;</span><br><span class=\"line\">            stack.push(str[i]);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (str[i] !== map[stack.pop()]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> stack.length === <span class=\"number\">0</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"链表篇\"><a href=\"#链表篇\" class=\"headerlink\" title=\"链表篇\"></a>链表篇</h3><h4 id=\"1-从尾到头打印单链表-要求-Tc-O-n-Sc-O-n\"><a href=\"#1-从尾到头打印单链表-要求-Tc-O-n-Sc-O-n\" class=\"headerlink\" title=\"1. 从尾到头打印单链表 [要求 Tc: O(n) Sc:O(n)]\"></a>1. 从尾到头打印单链表 [要求 Tc: O(n) Sc:O(n)]</h4><p><a href=\"https://leetcode-cn.com/problems/cong-wei-dao-tou-da-yin-lian-biao-lcof/\" target=\"_blank\" rel=\"noopener\">剑指 Offer 第 6 题</a></p>\n<p><strong>思路:</strong> 基于 stack 的特性 (后进先出), 所以我们从头到尾过一遍链表，最后按照栈的顺序弹出就可以得到结果。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reversePrint = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">head</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> stack = [];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> cur = head;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (cur !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        stack.push(cur.val);</span><br><span class=\"line\">        cur = cur.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> print = [];</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (stack.length) &#123;</span><br><span class=\"line\">        print.push(stack.pop())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> print;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-删除链表的倒数第-K-个结点-要求-Tc-O-L-Sc-O-1\"><a href=\"#2-删除链表的倒数第-K-个结点-要求-Tc-O-L-Sc-O-1\" class=\"headerlink\" title=\"2. 删除链表的倒数第 K 个结点 [要求 Tc: O(L) Sc:O(1)]\"></a>2. 删除链表的倒数第 K 个结点 [要求 Tc: O(L) Sc:O(1)]</h4><p><a href=\"https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/\" target=\"_blank\" rel=\"noopener\">LeetCode 第 19 题</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> removeNthFromEnd = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">head, n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> dummyNode = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>);</span><br><span class=\"line\">    dummyNode.next = head;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> fast = dummyNode, slow = dummyNode;</span><br><span class=\"line\">    <span class=\"comment\">// 快先走 n+1 步</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n--) &#123;</span><br><span class=\"line\">        fast = fast.next</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// fast、slow 一起前进</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(fast &amp;&amp; fast.next) &#123;</span><br><span class=\"line\">        fast = fast.next</span><br><span class=\"line\">        slow = slow.next</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    slow.next = slow.next.next</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dummyNode.next</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-判断单链表是否有环-要求-Tc-O-n-Sc-O-1-有赞\"><a href=\"#3-判断单链表是否有环-要求-Tc-O-n-Sc-O-1-有赞\" class=\"headerlink\" title=\"3. 判断单链表是否有环 [要求 Tc: O(n) Sc:O(1)] (有赞)\"></a>3. 判断单链表是否有环 [要求 Tc: O(n) Sc:O(1)] (有赞)</h4><p><a href=\"https://leetcode-cn.com/problems/linked-list-cycle/\" target=\"_blank\" rel=\"noopener\">LeetCode 第 141 题</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> hasCycle = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">head</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (head === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> slow = fast = head;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (fast.next !== <span class=\"literal\">null</span> &amp;&amp; fast.next.next !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        slow = slow.next;</span><br><span class=\"line\">        fast = fast.next.next;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (slow === fast) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-反转单链表-要求-Tc-O-n-Sc-O-1-链表类超高频\"><a href=\"#4-反转单链表-要求-Tc-O-n-Sc-O-1-链表类超高频\" class=\"headerlink\" title=\"4. 反转单链表 [要求 Tc: O(n) Sc:O(1)] (链表类超高频)\"></a>4. 反转单链表 [要求 Tc: O(n) Sc:O(1)] (链表类超高频)</h4><p><a href=\"https://leetcode-cn.com/problems/fan-zhuan-lian-biao-lcof/\" target=\"_blank\" rel=\"noopener\">剑指 Offer 第 24 题</a></p>\n<p><strong>反转思路如下过程:</strong></p>\n<p>原始链表: head -&gt; 2 -&gt; 3 -&gt; 4 -&gt; null</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;- <span class=\"number\">2</span>    <span class=\"number\">3</span>  -&gt;  <span class=\"number\">4</span> -&gt; <span class=\"literal\">null</span></span><br><span class=\"line\">pre(<span class=\"literal\">null</span>)    cur  next</span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"literal\">null</span>  &lt;- <span class=\"number\">2</span>  &lt;-  <span class=\"number\">3</span>      <span class=\"number\">4</span> -&gt; <span class=\"literal\">null</span></span><br><span class=\"line\">        pre    cur   next</span><br><span class=\"line\">                </span><br><span class=\"line\"><span class=\"literal\">null</span>  &lt;- <span class=\"number\">2</span>  &lt;-  <span class=\"number\">3</span>  &lt;-  <span class=\"number\">4</span>   <span class=\"literal\">null</span></span><br><span class=\"line\">                      cur  next</span><br><span class=\"line\">                pre  </span><br><span class=\"line\"><span class=\"literal\">null</span>  &lt;- <span class=\"number\">2</span>  &lt;-  <span class=\"number\">3</span>  &lt;-  <span class=\"number\">4</span>    <span class=\"literal\">null</span></span><br><span class=\"line\">                      pre   cur  next</span><br><span class=\"line\"> &lt;--------------------pre is the newHead to be returned</span><br></pre></td></tr></table></figure>\n\n<p><strong>迭代解法 (从左到右反转):</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reverseList = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">head</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (head === <span class=\"literal\">null</span> || head.next === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> pre = <span class=\"literal\">null</span>, cur = head;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (cur !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> next = cur.next;</span><br><span class=\"line\">        cur.next = pre;</span><br><span class=\"line\">        pre = cur;</span><br><span class=\"line\">        cur = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pre;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>递归解法:(从右往左反转)</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reverseList = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">head</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(head === <span class=\"literal\">null</span> || head.next === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> newHead = reverseList(head.next);</span><br><span class=\"line\">    head.next.next = head;</span><br><span class=\"line\">    head.next = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newHead;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>原始链表: 2 -&gt; 3 -&gt; null</p>\n<p>第一次调用 reverseList:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2</span>  -&gt;  <span class=\"number\">3</span> -&gt; <span class=\"literal\">null</span></span><br><span class=\"line\">head  newHead</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">head.next.next = head 干的事是: (<span class=\"number\">2</span>的next是<span class=\"number\">3</span>,将<span class=\"number\">3</span>的next指向<span class=\"number\">2</span>)：</span><br><span class=\"line\"><span class=\"number\">2</span>  &lt;-&gt;  <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">head.next = <span class=\"literal\">null</span> 干的事是:</span><br><span class=\"line\"><span class=\"literal\">null</span> &lt;- <span class=\"number\">2</span>  &lt;- <span class=\"number\">3</span></span><br><span class=\"line\">       head</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> newHead 干的事是:</span><br><span class=\"line\"><span class=\"literal\">null</span> &lt;- <span class=\"number\">2</span>  &lt;- <span class=\"number\">3</span></span><br><span class=\"line\">             newHead</span><br></pre></td></tr></table></figure>\n\n<p>第二次调用 reverseList:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2</span>  -&gt;  <span class=\"number\">3</span> -&gt; <span class=\"literal\">null</span></span><br><span class=\"line\">      head       </span><br><span class=\"line\">base <span class=\"keyword\">case</span>: <span class=\"keyword\">return</span> newHead = <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-判断两个链表是否相交，若相交，求交点-链表没有环-要求-Tc-O-m-n-Sc-O-n-字节跳动\"><a href=\"#5-判断两个链表是否相交，若相交，求交点-链表没有环-要求-Tc-O-m-n-Sc-O-n-字节跳动\" class=\"headerlink\" title=\"5. 判断两个链表是否相交，若相交，求交点 (链表没有环)[要求 Tc: O(m+n) Sc:O(n)] (字节跳动)\"></a>5. 判断两个链表是否相交，若相交，求交点 (链表没有环)[要求 Tc: O(m+n) Sc:O(n)] (字节跳动)</h4><p><a href=\"https://leetcode-cn.com/problems/intersection-of-two-linked-lists/solution/xiang-jiao-lian-biao-by-leetcode/\" target=\"_blank\" rel=\"noopener\">LeetCode 第 160 题</a></p>\n<p>headA:a+c+b<br>headB:b+c+a</p>\n<p>因为 a+c+b === b+c+a 因此终有一刻他们能相交</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> getIntersectionNode = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">headA, headB</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (headA === <span class=\"literal\">null</span> || headB === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> nodeA = headA;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> nodeB = headB;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (nodeA !== nodeB) &#123;</span><br><span class=\"line\">        nodeA = nodeA ? nodeA.next : headB;</span><br><span class=\"line\">        nodeB = nodeB ? nodeB.next : headA;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nodeA;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"6-查找单链表的中间节点，要求只能遍历一次链表-要求-Tc-O-n-Sc-O-1\"><a href=\"#6-查找单链表的中间节点，要求只能遍历一次链表-要求-Tc-O-n-Sc-O-1\" class=\"headerlink\" title=\"6. 查找单链表的中间节点，要求只能遍历一次链表 [要求 Tc: O(n) Sc:O(1)]\"></a>6. 查找单链表的中间节点，要求只能遍历一次链表 [要求 Tc: O(n) Sc:O(1)]</h4><p><a href=\"https://leetcode-cn.com/problems/middle-of-the-linked-list/\" target=\"_blank\" rel=\"noopener\">LeetCode 第 876 题</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> middleNode = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">head</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> slow = head;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> fast = head;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (fast !== <span class=\"literal\">null</span> &amp;&amp; fast.next !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        slow = slow.next;</span><br><span class=\"line\">        fast = fast.next.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> slow;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"7-合并两个有序链表，合并后依然有序-要求-Tc-O-m-n-Sc-O-1\"><a href=\"#7-合并两个有序链表，合并后依然有序-要求-Tc-O-m-n-Sc-O-1\" class=\"headerlink\" title=\"7. 合并两个有序链表，合并后依然有序 [要求 Tc: O(m+n) Sc:O(1)]\"></a>7. 合并两个有序链表，合并后依然有序 [要求 Tc: O(m+n) Sc:O(1)]</h4><p><a href=\"https://leetcode-cn.com/problems/he-bing-liang-ge-pai-xu-de-lian-biao-lcof/\" target=\"_blank\" rel=\"noopener\">剑指 Offer 第 25 题</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mergeTwoLists = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">l1, l2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> dummyHead = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> cur1 = l1;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> cur2 = l2;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> tail = dummyHead;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (cur1 !== <span class=\"literal\">null</span> &amp;&amp; cur2 !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cur1.val &lt; cur2.val) &#123;</span><br><span class=\"line\">            tail.next = cur1;</span><br><span class=\"line\">            cur1 = cur1.next;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            tail.next = cur2;</span><br><span class=\"line\">            cur2 = cur2.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        tail = tail.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cur1 !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        tail.next = cur1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cur2 !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        tail.next = cur2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dummyHead.next;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"8-查找单链表的倒数第-K-个节点，要求只能遍历一次链表-要求-Tc-O-n-Sc-O-1\"><a href=\"#8-查找单链表的倒数第-K-个节点，要求只能遍历一次链表-要求-Tc-O-n-Sc-O-1\" class=\"headerlink\" title=\"8. 查找单链表的倒数第 K 个节点，要求只能遍历一次链表 [要求 Tc: O(n) Sc:O(1)]\"></a>8. 查找单链表的倒数第 K 个节点，要求只能遍历一次链表 [要求 Tc: O(n) Sc:O(1)]</h4><p><a href=\"https://leetcode-cn.com/problems/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof/solution/mian-shi-ti-22-lian-biao-zhong-dao-shu-di-kge-j-11/\" target=\"_blank\" rel=\"noopener\">剑指 Offer 第 22 题</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> getKthFromEnd = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">head, k</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> fast = head, slow = head;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; k; i++) &#123;</span><br><span class=\"line\">        fast = fast.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (fast != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        fast = fast.next;</span><br><span class=\"line\">        slow = slow.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> slow;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"二叉树篇\"><a href=\"#二叉树篇\" class=\"headerlink\" title=\"二叉树篇\"></a>二叉树篇</h3><h4 id=\"1-二叉树的删除实现-要求-Tc-O-H-Sc-O-H-字节跳动\"><a href=\"#1-二叉树的删除实现-要求-Tc-O-H-Sc-O-H-字节跳动\" class=\"headerlink\" title=\"1. 二叉树的删除实现 [要求 Tc: O(H) Sc:O(H)] (字节跳动)\"></a>1. 二叉树的删除实现 [要求 Tc: O(H) Sc:O(H)] (字节跳动)</h4><p><a href=\"https://leetcode-cn.com/problems/delete-node-in-a-bst/\" target=\"_blank\" rel=\"noopener\">LeetCode 第 450 题</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> deleteNode = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root, key</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.root = recursionDelete(root, key);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.root;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">recursionDelete</span>(<span class=\"params\">root, key</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.val &gt; key) &#123;</span><br><span class=\"line\">        root.left = recursionDelete(root.left, key);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (root.val &lt; key) &#123;</span><br><span class=\"line\">        root.right = recursionDelete(root.right, key);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;  <span class=\"comment\">//3种情况</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root.left === <span class=\"literal\">null</span> &amp;&amp; root.right === <span class=\"literal\">null</span>) &#123; <span class=\"comment\">//1</span></span><br><span class=\"line\">            root === <span class=\"literal\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root.left === <span class=\"literal\">null</span>) &#123; <span class=\"comment\">//2</span></span><br><span class=\"line\">            root = root.right;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (root.right === <span class=\"literal\">null</span>) &#123; <span class=\"comment\">//2</span></span><br><span class=\"line\">            root = root.left;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> aux = <span class=\"literal\">null</span>; <span class=\"comment\">//3</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> current = root.right;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (current != <span class=\"literal\">null</span> &amp;&amp; current.left != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        \tcurrent = current.left;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        aux = current;</span><br><span class=\"line\">        root.val = aux.val;</span><br><span class=\"line\">        root.right = recursionDelete(root.right,aux.val);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-判断一棵树是否是平衡树-要求-Tc-O-n-Sc-O-n-字节跳动\"><a href=\"#2-判断一棵树是否是平衡树-要求-Tc-O-n-Sc-O-n-字节跳动\" class=\"headerlink\" title=\"2. 判断一棵树是否是平衡树 [要求 Tc: O(n) Sc:O(n)] (字节跳动)\"></a>2. 判断一棵树是否是平衡树 [要求 Tc: O(n) Sc:O(n)] (字节跳动)</h4><p><a href=\"https://leetcode-cn.com/problems/balanced-binary-tree/\" target=\"_blank\" rel=\"noopener\">LeetCode 第 110 题</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> isBalanced = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> lh = maxDepth(root.left);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> rh = maxDepth(root.right);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Math</span>.abs(lh - rh) &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> isBalanced(root.left) &amp;&amp; isBalanced(root.right);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">maxDepth</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> left = maxDepth(root.left);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> right = maxDepth(root.right);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.max(left, right) + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-二叉树最大深度-要求-Tc-O-n-Sc-O-n-阿里\"><a href=\"#3-二叉树最大深度-要求-Tc-O-n-Sc-O-n-阿里\" class=\"headerlink\" title=\"3. 二叉树最大深度 [要求 Tc: O(n) Sc:O(n)] (阿里)\"></a>3. 二叉树最大深度 [要求 Tc: O(n) Sc:O(n)] (阿里)</h4><p><a href=\"https://leetcode-cn.com/problems/er-cha-shu-de-shen-du-lcof/\" target=\"_blank\" rel=\"noopener\">剑指 Offer 第 55 题</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">maxDepth</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> left = maxDepth(root.left);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> right = maxDepth(root.right);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.max(left, right) + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-二叉树中和为某一值的路径-要求-Tc-O-n-Sc-O-n-字节跳动\"><a href=\"#5-二叉树中和为某一值的路径-要求-Tc-O-n-Sc-O-n-字节跳动\" class=\"headerlink\" title=\"5. 二叉树中和为某一值的路径 [要求 Tc: O(n) Sc:O(n)] (字节跳动)\"></a>5. 二叉树中和为某一值的路径 [要求 Tc: O(n) Sc:O(n)] (字节跳动)</h4><p><a href=\"https://leetcode-cn.com/problems/er-cha-shu-zhong-he-wei-mou-yi-zhi-de-lu-jing-lcof/\" target=\"_blank\" rel=\"noopener\">剑指 Offer 第 34 题</a></p>\n<p>第 34 题解:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> pathSum = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root, sum</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!root) <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">    <span class=\"keyword\">const</span> solution = [];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> path = []</span><br><span class=\"line\">    pathSumHelper(root,sum,solution,path);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> solution;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pathSumHelper</span>(<span class=\"params\">root,sum,solution,path</span>) </span>&#123;</span><br><span class=\"line\">    path.push(root.val);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root.left == <span class=\"literal\">null</span> &amp;&amp; root.right == <span class=\"literal\">null</span> &amp;&amp; calcPath(path) == sum) &#123;</span><br><span class=\"line\">        solution.push([...path]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root.left)&#123;</span><br><span class=\"line\">        pathSumHelper(root.left,sum,solution,path);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root.right)&#123;</span><br><span class=\"line\">        pathSumHelper(root.right,sum,solution,path);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    path.pop();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">calcPath</span>(<span class=\"params\">path</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> total = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i&lt;path.length;i++)&#123;</span><br><span class=\"line\">        total += path[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> total;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"6-LCA-要求-Tc-O-n-Sc-O-n-字节跳动\"><a href=\"#6-LCA-要求-Tc-O-n-Sc-O-n-字节跳动\" class=\"headerlink\" title=\"6.LCA[要求 Tc: O(n) Sc:O(n)] (字节跳动)\"></a>6.LCA[要求 Tc: O(n) Sc:O(n)] (字节跳动)</h4><p><a href=\"https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/\" target=\"_blank\" rel=\"noopener\">LeetCode 第 236 题</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> lowestCommonAncestor = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root, p, q</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!root || root.val == p.val || root.val == q.val) <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> left = lowestCommonAncestor(root.left, p, q);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> right = lowestCommonAncestor(root.right, p, q);</span><br><span class=\"line\">    <span class=\"comment\">//如果left不存在p或q就返回right的结果。如果left存在，right不存在就返回left结果。如果left和right都存在就返回根节点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(left == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> right;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(right == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> left;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"7-二叉树层序遍历-要求-Tc-O-n-Sc-O-n-必会题\"><a href=\"#7-二叉树层序遍历-要求-Tc-O-n-Sc-O-n-必会题\" class=\"headerlink\" title=\"7. 二叉树层序遍历 [要求 Tc: O(n) Sc:O(n)] (必会题)\"></a>7. 二叉树层序遍历 [要求 Tc: O(n) Sc:O(n)] (必会题)</h4><p><a href=\"https://leetcode-cn.com/problems/binary-tree-level-order-traversal/\" target=\"_blank\" rel=\"noopener\">LeetCode 第 102 题</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> levelOrder = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = [];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> queue = [root];</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (queue.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> level = [];</span><br><span class=\"line\">        <span class=\"keyword\">let</span> size = queue.length;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> cur = queue.shift();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cur.left) &#123;</span><br><span class=\"line\">                queue.push(cur.left);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cur.right) &#123;</span><br><span class=\"line\">                queue.push(cur.right);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            level.push(cur.val);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        result.push(level);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"8-是否是-BST-要求-Tc-O-n-Sc-O-n-有赞\"><a href=\"#8-是否是-BST-要求-Tc-O-n-Sc-O-n-有赞\" class=\"headerlink\" title=\"8. 是否是 BST[要求 Tc: O(n) Sc:O(n)] (有赞)\"></a>8. 是否是 BST[要求 Tc: O(n) Sc:O(n)] (有赞)</h4><p><a href=\"https://leetcode-cn.com/problems/validate-binary-search-tree/\" target=\"_blank\" rel=\"noopener\">LeetCode 第 98 题</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> isValidBST = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> min = -<span class=\"literal\">Infinity</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> max = <span class=\"literal\">Infinity</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> isValidBSTHelper(root, min, max);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isValidBSTHelper</span>(<span class=\"params\">root, min, max</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root.val &lt;= min || root.val &gt;= max) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> isValidBSTHelper(root.left, min, root.val) &amp;&amp; isValidBSTHelper(root.right, root.val, max);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"9-是否是完全二叉树-要求-Tc-O-n-Sc-O-n-字节跳动\"><a href=\"#9-是否是完全二叉树-要求-Tc-O-n-Sc-O-n-字节跳动\" class=\"headerlink\" title=\"9. 是否是完全二叉树 [要求 Tc: O(n) Sc:O(n)] (字节跳动)\"></a>9. 是否是完全二叉树 [要求 Tc: O(n) Sc:O(n)] (字节跳动)</h4><p><a href=\"https://leetcode-cn.com/problems/check-completeness-of-a-binary-tree/\" target=\"_blank\" rel=\"noopener\">LeetCode 第 958 题</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> isCompleteTree = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> queue = [root];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (queue.length) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">let</span> cur = queue.shift();</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (cur.left === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">           flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">       &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (flag) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">           queue.push(cur.left);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (cur.right === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">           flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">       &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (flag) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">           queue.push(cur.right);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"10-翻转二叉树-要求-Tc-O-n-Sc-O-n\"><a href=\"#10-翻转二叉树-要求-Tc-O-n-Sc-O-n\" class=\"headerlink\" title=\"10. 翻转二叉树 [要求 Tc: O(n) Sc:O(n)]\"></a>10. 翻转二叉树 [要求 Tc: O(n) Sc:O(n)]</h4><p><a href=\"https://leetcode-cn.com/problems/invert-binary-tree/\" target=\"_blank\" rel=\"noopener\">LeetCode 第 226 题</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> invertTree = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    invertTreeHelper(root);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">invertTreeHelper</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> tmp = root.left;</span><br><span class=\"line\">    root.left = root.right;</span><br><span class=\"line\">    root.right = tmp;</span><br><span class=\"line\">    invertTree(root.left);</span><br><span class=\"line\">    invertTree(root.right);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"11-二叉树的右视图-要求-Tc-O-n-Sc-O-n-字节跳动\"><a href=\"#11-二叉树的右视图-要求-Tc-O-n-Sc-O-n-字节跳动\" class=\"headerlink\" title=\"11. 二叉树的右视图 [要求 Tc: O(n) Sc:O(n)] (字节跳动)\"></a>11. 二叉树的右视图 [要求 Tc: O(n) Sc:O(n)] (字节跳动)</h4><p><a href=\"https://leetcode-cn.com/problems/binary-tree-right-side-view/\" target=\"_blank\" rel=\"noopener\">LeetCode 第 199 题</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> rightSideView = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = [];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> queue = [root];</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (queue.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> level = [];</span><br><span class=\"line\">        <span class=\"keyword\">let</span> size = queue.length;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> cur = queue.shift();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i === size - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                level.push(cur.val);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cur.left) &#123;</span><br><span class=\"line\">                queue.push(cur.left);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cur.right) &#123;</span><br><span class=\"line\">                queue.push(cur.right);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        result.push(level);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"12-判断对称二叉树-要求-Tc-O-n-Sc-O-n\"><a href=\"#12-判断对称二叉树-要求-Tc-O-n-Sc-O-n\" class=\"headerlink\" title=\"12. 判断对称二叉树 [要求 Tc: O(n) Sc:O(n)]\"></a>12. 判断对称二叉树 [要求 Tc: O(n) Sc:O(n)]</h4><p><a href=\"https://leetcode-cn.com/problems/symmetric-tree/\" target=\"_blank\" rel=\"noopener\">LeetCode 第 101 题</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> isSymmetric = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> isSymmetricHelper(root, root);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isSymmetricHelper</span>(<span class=\"params\">one, two</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (one === <span class=\"literal\">null</span> &amp;&amp; two === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (one === <span class=\"literal\">null</span> || two === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (one.val !== two.val) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> isSymmetricHelper(one.left,two.right) &amp;&amp; isSymmetricHelper(one.right,two.left);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"13-二叉树的锯齿形层次遍历-要求-Tc-O-n-Sc-O-n-字节跳动\"><a href=\"#13-二叉树的锯齿形层次遍历-要求-Tc-O-n-Sc-O-n-字节跳动\" class=\"headerlink\" title=\"13. 二叉树的锯齿形层次遍历 [要求 Tc: O(n) Sc:O(n)] (字节跳动)\"></a>13. 二叉树的锯齿形层次遍历 [要求 Tc: O(n) Sc:O(n)] (字节跳动)</h4><p><a href=\"https://leetcode-cn.com/problems/binary-tree-zigzag-level-order-traversal/\" target=\"_blank\" rel=\"noopener\">LeetCode 第 103 题</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> zigzagLevelOrder = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> printArr = []</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!root) <span class=\"keyword\">return</span> printArr</span><br><span class=\"line\">  <span class=\"keyword\">const</span> list = []</span><br><span class=\"line\">  list.push(&#123; <span class=\"attr\">level</span>: <span class=\"number\">0</span>, <span class=\"attr\">node</span>: root &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(list.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; level, node &#125; = list.shift()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!printArr[level]) &#123;</span><br><span class=\"line\">      printArr[level] = []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (level % <span class=\"number\">2</span> === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      printArr[level].push(node.val)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      printArr[level].unshift(node.val)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    node.left &amp;&amp; list.push(&#123; <span class=\"attr\">level</span>: level + <span class=\"number\">1</span>, <span class=\"attr\">node</span>: node.left &#125;)</span><br><span class=\"line\">    node.right &amp;&amp; list.push(&#123; <span class=\"attr\">level</span>: level + <span class=\"number\">1</span>, <span class=\"attr\">node</span>: node.right &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> printArr</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"14-构造二叉树\"><a href=\"#14-构造二叉树\" class=\"headerlink\" title=\"14. 构造二叉树\"></a>14. 构造二叉树</h4><p><a href=\"https://leetcode-cn.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/\" target=\"_blank\" rel=\"noopener\">LeetCode 第 106 题</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> buildTree = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">preorder, inorder</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">help</span>(<span class=\"params\">inorder</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!inorder|| !inorder.length) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> top = preorder.shift(), p = inorder.indexOf(top);</span><br><span class=\"line\">        <span class=\"keyword\">let</span> root = <span class=\"keyword\">new</span> TreeNode(top);</span><br><span class=\"line\">        root.left = help(inorder.slice(<span class=\"number\">0</span>, p));</span><br><span class=\"line\">        root.right = help(inorder.slice(p+<span class=\"number\">1</span>));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> help(inorder);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/\" target=\"_blank\" rel=\"noopener\">LeetCode 第 105 题</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> buildTree = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">preorder, inorder</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">help</span>(<span class=\"params\">inorder</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!inorder|| !inorder.length) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> top = preorder.shift(), p = inorder.indexOf(top);</span><br><span class=\"line\">        <span class=\"keyword\">let</span> root = <span class=\"keyword\">new</span> TreeNode(top);</span><br><span class=\"line\">        root.left = help(inorder.slice(<span class=\"number\">0</span>, p));</span><br><span class=\"line\">        root.right = help(inorder.slice(p + <span class=\"number\">1</span>));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> help(inorder);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"堆-优先队列篇\"><a href=\"#堆-优先队列篇\" class=\"headerlink\" title=\"堆 / 优先队列篇\"></a>堆 / 优先队列篇</h3><h4 id=\"1-寻找第-k-大元素-要求-Tc-O-nlogn-Sc-O-1-腾讯-字节跳动-阿里\"><a href=\"#1-寻找第-k-大元素-要求-Tc-O-nlogn-Sc-O-1-腾讯-字节跳动-阿里\" class=\"headerlink\" title=\"1. 寻找第 k 大元素 [要求 Tc: O(nlogn) Sc:O(1)] (腾讯, 字节跳动, 阿里)\"></a>1. 寻找第 k 大元素 [要求 Tc: O(nlogn) Sc:O(1)] (腾讯, 字节跳动, 阿里)</h4><p><a href=\"https://leetcode-cn.com/explore/interview/card/top-interview-questions/266/heap-stack-queue/1154/\" target=\"_blank\" rel=\"noopener\">常见题型</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"二分查找篇\"><a href=\"#二分查找篇\" class=\"headerlink\" title=\"二分查找篇\"></a>二分查找篇</h3><h4 id=\"1-查找给定值-要求-Tc-O-logn-Sc-O-1-二分查找高频\"><a href=\"#1-查找给定值-要求-Tc-O-logn-Sc-O-1-二分查找高频\" class=\"headerlink\" title=\"1. 查找给定值 [要求 Tc: O(logn) Sc:O(1)] (二分查找高频)\"></a>1. 查找给定值 [要求 Tc: O(logn) Sc:O(1)] (二分查找高频)</h4><p><a href=\"https://leetcode-cn.com/problems/binary-search/\" target=\"_blank\" rel=\"noopener\">LeetCode 第 704 题</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">binarySearch</span>(<span class=\"params\">array, target</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> right = array.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt;= right) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> mid = (left + (right - left) / <span class=\"number\">2</span>) | <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> middleValue = array[mid];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (middleValue &gt; target) &#123;</span><br><span class=\"line\">            right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (middleValue &lt; target) &#123;</span><br><span class=\"line\">            left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> index = binarySearch([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>], <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(index); <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-查找最接近目标值的值-要求-Tc-O-logn-Sc-O-1\"><a href=\"#2-查找最接近目标值的值-要求-Tc-O-logn-Sc-O-1\" class=\"headerlink\" title=\"2. 查找最接近目标值的值 [要求 Tc: O(logn) Sc:O(1)]\"></a>2. 查找最接近目标值的值 [要求 Tc: O(logn) Sc:O(1)]</h4><p>给定目标整数 T 和按升序排序的整数数组 A，找到 A 中的索引 i，以使 A [i] 最接近 T。</p>\n<p>假设条件:</p>\n<p>数组中可以有重复的元素，并且我们可以返回具有相同值的任何索引。</p>\n<p>例:</p>\n<p>A = [1,2,3]，T = 2，返回 1</p>\n<p>A =[1，4，6]，T = 3，返回 1</p>\n<p>A = [1，4，6]，T = 5，返回 1 或 2</p>\n<p>A = [1、3、3、4]，T = 2，返回 0 或 1 或 2</p>\n<p>corner case:</p>\n<p>如果 A 为空或 A 为零长度怎么办？在这种情况下，我们应该返回 - 1。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">binarySearch</span>(<span class=\"params\">array, target</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (array.length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> right = array.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt; right - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> mid = (left + (right - left) / <span class=\"number\">2</span>) | <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> middleValue = array[mid];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (middleValue === target) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (middleValue &lt; target) &#123;</span><br><span class=\"line\">            left = mid;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            right = mid;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Math</span>.abs(target - array[left]) &gt;= <span class=\"built_in\">Math</span>.abs(target - array[right])) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> right;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> left;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> index = binarySearch([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>], <span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(index); <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-第一个出现的目标值-要求-Tc-O-logn-Sc-O-1-二分查找高频\"><a href=\"#3-第一个出现的目标值-要求-Tc-O-logn-Sc-O-1-二分查找高频\" class=\"headerlink\" title=\"3. 第一个出现的目标值 [要求 Tc: O(logn) Sc:O(1)] (二分查找高频)\"></a>3. 第一个出现的目标值 [要求 Tc: O(logn) Sc:O(1)] (二分查找高频)</h4><p>给定目标整数 T 和按升序排序的整数数组 A，请找到 A 中 T 首次出现的索引，如果没有这样的索引，则返回 - 1。</p>\n<p>假设条件</p>\n<p>数组中可以有重复的元素。</p>\n<p>例:</p>\n<p>A = [1,2,3]，T = 2，返回 1</p>\n<p>A = [1,2,3]，T = 4，返回 - 1</p>\n<p>A = [1,2,2,2,3]，T = 2，返回 1</p>\n<p>corner case:</p>\n<p>如果 A 为零或长度为零的 A 怎么办？在这种情况下，我们应该返回 - 1。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">binarySearch</span>(<span class=\"params\">array, target</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (array.length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> right = array.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt; right - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> mid = (left + (right - left) / <span class=\"number\">2</span>) | <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> middleValue = array[mid];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (middleValue === target) &#123;</span><br><span class=\"line\">            right = mid;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (middleValue &lt; target) &#123;</span><br><span class=\"line\">            left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            right = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> array[right] === target ? right : array[left] === target ? left : <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(binarySearch([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>], <span class=\"number\">2</span>)); <span class=\"comment\">//1</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-查找最接近目标值的-k-个数-要求-Tc-O-logn-k-Sc-O-1\"><a href=\"#4-查找最接近目标值的-k-个数-要求-Tc-O-logn-k-Sc-O-1\" class=\"headerlink\" title=\"4. 查找最接近目标值的 k 个数 [要求 Tc: O(logn + k) Sc:O(1)]\"></a>4. 查找最接近目标值的 k 个数 [要求 Tc: O(logn + k) Sc:O(1)]</h4><p>给定目标整数 T，非负整数 K 和按升序排序的整数数组 A，找到 A 中最接近 T 的 K 个数字。 如果存在平局，则始终首选较小的元素。</p>\n<p>假设条件:</p>\n<p>A 不为空 K 保证大于等于 0，K 保证小于等于 A.length 返回大小为 K 的整数数组，其中包含 A 中的 K 个最接近的数字（不是索引），并按数字和 T 之间的差值升序排列。</p>\n<p>例:</p>\n<p>A = [1，2，3]，T = 2，K = 3，返回 [2，1，3] 或[2，3，1]</p>\n<p>A = [1，4，6，8]，T = 3，K = 3，返回 [4，1，6]</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">binarySearch</span>(<span class=\"params\">array, target, k</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (array.length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> right = array.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt; right - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> mid = (left + (right - left) / <span class=\"number\">2</span>) | <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> middleValue = array[mid];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (middleValue === target) &#123;</span><br><span class=\"line\">            right = mid;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (middleValue &lt; target) &#123;</span><br><span class=\"line\">            left = mid;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            right = mid;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// post-processing find the closest number</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> closeIdx = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Math</span>.abs(array[left] - target) &lt;= <span class=\"built_in\">Math</span>.abs(array[right] - target)) &#123;</span><br><span class=\"line\">    \tcloseIdx = left;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    \tcloseIdx = right;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// These two should be the closest to target</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(k);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> l = closeIdx;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> r = closeIdx + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">// this is a typical merge operation</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; k; i++) &#123;</span><br><span class=\"line\">    \t<span class=\"comment\">// we can advance the left pointer when:</span></span><br><span class=\"line\">    \t<span class=\"comment\">// 1. right pointer is already out of bound</span></span><br><span class=\"line\">    \t<span class=\"comment\">// 2. right pointer is not out of bound, left pointer is not out of bound and array[left] is closer to target.</span></span><br><span class=\"line\">    \t<span class=\"keyword\">if</span> (r &gt;= array.length) &#123;<span class=\"comment\">//can be merged two conditions</span></span><br><span class=\"line\">            result[i] = array[l--];</span><br><span class=\"line\">    \t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (l &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            result[i] = array[r++];</span><br><span class=\"line\">    \t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">Math</span>.abs(array[l] - target) &lt;= <span class=\"built_in\">Math</span>.abs(array[r] - target)) &#123;</span><br><span class=\"line\">            result[i] = array[l--];</span><br><span class=\"line\">    \t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            result[i] = array[r++];</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(binarySearch([<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>], <span class=\"number\">3</span>, <span class=\"number\">3</span>)); <span class=\"comment\">// [4，1，6]</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-有一个排序数组，返回第一个比目标数字小的数-要求-Tc-O-logn-Sc-O-1-快手\"><a href=\"#5-有一个排序数组，返回第一个比目标数字小的数-要求-Tc-O-logn-Sc-O-1-快手\" class=\"headerlink\" title=\"5. 有一个排序数组，返回第一个比目标数字小的数 (要求: Tc: O(logn) Sc:O(1)) (快手)\"></a>5. 有一个排序数组，返回第一个比目标数字小的数 (要求: Tc: O(logn) Sc:O(1)) (快手)</h4><h3 id=\"动态规划篇\"><a href=\"#动态规划篇\" class=\"headerlink\" title=\"动态规划篇\"></a>动态规划篇</h3><h4 id=\"1-斐波那契数列-要求-Tc-O-n-Sc-O-n-O-1-动态规划类超高频\"><a href=\"#1-斐波那契数列-要求-Tc-O-n-Sc-O-n-O-1-动态规划类超高频\" class=\"headerlink\" title=\"1. 斐波那契数列 (要求 Tc: O(n) Sc:O(n)/O(1)) (动态规划类超高频)\"></a>1. 斐波那契数列 (要求 Tc: O(n) Sc:O(n)/O(1)) (动态规划类超高频)</h4><p><a href=\"https://leetcode-cn.com/problems/fei-bo-na-qi-shu-lie-lcof/solution/mian-shi-ti-10-i-fei-bo-na-qi-shu-lie-dong-tai-gui/\" target=\"_blank\" rel=\"noopener\">LeetCode 第 704 题</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fib = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a = <span class=\"number\">0</span>, b = <span class=\"number\">1</span>, sum;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        sum = a + b;</span><br><span class=\"line\">        a = b;</span><br><span class=\"line\">        b = sum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-爬楼梯-要求-Tc-O-n-Sc-O-n-O-1-动态规划类超高频\"><a href=\"#2-爬楼梯-要求-Tc-O-n-Sc-O-n-O-1-动态规划类超高频\" class=\"headerlink\" title=\"2. 爬楼梯 (要求 Tc: O(n) Sc:O(n)/O(1)) (动态规划类超高频)\"></a>2. 爬楼梯 (要求 Tc: O(n) Sc:O(n)/O(1)) (动态规划类超高频)</h4><p><a href=\"https://leetcode-cn.com/problems/climbing-stairs/\" target=\"_blank\" rel=\"noopener\">LeetCode 第 70 题</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> climbStairs = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> dp = [];</span><br><span class=\"line\">    dp[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    dp[<span class=\"number\">2</span>] = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">3</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        dp[i] = dp[i - <span class=\"number\">1</span>] + dp[i - <span class=\"number\">2</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[n];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"递归篇\"><a href=\"#递归篇\" class=\"headerlink\" title=\"递归篇\"></a>递归篇</h3><h4 id=\"1-岛屿数量-要求-Tc-O-MN-Sc-O-MN-微信\"><a href=\"#1-岛屿数量-要求-Tc-O-MN-Sc-O-MN-微信\" class=\"headerlink\" title=\"1. 岛屿数量 (要求 Tc: O(MN) Sc:O(MN)) (微信)\"></a>1. 岛屿数量 (要求 Tc: O(MN) Sc:O(MN)) (微信)</h4><p><a href=\"https://leetcode-cn.com/problems/number-of-islands/\" target=\"_blank\" rel=\"noopener\">LeetCode 第 200 题</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> dfs = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">grid, i, j</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 把当前项变为0, 防止重新查找</span></span><br><span class=\"line\">  grid[i][j] = <span class=\"number\">0</span>;     </span><br><span class=\"line\">  <span class=\"comment\">// 当前项 上下左右检查</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (grid[i - <span class=\"number\">1</span>] &amp;&amp; grid[i - <span class=\"number\">1</span>][j] == <span class=\"number\">1</span>) dfs(grid, i - <span class=\"number\">1</span>, j);  <span class=\"comment\">// 上</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (grid[i + <span class=\"number\">1</span>] &amp;&amp; grid[i + <span class=\"number\">1</span>][j] == <span class=\"number\">1</span>) dfs(grid, i + <span class=\"number\">1</span>, j);  <span class=\"comment\">// 下</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (grid[i][j - <span class=\"number\">1</span>] &amp;&amp; grid[i][j - <span class=\"number\">1</span>] == <span class=\"number\">1</span>) dfs(grid, i, j - <span class=\"number\">1</span>);  <span class=\"comment\">// 左</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (grid[i][j + <span class=\"number\">1</span>] &amp;&amp; grid[i][j + <span class=\"number\">1</span>] == <span class=\"number\">1</span>) dfs(grid, i, j + <span class=\"number\">1</span>);  <span class=\"comment\">// 右</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> numIslands = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">grid</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (grid.length &lt; <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> islands = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; grid.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; grid[<span class=\"number\">0</span>].length; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (grid[i][j] == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        islands++;             <span class=\"comment\">// 岛屿加1</span></span><br><span class=\"line\">        dfs(grid, i, j);       <span class=\"comment\">// 寻找与当前项相邻的 1 并把它们变成0</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> islands;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-从一个数组中找出-N-个数，其和为-M-的所有可能-不能重复使用已经使用过的元素-今日头条\"><a href=\"#2-从一个数组中找出-N-个数，其和为-M-的所有可能-不能重复使用已经使用过的元素-今日头条\" class=\"headerlink\" title=\"2. 从一个数组中找出 N 个数，其和为 M 的所有可能 (不能重复使用已经使用过的元素) (今日头条)\"></a>2. 从一个数组中找出 N 个数，其和为 M 的所有可能 (不能重复使用已经使用过的元素) (今日头条)</h4><p><a href=\"https://blog.csdn.net/weixin_34130269/article/details/91382220\" target=\"_blank\" rel=\"noopener\">参考题解 1</a></p>\n<p><a href=\"https://juejin.im/post/5e46425f51882549652d4580#heading-8\" target=\"_blank\" rel=\"noopener\">参考题解 2</a></p>\n<h4 id=\"3-子集-要求-Tc-O-N×2N-Sc-O-N×2N-腾讯\"><a href=\"#3-子集-要求-Tc-O-N×2N-Sc-O-N×2N-腾讯\" class=\"headerlink\" title=\"3. 子集 (要求 Tc: O(N×2N) Sc:O(N×2N)) (腾讯)\"></a>3. 子集 (要求 Tc: O(N×2N) Sc:O(N×2N)) (腾讯)</h4><p><a href=\"https://leetcode-cn.com/problems/subsets/\" target=\"_blank\" rel=\"noopener\">LeetCode 第 78 题</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> subsets = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!nums.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> solution = [];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> levelResult = [];</span><br><span class=\"line\">    subsetsHelper(nums,<span class=\"number\">0</span>,levelResult,solution);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> solution;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">subsetsHelper</span>(<span class=\"params\">nums,level,lresult,solution</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//base base</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (level === nums.length) &#123;</span><br><span class=\"line\">        solution.push([].concat(lresult));</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    lresult.push(nums[level]);</span><br><span class=\"line\">    subsetsHelper(nums, level + <span class=\"number\">1</span>,lresult, solution);<span class=\"comment\">//回溯</span></span><br><span class=\"line\">    lresult.pop();</span><br><span class=\"line\">    subsetsHelper(nums, level + <span class=\"number\">1</span>, lresult, solution);<span class=\"comment\">//回溯</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-扁平化对象-虾皮\"><a href=\"#5-扁平化对象-虾皮\" class=\"headerlink\" title=\"5. 扁平化对象 (虾皮)\"></a>5. 扁平化对象 (虾皮)</h4><blockquote>\n<p>输入:</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"a\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"b\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"c\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"d\"</span>: <span class=\"number\">1</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"aa\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">  <span class=\"string\">\"c\"</span>: [</span><br><span class=\"line\">    <span class=\"number\">1</span>,</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>要求输出:</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; <span class=\"string\">'a.b.c.d'</span>: <span class=\"number\">1</span>, <span class=\"attr\">aa</span>: <span class=\"number\">2</span>, <span class=\"string\">'c[0]'</span>: <span class=\"number\">1</span>, <span class=\"string\">'c[1]'</span>: <span class=\"number\">2</span> &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">convert</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> str = <span class=\"string\">''</span>, res = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> inner = <span class=\"function\">(<span class=\"params\">obj</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> keys = <span class=\"built_in\">Object</span>.keys(obj);</span><br><span class=\"line\">    keys.forEach(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> type = <span class=\"built_in\">Object</span>.prototype.toString.call(obj[item]).slice(<span class=\"number\">8</span>, <span class=\"number\">-1</span>);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (type === <span class=\"string\">'Object'</span>) &#123;</span><br><span class=\"line\">        str += item + <span class=\"string\">'.'</span>;</span><br><span class=\"line\">        inner(obj[item], str, res);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (type === <span class=\"string\">'Array'</span>) &#123;</span><br><span class=\"line\">        obj[item].forEach(<span class=\"function\">(<span class=\"params\">items, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> key = <span class=\"string\">`<span class=\"subst\">$&#123;item&#125;</span>[<span class=\"subst\">$&#123;index&#125;</span>]`</span>;</span><br><span class=\"line\">          res[key] = items;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        str += item;</span><br><span class=\"line\">        res[str] = obj[item];</span><br><span class=\"line\">        str = <span class=\"string\">''</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> inner(obj);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(convert(obj));</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"6-归类-天猫\"><a href=\"#6-归类-天猫\" class=\"headerlink\" title=\"6. 归类 (天猫)\"></a>6. 归类 (天猫)</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> industry_list = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"string\">\"parent_ind\"</span>: <span class=\"string\">\"女装\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"连衣裙\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"女装\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"string\">\"parent_ind\"</span>: <span class=\"string\">\"女装\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"半身裙\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"string\">\"parent_ind\"</span>: <span class=\"string\">\"女装\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"A字裙\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"数码\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"string\">\"parent_ind\"</span>: <span class=\"string\">\"数码\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"电脑配件\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"string\">\"parent_ind\"</span>: <span class=\"string\">\"电脑配件\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"内存\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">];</span><br><span class=\"line\">&gt; 输出:</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">&#123;</span></span><br><span class=\"line\"><span class=\"comment\">  \"数码\": &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    \"电脑配件\": &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        \"内存\" : &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     &#125;</span></span><br><span class=\"line\"><span class=\"comment\">  &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">  \"女装\" : &#123;</span></span><br><span class=\"line\"><span class=\"comment\">     \"连衣裙\": &#123;&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">    \"半身裙\": &#123;&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">    \"A字裙\": &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">  &#125;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">convert_format</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> map = data.reduce(<span class=\"function\">(<span class=\"params\">res, v</span>) =&gt;</span> (res[v.name] = v, res), &#123;&#125;);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(map);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> item <span class=\"keyword\">of</span> data) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!item.parent_ind) &#123;</span><br><span class=\"line\">      res[item.name] = &#123;&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> item <span class=\"keyword\">of</span> data) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (item.parent_ind <span class=\"keyword\">in</span> map) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (map[item.parent_ind].parent_ind) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> path = dfs(item.name);</span><br><span class=\"line\">        <span class=\"keyword\">let</span> re = res[path[<span class=\"number\">0</span>]];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt; path.length; i++) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (i === path.length - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            re[path[i]] = &#123;&#125;;</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            re = re[path[i]];</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        res[item.parent_ind][item.name] = &#123;&#125;;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dfs</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> path = [];</span><br><span class=\"line\">    <span class=\"keyword\">const</span> inner = <span class=\"function\">(<span class=\"params\">name, path</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      path.unshift(name);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!map[name].parent_ind) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      inner(map[name].parent_ind, path);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    inner(name, path);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> path;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> result = convert_format(industry_list);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"排序篇\"><a href=\"#排序篇\" class=\"headerlink\" title=\"排序篇\"></a>排序篇</h3><h4 id=\"1-快速排序-要求-Tc-O-nlogn-Sc-O-nlogn-排序类超高频\"><a href=\"#1-快速排序-要求-Tc-O-nlogn-Sc-O-nlogn-排序类超高频\" class=\"headerlink\" title=\"1. 快速排序 (要求 Tc: O(nlogn) Sc:O(nlogn)) (排序类超高频)\"></a>1. 快速排序 (要求 Tc: O(nlogn) Sc:O(nlogn)) (排序类超高频)</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">quickSort</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (array === <span class=\"literal\">null</span> || array.length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> array;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    doQuickSort(array, <span class=\"number\">0</span>, array.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> array;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doQuickSort</span>(<span class=\"params\">array,left,right</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (left &gt;= right) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> pivotPos = partition(array,left,right);</span><br><span class=\"line\">    doQuickSort(array,left, pivotPos - <span class=\"number\">1</span>);</span><br><span class=\"line\">    doQuickSort(array,pivotPos + <span class=\"number\">1</span>, right);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">partition</span>(<span class=\"params\">array,left,right</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> pivotIdx = (left + <span class=\"built_in\">Math</span>.random() * (right - left + <span class=\"number\">1</span>)) | <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> pivot = array[pivotIdx];</span><br><span class=\"line\">\t<span class=\"comment\">// swap pivot 元素到最右边的位置</span></span><br><span class=\"line\">\tswap(array, right, pivotIdx);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> leftBound = left;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> rightBound = right - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (leftBound &lt;= rightBound) &#123;</span><br><span class=\"line\">        \t<span class=\"comment\">// [0,leftBound),(rightBound,right-1]是已探索区域，[leftBound+1,rightBound-1]是未探索区域。</span></span><br><span class=\"line\">        \t<span class=\"comment\">// 当 leftBound == rightBound时, 索引不需要检查了</span></span><br><span class=\"line\">        \t<span class=\"keyword\">if</span> (array[leftBound] &lt; pivot) &#123;</span><br><span class=\"line\">        \t\tleftBound++;</span><br><span class=\"line\">        \t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (array[rightBound] &gt;= pivot) &#123;</span><br><span class=\"line\">        \t\trightBound--;</span><br><span class=\"line\">        \t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        \t\tswap(array, leftBound, rightBound);</span><br><span class=\"line\">        \t\tleftBound++;</span><br><span class=\"line\">        \t\trightBound--;</span><br><span class=\"line\">        \t&#125;</span><br><span class=\"line\">\t&#125; <span class=\"comment\">// leftBound == rightBound + 1</span></span><br><span class=\"line\">\t<span class=\"comment\">// swap 回 pivot元素到中间的位置</span></span><br><span class=\"line\">\tswap(array, leftBound, right);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> leftBound;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">swap</span>(<span class=\"params\">array, i, j</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> tmp = array[i];</span><br><span class=\"line\">    array[i] = array[j];</span><br><span class=\"line\">    array[j] = tmp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-归并排序-要求-Tc-O-nlogn-Sc-O-n\"><a href=\"#2-归并排序-要求-Tc-O-nlogn-Sc-O-n\" class=\"headerlink\" title=\"2. 归并排序 (要求 Tc: O(nlogn) Sc:O(n))\"></a>2. 归并排序 (要求 Tc: O(nlogn) Sc:O(n))</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mergeSort</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (array.length &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> length = array.length;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> mid = <span class=\"built_in\">Math</span>.floor(length / <span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> left = mergeSort(array.slice(<span class=\"number\">0</span>,mid));</span><br><span class=\"line\">        <span class=\"keyword\">const</span> right = mergeSort(array.slice(mid,length));</span><br><span class=\"line\">        array = merge(left,right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> array;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">merge</span>(<span class=\"params\">left,right</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>,j = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = [];</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt; left.length &amp;&amp; j &lt; right.length) &#123;</span><br><span class=\"line\">        result.push(left[i] &gt; right[j] ? left[i++] : right[j++]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result.concat(i &lt; left.length ? left.slice(i) : right.slice(j));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-插入排序-要求-Tc-O-n²-Sc-O-1\"><a href=\"#3-插入排序-要求-Tc-O-n²-Sc-O-1\" class=\"headerlink\" title=\"3. 插入排序 (要求 Tc: O(n²) Sc:O(1))\"></a>3. 插入排序 (要求 Tc: O(n²) Sc:O(1))</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insertionSort</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt; array.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> j = i;</span><br><span class=\"line\">        temp = array[i];</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (j &gt; <span class=\"number\">0</span> &amp;&amp; array[j - <span class=\"number\">1</span>] &gt; temp) &#123;</span><br><span class=\"line\">            array[j] = array[j - <span class=\"number\">1</span>];</span><br><span class=\"line\">            j--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        array[j] = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> array;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://leetcode-cn.com/problems/sort-an-array/\" target=\"_blank\" rel=\"noopener\">LeetCode 第 912 题</a></p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>以上题目均为精选高频题，希望对大家有帮助.</p>\n<p> 原文地址 <a href=\"https://juejin.im/post/5e9d4eaa51882573834edfb5\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5e9d4eaa51882573834edfb5</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>文中所有题目均为精心挑选过的超高频题目，所以大家可以收藏起来</p>\n<h2 id=\"适用人群\"><a href=\"#适用人群\" class=\"headerlink\" title=\"适用人群\"></a>适用人群</h2><p>针对有一定数据结构基础 (了解链表, 二叉树, 二叉堆, 递归) 的基本概念, 并对时间空间复杂度有基本认知的。</p>\n<h2 id=\"食用指南\"><a href=\"#食用指南\" class=\"headerlink\" title=\"食用指南\"></a>食用指南</h2><p>将文中列出的每道题至少手写 3 遍</p>\n<p>面试前可以按照本文整理出来的题目直接过一遍</p>","more":"<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>文章更新频率: 除休息日外, 每天在题目下方更新一道题的题解</p>\n<p>有 LeetCode 原题的将贴上原地址，不在文章内做题目描述</p>\n<blockquote>\n<p>Tc: Time complexity (时间复杂度)</p>\n</blockquote>\n<blockquote>\n<p>Sc: Space complexity (空间复杂度)</p>\n</blockquote>\n<h2 id=\"题目类型\"><a href=\"#题目类型\" class=\"headerlink\" title=\"题目类型\"></a>题目类型</h2><h3 id=\"数组篇\"><a href=\"#数组篇\" class=\"headerlink\" title=\"数组篇\"></a>数组篇</h3><h4 id=\"1-twoSum-要求-Tc-O-n-Sc-O-n-字节跳动\"><a href=\"#1-twoSum-要求-Tc-O-n-Sc-O-n-字节跳动\" class=\"headerlink\" title=\"1.twoSum [要求 Tc: O(n) Sc:O(n)] (字节跳动)\"></a>1.twoSum [要求 Tc: O(n) Sc:O(n)] (字节跳动)</h4><p><a href=\"https://leetcode-cn.com/problems/two-sum/\" target=\"_blank\" rel=\"noopener\">LeetCode 第 1 题</a></p>\n<p>按照题目要求, 我们第一时间想到的会是两层循环暴力解法：</p>\n<p><strong>解法 1：Time = O(n²), Space = O(1)</strong></p>\n<p>思路: 遍历每个元素 nums[j]，并查找是否存在一个值与 target - nums[j] 相等的目标元素。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">twoSum</span>(<span class=\"params\">nums, target</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = i + <span class=\"number\">1</span>; j &lt; nums.length; j++) &#123;</span><br><span class=\"line\">             <span class=\"keyword\">if</span> (nums[j] == target - nums[i]) &#123;</span><br><span class=\"line\">                 <span class=\"keyword\">return</span> [i,j];</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>解法 2:Time = O(n), Space = O(n)</strong>：</p>\n<p>我们可以通过哈希表空间换时间。在进行迭代并将元素插入到表中的同时，我们回过头来检查哈希表中是否已经存在当前元素所对应的目标元素，如果存在，那我们就找到了问题的解，将其返回即可.(时间复杂度为 O(n), 空间复杂度也为 O(n))</p>\n<p>符合题目要求 bingo✌</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> twoSum = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums, target</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> reduceHash = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> reduceResult = target - nums[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (reduceHash[reduceResult] !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> [reduceHash[reduceResult], i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        reduceHash[nums[i]] = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-缺失的数字-要求-Tc-O-n-Sc-O-n-字节跳动\"><a href=\"#2-缺失的数字-要求-Tc-O-n-Sc-O-n-字节跳动\" class=\"headerlink\" title=\"2. 缺失的数字 [要求 Tc: O(n) Sc:O(n)] (字节跳动)\"></a>2. 缺失的数字 [要求 Tc: O(n) Sc:O(n)] (字节跳动)</h4><p><a href=\"https://leetcode-cn.com/problems/que-shi-de-shu-zi-lcof/\" target=\"_blank\" rel=\"noopener\">剑指 Offer 第 53 题</a></p>\n<p><strong>解法：</strong></p>\n<p>思路: 我们先把所有输入了的数字存入 hash 表, 因为给定的数组是有序的，所以可以再过一遍 hash 表，遍历过程中如果某个数字在 hash 表中不存在，则该数字就是缺失的那个数字</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> missingNumber = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> hash = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        hash[nums[i]] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> expectedNumCount = nums.length + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; expectedNumCount; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!hash[i]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(missingNumber([<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>]));<span class=\"comment\">//3</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-移动零-要求-Tc-O-n-Sc-O-1-移动后不能改变原来其他元素的相对位置-二线公司\"><a href=\"#3-移动零-要求-Tc-O-n-Sc-O-1-移动后不能改变原来其他元素的相对位置-二线公司\" class=\"headerlink\" title=\"3. 移动零 [要求 Tc: O(n) Sc:O(1), 移动后不能改变原来其他元素的相对位置] (二线公司)\"></a>3. 移动零 [要求 Tc: O(n) Sc:O(1), 移动后不能改变原来其他元素的相对位置] (二线公司)</h4><p><a href=\"https://leetcode-cn.com/problems/move-zeroes/\" target=\"_blank\" rel=\"noopener\">LeetCode 第 283 题</a></p>\n<p><strong>解法：</strong></p>\n<p><strong>思路:</strong> 双指针同向而行, fast 指针遇到非 0 就把 slow 指针位置的字符替换掉，slow 指针前进一步。直到 fast 指针把数组所有元素遍历完毕。(典型的两个挡板，三个区域思想), 再把 slow 指针后面的所有元素替换为 0。</p>\n<p>同向性质:</p>\n<p><strong>变量的物理意义:</strong> slow 的左侧不包含 slow 都是非 0 的数字，slow 的右侧包含 slow 都应该为 0，按照这个物理意义就可以达到原地算法的要求。因为快慢指针是同向而行的，所以算法为稳定算法 (不会影响元素的相对位置)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> moveZeroes = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> slow = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> fast = <span class=\"number\">0</span>; fast &lt; nums.length; fast++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[fast] !== <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            nums[slow++] = nums[fast];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (slow &lt; nums.length) &#123;</span><br><span class=\"line\">        nums[slow++] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> input = [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">8</span>,<span class=\"number\">4</span>,<span class=\"number\">3</span>,<span class=\"number\">0</span>,<span class=\"number\">5</span>,<span class=\"number\">0</span>];</span><br><span class=\"line\">moveZeroes(input);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(input);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-洗牌算法-乱序数组-要求-Tc-O-n-Sc-O-1-要求每个元素的打乱的概率相同-快手\"><a href=\"#4-洗牌算法-乱序数组-要求-Tc-O-n-Sc-O-1-要求每个元素的打乱的概率相同-快手\" class=\"headerlink\" title=\"4. 洗牌算法 (乱序数组)[要求 Tc: O(n) Sc:O(1), 要求每个元素的打乱的概率相同] (快手)\"></a>4. 洗牌算法 (乱序数组)[要求 Tc: O(n) Sc:O(1), 要求每个元素的打乱的概率相同] (快手)</h4><p><a href=\"https://leetcode-cn.com/problems/shuffle-an-array/\" target=\"_blank\" rel=\"noopener\">LeetCode 第 384 题</a></p>\n<p><strong>解法:</strong></p>\n<p><strong>思路:</strong> 本题思路就是使用 Fisher-Yates 洗牌算法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">shuffle</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> m = arr.length;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (m) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> random = (<span class=\"built_in\">Math</span>.random() * m--) | <span class=\"number\">0</span>;</span><br><span class=\"line\">        [arr[random],arr[m]] = [arr[m],arr[random]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(shuffle([<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">6</span>]));</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-两个数组的交集-要求-Tc-O-n-Sc-O-n-阿里\"><a href=\"#5-两个数组的交集-要求-Tc-O-n-Sc-O-n-阿里\" class=\"headerlink\" title=\"5. 两个数组的交集 [要求 Tc: O(n) Sc:O(n)] (阿里)\"></a>5. 两个数组的交集 [要求 Tc: O(n) Sc:O(n)] (阿里)</h4><p><a href=\"https://leetcode-cn.com/problems/intersection-of-two-arrays/\" target=\"_blank\" rel=\"noopener\">LeetCode 第 349 题</a></p>\n<p><strong>解法:</strong></p>\n<p><strong>思路:</strong> 本题思路是看 nums1 数组里是否含有 nums2 的元素，如果有就添加到结果中返回。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> res = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; nums1.length; i++) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">const</span> cur = nums1[i];</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (nums2.includes(cur)) &#123;</span><br><span class=\"line\">       res.push(cur);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.from(<span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(res));</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"6-RainbowSort-要求-Tc-O-n-Sc-O-1-盛大\"><a href=\"#6-RainbowSort-要求-Tc-O-n-Sc-O-1-盛大\" class=\"headerlink\" title=\"6.RainbowSort [要求 Tc: O(n) Sc:O(1)] (盛大)\"></a>6.RainbowSort [要求 Tc: O(n) Sc:O(1)] (盛大)</h4><p>给定一系列球，其中球的颜色只能是红色，黄色或蓝色，对球进行排序，以使所有红色球都分组在左侧，所有黄色球都分组在中间，所有蓝色球分组在右侧。</p>\n<p>例：</p>\n<blockquote>\n<p>[红] 被排序为 [红]</p>\n</blockquote>\n<blockquote>\n<p>[黄，红] 被排序为 [红，黄]</p>\n</blockquote>\n<blockquote>\n<p>[黄, 红, 红, 蓝, 黄, 红, 蓝] 被排序为 [红, 红, 红, 黄, 黄, 蓝, 蓝]</p>\n</blockquote>\n<p>假设条件:</p>\n<blockquote>\n<p>输入数组不为 null。</p>\n</blockquote>\n<p>corner case:</p>\n<p>如果输入数组的长度为零怎么办？在这种情况下，我们应该直接返回空数组。</p>\n<p><strong>解法：</strong></p>\n<p><strong>思路:</strong> 本题思路是挡板思想, 使用三个挡板四个区域的思想进行划分 (交换数组元素位置)</p>\n<p><strong>挡板的物理意义: [0-i) 全是红色,[i,j) 之间为黄色,(k-&gt;n-1] 全为蓝色，[j-k] 为未知探索区域</strong></p>\n<p>j 为快指针</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> input = [<span class=\"string\">'黄'</span>,<span class=\"string\">'红'</span>,<span class=\"string\">'红'</span>,<span class=\"string\">'蓝'</span>,<span class=\"string\">'黄'</span>,<span class=\"string\">'红'</span>,<span class=\"string\">'蓝'</span>]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">rainbowSort</span>(<span class=\"params\">rainbow</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>, k = rainbow.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (j &lt;= k) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rainbow[j] === <span class=\"string\">'红'</span>) &#123;</span><br><span class=\"line\">            swap(rainbow,i,j);</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">            j++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rainbow[j] === <span class=\"string\">'黄'</span>) &#123;</span><br><span class=\"line\">            j++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rainbow[j] === <span class=\"string\">'蓝'</span>) &#123;</span><br><span class=\"line\">            swap(rainbow, j, k); <span class=\"comment\">//这里不写j++是因为从k交换过来的元素不能保证就是黄色,为了安全起见下次循环再检查一次j位置。</span></span><br><span class=\"line\">            k--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//辅助交换函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">swap</span>(<span class=\"params\">arr,i,j</span>) </span>&#123;</span><br><span class=\"line\">    [arr[i],arr[j]] = [arr[j],arr[i]]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">rainbowSort(input);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(input);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"7-移除元素-要求-Tc-O-n-Sc-O-1\"><a href=\"#7-移除元素-要求-Tc-O-n-Sc-O-1\" class=\"headerlink\" title=\"7. 移除元素 [要求 Tc: O(n) Sc:O(1)]\"></a>7. 移除元素 [要求 Tc: O(n) Sc:O(1)]</h4><p><a href=\"https://leetcode-cn.com/problems/remove-element/\" target=\"_blank\" rel=\"noopener\">LeetCode 第 27 题</a></p>\n<p><strong>解法：</strong></p>\n<p><strong>思路:</strong> 双指针同向而行, 快指针遇到非 val 就把 slow 指针位置的字符替换掉，slow 指针前进，直到数组所有元素遍历完毕。(典型的两个挡板，三个区域思想)</p>\n<p><strong>变量的物理意义:</strong> slow 的左侧不包含 slow 都是非 val 的元素，slow 的右侧包含 slow 都应该为不包含 val 的元素，按照这个物理意义就可以达到原地算法的要求。因为快慢指针是同向而行的，所以算法为稳定算法 (不会影响元素的相对位置)</p>\n<p><strong>挡板性质:</strong></p>\n<p><strong>同向而行:</strong> slow 指针左边是处理好的元素 fast 指针右边是未知探索区域, 两个挡板中间不关注 (最后的结果不会改变元素相对位置)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> removeElement = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums, val</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> slow = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> fast = <span class=\"number\">0</span>; fast &lt; nums.length; fast++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[fast] !== val) &#123;</span><br><span class=\"line\">         nums[slow++] = nums[fast];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> slow; <span class=\"comment\">//想要拿到去除后的数组可以: nums.slice(0,slow);</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"8-按奇偶排序数组-要求-Tc-O-n-Sc-O-1-腾讯\"><a href=\"#8-按奇偶排序数组-要求-Tc-O-n-Sc-O-1-腾讯\" class=\"headerlink\" title=\"8. 按奇偶排序数组 [要求 Tc: O(n) Sc:O(1)] (腾讯)\"></a>8. 按奇偶排序数组 [要求 Tc: O(n) Sc:O(1)] (腾讯)</h4><p><a href=\"https://leetcode-cn.com/problems/sort-array-by-parity/\" target=\"_blank\" rel=\"noopener\">LeetCode 第 905 题</a></p>\n<p><strong>解法：</strong></p>\n<p><strong>思路:</strong> 继续使用挡板思想, 两个挡板三个区域, 同向而行,[0-i) 是偶数,[j-n-1] 是未探索区域</p>\n<p><strong>挡板性质:</strong></p>\n<p><strong>同向而行:</strong> slow 指针左边是处理好的元素 fast 指针右边是未知探索区域, 两个挡板中间不关注 (最后的结果不会改变元素相对位置)</p>\n<p><strong>解法 1:(不改变元素相对位置: 同向而行)</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> sortArrayByParity = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">A</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>; j &lt; A.length; j++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (A[j] % <span class=\"number\">2</span> === <span class=\"number\">0</span>) swap(A, i++, j);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> A;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">swap</span>(<span class=\"params\">arr,l,r</span>) </span>&#123;</span><br><span class=\"line\">    [arr[l],arr[r]] = [arr[r],arr[l]];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sortArrayByParity([<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>]));</span><br></pre></td></tr></table></figure>\n\n<p><strong>挡板性质:</strong></p>\n<p><strong>相向而行:</strong> left 指针左边是处理好的元素, right 指针右边也是处理好的元素, 两个挡板中间是未处理区域 (最后的结果可能会改变元素相对位置)</p>\n<p><strong>解法 2:(改变元素相对位置: 相向而行)</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> sortArrayByParityII = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">A</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, j = A.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt;= j) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (A[i] % <span class=\"number\">2</span> === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">           i++;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (A[j] % <span class=\"number\">2</span> !== <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">           j--;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">//i % 2 !== 0 &amp;&amp; j % 2 === 0</span></span><br><span class=\"line\">            swap(A,i,j);</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">            j--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> A;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">swap</span>(<span class=\"params\">arr, l, r</span>) </span>&#123;</span><br><span class=\"line\">    [arr[l], arr[r]] = [arr[r], arr[l]];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sortArrayByParityII([<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>]));</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"9-数组中出现次数超过一半的数字-要求-Tc-O-n-Sc-O-1\"><a href=\"#9-数组中出现次数超过一半的数字-要求-Tc-O-n-Sc-O-1\" class=\"headerlink\" title=\"9. 数组中出现次数超过一半的数字 [要求 Tc: O(n) Sc:O(1)]\"></a>9. 数组中出现次数超过一半的数字 [要求 Tc: O(n) Sc:O(1)]</h4><p><a href=\"https://leetcode-cn.com/problems/majority-element/\" target=\"_blank\" rel=\"noopener\">LeetCode 第 169 题</a></p>\n<p><strong>思路:</strong> 这道题属于火拼问题, 见一个 sha 一个 (抵消), 最后留下的就是超过一半的元素。</p>\n<p>先保留第一个元素，接着遍历，如果遇到和他相同的则加次数，否则就减次数，如果次数为 0 了就要换另一个元素了。</p>\n<p>比如: A B C A</p>\n<p>第一次保留 A, 用 A 跟剩下的打架，碰到不是 A 的就把 A 的个数减 1，如果遇到 A 就增加个数，直到遇到不同的元素把 A 的次数抵消完就把 A 踢下去, 并且把次数重新设置为 1。</p>\n<p>如此下去最后肯定有个多出来的就是题解了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> majorityElement = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> count = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> num = array[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt; array.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (num !== array[i]) &#123;</span><br><span class=\"line\">            count--;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (count === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                num = array[i];</span><br><span class=\"line\">                count = <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            count++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> halfValue = majorityElement([<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(halfValue); <span class=\"comment\">//1</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"10-合并两个有序数组-要求-Tc-O-m-n-Sc-O-n-腾讯\"><a href=\"#10-合并两个有序数组-要求-Tc-O-m-n-Sc-O-n-腾讯\" class=\"headerlink\" title=\"10. 合并两个有序数组 [要求 Tc: O(m + n) Sc:O(n)] (腾讯)\"></a>10. 合并两个有序数组 [要求 Tc: O(m + n) Sc:O(n)] (腾讯)</h4><p>例:</p>\n<blockquote>\n<p>输入: nums1 = [1,3], nums2 = [4,5,7]</p>\n</blockquote>\n<blockquote>\n<p>输出: [1,3,4,5,7]</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">merge</span>(<span class=\"params\">left, right</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = [];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt; left.length &amp;&amp; j &lt; right.length) &#123;</span><br><span class=\"line\">        result.push(left[i] &lt; right[j] ? left[i++] : right[j++]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt; left.length) &#123;</span><br><span class=\"line\">        result.push(left[i++]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (j &lt; right.length) &#123;</span><br><span class=\"line\">        result.push(right[j++]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> merged = merge([<span class=\"number\">1</span>,<span class=\"number\">3</span>],[<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>]);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(merged);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"11-有序数组中小于某个数的个数-要求-Tc-O-logn-Sc-O-1-今日头条\"><a href=\"#11-有序数组中小于某个数的个数-要求-Tc-O-logn-Sc-O-1-今日头条\" class=\"headerlink\" title=\"11. 有序数组中小于某个数的个数 [要求 Tc: O(logn) Sc:O(1)] (今日头条)\"></a>11. 有序数组中小于某个数的个数 [要求 Tc: O(logn) Sc:O(1)] (今日头条)</h4><p>例:</p>\n<blockquote>\n<p>输入:[1, 2, 3, 4]</p>\n</blockquote>\n<blockquote>\n<p>输入目标值: 2</p>\n</blockquote>\n<blockquote>\n<p>输出: 1</p>\n</blockquote>\n<p><strong>思路:</strong> 题目提到有序数组，第一时间就应该想到二分 (再加之复杂度要求 logn 级别)。其实这道题就是让写个二分查找, 仔细想想，你要找的那个数的下标不就代表前面有几个比他小的数字吗？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">binarySearch</span>(<span class=\"params\">array, target</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> low = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> high = array.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (low &lt;= high) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> mid = (low + (high - low) / <span class=\"number\">2</span>) | <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> middleValue = array[mid];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (middleValue &gt; target) &#123;</span><br><span class=\"line\">            high = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (middleValue &lt; target) &#123;</span><br><span class=\"line\">            low = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> minCount = binarySearch([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>], <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(minCount); <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"12-数组去重-要求-Tc-O-n-Sc-O-1\"><a href=\"#12-数组去重-要求-Tc-O-n-Sc-O-1\" class=\"headerlink\" title=\"12. 数组去重 [要求 Tc: O(n) Sc:O(1)]\"></a>12. 数组去重 [要求 Tc: O(n) Sc:O(1)]</h4><p><a href=\"https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/\" target=\"_blank\" rel=\"noopener\">LeetCode 第 26 题</a></p>\n<p>该算法要求原地算法，所以继续使用挡板思想 (没理解的可以回到上文提及处继续理解)。</p>\n<p>因为他至少有一个元素是不会重复的 (至少会保留一个元素)，所以从下标 1 开始处理。</p>\n<p><strong>解法 1:</strong> 从索引 1 开始 (处理好的元素不包含 slow 位置)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> removeDuplicates = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> slow = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> fast = <span class=\"number\">1</span>; fast &lt; arr.length; fast++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arr[fast] === arr[slow - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        arr[slow++] = arr[fast];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> slow; <span class=\"comment\">//想要拿到去除后的数组可以: arr.slice(0, slow);</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>解法 2:</strong> 从索引 0 开始,(处理好的元素包含 slow 位置)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> removeDuplicates = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> slow = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> fast = <span class=\"number\">1</span>; fast &lt; arr.length; fast++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arr[fast] === arr[slow]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        arr[++slow] = arr[fast];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> slow + <span class=\"number\">1</span>; <span class=\"comment\">//想要拿到去除后的数组可以: arr.slice(0, slow + 1);</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"13-去掉连续的-a-和-c-保留所有-b-要求-Tc-O-n-Sc-O-1-元素相对位置不变-字节跳动\"><a href=\"#13-去掉连续的-a-和-c-保留所有-b-要求-Tc-O-n-Sc-O-1-元素相对位置不变-字节跳动\" class=\"headerlink\" title=\"13. 去掉连续的 a 和 c, 保留所有 b [要求 Tc: O(n) Sc:O(1) 元素相对位置不变] (字节跳动)\"></a>13. 去掉连续的 a 和 c, 保留所有 b [要求 Tc: O(n) Sc:O(1) 元素相对位置不变] (字节跳动)</h4><p><strong>思路:</strong> 还是使用快慢指针, 同向而行</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">removeAC</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> slow = <span class=\"number\">0</span>,fast = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (fast &lt; arr.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arr[fast] === <span class=\"string\">'b'</span>) &#123;</span><br><span class=\"line\">            arr[slow++] = arr[fast++];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> begin = fast;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (fast &lt; arr.length &amp;&amp; arr[fast + <span class=\"number\">1</span>] === arr[begin]) &#123;</span><br><span class=\"line\">                fast++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fast - begin === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                arr[slow++] = arr[fast++];</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                fast++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr.slice(<span class=\"number\">0</span>,slow).join(<span class=\"string\">''</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> result = j1([<span class=\"string\">'a'</span>,<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>,<span class=\"string\">'c'</span>]);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);<span class=\"comment\">//bcb</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"14-最长公共前缀-拼多多\"><a href=\"#14-最长公共前缀-拼多多\" class=\"headerlink\" title=\"14. 最长公共前缀 (拼多多)\"></a>14. 最长公共前缀 (拼多多)</h4><blockquote>\n<p>例: [‘aaafsd’, ‘aawwewer’, ‘aaddfff’] =&gt; ‘aa’</p>\n</blockquote>\n<p><a href=\"https://leetcode-cn.com/problems/longest-common-prefix/\" target=\"_blank\" rel=\"noopener\">LeetCode 第 14 题</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">LCP</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!arr.length) &#123;   </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">''</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> ans = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> j = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (;j &lt; ans.length &amp;&amp; j &lt; arr[i].length; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ans[j] !== arr[i][j]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ans = ans.substr(<span class=\"number\">0</span>,j);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ans === <span class=\"string\">\"\"</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> result = LCP([<span class=\"string\">'aaafsd'</span>, <span class=\"string\">'aawwewer'</span>, <span class=\"string\">'aaddfff'</span>]);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"15-给定一个整数数组-a，其中-1-≤-a-i-≤-n-（n-为数组长度）-其中有些元素出现两次而其他元素出现一次-找到所有出现两次的元素-要求-Tc-O-n-Sc-O-1-字节跳动\"><a href=\"#15-给定一个整数数组-a，其中-1-≤-a-i-≤-n-（n-为数组长度）-其中有些元素出现两次而其他元素出现一次-找到所有出现两次的元素-要求-Tc-O-n-Sc-O-1-字节跳动\" class=\"headerlink\" title=\"15. 给定一个整数数组 a，其中 1 ≤ a[i] ≤ n （n 为数组长度）, 其中有些元素出现两次而其他元素出现一次, 找到所有出现两次的元素 [要求 Tc: O(n) Sc:O(1)] (字节跳动)\"></a>15. 给定一个整数数组 a，其中 1 ≤ a[i] ≤ n （n 为数组长度）, 其中有些元素出现两次而其他元素出现一次, 找到所有出现两次的元素 [要求 Tc: O(n) Sc:O(1)] (字节跳动)</h4><blockquote>\n<p>例: 输入: [4,3,2,7,8,2,3,1] 输出: [2,3]</p>\n</blockquote>\n<p>解：<strong>目前没有思路</strong></p>\n<h4 id=\"16-数组中所有元素组成的最大数是多少-作业帮\"><a href=\"#16-数组中所有元素组成的最大数是多少-作业帮\" class=\"headerlink\" title=\"16. 数组中所有元素组成的最大数是多少 (作业帮)\"></a>16. 数组中所有元素组成的最大数是多少 (作业帮)</h4><blockquote>\n<p>例: [50, 2, 5, 9] =&gt; 95502</p>\n</blockquote>\n<p><strong>思路:</strong> 我们把最大的数字依次排序肯定就是最大数 (降序排列)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> largestNumber = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    nums = nums.sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> S1 = <span class=\"string\">`<span class=\"subst\">$&#123;a&#125;</span><span class=\"subst\">$&#123;b&#125;</span>`</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> S2 = <span class=\"string\">`<span class=\"subst\">$&#123;b&#125;</span><span class=\"subst\">$&#123;a&#125;</span>`</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> S2 - S1;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nums[<span class=\"number\">0</span>] ? nums.join(<span class=\"string\">''</span>) : <span class=\"string\">'0'</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://leetcode-cn.com/problems/largest-number\" target=\"_blank\" rel=\"noopener\">LeetCode 第 179 题</a></p>\n<h3 id=\"字符串篇\"><a href=\"#字符串篇\" class=\"headerlink\" title=\"字符串篇\"></a>字符串篇</h3><h4 id=\"1-回文数-要求-Tc-O-log10n-Sc-O-1-或-Tc-O-n-Sc-O-1-腾讯\"><a href=\"#1-回文数-要求-Tc-O-log10n-Sc-O-1-或-Tc-O-n-Sc-O-1-腾讯\" class=\"headerlink\" title=\"1. 回文数 [要求 Tc: O(log10n) Sc:O(1) 或 Tc: O(n) Sc:O(1)] (腾讯)\"></a>1. 回文数 [要求 Tc: O(log10n) Sc:O(1) 或 Tc: O(n) Sc:O(1)] (腾讯)</h4><p><a href=\"https://leetcode-cn.com/problems/palindrome-number/\" target=\"_blank\" rel=\"noopener\">LeetCode 第 9 题</a></p>\n<p><strong>思路:</strong> 使用双指针一个在前，一个在后, 前后对比。遇到两个指针不同就返回 false。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">palindrome</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, j = x.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt;= j) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x[i] !== x[j]) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">           i++;</span><br><span class=\"line\">           j--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> result = palindrome(<span class=\"string\">'lol'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-反转字符串-要求-Tc-O-n-Sc-O-1\"><a href=\"#2-反转字符串-要求-Tc-O-n-Sc-O-1\" class=\"headerlink\" title=\"2. 反转字符串 [要求 Tc: O(n) Sc:O(1)]\"></a>2. 反转字符串 [要求 Tc: O(n) Sc:O(1)]</h4><p><a href=\"https://leetcode-cn.com/problems/reverse-string/\" target=\"_blank\" rel=\"noopener\">LeetCode 第 344 题</a></p>\n<p><strong>思路:</strong> 使用双指针一个在前，一个在后, 每次都交换即可</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reverseString = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> slow = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> fast = s.length - <span class=\"number\">1</span>, slow = <span class=\"number\">0</span>; fast &gt;= slow; fast--) &#123;</span><br><span class=\"line\">        swap(s, slow++, fast);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">swap</span>(<span class=\"params\">arr, l, r</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> temp = arr[l];</span><br><span class=\"line\">    arr[l] = arr[r];</span><br><span class=\"line\">    arr[r] = temp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-翻转单词顺序-要求-Tc-O-n-Sc-O-n-字节跳动\"><a href=\"#3-翻转单词顺序-要求-Tc-O-n-Sc-O-n-字节跳动\" class=\"headerlink\" title=\"3. 翻转单词顺序 [要求 Tc: O(n) Sc:O(n)] (字节跳动)\"></a>3. 翻转单词顺序 [要求 Tc: O(n) Sc:O(n)] (字节跳动)</h4><p><a href=\"https://leetcode-cn.com/problems/fan-zhuan-dan-ci-shun-xu-lcof/\" target=\"_blank\" rel=\"noopener\">剑指 Offer 第 58 题</a></p>\n<p><strong>思路:</strong> 将字符串按空格分割, 然后按照上题的方法交换单词顺序即可。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reverseWords = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> strArr = s.split(<span class=\"string\">' '</span>).filter(<span class=\"built_in\">Boolean</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> reversed = strArr;</span><br><span class=\"line\">    reverse(reversed, <span class=\"number\">0</span>, reversed.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> reversed.join(<span class=\"string\">' '</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reverse</span>(<span class=\"params\">input, left, right</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (left &gt;= right) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    swap(input, left, right);</span><br><span class=\"line\">    reverse(input, left + <span class=\"number\">1</span>, right <span class=\"number\">-1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">swap</span>(<span class=\"params\">arr, l, r</span>) </span>&#123;</span><br><span class=\"line\">    [arr[l],arr[r]] = [arr[r],arr[l]];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-有效的字母异位词-Anagram-要求-Tc-O-n-Sc-O-n\"><a href=\"#4-有效的字母异位词-Anagram-要求-Tc-O-n-Sc-O-n\" class=\"headerlink\" title=\"4. 有效的字母异位词 (Anagram) [要求 Tc: O(n) Sc:O(n)]\"></a>4. 有效的字母异位词 (Anagram) [要求 Tc: O(n) Sc:O(n)]</h4><p><a href=\"https://leetcode-cn.com/problems/valid-anagram/\" target=\"_blank\" rel=\"noopener\">LeetCode 第 242 题</a></p>\n<p><strong>思路:</strong> 我们可以使用 hash 存储每个单词出现的次数，再用另一个字符串遍历一次进行减减操作，只要次数有不等于 0 的字母则返回 false</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> isAnagram = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s, t</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s.length !== t.length) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> item <span class=\"keyword\">of</span> s) &#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span> (map.get(item)) &#123;</span><br><span class=\"line\">            map.set(item, map.get(item) + <span class=\"number\">1</span>);</span><br><span class=\"line\">    \t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            map.set(item, <span class=\"number\">1</span>);</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> item <span class=\"keyword\">of</span> t) &#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span> (map.get(item)) &#123;</span><br><span class=\"line\">            map.set(item, map.get(item) - <span class=\"number\">1</span>);</span><br><span class=\"line\">    \t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-找出字符串中出现次数最多的字母-要求-Tc-O-n-Sc-O-n\"><a href=\"#5-找出字符串中出现次数最多的字母-要求-Tc-O-n-Sc-O-n\" class=\"headerlink\" title=\"5. 找出字符串中出现次数最多的字母 [要求 Tc: O(n) Sc:O(n)]\"></a>5. 找出字符串中出现次数最多的字母 [要求 Tc: O(n) Sc:O(n)]</h4><blockquote>\n<p>例 1: 输入’abccdtc’</p>\n</blockquote>\n<blockquote>\n<p>输出: ‘c’</p>\n</blockquote>\n<blockquote>\n<p>例 2: 输入’abbbbccdtc’</p>\n</blockquote>\n<blockquote>\n<p>输出: ‘b’</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">maxCount</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> hash = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> maxCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> maxElement = <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; str.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> cur = str[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (hash[cur]) &#123;</span><br><span class=\"line\">            hash[cur]++;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            hash[cur] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (maxCount &lt; hash[cur]) &#123;</span><br><span class=\"line\">            maxElement = cur;</span><br><span class=\"line\">            maxCount = hash[cur];</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> maxElement;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> letter = maxCount(<span class=\"string\">'abccdtc'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(letter);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"6-替换空格-要求-Tc-O-n-Sc-O-1-不允许使用正则表达式-今日头条\"><a href=\"#6-替换空格-要求-Tc-O-n-Sc-O-1-不允许使用正则表达式-今日头条\" class=\"headerlink\" title=\"6. 替换空格 [要求 Tc: O(n) Sc:O(1) 不允许使用正则表达式] (今日头条)\"></a>6. 替换空格 [要求 Tc: O(n) Sc:O(1) 不允许使用正则表达式] (今日头条)</h4><p><a href=\"https://leetcode-cn.com/problems/ti-huan-kong-ge-lcof/\" target=\"_blank\" rel=\"noopener\">剑指 Offer 第 5 题</a></p>\n<p><strong>思路:</strong> 使用快慢指针, 同向而行，快指针负责判断是不是空格，慢指针左侧都是处理好的元素。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> replaceSpace = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    s = s.split(<span class=\"string\">''</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> fast = <span class=\"number\">0</span>; fast &lt; s.length; fast++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s[fast] === <span class=\"string\">' '</span>) &#123;</span><br><span class=\"line\">            s[fast] = <span class=\"string\">'%20'</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s.join(<span class=\"string\">''</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>其他解法 (不推荐面试中使用):</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> replaceSpace = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    s = s.split(<span class=\"string\">' '</span>).join(<span class=\"string\">'%20'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> replaceSpace = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    s = s.replace(<span class=\"regexp\">/\\s+/g</span>,<span class=\"string\">'%20'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"7-第一个只出现一次的字符-要求-Tc-O-n-Sc-O-n\"><a href=\"#7-第一个只出现一次的字符-要求-Tc-O-n-Sc-O-n\" class=\"headerlink\" title=\"7. 第一个只出现一次的字符 [要求 Tc: O(n) Sc:O(n)]\"></a>7. 第一个只出现一次的字符 [要求 Tc: O(n) Sc:O(n)]</h4><p><a href=\"https://leetcode-cn.com/problems/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof/\" target=\"_blank\" rel=\"noopener\">剑指 Offer 第 50 题</a></p>\n<p><strong>思路:</strong> 遍历过程中存 hash 表, 如果当前值第一次出现就设置为 false, 后续处理遍历值为 false 的, 遇到为 false 的就直接返回。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> firstUniqChar = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> hash = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> firstAppearLetter = <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s === <span class=\"string\">''</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">' '</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; s.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (hash[s[i]] === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">                hash[s[i]] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                hash[s[i]] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [key, value] <span class=\"keyword\">of</span> <span class=\"built_in\">Object</span>.entries(hash)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!value) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> key;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">' '</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"8-左旋转字符串-要求-Tc-O-n-Sc-O-n\"><a href=\"#8-左旋转字符串-要求-Tc-O-n-Sc-O-n\" class=\"headerlink\" title=\"8. 左旋转字符串 [要求 Tc: O(n) Sc:O(n)]\"></a>8. 左旋转字符串 [要求 Tc: O(n) Sc:O(n)]</h4><p><a href=\"https://leetcode-cn.com/problems/zuo-xuan-zhuan-zi-fu-chuan-lcof/\" target=\"_blank\" rel=\"noopener\">剑指 Offer 第 58 题</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reverseLeftWords = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s, n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> frontStr = s.slice(<span class=\"number\">0</span>, n);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> backStr = s.slice(n);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> backStr + frontStr;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"9-字符串全排列-要求-Tc-O-n-Sc-O-n²-阿里\"><a href=\"#9-字符串全排列-要求-Tc-O-n-Sc-O-n²-阿里\" class=\"headerlink\" title=\"9. 字符串全排列 [要求 Tc: O(n!) Sc:O(n²)] (阿里)\"></a>9. 字符串全排列 [要求 Tc: O(n!) Sc:O(n²)] (阿里)</h4><p><a href=\"https://leetcode-cn.com/problems/zi-fu-chuan-de-pai-lie-lcof/\" target=\"_blank\" rel=\"noopener\">剑指 Offer 第 38 题</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> permutation = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> solution = [];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s.length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> solution;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    permutationHelper(s, solution);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> solution;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">permutationHelper</span>(<span class=\"params\">s, solution, used = [], path = []</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (path.length === s.length) &#123;</span><br><span class=\"line\">        solution.push(path.slice(<span class=\"number\">0</span>).join(<span class=\"string\">''</span>));</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> levelSet = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; s.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!levelSet.has(s[i])) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!used[i]) &#123;</span><br><span class=\"line\">                used[i] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                levelSet.add(s[i]);</span><br><span class=\"line\">                path.push(s[i]);</span><br><span class=\"line\">                permutationHelper(s, solution, used, path);</span><br><span class=\"line\">                used[i] = <span class=\"literal\">false</span>; <span class=\"comment\">//回溯</span></span><br><span class=\"line\">                path.pop();<span class=\"comment\">//回到母节点往右走时应该删除添加过的节点,防止保留意外的结果</span></span><br><span class=\"line\">            &#125;   </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"10-合并连续数字-要求-Tc-O-n-Sc-O-1-今日头条\"><a href=\"#10-合并连续数字-要求-Tc-O-n-Sc-O-1-今日头条\" class=\"headerlink\" title=\"10. 合并连续数字 [要求 Tc: O(n) Sc:O(1)] (今日头条)\"></a>10. 合并连续数字 [要求 Tc: O(n) Sc:O(1)] (今日头条)</h4><blockquote>\n<p>题目描述:</p>\n</blockquote>\n<blockquote>\n<p>输入:[0, 2, 3, 5, 6, 7, 8, 9, 11, 13, 56, 57]</p>\n</blockquote>\n<blockquote>\n<p>输出结果：</p>\n</blockquote>\n<blockquote>\n<p>0,2-3,5-9,11,13,56-57</p>\n</blockquote>\n<p><strong>思路:</strong> 三指针, 同向而行, slow 左边的为处理好的元素, f 指针快速向前走, begin 指针记录区间开始区间, prev 指针记录区间结束位置。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">combine</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> f = <span class=\"number\">1</span>, slow = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> prev = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (f &lt; arr.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> begin = f - <span class=\"number\">1</span>;</span><br><span class=\"line\">        prev = arr[begin];</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (f &lt; arr.length &amp;&amp; arr[f] - prev === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            prev = arr[f];</span><br><span class=\"line\">            f++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (f - begin === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[f + <span class=\"number\">1</span>] - arr[f] !== <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                !begin ? arr[slow++] = arr[begin] : arr[slow++] = arr[f];</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!begin) arr[slow++] = arr[begin];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            f++;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            arr[slow++] = arr[begin] + <span class=\"string\">`-`</span> + prev;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr.slice(<span class=\"number\">0</span>, slow).join(<span class=\"string\">','</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> res = combine([<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">11</span>, <span class=\"number\">13</span>, <span class=\"number\">56</span>, <span class=\"number\">57</span>]);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(res);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"11-字符串相加-腾讯\"><a href=\"#11-字符串相加-腾讯\" class=\"headerlink\" title=\"11. 字符串相加 (腾讯)\"></a>11. 字符串相加 (腾讯)</h4><p><a href=\"https://leetcode-cn.com/problems/add-strings/\" target=\"_blank\" rel=\"noopener\">LeetCode 第 415 题</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> addStrings = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num1, num2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = [];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = num1.length - <span class=\"number\">1</span>, j = num2.length - <span class=\"number\">1</span>, carry = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &gt;= <span class=\"number\">0</span> || j &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> n1 = i &gt;= <span class=\"number\">0</span> ? num1.charAt(i) - <span class=\"number\">0</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> n2 = j &gt;= <span class=\"number\">0</span> ? num2.charAt(j) - <span class=\"number\">0</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> tmp = n1 + n2 + carry;</span><br><span class=\"line\">        carry = <span class=\"built_in\">parseInt</span>(tmp / <span class=\"number\">10</span>);<span class=\"comment\">//算出十位数</span></span><br><span class=\"line\">        res.push(tmp % <span class=\"number\">10</span>);<span class=\"comment\">//算出个位数</span></span><br><span class=\"line\">        i--; j--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(carry == <span class=\"number\">1</span>) res.push(<span class=\"string\">'1'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res.reverse().join(<span class=\"string\">''</span>)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"栈-队列篇\"><a href=\"#栈-队列篇\" class=\"headerlink\" title=\"栈 / 队列篇\"></a>栈 / 队列篇</h3><h4 id=\"1-实现一个栈，入栈-push、出栈-pop、返回最小值-min-的复杂度为-0-1-滴滴\"><a href=\"#1-实现一个栈，入栈-push、出栈-pop、返回最小值-min-的复杂度为-0-1-滴滴\" class=\"headerlink\" title=\"1. 实现一个栈，入栈 push、出栈 pop、返回最小值 min 的复杂度为 0(1) (滴滴)\"></a>1. 实现一个栈，入栈 push、出栈 pop、返回最小值 min 的复杂度为 0(1) (滴滴)</h4><p><a href=\"https://leetcode-cn.com/problems/min-stack/\" target=\"_blank\" rel=\"noopener\">LeetCode 第 115 题</a></p>\n<p><strong>思路:</strong> stack2 为存储最小值的数组, 使用同步加同步减的思路, stack1 进来的新元素比 stack2 的 top 元素大则无视, 否则 stack2 顶部的元素变成刚刚进来的小值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> MinStack = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.stack1 = [];</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.stack2 = []; </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">x</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;void&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">MinStack.prototype.push = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123; <span class=\"comment\">//同步加同步减push pop</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.stack1.push(x);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.stack2.length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.stack2.push(x);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> temp = <span class=\"keyword\">this</span>.stack2[<span class=\"keyword\">this</span>.stack2.length - <span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x &lt; temp) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.stack2.push(x)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.stack2.push(temp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;void&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">MinStack.prototype.pop = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.stack1.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.stack1.pop();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.stack2.pop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">MinStack.prototype.top = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.stack1[<span class=\"keyword\">this</span>.stack1.length - <span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">MinStack.prototype.getMin = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.stack2[<span class=\"keyword\">this</span>.stack2.length - <span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-使用两个栈实现一个队列-滴滴\"><a href=\"#2-使用两个栈实现一个队列-滴滴\" class=\"headerlink\" title=\"2. 使用两个栈实现一个队列 (滴滴)\"></a>2. 使用两个栈实现一个队列 (滴滴)</h4><p><a href=\"https://leetcode-cn.com/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof/\" target=\"_blank\" rel=\"noopener\">剑指 Offer 第 9 题</a></p>\n<p><strong>思路:</strong> 我们既然要实现队列, 那肯定就是要有其中一个栈作为辅助栈，用来倒腾另一个栈中的数据 (我们这里的 stack1 为主栈，stack2 为辅助栈);</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> CQueue = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.stack1 = [];<span class=\"comment\">//2 1</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.stack2 = [];</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.count = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">value</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;void&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">CQueue.prototype.appendTail = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"keyword\">this</span>.stack1.length) &#123; <span class=\"comment\">//如果stack1中有元素那就先把stack1中所有元素放到stack2中</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.stack2.push(<span class=\"keyword\">this</span>.stack1.pop()); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.stack1.push(value);<span class=\"comment\">//添加新的值到stack1中</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"keyword\">this</span>.stack2.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.stack1.push(<span class=\"keyword\">this</span>.stack2.pop()); <span class=\"comment\">//然后再把stack2中的元素放到stack1中</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//这几步的意思是让stack1具有队列的性质(先进先出) 因为stack2代表stack1中之前的数据，然后会压到新数据的上面</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.count++;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">CQueue.prototype.deleteHead = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.count == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.count--;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.stack1.pop();<span class=\"comment\">//使用pop栈的方法，因为咱们利用辅助栈倒腾了一下所以直接pop后结果就是按照队列的性质输出了先进的值</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-有效的括号-要求-Tc-O-n-Sc-O-n-哔哩哔哩\"><a href=\"#3-有效的括号-要求-Tc-O-n-Sc-O-n-哔哩哔哩\" class=\"headerlink\" title=\"3. 有效的括号 [要求 Tc: O(n) Sc:O(n)] (哔哩哔哩)\"></a>3. 有效的括号 [要求 Tc: O(n) Sc:O(n)] (哔哩哔哩)</h4><p><a href=\"https://leetcode-cn.com/problems/valid-parentheses/\" target=\"_blank\" rel=\"noopener\">LeetCode 第 20 题</a></p>\n<p><strong>思路:</strong> 使用栈保存括号，遇到左括号直接入栈，遇到右括号就把栈顶的弹出来和当前的右括号匹配, 如果匹配失败说明不合法直接返回 false, 最后判断栈是不是空 (是不是所有括号都抵消完毕了), 不为空也说明不合法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> isValid = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> map = &#123;</span><br><span class=\"line\">        <span class=\"string\">'&#123;'</span>: <span class=\"string\">'&#125;'</span>,</span><br><span class=\"line\">        <span class=\"string\">'('</span>: <span class=\"string\">')'</span>,</span><br><span class=\"line\">        <span class=\"string\">'['</span>: <span class=\"string\">']'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> stack = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; str.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (map[str[i]]) &#123;</span><br><span class=\"line\">            stack.push(str[i]);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (str[i] !== map[stack.pop()]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> stack.length === <span class=\"number\">0</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"链表篇\"><a href=\"#链表篇\" class=\"headerlink\" title=\"链表篇\"></a>链表篇</h3><h4 id=\"1-从尾到头打印单链表-要求-Tc-O-n-Sc-O-n\"><a href=\"#1-从尾到头打印单链表-要求-Tc-O-n-Sc-O-n\" class=\"headerlink\" title=\"1. 从尾到头打印单链表 [要求 Tc: O(n) Sc:O(n)]\"></a>1. 从尾到头打印单链表 [要求 Tc: O(n) Sc:O(n)]</h4><p><a href=\"https://leetcode-cn.com/problems/cong-wei-dao-tou-da-yin-lian-biao-lcof/\" target=\"_blank\" rel=\"noopener\">剑指 Offer 第 6 题</a></p>\n<p><strong>思路:</strong> 基于 stack 的特性 (后进先出), 所以我们从头到尾过一遍链表，最后按照栈的顺序弹出就可以得到结果。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reversePrint = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">head</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> stack = [];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> cur = head;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (cur !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        stack.push(cur.val);</span><br><span class=\"line\">        cur = cur.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> print = [];</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (stack.length) &#123;</span><br><span class=\"line\">        print.push(stack.pop())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> print;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-删除链表的倒数第-K-个结点-要求-Tc-O-L-Sc-O-1\"><a href=\"#2-删除链表的倒数第-K-个结点-要求-Tc-O-L-Sc-O-1\" class=\"headerlink\" title=\"2. 删除链表的倒数第 K 个结点 [要求 Tc: O(L) Sc:O(1)]\"></a>2. 删除链表的倒数第 K 个结点 [要求 Tc: O(L) Sc:O(1)]</h4><p><a href=\"https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/\" target=\"_blank\" rel=\"noopener\">LeetCode 第 19 题</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> removeNthFromEnd = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">head, n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> dummyNode = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>);</span><br><span class=\"line\">    dummyNode.next = head;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> fast = dummyNode, slow = dummyNode;</span><br><span class=\"line\">    <span class=\"comment\">// 快先走 n+1 步</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n--) &#123;</span><br><span class=\"line\">        fast = fast.next</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// fast、slow 一起前进</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(fast &amp;&amp; fast.next) &#123;</span><br><span class=\"line\">        fast = fast.next</span><br><span class=\"line\">        slow = slow.next</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    slow.next = slow.next.next</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dummyNode.next</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-判断单链表是否有环-要求-Tc-O-n-Sc-O-1-有赞\"><a href=\"#3-判断单链表是否有环-要求-Tc-O-n-Sc-O-1-有赞\" class=\"headerlink\" title=\"3. 判断单链表是否有环 [要求 Tc: O(n) Sc:O(1)] (有赞)\"></a>3. 判断单链表是否有环 [要求 Tc: O(n) Sc:O(1)] (有赞)</h4><p><a href=\"https://leetcode-cn.com/problems/linked-list-cycle/\" target=\"_blank\" rel=\"noopener\">LeetCode 第 141 题</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> hasCycle = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">head</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (head === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> slow = fast = head;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (fast.next !== <span class=\"literal\">null</span> &amp;&amp; fast.next.next !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        slow = slow.next;</span><br><span class=\"line\">        fast = fast.next.next;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (slow === fast) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-反转单链表-要求-Tc-O-n-Sc-O-1-链表类超高频\"><a href=\"#4-反转单链表-要求-Tc-O-n-Sc-O-1-链表类超高频\" class=\"headerlink\" title=\"4. 反转单链表 [要求 Tc: O(n) Sc:O(1)] (链表类超高频)\"></a>4. 反转单链表 [要求 Tc: O(n) Sc:O(1)] (链表类超高频)</h4><p><a href=\"https://leetcode-cn.com/problems/fan-zhuan-lian-biao-lcof/\" target=\"_blank\" rel=\"noopener\">剑指 Offer 第 24 题</a></p>\n<p><strong>反转思路如下过程:</strong></p>\n<p>原始链表: head -&gt; 2 -&gt; 3 -&gt; 4 -&gt; null</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;- <span class=\"number\">2</span>    <span class=\"number\">3</span>  -&gt;  <span class=\"number\">4</span> -&gt; <span class=\"literal\">null</span></span><br><span class=\"line\">pre(<span class=\"literal\">null</span>)    cur  next</span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"literal\">null</span>  &lt;- <span class=\"number\">2</span>  &lt;-  <span class=\"number\">3</span>      <span class=\"number\">4</span> -&gt; <span class=\"literal\">null</span></span><br><span class=\"line\">        pre    cur   next</span><br><span class=\"line\">                </span><br><span class=\"line\"><span class=\"literal\">null</span>  &lt;- <span class=\"number\">2</span>  &lt;-  <span class=\"number\">3</span>  &lt;-  <span class=\"number\">4</span>   <span class=\"literal\">null</span></span><br><span class=\"line\">                      cur  next</span><br><span class=\"line\">                pre  </span><br><span class=\"line\"><span class=\"literal\">null</span>  &lt;- <span class=\"number\">2</span>  &lt;-  <span class=\"number\">3</span>  &lt;-  <span class=\"number\">4</span>    <span class=\"literal\">null</span></span><br><span class=\"line\">                      pre   cur  next</span><br><span class=\"line\"> &lt;--------------------pre is the newHead to be returned</span><br></pre></td></tr></table></figure>\n\n<p><strong>迭代解法 (从左到右反转):</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reverseList = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">head</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (head === <span class=\"literal\">null</span> || head.next === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> pre = <span class=\"literal\">null</span>, cur = head;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (cur !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> next = cur.next;</span><br><span class=\"line\">        cur.next = pre;</span><br><span class=\"line\">        pre = cur;</span><br><span class=\"line\">        cur = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pre;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>递归解法:(从右往左反转)</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reverseList = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">head</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(head === <span class=\"literal\">null</span> || head.next === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> newHead = reverseList(head.next);</span><br><span class=\"line\">    head.next.next = head;</span><br><span class=\"line\">    head.next = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newHead;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>原始链表: 2 -&gt; 3 -&gt; null</p>\n<p>第一次调用 reverseList:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2</span>  -&gt;  <span class=\"number\">3</span> -&gt; <span class=\"literal\">null</span></span><br><span class=\"line\">head  newHead</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">head.next.next = head 干的事是: (<span class=\"number\">2</span>的next是<span class=\"number\">3</span>,将<span class=\"number\">3</span>的next指向<span class=\"number\">2</span>)：</span><br><span class=\"line\"><span class=\"number\">2</span>  &lt;-&gt;  <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">head.next = <span class=\"literal\">null</span> 干的事是:</span><br><span class=\"line\"><span class=\"literal\">null</span> &lt;- <span class=\"number\">2</span>  &lt;- <span class=\"number\">3</span></span><br><span class=\"line\">       head</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> newHead 干的事是:</span><br><span class=\"line\"><span class=\"literal\">null</span> &lt;- <span class=\"number\">2</span>  &lt;- <span class=\"number\">3</span></span><br><span class=\"line\">             newHead</span><br></pre></td></tr></table></figure>\n\n<p>第二次调用 reverseList:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2</span>  -&gt;  <span class=\"number\">3</span> -&gt; <span class=\"literal\">null</span></span><br><span class=\"line\">      head       </span><br><span class=\"line\">base <span class=\"keyword\">case</span>: <span class=\"keyword\">return</span> newHead = <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-判断两个链表是否相交，若相交，求交点-链表没有环-要求-Tc-O-m-n-Sc-O-n-字节跳动\"><a href=\"#5-判断两个链表是否相交，若相交，求交点-链表没有环-要求-Tc-O-m-n-Sc-O-n-字节跳动\" class=\"headerlink\" title=\"5. 判断两个链表是否相交，若相交，求交点 (链表没有环)[要求 Tc: O(m+n) Sc:O(n)] (字节跳动)\"></a>5. 判断两个链表是否相交，若相交，求交点 (链表没有环)[要求 Tc: O(m+n) Sc:O(n)] (字节跳动)</h4><p><a href=\"https://leetcode-cn.com/problems/intersection-of-two-linked-lists/solution/xiang-jiao-lian-biao-by-leetcode/\" target=\"_blank\" rel=\"noopener\">LeetCode 第 160 题</a></p>\n<p>headA:a+c+b<br>headB:b+c+a</p>\n<p>因为 a+c+b === b+c+a 因此终有一刻他们能相交</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> getIntersectionNode = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">headA, headB</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (headA === <span class=\"literal\">null</span> || headB === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> nodeA = headA;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> nodeB = headB;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (nodeA !== nodeB) &#123;</span><br><span class=\"line\">        nodeA = nodeA ? nodeA.next : headB;</span><br><span class=\"line\">        nodeB = nodeB ? nodeB.next : headA;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nodeA;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"6-查找单链表的中间节点，要求只能遍历一次链表-要求-Tc-O-n-Sc-O-1\"><a href=\"#6-查找单链表的中间节点，要求只能遍历一次链表-要求-Tc-O-n-Sc-O-1\" class=\"headerlink\" title=\"6. 查找单链表的中间节点，要求只能遍历一次链表 [要求 Tc: O(n) Sc:O(1)]\"></a>6. 查找单链表的中间节点，要求只能遍历一次链表 [要求 Tc: O(n) Sc:O(1)]</h4><p><a href=\"https://leetcode-cn.com/problems/middle-of-the-linked-list/\" target=\"_blank\" rel=\"noopener\">LeetCode 第 876 题</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> middleNode = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">head</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> slow = head;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> fast = head;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (fast !== <span class=\"literal\">null</span> &amp;&amp; fast.next !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        slow = slow.next;</span><br><span class=\"line\">        fast = fast.next.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> slow;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"7-合并两个有序链表，合并后依然有序-要求-Tc-O-m-n-Sc-O-1\"><a href=\"#7-合并两个有序链表，合并后依然有序-要求-Tc-O-m-n-Sc-O-1\" class=\"headerlink\" title=\"7. 合并两个有序链表，合并后依然有序 [要求 Tc: O(m+n) Sc:O(1)]\"></a>7. 合并两个有序链表，合并后依然有序 [要求 Tc: O(m+n) Sc:O(1)]</h4><p><a href=\"https://leetcode-cn.com/problems/he-bing-liang-ge-pai-xu-de-lian-biao-lcof/\" target=\"_blank\" rel=\"noopener\">剑指 Offer 第 25 题</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mergeTwoLists = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">l1, l2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> dummyHead = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> cur1 = l1;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> cur2 = l2;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> tail = dummyHead;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (cur1 !== <span class=\"literal\">null</span> &amp;&amp; cur2 !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cur1.val &lt; cur2.val) &#123;</span><br><span class=\"line\">            tail.next = cur1;</span><br><span class=\"line\">            cur1 = cur1.next;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            tail.next = cur2;</span><br><span class=\"line\">            cur2 = cur2.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        tail = tail.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cur1 !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        tail.next = cur1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cur2 !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        tail.next = cur2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dummyHead.next;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"8-查找单链表的倒数第-K-个节点，要求只能遍历一次链表-要求-Tc-O-n-Sc-O-1\"><a href=\"#8-查找单链表的倒数第-K-个节点，要求只能遍历一次链表-要求-Tc-O-n-Sc-O-1\" class=\"headerlink\" title=\"8. 查找单链表的倒数第 K 个节点，要求只能遍历一次链表 [要求 Tc: O(n) Sc:O(1)]\"></a>8. 查找单链表的倒数第 K 个节点，要求只能遍历一次链表 [要求 Tc: O(n) Sc:O(1)]</h4><p><a href=\"https://leetcode-cn.com/problems/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof/solution/mian-shi-ti-22-lian-biao-zhong-dao-shu-di-kge-j-11/\" target=\"_blank\" rel=\"noopener\">剑指 Offer 第 22 题</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> getKthFromEnd = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">head, k</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> fast = head, slow = head;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; k; i++) &#123;</span><br><span class=\"line\">        fast = fast.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (fast != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        fast = fast.next;</span><br><span class=\"line\">        slow = slow.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> slow;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"二叉树篇\"><a href=\"#二叉树篇\" class=\"headerlink\" title=\"二叉树篇\"></a>二叉树篇</h3><h4 id=\"1-二叉树的删除实现-要求-Tc-O-H-Sc-O-H-字节跳动\"><a href=\"#1-二叉树的删除实现-要求-Tc-O-H-Sc-O-H-字节跳动\" class=\"headerlink\" title=\"1. 二叉树的删除实现 [要求 Tc: O(H) Sc:O(H)] (字节跳动)\"></a>1. 二叉树的删除实现 [要求 Tc: O(H) Sc:O(H)] (字节跳动)</h4><p><a href=\"https://leetcode-cn.com/problems/delete-node-in-a-bst/\" target=\"_blank\" rel=\"noopener\">LeetCode 第 450 题</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> deleteNode = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root, key</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.root = recursionDelete(root, key);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.root;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">recursionDelete</span>(<span class=\"params\">root, key</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.val &gt; key) &#123;</span><br><span class=\"line\">        root.left = recursionDelete(root.left, key);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (root.val &lt; key) &#123;</span><br><span class=\"line\">        root.right = recursionDelete(root.right, key);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;  <span class=\"comment\">//3种情况</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root.left === <span class=\"literal\">null</span> &amp;&amp; root.right === <span class=\"literal\">null</span>) &#123; <span class=\"comment\">//1</span></span><br><span class=\"line\">            root === <span class=\"literal\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root.left === <span class=\"literal\">null</span>) &#123; <span class=\"comment\">//2</span></span><br><span class=\"line\">            root = root.right;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (root.right === <span class=\"literal\">null</span>) &#123; <span class=\"comment\">//2</span></span><br><span class=\"line\">            root = root.left;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> aux = <span class=\"literal\">null</span>; <span class=\"comment\">//3</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> current = root.right;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (current != <span class=\"literal\">null</span> &amp;&amp; current.left != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        \tcurrent = current.left;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        aux = current;</span><br><span class=\"line\">        root.val = aux.val;</span><br><span class=\"line\">        root.right = recursionDelete(root.right,aux.val);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-判断一棵树是否是平衡树-要求-Tc-O-n-Sc-O-n-字节跳动\"><a href=\"#2-判断一棵树是否是平衡树-要求-Tc-O-n-Sc-O-n-字节跳动\" class=\"headerlink\" title=\"2. 判断一棵树是否是平衡树 [要求 Tc: O(n) Sc:O(n)] (字节跳动)\"></a>2. 判断一棵树是否是平衡树 [要求 Tc: O(n) Sc:O(n)] (字节跳动)</h4><p><a href=\"https://leetcode-cn.com/problems/balanced-binary-tree/\" target=\"_blank\" rel=\"noopener\">LeetCode 第 110 题</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> isBalanced = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> lh = maxDepth(root.left);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> rh = maxDepth(root.right);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Math</span>.abs(lh - rh) &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> isBalanced(root.left) &amp;&amp; isBalanced(root.right);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">maxDepth</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> left = maxDepth(root.left);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> right = maxDepth(root.right);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.max(left, right) + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-二叉树最大深度-要求-Tc-O-n-Sc-O-n-阿里\"><a href=\"#3-二叉树最大深度-要求-Tc-O-n-Sc-O-n-阿里\" class=\"headerlink\" title=\"3. 二叉树最大深度 [要求 Tc: O(n) Sc:O(n)] (阿里)\"></a>3. 二叉树最大深度 [要求 Tc: O(n) Sc:O(n)] (阿里)</h4><p><a href=\"https://leetcode-cn.com/problems/er-cha-shu-de-shen-du-lcof/\" target=\"_blank\" rel=\"noopener\">剑指 Offer 第 55 题</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">maxDepth</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> left = maxDepth(root.left);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> right = maxDepth(root.right);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.max(left, right) + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-二叉树中和为某一值的路径-要求-Tc-O-n-Sc-O-n-字节跳动\"><a href=\"#5-二叉树中和为某一值的路径-要求-Tc-O-n-Sc-O-n-字节跳动\" class=\"headerlink\" title=\"5. 二叉树中和为某一值的路径 [要求 Tc: O(n) Sc:O(n)] (字节跳动)\"></a>5. 二叉树中和为某一值的路径 [要求 Tc: O(n) Sc:O(n)] (字节跳动)</h4><p><a href=\"https://leetcode-cn.com/problems/er-cha-shu-zhong-he-wei-mou-yi-zhi-de-lu-jing-lcof/\" target=\"_blank\" rel=\"noopener\">剑指 Offer 第 34 题</a></p>\n<p>第 34 题解:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> pathSum = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root, sum</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!root) <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">    <span class=\"keyword\">const</span> solution = [];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> path = []</span><br><span class=\"line\">    pathSumHelper(root,sum,solution,path);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> solution;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pathSumHelper</span>(<span class=\"params\">root,sum,solution,path</span>) </span>&#123;</span><br><span class=\"line\">    path.push(root.val);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root.left == <span class=\"literal\">null</span> &amp;&amp; root.right == <span class=\"literal\">null</span> &amp;&amp; calcPath(path) == sum) &#123;</span><br><span class=\"line\">        solution.push([...path]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root.left)&#123;</span><br><span class=\"line\">        pathSumHelper(root.left,sum,solution,path);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root.right)&#123;</span><br><span class=\"line\">        pathSumHelper(root.right,sum,solution,path);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    path.pop();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">calcPath</span>(<span class=\"params\">path</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> total = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i&lt;path.length;i++)&#123;</span><br><span class=\"line\">        total += path[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> total;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"6-LCA-要求-Tc-O-n-Sc-O-n-字节跳动\"><a href=\"#6-LCA-要求-Tc-O-n-Sc-O-n-字节跳动\" class=\"headerlink\" title=\"6.LCA[要求 Tc: O(n) Sc:O(n)] (字节跳动)\"></a>6.LCA[要求 Tc: O(n) Sc:O(n)] (字节跳动)</h4><p><a href=\"https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/\" target=\"_blank\" rel=\"noopener\">LeetCode 第 236 题</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> lowestCommonAncestor = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root, p, q</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!root || root.val == p.val || root.val == q.val) <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> left = lowestCommonAncestor(root.left, p, q);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> right = lowestCommonAncestor(root.right, p, q);</span><br><span class=\"line\">    <span class=\"comment\">//如果left不存在p或q就返回right的结果。如果left存在，right不存在就返回left结果。如果left和right都存在就返回根节点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(left == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> right;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(right == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> left;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"7-二叉树层序遍历-要求-Tc-O-n-Sc-O-n-必会题\"><a href=\"#7-二叉树层序遍历-要求-Tc-O-n-Sc-O-n-必会题\" class=\"headerlink\" title=\"7. 二叉树层序遍历 [要求 Tc: O(n) Sc:O(n)] (必会题)\"></a>7. 二叉树层序遍历 [要求 Tc: O(n) Sc:O(n)] (必会题)</h4><p><a href=\"https://leetcode-cn.com/problems/binary-tree-level-order-traversal/\" target=\"_blank\" rel=\"noopener\">LeetCode 第 102 题</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> levelOrder = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = [];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> queue = [root];</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (queue.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> level = [];</span><br><span class=\"line\">        <span class=\"keyword\">let</span> size = queue.length;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> cur = queue.shift();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cur.left) &#123;</span><br><span class=\"line\">                queue.push(cur.left);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cur.right) &#123;</span><br><span class=\"line\">                queue.push(cur.right);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            level.push(cur.val);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        result.push(level);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"8-是否是-BST-要求-Tc-O-n-Sc-O-n-有赞\"><a href=\"#8-是否是-BST-要求-Tc-O-n-Sc-O-n-有赞\" class=\"headerlink\" title=\"8. 是否是 BST[要求 Tc: O(n) Sc:O(n)] (有赞)\"></a>8. 是否是 BST[要求 Tc: O(n) Sc:O(n)] (有赞)</h4><p><a href=\"https://leetcode-cn.com/problems/validate-binary-search-tree/\" target=\"_blank\" rel=\"noopener\">LeetCode 第 98 题</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> isValidBST = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> min = -<span class=\"literal\">Infinity</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> max = <span class=\"literal\">Infinity</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> isValidBSTHelper(root, min, max);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isValidBSTHelper</span>(<span class=\"params\">root, min, max</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root.val &lt;= min || root.val &gt;= max) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> isValidBSTHelper(root.left, min, root.val) &amp;&amp; isValidBSTHelper(root.right, root.val, max);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"9-是否是完全二叉树-要求-Tc-O-n-Sc-O-n-字节跳动\"><a href=\"#9-是否是完全二叉树-要求-Tc-O-n-Sc-O-n-字节跳动\" class=\"headerlink\" title=\"9. 是否是完全二叉树 [要求 Tc: O(n) Sc:O(n)] (字节跳动)\"></a>9. 是否是完全二叉树 [要求 Tc: O(n) Sc:O(n)] (字节跳动)</h4><p><a href=\"https://leetcode-cn.com/problems/check-completeness-of-a-binary-tree/\" target=\"_blank\" rel=\"noopener\">LeetCode 第 958 题</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> isCompleteTree = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> queue = [root];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (queue.length) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">let</span> cur = queue.shift();</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (cur.left === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">           flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">       &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (flag) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">           queue.push(cur.left);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (cur.right === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">           flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">       &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (flag) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">           queue.push(cur.right);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"10-翻转二叉树-要求-Tc-O-n-Sc-O-n\"><a href=\"#10-翻转二叉树-要求-Tc-O-n-Sc-O-n\" class=\"headerlink\" title=\"10. 翻转二叉树 [要求 Tc: O(n) Sc:O(n)]\"></a>10. 翻转二叉树 [要求 Tc: O(n) Sc:O(n)]</h4><p><a href=\"https://leetcode-cn.com/problems/invert-binary-tree/\" target=\"_blank\" rel=\"noopener\">LeetCode 第 226 题</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> invertTree = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    invertTreeHelper(root);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">invertTreeHelper</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> tmp = root.left;</span><br><span class=\"line\">    root.left = root.right;</span><br><span class=\"line\">    root.right = tmp;</span><br><span class=\"line\">    invertTree(root.left);</span><br><span class=\"line\">    invertTree(root.right);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"11-二叉树的右视图-要求-Tc-O-n-Sc-O-n-字节跳动\"><a href=\"#11-二叉树的右视图-要求-Tc-O-n-Sc-O-n-字节跳动\" class=\"headerlink\" title=\"11. 二叉树的右视图 [要求 Tc: O(n) Sc:O(n)] (字节跳动)\"></a>11. 二叉树的右视图 [要求 Tc: O(n) Sc:O(n)] (字节跳动)</h4><p><a href=\"https://leetcode-cn.com/problems/binary-tree-right-side-view/\" target=\"_blank\" rel=\"noopener\">LeetCode 第 199 题</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> rightSideView = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = [];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> queue = [root];</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (queue.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> level = [];</span><br><span class=\"line\">        <span class=\"keyword\">let</span> size = queue.length;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> cur = queue.shift();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i === size - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                level.push(cur.val);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cur.left) &#123;</span><br><span class=\"line\">                queue.push(cur.left);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cur.right) &#123;</span><br><span class=\"line\">                queue.push(cur.right);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        result.push(level);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"12-判断对称二叉树-要求-Tc-O-n-Sc-O-n\"><a href=\"#12-判断对称二叉树-要求-Tc-O-n-Sc-O-n\" class=\"headerlink\" title=\"12. 判断对称二叉树 [要求 Tc: O(n) Sc:O(n)]\"></a>12. 判断对称二叉树 [要求 Tc: O(n) Sc:O(n)]</h4><p><a href=\"https://leetcode-cn.com/problems/symmetric-tree/\" target=\"_blank\" rel=\"noopener\">LeetCode 第 101 题</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> isSymmetric = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> isSymmetricHelper(root, root);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isSymmetricHelper</span>(<span class=\"params\">one, two</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (one === <span class=\"literal\">null</span> &amp;&amp; two === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (one === <span class=\"literal\">null</span> || two === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (one.val !== two.val) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> isSymmetricHelper(one.left,two.right) &amp;&amp; isSymmetricHelper(one.right,two.left);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"13-二叉树的锯齿形层次遍历-要求-Tc-O-n-Sc-O-n-字节跳动\"><a href=\"#13-二叉树的锯齿形层次遍历-要求-Tc-O-n-Sc-O-n-字节跳动\" class=\"headerlink\" title=\"13. 二叉树的锯齿形层次遍历 [要求 Tc: O(n) Sc:O(n)] (字节跳动)\"></a>13. 二叉树的锯齿形层次遍历 [要求 Tc: O(n) Sc:O(n)] (字节跳动)</h4><p><a href=\"https://leetcode-cn.com/problems/binary-tree-zigzag-level-order-traversal/\" target=\"_blank\" rel=\"noopener\">LeetCode 第 103 题</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> zigzagLevelOrder = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> printArr = []</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!root) <span class=\"keyword\">return</span> printArr</span><br><span class=\"line\">  <span class=\"keyword\">const</span> list = []</span><br><span class=\"line\">  list.push(&#123; <span class=\"attr\">level</span>: <span class=\"number\">0</span>, <span class=\"attr\">node</span>: root &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(list.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; level, node &#125; = list.shift()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!printArr[level]) &#123;</span><br><span class=\"line\">      printArr[level] = []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (level % <span class=\"number\">2</span> === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      printArr[level].push(node.val)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      printArr[level].unshift(node.val)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    node.left &amp;&amp; list.push(&#123; <span class=\"attr\">level</span>: level + <span class=\"number\">1</span>, <span class=\"attr\">node</span>: node.left &#125;)</span><br><span class=\"line\">    node.right &amp;&amp; list.push(&#123; <span class=\"attr\">level</span>: level + <span class=\"number\">1</span>, <span class=\"attr\">node</span>: node.right &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> printArr</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"14-构造二叉树\"><a href=\"#14-构造二叉树\" class=\"headerlink\" title=\"14. 构造二叉树\"></a>14. 构造二叉树</h4><p><a href=\"https://leetcode-cn.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/\" target=\"_blank\" rel=\"noopener\">LeetCode 第 106 题</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> buildTree = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">preorder, inorder</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">help</span>(<span class=\"params\">inorder</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!inorder|| !inorder.length) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> top = preorder.shift(), p = inorder.indexOf(top);</span><br><span class=\"line\">        <span class=\"keyword\">let</span> root = <span class=\"keyword\">new</span> TreeNode(top);</span><br><span class=\"line\">        root.left = help(inorder.slice(<span class=\"number\">0</span>, p));</span><br><span class=\"line\">        root.right = help(inorder.slice(p+<span class=\"number\">1</span>));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> help(inorder);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/\" target=\"_blank\" rel=\"noopener\">LeetCode 第 105 题</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> buildTree = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">preorder, inorder</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">help</span>(<span class=\"params\">inorder</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!inorder|| !inorder.length) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> top = preorder.shift(), p = inorder.indexOf(top);</span><br><span class=\"line\">        <span class=\"keyword\">let</span> root = <span class=\"keyword\">new</span> TreeNode(top);</span><br><span class=\"line\">        root.left = help(inorder.slice(<span class=\"number\">0</span>, p));</span><br><span class=\"line\">        root.right = help(inorder.slice(p + <span class=\"number\">1</span>));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> help(inorder);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"堆-优先队列篇\"><a href=\"#堆-优先队列篇\" class=\"headerlink\" title=\"堆 / 优先队列篇\"></a>堆 / 优先队列篇</h3><h4 id=\"1-寻找第-k-大元素-要求-Tc-O-nlogn-Sc-O-1-腾讯-字节跳动-阿里\"><a href=\"#1-寻找第-k-大元素-要求-Tc-O-nlogn-Sc-O-1-腾讯-字节跳动-阿里\" class=\"headerlink\" title=\"1. 寻找第 k 大元素 [要求 Tc: O(nlogn) Sc:O(1)] (腾讯, 字节跳动, 阿里)\"></a>1. 寻找第 k 大元素 [要求 Tc: O(nlogn) Sc:O(1)] (腾讯, 字节跳动, 阿里)</h4><p><a href=\"https://leetcode-cn.com/explore/interview/card/top-interview-questions/266/heap-stack-queue/1154/\" target=\"_blank\" rel=\"noopener\">常见题型</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"二分查找篇\"><a href=\"#二分查找篇\" class=\"headerlink\" title=\"二分查找篇\"></a>二分查找篇</h3><h4 id=\"1-查找给定值-要求-Tc-O-logn-Sc-O-1-二分查找高频\"><a href=\"#1-查找给定值-要求-Tc-O-logn-Sc-O-1-二分查找高频\" class=\"headerlink\" title=\"1. 查找给定值 [要求 Tc: O(logn) Sc:O(1)] (二分查找高频)\"></a>1. 查找给定值 [要求 Tc: O(logn) Sc:O(1)] (二分查找高频)</h4><p><a href=\"https://leetcode-cn.com/problems/binary-search/\" target=\"_blank\" rel=\"noopener\">LeetCode 第 704 题</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">binarySearch</span>(<span class=\"params\">array, target</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> right = array.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt;= right) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> mid = (left + (right - left) / <span class=\"number\">2</span>) | <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> middleValue = array[mid];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (middleValue &gt; target) &#123;</span><br><span class=\"line\">            right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (middleValue &lt; target) &#123;</span><br><span class=\"line\">            left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> index = binarySearch([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>], <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(index); <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-查找最接近目标值的值-要求-Tc-O-logn-Sc-O-1\"><a href=\"#2-查找最接近目标值的值-要求-Tc-O-logn-Sc-O-1\" class=\"headerlink\" title=\"2. 查找最接近目标值的值 [要求 Tc: O(logn) Sc:O(1)]\"></a>2. 查找最接近目标值的值 [要求 Tc: O(logn) Sc:O(1)]</h4><p>给定目标整数 T 和按升序排序的整数数组 A，找到 A 中的索引 i，以使 A [i] 最接近 T。</p>\n<p>假设条件:</p>\n<p>数组中可以有重复的元素，并且我们可以返回具有相同值的任何索引。</p>\n<p>例:</p>\n<p>A = [1,2,3]，T = 2，返回 1</p>\n<p>A =[1，4，6]，T = 3，返回 1</p>\n<p>A = [1，4，6]，T = 5，返回 1 或 2</p>\n<p>A = [1、3、3、4]，T = 2，返回 0 或 1 或 2</p>\n<p>corner case:</p>\n<p>如果 A 为空或 A 为零长度怎么办？在这种情况下，我们应该返回 - 1。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">binarySearch</span>(<span class=\"params\">array, target</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (array.length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> right = array.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt; right - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> mid = (left + (right - left) / <span class=\"number\">2</span>) | <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> middleValue = array[mid];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (middleValue === target) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (middleValue &lt; target) &#123;</span><br><span class=\"line\">            left = mid;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            right = mid;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Math</span>.abs(target - array[left]) &gt;= <span class=\"built_in\">Math</span>.abs(target - array[right])) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> right;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> left;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> index = binarySearch([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>], <span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(index); <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-第一个出现的目标值-要求-Tc-O-logn-Sc-O-1-二分查找高频\"><a href=\"#3-第一个出现的目标值-要求-Tc-O-logn-Sc-O-1-二分查找高频\" class=\"headerlink\" title=\"3. 第一个出现的目标值 [要求 Tc: O(logn) Sc:O(1)] (二分查找高频)\"></a>3. 第一个出现的目标值 [要求 Tc: O(logn) Sc:O(1)] (二分查找高频)</h4><p>给定目标整数 T 和按升序排序的整数数组 A，请找到 A 中 T 首次出现的索引，如果没有这样的索引，则返回 - 1。</p>\n<p>假设条件</p>\n<p>数组中可以有重复的元素。</p>\n<p>例:</p>\n<p>A = [1,2,3]，T = 2，返回 1</p>\n<p>A = [1,2,3]，T = 4，返回 - 1</p>\n<p>A = [1,2,2,2,3]，T = 2，返回 1</p>\n<p>corner case:</p>\n<p>如果 A 为零或长度为零的 A 怎么办？在这种情况下，我们应该返回 - 1。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">binarySearch</span>(<span class=\"params\">array, target</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (array.length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> right = array.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt; right - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> mid = (left + (right - left) / <span class=\"number\">2</span>) | <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> middleValue = array[mid];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (middleValue === target) &#123;</span><br><span class=\"line\">            right = mid;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (middleValue &lt; target) &#123;</span><br><span class=\"line\">            left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            right = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> array[right] === target ? right : array[left] === target ? left : <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(binarySearch([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>], <span class=\"number\">2</span>)); <span class=\"comment\">//1</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-查找最接近目标值的-k-个数-要求-Tc-O-logn-k-Sc-O-1\"><a href=\"#4-查找最接近目标值的-k-个数-要求-Tc-O-logn-k-Sc-O-1\" class=\"headerlink\" title=\"4. 查找最接近目标值的 k 个数 [要求 Tc: O(logn + k) Sc:O(1)]\"></a>4. 查找最接近目标值的 k 个数 [要求 Tc: O(logn + k) Sc:O(1)]</h4><p>给定目标整数 T，非负整数 K 和按升序排序的整数数组 A，找到 A 中最接近 T 的 K 个数字。 如果存在平局，则始终首选较小的元素。</p>\n<p>假设条件:</p>\n<p>A 不为空 K 保证大于等于 0，K 保证小于等于 A.length 返回大小为 K 的整数数组，其中包含 A 中的 K 个最接近的数字（不是索引），并按数字和 T 之间的差值升序排列。</p>\n<p>例:</p>\n<p>A = [1，2，3]，T = 2，K = 3，返回 [2，1，3] 或[2，3，1]</p>\n<p>A = [1，4，6，8]，T = 3，K = 3，返回 [4，1，6]</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">binarySearch</span>(<span class=\"params\">array, target, k</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (array.length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> right = array.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt; right - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> mid = (left + (right - left) / <span class=\"number\">2</span>) | <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> middleValue = array[mid];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (middleValue === target) &#123;</span><br><span class=\"line\">            right = mid;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (middleValue &lt; target) &#123;</span><br><span class=\"line\">            left = mid;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            right = mid;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// post-processing find the closest number</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> closeIdx = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Math</span>.abs(array[left] - target) &lt;= <span class=\"built_in\">Math</span>.abs(array[right] - target)) &#123;</span><br><span class=\"line\">    \tcloseIdx = left;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    \tcloseIdx = right;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// These two should be the closest to target</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(k);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> l = closeIdx;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> r = closeIdx + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">// this is a typical merge operation</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; k; i++) &#123;</span><br><span class=\"line\">    \t<span class=\"comment\">// we can advance the left pointer when:</span></span><br><span class=\"line\">    \t<span class=\"comment\">// 1. right pointer is already out of bound</span></span><br><span class=\"line\">    \t<span class=\"comment\">// 2. right pointer is not out of bound, left pointer is not out of bound and array[left] is closer to target.</span></span><br><span class=\"line\">    \t<span class=\"keyword\">if</span> (r &gt;= array.length) &#123;<span class=\"comment\">//can be merged two conditions</span></span><br><span class=\"line\">            result[i] = array[l--];</span><br><span class=\"line\">    \t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (l &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            result[i] = array[r++];</span><br><span class=\"line\">    \t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">Math</span>.abs(array[l] - target) &lt;= <span class=\"built_in\">Math</span>.abs(array[r] - target)) &#123;</span><br><span class=\"line\">            result[i] = array[l--];</span><br><span class=\"line\">    \t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            result[i] = array[r++];</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(binarySearch([<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>], <span class=\"number\">3</span>, <span class=\"number\">3</span>)); <span class=\"comment\">// [4，1，6]</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-有一个排序数组，返回第一个比目标数字小的数-要求-Tc-O-logn-Sc-O-1-快手\"><a href=\"#5-有一个排序数组，返回第一个比目标数字小的数-要求-Tc-O-logn-Sc-O-1-快手\" class=\"headerlink\" title=\"5. 有一个排序数组，返回第一个比目标数字小的数 (要求: Tc: O(logn) Sc:O(1)) (快手)\"></a>5. 有一个排序数组，返回第一个比目标数字小的数 (要求: Tc: O(logn) Sc:O(1)) (快手)</h4><h3 id=\"动态规划篇\"><a href=\"#动态规划篇\" class=\"headerlink\" title=\"动态规划篇\"></a>动态规划篇</h3><h4 id=\"1-斐波那契数列-要求-Tc-O-n-Sc-O-n-O-1-动态规划类超高频\"><a href=\"#1-斐波那契数列-要求-Tc-O-n-Sc-O-n-O-1-动态规划类超高频\" class=\"headerlink\" title=\"1. 斐波那契数列 (要求 Tc: O(n) Sc:O(n)/O(1)) (动态规划类超高频)\"></a>1. 斐波那契数列 (要求 Tc: O(n) Sc:O(n)/O(1)) (动态规划类超高频)</h4><p><a href=\"https://leetcode-cn.com/problems/fei-bo-na-qi-shu-lie-lcof/solution/mian-shi-ti-10-i-fei-bo-na-qi-shu-lie-dong-tai-gui/\" target=\"_blank\" rel=\"noopener\">LeetCode 第 704 题</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fib = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a = <span class=\"number\">0</span>, b = <span class=\"number\">1</span>, sum;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        sum = a + b;</span><br><span class=\"line\">        a = b;</span><br><span class=\"line\">        b = sum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-爬楼梯-要求-Tc-O-n-Sc-O-n-O-1-动态规划类超高频\"><a href=\"#2-爬楼梯-要求-Tc-O-n-Sc-O-n-O-1-动态规划类超高频\" class=\"headerlink\" title=\"2. 爬楼梯 (要求 Tc: O(n) Sc:O(n)/O(1)) (动态规划类超高频)\"></a>2. 爬楼梯 (要求 Tc: O(n) Sc:O(n)/O(1)) (动态规划类超高频)</h4><p><a href=\"https://leetcode-cn.com/problems/climbing-stairs/\" target=\"_blank\" rel=\"noopener\">LeetCode 第 70 题</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> climbStairs = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> dp = [];</span><br><span class=\"line\">    dp[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    dp[<span class=\"number\">2</span>] = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">3</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        dp[i] = dp[i - <span class=\"number\">1</span>] + dp[i - <span class=\"number\">2</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[n];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"递归篇\"><a href=\"#递归篇\" class=\"headerlink\" title=\"递归篇\"></a>递归篇</h3><h4 id=\"1-岛屿数量-要求-Tc-O-MN-Sc-O-MN-微信\"><a href=\"#1-岛屿数量-要求-Tc-O-MN-Sc-O-MN-微信\" class=\"headerlink\" title=\"1. 岛屿数量 (要求 Tc: O(MN) Sc:O(MN)) (微信)\"></a>1. 岛屿数量 (要求 Tc: O(MN) Sc:O(MN)) (微信)</h4><p><a href=\"https://leetcode-cn.com/problems/number-of-islands/\" target=\"_blank\" rel=\"noopener\">LeetCode 第 200 题</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> dfs = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">grid, i, j</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 把当前项变为0, 防止重新查找</span></span><br><span class=\"line\">  grid[i][j] = <span class=\"number\">0</span>;     </span><br><span class=\"line\">  <span class=\"comment\">// 当前项 上下左右检查</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (grid[i - <span class=\"number\">1</span>] &amp;&amp; grid[i - <span class=\"number\">1</span>][j] == <span class=\"number\">1</span>) dfs(grid, i - <span class=\"number\">1</span>, j);  <span class=\"comment\">// 上</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (grid[i + <span class=\"number\">1</span>] &amp;&amp; grid[i + <span class=\"number\">1</span>][j] == <span class=\"number\">1</span>) dfs(grid, i + <span class=\"number\">1</span>, j);  <span class=\"comment\">// 下</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (grid[i][j - <span class=\"number\">1</span>] &amp;&amp; grid[i][j - <span class=\"number\">1</span>] == <span class=\"number\">1</span>) dfs(grid, i, j - <span class=\"number\">1</span>);  <span class=\"comment\">// 左</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (grid[i][j + <span class=\"number\">1</span>] &amp;&amp; grid[i][j + <span class=\"number\">1</span>] == <span class=\"number\">1</span>) dfs(grid, i, j + <span class=\"number\">1</span>);  <span class=\"comment\">// 右</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> numIslands = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">grid</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (grid.length &lt; <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> islands = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; grid.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; grid[<span class=\"number\">0</span>].length; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (grid[i][j] == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        islands++;             <span class=\"comment\">// 岛屿加1</span></span><br><span class=\"line\">        dfs(grid, i, j);       <span class=\"comment\">// 寻找与当前项相邻的 1 并把它们变成0</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> islands;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-从一个数组中找出-N-个数，其和为-M-的所有可能-不能重复使用已经使用过的元素-今日头条\"><a href=\"#2-从一个数组中找出-N-个数，其和为-M-的所有可能-不能重复使用已经使用过的元素-今日头条\" class=\"headerlink\" title=\"2. 从一个数组中找出 N 个数，其和为 M 的所有可能 (不能重复使用已经使用过的元素) (今日头条)\"></a>2. 从一个数组中找出 N 个数，其和为 M 的所有可能 (不能重复使用已经使用过的元素) (今日头条)</h4><p><a href=\"https://blog.csdn.net/weixin_34130269/article/details/91382220\" target=\"_blank\" rel=\"noopener\">参考题解 1</a></p>\n<p><a href=\"https://juejin.im/post/5e46425f51882549652d4580#heading-8\" target=\"_blank\" rel=\"noopener\">参考题解 2</a></p>\n<h4 id=\"3-子集-要求-Tc-O-N×2N-Sc-O-N×2N-腾讯\"><a href=\"#3-子集-要求-Tc-O-N×2N-Sc-O-N×2N-腾讯\" class=\"headerlink\" title=\"3. 子集 (要求 Tc: O(N×2N) Sc:O(N×2N)) (腾讯)\"></a>3. 子集 (要求 Tc: O(N×2N) Sc:O(N×2N)) (腾讯)</h4><p><a href=\"https://leetcode-cn.com/problems/subsets/\" target=\"_blank\" rel=\"noopener\">LeetCode 第 78 题</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> subsets = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!nums.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> solution = [];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> levelResult = [];</span><br><span class=\"line\">    subsetsHelper(nums,<span class=\"number\">0</span>,levelResult,solution);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> solution;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">subsetsHelper</span>(<span class=\"params\">nums,level,lresult,solution</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//base base</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (level === nums.length) &#123;</span><br><span class=\"line\">        solution.push([].concat(lresult));</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    lresult.push(nums[level]);</span><br><span class=\"line\">    subsetsHelper(nums, level + <span class=\"number\">1</span>,lresult, solution);<span class=\"comment\">//回溯</span></span><br><span class=\"line\">    lresult.pop();</span><br><span class=\"line\">    subsetsHelper(nums, level + <span class=\"number\">1</span>, lresult, solution);<span class=\"comment\">//回溯</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-扁平化对象-虾皮\"><a href=\"#5-扁平化对象-虾皮\" class=\"headerlink\" title=\"5. 扁平化对象 (虾皮)\"></a>5. 扁平化对象 (虾皮)</h4><blockquote>\n<p>输入:</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"a\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"b\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"c\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"d\"</span>: <span class=\"number\">1</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"aa\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">  <span class=\"string\">\"c\"</span>: [</span><br><span class=\"line\">    <span class=\"number\">1</span>,</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>要求输出:</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; <span class=\"string\">'a.b.c.d'</span>: <span class=\"number\">1</span>, <span class=\"attr\">aa</span>: <span class=\"number\">2</span>, <span class=\"string\">'c[0]'</span>: <span class=\"number\">1</span>, <span class=\"string\">'c[1]'</span>: <span class=\"number\">2</span> &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">convert</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> str = <span class=\"string\">''</span>, res = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> inner = <span class=\"function\">(<span class=\"params\">obj</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> keys = <span class=\"built_in\">Object</span>.keys(obj);</span><br><span class=\"line\">    keys.forEach(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> type = <span class=\"built_in\">Object</span>.prototype.toString.call(obj[item]).slice(<span class=\"number\">8</span>, <span class=\"number\">-1</span>);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (type === <span class=\"string\">'Object'</span>) &#123;</span><br><span class=\"line\">        str += item + <span class=\"string\">'.'</span>;</span><br><span class=\"line\">        inner(obj[item], str, res);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (type === <span class=\"string\">'Array'</span>) &#123;</span><br><span class=\"line\">        obj[item].forEach(<span class=\"function\">(<span class=\"params\">items, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> key = <span class=\"string\">`<span class=\"subst\">$&#123;item&#125;</span>[<span class=\"subst\">$&#123;index&#125;</span>]`</span>;</span><br><span class=\"line\">          res[key] = items;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        str += item;</span><br><span class=\"line\">        res[str] = obj[item];</span><br><span class=\"line\">        str = <span class=\"string\">''</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> inner(obj);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(convert(obj));</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"6-归类-天猫\"><a href=\"#6-归类-天猫\" class=\"headerlink\" title=\"6. 归类 (天猫)\"></a>6. 归类 (天猫)</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> industry_list = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"string\">\"parent_ind\"</span>: <span class=\"string\">\"女装\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"连衣裙\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"女装\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"string\">\"parent_ind\"</span>: <span class=\"string\">\"女装\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"半身裙\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"string\">\"parent_ind\"</span>: <span class=\"string\">\"女装\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"A字裙\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"数码\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"string\">\"parent_ind\"</span>: <span class=\"string\">\"数码\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"电脑配件\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"string\">\"parent_ind\"</span>: <span class=\"string\">\"电脑配件\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"内存\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">];</span><br><span class=\"line\">&gt; 输出:</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">&#123;</span></span><br><span class=\"line\"><span class=\"comment\">  \"数码\": &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    \"电脑配件\": &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        \"内存\" : &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     &#125;</span></span><br><span class=\"line\"><span class=\"comment\">  &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">  \"女装\" : &#123;</span></span><br><span class=\"line\"><span class=\"comment\">     \"连衣裙\": &#123;&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">    \"半身裙\": &#123;&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">    \"A字裙\": &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">  &#125;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">convert_format</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> map = data.reduce(<span class=\"function\">(<span class=\"params\">res, v</span>) =&gt;</span> (res[v.name] = v, res), &#123;&#125;);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(map);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> item <span class=\"keyword\">of</span> data) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!item.parent_ind) &#123;</span><br><span class=\"line\">      res[item.name] = &#123;&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> item <span class=\"keyword\">of</span> data) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (item.parent_ind <span class=\"keyword\">in</span> map) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (map[item.parent_ind].parent_ind) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> path = dfs(item.name);</span><br><span class=\"line\">        <span class=\"keyword\">let</span> re = res[path[<span class=\"number\">0</span>]];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt; path.length; i++) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (i === path.length - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            re[path[i]] = &#123;&#125;;</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            re = re[path[i]];</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        res[item.parent_ind][item.name] = &#123;&#125;;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dfs</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> path = [];</span><br><span class=\"line\">    <span class=\"keyword\">const</span> inner = <span class=\"function\">(<span class=\"params\">name, path</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      path.unshift(name);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!map[name].parent_ind) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      inner(map[name].parent_ind, path);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    inner(name, path);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> path;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> result = convert_format(industry_list);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"排序篇\"><a href=\"#排序篇\" class=\"headerlink\" title=\"排序篇\"></a>排序篇</h3><h4 id=\"1-快速排序-要求-Tc-O-nlogn-Sc-O-nlogn-排序类超高频\"><a href=\"#1-快速排序-要求-Tc-O-nlogn-Sc-O-nlogn-排序类超高频\" class=\"headerlink\" title=\"1. 快速排序 (要求 Tc: O(nlogn) Sc:O(nlogn)) (排序类超高频)\"></a>1. 快速排序 (要求 Tc: O(nlogn) Sc:O(nlogn)) (排序类超高频)</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">quickSort</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (array === <span class=\"literal\">null</span> || array.length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> array;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    doQuickSort(array, <span class=\"number\">0</span>, array.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> array;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doQuickSort</span>(<span class=\"params\">array,left,right</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (left &gt;= right) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> pivotPos = partition(array,left,right);</span><br><span class=\"line\">    doQuickSort(array,left, pivotPos - <span class=\"number\">1</span>);</span><br><span class=\"line\">    doQuickSort(array,pivotPos + <span class=\"number\">1</span>, right);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">partition</span>(<span class=\"params\">array,left,right</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> pivotIdx = (left + <span class=\"built_in\">Math</span>.random() * (right - left + <span class=\"number\">1</span>)) | <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> pivot = array[pivotIdx];</span><br><span class=\"line\">\t<span class=\"comment\">// swap pivot 元素到最右边的位置</span></span><br><span class=\"line\">\tswap(array, right, pivotIdx);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> leftBound = left;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> rightBound = right - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (leftBound &lt;= rightBound) &#123;</span><br><span class=\"line\">        \t<span class=\"comment\">// [0,leftBound),(rightBound,right-1]是已探索区域，[leftBound+1,rightBound-1]是未探索区域。</span></span><br><span class=\"line\">        \t<span class=\"comment\">// 当 leftBound == rightBound时, 索引不需要检查了</span></span><br><span class=\"line\">        \t<span class=\"keyword\">if</span> (array[leftBound] &lt; pivot) &#123;</span><br><span class=\"line\">        \t\tleftBound++;</span><br><span class=\"line\">        \t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (array[rightBound] &gt;= pivot) &#123;</span><br><span class=\"line\">        \t\trightBound--;</span><br><span class=\"line\">        \t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        \t\tswap(array, leftBound, rightBound);</span><br><span class=\"line\">        \t\tleftBound++;</span><br><span class=\"line\">        \t\trightBound--;</span><br><span class=\"line\">        \t&#125;</span><br><span class=\"line\">\t&#125; <span class=\"comment\">// leftBound == rightBound + 1</span></span><br><span class=\"line\">\t<span class=\"comment\">// swap 回 pivot元素到中间的位置</span></span><br><span class=\"line\">\tswap(array, leftBound, right);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> leftBound;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">swap</span>(<span class=\"params\">array, i, j</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> tmp = array[i];</span><br><span class=\"line\">    array[i] = array[j];</span><br><span class=\"line\">    array[j] = tmp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-归并排序-要求-Tc-O-nlogn-Sc-O-n\"><a href=\"#2-归并排序-要求-Tc-O-nlogn-Sc-O-n\" class=\"headerlink\" title=\"2. 归并排序 (要求 Tc: O(nlogn) Sc:O(n))\"></a>2. 归并排序 (要求 Tc: O(nlogn) Sc:O(n))</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mergeSort</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (array.length &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> length = array.length;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> mid = <span class=\"built_in\">Math</span>.floor(length / <span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> left = mergeSort(array.slice(<span class=\"number\">0</span>,mid));</span><br><span class=\"line\">        <span class=\"keyword\">const</span> right = mergeSort(array.slice(mid,length));</span><br><span class=\"line\">        array = merge(left,right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> array;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">merge</span>(<span class=\"params\">left,right</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>,j = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = [];</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt; left.length &amp;&amp; j &lt; right.length) &#123;</span><br><span class=\"line\">        result.push(left[i] &gt; right[j] ? left[i++] : right[j++]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result.concat(i &lt; left.length ? left.slice(i) : right.slice(j));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-插入排序-要求-Tc-O-n²-Sc-O-1\"><a href=\"#3-插入排序-要求-Tc-O-n²-Sc-O-1\" class=\"headerlink\" title=\"3. 插入排序 (要求 Tc: O(n²) Sc:O(1))\"></a>3. 插入排序 (要求 Tc: O(n²) Sc:O(1))</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insertionSort</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt; array.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> j = i;</span><br><span class=\"line\">        temp = array[i];</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (j &gt; <span class=\"number\">0</span> &amp;&amp; array[j - <span class=\"number\">1</span>] &gt; temp) &#123;</span><br><span class=\"line\">            array[j] = array[j - <span class=\"number\">1</span>];</span><br><span class=\"line\">            j--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        array[j] = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> array;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://leetcode-cn.com/problems/sort-an-array/\" target=\"_blank\" rel=\"noopener\">LeetCode 第 912 题</a></p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>以上题目均为精选高频题，希望对大家有帮助.</p>\n<p> 原文地址 <a href=\"https://juejin.im/post/5e9d4eaa51882573834edfb5\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5e9d4eaa51882573834edfb5</a></p>"},{"layout":"[post]","title":"页面性能优化","date":"2019-10-11T14:00:05.000Z","_content":"## 页面提升性能的方法有哪些？\n1. 资源压缩合并，减少HTTP请求\n2. 非核心代码异步加载-->异步加载的方式-->异步加载的区别\n3. 利用浏览器缓存-->缓存的分类-->缓存的原理\n4. 使用CDN\n5. 预解析DNS\n<!-- more -->\n## 异步加载\n### 异步加载的方式\n#### 动态脚本加载\n\n```html\n<script src=\"script.js\"></script>\n```\n没有 defer 或 async，浏览器会立即加载并执行指定的脚本，“立即”指的是在渲染该 script 标签之下的文档元素之前，也就是说不等待后续载入的文档元素，读到就加载并执行。\n#### async\n\n```html\n<script async src=\"script.js\"></script>\n```\n有 async，加载和渲染后续文档元素的过程将和 script.js 的加载与执行并行进行（异步）。\n####  defer\n\n```\n<script defer src=\"myscript.js\"></script>\n```\n有 defer，加载后续文档元素的过程将和 script.js 的加载并行进行（异步），但是 script.js 的执行要在所有元素解析完成之后，DOMContentLoaded 事件触发之前完成。\n\n![image](youhua1.png)\n\n### 异步加载的区别\n1. defer 和 async 在网络读取（下载）这块儿是一样的，都是异步的（相较于 HTML 解析）\n2. 它俩的差别在于脚本下载完之后何时执行，显然 defer 是最接近我们对于应用脚本加载和执行的要求的\n3. 关于 defer，此图未尽之处在于它是按照加载顺序执行脚本的，这一点要善加利用\n4. async 则是一个乱序执行的主，反正对它来说脚本的加载和执行是紧紧挨着的，所以不管你声明的顺序如何，只要它加载完了就会立刻执行\n5. 仔细想想，async 对于应用脚本的用处不大，因为它完全不考虑依赖（哪怕是最低级的顺序执行），不过它对于那些可以不依赖任何脚本或不被任何脚本依赖的脚本来说却是非常合适的，最典型的例子：Google Analytics\n\n## 浏览器缓存\n\n### 缓存的分类\n浏览器的缓存分类有两个：\n1. 强缓存\n2. 协商缓存\n\n### 强缓存\n什么是强缓存？强在哪？其实强是强制的意思。当浏览器去请求某个文件的时候，服务端就在respone header里面对该文件做了缓存配置。缓存的时间、缓存类型都由服务端控制。\n#### Expires\nExpires: Thu, 01 Dec 1994 16:00:00 GMT \n使用的是本地时间和服务器时间做对比\n#### Cache-Control\n1. cache-control: max-age=xxxx，public\n客户端和代理服务器都可以缓存该资源；\n客户端在xxx秒的有效期内，如果有请求该资源的需求的话就直接读取缓存,statu code:200 ，如果用户做了刷新操作，就向服务器发起http请求\n\n2. cache-control: max-age=xxxx，private\n只让客户端可以缓存该资源；代理服务器不缓存\n客户端在xxx秒内直接读取缓存,statu code:200\n\n3. cache-control: max-age=xxxx，immutable\n客户端在xxx秒的有效期内，如果有请求该资源的需求的话就直接读取缓存,statu code:200 ，即使用户做了刷新操作，也不向服务器发起http请求\n\n4. cache-control: no-cache\n跳过设置强缓存，但是不妨碍设置协商缓存；一般如果你做了强缓存，只有在强缓存失效了才走协商缓存的，设置了no-cache就不会走强缓存了，每次请求都回询问服务端。\n\n5. cache-control: no-store\n不缓存，这个会让客户端、服务器都不缓存，也就没有所谓的强缓存、协商缓存了。\n\n**Cache-Control优先于Expires**\n### 协商缓存\n上面说到的强缓存就是给资源设置个过期时间，客户端每次请求资源时都会看是否过期；只有在过期才会去询问服务器。所以，强缓存就是为了给客户端自给自足用的。而当某天，客户端请求该资源时发现其过期了，这是就会去请求服务器了，而这时候去请求服务器的这过程就可以设置协商缓存。这时候，协商缓存就是需要客户端和服务器两端进行交互的。\n\n#### Last-Modified（服务器下发值） If-Modified-Since（浏览器请求头）\nLast-Modified：上次修改时间\n每次请求加上上次返回的修改时间，服务器进行对比，如果资源正确，返回304，使用缓存。\n#### Etag（Hash值） If-None-Match\n每次请求加上之前返回的hash值，如果正确，则返回304，使用缓存。\n","source":"_posts/页面性能优化.md","raw":"---\nlayout: '[post]'\ntitle: 页面性能优化\ndate: 2019-10-11 22:00:05\ntags: 前端性能优化\n---\n## 页面提升性能的方法有哪些？\n1. 资源压缩合并，减少HTTP请求\n2. 非核心代码异步加载-->异步加载的方式-->异步加载的区别\n3. 利用浏览器缓存-->缓存的分类-->缓存的原理\n4. 使用CDN\n5. 预解析DNS\n<!-- more -->\n## 异步加载\n### 异步加载的方式\n#### 动态脚本加载\n\n```html\n<script src=\"script.js\"></script>\n```\n没有 defer 或 async，浏览器会立即加载并执行指定的脚本，“立即”指的是在渲染该 script 标签之下的文档元素之前，也就是说不等待后续载入的文档元素，读到就加载并执行。\n#### async\n\n```html\n<script async src=\"script.js\"></script>\n```\n有 async，加载和渲染后续文档元素的过程将和 script.js 的加载与执行并行进行（异步）。\n####  defer\n\n```\n<script defer src=\"myscript.js\"></script>\n```\n有 defer，加载后续文档元素的过程将和 script.js 的加载并行进行（异步），但是 script.js 的执行要在所有元素解析完成之后，DOMContentLoaded 事件触发之前完成。\n\n![image](youhua1.png)\n\n### 异步加载的区别\n1. defer 和 async 在网络读取（下载）这块儿是一样的，都是异步的（相较于 HTML 解析）\n2. 它俩的差别在于脚本下载完之后何时执行，显然 defer 是最接近我们对于应用脚本加载和执行的要求的\n3. 关于 defer，此图未尽之处在于它是按照加载顺序执行脚本的，这一点要善加利用\n4. async 则是一个乱序执行的主，反正对它来说脚本的加载和执行是紧紧挨着的，所以不管你声明的顺序如何，只要它加载完了就会立刻执行\n5. 仔细想想，async 对于应用脚本的用处不大，因为它完全不考虑依赖（哪怕是最低级的顺序执行），不过它对于那些可以不依赖任何脚本或不被任何脚本依赖的脚本来说却是非常合适的，最典型的例子：Google Analytics\n\n## 浏览器缓存\n\n### 缓存的分类\n浏览器的缓存分类有两个：\n1. 强缓存\n2. 协商缓存\n\n### 强缓存\n什么是强缓存？强在哪？其实强是强制的意思。当浏览器去请求某个文件的时候，服务端就在respone header里面对该文件做了缓存配置。缓存的时间、缓存类型都由服务端控制。\n#### Expires\nExpires: Thu, 01 Dec 1994 16:00:00 GMT \n使用的是本地时间和服务器时间做对比\n#### Cache-Control\n1. cache-control: max-age=xxxx，public\n客户端和代理服务器都可以缓存该资源；\n客户端在xxx秒的有效期内，如果有请求该资源的需求的话就直接读取缓存,statu code:200 ，如果用户做了刷新操作，就向服务器发起http请求\n\n2. cache-control: max-age=xxxx，private\n只让客户端可以缓存该资源；代理服务器不缓存\n客户端在xxx秒内直接读取缓存,statu code:200\n\n3. cache-control: max-age=xxxx，immutable\n客户端在xxx秒的有效期内，如果有请求该资源的需求的话就直接读取缓存,statu code:200 ，即使用户做了刷新操作，也不向服务器发起http请求\n\n4. cache-control: no-cache\n跳过设置强缓存，但是不妨碍设置协商缓存；一般如果你做了强缓存，只有在强缓存失效了才走协商缓存的，设置了no-cache就不会走强缓存了，每次请求都回询问服务端。\n\n5. cache-control: no-store\n不缓存，这个会让客户端、服务器都不缓存，也就没有所谓的强缓存、协商缓存了。\n\n**Cache-Control优先于Expires**\n### 协商缓存\n上面说到的强缓存就是给资源设置个过期时间，客户端每次请求资源时都会看是否过期；只有在过期才会去询问服务器。所以，强缓存就是为了给客户端自给自足用的。而当某天，客户端请求该资源时发现其过期了，这是就会去请求服务器了，而这时候去请求服务器的这过程就可以设置协商缓存。这时候，协商缓存就是需要客户端和服务器两端进行交互的。\n\n#### Last-Modified（服务器下发值） If-Modified-Since（浏览器请求头）\nLast-Modified：上次修改时间\n每次请求加上上次返回的修改时间，服务器进行对比，如果资源正确，返回304，使用缓存。\n#### Etag（Hash值） If-None-Match\n每次请求加上之前返回的hash值，如果正确，则返回304，使用缓存。\n","slug":"页面性能优化","published":1,"updated":"2020-05-04T14:03:05.000Z","comments":1,"photos":[],"link":"","_id":"ckbftlm7q00357w2pf2o620n6","content":"<h2 id=\"页面提升性能的方法有哪些？\"><a href=\"#页面提升性能的方法有哪些？\" class=\"headerlink\" title=\"页面提升性能的方法有哪些？\"></a>页面提升性能的方法有哪些？</h2><ol>\n<li>资源压缩合并，减少HTTP请求</li>\n<li>非核心代码异步加载–&gt;异步加载的方式–&gt;异步加载的区别</li>\n<li>利用浏览器缓存–&gt;缓存的分类–&gt;缓存的原理</li>\n<li>使用CDN</li>\n<li>预解析DNS<a id=\"more\"></a>\n<h2 id=\"异步加载\"><a href=\"#异步加载\" class=\"headerlink\" title=\"异步加载\"></a>异步加载</h2><h3 id=\"异步加载的方式\"><a href=\"#异步加载的方式\" class=\"headerlink\" title=\"异步加载的方式\"></a>异步加载的方式</h3><h4 id=\"动态脚本加载\"><a href=\"#动态脚本加载\" class=\"headerlink\" title=\"动态脚本加载\"></a>动态脚本加载</h4></li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"script.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>没有 defer 或 async，浏览器会立即加载并执行指定的脚本，“立即”指的是在渲染该 script 标签之下的文档元素之前，也就是说不等待后续载入的文档元素，读到就加载并执行。</p>\n<h4 id=\"async\"><a href=\"#async\" class=\"headerlink\" title=\"async\"></a>async</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">async</span> <span class=\"attr\">src</span>=<span class=\"string\">\"script.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>有 async，加载和渲染后续文档元素的过程将和 script.js 的加载与执行并行进行（异步）。</p>\n<h4 id=\"defer\"><a href=\"#defer\" class=\"headerlink\" title=\"defer\"></a>defer</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script defer src&#x3D;&quot;myscript.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n<p>有 defer，加载后续文档元素的过程将和 script.js 的加载并行进行（异步），但是 script.js 的执行要在所有元素解析完成之后，DOMContentLoaded 事件触发之前完成。</p>\n<p><img src=\"/2019/10/11/%E9%A1%B5%E9%9D%A2%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/youhua1.png\" alt=\"image\"></p>\n<h3 id=\"异步加载的区别\"><a href=\"#异步加载的区别\" class=\"headerlink\" title=\"异步加载的区别\"></a>异步加载的区别</h3><ol>\n<li>defer 和 async 在网络读取（下载）这块儿是一样的，都是异步的（相较于 HTML 解析）</li>\n<li>它俩的差别在于脚本下载完之后何时执行，显然 defer 是最接近我们对于应用脚本加载和执行的要求的</li>\n<li>关于 defer，此图未尽之处在于它是按照加载顺序执行脚本的，这一点要善加利用</li>\n<li>async 则是一个乱序执行的主，反正对它来说脚本的加载和执行是紧紧挨着的，所以不管你声明的顺序如何，只要它加载完了就会立刻执行</li>\n<li>仔细想想，async 对于应用脚本的用处不大，因为它完全不考虑依赖（哪怕是最低级的顺序执行），不过它对于那些可以不依赖任何脚本或不被任何脚本依赖的脚本来说却是非常合适的，最典型的例子：Google Analytics</li>\n</ol>\n<h2 id=\"浏览器缓存\"><a href=\"#浏览器缓存\" class=\"headerlink\" title=\"浏览器缓存\"></a>浏览器缓存</h2><h3 id=\"缓存的分类\"><a href=\"#缓存的分类\" class=\"headerlink\" title=\"缓存的分类\"></a>缓存的分类</h3><p>浏览器的缓存分类有两个：</p>\n<ol>\n<li>强缓存</li>\n<li>协商缓存</li>\n</ol>\n<h3 id=\"强缓存\"><a href=\"#强缓存\" class=\"headerlink\" title=\"强缓存\"></a>强缓存</h3><p>什么是强缓存？强在哪？其实强是强制的意思。当浏览器去请求某个文件的时候，服务端就在respone header里面对该文件做了缓存配置。缓存的时间、缓存类型都由服务端控制。</p>\n<h4 id=\"Expires\"><a href=\"#Expires\" class=\"headerlink\" title=\"Expires\"></a>Expires</h4><p>Expires: Thu, 01 Dec 1994 16:00:00 GMT<br>使用的是本地时间和服务器时间做对比</p>\n<h4 id=\"Cache-Control\"><a href=\"#Cache-Control\" class=\"headerlink\" title=\"Cache-Control\"></a>Cache-Control</h4><ol>\n<li><p>cache-control: max-age=xxxx，public<br>客户端和代理服务器都可以缓存该资源；<br>客户端在xxx秒的有效期内，如果有请求该资源的需求的话就直接读取缓存,statu code:200 ，如果用户做了刷新操作，就向服务器发起http请求</p>\n</li>\n<li><p>cache-control: max-age=xxxx，private<br>只让客户端可以缓存该资源；代理服务器不缓存<br>客户端在xxx秒内直接读取缓存,statu code:200</p>\n</li>\n<li><p>cache-control: max-age=xxxx，immutable<br>客户端在xxx秒的有效期内，如果有请求该资源的需求的话就直接读取缓存,statu code:200 ，即使用户做了刷新操作，也不向服务器发起http请求</p>\n</li>\n<li><p>cache-control: no-cache<br>跳过设置强缓存，但是不妨碍设置协商缓存；一般如果你做了强缓存，只有在强缓存失效了才走协商缓存的，设置了no-cache就不会走强缓存了，每次请求都回询问服务端。</p>\n</li>\n<li><p>cache-control: no-store<br>不缓存，这个会让客户端、服务器都不缓存，也就没有所谓的强缓存、协商缓存了。</p>\n</li>\n</ol>\n<p><strong>Cache-Control优先于Expires</strong></p>\n<h3 id=\"协商缓存\"><a href=\"#协商缓存\" class=\"headerlink\" title=\"协商缓存\"></a>协商缓存</h3><p>上面说到的强缓存就是给资源设置个过期时间，客户端每次请求资源时都会看是否过期；只有在过期才会去询问服务器。所以，强缓存就是为了给客户端自给自足用的。而当某天，客户端请求该资源时发现其过期了，这是就会去请求服务器了，而这时候去请求服务器的这过程就可以设置协商缓存。这时候，协商缓存就是需要客户端和服务器两端进行交互的。</p>\n<h4 id=\"Last-Modified（服务器下发值）-If-Modified-Since（浏览器请求头）\"><a href=\"#Last-Modified（服务器下发值）-If-Modified-Since（浏览器请求头）\" class=\"headerlink\" title=\"Last-Modified（服务器下发值） If-Modified-Since（浏览器请求头）\"></a>Last-Modified（服务器下发值） If-Modified-Since（浏览器请求头）</h4><p>Last-Modified：上次修改时间<br>每次请求加上上次返回的修改时间，服务器进行对比，如果资源正确，返回304，使用缓存。</p>\n<h4 id=\"Etag（Hash值）-If-None-Match\"><a href=\"#Etag（Hash值）-If-None-Match\" class=\"headerlink\" title=\"Etag（Hash值） If-None-Match\"></a>Etag（Hash值） If-None-Match</h4><p>每次请求加上之前返回的hash值，如果正确，则返回304，使用缓存。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"页面提升性能的方法有哪些？\"><a href=\"#页面提升性能的方法有哪些？\" class=\"headerlink\" title=\"页面提升性能的方法有哪些？\"></a>页面提升性能的方法有哪些？</h2><ol>\n<li>资源压缩合并，减少HTTP请求</li>\n<li>非核心代码异步加载–&gt;异步加载的方式–&gt;异步加载的区别</li>\n<li>利用浏览器缓存–&gt;缓存的分类–&gt;缓存的原理</li>\n<li>使用CDN</li>\n<li>预解析DNS</li></ol>","more":"<h2 id=\"异步加载\"><a href=\"#异步加载\" class=\"headerlink\" title=\"异步加载\"></a>异步加载</h2><h3 id=\"异步加载的方式\"><a href=\"#异步加载的方式\" class=\"headerlink\" title=\"异步加载的方式\"></a>异步加载的方式</h3><h4 id=\"动态脚本加载\"><a href=\"#动态脚本加载\" class=\"headerlink\" title=\"动态脚本加载\"></a>动态脚本加载</h4>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"script.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>没有 defer 或 async，浏览器会立即加载并执行指定的脚本，“立即”指的是在渲染该 script 标签之下的文档元素之前，也就是说不等待后续载入的文档元素，读到就加载并执行。</p>\n<h4 id=\"async\"><a href=\"#async\" class=\"headerlink\" title=\"async\"></a>async</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">async</span> <span class=\"attr\">src</span>=<span class=\"string\">\"script.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>有 async，加载和渲染后续文档元素的过程将和 script.js 的加载与执行并行进行（异步）。</p>\n<h4 id=\"defer\"><a href=\"#defer\" class=\"headerlink\" title=\"defer\"></a>defer</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script defer src&#x3D;&quot;myscript.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n<p>有 defer，加载后续文档元素的过程将和 script.js 的加载并行进行（异步），但是 script.js 的执行要在所有元素解析完成之后，DOMContentLoaded 事件触发之前完成。</p>\n<p><img src=\"/2019/10/11/%E9%A1%B5%E9%9D%A2%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/youhua1.png\" alt=\"image\"></p>\n<h3 id=\"异步加载的区别\"><a href=\"#异步加载的区别\" class=\"headerlink\" title=\"异步加载的区别\"></a>异步加载的区别</h3><ol>\n<li>defer 和 async 在网络读取（下载）这块儿是一样的，都是异步的（相较于 HTML 解析）</li>\n<li>它俩的差别在于脚本下载完之后何时执行，显然 defer 是最接近我们对于应用脚本加载和执行的要求的</li>\n<li>关于 defer，此图未尽之处在于它是按照加载顺序执行脚本的，这一点要善加利用</li>\n<li>async 则是一个乱序执行的主，反正对它来说脚本的加载和执行是紧紧挨着的，所以不管你声明的顺序如何，只要它加载完了就会立刻执行</li>\n<li>仔细想想，async 对于应用脚本的用处不大，因为它完全不考虑依赖（哪怕是最低级的顺序执行），不过它对于那些可以不依赖任何脚本或不被任何脚本依赖的脚本来说却是非常合适的，最典型的例子：Google Analytics</li>\n</ol>\n<h2 id=\"浏览器缓存\"><a href=\"#浏览器缓存\" class=\"headerlink\" title=\"浏览器缓存\"></a>浏览器缓存</h2><h3 id=\"缓存的分类\"><a href=\"#缓存的分类\" class=\"headerlink\" title=\"缓存的分类\"></a>缓存的分类</h3><p>浏览器的缓存分类有两个：</p>\n<ol>\n<li>强缓存</li>\n<li>协商缓存</li>\n</ol>\n<h3 id=\"强缓存\"><a href=\"#强缓存\" class=\"headerlink\" title=\"强缓存\"></a>强缓存</h3><p>什么是强缓存？强在哪？其实强是强制的意思。当浏览器去请求某个文件的时候，服务端就在respone header里面对该文件做了缓存配置。缓存的时间、缓存类型都由服务端控制。</p>\n<h4 id=\"Expires\"><a href=\"#Expires\" class=\"headerlink\" title=\"Expires\"></a>Expires</h4><p>Expires: Thu, 01 Dec 1994 16:00:00 GMT<br>使用的是本地时间和服务器时间做对比</p>\n<h4 id=\"Cache-Control\"><a href=\"#Cache-Control\" class=\"headerlink\" title=\"Cache-Control\"></a>Cache-Control</h4><ol>\n<li><p>cache-control: max-age=xxxx，public<br>客户端和代理服务器都可以缓存该资源；<br>客户端在xxx秒的有效期内，如果有请求该资源的需求的话就直接读取缓存,statu code:200 ，如果用户做了刷新操作，就向服务器发起http请求</p>\n</li>\n<li><p>cache-control: max-age=xxxx，private<br>只让客户端可以缓存该资源；代理服务器不缓存<br>客户端在xxx秒内直接读取缓存,statu code:200</p>\n</li>\n<li><p>cache-control: max-age=xxxx，immutable<br>客户端在xxx秒的有效期内，如果有请求该资源的需求的话就直接读取缓存,statu code:200 ，即使用户做了刷新操作，也不向服务器发起http请求</p>\n</li>\n<li><p>cache-control: no-cache<br>跳过设置强缓存，但是不妨碍设置协商缓存；一般如果你做了强缓存，只有在强缓存失效了才走协商缓存的，设置了no-cache就不会走强缓存了，每次请求都回询问服务端。</p>\n</li>\n<li><p>cache-control: no-store<br>不缓存，这个会让客户端、服务器都不缓存，也就没有所谓的强缓存、协商缓存了。</p>\n</li>\n</ol>\n<p><strong>Cache-Control优先于Expires</strong></p>\n<h3 id=\"协商缓存\"><a href=\"#协商缓存\" class=\"headerlink\" title=\"协商缓存\"></a>协商缓存</h3><p>上面说到的强缓存就是给资源设置个过期时间，客户端每次请求资源时都会看是否过期；只有在过期才会去询问服务器。所以，强缓存就是为了给客户端自给自足用的。而当某天，客户端请求该资源时发现其过期了，这是就会去请求服务器了，而这时候去请求服务器的这过程就可以设置协商缓存。这时候，协商缓存就是需要客户端和服务器两端进行交互的。</p>\n<h4 id=\"Last-Modified（服务器下发值）-If-Modified-Since（浏览器请求头）\"><a href=\"#Last-Modified（服务器下发值）-If-Modified-Since（浏览器请求头）\" class=\"headerlink\" title=\"Last-Modified（服务器下发值） If-Modified-Since（浏览器请求头）\"></a>Last-Modified（服务器下发值） If-Modified-Since（浏览器请求头）</h4><p>Last-Modified：上次修改时间<br>每次请求加上上次返回的修改时间，服务器进行对比，如果资源正确，返回304，使用缓存。</p>\n<h4 id=\"Etag（Hash值）-If-None-Match\"><a href=\"#Etag（Hash值）-If-None-Match\" class=\"headerlink\" title=\"Etag（Hash值） If-None-Match\"></a>Etag（Hash值） If-None-Match</h4><p>每次请求加上之前返回的hash值，如果正确，则返回304，使用缓存。</p>"}],"PostAsset":[{"_id":"source/_posts/CSRF和XSS/csrf.png","slug":"csrf.png","post":"ckbftlm5b00057w2p49s6b664","modified":1,"renderable":0},{"_id":"source/_posts/js栈/duizhan1.webp","post":"ckbftlm6o001e7w2p7byd5bsk","slug":"duizhan1.webp","modified":1,"renderable":1},{"_id":"source/_posts/页面性能优化/youhua1.png","slug":"youhua1.png","post":"ckbftlm7q00357w2pf2o620n6","modified":1,"renderable":0},{"_id":"source/_posts/css盒子模型/biaozhun.jpg","post":"ckbftlm6f00147w2p2ihtej2g","slug":"biaozhun.jpg","modified":1,"renderable":1},{"_id":"source/_posts/css盒子模型/ie.jpg","post":"ckbftlm6f00147w2p2ihtej2g","slug":"ie.jpg","modified":1,"renderable":1},{"_id":"source/_posts/vue生命周期以及nextTick应用/biaoge.webp","post":"ckbftlm6y001o7w2pb7j3fxcd","slug":"biaoge.webp","modified":1,"renderable":1},{"_id":"source/_posts/vue生命周期以及nextTick应用/shengming.webp","post":"ckbftlm6y001o7w2pb7j3fxcd","slug":"shengming.webp","modified":1,"renderable":1},{"_id":"source/_posts/webpack中module-chunk和bundle的区别是什么/module1.jpg","post":"ckbftlm72001t7w2p9rjz2mpd","slug":"module1.jpg","modified":1,"renderable":1},{"_id":"source/_posts/webpack中module-chunk和bundle的区别是什么/module2.jpg","post":"ckbftlm72001t7w2p9rjz2mpd","slug":"module2.jpg","modified":1,"renderable":1},{"_id":"source/_posts/VueRouter/luyou1.png","post":"ckbftlm5r000d7w2pgapq1c1l","slug":"luyou1.png","modified":1,"renderable":1},{"_id":"source/_posts/VueRouter/luyou2.png","post":"ckbftlm5r000d7w2pgapq1c1l","slug":"luyou2.png","modified":1,"renderable":1},{"_id":"source/_posts/VueRouter/luyou3.png","post":"ckbftlm5r000d7w2pgapq1c1l","slug":"luyou3.png","modified":1,"renderable":1},{"_id":"source/_posts/HTTP协议/qingqiudemo.jpg","post":"ckbftlm5y000j7w2p3c6mfzp8","slug":"qingqiudemo.jpg","modified":1,"renderable":1},{"_id":"source/_posts/HTTP协议/qingqiuti.png","post":"ckbftlm5y000j7w2p3c6mfzp8","slug":"qingqiuti.png","modified":1,"renderable":1},{"_id":"source/_posts/HTTP协议/xiangying.jpg","post":"ckbftlm5y000j7w2p3c6mfzp8","slug":"xiangying.jpg","modified":1,"renderable":1},{"_id":"source/_posts/webpack相关问题/webpack1.jpeg","post":"ckbftlm74001y7w2pdu1javhg","slug":"webpack1.jpeg","modified":1,"renderable":1},{"_id":"source/_posts/webpack相关问题/webpack2.jpeg","post":"ckbftlm74001y7w2pdu1javhg","slug":"webpack2.jpeg","modified":1,"renderable":1},{"_id":"source/_posts/webpack相关问题/webpack3.png","post":"ckbftlm74001y7w2pdu1javhg","slug":"webpack3.png","modified":1,"renderable":1},{"_id":"source/_posts/webpack动态懒加载/webplan1.png","post":"ckbftlm7500207w2p12ns1pct","slug":"webplan1.png","modified":1,"renderable":1},{"_id":"source/_posts/webpack动态懒加载/webplan2.png","post":"ckbftlm7500207w2p12ns1pct","slug":"webplan2.png","modified":1,"renderable":1},{"_id":"source/_posts/webpack动态懒加载/webplan3.png","post":"ckbftlm7500207w2p12ns1pct","slug":"webplan3.png","modified":1,"renderable":1},{"_id":"source/_posts/原型链/gouzao.png","post":"ckbftlm7f002j7w2pajvgaaxf","slug":"gouzao.png","modified":1,"renderable":1},{"_id":"source/_posts/原型链/yuanxing.png","slug":"yuanxing.png","post":"ckbftlm7f002j7w2pajvgaaxf","modified":1,"renderable":0},{"_id":"source/_posts/原型链/yuanxing1.png","post":"ckbftlm7f002j7w2pajvgaaxf","slug":"yuanxing1.png","modified":1,"renderable":1},{"_id":"source/_posts/css之BFC/bfc.png","post":"ckbftlm6h00177w2p39jy34g6","slug":"bfc.png","modified":1,"renderable":1},{"_id":"source/_posts/css之BFC/float.png","post":"ckbftlm6h00177w2p39jy34g6","slug":"float.png","modified":1,"renderable":1},{"_id":"source/_posts/css之BFC/margin.png","post":"ckbftlm6h00177w2p39jy34g6","slug":"margin.png","modified":1,"renderable":1},{"_id":"source/_posts/css之BFC/wubfc.png","post":"ckbftlm6h00177w2p39jy34g6","slug":"wubfc.png","modified":1,"renderable":1},{"_id":"source/_posts/webp在项目中的应用/jianrong.webp","post":"ckbftlm7800257w2phck96ymk","slug":"jianrong.webp","modified":1,"renderable":1},{"_id":"source/_posts/webp在项目中的应用/liucheng.webp","post":"ckbftlm7800257w2phck96ymk","slug":"liucheng.webp","modified":1,"renderable":1},{"_id":"source/_posts/webp在项目中的应用/taobao.webp","post":"ckbftlm7800257w2phck96ymk","slug":"taobao.webp","modified":1,"renderable":1},{"_id":"source/_posts/webp在项目中的应用/yasuo.webp","post":"ckbftlm7800257w2phck96ymk","slug":"yasuo.webp","modified":1,"renderable":1},{"_id":"source/_posts/浏览器渲染原理与过程/liulanqi1.webp","post":"ckbftlm7k002t7w2paeo0bsd1","slug":"liulanqi1.webp","modified":1,"renderable":1},{"_id":"source/_posts/浏览器渲染原理与过程/liulanqi2.webp","post":"ckbftlm7k002t7w2paeo0bsd1","slug":"liulanqi2.webp","modified":1,"renderable":1},{"_id":"source/_posts/浏览器渲染原理与过程/liulanqi3.webp","post":"ckbftlm7k002t7w2paeo0bsd1","slug":"liulanqi3.webp","modified":1,"renderable":1},{"_id":"source/_posts/浏览器渲染原理与过程/liulanqi4.webp","post":"ckbftlm7k002t7w2paeo0bsd1","slug":"liulanqi4.webp","modified":1,"renderable":1},{"_id":"source/_posts/事件循环EventLoop/eventloop1.png","post":"ckbftlm7900287w2p36t2dtx3","slug":"eventloop1.png","modified":1,"renderable":1},{"_id":"source/_posts/事件循环EventLoop/eventloop2.png","post":"ckbftlm7900287w2p36t2dtx3","slug":"eventloop2.png","modified":1,"renderable":1},{"_id":"source/_posts/事件循环EventLoop/eventloop3.png","post":"ckbftlm7900287w2p36t2dtx3","slug":"eventloop3.png","modified":1,"renderable":1},{"_id":"source/_posts/事件循环EventLoop/eventloop4.png","post":"ckbftlm7900287w2p36t2dtx3","slug":"eventloop4.png","modified":1,"renderable":1},{"_id":"source/_posts/事件循环EventLoop/eventloop5.png","post":"ckbftlm7900287w2p36t2dtx3","slug":"eventloop5.png","modified":1,"renderable":1}],"PostCategory":[],"PostTag":[{"post_id":"ckbftlm5600037w2p7416awub","tag_id":"ckbftlm5e00067w2p0tcb7lpp","_id":"ckbftlm5n000b7w2p9abqce3j"},{"post_id":"ckbftlm5b00057w2p49s6b664","tag_id":"ckbftlm5m000a7w2p15uoaya4","_id":"ckbftlm5u000g7w2p7szwcmq6"},{"post_id":"ckbftlm5g00077w2p43w68wuf","tag_id":"ckbftlm5t000e7w2p2c6pbw95","_id":"ckbftlm60000k7w2p4m90akbm"},{"post_id":"ckbftlm5i00087w2p0zkp8qt3","tag_id":"ckbftlm5t000e7w2p2c6pbw95","_id":"ckbftlm63000o7w2p6j7nfq17"},{"post_id":"ckbftlm62000n7w2pah217rld","tag_id":"ckbftlm61000m7w2pahwp3ytq","_id":"ckbftlm66000q7w2pbsvv2et2"},{"post_id":"ckbftlm5l00097w2p22rq9jvx","tag_id":"ckbftlm61000m7w2pahwp3ytq","_id":"ckbftlm68000t7w2phx9ohntf"},{"post_id":"ckbftlm64000p7w2p3qge204u","tag_id":"ckbftlm61000m7w2pahwp3ytq","_id":"ckbftlm6a000v7w2pa4is4gj5"},{"post_id":"ckbftlm66000s7w2p8odp5vhc","tag_id":"ckbftlm61000m7w2pahwp3ytq","_id":"ckbftlm6b000y7w2p5thof3em"},{"post_id":"ckbftlm5o000c7w2phs0w10au","tag_id":"ckbftlm5t000e7w2p2c6pbw95","_id":"ckbftlm6d00107w2p6u183kd7"},{"post_id":"ckbftlm68000u7w2p9upv2fgh","tag_id":"ckbftlm61000m7w2pahwp3ytq","_id":"ckbftlm6f00137w2p6svjc8go"},{"post_id":"ckbftlm5r000d7w2pgapq1c1l","tag_id":"ckbftlm61000m7w2pahwp3ytq","_id":"ckbftlm6g00157w2pcnai1qna"},{"post_id":"ckbftlm6c000z7w2p928lc5aq","tag_id":"ckbftlm61000m7w2pahwp3ytq","_id":"ckbftlm6k00187w2pe18p9z7r"},{"post_id":"ckbftlm6d00127w2p0o671p0w","tag_id":"ckbftlm61000m7w2pahwp3ytq","_id":"ckbftlm6m001a7w2pb2v8fhoz"},{"post_id":"ckbftlm5t000f7w2p33oqfoo7","tag_id":"ckbftlm61000m7w2pahwp3ytq","_id":"ckbftlm6o001d7w2p35zmad5d"},{"post_id":"ckbftlm5v000h7w2p04gqhvs5","tag_id":"ckbftlm61000m7w2pahwp3ytq","_id":"ckbftlm6q001f7w2ph1hvhcrj"},{"post_id":"ckbftlm6l00197w2p9pu4akyn","tag_id":"ckbftlm5e00067w2p0tcb7lpp","_id":"ckbftlm6t001i7w2park5e766"},{"post_id":"ckbftlm6n001c7w2phq3883cd","tag_id":"ckbftlm5e00067w2p0tcb7lpp","_id":"ckbftlm6v001k7w2p4jgaa2m7"},{"post_id":"ckbftlm6o001e7w2p7byd5bsk","tag_id":"ckbftlm5e00067w2p0tcb7lpp","_id":"ckbftlm6y001n7w2p00vvf37g"},{"post_id":"ckbftlm5y000j7w2p3c6mfzp8","tag_id":"ckbftlm6m001b7w2p9ozfggx3","_id":"ckbftlm6z001p7w2pfaxo0qz7"},{"post_id":"ckbftlm6q001g7w2p55ic3jzt","tag_id":"ckbftlm5e00067w2p0tcb7lpp","_id":"ckbftlm72001s7w2pce7tb6tn"},{"post_id":"ckbftlm6t001j7w2p57f831f8","tag_id":"ckbftlm5t000e7w2p2c6pbw95","_id":"ckbftlm73001u7w2p4vbyej25"},{"post_id":"ckbftlm60000l7w2p6wt5fv1q","tag_id":"ckbftlm61000m7w2pahwp3ytq","_id":"ckbftlm74001x7w2pgl2q75c5"},{"post_id":"ckbftlm6y001o7w2pb7j3fxcd","tag_id":"ckbftlm61000m7w2pahwp3ytq","_id":"ckbftlm75001z7w2p0vwn8496"},{"post_id":"ckbftlm6f00147w2p2ihtej2g","tag_id":"ckbftlm6x001m7w2pbiyq3flz","_id":"ckbftlm7700227w2p4nvt8gia"},{"post_id":"ckbftlm6h00177w2p39jy34g6","tag_id":"ckbftlm6x001m7w2pbiyq3flz","_id":"ckbftlm7800247w2p2g4edwgi"},{"post_id":"ckbftlm74001y7w2pdu1javhg","tag_id":"ckbftlm74001w7w2pdvs82fe9","_id":"ckbftlm7900267w2p29v160jk"},{"post_id":"ckbftlm6w001l7w2p1ywhb1xi","tag_id":"ckbftlm74001w7w2pdvs82fe9","_id":"ckbftlm7a00297w2pbw1sdgmg"},{"post_id":"ckbftlm7500207w2p12ns1pct","tag_id":"ckbftlm74001w7w2pdvs82fe9","_id":"ckbftlm7b002b7w2phdox1b27"},{"post_id":"ckbftlm7700237w2p52fcgvgd","tag_id":"ckbftlm74001w7w2pdvs82fe9","_id":"ckbftlm7c002e7w2pdxa2h68y"},{"post_id":"ckbftlm6z001q7w2p6x5rg1to","tag_id":"ckbftlm7600217w2pa6xkfy3l","_id":"ckbftlm7d002g7w2p6ppoghq8"},{"post_id":"ckbftlm7800257w2phck96ymk","tag_id":"ckbftlm5t000e7w2p2c6pbw95","_id":"ckbftlm7e002i7w2p5c221o9l"},{"post_id":"ckbftlm7900287w2p36t2dtx3","tag_id":"ckbftlm5e00067w2p0tcb7lpp","_id":"ckbftlm7g002l7w2pev3db7un"},{"post_id":"ckbftlm73001v7w2p9cj21z4a","tag_id":"ckbftlm7600217w2pa6xkfy3l","_id":"ckbftlm7h002n7w2p2e3whesr"},{"post_id":"ckbftlm7d002f7w2p325ph92i","tag_id":"ckbftlm5e00067w2p0tcb7lpp","_id":"ckbftlm7i002p7w2pgi6mg7ws"},{"post_id":"ckbftlm7e002h7w2p9d2hb2jl","tag_id":"ckbftlm7c002d7w2p7dgz9crn","_id":"ckbftlm7k002s7w2phkp7egf6"},{"post_id":"ckbftlm7a002a7w2p4wuya84v","tag_id":"ckbftlm7c002d7w2p7dgz9crn","_id":"ckbftlm7l002u7w2p90ivh3n9"},{"post_id":"ckbftlm7f002j7w2pajvgaaxf","tag_id":"ckbftlm5e00067w2p0tcb7lpp","_id":"ckbftlm7m002w7w2p4ojl5ni7"},{"post_id":"ckbftlm7g002m7w2p1qfd2eaf","tag_id":"ckbftlm5e00067w2p0tcb7lpp","_id":"ckbftlm7n002z7w2p2w1b2d9i"},{"post_id":"ckbftlm7b002c7w2pfkt60s16","tag_id":"ckbftlm7f002k7w2p1gwg7bnr","_id":"ckbftlm7o00317w2p6mgc0ukm"},{"post_id":"ckbftlm7l002v7w2pdxidad6p","tag_id":"ckbftlm61000m7w2pahwp3ytq","_id":"ckbftlm7q00347w2p06ka2cs4"},{"post_id":"ckbftlm7h002o7w2pciz6ez7b","tag_id":"ckbftlm7k002r7w2pd8ff7he2","_id":"ckbftlm7r00367w2pengzbrtr"},{"post_id":"ckbftlm7o00307w2pcptw0nea","tag_id":"ckbftlm5t000e7w2p2c6pbw95","_id":"ckbftlm7s00387w2p24j897ev"},{"post_id":"ckbftlm7j002q7w2pf91w8hme","tag_id":"ckbftlm7k002r7w2pd8ff7he2","_id":"ckbftlm7s00397w2pesi4ga3v"},{"post_id":"ckbftlm7p00327w2p21k4dbjw","tag_id":"ckbftlm7k002r7w2pd8ff7he2","_id":"ckbftlm7s003a7w2pfw6efnmv"},{"post_id":"ckbftlm7q00357w2pf2o620n6","tag_id":"ckbftlm7c002d7w2p7dgz9crn","_id":"ckbftlm7s003b7w2p0o20fj8u"},{"post_id":"ckbftlm7k002t7w2paeo0bsd1","tag_id":"ckbftlm7p00337w2p9uvv8ktg","_id":"ckbftlm7s003c7w2phkvd8zug"},{"post_id":"ckbftlm7m002x7w2p8h6654rj","tag_id":"ckbftlm7r00377w2p9zsu8ln9","_id":"ckbftlm7s003d7w2p4lbuha2e"}],"Tag":[{"name":"javascript","_id":"ckbftlm5e00067w2p0tcb7lpp"},{"name":"网络安全","_id":"ckbftlm5m000a7w2p15uoaya4"},{"name":"html","_id":"ckbftlm5t000e7w2p2c6pbw95"},{"name":"Vue","_id":"ckbftlm61000m7w2pahwp3ytq"},{"name":"http","_id":"ckbftlm6m001b7w2p9ozfggx3"},{"name":"css","_id":"ckbftlm6x001m7w2pbiyq3flz"},{"name":"webpack","_id":"ckbftlm74001w7w2pdvs82fe9"},{"name":"Promise","_id":"ckbftlm7600217w2pa6xkfy3l"},{"name":"前端性能优化","_id":"ckbftlm7c002d7w2p7dgz9crn"},{"name":"hexo","_id":"ckbftlm7f002k7w2p1gwg7bnr"},{"name":"面试","_id":"ckbftlm7k002r7w2pd8ff7he2"},{"name":"浏览器","_id":"ckbftlm7p00337w2p9uvv8ktg"},{"name":"通信","_id":"ckbftlm7r00377w2p9zsu8ln9"}]}}