{"meta":{"version":1,"warehouse":"3.0.1"},"models":{"Asset":[{"_id":"themes/archer/source/404.md","path":"404.md","modified":1,"renderable":1},{"_id":"themes/archer/source/assets/example_qr.png","path":"assets/example_qr.png","modified":1,"renderable":1},{"_id":"themes/archer/source/assets/algolia_logo.svg","path":"assets/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/archer/source/assets/favicon.ico","path":"assets/favicon.ico","modified":1,"renderable":1},{"_id":"themes/archer/source/assets/loading.svg","path":"assets/loading.svg","modified":1,"renderable":1},{"_id":"themes/archer/source/avatar/Misaka.jpg","path":"avatar/Misaka.jpg","modified":1,"renderable":1},{"_id":"themes/archer/source/css/mobile.css","path":"css/mobile.css","modified":1,"renderable":1},{"_id":"themes/archer/source/css/style.css","path":"css/style.css","modified":1,"renderable":1},{"_id":"themes/archer/source/font/Source Sans Pro.woff","path":"font/Source Sans Pro.woff","modified":1,"renderable":1},{"_id":"themes/archer/source/font/Source Sans Pro.woff2","path":"font/Source Sans Pro.woff2","modified":1,"renderable":1},{"_id":"themes/archer/source/scripts/search.js","path":"scripts/search.js","modified":1,"renderable":1},{"_id":"themes/archer/source/lib/webfontloader.min.js","path":"lib/webfontloader.min.js","modified":1,"renderable":1},{"_id":"themes/archer/source/scripts/main.js","path":"scripts/main.js","modified":1,"renderable":1},{"_id":"themes/archer/source/scripts/share.js","path":"scripts/share.js","modified":1,"renderable":1},{"_id":"themes/archer/source/avatar/mine.jpeg","path":"avatar/mine.jpeg","modified":1,"renderable":1},{"_id":"themes/archer/source/font/Oswald-Regular.ttf","path":"font/Oswald-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff","path":"font/SourceCodePro-Regular.ttf.woff","modified":1,"renderable":1},{"_id":"themes/archer/source/intro/404-bg.jpg","path":"intro/404-bg.jpg","modified":1,"renderable":1},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff2","path":"font/SourceCodePro-Regular.ttf.woff2","modified":1,"renderable":1},{"_id":"themes/archer/source/lib/jquery.min.js","path":"lib/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/archer/source/intro/post-bg.jpg","path":"intro/post-bg.jpg","modified":1,"renderable":1},{"_id":"themes/archer/source/intro/about-bg.jpg","path":"intro/about-bg.jpg","modified":1,"renderable":1},{"_id":"themes/archer/source/intro/index-bg.jpg","path":"intro/index-bg.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"source/404.md","hash":"4c9d9dafe0f3f8457b921a96a9260e09de6ad0ab","modified":1580892208000},{"_id":"source/.DS_Store","hash":"b9806e9f2a409be793c05f378064530660ea1476","modified":1583305738000},{"_id":"source/test.html","hash":"8713237f4ec16221b69184681be63b4de8a27822","modified":1584004764000},{"_id":"source/test.js","hash":"19fbd26403e9da287b55fae007f4c37823df4633","modified":1579151978000},{"_id":"themes/archer/.DS_Store","hash":"2c3f2d0cc71171fc8d22b7f9468bdb8cce95eb24","modified":1578964906000},{"_id":"themes/archer/.eslintrc.json","hash":"35eeca97fa5a2d0c6d78ef1257c58f03c42d43df","modified":1553725894000},{"_id":"themes/archer/.gitattributes","hash":"82c1a621642d5b620275ae1ed59845c3f7015a64","modified":1553725894000},{"_id":"themes/archer/.gitignore","hash":"e2d7fa953bade3b94ed1cab25ffcf442c7540433","modified":1553725894000},{"_id":"themes/archer/.prettierignore","hash":"58caf761f07e5df9cdc21f7f19f0670fde41089b","modified":1553725894000},{"_id":"themes/archer/.prettierrc.js","hash":"875b0b95f6eb24a23e4ea83a75709b97897135e0","modified":1553725894000},{"_id":"themes/archer/LICENSE","hash":"0da0c361bf299375739c6b668a44af0f5faf37bb","modified":1553725894000},{"_id":"themes/archer/README.md","hash":"97edb54cb7aecff714f132110ed4ba8215da7136","modified":1553725894000},{"_id":"themes/archer/_config.yml","hash":"d174522f3f24d25673695bad1fec3ead7f9377e9","modified":1579072074000},{"_id":"themes/archer/gulpfile.js","hash":"46dfe693b00ac4dea4d1b1af56f5ced4ee095c10","modified":1553725894000},{"_id":"themes/archer/package.json","hash":"67872d7647b43cc341b0ad9744b4b89819c07834","modified":1579877231000},{"_id":"themes/archer/webpack.prod.js","hash":"48de76cfa6274895801d3afc89ecbf04ee182a1c","modified":1553725894000},{"_id":"themes/archer/webpack.config.js","hash":"d20b6350c50e2981484cb9356a3e21a2124bcd72","modified":1553725894000},{"_id":"source/_posts/DOM事件流.md","hash":"2ea3db1eb30ab8d10d71e0604fa08f64a3ad2a5a","modified":1583923781000},{"_id":"source/_posts/DOM级别与DOM事件.md","hash":"fe2556803ead30356f85be45fb9963a9be1a7c96","modified":1583378580000},{"_id":"source/_posts/Event事件常见应用.md","hash":"05dda590a122f96bff3f5d4a46cfc5373bc5815a","modified":1584004888000},{"_id":"source/_posts/HTTP协议.md","hash":"9dda046c8530877acd2b43027ffc8631411a3ed1","modified":1584012186000},{"_id":"source/_posts/css之BFC.md","hash":"8113ebace00f58cc7fee59c25fbbbf8e51b10494","modified":1583321143000},{"_id":"source/_posts/css盒子模型.md","hash":"f5dbfc991a3217894e9e0533f456a22cd3624e8b","modified":1583308422000},{"_id":"source/_posts/meta标签使用总结.md","hash":"a6f056b3da4a3e78dd1fb22a4253dfa3765ba20f","modified":1551485255000},{"_id":"source/_posts/promise原理和实现.md","hash":"06773cf1e5b945b25c2f649178edd95c4f1efcf7","modified":1579877713000},{"_id":"source/_posts/promose-all和promise-race.md","hash":"f810014fb28698f31afa663a5ab808cd9573e5ee","modified":1579877710000},{"_id":"source/_posts/vue生命周期以及nextTick应用.md","hash":"f18aff86f19f65d4b1f878d2c4d464faaf938557","modified":1583308377000},{"_id":"source/_posts/webp在项目中的应用.md","hash":"4e3e36bb8b09e9442da6764a29d6ae85753be3d6","modified":1580722199000},{"_id":"source/_posts/函数的防抖和节流.md","hash":"6d0a0bbba8cf105a8a0419a715343edd14d15de5","modified":1580888557000},{"_id":"source/_posts/初尝hexo.md","hash":"82fc2da8e88fd595378a3695a3b1803eefb9ce11","modified":1579877886000},{"_id":"source/_posts/前端性能优化——DNS预解析.md","hash":"9c7e670203b672166b7c3c0701e4cc2400148e6d","modified":1580869313000},{"_id":"source/_posts/页面布局.md","hash":"03137abe9e6cec065c6e4b88ce72bc91a81dd98b","modified":1581501794000},{"_id":"source/about/index.md","hash":"45e21d80f01cd72b3393602ae556828d2f78e7e9","modified":1578986204000},{"_id":"themes/archer/dev/archer.sh","hash":"4065c4e55462d5ecf016464adea0d1db967ef4b4","modified":1578905288000},{"_id":"themes/archer/docs/develop-guide-en.md","hash":"0bb09c3c9d5f56820cb84e3316f60352b731d70c","modified":1578905288000},{"_id":"themes/archer/docs/develop-guide-zh.md","hash":"effc2bc9e0cecfd228b19283337ff29649ea5985","modified":1578905288000},{"_id":"themes/archer/docs/README-en.md","hash":"f325565c0bb94501fd046268659c7752709895d1","modified":1578905288000},{"_id":"themes/archer/languages/default.yml","hash":"d56b6923c70efdef09cd1f0270d7adc9cc338f6b","modified":1578905288000},{"_id":"themes/archer/languages/en.yml","hash":"ad75d3e5f7f5f0463d3077e1b5a26f40938a1faa","modified":1578905288000},{"_id":"themes/archer/layout/404.ejs","hash":"879641b1b5e49c43f2e096cad281f7d74df05127","modified":1578905288000},{"_id":"themes/archer/layout/index.ejs","hash":"716ba4a30860e36077dfdfffa02c1cd60301d8a3","modified":1578905288000},{"_id":"themes/archer/layout/about.ejs","hash":"06019d835c0a51fed8aa086d1dfcf368f9921b42","modified":1578905288000},{"_id":"themes/archer/layout/post.ejs","hash":"b61156aff41641a14d5e4e45d9fd776309f2801a","modified":1578905288000},{"_id":"themes/archer/layout/layout.ejs","hash":"08ebd10c1b2bfc11be8f5115a836a98e6c6ba13c","modified":1578905288000},{"_id":"themes/archer/layout/site-meta.ejs","hash":"d866aa1a892d4bfe3368f6dbd0f1baa8c5831947","modified":1578905288000},{"_id":"themes/archer/source/404.md","hash":"3fb58e3ebd8e0961a3af837ff8e7395ef9092cb4","modified":1578906418000},{"_id":"themes/archer/source/.DS_Store","hash":"7c7eb3a712f76ac51e7786fc218f5bcdeb11424d","modified":1578964878000},{"_id":"themes/archer/src/.DS_Store","hash":"72720482c4291a6e91510301a6ae4b67b0b062c8","modified":1578964878000},{"_id":"source/_posts/HTTP协议/qingqiuti.png","hash":"b7b26c845c04013bef1513270b0c279fc93e1f0f","modified":1584009800000},{"_id":"source/_posts/HTTP协议/xiangying.jpg","hash":"11a3601c3b3c30400007d53b6725d652ece9f93f","modified":1584010087000},{"_id":"source/_posts/css之BFC/bfc.png","hash":"e772b86e17f557dae7eac673b115afafdb3768b2","modified":1583319715000},{"_id":"source/_posts/css之BFC/float.png","hash":"bc3d6012419c506cd97e17128172e54436377208","modified":1583321083000},{"_id":"source/_posts/css之BFC/margin.png","hash":"5844c6e7cb183a9485b20cfb70ab7328fdfb2301","modified":1583321088000},{"_id":"source/_posts/css之BFC/wubfc.png","hash":"20d781a1edf2c4f9e655f98f2d654df0a16dccc6","modified":1583319518000},{"_id":"source/_posts/css盒子模型/ie.jpg","hash":"10836afcaf1bfc8e0c51e6e3f10fe8c158af3913","modified":1583288533000},{"_id":"source/_posts/webp在项目中的应用/jianrong.webp","hash":"9fd19fedb37fe15ab8e79ee5968b0489653c0a7b","modified":1580700082000},{"_id":"source/_posts/webp在项目中的应用/liucheng.webp","hash":"29fb994c83bb701f895f149177e04c6f7ea4f450","modified":1580700319000},{"_id":"source/_posts/webp在项目中的应用/yasuo.webp","hash":"6919a10f5c95993e136b21c6ff2e990029413a4b","modified":1580699903000},{"_id":"source/_posts/webp在项目中的应用/taobao.webp","hash":"bbfa44c19551573a9d915babea32a5ac024d4a03","modified":1580700203000},{"_id":"themes/archer/.github/ISSUE_TEMPLATE/-----------bug--help-wanted-or-bug-report-.md","hash":"012bd3afea5565204f75d8c89048ad33b9c2f948","modified":1553725894000},{"_id":"themes/archer/.github/ISSUE_TEMPLATE/-----feature-request-.md","hash":"886fb1252702d46c89536b579d35ce49e53ec54d","modified":1553725894000},{"_id":"themes/archer/.github/ISSUE_TEMPLATE/-----other-issue-.md","hash":"4bf3c8ebef14a81bb55e8e0468d816e83c4133ac","modified":1553725894000},{"_id":"themes/archer/layout/_partial/algolia.ejs","hash":"2f5f9073378f628a9124792b5301c1540bc5a264","modified":1578905288000},{"_id":"themes/archer/layout/_partial/base-background-image.ejs","hash":"82203d9a1c6e16ef2d37b8b587f56bf6d16edaf2","modified":1578905288000},{"_id":"themes/archer/layout/_partial/base-footer.ejs","hash":"a9f0f831a7c48553b109dbada60c797aa03b43d8","modified":1578905939000},{"_id":"themes/archer/layout/_partial/base-head.ejs","hash":"f2e8d4dfd11d879491a4b10f74f8c886cd392240","modified":1578905288000},{"_id":"themes/archer/layout/_partial/base-header.ejs","hash":"12e28693dc53cab5f6fd389f15ea0f811c9c37e9","modified":1578905288000},{"_id":"themes/archer/layout/_partial/base-profile.ejs","hash":"743d97452d4ac358e631c43c9c2120aafdfd3e24","modified":1578905288000},{"_id":"themes/archer/layout/_partial/base-preload-polyfill.ejs","hash":"2aea84cb43f4479131620b3c3dfd7cebe9be36ba","modified":1578905288000},{"_id":"themes/archer/layout/_partial/base-social.ejs","hash":"2d068432031b3bebf9438c775370a2d1b4492d6b","modified":1578905288000},{"_id":"themes/archer/layout/_partial/base-title-tags.ejs","hash":"418559ab11726f69621c3a58cd21903adff1e48e","modified":1578905288000},{"_id":"themes/archer/layout/_partial/intro-height.ejs","hash":"cd0d34a811dc4666980d57c00d70dd82bd5450eb","modified":1578905288000},{"_id":"themes/archer/source/assets/example_qr.png","hash":"cce20432c34875f4d9c6df927ede0fc0f00bb194","modified":1578905288000},{"_id":"themes/archer/source/assets/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1578905288000},{"_id":"themes/archer/source/assets/favicon.ico","hash":"25d327edb1a95957606731ca725ad7a41aa86832","modified":1578908703000},{"_id":"themes/archer/source/assets/loading.svg","hash":"45be17d07697d604d8981890eb21e308530c7a38","modified":1578905288000},{"_id":"themes/archer/source/avatar/Misaka.jpg","hash":"74a0372523f98dfbba992bf80642e160d04dc9b1","modified":1578905288000},{"_id":"themes/archer/source/css/mobile.css","hash":"51d7b5cf26c8f82a3daad4bc55518673fdf281f5","modified":1578905288000},{"_id":"themes/archer/source/css/style.css","hash":"5d5e869db0c62957d59c6865baaecd1428c51804","modified":1578905288000},{"_id":"themes/archer/source/font/Source Sans Pro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1578905288000},{"_id":"themes/archer/source/font/Source Sans Pro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1578905288000},{"_id":"themes/archer/source/scripts/search.js","hash":"d5f739e261e8ce74f993c6157b248663bda122bf","modified":1578905288000},{"_id":"themes/archer/source/lib/webfontloader.min.js","hash":"bc6ffe9c0d8b3285564619a445c6ca575eb9d0f5","modified":1578905288000},{"_id":"themes/archer/source/scripts/main.js","hash":"e89a9651131684204118fa74bd19cb781d76a372","modified":1578905288000},{"_id":"themes/archer/src/js/init.js","hash":"346c6ef75ae85e4350c1b0811985172fdaa0d3a5","modified":1578905288000},{"_id":"themes/archer/src/js/browser.js","hash":"ce061db99db5b880db0ddb768246352ca885b13c","modified":1578905288000},{"_id":"themes/archer/source/scripts/share.js","hash":"bb5bb37ce7f47f8c084b232df3e5fe2378d7ca01","modified":1578905288000},{"_id":"themes/archer/src/js/fancybox.js","hash":"0daf0e83deca055102268e3bd95cb1962acc2264","modified":1578905288000},{"_id":"themes/archer/src/js/main.js","hash":"e1a48d5822326792e38d44efee86e01473549eba","modified":1578905288000},{"_id":"themes/archer/src/js/initSidebar.js","hash":"b25615ff254913db83e2a20263d445f35083843b","modified":1578905288000},{"_id":"themes/archer/src/js/mobile.js","hash":"228a68d851517b5e47d2132f1d499cb812a64171","modified":1578905288000},{"_id":"themes/archer/src/js/search.js","hash":"2e59ac745da7c22801d9029cf9904a4fc3c384f1","modified":1578905288000},{"_id":"themes/archer/src/js/scroll.js","hash":"aa2315a80daaa183a7e462c7e879ff9d2f050933","modified":1578905288000},{"_id":"themes/archer/src/js/sidebar.js","hash":"68d5fe0ee5e86df810d304e5efe11e5e1fddc46d","modified":1578905288000},{"_id":"themes/archer/src/js/share.js","hash":"1314b19a852e291e35d6809f7f58652d3e7c524c","modified":1578905288000},{"_id":"themes/archer/src/js/tag.js","hash":"e0f0a914c02922e42977d78dc4993b3855167cd8","modified":1578905288000},{"_id":"themes/archer/src/js/toc.js","hash":"b3482031e4c8728535d480bfaec76229469e3aba","modified":1578905288000},{"_id":"themes/archer/src/js/util.js","hash":"27de6446892bcf399430dd5776df0b8759ca0eea","modified":1578905288000},{"_id":"themes/archer/src/scss/_mixin.scss","hash":"e7deb20a16868ae9d3e35ba3c5693de71fdf6999","modified":1578905288000},{"_id":"themes/archer/src/scss/_normalize.scss","hash":"a2dbeb38ad08bb8975856d75954cc697bf8e5ff7","modified":1578905288000},{"_id":"themes/archer/src/scss/_common.scss","hash":"dedc313b082e0a16daf87213badd21b13be11af8","modified":1578905288000},{"_id":"themes/archer/src/scss/mobile.scss","hash":"aadc2fbf37fefc2ad391d8172d5b61817f9db0c5","modified":1578905288000},{"_id":"themes/archer/src/scss/_variables.scss","hash":"136e5d990c4f8eadf6cabdfa5a053941e90bcd20","modified":1579071861000},{"_id":"themes/archer/src/scss/style.scss","hash":"78e31370d45089b97fa91929345f1a29f2e6a0a2","modified":1578905288000},{"_id":"source/_posts/HTTP协议/qingqiudemo.jpg","hash":"eb7d5a99e337010949017c5771d3d451be607f05","modified":1584009799000},{"_id":"source/_posts/css盒子模型/biaozhun.jpg","hash":"2e38705c1f2bbf04182ce788a33f276825529929","modified":1583288533000},{"_id":"source/_posts/vue生命周期以及nextTick应用/biaoge.webp","hash":"88aa25471288da771d62ab51ee7c9fd1305c6b46","modified":1580869395000},{"_id":"themes/archer/layout/_partial/comment/custom.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1578905288000},{"_id":"themes/archer/source/avatar/mine.jpeg","hash":"1b4eccdbeb9a87e66ddad3569b16e0b3b9bbbd5d","modified":1578908374000},{"_id":"themes/archer/source/font/Oswald-Regular.ttf","hash":"965d729546a43a8490ad4cf33c25ac475682100c","modified":1578905288000},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff","hash":"12eef75e1ad3eca9dae42b65505010ce4464a315","modified":1578905288000},{"_id":"themes/archer/source/intro/404-bg.jpg","hash":"3afb5bb26f4ff0bd0e0a28df955c8aa7d746d3c5","modified":1578905288000},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff2","hash":"f5991289ec17884cb641da0646d278d36702a190","modified":1578905288000},{"_id":"themes/archer/source/lib/jquery.min.js","hash":"0dc32db4aa9c5f03f3b38c47d883dbd4fed13aae","modified":1578905288000},{"_id":"source/_posts/vue生命周期以及nextTick应用/shengming.webp","hash":"ceb669b5a12f77fdb6207e0382a3d629def72680","modified":1580869026000},{"_id":"themes/archer/layout/_partial/comment/changyan.ejs","hash":"7691642fb9375607e0ac988a7420999e242cb2c9","modified":1578905288000},{"_id":"themes/archer/layout/_partial/comment/disqus.ejs","hash":"cadd97820a23d01d8b7e2f19a86e5290cef5a8a6","modified":1578905288000},{"_id":"themes/archer/layout/_partial/comment/gitment.ejs","hash":"794647a8a4ac9e1d01d74c07717175a141b1e01c","modified":1578905288000},{"_id":"themes/archer/layout/_partial/comment/livere.ejs","hash":"b27469f19f35ec2037c7bce736a12e9dfb5e360b","modified":1578905288000},{"_id":"themes/archer/layout/_partial/comment/valine.ejs","hash":"2154360e330dab94540e168e9d301c7b7091968e","modified":1578905288000},{"_id":"themes/archer/layout/_partial/comment/youyan.ejs","hash":"790d76f2667377db78a7d04bad8d629e47e7aab0","modified":1578905288000},{"_id":"themes/archer/layout/_partial/critical-css/critical-style.ejs","hash":"c03e16a7741908c207bf58363dcd1349cb639ef8","modified":1578905288000},{"_id":"themes/archer/layout/_partial/script/font-loader.ejs","hash":"291cc0a4a444a93b93c32e2c39383c70e36e46de","modified":1578905288000},{"_id":"themes/archer/layout/_partial/sidebar/base-sidebar.ejs","hash":"2d38af7cb5aabc0af99de239bd180c516ec4c56c","modified":1578905288000},{"_id":"themes/archer/layout/_partial/sidebar/sidebar-archives.ejs","hash":"daa78b17a773bca569f1c8ca2c916495ca138da6","modified":1578905288000},{"_id":"themes/archer/layout/_partial/sidebar/sidebar-categories.ejs","hash":"147214469c4909eb94943599883f9fa0f3cc090d","modified":1578905288000},{"_id":"themes/archer/layout/_partial/sidebar/sidebar-tags.ejs","hash":"d6e1a192cac5dcf365ce1a52df4f23feafeeb849","modified":1578905288000},{"_id":"themes/archer/package-lock.json","hash":"89a3b67d32f6916cdc21d590d87e43d8a44be8c3","modified":1553725894000},{"_id":"themes/archer/src/scss/_partial/_404.scss","hash":"a2b56f441a9a44d7f5b9b41eaa8136321328d7e9","modified":1578905288000},{"_id":"themes/archer/src/scss/_partial/_algolia.scss","hash":"c679578d2feb0bd7d3f80c2f693ba58cbca4428b","modified":1578905288000},{"_id":"themes/archer/src/scss/_partial/_index-page.scss","hash":"fa993cf0bbe0086cd8ec3d9a639b2d5b28ccfa8e","modified":1578905288000},{"_id":"themes/archer/src/scss/_partial/_post-page.scss","hash":"7c557844850d53cc4fc36aaf6d59847d8f238947","modified":1578905288000},{"_id":"themes/archer/docs/snap.png","hash":"0b2a8bf016f6eed576abfdcdb7dcf8de51c12562","modified":1578905288000},{"_id":"themes/archer/source/intro/post-bg.jpg","hash":"525fafb2238c27754d8fa751f143ff1de9b8482d","modified":1578905288000},{"_id":"themes/archer/src/scss/_partial/_partial/_footer.scss","hash":"726c543ee066e0b3222b236d9b4ef0109c0bdddf","modified":1578905288000},{"_id":"themes/archer/src/scss/_partial/_partial/_header.scss","hash":"77003ff22b1a10fae2d2768938277959b3f93a72","modified":1578905288000},{"_id":"themes/archer/src/scss/_partial/_partial/_intro.scss","hash":"a1569f39eccd64a12425d81b794c53df126a4d87","modified":1578905288000},{"_id":"themes/archer/src/scss/_partial/_partial/_profile.scss","hash":"0c986b52ce9083f08c37c5c9b5de045ac5e1d2fa","modified":1578905288000},{"_id":"themes/archer/src/scss/_partial/_partial/_paginator.scss","hash":"67c2e697a5fbb3b8006cf358ea45eb7f75b496f8","modified":1578905288000},{"_id":"themes/archer/src/scss/_partial/_partial/_scrollbar.scss","hash":"f2514031f9d7e4ed4a126694e78618ce6ff3a574","modified":1578905288000},{"_id":"themes/archer/src/scss/_partial/_sidebar/_sidebar-archive.scss","hash":"14bc42292873880c61b5fa9f47ee9d2e08d46871","modified":1578905288000},{"_id":"themes/archer/src/scss/_partial/_post/_code.scss","hash":"9c9a4e470da8732c9a3be3d5ce0d2f80f53714fe","modified":1578905288000},{"_id":"themes/archer/src/scss/_partial/_sidebar/_sidebar-tags.scss","hash":"9ab6f96d0df0c4ad4c72e2515fa2599d487d8f1a","modified":1578905288000},{"_id":"themes/archer/src/scss/_partial/_sidebar/_sidebar.scss","hash":"981a94978535769cb51c29e12b627f83c6fcedc5","modified":1578905288000},{"_id":"themes/archer/source/intro/about-bg.jpg","hash":"ab388276822417cc4e703312c14e20280ec783b3","modified":1578905288000},{"_id":"themes/archer/source/intro/index-bg.jpg","hash":"96b52e177b8bc53e64ec6ee1e10b2b6a4e13083b","modified":1578905288000},{"_id":"public/test.js","hash":"19fbd26403e9da287b55fae007f4c37823df4633","modified":1584012245023},{"_id":"public/content.json","hash":"ab4671727109c5f703a3f7f30452f2db6e769e1d","modified":1584012245023},{"_id":"public/404.html","hash":"592ed352534340b1ab8023e8ad1d11ccda49003c","modified":1584012245023},{"_id":"public/test.html","hash":"ff7c7cad5ff99bd13e23effb5ce3f74a96e8ba1c","modified":1584012245023},{"_id":"public/about/index.html","hash":"638c060b706c5248349013c61901846ee611a4cb","modified":1584012245023},{"_id":"public/2020/07/02/HTTP协议/index.html","hash":"8833df300965cf9d85ecc6ce02ecd3319fdb0cc5","modified":1584012245023},{"_id":"public/2019/06/25/Event事件常见应用/index.html","hash":"1b0f087f5a17e79177cf96656962859d610d74c0","modified":1584012245023},{"_id":"public/2019/06/11/DOM事件流/index.html","hash":"dea6921e1b73994866700366ecf73b504b8df7e0","modified":1584012245023},{"_id":"public/2019/06/01/DOM级别与DOM事件/index.html","hash":"e8f9ce8352926ef7ec9f1662ad7857f273cb7c3a","modified":1584012245023},{"_id":"public/2019/05/03/css之BFC/index.html","hash":"b22610ae7acdf4f033f70662bad661b00bc7c0b2","modified":1584012245023},{"_id":"public/2019/05/01/css盒子模型/index.html","hash":"654832557af196ffb955b687425851137ec0677b","modified":1584012245023},{"_id":"public/2019/04/19/页面布局/index.html","hash":"211eca1b03bfdff04875a4b879492cfcf37d6a4c","modified":1584012245023},{"_id":"public/2019/04/07/函数的防抖和节流/index.html","hash":"bf0815fa44b62b4f11693af1306e6666dc851bef","modified":1584012245023},{"_id":"public/2019/04/01/vue生命周期以及nextTick应用/index.html","hash":"e1d7861e76f30f430834460e2bb42b2221b28824","modified":1584012245023},{"_id":"public/2019/03/22/webp在项目中的应用/index.html","hash":"0b671eec5e134235a30fe6c081eb44c66c343f58","modified":1584012245023},{"_id":"public/2019/03/02/meta标签使用总结/index.html","hash":"869fc25dd5415970a6be26de6aa9670dd535a96a","modified":1584012245023},{"_id":"public/2019/02/21/前端性能优化——DNS预解析/index.html","hash":"f5acf056c846aa8cd3ebbaca7524be39ea1041e5","modified":1584012245023},{"_id":"public/2019/02/17/promose-all和promise-race/index.html","hash":"3e07ee543ac76044cc49ab707ecc00e27a66cdd8","modified":1584012245023},{"_id":"public/2019/02/05/promise原理和实现/index.html","hash":"4426682ca35cb74c561ef6bf5d8ca3cd143b585a","modified":1584012245023},{"_id":"public/2019/01/14/初尝hexo/index.html","hash":"9f8b9fe2b6909d2b13ad91e03090289524ab3f62","modified":1584012245023},{"_id":"public/archives/index.html","hash":"658ed8b76a64cbe9fe1b23fecc18ec9da9bd294e","modified":1584012245023},{"_id":"public/archives/page/2/index.html","hash":"d57143caf6b7be2a49ba16f09c1e687c1f564aef","modified":1584012245023},{"_id":"public/archives/2019/index.html","hash":"971c8d2d6d7829b9bfeab0ecc984b69fee40b321","modified":1584012245023},{"_id":"public/archives/2019/page/2/index.html","hash":"120dc0946f2d2a6b77b7385b3169cd874ffc96e8","modified":1584012245023},{"_id":"public/archives/2019/01/index.html","hash":"636d67051157dd3b5e26befcd40482c716f98b5d","modified":1584012245023},{"_id":"public/archives/2019/02/index.html","hash":"6f3817e6bb957e7bf7692371030ffea0ab2c9f9c","modified":1584012245023},{"_id":"public/archives/2019/03/index.html","hash":"5b55cdb82d80c7e52f2d86a06c770c5e0661fa1a","modified":1584012245023},{"_id":"public/archives/2019/04/index.html","hash":"e3136d0acdac5cf1a9a57e9b3fee975a67405bc8","modified":1584012245023},{"_id":"public/archives/2019/05/index.html","hash":"60a91ef746c8cac3fbaa8846ed815f83fd0022e1","modified":1584012245023},{"_id":"public/archives/2019/06/index.html","hash":"1718a3d4aa0bafe1e7a5c51fd23b2be2ed72edb0","modified":1584012245023},{"_id":"public/archives/2020/index.html","hash":"07dd132ed0c74be1305e76218bea2fadf47d94cb","modified":1584012245023},{"_id":"public/archives/2020/07/index.html","hash":"07dd132ed0c74be1305e76218bea2fadf47d94cb","modified":1584012245023},{"_id":"public/index.html","hash":"b29a9c78db9961243b6b509775df5c99d2f5e325","modified":1584012245023},{"_id":"public/page/2/index.html","hash":"b3453bcbbb5052bb8a867b3f538d1317fc9b9e32","modified":1584012245023},{"_id":"public/tags/html/index.html","hash":"805c1f29092ebd549865c78a11cf4cbe2407398e","modified":1584012245023},{"_id":"public/tags/http/index.html","hash":"07dd132ed0c74be1305e76218bea2fadf47d94cb","modified":1584012245023},{"_id":"public/tags/css/index.html","hash":"60a91ef746c8cac3fbaa8846ed815f83fd0022e1","modified":1584012245023},{"_id":"public/tags/Promise/index.html","hash":"a577f1e596015287357877f5384aeac4410dbad4","modified":1584012245023},{"_id":"public/tags/vue/index.html","hash":"5a2d2aaacb1fc4f187877753e3e7a5e3339837f8","modified":1584012245023},{"_id":"public/tags/hexo/index.html","hash":"636d67051157dd3b5e26befcd40482c716f98b5d","modified":1584012245023},{"_id":"public/tags/javascript/index.html","hash":"7c7c8a3d75ad5bdba44cb2a480dbfca5ad3f067c","modified":1584012245023},{"_id":"public/tags/前端性能优化/index.html","hash":"f0beb66ff0bf5834ad48fec800ff927da8f5d9b4","modified":1584012245023},{"_id":"public/assets/example_qr.png","hash":"cce20432c34875f4d9c6df927ede0fc0f00bb194","modified":1584012245023},{"_id":"public/assets/favicon.ico","hash":"25d327edb1a95957606731ca725ad7a41aa86832","modified":1584012245023},{"_id":"public/assets/loading.svg","hash":"45be17d07697d604d8981890eb21e308530c7a38","modified":1584012245023},{"_id":"public/avatar/Misaka.jpg","hash":"74a0372523f98dfbba992bf80642e160d04dc9b1","modified":1584012245023},{"_id":"public/font/Source Sans Pro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1584012245023},{"_id":"public/font/Source Sans Pro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1584012245023},{"_id":"public/2019/05/01/css盒子模型/ie.jpg","hash":"10836afcaf1bfc8e0c51e6e3f10fe8c158af3913","modified":1584012245023},{"_id":"public/2019/04/01/vue生命周期以及nextTick应用/biaoge.webp","hash":"88aa25471288da771d62ab51ee7c9fd1305c6b46","modified":1584012245023},{"_id":"public/2020/07/02/HTTP协议/qingqiuti.png","hash":"b7b26c845c04013bef1513270b0c279fc93e1f0f","modified":1584012245023},{"_id":"public/2019/05/03/css之BFC/bfc.png","hash":"e772b86e17f557dae7eac673b115afafdb3768b2","modified":1584012245023},{"_id":"public/2019/05/03/css之BFC/float.png","hash":"bc3d6012419c506cd97e17128172e54436377208","modified":1584012245023},{"_id":"public/2019/05/03/css之BFC/margin.png","hash":"5844c6e7cb183a9485b20cfb70ab7328fdfb2301","modified":1584012245023},{"_id":"public/2019/05/03/css之BFC/wubfc.png","hash":"20d781a1edf2c4f9e655f98f2d654df0a16dccc6","modified":1584012245023},{"_id":"public/2019/03/22/webp在项目中的应用/liucheng.webp","hash":"29fb994c83bb701f895f149177e04c6f7ea4f450","modified":1584012245023},{"_id":"public/2019/03/22/webp在项目中的应用/jianrong.webp","hash":"9fd19fedb37fe15ab8e79ee5968b0489653c0a7b","modified":1584012245023},{"_id":"public/2019/03/22/webp在项目中的应用/taobao.webp","hash":"bbfa44c19551573a9d915babea32a5ac024d4a03","modified":1584012245023},{"_id":"public/2019/03/22/webp在项目中的应用/yasuo.webp","hash":"6919a10f5c95993e136b21c6ff2e990029413a4b","modified":1584012245023},{"_id":"public/avatar/mine.jpeg","hash":"1b4eccdbeb9a87e66ddad3569b16e0b3b9bbbd5d","modified":1584012245023},{"_id":"public/font/Oswald-Regular.ttf","hash":"965d729546a43a8490ad4cf33c25ac475682100c","modified":1584012245023},{"_id":"public/font/SourceCodePro-Regular.ttf.woff","hash":"12eef75e1ad3eca9dae42b65505010ce4464a315","modified":1584012245023},{"_id":"public/intro/404-bg.jpg","hash":"3afb5bb26f4ff0bd0e0a28df955c8aa7d746d3c5","modified":1584012245023},{"_id":"public/font/SourceCodePro-Regular.ttf.woff2","hash":"f5991289ec17884cb641da0646d278d36702a190","modified":1584012245023},{"_id":"public/assets/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1584012245023},{"_id":"public/2020/07/02/HTTP协议/xiangying.jpg","hash":"11a3601c3b3c30400007d53b6725d652ece9f93f","modified":1584012245023},{"_id":"public/css/mobile.css","hash":"51d7b5cf26c8f82a3daad4bc55518673fdf281f5","modified":1584012245023},{"_id":"public/scripts/search.js","hash":"d5f739e261e8ce74f993c6157b248663bda122bf","modified":1584012245023},{"_id":"public/lib/webfontloader.min.js","hash":"bc6ffe9c0d8b3285564619a445c6ca575eb9d0f5","modified":1584012245023},{"_id":"public/css/style.css","hash":"5d5e869db0c62957d59c6865baaecd1428c51804","modified":1584012245023},{"_id":"public/scripts/main.js","hash":"e89a9651131684204118fa74bd19cb781d76a372","modified":1584012245023},{"_id":"public/scripts/share.js","hash":"bb5bb37ce7f47f8c084b232df3e5fe2378d7ca01","modified":1584012245023},{"_id":"public/lib/jquery.min.js","hash":"0dc32db4aa9c5f03f3b38c47d883dbd4fed13aae","modified":1584012245023},{"_id":"public/2019/05/01/css盒子模型/biaozhun.jpg","hash":"2e38705c1f2bbf04182ce788a33f276825529929","modified":1584012245023},{"_id":"public/2020/07/02/HTTP协议/qingqiudemo.jpg","hash":"eb7d5a99e337010949017c5771d3d451be607f05","modified":1584012245023},{"_id":"public/intro/post-bg.jpg","hash":"525fafb2238c27754d8fa751f143ff1de9b8482d","modified":1584012245023},{"_id":"public/2019/04/01/vue生命周期以及nextTick应用/shengming.webp","hash":"ceb669b5a12f77fdb6207e0382a3d629def72680","modified":1584012245023},{"_id":"public/intro/about-bg.jpg","hash":"ab388276822417cc4e703312c14e20280ec783b3","modified":1584012245023},{"_id":"public/intro/index-bg.jpg","hash":"96b52e177b8bc53e64ec6ee1e10b2b6a4e13083b","modified":1584012245023}],"Category":[],"Data":[],"Page":[{"layout":"404","title":"[404]","description":"我去哪里了？","_content":"我去哪里了？","source":"404.md","raw":"---\nlayout: 404\ntitle: \"[404]\"\ndescription: \"我去哪里了？\"\n---\n我去哪里了？","date":"2020-02-05T08:43:28.000Z","updated":"2020-02-05T08:43:28.000Z","path":"404.html","comments":1,"_id":"ck7onzqvj0000yts67h42chy3","content":"<p>我去哪里了？</p>\n","site":{"data":{}},"excerpt":"","more":"<p>我去哪里了？</p>\n"},{"_content":"<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\" />\n\t\t<title>DOM事件流</title>\n\t</head>\n\n\t<body>\n\t\t<div id=\"ev\">\n\t\t\t<style>\n\t\t\t\t#ev {\n\t\t\t\t\twidth: 300px;\n\t\t\t\t\theight: 100px;\n\t\t\t\t\tbackground-color: red;\n\t\t\t\t\tcolor: #fff;\n\t\t\t\t\ttext-align: center;\n\t\t\t\t\tline-height: 100px;\n\t\t\t\t}\n\t\t\t</style>\n\t\t\t目标元素\n\t\t</div>\n\t\t<script type=\"text/javascript\">\n\t\t\tvar ev = document.getElementById('ev');\n\t\t\twindow.addEventListener(\n\t\t\t\t'click',\n\t\t\t\tfunction() {\n\t\t\t\t\tconsole.log('window捕获阶段');\n\t\t\t\t},\n\t\t\t\ttrue\n\t\t\t);\n\t\t\tdocument.addEventListener(\n\t\t\t\t'click',\n\t\t\t\tfunction() {\n\t\t\t\t\tconsole.log('doc捕获阶段');\n\t\t\t\t},\n\t\t\t\ttrue\n\t\t\t);\n\t\t\tdocument.documentElement.addEventListener(\n\t\t\t\t'click',\n\t\t\t\tfunction() {\n\t\t\t\t\tconsole.log('html捕获阶段');\n\t\t\t\t},\n\t\t\t\ttrue\n\t\t\t);\n\t\t\tdocument.body.addEventListener(\n\t\t\t\t'click',\n\t\t\t\tfunction() {\n\t\t\t\t\tconsole.log('body捕获阶段');\n\t\t\t\t},\n\t\t\t\ttrue\n\t\t\t);\n\t\t\tev.addEventListener(\n\t\t\t\t'click',\n\t\t\t\tfunction() {\n\t\t\t\t\tconsole.log('div捕获阶段');\n\t\t\t\t},\n\t\t\t\ttrue\n            );\n            var eve=new Event('test');\n            ev.addEventListener('test',function(){\n                console.log('自定义事件');\n            });\n            ev.dispatchEvent(eve);\n\t\t</script>\n\t</body>\n</html>\n","source":"test.html","raw":"<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\" />\n\t\t<title>DOM事件流</title>\n\t</head>\n\n\t<body>\n\t\t<div id=\"ev\">\n\t\t\t<style>\n\t\t\t\t#ev {\n\t\t\t\t\twidth: 300px;\n\t\t\t\t\theight: 100px;\n\t\t\t\t\tbackground-color: red;\n\t\t\t\t\tcolor: #fff;\n\t\t\t\t\ttext-align: center;\n\t\t\t\t\tline-height: 100px;\n\t\t\t\t}\n\t\t\t</style>\n\t\t\t目标元素\n\t\t</div>\n\t\t<script type=\"text/javascript\">\n\t\t\tvar ev = document.getElementById('ev');\n\t\t\twindow.addEventListener(\n\t\t\t\t'click',\n\t\t\t\tfunction() {\n\t\t\t\t\tconsole.log('window捕获阶段');\n\t\t\t\t},\n\t\t\t\ttrue\n\t\t\t);\n\t\t\tdocument.addEventListener(\n\t\t\t\t'click',\n\t\t\t\tfunction() {\n\t\t\t\t\tconsole.log('doc捕获阶段');\n\t\t\t\t},\n\t\t\t\ttrue\n\t\t\t);\n\t\t\tdocument.documentElement.addEventListener(\n\t\t\t\t'click',\n\t\t\t\tfunction() {\n\t\t\t\t\tconsole.log('html捕获阶段');\n\t\t\t\t},\n\t\t\t\ttrue\n\t\t\t);\n\t\t\tdocument.body.addEventListener(\n\t\t\t\t'click',\n\t\t\t\tfunction() {\n\t\t\t\t\tconsole.log('body捕获阶段');\n\t\t\t\t},\n\t\t\t\ttrue\n\t\t\t);\n\t\t\tev.addEventListener(\n\t\t\t\t'click',\n\t\t\t\tfunction() {\n\t\t\t\t\tconsole.log('div捕获阶段');\n\t\t\t\t},\n\t\t\t\ttrue\n            );\n            var eve=new Event('test');\n            ev.addEventListener('test',function(){\n                console.log('自定义事件');\n            });\n            ev.dispatchEvent(eve);\n\t\t</script>\n\t</body>\n</html>\n","date":"2020-03-12T09:19:24.000Z","updated":"2020-03-12T09:19:24.000Z","path":"test.html","title":"","comments":1,"layout":"page","_id":"ck7onzqvo0001yts67xel133m","content":"<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\">\n\t\t<title>DOM事件流</title>\n\t<meta name=\"generator\" content=\"Hexo 4.2.0\"></head>\n\n\t<body>\n\t\t<div id=\"ev\">\n\t\t\t<style>\n\t\t\t\t#ev {\n\t\t\t\t\twidth: 300px;\n\t\t\t\t\theight: 100px;\n\t\t\t\t\tbackground-color: red;\n\t\t\t\t\tcolor: #fff;\n\t\t\t\t\ttext-align: center;\n\t\t\t\t\tline-height: 100px;\n\t\t\t\t}\n\t\t\t</style>\n\t\t\t目标元素\n\t\t</div>\n\t\t<script type=\"text/javascript\">\n\t\t\tvar ev = document.getElementById('ev');\n\t\t\twindow.addEventListener(\n\t\t\t\t'click',\n\t\t\t\tfunction() {\n\t\t\t\t\tconsole.log('window捕获阶段');\n\t\t\t\t},\n\t\t\t\ttrue\n\t\t\t);\n\t\t\tdocument.addEventListener(\n\t\t\t\t'click',\n\t\t\t\tfunction() {\n\t\t\t\t\tconsole.log('doc捕获阶段');\n\t\t\t\t},\n\t\t\t\ttrue\n\t\t\t);\n\t\t\tdocument.documentElement.addEventListener(\n\t\t\t\t'click',\n\t\t\t\tfunction() {\n\t\t\t\t\tconsole.log('html捕获阶段');\n\t\t\t\t},\n\t\t\t\ttrue\n\t\t\t);\n\t\t\tdocument.body.addEventListener(\n\t\t\t\t'click',\n\t\t\t\tfunction() {\n\t\t\t\t\tconsole.log('body捕获阶段');\n\t\t\t\t},\n\t\t\t\ttrue\n\t\t\t);\n\t\t\tev.addEventListener(\n\t\t\t\t'click',\n\t\t\t\tfunction() {\n\t\t\t\t\tconsole.log('div捕获阶段');\n\t\t\t\t},\n\t\t\t\ttrue\n            );\n            var eve=new Event('test');\n            ev.addEventListener('test',function(){\n                console.log('自定义事件');\n            });\n            ev.dispatchEvent(eve);\n\t\t</script>\n\t</body>\n</html>\n","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\">\n\t\t<title>DOM事件流</title>\n\t<meta name=\"generator\" content=\"Hexo 4.2.0\"></head>\n\n\t<body>\n\t\t<div id=\"ev\">\n\t\t\t<style>\n\t\t\t\t#ev {\n\t\t\t\t\twidth: 300px;\n\t\t\t\t\theight: 100px;\n\t\t\t\t\tbackground-color: red;\n\t\t\t\t\tcolor: #fff;\n\t\t\t\t\ttext-align: center;\n\t\t\t\t\tline-height: 100px;\n\t\t\t\t}\n\t\t\t</style>\n\t\t\t目标元素\n\t\t</div>\n\t\t<script type=\"text/javascript\">\n\t\t\tvar ev = document.getElementById('ev');\n\t\t\twindow.addEventListener(\n\t\t\t\t'click',\n\t\t\t\tfunction() {\n\t\t\t\t\tconsole.log('window捕获阶段');\n\t\t\t\t},\n\t\t\t\ttrue\n\t\t\t);\n\t\t\tdocument.addEventListener(\n\t\t\t\t'click',\n\t\t\t\tfunction() {\n\t\t\t\t\tconsole.log('doc捕获阶段');\n\t\t\t\t},\n\t\t\t\ttrue\n\t\t\t);\n\t\t\tdocument.documentElement.addEventListener(\n\t\t\t\t'click',\n\t\t\t\tfunction() {\n\t\t\t\t\tconsole.log('html捕获阶段');\n\t\t\t\t},\n\t\t\t\ttrue\n\t\t\t);\n\t\t\tdocument.body.addEventListener(\n\t\t\t\t'click',\n\t\t\t\tfunction() {\n\t\t\t\t\tconsole.log('body捕获阶段');\n\t\t\t\t},\n\t\t\t\ttrue\n\t\t\t);\n\t\t\tev.addEventListener(\n\t\t\t\t'click',\n\t\t\t\tfunction() {\n\t\t\t\t\tconsole.log('div捕获阶段');\n\t\t\t\t},\n\t\t\t\ttrue\n            );\n            var eve=new Event('test');\n            ev.addEventListener('test',function(){\n                console.log('自定义事件');\n            });\n            ev.dispatchEvent(eve);\n\t\t</script>\n\t</body>\n</html>\n"},{"_content":"Promise.all = (arr) => {\n    let resultList = new Array(arr.length);\n    return new Promise((resolve, reject) => {\n        let temp = 0;\n        for (let i = 0, len = arr.length; i < len; i++) {\n            arr[i].then((res, rej) => {\n                if (!rej) {\n                    resultList[i] = (res);\n                    if (temp == arr.length) {\n                        resolve(resultList);\n                    }\n                    temp++;\n                } else {\n                    reject(rej);\n                }\n            })\n        }\n    })\n};","source":"test.js","raw":"Promise.all = (arr) => {\n    let resultList = new Array(arr.length);\n    return new Promise((resolve, reject) => {\n        let temp = 0;\n        for (let i = 0, len = arr.length; i < len; i++) {\n            arr[i].then((res, rej) => {\n                if (!rej) {\n                    resultList[i] = (res);\n                    if (temp == arr.length) {\n                        resolve(resultList);\n                    }\n                    temp++;\n                } else {\n                    reject(rej);\n                }\n            })\n        }\n    })\n};","date":"2020-01-16T05:19:38.000Z","updated":"2020-01-16T05:19:38.000Z","path":"test.js","layout":"false","title":"","comments":1,"_id":"ck7onzqvp0002yts6gsgv8tsp","content":"Promise.all = (arr) => {\n    let resultList = new Array(arr.length);\n    return new Promise((resolve, reject) => {\n        let temp = 0;\n        for (let i = 0, len = arr.length; i < len; i++) {\n            arr[i].then((res, rej) => {\n                if (!rej) {\n                    resultList[i] = (res);\n                    if (temp == arr.length) {\n                        resolve(resultList);\n                    }\n                    temp++;\n                } else {\n                    reject(rej);\n                }\n            })\n        }\n    })\n};","site":{"data":{}},"excerpt":"","more":"Promise.all = (arr) => {\n    let resultList = new Array(arr.length);\n    return new Promise((resolve, reject) => {\n        let temp = 0;\n        for (let i = 0, len = arr.length; i < len; i++) {\n            arr[i].then((res, rej) => {\n                if (!rej) {\n                    resultList[i] = (res);\n                    if (temp == arr.length) {\n                        resolve(resultList);\n                    }\n                    temp++;\n                } else {\n                    reject(rej);\n                }\n            })\n        }\n    })\n};"},{"title":"个人分享自己的学习经历的blog","layout":"about","_content":"前端攻城狮一枚，工作多年后将自己的笔记总结为博客，总结自己。\n","source":"about/index.md","raw":"---\ntitle: 个人分享自己的学习经历的blog\nlayout: about\n---\n前端攻城狮一枚，工作多年后将自己的笔记总结为博客，总结自己。\n","date":"2020-01-14T07:16:44.000Z","updated":"2020-01-14T07:16:44.000Z","path":"about/index.html","comments":1,"_id":"ck7onzqwy0004yts69a2bg2ai","content":"<p>前端攻城狮一枚，工作多年后将自己的笔记总结为博客，总结自己。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>前端攻城狮一枚，工作多年后将自己的笔记总结为博客，总结自己。</p>\n"}],"Post":[{"layout":"[post]","title":"DOM事件流","date":"2019-06-11T10:48:56.000Z","_content":"## 什么是事件？\n> 事件, 就是文档或浏览器窗口发生的一些特定的交互瞬间. JavaScript 和 HTML 之间的交互是通过事件实现的. 可以使用事件监听器来监听事件, 以便事件发生时执行相应的代码.\n<!-- more -->\n## 事件流是什么？\n\n当在页面上某个元素触发特定事件时, 比如点击, 除了被点击的目标元素, 所有祖先元素都会触发该事件, 一直到 window.\n\n那这样就出现了一个问题, 是先在目标元素上触发事件, 还是先在祖先元素上触发呢? 这就是事件流的概念.\n\n**事件流是事件在目标元素和祖先元素间的触发顺序**\n\n- **捕获**- Capture - 事件由最顶层逐级向下传播, 直至到达目标元素.\n- **冒泡** - Bubble - 顾名思义, 类似水中冒泡, 从下往上. 事件由第一个被触发的元素接收, 然后逐级向上传播.\n\n后来 w3c 采用折中的方式, 规定先捕获再冒泡平息了战火. 如此一个事件就被分成了三个阶段(是的, 不光是捕获和冒泡):\n\n1. 捕获阶段 - The capture phase - 事件从最顶层元素 window 一直传递到目标元素的父元素.\n2. 目标阶段 - The target phase - 事件到达目标元素. 如果事件指定不冒泡. 那就会在这里中止.\n3. 冒泡阶段 - The bubble phase - 事件从目标元素父元素向上逐级传递直到最顶层元素 window. 及捕获阶段的反方向.\n\n那这里又有一个新的疑问, 既然捕获和冒泡阶段都会触发事件, 那先捕获再冒泡, 岂不是路径上的元素都会触发两次事件?\n\n在 DOM2 中, 事件监听机制提供了一个参数来决定事件是在捕获阶段生效还是在冒泡阶段生效, 接下来简要学习下 ==addEventListener== .\n\n## addEventListener\n**EventTarget.addEventListener()** 方法将指定的监听器注册到目标元素上, 当该对象触发指定的事件时, 指定的回调函数就会被执行. 事件目标可以是一个文档上的元素或任何其他支持事件的对象 (比如 XMLHttpRequest).\n\n它的工作原理是将实现EventListener的函数或对象添加到调用它的 EventTarget 上的指定事件类型的事件侦听器列表中.\n\n#### 语法\n\n```js\ntarget.addEventListener(type, listener[, options]);\ntarget.addEventListener(type, listener[, useCapture]);\ntarget.addEventListener(type, listener[, useCapture, wantsUntrusted  ]);  // Gecko/Mozilla only\n```\n - type: 表示监听事件类型的字符串. 事件列表.\n - listener: 当所监听的事件类型触发时的回调. 会接收到一个事件通知对象.\n - options: 可选. 可用的选项如下:\n - capture: Boolean, 如果是 true, 表示 listener 会在捕获阶段触发. 默认是 false. 冒泡捕获. 所以微软牛逼.\n - once: Boolean, 如果是 true, 表示 listener 在添加之后最多只调用一次.\n - passive: Boolean，如果是, 表示 listener 永远不会调用 preventDefault(). 如果 listener 仍然调用了这个函数, 客户端将会忽略它并抛出一个控制台警告.\n - useCapture: 可选. Boolean, 同 options - capture\n\n> 注意: 对于目标元素上的事件监听器来说, 事件会处于目标阶段, 而不是冒泡阶段或者捕获阶段. 在目标阶段的事件会触发该元素上的所有监听器, 而不在乎这个监听器到底在注册时 useCapture 是 true 还是 false.\n\n## 事件监听添加与移除\n### 事件添加的三种方式\n1. 通过HTML 属性的方式\n```html\n<div onclick=\"console.log('click')\"></div>\n```\n\n2. DOM0 中可以通过js脚本来给指定元素提供事件处理函数，即\n```\nelement.onclick = function // 只会在冒泡阶段生效\n```\n\n3. DOM2 中, 添加了新的事件监听API, 即```addEventListener```, 同时提供了取消监听的 ```removeEventListener(type, handler[, options | useCapture])```. 显然事件处理函数注册后, 要取消监听, ```type/hanlder/useCapture```的一致.\n\n相比第一, 第二种, ```addEventListener```的方式有以下几点优势:\n- 可以为同一个事件注册多个回调函数, 依次触发. 而 DOM0 的方式则会被覆盖掉. 只能添加一种\n- 使用 DOM0 会覆盖 HTML 的方式.\n- 可以通过参数决定监听是在冒泡阶段生效还是在捕获阶段生效.\n- ```element.onclick``` 注册的监听只会在冒泡阶段生效\n\n##### 实例\n\n\n```html\n<div id=\"parent\">\n    <div id=\"child\" onclick=\"console.log('html')\"/>\n</div>\n```\n\n```js\nconst child = document.getElementById('child') \n\nchild.onclick = function () { console.log('DOM0A') } // 覆盖了 HTML 的方式\nchild.onclick = function () { console.log('DOM0B') } // 覆盖了上一条 DOM0A   \n\nchild.addEventLisnter('click', function () { console.log('lisnterA') })\nchild.addEventLisnter('click', function () { console.log('lisnterB') }) // 不会覆盖\n```\n##### 三种方式对应的如何移除:\n\n```js\nchild.setAttributer('onclick', false)\nchild.onclick = null\nchild.removeEventLisnter('设置相同的参数')\n```\n## 问题\n1. 以下代码的输出顺序\n```html\n<html onclick=\"console.log('html')\">\n\n<head>\n    <meta charset=\"UTF-8\">\n\n    <title>Test</title>\n    <script type=\"text/javascript\">\n        window.onload = function() {\n            const parent = document.getElementById(\"parent\");\n            const child = document.getElementById(\"child\");\n\n            child.onclick = function () { console.log('child onclick') };\n\n            // capture 默认为 false, 冒泡\n            parent.addEventListener('click', function () { console.log('parent event') });\n            child.addEventListener('click', function () { console.log('child event') });\n\n            // 捕获\n            parent.addEventListener('click', function () { console.log('parent event capture') }, { capture: true });\n            child.addEventListener('click', function () { console.log('child event capture') }, { capture: true });\n        }\n        window.onclick = function() {\n            console.log('window');\n        }\n    </script>\n</head>\n\n<body onclick=\"console.log('body')\">\n    <div id=\"parent\" onclick=\"console.log('parent html')\">parent\n        <div id=\"child\" onclick=\"console.log('child html')\">child</div>\n    </div>\n</div>\n</body>\n\n</html>\n```\n\n2. 什么是事件流，同一个事件有几个阶段？\n3. 如何移除通过HTML属性、element.onclick等注册的事件处理函数？\n## 答案\n### 问题1\n\n首先参考 chrome 浏览器的结果. 先来看点击 child, 输出:  \n\n1. parent html\n2. parent event\n3. parent event capture\n4. body\n5. html\n6. window\n\n奇怪! 这时候不是应该先捕获, capture 在前吗? 别急, 这时候如果调换 parent event 与 parent event capture 的 addEventListener 顺序, 会发现, 输出顺序也变了:\n\n1. parent html\n1. **parent event capture**\n1. **parent event**\n1. body\n1. html\n1. window\n\n其实这时候的输出顺序只和 ```addEventListener``` 的顺序有关. 是否开启 ```capture``` 无关. 因为我们是直接点击了 ```parent```. 对于 ```parent``` 自身而言. 它在整个点击传递过程中处于目标阶段. 并不涉及捕获和冒泡. 同时我们也发现. html 设置的点击是优先于 ```addEventListener``` 的方式的.\n\n我们再来看下点击 child:\n\n1. parent event capture\n1. hild onclick\n1. child event\n1. child event capture\n1. parent html\n1. parent event\n1. body\n1. html\n1. window\n\n首先, child html 没有输出, 因为被 child onclick 覆盖掉了.\n\n第二点, child onclick 的优先级也是高于 ```addEventListener``` 的.\n\n再然后, 点击事件传递过程中, 首先在捕获阶段, 输出了 parent event capture. 然后到达目标阶段. 同理之前点击 parent. 如果此时调换 child event 与 child event capture 的 ```addEventListener``` 顺序. 输出顺序也会改变\n\n最后, 到达冒泡阶段, 由于 html 的优先级高于 ```addEventListener```. 所以被输出. (别忘了, 默认都是开启冒泡)\n\n但是. 如果使用 Safari 浏览器, 则会发现, 点击 parent, 输出:\n\n1. parent event capture\n2. parent html\n3. parent event\n4. body\n5. html\n6. window\n\n点击 child, 输出:\n\n1. parent event capture\n1. child event capture\n1. child onclick\n1. child event\n1. parent html\n1. parent event\n1. body\n1. html\n1. window\n\n会发现, 对于捕获阶段的处理不一样了. 点击目标元素时, 目标元素不仅处于目标阶段, 也处于捕获阶段的终点和冒泡阶段的起点. 所以会进行 ```capture``` 的判断. 所以在代码编写时这里要尤为注意.\n\n[原文地址](https://www.jianshu.com/p/6512139d1d9e)\n\n","source":"_posts/DOM事件流.md","raw":"---\nlayout: '[post]'\ntitle: DOM事件流\ndate: 2019-06-11 18:48:56\ntags: html\n---\n## 什么是事件？\n> 事件, 就是文档或浏览器窗口发生的一些特定的交互瞬间. JavaScript 和 HTML 之间的交互是通过事件实现的. 可以使用事件监听器来监听事件, 以便事件发生时执行相应的代码.\n<!-- more -->\n## 事件流是什么？\n\n当在页面上某个元素触发特定事件时, 比如点击, 除了被点击的目标元素, 所有祖先元素都会触发该事件, 一直到 window.\n\n那这样就出现了一个问题, 是先在目标元素上触发事件, 还是先在祖先元素上触发呢? 这就是事件流的概念.\n\n**事件流是事件在目标元素和祖先元素间的触发顺序**\n\n- **捕获**- Capture - 事件由最顶层逐级向下传播, 直至到达目标元素.\n- **冒泡** - Bubble - 顾名思义, 类似水中冒泡, 从下往上. 事件由第一个被触发的元素接收, 然后逐级向上传播.\n\n后来 w3c 采用折中的方式, 规定先捕获再冒泡平息了战火. 如此一个事件就被分成了三个阶段(是的, 不光是捕获和冒泡):\n\n1. 捕获阶段 - The capture phase - 事件从最顶层元素 window 一直传递到目标元素的父元素.\n2. 目标阶段 - The target phase - 事件到达目标元素. 如果事件指定不冒泡. 那就会在这里中止.\n3. 冒泡阶段 - The bubble phase - 事件从目标元素父元素向上逐级传递直到最顶层元素 window. 及捕获阶段的反方向.\n\n那这里又有一个新的疑问, 既然捕获和冒泡阶段都会触发事件, 那先捕获再冒泡, 岂不是路径上的元素都会触发两次事件?\n\n在 DOM2 中, 事件监听机制提供了一个参数来决定事件是在捕获阶段生效还是在冒泡阶段生效, 接下来简要学习下 ==addEventListener== .\n\n## addEventListener\n**EventTarget.addEventListener()** 方法将指定的监听器注册到目标元素上, 当该对象触发指定的事件时, 指定的回调函数就会被执行. 事件目标可以是一个文档上的元素或任何其他支持事件的对象 (比如 XMLHttpRequest).\n\n它的工作原理是将实现EventListener的函数或对象添加到调用它的 EventTarget 上的指定事件类型的事件侦听器列表中.\n\n#### 语法\n\n```js\ntarget.addEventListener(type, listener[, options]);\ntarget.addEventListener(type, listener[, useCapture]);\ntarget.addEventListener(type, listener[, useCapture, wantsUntrusted  ]);  // Gecko/Mozilla only\n```\n - type: 表示监听事件类型的字符串. 事件列表.\n - listener: 当所监听的事件类型触发时的回调. 会接收到一个事件通知对象.\n - options: 可选. 可用的选项如下:\n - capture: Boolean, 如果是 true, 表示 listener 会在捕获阶段触发. 默认是 false. 冒泡捕获. 所以微软牛逼.\n - once: Boolean, 如果是 true, 表示 listener 在添加之后最多只调用一次.\n - passive: Boolean，如果是, 表示 listener 永远不会调用 preventDefault(). 如果 listener 仍然调用了这个函数, 客户端将会忽略它并抛出一个控制台警告.\n - useCapture: 可选. Boolean, 同 options - capture\n\n> 注意: 对于目标元素上的事件监听器来说, 事件会处于目标阶段, 而不是冒泡阶段或者捕获阶段. 在目标阶段的事件会触发该元素上的所有监听器, 而不在乎这个监听器到底在注册时 useCapture 是 true 还是 false.\n\n## 事件监听添加与移除\n### 事件添加的三种方式\n1. 通过HTML 属性的方式\n```html\n<div onclick=\"console.log('click')\"></div>\n```\n\n2. DOM0 中可以通过js脚本来给指定元素提供事件处理函数，即\n```\nelement.onclick = function // 只会在冒泡阶段生效\n```\n\n3. DOM2 中, 添加了新的事件监听API, 即```addEventListener```, 同时提供了取消监听的 ```removeEventListener(type, handler[, options | useCapture])```. 显然事件处理函数注册后, 要取消监听, ```type/hanlder/useCapture```的一致.\n\n相比第一, 第二种, ```addEventListener```的方式有以下几点优势:\n- 可以为同一个事件注册多个回调函数, 依次触发. 而 DOM0 的方式则会被覆盖掉. 只能添加一种\n- 使用 DOM0 会覆盖 HTML 的方式.\n- 可以通过参数决定监听是在冒泡阶段生效还是在捕获阶段生效.\n- ```element.onclick``` 注册的监听只会在冒泡阶段生效\n\n##### 实例\n\n\n```html\n<div id=\"parent\">\n    <div id=\"child\" onclick=\"console.log('html')\"/>\n</div>\n```\n\n```js\nconst child = document.getElementById('child') \n\nchild.onclick = function () { console.log('DOM0A') } // 覆盖了 HTML 的方式\nchild.onclick = function () { console.log('DOM0B') } // 覆盖了上一条 DOM0A   \n\nchild.addEventLisnter('click', function () { console.log('lisnterA') })\nchild.addEventLisnter('click', function () { console.log('lisnterB') }) // 不会覆盖\n```\n##### 三种方式对应的如何移除:\n\n```js\nchild.setAttributer('onclick', false)\nchild.onclick = null\nchild.removeEventLisnter('设置相同的参数')\n```\n## 问题\n1. 以下代码的输出顺序\n```html\n<html onclick=\"console.log('html')\">\n\n<head>\n    <meta charset=\"UTF-8\">\n\n    <title>Test</title>\n    <script type=\"text/javascript\">\n        window.onload = function() {\n            const parent = document.getElementById(\"parent\");\n            const child = document.getElementById(\"child\");\n\n            child.onclick = function () { console.log('child onclick') };\n\n            // capture 默认为 false, 冒泡\n            parent.addEventListener('click', function () { console.log('parent event') });\n            child.addEventListener('click', function () { console.log('child event') });\n\n            // 捕获\n            parent.addEventListener('click', function () { console.log('parent event capture') }, { capture: true });\n            child.addEventListener('click', function () { console.log('child event capture') }, { capture: true });\n        }\n        window.onclick = function() {\n            console.log('window');\n        }\n    </script>\n</head>\n\n<body onclick=\"console.log('body')\">\n    <div id=\"parent\" onclick=\"console.log('parent html')\">parent\n        <div id=\"child\" onclick=\"console.log('child html')\">child</div>\n    </div>\n</div>\n</body>\n\n</html>\n```\n\n2. 什么是事件流，同一个事件有几个阶段？\n3. 如何移除通过HTML属性、element.onclick等注册的事件处理函数？\n## 答案\n### 问题1\n\n首先参考 chrome 浏览器的结果. 先来看点击 child, 输出:  \n\n1. parent html\n2. parent event\n3. parent event capture\n4. body\n5. html\n6. window\n\n奇怪! 这时候不是应该先捕获, capture 在前吗? 别急, 这时候如果调换 parent event 与 parent event capture 的 addEventListener 顺序, 会发现, 输出顺序也变了:\n\n1. parent html\n1. **parent event capture**\n1. **parent event**\n1. body\n1. html\n1. window\n\n其实这时候的输出顺序只和 ```addEventListener``` 的顺序有关. 是否开启 ```capture``` 无关. 因为我们是直接点击了 ```parent```. 对于 ```parent``` 自身而言. 它在整个点击传递过程中处于目标阶段. 并不涉及捕获和冒泡. 同时我们也发现. html 设置的点击是优先于 ```addEventListener``` 的方式的.\n\n我们再来看下点击 child:\n\n1. parent event capture\n1. hild onclick\n1. child event\n1. child event capture\n1. parent html\n1. parent event\n1. body\n1. html\n1. window\n\n首先, child html 没有输出, 因为被 child onclick 覆盖掉了.\n\n第二点, child onclick 的优先级也是高于 ```addEventListener``` 的.\n\n再然后, 点击事件传递过程中, 首先在捕获阶段, 输出了 parent event capture. 然后到达目标阶段. 同理之前点击 parent. 如果此时调换 child event 与 child event capture 的 ```addEventListener``` 顺序. 输出顺序也会改变\n\n最后, 到达冒泡阶段, 由于 html 的优先级高于 ```addEventListener```. 所以被输出. (别忘了, 默认都是开启冒泡)\n\n但是. 如果使用 Safari 浏览器, 则会发现, 点击 parent, 输出:\n\n1. parent event capture\n2. parent html\n3. parent event\n4. body\n5. html\n6. window\n\n点击 child, 输出:\n\n1. parent event capture\n1. child event capture\n1. child onclick\n1. child event\n1. parent html\n1. parent event\n1. body\n1. html\n1. window\n\n会发现, 对于捕获阶段的处理不一样了. 点击目标元素时, 目标元素不仅处于目标阶段, 也处于捕获阶段的终点和冒泡阶段的起点. 所以会进行 ```capture``` 的判断. 所以在代码编写时这里要尤为注意.\n\n[原文地址](https://www.jianshu.com/p/6512139d1d9e)\n\n","slug":"DOM事件流","published":1,"updated":"2020-03-11T10:49:41.000Z","comments":1,"photos":[],"link":"","_id":"ck7onzqwv0003yts6c28khbm4","content":"<h2 id=\"什么是事件？\"><a href=\"#什么是事件？\" class=\"headerlink\" title=\"什么是事件？\"></a>什么是事件？</h2><blockquote>\n<p>事件, 就是文档或浏览器窗口发生的一些特定的交互瞬间. JavaScript 和 HTML 之间的交互是通过事件实现的. 可以使用事件监听器来监听事件, 以便事件发生时执行相应的代码.</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"事件流是什么？\"><a href=\"#事件流是什么？\" class=\"headerlink\" title=\"事件流是什么？\"></a>事件流是什么？</h2><p>当在页面上某个元素触发特定事件时, 比如点击, 除了被点击的目标元素, 所有祖先元素都会触发该事件, 一直到 window.</p>\n<p>那这样就出现了一个问题, 是先在目标元素上触发事件, 还是先在祖先元素上触发呢? 这就是事件流的概念.</p>\n<p><strong>事件流是事件在目标元素和祖先元素间的触发顺序</strong></p>\n<ul>\n<li><strong>捕获</strong>- Capture - 事件由最顶层逐级向下传播, 直至到达目标元素.</li>\n<li><strong>冒泡</strong> - Bubble - 顾名思义, 类似水中冒泡, 从下往上. 事件由第一个被触发的元素接收, 然后逐级向上传播.</li>\n</ul>\n<p>后来 w3c 采用折中的方式, 规定先捕获再冒泡平息了战火. 如此一个事件就被分成了三个阶段(是的, 不光是捕获和冒泡):</p>\n<ol>\n<li>捕获阶段 - The capture phase - 事件从最顶层元素 window 一直传递到目标元素的父元素.</li>\n<li>目标阶段 - The target phase - 事件到达目标元素. 如果事件指定不冒泡. 那就会在这里中止.</li>\n<li>冒泡阶段 - The bubble phase - 事件从目标元素父元素向上逐级传递直到最顶层元素 window. 及捕获阶段的反方向.</li>\n</ol>\n<p>那这里又有一个新的疑问, 既然捕获和冒泡阶段都会触发事件, 那先捕获再冒泡, 岂不是路径上的元素都会触发两次事件?</p>\n<p>在 DOM2 中, 事件监听机制提供了一个参数来决定事件是在捕获阶段生效还是在冒泡阶段生效, 接下来简要学习下 ==addEventListener== .</p>\n<h2 id=\"addEventListener\"><a href=\"#addEventListener\" class=\"headerlink\" title=\"addEventListener\"></a>addEventListener</h2><p><strong>EventTarget.addEventListener()</strong> 方法将指定的监听器注册到目标元素上, 当该对象触发指定的事件时, 指定的回调函数就会被执行. 事件目标可以是一个文档上的元素或任何其他支持事件的对象 (比如 XMLHttpRequest).</p>\n<p>它的工作原理是将实现EventListener的函数或对象添加到调用它的 EventTarget 上的指定事件类型的事件侦听器列表中.</p>\n<h4 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">target.addEventListener(type, listener[, options]);</span><br><span class=\"line\">target.addEventListener(type, listener[, useCapture]);</span><br><span class=\"line\">target.addEventListener(type, listener[, useCapture, wantsUntrusted  ]);  <span class=\"comment\">// Gecko/Mozilla only</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>type: 表示监听事件类型的字符串. 事件列表.</li>\n<li>listener: 当所监听的事件类型触发时的回调. 会接收到一个事件通知对象.</li>\n<li>options: 可选. 可用的选项如下:</li>\n<li>capture: Boolean, 如果是 true, 表示 listener 会在捕获阶段触发. 默认是 false. 冒泡捕获. 所以微软牛逼.</li>\n<li>once: Boolean, 如果是 true, 表示 listener 在添加之后最多只调用一次.</li>\n<li>passive: Boolean，如果是, 表示 listener 永远不会调用 preventDefault(). 如果 listener 仍然调用了这个函数, 客户端将会忽略它并抛出一个控制台警告.</li>\n<li>useCapture: 可选. Boolean, 同 options - capture</li>\n</ul>\n<blockquote>\n<p>注意: 对于目标元素上的事件监听器来说, 事件会处于目标阶段, 而不是冒泡阶段或者捕获阶段. 在目标阶段的事件会触发该元素上的所有监听器, 而不在乎这个监听器到底在注册时 useCapture 是 true 还是 false.</p>\n</blockquote>\n<h2 id=\"事件监听添加与移除\"><a href=\"#事件监听添加与移除\" class=\"headerlink\" title=\"事件监听添加与移除\"></a>事件监听添加与移除</h2><h3 id=\"事件添加的三种方式\"><a href=\"#事件添加的三种方式\" class=\"headerlink\" title=\"事件添加的三种方式\"></a>事件添加的三种方式</h3><ol>\n<li><p>通过HTML 属性的方式</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"console.log('click')\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>DOM0 中可以通过js脚本来给指定元素提供事件处理函数，即</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">element.onclick &#x3D; function &#x2F;&#x2F; 只会在冒泡阶段生效</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>DOM2 中, 添加了新的事件监听API, 即<code>addEventListener</code>, 同时提供了取消监听的 <code>removeEventListener(type, handler[, options | useCapture])</code>. 显然事件处理函数注册后, 要取消监听, <code>type/hanlder/useCapture</code>的一致.</p>\n</li>\n</ol>\n<p>相比第一, 第二种, <code>addEventListener</code>的方式有以下几点优势:</p>\n<ul>\n<li>可以为同一个事件注册多个回调函数, 依次触发. 而 DOM0 的方式则会被覆盖掉. 只能添加一种</li>\n<li>使用 DOM0 会覆盖 HTML 的方式.</li>\n<li>可以通过参数决定监听是在冒泡阶段生效还是在捕获阶段生效.</li>\n<li><code>element.onclick</code> 注册的监听只会在冒泡阶段生效</li>\n</ul>\n<h5 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"child\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"console.log('html')\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> child = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'child'</span>) </span><br><span class=\"line\"></span><br><span class=\"line\">child.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'DOM0A'</span>) &#125; <span class=\"comment\">// 覆盖了 HTML 的方式</span></span><br><span class=\"line\">child.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'DOM0B'</span>) &#125; <span class=\"comment\">// 覆盖了上一条 DOM0A   </span></span><br><span class=\"line\"></span><br><span class=\"line\">child.addEventLisnter(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'lisnterA'</span>) &#125;)</span><br><span class=\"line\">child.addEventLisnter(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'lisnterB'</span>) &#125;) <span class=\"comment\">// 不会覆盖</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"三种方式对应的如何移除\"><a href=\"#三种方式对应的如何移除\" class=\"headerlink\" title=\"三种方式对应的如何移除:\"></a>三种方式对应的如何移除:</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">child.setAttributer(<span class=\"string\">'onclick'</span>, <span class=\"literal\">false</span>)</span><br><span class=\"line\">child.onclick = <span class=\"literal\">null</span></span><br><span class=\"line\">child.removeEventLisnter(<span class=\"string\">'设置相同的参数'</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><ol>\n<li><p>以下代码的输出顺序</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"console.log('html')\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Test<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">const</span> parent = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"parent\"</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">const</span> child = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"child\"</span>);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">            child.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'child onclick'</span>) &#125;;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// capture 默认为 false, 冒泡</span></span></span><br><span class=\"line\"><span class=\"javascript\">            parent.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'parent event'</span>) &#125;);</span></span><br><span class=\"line\"><span class=\"javascript\">            child.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'child event'</span>) &#125;);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// 捕获</span></span></span><br><span class=\"line\"><span class=\"javascript\">            parent.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'parent event capture'</span>) &#125;, &#123; <span class=\"attr\">capture</span>: <span class=\"literal\">true</span> &#125;);</span></span><br><span class=\"line\"><span class=\"javascript\">            child.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'child event capture'</span>) &#125;, &#123; <span class=\"attr\">capture</span>: <span class=\"literal\">true</span> &#125;);</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">window</span>.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'window'</span>);</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"console.log('body')\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"parent\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"console.log('parent html')\"</span>&gt;</span>parent</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"child\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"console.log('child html')\"</span>&gt;</span>child<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>什么是事件流，同一个事件有几个阶段？</p>\n</li>\n<li><p>如何移除通过HTML属性、element.onclick等注册的事件处理函数？</p>\n<h2 id=\"答案\"><a href=\"#答案\" class=\"headerlink\" title=\"答案\"></a>答案</h2><h3 id=\"问题1\"><a href=\"#问题1\" class=\"headerlink\" title=\"问题1\"></a>问题1</h3></li>\n</ol>\n<p>首先参考 chrome 浏览器的结果. 先来看点击 child, 输出:  </p>\n<ol>\n<li>parent html</li>\n<li>parent event</li>\n<li>parent event capture</li>\n<li>body</li>\n<li>html</li>\n<li>window</li>\n</ol>\n<p>奇怪! 这时候不是应该先捕获, capture 在前吗? 别急, 这时候如果调换 parent event 与 parent event capture 的 addEventListener 顺序, 会发现, 输出顺序也变了:</p>\n<ol>\n<li>parent html</li>\n<li><strong>parent event capture</strong></li>\n<li><strong>parent event</strong></li>\n<li>body</li>\n<li>html</li>\n<li>window</li>\n</ol>\n<p>其实这时候的输出顺序只和 <code>addEventListener</code> 的顺序有关. 是否开启 <code>capture</code> 无关. 因为我们是直接点击了 <code>parent</code>. 对于 <code>parent</code> 自身而言. 它在整个点击传递过程中处于目标阶段. 并不涉及捕获和冒泡. 同时我们也发现. html 设置的点击是优先于 <code>addEventListener</code> 的方式的.</p>\n<p>我们再来看下点击 child:</p>\n<ol>\n<li>parent event capture</li>\n<li>hild onclick</li>\n<li>child event</li>\n<li>child event capture</li>\n<li>parent html</li>\n<li>parent event</li>\n<li>body</li>\n<li>html</li>\n<li>window</li>\n</ol>\n<p>首先, child html 没有输出, 因为被 child onclick 覆盖掉了.</p>\n<p>第二点, child onclick 的优先级也是高于 <code>addEventListener</code> 的.</p>\n<p>再然后, 点击事件传递过程中, 首先在捕获阶段, 输出了 parent event capture. 然后到达目标阶段. 同理之前点击 parent. 如果此时调换 child event 与 child event capture 的 <code>addEventListener</code> 顺序. 输出顺序也会改变</p>\n<p>最后, 到达冒泡阶段, 由于 html 的优先级高于 <code>addEventListener</code>. 所以被输出. (别忘了, 默认都是开启冒泡)</p>\n<p>但是. 如果使用 Safari 浏览器, 则会发现, 点击 parent, 输出:</p>\n<ol>\n<li>parent event capture</li>\n<li>parent html</li>\n<li>parent event</li>\n<li>body</li>\n<li>html</li>\n<li>window</li>\n</ol>\n<p>点击 child, 输出:</p>\n<ol>\n<li>parent event capture</li>\n<li>child event capture</li>\n<li>child onclick</li>\n<li>child event</li>\n<li>parent html</li>\n<li>parent event</li>\n<li>body</li>\n<li>html</li>\n<li>window</li>\n</ol>\n<p>会发现, 对于捕获阶段的处理不一样了. 点击目标元素时, 目标元素不仅处于目标阶段, 也处于捕获阶段的终点和冒泡阶段的起点. 所以会进行 <code>capture</code> 的判断. 所以在代码编写时这里要尤为注意.</p>\n<p><a href=\"https://www.jianshu.com/p/6512139d1d9e\" target=\"_blank\" rel=\"noopener\">原文地址</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"什么是事件？\"><a href=\"#什么是事件？\" class=\"headerlink\" title=\"什么是事件？\"></a>什么是事件？</h2><blockquote>\n<p>事件, 就是文档或浏览器窗口发生的一些特定的交互瞬间. JavaScript 和 HTML 之间的交互是通过事件实现的. 可以使用事件监听器来监听事件, 以便事件发生时执行相应的代码.</p>\n</blockquote>","more":"<h2 id=\"事件流是什么？\"><a href=\"#事件流是什么？\" class=\"headerlink\" title=\"事件流是什么？\"></a>事件流是什么？</h2><p>当在页面上某个元素触发特定事件时, 比如点击, 除了被点击的目标元素, 所有祖先元素都会触发该事件, 一直到 window.</p>\n<p>那这样就出现了一个问题, 是先在目标元素上触发事件, 还是先在祖先元素上触发呢? 这就是事件流的概念.</p>\n<p><strong>事件流是事件在目标元素和祖先元素间的触发顺序</strong></p>\n<ul>\n<li><strong>捕获</strong>- Capture - 事件由最顶层逐级向下传播, 直至到达目标元素.</li>\n<li><strong>冒泡</strong> - Bubble - 顾名思义, 类似水中冒泡, 从下往上. 事件由第一个被触发的元素接收, 然后逐级向上传播.</li>\n</ul>\n<p>后来 w3c 采用折中的方式, 规定先捕获再冒泡平息了战火. 如此一个事件就被分成了三个阶段(是的, 不光是捕获和冒泡):</p>\n<ol>\n<li>捕获阶段 - The capture phase - 事件从最顶层元素 window 一直传递到目标元素的父元素.</li>\n<li>目标阶段 - The target phase - 事件到达目标元素. 如果事件指定不冒泡. 那就会在这里中止.</li>\n<li>冒泡阶段 - The bubble phase - 事件从目标元素父元素向上逐级传递直到最顶层元素 window. 及捕获阶段的反方向.</li>\n</ol>\n<p>那这里又有一个新的疑问, 既然捕获和冒泡阶段都会触发事件, 那先捕获再冒泡, 岂不是路径上的元素都会触发两次事件?</p>\n<p>在 DOM2 中, 事件监听机制提供了一个参数来决定事件是在捕获阶段生效还是在冒泡阶段生效, 接下来简要学习下 ==addEventListener== .</p>\n<h2 id=\"addEventListener\"><a href=\"#addEventListener\" class=\"headerlink\" title=\"addEventListener\"></a>addEventListener</h2><p><strong>EventTarget.addEventListener()</strong> 方法将指定的监听器注册到目标元素上, 当该对象触发指定的事件时, 指定的回调函数就会被执行. 事件目标可以是一个文档上的元素或任何其他支持事件的对象 (比如 XMLHttpRequest).</p>\n<p>它的工作原理是将实现EventListener的函数或对象添加到调用它的 EventTarget 上的指定事件类型的事件侦听器列表中.</p>\n<h4 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">target.addEventListener(type, listener[, options]);</span><br><span class=\"line\">target.addEventListener(type, listener[, useCapture]);</span><br><span class=\"line\">target.addEventListener(type, listener[, useCapture, wantsUntrusted  ]);  <span class=\"comment\">// Gecko/Mozilla only</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>type: 表示监听事件类型的字符串. 事件列表.</li>\n<li>listener: 当所监听的事件类型触发时的回调. 会接收到一个事件通知对象.</li>\n<li>options: 可选. 可用的选项如下:</li>\n<li>capture: Boolean, 如果是 true, 表示 listener 会在捕获阶段触发. 默认是 false. 冒泡捕获. 所以微软牛逼.</li>\n<li>once: Boolean, 如果是 true, 表示 listener 在添加之后最多只调用一次.</li>\n<li>passive: Boolean，如果是, 表示 listener 永远不会调用 preventDefault(). 如果 listener 仍然调用了这个函数, 客户端将会忽略它并抛出一个控制台警告.</li>\n<li>useCapture: 可选. Boolean, 同 options - capture</li>\n</ul>\n<blockquote>\n<p>注意: 对于目标元素上的事件监听器来说, 事件会处于目标阶段, 而不是冒泡阶段或者捕获阶段. 在目标阶段的事件会触发该元素上的所有监听器, 而不在乎这个监听器到底在注册时 useCapture 是 true 还是 false.</p>\n</blockquote>\n<h2 id=\"事件监听添加与移除\"><a href=\"#事件监听添加与移除\" class=\"headerlink\" title=\"事件监听添加与移除\"></a>事件监听添加与移除</h2><h3 id=\"事件添加的三种方式\"><a href=\"#事件添加的三种方式\" class=\"headerlink\" title=\"事件添加的三种方式\"></a>事件添加的三种方式</h3><ol>\n<li><p>通过HTML 属性的方式</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"console.log('click')\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>DOM0 中可以通过js脚本来给指定元素提供事件处理函数，即</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">element.onclick &#x3D; function &#x2F;&#x2F; 只会在冒泡阶段生效</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>DOM2 中, 添加了新的事件监听API, 即<code>addEventListener</code>, 同时提供了取消监听的 <code>removeEventListener(type, handler[, options | useCapture])</code>. 显然事件处理函数注册后, 要取消监听, <code>type/hanlder/useCapture</code>的一致.</p>\n</li>\n</ol>\n<p>相比第一, 第二种, <code>addEventListener</code>的方式有以下几点优势:</p>\n<ul>\n<li>可以为同一个事件注册多个回调函数, 依次触发. 而 DOM0 的方式则会被覆盖掉. 只能添加一种</li>\n<li>使用 DOM0 会覆盖 HTML 的方式.</li>\n<li>可以通过参数决定监听是在冒泡阶段生效还是在捕获阶段生效.</li>\n<li><code>element.onclick</code> 注册的监听只会在冒泡阶段生效</li>\n</ul>\n<h5 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"child\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"console.log('html')\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> child = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'child'</span>) </span><br><span class=\"line\"></span><br><span class=\"line\">child.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'DOM0A'</span>) &#125; <span class=\"comment\">// 覆盖了 HTML 的方式</span></span><br><span class=\"line\">child.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'DOM0B'</span>) &#125; <span class=\"comment\">// 覆盖了上一条 DOM0A   </span></span><br><span class=\"line\"></span><br><span class=\"line\">child.addEventLisnter(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'lisnterA'</span>) &#125;)</span><br><span class=\"line\">child.addEventLisnter(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'lisnterB'</span>) &#125;) <span class=\"comment\">// 不会覆盖</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"三种方式对应的如何移除\"><a href=\"#三种方式对应的如何移除\" class=\"headerlink\" title=\"三种方式对应的如何移除:\"></a>三种方式对应的如何移除:</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">child.setAttributer(<span class=\"string\">'onclick'</span>, <span class=\"literal\">false</span>)</span><br><span class=\"line\">child.onclick = <span class=\"literal\">null</span></span><br><span class=\"line\">child.removeEventLisnter(<span class=\"string\">'设置相同的参数'</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><ol>\n<li><p>以下代码的输出顺序</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"console.log('html')\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Test<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">const</span> parent = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"parent\"</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">const</span> child = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"child\"</span>);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">            child.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'child onclick'</span>) &#125;;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// capture 默认为 false, 冒泡</span></span></span><br><span class=\"line\"><span class=\"javascript\">            parent.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'parent event'</span>) &#125;);</span></span><br><span class=\"line\"><span class=\"javascript\">            child.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'child event'</span>) &#125;);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// 捕获</span></span></span><br><span class=\"line\"><span class=\"javascript\">            parent.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'parent event capture'</span>) &#125;, &#123; <span class=\"attr\">capture</span>: <span class=\"literal\">true</span> &#125;);</span></span><br><span class=\"line\"><span class=\"javascript\">            child.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'child event capture'</span>) &#125;, &#123; <span class=\"attr\">capture</span>: <span class=\"literal\">true</span> &#125;);</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">window</span>.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'window'</span>);</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"console.log('body')\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"parent\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"console.log('parent html')\"</span>&gt;</span>parent</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"child\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"console.log('child html')\"</span>&gt;</span>child<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>什么是事件流，同一个事件有几个阶段？</p>\n</li>\n<li><p>如何移除通过HTML属性、element.onclick等注册的事件处理函数？</p>\n<h2 id=\"答案\"><a href=\"#答案\" class=\"headerlink\" title=\"答案\"></a>答案</h2><h3 id=\"问题1\"><a href=\"#问题1\" class=\"headerlink\" title=\"问题1\"></a>问题1</h3></li>\n</ol>\n<p>首先参考 chrome 浏览器的结果. 先来看点击 child, 输出:  </p>\n<ol>\n<li>parent html</li>\n<li>parent event</li>\n<li>parent event capture</li>\n<li>body</li>\n<li>html</li>\n<li>window</li>\n</ol>\n<p>奇怪! 这时候不是应该先捕获, capture 在前吗? 别急, 这时候如果调换 parent event 与 parent event capture 的 addEventListener 顺序, 会发现, 输出顺序也变了:</p>\n<ol>\n<li>parent html</li>\n<li><strong>parent event capture</strong></li>\n<li><strong>parent event</strong></li>\n<li>body</li>\n<li>html</li>\n<li>window</li>\n</ol>\n<p>其实这时候的输出顺序只和 <code>addEventListener</code> 的顺序有关. 是否开启 <code>capture</code> 无关. 因为我们是直接点击了 <code>parent</code>. 对于 <code>parent</code> 自身而言. 它在整个点击传递过程中处于目标阶段. 并不涉及捕获和冒泡. 同时我们也发现. html 设置的点击是优先于 <code>addEventListener</code> 的方式的.</p>\n<p>我们再来看下点击 child:</p>\n<ol>\n<li>parent event capture</li>\n<li>hild onclick</li>\n<li>child event</li>\n<li>child event capture</li>\n<li>parent html</li>\n<li>parent event</li>\n<li>body</li>\n<li>html</li>\n<li>window</li>\n</ol>\n<p>首先, child html 没有输出, 因为被 child onclick 覆盖掉了.</p>\n<p>第二点, child onclick 的优先级也是高于 <code>addEventListener</code> 的.</p>\n<p>再然后, 点击事件传递过程中, 首先在捕获阶段, 输出了 parent event capture. 然后到达目标阶段. 同理之前点击 parent. 如果此时调换 child event 与 child event capture 的 <code>addEventListener</code> 顺序. 输出顺序也会改变</p>\n<p>最后, 到达冒泡阶段, 由于 html 的优先级高于 <code>addEventListener</code>. 所以被输出. (别忘了, 默认都是开启冒泡)</p>\n<p>但是. 如果使用 Safari 浏览器, 则会发现, 点击 parent, 输出:</p>\n<ol>\n<li>parent event capture</li>\n<li>parent html</li>\n<li>parent event</li>\n<li>body</li>\n<li>html</li>\n<li>window</li>\n</ol>\n<p>点击 child, 输出:</p>\n<ol>\n<li>parent event capture</li>\n<li>child event capture</li>\n<li>child onclick</li>\n<li>child event</li>\n<li>parent html</li>\n<li>parent event</li>\n<li>body</li>\n<li>html</li>\n<li>window</li>\n</ol>\n<p>会发现, 对于捕获阶段的处理不一样了. 点击目标元素时, 目标元素不仅处于目标阶段, 也处于捕获阶段的终点和冒泡阶段的起点. 所以会进行 <code>capture</code> 的判断. 所以在代码编写时这里要尤为注意.</p>\n<p><a href=\"https://www.jianshu.com/p/6512139d1d9e\" target=\"_blank\" rel=\"noopener\">原文地址</a></p>"},{"layout":"[post]","title":"DOM级别与DOM事件","date":"2019-06-01T02:58:39.000Z","_content":"事件是javascript和HTML交互基础, 任何文档或者浏览器窗口发生的交互, 都要通过绑定事件进行交互;比如鼠标点击事件、敲击键盘事件等。这样的事件行为都是前端DOM事件的组成部分，不同的DOM事件会有不同的触发条件和触发效果。\n<!-- more -->\n## DOM级别与DOM事件\nDOM级别一共可以分为四个级别：DOM0级、DOM1级、DOM2级和DOM3级。而DOM事件分为3个级别：DOM0级事件处理，DOM2级事件处理和DOM3级事件处理。\n\n有人可能会疑惑，为什么没有DOM1级事件处理呢？因为1级DOM标准并没有定义事件相关的内容，所以没有所谓的1级DOM事件模型。\n\n### HTML的事件处理程序\nHTML事件处理程序，也是最早的一种事件处理方式。\n\n```js\n <button type=\"button\" onclick=\"showFn()\"></button>\n  function showFn() {\n      alert('Hello World');\n  }\n```\n以上的代码，我们通过直接在HTML代码里面定义了一个 onclick属性触发showfu这样的事件处理程序最大的缺点就是HTML和JS耦合太强，我们如果需要修改函数名就必须修改两个地方，优点是不需要操作DOM来完成事件的绑定。\n\n### DOM0级事件\nDOM0级处理事件就是将一个函数赋值给一个事件处理属性。\n\n```js\n <button id=\"btn\" type=\"button\"></button>\n    var btn = document.getElementById('btn');\n    btn.onclick = function() {\n        console.log('Hello World');\n    }\n```\n以上的代码我们给button定义了一个id 通过js原生的api获取按钮\n将一个函数赋值给了一个事件处理属性onclick 这样的方法就是DOM0级\n处理事件的体现。我们可以通过给事件处理属性赋值null来解绑事件。\n\n**DOM0级事件处理程序的缺点在于一个处理程序无法同时绑定多个处理函数，比如我还想再点击按钮事件上加上另外一个函数。**\n\n### DOM2级事件\nDOM2级事件在DOM0级时间段额基础上弥补了一个处理处理程序\n无法同时绑定多个处理函数的缺点。允许给一个程序添加多个处理函数。\n\n```js\n <button id=\"btn\" type=\"button\"></button>\n    var btn = document.getElementById('btn');    \n    function showFn() {\n        alert('Hello World');\n    }    \n    btn.addEventListener('click', showFn, false);\n    // btn.removeEventListener('click', showFn, false); 解绑事件 \n```\nDOM2级事件定义了addEventListener 和 removeEventListener两个方法，分别用来绑定和解绑事件，方法中包含三个参数，分别是绑定的事件处理的属性名称（没有on）处理函数和是否在捕获时候执行事件处理函数如果我们还需要添加一个鼠标的移入的方法，只需要：\n\n\n```js\n btn.addEventlistener('mouseover',showfn,false)\n```\n这样，点击按钮和鼠标移入时候都将触发showfn的方法。\n\n需要注意的是IE8以下版本不支持 addEventlistener 和 removeEventListerner\n需要使用attachEvent和detachEvent实现：\n\n```js\n    btn.attachEvent('onclick', showFn); // 绑定事件 \n    btn.detachEvent('onclick', showFn); // 解绑事件\n```\n这里我们不需要传入第三个参数，因为IE8以下版本只支持冒泡型事件。\n### DOM3级事件\n\n```\nDOM3级事件是在DOM2级事件的基础上添加很多事件类型。\nUI事件，当用户与页面上的元素交互时触发，如：load、scroll\n焦点事件，当元素获得或失去焦点时触发，如：blur、focus\n鼠标事件，当用户通过鼠标在页面执行操作时触发如：dbclick、mouseup\n滚轮事件，当使用鼠标滚轮或类似设备时触发，如：mousewheel\n文本事件，当在文档中输入文本时触发，如：textInput\n键盘事件，当用户通过键盘在页面上执行操作时触发，如：keydown、keypress\n合成事件，当为IME（输入法编辑器）输入字符时触发，如：compositionstart\n变动事件，当底层DOM结构发生变化时触发，如：DOMsubtreeModified\n同时DOM3级事件也允许使用者自定义一些事件。\n```\n转载链接:[DOM级别与DOM事件](https://www.jianshu.com/p/622d994906f7)","source":"_posts/DOM级别与DOM事件.md","raw":"---\nlayout: '[post]'\ntitle: DOM级别与DOM事件\ndate: 2019-06-01 10:58:39\ntags: html\n---\n事件是javascript和HTML交互基础, 任何文档或者浏览器窗口发生的交互, 都要通过绑定事件进行交互;比如鼠标点击事件、敲击键盘事件等。这样的事件行为都是前端DOM事件的组成部分，不同的DOM事件会有不同的触发条件和触发效果。\n<!-- more -->\n## DOM级别与DOM事件\nDOM级别一共可以分为四个级别：DOM0级、DOM1级、DOM2级和DOM3级。而DOM事件分为3个级别：DOM0级事件处理，DOM2级事件处理和DOM3级事件处理。\n\n有人可能会疑惑，为什么没有DOM1级事件处理呢？因为1级DOM标准并没有定义事件相关的内容，所以没有所谓的1级DOM事件模型。\n\n### HTML的事件处理程序\nHTML事件处理程序，也是最早的一种事件处理方式。\n\n```js\n <button type=\"button\" onclick=\"showFn()\"></button>\n  function showFn() {\n      alert('Hello World');\n  }\n```\n以上的代码，我们通过直接在HTML代码里面定义了一个 onclick属性触发showfu这样的事件处理程序最大的缺点就是HTML和JS耦合太强，我们如果需要修改函数名就必须修改两个地方，优点是不需要操作DOM来完成事件的绑定。\n\n### DOM0级事件\nDOM0级处理事件就是将一个函数赋值给一个事件处理属性。\n\n```js\n <button id=\"btn\" type=\"button\"></button>\n    var btn = document.getElementById('btn');\n    btn.onclick = function() {\n        console.log('Hello World');\n    }\n```\n以上的代码我们给button定义了一个id 通过js原生的api获取按钮\n将一个函数赋值给了一个事件处理属性onclick 这样的方法就是DOM0级\n处理事件的体现。我们可以通过给事件处理属性赋值null来解绑事件。\n\n**DOM0级事件处理程序的缺点在于一个处理程序无法同时绑定多个处理函数，比如我还想再点击按钮事件上加上另外一个函数。**\n\n### DOM2级事件\nDOM2级事件在DOM0级时间段额基础上弥补了一个处理处理程序\n无法同时绑定多个处理函数的缺点。允许给一个程序添加多个处理函数。\n\n```js\n <button id=\"btn\" type=\"button\"></button>\n    var btn = document.getElementById('btn');    \n    function showFn() {\n        alert('Hello World');\n    }    \n    btn.addEventListener('click', showFn, false);\n    // btn.removeEventListener('click', showFn, false); 解绑事件 \n```\nDOM2级事件定义了addEventListener 和 removeEventListener两个方法，分别用来绑定和解绑事件，方法中包含三个参数，分别是绑定的事件处理的属性名称（没有on）处理函数和是否在捕获时候执行事件处理函数如果我们还需要添加一个鼠标的移入的方法，只需要：\n\n\n```js\n btn.addEventlistener('mouseover',showfn,false)\n```\n这样，点击按钮和鼠标移入时候都将触发showfn的方法。\n\n需要注意的是IE8以下版本不支持 addEventlistener 和 removeEventListerner\n需要使用attachEvent和detachEvent实现：\n\n```js\n    btn.attachEvent('onclick', showFn); // 绑定事件 \n    btn.detachEvent('onclick', showFn); // 解绑事件\n```\n这里我们不需要传入第三个参数，因为IE8以下版本只支持冒泡型事件。\n### DOM3级事件\n\n```\nDOM3级事件是在DOM2级事件的基础上添加很多事件类型。\nUI事件，当用户与页面上的元素交互时触发，如：load、scroll\n焦点事件，当元素获得或失去焦点时触发，如：blur、focus\n鼠标事件，当用户通过鼠标在页面执行操作时触发如：dbclick、mouseup\n滚轮事件，当使用鼠标滚轮或类似设备时触发，如：mousewheel\n文本事件，当在文档中输入文本时触发，如：textInput\n键盘事件，当用户通过键盘在页面上执行操作时触发，如：keydown、keypress\n合成事件，当为IME（输入法编辑器）输入字符时触发，如：compositionstart\n变动事件，当底层DOM结构发生变化时触发，如：DOMsubtreeModified\n同时DOM3级事件也允许使用者自定义一些事件。\n```\n转载链接:[DOM级别与DOM事件](https://www.jianshu.com/p/622d994906f7)","slug":"DOM级别与DOM事件","published":1,"updated":"2020-03-05T03:23:00.000Z","comments":1,"photos":[],"link":"","_id":"ck7onzqwz0005yts68kot0x07","content":"<p>事件是javascript和HTML交互基础, 任何文档或者浏览器窗口发生的交互, 都要通过绑定事件进行交互;比如鼠标点击事件、敲击键盘事件等。这样的事件行为都是前端DOM事件的组成部分，不同的DOM事件会有不同的触发条件和触发效果。</p>\n<a id=\"more\"></a>\n<h2 id=\"DOM级别与DOM事件\"><a href=\"#DOM级别与DOM事件\" class=\"headerlink\" title=\"DOM级别与DOM事件\"></a>DOM级别与DOM事件</h2><p>DOM级别一共可以分为四个级别：DOM0级、DOM1级、DOM2级和DOM3级。而DOM事件分为3个级别：DOM0级事件处理，DOM2级事件处理和DOM3级事件处理。</p>\n<p>有人可能会疑惑，为什么没有DOM1级事件处理呢？因为1级DOM标准并没有定义事件相关的内容，所以没有所谓的1级DOM事件模型。</p>\n<h3 id=\"HTML的事件处理程序\"><a href=\"#HTML的事件处理程序\" class=\"headerlink\" title=\"HTML的事件处理程序\"></a>HTML的事件处理程序</h3><p>HTML事件处理程序，也是最早的一种事件处理方式。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button type=<span class=\"string\">\"button\"</span> onclick=<span class=\"string\">\"showFn()\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showFn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">     alert(<span class=\"string\">'Hello World'</span>);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>以上的代码，我们通过直接在HTML代码里面定义了一个 onclick属性触发showfu这样的事件处理程序最大的缺点就是HTML和JS耦合太强，我们如果需要修改函数名就必须修改两个地方，优点是不需要操作DOM来完成事件的绑定。</p>\n<h3 id=\"DOM0级事件\"><a href=\"#DOM0级事件\" class=\"headerlink\" title=\"DOM0级事件\"></a>DOM0级事件</h3><p>DOM0级处理事件就是将一个函数赋值给一个事件处理属性。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button id=<span class=\"string\">\"btn\"</span> type=<span class=\"string\">\"button\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">   <span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'btn'</span>);</span><br><span class=\"line\">   btn.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">       <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello World'</span>);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>以上的代码我们给button定义了一个id 通过js原生的api获取按钮<br>将一个函数赋值给了一个事件处理属性onclick 这样的方法就是DOM0级<br>处理事件的体现。我们可以通过给事件处理属性赋值null来解绑事件。</p>\n<p><strong>DOM0级事件处理程序的缺点在于一个处理程序无法同时绑定多个处理函数，比如我还想再点击按钮事件上加上另外一个函数。</strong></p>\n<h3 id=\"DOM2级事件\"><a href=\"#DOM2级事件\" class=\"headerlink\" title=\"DOM2级事件\"></a>DOM2级事件</h3><p>DOM2级事件在DOM0级时间段额基础上弥补了一个处理处理程序<br>无法同时绑定多个处理函数的缺点。允许给一个程序添加多个处理函数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button id=<span class=\"string\">\"btn\"</span> type=<span class=\"string\">\"button\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">   <span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'btn'</span>);    </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showFn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">       alert(<span class=\"string\">'Hello World'</span>);</span><br><span class=\"line\">   &#125;    </span><br><span class=\"line\">   btn.addEventListener(<span class=\"string\">'click'</span>, showFn, <span class=\"literal\">false</span>);</span><br><span class=\"line\">   <span class=\"comment\">// btn.removeEventListener('click', showFn, false); 解绑事件</span></span><br></pre></td></tr></table></figure>\n<p>DOM2级事件定义了addEventListener 和 removeEventListener两个方法，分别用来绑定和解绑事件，方法中包含三个参数，分别是绑定的事件处理的属性名称（没有on）处理函数和是否在捕获时候执行事件处理函数如果我们还需要添加一个鼠标的移入的方法，只需要：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">btn.addEventlistener(<span class=\"string\">'mouseover'</span>,showfn,<span class=\"literal\">false</span>)</span><br></pre></td></tr></table></figure>\n<p>这样，点击按钮和鼠标移入时候都将触发showfn的方法。</p>\n<p>需要注意的是IE8以下版本不支持 addEventlistener 和 removeEventListerner<br>需要使用attachEvent和detachEvent实现：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">btn.attachEvent(<span class=\"string\">'onclick'</span>, showFn); <span class=\"comment\">// 绑定事件 </span></span><br><span class=\"line\">btn.detachEvent(<span class=\"string\">'onclick'</span>, showFn); <span class=\"comment\">// 解绑事件</span></span><br></pre></td></tr></table></figure>\n<p>这里我们不需要传入第三个参数，因为IE8以下版本只支持冒泡型事件。</p>\n<h3 id=\"DOM3级事件\"><a href=\"#DOM3级事件\" class=\"headerlink\" title=\"DOM3级事件\"></a>DOM3级事件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DOM3级事件是在DOM2级事件的基础上添加很多事件类型。</span><br><span class=\"line\">UI事件，当用户与页面上的元素交互时触发，如：load、scroll</span><br><span class=\"line\">焦点事件，当元素获得或失去焦点时触发，如：blur、focus</span><br><span class=\"line\">鼠标事件，当用户通过鼠标在页面执行操作时触发如：dbclick、mouseup</span><br><span class=\"line\">滚轮事件，当使用鼠标滚轮或类似设备时触发，如：mousewheel</span><br><span class=\"line\">文本事件，当在文档中输入文本时触发，如：textInput</span><br><span class=\"line\">键盘事件，当用户通过键盘在页面上执行操作时触发，如：keydown、keypress</span><br><span class=\"line\">合成事件，当为IME（输入法编辑器）输入字符时触发，如：compositionstart</span><br><span class=\"line\">变动事件，当底层DOM结构发生变化时触发，如：DOMsubtreeModified</span><br><span class=\"line\">同时DOM3级事件也允许使用者自定义一些事件。</span><br></pre></td></tr></table></figure>\n<p>转载链接:<a href=\"https://www.jianshu.com/p/622d994906f7\" target=\"_blank\" rel=\"noopener\">DOM级别与DOM事件</a></p>\n","site":{"data":{}},"excerpt":"<p>事件是javascript和HTML交互基础, 任何文档或者浏览器窗口发生的交互, 都要通过绑定事件进行交互;比如鼠标点击事件、敲击键盘事件等。这样的事件行为都是前端DOM事件的组成部分，不同的DOM事件会有不同的触发条件和触发效果。</p>","more":"<h2 id=\"DOM级别与DOM事件\"><a href=\"#DOM级别与DOM事件\" class=\"headerlink\" title=\"DOM级别与DOM事件\"></a>DOM级别与DOM事件</h2><p>DOM级别一共可以分为四个级别：DOM0级、DOM1级、DOM2级和DOM3级。而DOM事件分为3个级别：DOM0级事件处理，DOM2级事件处理和DOM3级事件处理。</p>\n<p>有人可能会疑惑，为什么没有DOM1级事件处理呢？因为1级DOM标准并没有定义事件相关的内容，所以没有所谓的1级DOM事件模型。</p>\n<h3 id=\"HTML的事件处理程序\"><a href=\"#HTML的事件处理程序\" class=\"headerlink\" title=\"HTML的事件处理程序\"></a>HTML的事件处理程序</h3><p>HTML事件处理程序，也是最早的一种事件处理方式。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button type=<span class=\"string\">\"button\"</span> onclick=<span class=\"string\">\"showFn()\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showFn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">     alert(<span class=\"string\">'Hello World'</span>);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>以上的代码，我们通过直接在HTML代码里面定义了一个 onclick属性触发showfu这样的事件处理程序最大的缺点就是HTML和JS耦合太强，我们如果需要修改函数名就必须修改两个地方，优点是不需要操作DOM来完成事件的绑定。</p>\n<h3 id=\"DOM0级事件\"><a href=\"#DOM0级事件\" class=\"headerlink\" title=\"DOM0级事件\"></a>DOM0级事件</h3><p>DOM0级处理事件就是将一个函数赋值给一个事件处理属性。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button id=<span class=\"string\">\"btn\"</span> type=<span class=\"string\">\"button\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">   <span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'btn'</span>);</span><br><span class=\"line\">   btn.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">       <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello World'</span>);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>以上的代码我们给button定义了一个id 通过js原生的api获取按钮<br>将一个函数赋值给了一个事件处理属性onclick 这样的方法就是DOM0级<br>处理事件的体现。我们可以通过给事件处理属性赋值null来解绑事件。</p>\n<p><strong>DOM0级事件处理程序的缺点在于一个处理程序无法同时绑定多个处理函数，比如我还想再点击按钮事件上加上另外一个函数。</strong></p>\n<h3 id=\"DOM2级事件\"><a href=\"#DOM2级事件\" class=\"headerlink\" title=\"DOM2级事件\"></a>DOM2级事件</h3><p>DOM2级事件在DOM0级时间段额基础上弥补了一个处理处理程序<br>无法同时绑定多个处理函数的缺点。允许给一个程序添加多个处理函数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button id=<span class=\"string\">\"btn\"</span> type=<span class=\"string\">\"button\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">   <span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'btn'</span>);    </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showFn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">       alert(<span class=\"string\">'Hello World'</span>);</span><br><span class=\"line\">   &#125;    </span><br><span class=\"line\">   btn.addEventListener(<span class=\"string\">'click'</span>, showFn, <span class=\"literal\">false</span>);</span><br><span class=\"line\">   <span class=\"comment\">// btn.removeEventListener('click', showFn, false); 解绑事件</span></span><br></pre></td></tr></table></figure>\n<p>DOM2级事件定义了addEventListener 和 removeEventListener两个方法，分别用来绑定和解绑事件，方法中包含三个参数，分别是绑定的事件处理的属性名称（没有on）处理函数和是否在捕获时候执行事件处理函数如果我们还需要添加一个鼠标的移入的方法，只需要：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">btn.addEventlistener(<span class=\"string\">'mouseover'</span>,showfn,<span class=\"literal\">false</span>)</span><br></pre></td></tr></table></figure>\n<p>这样，点击按钮和鼠标移入时候都将触发showfn的方法。</p>\n<p>需要注意的是IE8以下版本不支持 addEventlistener 和 removeEventListerner<br>需要使用attachEvent和detachEvent实现：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">btn.attachEvent(<span class=\"string\">'onclick'</span>, showFn); <span class=\"comment\">// 绑定事件 </span></span><br><span class=\"line\">btn.detachEvent(<span class=\"string\">'onclick'</span>, showFn); <span class=\"comment\">// 解绑事件</span></span><br></pre></td></tr></table></figure>\n<p>这里我们不需要传入第三个参数，因为IE8以下版本只支持冒泡型事件。</p>\n<h3 id=\"DOM3级事件\"><a href=\"#DOM3级事件\" class=\"headerlink\" title=\"DOM3级事件\"></a>DOM3级事件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DOM3级事件是在DOM2级事件的基础上添加很多事件类型。</span><br><span class=\"line\">UI事件，当用户与页面上的元素交互时触发，如：load、scroll</span><br><span class=\"line\">焦点事件，当元素获得或失去焦点时触发，如：blur、focus</span><br><span class=\"line\">鼠标事件，当用户通过鼠标在页面执行操作时触发如：dbclick、mouseup</span><br><span class=\"line\">滚轮事件，当使用鼠标滚轮或类似设备时触发，如：mousewheel</span><br><span class=\"line\">文本事件，当在文档中输入文本时触发，如：textInput</span><br><span class=\"line\">键盘事件，当用户通过键盘在页面上执行操作时触发，如：keydown、keypress</span><br><span class=\"line\">合成事件，当为IME（输入法编辑器）输入字符时触发，如：compositionstart</span><br><span class=\"line\">变动事件，当底层DOM结构发生变化时触发，如：DOMsubtreeModified</span><br><span class=\"line\">同时DOM3级事件也允许使用者自定义一些事件。</span><br></pre></td></tr></table></figure>\n<p>转载链接:<a href=\"https://www.jianshu.com/p/622d994906f7\" target=\"_blank\" rel=\"noopener\">DOM级别与DOM事件</a></p>"},{"layout":"[post]","title":"Event事件常见应用","date":"2019-06-25T09:20:41.000Z","_content":"## Event 对象\nW3C的说法是：\n\nEvent 对象代表事件的状态，比如事件在其中发生的元素、键盘按键的状态、鼠标的位置、鼠标按钮的状态。\n\n事件通常与函数结合使用，函数不会在事件发生前被执行！\n<!-- more -->\n## 几种常见事件\n**event.preventDefault()** :阻止默认事件  \n\n**event.stopPropagation()**:阻止冒泡  \n\n**event.stopImmediatePropagation()**:按优先级阻止执行\n\n```html\n<!DOCTYPE html>\n<html>\n    <head>\n        <style>\n            p { height: 30px; width: 150px; background-color: #ccf; }\n            div {height: 30px; width: 150px; background-color: #cfc; }\n        </style>\n    </head>\n    <body>\n        <div>\n            <p>paragraph</p>\n        </div>\n        <script>\n            const p = document.querySelector('p')\n            p.addEventListener(\"click\", (event) => {\n              alert(\"我是p元素上被绑定的第一个监听函数\");\n            }, false);\n\n            p.addEventListener(\"click\", (event) => {\n              alert(\"我是p元素上被绑定的第二个监听函数\");\n              event.stopImmediatePropagation();\n              // 执行stopImmediatePropagation方法,阻止click事件冒泡,并且阻止p元素上绑定的其他click事件的事件监听函数的执行.\n            }, false);\n\n            p.addEventListener(\"click\",(event) => {\n              alert(\"我是p元素上被绑定的第三个监听函数\");\n              // 该监听函数排在上个函数后面，该函数不会被执行\n            }, false);\n\n            document.querySelector(\"div\").addEventListener(\"click\", (event) => {\n              alert(\"我是div元素,我是p元素的上层元素\");\n              // p元素的click事件没有向上冒泡，该函数不会被执行\n            }, false);\n        </script>\n    </body>\n</html>\n```\n\n**event.currentTarget**:当前绑定的事件（父级元素）\n\n**event.target**:绑定的事件\n\n以上两者主要用于事件委托中。  \n**事件委托就是利用冒泡的原理，将事件加到 父元素 或 祖先元素上，触发执行效果。**\n\n```html\n<ul id=\"myLinks\">\n  <li id=\"goSomewhere\">Go somewhere</li>\n  <li id=\"doSomething\">Do something</li>\n  <li id=\"sayHi\">Say hi</li>\n</ul>\n```\n正常情况下添加点击事件\n\n```js\nvar item1 = document.getElementById(\"goSomewhere\");\n    var item2 = document.getElementById(\"doSomething\");\n    var item3 = document.getElementById(\"sayHi\");\n \n    item1.onclick = function() {\n      location.href = \"http://www.baidu.com\";\n    };\n    item2.onclick = function() {\n      document.title = \"事件委托\";\n    };\n    item3.onclick = function() {\n      alert(\"hi\");\n    };\n\n```\n使用事件委托\n\n```js\n document.addEventListener(\"click\", function (event) {\n      var target = event.target;\n      switch (target.id) {\n        case \"doSomething\":\n          document.title = \"事件委托\";\n          break;\n        case \"goSomewhere\":\n          location.href = \"http://www.baidu.com\";\n          break;\n        case \"sayHi\": alert(\"hi\");\n          break;\n      }\n    })\n```\n## 自定义事件\n\n```js\nvar eventCus = new Event('custome');\nev.addEventListener('custome',function(){\n    console.log('自定义事件');\n});\nev.dispatchEvent(eve);\n```\n自定义事件也可以使用```customEvent```\n\n区别在于能够传递数据\n\n\n```js\nfunction createEvent(params, eventName = 'mock-event') {\n    return new CustomEvent(eventName, { detail: params });\n}\n\nconst event = createEvent({ id: '0010' });\n```\n这里值得注意，需要把想要传递的参数包裹在一个包含detail属性的对象，否则传递的参数不会被挂载？（这里不太确定，我试过传id和params都不会生效）\n\n```js\n window.addEventListener('mock-event', ({ detail: { id } }) => {\n            console.log('id',id) // 会在控制台打印0010\n        });\n```\n## DOM事件流的补充\n\n```html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\" />\n\t\t<title>DOM事件流</title>\n\t</head>\n\n\t<body>\n\t\t<div id=\"ev\">\n\t\t\t<style>\n\t\t\t\t#ev {\n\t\t\t\t\twidth: 300px;\n\t\t\t\t\theight: 100px;\n\t\t\t\t\tbackground-color: red;\n\t\t\t\t\tcolor: #fff;\n\t\t\t\t\ttext-align: center;\n\t\t\t\t\tline-height: 100px;\n\t\t\t\t}\n\t\t\t</style>\n\t\t\t目标元素\n\t\t</div>\n\t\t<script type=\"text/javascript\">\n\t\t\tvar ev = document.getElementById('ev');\n\t\t\twindow.addEventListener(\n\t\t\t\t'click',\n\t\t\t\tfunction() {\n\t\t\t\t\tconsole.log('window捕获阶段');\n\t\t\t\t},\n\t\t\t\ttrue\n\t\t\t);\n\t\t\tdocument.addEventListener(\n\t\t\t\t'click',\n\t\t\t\tfunction() {\n\t\t\t\t\tconsole.log('doc捕获阶段');\n\t\t\t\t},\n\t\t\t\ttrue\n\t\t\t);\n\t\t\tdocument.documentElement.addEventListener(\n\t\t\t\t'click',\n\t\t\t\tfunction() {\n\t\t\t\t\tconsole.log('html捕获阶段');\n\t\t\t\t},\n\t\t\t\ttrue\n\t\t\t);\n\t\t\tdocument.body.addEventListener(\n\t\t\t\t'click',\n\t\t\t\tfunction() {\n\t\t\t\t\tconsole.log('body捕获阶段');\n\t\t\t\t},\n\t\t\t\ttrue\n\t\t\t);\n\t\t\tev.addEventListener(\n\t\t\t\t'click',\n\t\t\t\tfunction() {\n\t\t\t\t\tconsole.log('div捕获阶段');\n\t\t\t\t},\n\t\t\t\ttrue\n            );\n            var eve=new Event('test');\n            ev.addEventListener('test',function(){\n                console.log('自定义事件');\n            });\n            ev.dispatchEvent(eve);\n\t\t</script>\n\t</body>\n</html>\n\n```\n\n\n","source":"_posts/Event事件常见应用.md","raw":"---\nlayout: '[post]'\ntitle: Event事件常见应用\ndate: 2019-06-25 17:20:41\ntags: html\n---\n## Event 对象\nW3C的说法是：\n\nEvent 对象代表事件的状态，比如事件在其中发生的元素、键盘按键的状态、鼠标的位置、鼠标按钮的状态。\n\n事件通常与函数结合使用，函数不会在事件发生前被执行！\n<!-- more -->\n## 几种常见事件\n**event.preventDefault()** :阻止默认事件  \n\n**event.stopPropagation()**:阻止冒泡  \n\n**event.stopImmediatePropagation()**:按优先级阻止执行\n\n```html\n<!DOCTYPE html>\n<html>\n    <head>\n        <style>\n            p { height: 30px; width: 150px; background-color: #ccf; }\n            div {height: 30px; width: 150px; background-color: #cfc; }\n        </style>\n    </head>\n    <body>\n        <div>\n            <p>paragraph</p>\n        </div>\n        <script>\n            const p = document.querySelector('p')\n            p.addEventListener(\"click\", (event) => {\n              alert(\"我是p元素上被绑定的第一个监听函数\");\n            }, false);\n\n            p.addEventListener(\"click\", (event) => {\n              alert(\"我是p元素上被绑定的第二个监听函数\");\n              event.stopImmediatePropagation();\n              // 执行stopImmediatePropagation方法,阻止click事件冒泡,并且阻止p元素上绑定的其他click事件的事件监听函数的执行.\n            }, false);\n\n            p.addEventListener(\"click\",(event) => {\n              alert(\"我是p元素上被绑定的第三个监听函数\");\n              // 该监听函数排在上个函数后面，该函数不会被执行\n            }, false);\n\n            document.querySelector(\"div\").addEventListener(\"click\", (event) => {\n              alert(\"我是div元素,我是p元素的上层元素\");\n              // p元素的click事件没有向上冒泡，该函数不会被执行\n            }, false);\n        </script>\n    </body>\n</html>\n```\n\n**event.currentTarget**:当前绑定的事件（父级元素）\n\n**event.target**:绑定的事件\n\n以上两者主要用于事件委托中。  \n**事件委托就是利用冒泡的原理，将事件加到 父元素 或 祖先元素上，触发执行效果。**\n\n```html\n<ul id=\"myLinks\">\n  <li id=\"goSomewhere\">Go somewhere</li>\n  <li id=\"doSomething\">Do something</li>\n  <li id=\"sayHi\">Say hi</li>\n</ul>\n```\n正常情况下添加点击事件\n\n```js\nvar item1 = document.getElementById(\"goSomewhere\");\n    var item2 = document.getElementById(\"doSomething\");\n    var item3 = document.getElementById(\"sayHi\");\n \n    item1.onclick = function() {\n      location.href = \"http://www.baidu.com\";\n    };\n    item2.onclick = function() {\n      document.title = \"事件委托\";\n    };\n    item3.onclick = function() {\n      alert(\"hi\");\n    };\n\n```\n使用事件委托\n\n```js\n document.addEventListener(\"click\", function (event) {\n      var target = event.target;\n      switch (target.id) {\n        case \"doSomething\":\n          document.title = \"事件委托\";\n          break;\n        case \"goSomewhere\":\n          location.href = \"http://www.baidu.com\";\n          break;\n        case \"sayHi\": alert(\"hi\");\n          break;\n      }\n    })\n```\n## 自定义事件\n\n```js\nvar eventCus = new Event('custome');\nev.addEventListener('custome',function(){\n    console.log('自定义事件');\n});\nev.dispatchEvent(eve);\n```\n自定义事件也可以使用```customEvent```\n\n区别在于能够传递数据\n\n\n```js\nfunction createEvent(params, eventName = 'mock-event') {\n    return new CustomEvent(eventName, { detail: params });\n}\n\nconst event = createEvent({ id: '0010' });\n```\n这里值得注意，需要把想要传递的参数包裹在一个包含detail属性的对象，否则传递的参数不会被挂载？（这里不太确定，我试过传id和params都不会生效）\n\n```js\n window.addEventListener('mock-event', ({ detail: { id } }) => {\n            console.log('id',id) // 会在控制台打印0010\n        });\n```\n## DOM事件流的补充\n\n```html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\" />\n\t\t<title>DOM事件流</title>\n\t</head>\n\n\t<body>\n\t\t<div id=\"ev\">\n\t\t\t<style>\n\t\t\t\t#ev {\n\t\t\t\t\twidth: 300px;\n\t\t\t\t\theight: 100px;\n\t\t\t\t\tbackground-color: red;\n\t\t\t\t\tcolor: #fff;\n\t\t\t\t\ttext-align: center;\n\t\t\t\t\tline-height: 100px;\n\t\t\t\t}\n\t\t\t</style>\n\t\t\t目标元素\n\t\t</div>\n\t\t<script type=\"text/javascript\">\n\t\t\tvar ev = document.getElementById('ev');\n\t\t\twindow.addEventListener(\n\t\t\t\t'click',\n\t\t\t\tfunction() {\n\t\t\t\t\tconsole.log('window捕获阶段');\n\t\t\t\t},\n\t\t\t\ttrue\n\t\t\t);\n\t\t\tdocument.addEventListener(\n\t\t\t\t'click',\n\t\t\t\tfunction() {\n\t\t\t\t\tconsole.log('doc捕获阶段');\n\t\t\t\t},\n\t\t\t\ttrue\n\t\t\t);\n\t\t\tdocument.documentElement.addEventListener(\n\t\t\t\t'click',\n\t\t\t\tfunction() {\n\t\t\t\t\tconsole.log('html捕获阶段');\n\t\t\t\t},\n\t\t\t\ttrue\n\t\t\t);\n\t\t\tdocument.body.addEventListener(\n\t\t\t\t'click',\n\t\t\t\tfunction() {\n\t\t\t\t\tconsole.log('body捕获阶段');\n\t\t\t\t},\n\t\t\t\ttrue\n\t\t\t);\n\t\t\tev.addEventListener(\n\t\t\t\t'click',\n\t\t\t\tfunction() {\n\t\t\t\t\tconsole.log('div捕获阶段');\n\t\t\t\t},\n\t\t\t\ttrue\n            );\n            var eve=new Event('test');\n            ev.addEventListener('test',function(){\n                console.log('自定义事件');\n            });\n            ev.dispatchEvent(eve);\n\t\t</script>\n\t</body>\n</html>\n\n```\n\n\n","slug":"Event事件常见应用","published":1,"updated":"2020-03-12T09:21:28.000Z","comments":1,"photos":[],"link":"","_id":"ck7onzqx30007yts60m607t7t","content":"<h2 id=\"Event-对象\"><a href=\"#Event-对象\" class=\"headerlink\" title=\"Event 对象\"></a>Event 对象</h2><p>W3C的说法是：</p>\n<p>Event 对象代表事件的状态，比如事件在其中发生的元素、键盘按键的状态、鼠标的位置、鼠标按钮的状态。</p>\n<p>事件通常与函数结合使用，函数不会在事件发生前被执行！</p>\n<a id=\"more\"></a>\n<h2 id=\"几种常见事件\"><a href=\"#几种常见事件\" class=\"headerlink\" title=\"几种常见事件\"></a>几种常见事件</h2><p><strong>event.preventDefault()</strong> :阻止默认事件  </p>\n<p><strong>event.stopPropagation()</strong>:阻止冒泡  </p>\n<p><strong>event.stopImmediatePropagation()</strong>:按优先级阻止执行</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">p</span> &#123; <span class=\"attribute\">height</span>: <span class=\"number\">30px</span>; <span class=\"attribute\">width</span>: <span class=\"number\">150px</span>; <span class=\"attribute\">background-color</span>: <span class=\"number\">#ccf</span>; &#125;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">div</span> &#123;<span class=\"attribute\">height</span>: <span class=\"number\">30px</span>; <span class=\"attribute\">width</span>: <span class=\"number\">150px</span>; <span class=\"attribute\">background-color</span>: <span class=\"number\">#cfc</span>; &#125;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>paragraph<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">const</span> p = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'p'</span>)</span></span><br><span class=\"line\"><span class=\"actionscript\">            p.addEventListener(<span class=\"string\">\"click\"</span>, (event) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">              alert(<span class=\"string\">\"我是p元素上被绑定的第一个监听函数\"</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">            &#125;, <span class=\"literal\">false</span>);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">            p.addEventListener(<span class=\"string\">\"click\"</span>, (event) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">              alert(<span class=\"string\">\"我是p元素上被绑定的第二个监听函数\"</span>);</span></span><br><span class=\"line\">              event.stopImmediatePropagation();</span><br><span class=\"line\"><span class=\"actionscript\">              <span class=\"comment\">// 执行stopImmediatePropagation方法,阻止click事件冒泡,并且阻止p元素上绑定的其他click事件的事件监听函数的执行.</span></span></span><br><span class=\"line\"><span class=\"actionscript\">            &#125;, <span class=\"literal\">false</span>);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">            p.addEventListener(<span class=\"string\">\"click\"</span>,(event) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">              alert(<span class=\"string\">\"我是p元素上被绑定的第三个监听函数\"</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">              <span class=\"comment\">// 该监听函数排在上个函数后面，该函数不会被执行</span></span></span><br><span class=\"line\"><span class=\"actionscript\">            &#125;, <span class=\"literal\">false</span>);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">\"div\"</span>).addEventListener(<span class=\"string\">\"click\"</span>, (event) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">              alert(<span class=\"string\">\"我是div元素,我是p元素的上层元素\"</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">              <span class=\"comment\">// p元素的click事件没有向上冒泡，该函数不会被执行</span></span></span><br><span class=\"line\"><span class=\"actionscript\">            &#125;, <span class=\"literal\">false</span>);</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>event.currentTarget</strong>:当前绑定的事件（父级元素）</p>\n<p><strong>event.target</strong>:绑定的事件</p>\n<p>以上两者主要用于事件委托中。<br><strong>事件委托就是利用冒泡的原理，将事件加到 父元素 或 祖先元素上，触发执行效果。</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myLinks\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"goSomewhere\"</span>&gt;</span>Go somewhere<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"doSomething\"</span>&gt;</span>Do something<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"sayHi\"</span>&gt;</span>Say hi<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>正常情况下添加点击事件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> item1 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"goSomewhere\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> item2 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"doSomething\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> item3 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"sayHi\"</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">    item1.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      location.href = <span class=\"string\">\"http://www.baidu.com\"</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    item2.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">document</span>.title = <span class=\"string\">\"事件委托\"</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    item3.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      alert(<span class=\"string\">\"hi\"</span>);</span><br><span class=\"line\">    &#125;;</span><br></pre></td></tr></table></figure>\n<p>使用事件委托</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"click\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">var</span> target = event.target;</span><br><span class=\"line\">     <span class=\"keyword\">switch</span> (target.id) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">case</span> <span class=\"string\">\"doSomething\"</span>:</span><br><span class=\"line\">         <span class=\"built_in\">document</span>.title = <span class=\"string\">\"事件委托\"</span>;</span><br><span class=\"line\">         <span class=\"keyword\">break</span>;</span><br><span class=\"line\">       <span class=\"keyword\">case</span> <span class=\"string\">\"goSomewhere\"</span>:</span><br><span class=\"line\">         location.href = <span class=\"string\">\"http://www.baidu.com\"</span>;</span><br><span class=\"line\">         <span class=\"keyword\">break</span>;</span><br><span class=\"line\">       <span class=\"keyword\">case</span> <span class=\"string\">\"sayHi\"</span>: alert(<span class=\"string\">\"hi\"</span>);</span><br><span class=\"line\">         <span class=\"keyword\">break</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"自定义事件\"><a href=\"#自定义事件\" class=\"headerlink\" title=\"自定义事件\"></a>自定义事件</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> eventCus = <span class=\"keyword\">new</span> Event(<span class=\"string\">'custome'</span>);</span><br><span class=\"line\">ev.addEventListener(<span class=\"string\">'custome'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'自定义事件'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">ev.dispatchEvent(eve);</span><br></pre></td></tr></table></figure>\n<p>自定义事件也可以使用<code>customEvent</code></p>\n<p>区别在于能够传递数据</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createEvent</span>(<span class=\"params\">params, eventName = <span class=\"string\">'mock-event'</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> CustomEvent(eventName, &#123; <span class=\"attr\">detail</span>: params &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> event = createEvent(&#123; <span class=\"attr\">id</span>: <span class=\"string\">'0010'</span> &#125;);</span><br></pre></td></tr></table></figure>\n<p>这里值得注意，需要把想要传递的参数包裹在一个包含detail属性的对象，否则传递的参数不会被挂载？（这里不太确定，我试过传id和params都不会生效）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'mock-event'</span>, (&#123; <span class=\"attr\">detail</span>: &#123; id &#125; &#125;) =&gt; &#123;</span><br><span class=\"line\">           <span class=\"built_in\">console</span>.log(<span class=\"string\">'id'</span>,id) <span class=\"comment\">// 会在控制台打印0010</span></span><br><span class=\"line\">       &#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"DOM事件流的补充\"><a href=\"#DOM事件流的补充\" class=\"headerlink\" title=\"DOM事件流的补充\"></a>DOM事件流的补充</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>DOM事件流<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"ev\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t\t<span class=\"selector-id\">#ev</span> &#123;</span></span><br><span class=\"line\">\t\t\t\t\twidth: 300px;</span><br><span class=\"line\">\t\t\t\t\theight: 100px;</span><br><span class=\"line\">\t\t\t\t\tbackground-color: red;</span><br><span class=\"line\"><span class=\"css\">\t\t\t\t\t<span class=\"selector-tag\">color</span>: <span class=\"selector-id\">#fff</span>;</span></span><br><span class=\"line\">\t\t\t\t\ttext-align: center;</span><br><span class=\"line\">\t\t\t\t\tline-height: 100px;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">\t\t\t目标元素</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"keyword\">var</span> ev = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'ev'</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"built_in\">window</span>.addEventListener(</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"string\">'click'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'window捕获阶段'</span>);</span></span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"literal\">true</span></span></span><br><span class=\"line\">\t\t\t);</span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"built_in\">document</span>.addEventListener(</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"string\">'click'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'doc捕获阶段'</span>);</span></span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"literal\">true</span></span></span><br><span class=\"line\">\t\t\t);</span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"built_in\">document</span>.documentElement.addEventListener(</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"string\">'click'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'html捕获阶段'</span>);</span></span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"literal\">true</span></span></span><br><span class=\"line\">\t\t\t);</span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"built_in\">document</span>.body.addEventListener(</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"string\">'click'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'body捕获阶段'</span>);</span></span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"literal\">true</span></span></span><br><span class=\"line\">\t\t\t);</span><br><span class=\"line\">\t\t\tev.addEventListener(</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"string\">'click'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'div捕获阶段'</span>);</span></span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"literal\">true</span></span></span><br><span class=\"line\">            );</span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"keyword\">var</span> eve=<span class=\"keyword\">new</span> Event(<span class=\"string\">'test'</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">            ev.addEventListener(<span class=\"string\">'test'</span>,<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'自定义事件'</span>);</span></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            ev.dispatchEvent(eve);</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{}},"excerpt":"<h2 id=\"Event-对象\"><a href=\"#Event-对象\" class=\"headerlink\" title=\"Event 对象\"></a>Event 对象</h2><p>W3C的说法是：</p>\n<p>Event 对象代表事件的状态，比如事件在其中发生的元素、键盘按键的状态、鼠标的位置、鼠标按钮的状态。</p>\n<p>事件通常与函数结合使用，函数不会在事件发生前被执行！</p>","more":"<h2 id=\"几种常见事件\"><a href=\"#几种常见事件\" class=\"headerlink\" title=\"几种常见事件\"></a>几种常见事件</h2><p><strong>event.preventDefault()</strong> :阻止默认事件  </p>\n<p><strong>event.stopPropagation()</strong>:阻止冒泡  </p>\n<p><strong>event.stopImmediatePropagation()</strong>:按优先级阻止执行</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">p</span> &#123; <span class=\"attribute\">height</span>: <span class=\"number\">30px</span>; <span class=\"attribute\">width</span>: <span class=\"number\">150px</span>; <span class=\"attribute\">background-color</span>: <span class=\"number\">#ccf</span>; &#125;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">div</span> &#123;<span class=\"attribute\">height</span>: <span class=\"number\">30px</span>; <span class=\"attribute\">width</span>: <span class=\"number\">150px</span>; <span class=\"attribute\">background-color</span>: <span class=\"number\">#cfc</span>; &#125;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>paragraph<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">const</span> p = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'p'</span>)</span></span><br><span class=\"line\"><span class=\"actionscript\">            p.addEventListener(<span class=\"string\">\"click\"</span>, (event) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">              alert(<span class=\"string\">\"我是p元素上被绑定的第一个监听函数\"</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">            &#125;, <span class=\"literal\">false</span>);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">            p.addEventListener(<span class=\"string\">\"click\"</span>, (event) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">              alert(<span class=\"string\">\"我是p元素上被绑定的第二个监听函数\"</span>);</span></span><br><span class=\"line\">              event.stopImmediatePropagation();</span><br><span class=\"line\"><span class=\"actionscript\">              <span class=\"comment\">// 执行stopImmediatePropagation方法,阻止click事件冒泡,并且阻止p元素上绑定的其他click事件的事件监听函数的执行.</span></span></span><br><span class=\"line\"><span class=\"actionscript\">            &#125;, <span class=\"literal\">false</span>);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">            p.addEventListener(<span class=\"string\">\"click\"</span>,(event) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">              alert(<span class=\"string\">\"我是p元素上被绑定的第三个监听函数\"</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">              <span class=\"comment\">// 该监听函数排在上个函数后面，该函数不会被执行</span></span></span><br><span class=\"line\"><span class=\"actionscript\">            &#125;, <span class=\"literal\">false</span>);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">\"div\"</span>).addEventListener(<span class=\"string\">\"click\"</span>, (event) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">              alert(<span class=\"string\">\"我是div元素,我是p元素的上层元素\"</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">              <span class=\"comment\">// p元素的click事件没有向上冒泡，该函数不会被执行</span></span></span><br><span class=\"line\"><span class=\"actionscript\">            &#125;, <span class=\"literal\">false</span>);</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>event.currentTarget</strong>:当前绑定的事件（父级元素）</p>\n<p><strong>event.target</strong>:绑定的事件</p>\n<p>以上两者主要用于事件委托中。<br><strong>事件委托就是利用冒泡的原理，将事件加到 父元素 或 祖先元素上，触发执行效果。</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myLinks\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"goSomewhere\"</span>&gt;</span>Go somewhere<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"doSomething\"</span>&gt;</span>Do something<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"sayHi\"</span>&gt;</span>Say hi<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>正常情况下添加点击事件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> item1 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"goSomewhere\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> item2 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"doSomething\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> item3 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"sayHi\"</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">    item1.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      location.href = <span class=\"string\">\"http://www.baidu.com\"</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    item2.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">document</span>.title = <span class=\"string\">\"事件委托\"</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    item3.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      alert(<span class=\"string\">\"hi\"</span>);</span><br><span class=\"line\">    &#125;;</span><br></pre></td></tr></table></figure>\n<p>使用事件委托</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"click\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">var</span> target = event.target;</span><br><span class=\"line\">     <span class=\"keyword\">switch</span> (target.id) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">case</span> <span class=\"string\">\"doSomething\"</span>:</span><br><span class=\"line\">         <span class=\"built_in\">document</span>.title = <span class=\"string\">\"事件委托\"</span>;</span><br><span class=\"line\">         <span class=\"keyword\">break</span>;</span><br><span class=\"line\">       <span class=\"keyword\">case</span> <span class=\"string\">\"goSomewhere\"</span>:</span><br><span class=\"line\">         location.href = <span class=\"string\">\"http://www.baidu.com\"</span>;</span><br><span class=\"line\">         <span class=\"keyword\">break</span>;</span><br><span class=\"line\">       <span class=\"keyword\">case</span> <span class=\"string\">\"sayHi\"</span>: alert(<span class=\"string\">\"hi\"</span>);</span><br><span class=\"line\">         <span class=\"keyword\">break</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"自定义事件\"><a href=\"#自定义事件\" class=\"headerlink\" title=\"自定义事件\"></a>自定义事件</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> eventCus = <span class=\"keyword\">new</span> Event(<span class=\"string\">'custome'</span>);</span><br><span class=\"line\">ev.addEventListener(<span class=\"string\">'custome'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'自定义事件'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">ev.dispatchEvent(eve);</span><br></pre></td></tr></table></figure>\n<p>自定义事件也可以使用<code>customEvent</code></p>\n<p>区别在于能够传递数据</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createEvent</span>(<span class=\"params\">params, eventName = <span class=\"string\">'mock-event'</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> CustomEvent(eventName, &#123; <span class=\"attr\">detail</span>: params &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> event = createEvent(&#123; <span class=\"attr\">id</span>: <span class=\"string\">'0010'</span> &#125;);</span><br></pre></td></tr></table></figure>\n<p>这里值得注意，需要把想要传递的参数包裹在一个包含detail属性的对象，否则传递的参数不会被挂载？（这里不太确定，我试过传id和params都不会生效）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'mock-event'</span>, (&#123; <span class=\"attr\">detail</span>: &#123; id &#125; &#125;) =&gt; &#123;</span><br><span class=\"line\">           <span class=\"built_in\">console</span>.log(<span class=\"string\">'id'</span>,id) <span class=\"comment\">// 会在控制台打印0010</span></span><br><span class=\"line\">       &#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"DOM事件流的补充\"><a href=\"#DOM事件流的补充\" class=\"headerlink\" title=\"DOM事件流的补充\"></a>DOM事件流的补充</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>DOM事件流<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"ev\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t\t<span class=\"selector-id\">#ev</span> &#123;</span></span><br><span class=\"line\">\t\t\t\t\twidth: 300px;</span><br><span class=\"line\">\t\t\t\t\theight: 100px;</span><br><span class=\"line\">\t\t\t\t\tbackground-color: red;</span><br><span class=\"line\"><span class=\"css\">\t\t\t\t\t<span class=\"selector-tag\">color</span>: <span class=\"selector-id\">#fff</span>;</span></span><br><span class=\"line\">\t\t\t\t\ttext-align: center;</span><br><span class=\"line\">\t\t\t\t\tline-height: 100px;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">\t\t\t目标元素</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"keyword\">var</span> ev = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'ev'</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"built_in\">window</span>.addEventListener(</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"string\">'click'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'window捕获阶段'</span>);</span></span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"literal\">true</span></span></span><br><span class=\"line\">\t\t\t);</span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"built_in\">document</span>.addEventListener(</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"string\">'click'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'doc捕获阶段'</span>);</span></span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"literal\">true</span></span></span><br><span class=\"line\">\t\t\t);</span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"built_in\">document</span>.documentElement.addEventListener(</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"string\">'click'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'html捕获阶段'</span>);</span></span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"literal\">true</span></span></span><br><span class=\"line\">\t\t\t);</span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"built_in\">document</span>.body.addEventListener(</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"string\">'click'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'body捕获阶段'</span>);</span></span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"literal\">true</span></span></span><br><span class=\"line\">\t\t\t);</span><br><span class=\"line\">\t\t\tev.addEventListener(</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"string\">'click'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'div捕获阶段'</span>);</span></span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"literal\">true</span></span></span><br><span class=\"line\">            );</span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"keyword\">var</span> eve=<span class=\"keyword\">new</span> Event(<span class=\"string\">'test'</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">            ev.addEventListener(<span class=\"string\">'test'</span>,<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'自定义事件'</span>);</span></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            ev.dispatchEvent(eve);</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>"},{"layout":"[post]","title":"HTTP协议","date":"2020-07-02T10:42:57.000Z","_content":"## HTTP协议\n### HTTP协议的主要特点\n1. 支持客户/服务器模式。\n2. 简单快速：客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有GET、HEAD、POST。每种方法规定了客户与服务器联系的类型不同。\n由于HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快。\n3. 灵活：HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记。\n4. 无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。\n5. 无状态：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。\n<!-- more -->\n\n### HTTP协议报文\n#### 请求报文\n\n##### 请求行\n请求行由请求方法字段、URL字段和HTTP协议版本字段3个字段组成，它们用空格分隔。比如 GET /data/info.html HTTP/1.1\n\n方法字段就是HTTP使用的请求方法，比如常见的GET/POST\n\n其中HTTP协议版本有两种：HTTP1.0/HTTP1.1 可以这样区别：\n\nHTTP1.0对于每个连接都只能传送一个请求和响应，请求就会关闭，HTTP1.0没有Host字段;而HTTP1.1在同一个连接中可以传送多个请求和响应，多个请求可以重叠和同时进行，HTTP1.1必须有Host字段。\n##### 请求头\nHTTP客户程序(例如浏览器)，向服务器发送请求的时候必须指明请求类型(一般是GET或者 POST)。如有必要，客户程序还可以选择发送其他的请求头。大多数请求头并不是必需的，但Content-Length除外。对于POST请求来说 Content-Length必须出现。\n\n常见的请求头字段含义：\n\nAccept： 浏览器可接受的MIME类型。\n\nAccept-Charset：浏览器可接受的字符集。\n\nAccept-Encoding：浏览器能够进行解码的数据编码方式，比如gzip。Servlet能够向支持gzip的浏览器返回经gzip编码的HTML页面。许多情形下这可以减少5到10倍的下载时间。\n\nAccept-Language：浏览器所希望的语言种类，当服务器能够提供一种以上的语言版本时要用到。\n\nAuthorization：授权信息，通常出现在对服务器发送的WWW-Authenticate头的应答中。\n\nContent-Length：表示请求消息正文的长度。\n\nHost： 客户机通过这个头告诉服务器，想访问的主机名。Host头域指定请求资源的Intenet主机和端口号，必须表示请求url的原始服务器或网关的位置。HTTP/1.1请求必须包含主机头域，否则系统会以400状态码返回。\n\nIf-Modified-Since：客户机通过这个头告诉服务器，资源的缓存时间。只有当所请求的内容在指定的时间后又经过修改才返回它，否则返回304“Not Modified”应答。\n\nReferer：客户机通过这个头告诉服务器，它是从哪个资源来访问服务器的(防盗链)。包含一个URL，用户从该URL代表的页面出发访问当前请求的页面。\n\nUser-Agent：User-Agent头域的内容包含发出请求的用户信息。浏览器类型，如果Servlet返回的内容与浏览器类型有关则该值非常有用。\n\nCookie：客户机通过这个头可以向服务器带数据，这是最重要的请求头信息之一。\n\nPragma：指定“no-cache”值表示服务器必须返回一个刷新后的文档，即使它是代理服务器而且已经有了页面的本地拷贝。\n\nFrom：请求发送者的email地址，由一些特殊的Web客户程序使用，浏览器不会用到它。\n\nConnection：处理完这次请求后是否断开连接还是继续保持连接。如果Servlet看到这里的值为“Keep- Alive”，或者看到请求使用的是HTTP 1.1(HTTP 1.1默认进行持久连接)，它就可以利用持久连接的优点，当页面包含多个元素时(例如Applet，图片)，显著地减少下载所需要的时间。要实现这一点，Servlet需要在应答中发送一个Content-Length头，最简单的实现方法是：先把内容写入 ByteArrayOutputStream，然后在正式写出内容之前计算它的大小。\n\nRange：Range头域可以请求实体的一个或者多个子范围。例如，\n\n表示头500个字节：bytes=0-499\n\n表示第二个500字节：bytes=500-999\n\n表示最后500个字节：bytes=-500\n\n表示500字节以后的范围：bytes=500-\n\n第一个和最后一个字节：bytes=0-0,-1\n\n同时指定几个范围：bytes=500-600,601-999\n\n但是服务器可以忽略此请求头，如果无条件GET包含Range请求头，响应会以状态码206(PartialContent)返回而不是以200 (OK)。\n\nUA-Pixels，UA-Color，UA-OS，UA-CPU：由某些版本的IE浏览器所发送的非标准的请求头，表示屏幕大小、颜色深度、操作系统和CPU类型。\n##### 空行\n它的作用是通过一个空行，告诉服务器请求头部到此为止。\n##### 请求体\n若方法字段是GET，则此项为空，没有数据\n\n若方法字段是POST,则通常来说此处放置的就是要提交的数据\n\n比如要使用POST方法提交一个表单，其中有user字段中数据为“admin”, password字段为123456，那么这里的请求数据就是 user=admin&password=123456，使用&来连接各个字段。\n\n![image](qingqiuti.png)\n\n![image](qingqiudemo.jpg)\n#### 响应报文\n##### 状态行\n响应行一般由协议版本、状态码及其描述组成 比如 HTTP/1.1 200 OK\n\n其中协议版本HTTP/1.1或者HTTP/1.0，200就是它的状态码，OK则为它的描述。\n\n//常见状态码：\n\n100~199：表示成功接收请求，要求客户端继续提交下一次请求才能完成整个处理过程。\n\n200~299：表示成功接收请求并已完成整个处理过程。常用200\n\n300~399：为完成请求，客户需进一步细化请求。例如：请求的资源已经移动一个新地址、常用302(意味着你请求我，我让你去找别人),307和304(我不给你这个资源，自己拿缓存)\n\n400~499：客户端的请求有错误，常用404(意味着你请求的资源在web服务器中没有)403(服务器拒绝访问，权限不够)\n\n500~599：服务器端出现错误，常用500\n\n[更加详细的状态码](https://baike.baidu.com/item/HTTP%E7%8A%B6%E6%80%81%E7%A0%81/5053660?fr=aladdin)\n##### 响应头\n响应头用于描述服务器的基本信息，以及数据的描述，服务器通过这些数据的描述信息，可以通知客户端如何处理等一会儿它回送的数据。\n\n设置HTTP响应头往往和状态码结合起来。例如，有好几个表示“文档位置已经改变”的状态代码都伴随着一个Location头，而401(Unauthorized)状态代码则必须伴随一个WWW-Authenticate头。然而，即使在没有设置特殊含义的状态代码时，指定应答头也是很有用的。应答头可以用来完成：设置Cookie，指定修改日期，指示浏览器按照指定的间隔刷新页面，声明文档的长度以便利用持久HTTP连接，……等等许多其他任务。\n\n常见的响应头字段含义：\n\nAllow：服务器支持哪些请求方法(如GET、POST等)。\n\nContent-Encoding：文档的编码(Encode)方法。只有在解码之后才可以得到Content-Type头指定的内容类型。利用gzip压缩文档能够显著地减少HTML文档的下载时间。Java的GZIPOutputStream可以很方便地进行gzip压缩，但只有Unix上的Netscape和Windows上的IE4、IE5才支持它。因此，Servlet应该通过查看Accept-Encoding头(即request.getHeader(“Accept- Encoding”))检查浏览器是否支持gzip，为支持gzip的浏览器返回经gzip压缩的HTML页面，为其他浏览器返回普通页面。\n\nContent-Length：表示内容长度。只有当浏览器使用持久HTTP连接时才需要这个数据。如果你想要利用持久连接的优势，可以把输出文档写入 ByteArrayOutputStram，完成后查看其大小，然后把该值放入Content-Length头，最后通过byteArrayStream.writeTo(response.getOutputStream()发送内容。\n\nContent- Type：表示后面的文档属于什么MIME类型。Servlet默认为text/plain，但通常需要显式地指定为text/html。由于经常要设置 Content-Type，因此HttpServletResponse提供了一个专用的方法setContentType。\n\nDate：当前的GMT时间，例如，Date:Mon,31Dec200104:25:57GMT。Date描述的时间表示世界标准时，换算成本地时间，需要知道用户所在的时区。你可以用setDateHeader来设置这个头以避免转换时间格式的麻烦。\n\nExpires：告诉浏览器把回送的资源缓存多长时间，-1或0则是不缓存。\n\nLast-Modified：文档的最后改动时间。客户可以通过If-Modified-Since请求头提供一个日期，该请求将被视为一个条件GET，只有改动时间迟于指定时间的文档才会返回，否则返回一个304(Not Modified)状态。Last-Modified也可用setDateHeader方法来设置。\n\nLocation：这个头配合302状态码使用，用于重定向接收者到一个新URI地址。表示客户应当到哪里去提取文档。Location通常不是直接设置的，而是通过HttpServletResponse的sendRedirect方法，该方法同时设置状态代码为302。\n\nRefresh：告诉浏览器隔多久刷新一次，以秒计。\n\nServer：服务器通过这个头告诉浏览器服务器的类型。Server响应头包含处理请求的原始服务器的软件信息。此域能包含多个产品标识和注释，产品标识一般按照重要性排序。Servlet一般不设置这个值，而是由Web服务器自己设置。\n\nSet-Cookie：设置和页面关联的Cookie。Servlet不应使用response.setHeader(“Set-Cookie”, …)，而是应使用HttpServletResponse提供的专用方法addCookie。\n\nTransfer-Encoding：告诉浏览器数据的传送格式。\n\nWWW-Authenticate：客户应该在Authorization头中提供什么类型的授权信息?在包含401(Unauthorized)状态行的应答中这个头是必需的。例如，response.setHeader(“WWW-Authenticate”, “BASIC realm=\\”executives\\”“)。注意Servlet一般不进行这方面的处理，而是让Web服务器的专门机制来控制受密码保护页面的访问。\n\n注：设置应答头最常用的方法是HttpServletResponse的setHeader，该方法有两个参数，分别表示应答头的名字和值。和设置状态代码相似，设置应答头应该在发送任何文档内容之前进行。\n\nsetDateHeader方法和setIntHeadr方法专门用来设置包含日期和整数值的应答头，前者避免了把Java时间转换为GMT时间字符串的麻烦，后者则避免了把整数转换为字符串的麻烦。\n\nHttpServletResponse还提供了许多设置\n\nsetContentType：设置Content-Type头。大多数Servlet都要用到这个方法。\n\nsetContentLength：设置Content-Length头。对于支持持久HTTP连接的浏览器来说，这个函数是很有用的。\n\naddCookie：设置一个Cookie(Servlet API中没有setCookie方法，因为应答往往包含多个Set-Cookie头)。\n##### 空行\n它的作用是通过一个空行，告诉服务器请求头部到此为止。\n##### 响应体\n响应体就是响应的消息体，如果是纯数据就是返回纯数据，如果请求的是HTML页面，那么返回的就是HTML代码，如果是JS就是JS代码，如此之类。\n\n![image](xiangying.jpg)\n\n### HTTP方法\n1. GET：获取资源\n2. POST：传输资源\n3. PUT：更新资源\n4. DELETE：删除资源\n5. HEAD：获取报文首部\n\n### POST请求和GET请求的区别\n- GET在浏览器回退时是无害的，而POST会再次提交请求。\n- GET产生的URL地址可以被收藏，而POST不可以。\n- GET请求会被浏览器主动缓存，而POST不会，除非手动设置。\n- GET请求只能进行url编码，而POST支持多种编码方式。\n- GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。\n- GET请求在URL中传送的参数是有长度限制的，而POST没有。\n- 对参数的数据类型，GET只接受ASCII字符，而POST没有限制。\n- GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。\n- GET参数通过URL传递，POST放在Request body中。\n\n### HTTP连接\n#### HTTP持久连接\nHTTP协议采用“请求-应答”模式，当使用普通模式，即非Keep-Alive模式时，每个请求/应答客户和服务器都要新建一个连接，完成后立即断开连接（HTTP协议为无连接的协议。\n\n当使用Keep-Alive模式（又称持久连接，连接重用）时，Keep-Alive功能使客户端到服务器端的连接持续有效，当出现服务器的后继请求时，Keep-Alive功能避免了建立或者重新建立连接。\n\n**只有http1.1开始支持持久连接**\n\n#### 管线化\n在使用持久连接的情况下，某个连接上的消息传递是这样的：  \n请求1->响应1->请求2->响应2->请求3->响应3\n\n管线化，则消息的传递变成这样：  \n请求1->请求2->请求3->响应1->响应2->响应3\n\n#### 管线化的特点\n1. 管线化机制通过持久连接完成，仅HTTP/1.1 支持此技术\n \n1. 只有GET和HEAD请求可以进行管线化，而POST则有所限制  \n2. 初次创建连接时不应启动管线机制，因为对方(服务器)不一定支持HTTP/1.1版本的协议  \n3. 管线化不会影响响应到来的顺序，如上面的例子所示，响应返回的顺序并未改变\n4. HTTP /1.1要求服务器端支持管线化，但并不要求服务器端也对响应进行管线化处理，只是要求对于管线化的请求不失败即可  \n5. 由于.上面提到的服务器端问题，开启管线化很可能并不会带来大幅度的性能提升，而且很多服务器端和代理程序对管线化的支持并不好，因此现代浏览器如**Chrome和Firefox** 默认并未开启管线化支持\n","source":"_posts/HTTP协议.md","raw":"---\nlayout: '[post]'\ntitle: HTTP协议\ndate: 2020-07-02 18:42:57\ntags: http\n---\n## HTTP协议\n### HTTP协议的主要特点\n1. 支持客户/服务器模式。\n2. 简单快速：客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有GET、HEAD、POST。每种方法规定了客户与服务器联系的类型不同。\n由于HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快。\n3. 灵活：HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记。\n4. 无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。\n5. 无状态：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。\n<!-- more -->\n\n### HTTP协议报文\n#### 请求报文\n\n##### 请求行\n请求行由请求方法字段、URL字段和HTTP协议版本字段3个字段组成，它们用空格分隔。比如 GET /data/info.html HTTP/1.1\n\n方法字段就是HTTP使用的请求方法，比如常见的GET/POST\n\n其中HTTP协议版本有两种：HTTP1.0/HTTP1.1 可以这样区别：\n\nHTTP1.0对于每个连接都只能传送一个请求和响应，请求就会关闭，HTTP1.0没有Host字段;而HTTP1.1在同一个连接中可以传送多个请求和响应，多个请求可以重叠和同时进行，HTTP1.1必须有Host字段。\n##### 请求头\nHTTP客户程序(例如浏览器)，向服务器发送请求的时候必须指明请求类型(一般是GET或者 POST)。如有必要，客户程序还可以选择发送其他的请求头。大多数请求头并不是必需的，但Content-Length除外。对于POST请求来说 Content-Length必须出现。\n\n常见的请求头字段含义：\n\nAccept： 浏览器可接受的MIME类型。\n\nAccept-Charset：浏览器可接受的字符集。\n\nAccept-Encoding：浏览器能够进行解码的数据编码方式，比如gzip。Servlet能够向支持gzip的浏览器返回经gzip编码的HTML页面。许多情形下这可以减少5到10倍的下载时间。\n\nAccept-Language：浏览器所希望的语言种类，当服务器能够提供一种以上的语言版本时要用到。\n\nAuthorization：授权信息，通常出现在对服务器发送的WWW-Authenticate头的应答中。\n\nContent-Length：表示请求消息正文的长度。\n\nHost： 客户机通过这个头告诉服务器，想访问的主机名。Host头域指定请求资源的Intenet主机和端口号，必须表示请求url的原始服务器或网关的位置。HTTP/1.1请求必须包含主机头域，否则系统会以400状态码返回。\n\nIf-Modified-Since：客户机通过这个头告诉服务器，资源的缓存时间。只有当所请求的内容在指定的时间后又经过修改才返回它，否则返回304“Not Modified”应答。\n\nReferer：客户机通过这个头告诉服务器，它是从哪个资源来访问服务器的(防盗链)。包含一个URL，用户从该URL代表的页面出发访问当前请求的页面。\n\nUser-Agent：User-Agent头域的内容包含发出请求的用户信息。浏览器类型，如果Servlet返回的内容与浏览器类型有关则该值非常有用。\n\nCookie：客户机通过这个头可以向服务器带数据，这是最重要的请求头信息之一。\n\nPragma：指定“no-cache”值表示服务器必须返回一个刷新后的文档，即使它是代理服务器而且已经有了页面的本地拷贝。\n\nFrom：请求发送者的email地址，由一些特殊的Web客户程序使用，浏览器不会用到它。\n\nConnection：处理完这次请求后是否断开连接还是继续保持连接。如果Servlet看到这里的值为“Keep- Alive”，或者看到请求使用的是HTTP 1.1(HTTP 1.1默认进行持久连接)，它就可以利用持久连接的优点，当页面包含多个元素时(例如Applet，图片)，显著地减少下载所需要的时间。要实现这一点，Servlet需要在应答中发送一个Content-Length头，最简单的实现方法是：先把内容写入 ByteArrayOutputStream，然后在正式写出内容之前计算它的大小。\n\nRange：Range头域可以请求实体的一个或者多个子范围。例如，\n\n表示头500个字节：bytes=0-499\n\n表示第二个500字节：bytes=500-999\n\n表示最后500个字节：bytes=-500\n\n表示500字节以后的范围：bytes=500-\n\n第一个和最后一个字节：bytes=0-0,-1\n\n同时指定几个范围：bytes=500-600,601-999\n\n但是服务器可以忽略此请求头，如果无条件GET包含Range请求头，响应会以状态码206(PartialContent)返回而不是以200 (OK)。\n\nUA-Pixels，UA-Color，UA-OS，UA-CPU：由某些版本的IE浏览器所发送的非标准的请求头，表示屏幕大小、颜色深度、操作系统和CPU类型。\n##### 空行\n它的作用是通过一个空行，告诉服务器请求头部到此为止。\n##### 请求体\n若方法字段是GET，则此项为空，没有数据\n\n若方法字段是POST,则通常来说此处放置的就是要提交的数据\n\n比如要使用POST方法提交一个表单，其中有user字段中数据为“admin”, password字段为123456，那么这里的请求数据就是 user=admin&password=123456，使用&来连接各个字段。\n\n![image](qingqiuti.png)\n\n![image](qingqiudemo.jpg)\n#### 响应报文\n##### 状态行\n响应行一般由协议版本、状态码及其描述组成 比如 HTTP/1.1 200 OK\n\n其中协议版本HTTP/1.1或者HTTP/1.0，200就是它的状态码，OK则为它的描述。\n\n//常见状态码：\n\n100~199：表示成功接收请求，要求客户端继续提交下一次请求才能完成整个处理过程。\n\n200~299：表示成功接收请求并已完成整个处理过程。常用200\n\n300~399：为完成请求，客户需进一步细化请求。例如：请求的资源已经移动一个新地址、常用302(意味着你请求我，我让你去找别人),307和304(我不给你这个资源，自己拿缓存)\n\n400~499：客户端的请求有错误，常用404(意味着你请求的资源在web服务器中没有)403(服务器拒绝访问，权限不够)\n\n500~599：服务器端出现错误，常用500\n\n[更加详细的状态码](https://baike.baidu.com/item/HTTP%E7%8A%B6%E6%80%81%E7%A0%81/5053660?fr=aladdin)\n##### 响应头\n响应头用于描述服务器的基本信息，以及数据的描述，服务器通过这些数据的描述信息，可以通知客户端如何处理等一会儿它回送的数据。\n\n设置HTTP响应头往往和状态码结合起来。例如，有好几个表示“文档位置已经改变”的状态代码都伴随着一个Location头，而401(Unauthorized)状态代码则必须伴随一个WWW-Authenticate头。然而，即使在没有设置特殊含义的状态代码时，指定应答头也是很有用的。应答头可以用来完成：设置Cookie，指定修改日期，指示浏览器按照指定的间隔刷新页面，声明文档的长度以便利用持久HTTP连接，……等等许多其他任务。\n\n常见的响应头字段含义：\n\nAllow：服务器支持哪些请求方法(如GET、POST等)。\n\nContent-Encoding：文档的编码(Encode)方法。只有在解码之后才可以得到Content-Type头指定的内容类型。利用gzip压缩文档能够显著地减少HTML文档的下载时间。Java的GZIPOutputStream可以很方便地进行gzip压缩，但只有Unix上的Netscape和Windows上的IE4、IE5才支持它。因此，Servlet应该通过查看Accept-Encoding头(即request.getHeader(“Accept- Encoding”))检查浏览器是否支持gzip，为支持gzip的浏览器返回经gzip压缩的HTML页面，为其他浏览器返回普通页面。\n\nContent-Length：表示内容长度。只有当浏览器使用持久HTTP连接时才需要这个数据。如果你想要利用持久连接的优势，可以把输出文档写入 ByteArrayOutputStram，完成后查看其大小，然后把该值放入Content-Length头，最后通过byteArrayStream.writeTo(response.getOutputStream()发送内容。\n\nContent- Type：表示后面的文档属于什么MIME类型。Servlet默认为text/plain，但通常需要显式地指定为text/html。由于经常要设置 Content-Type，因此HttpServletResponse提供了一个专用的方法setContentType。\n\nDate：当前的GMT时间，例如，Date:Mon,31Dec200104:25:57GMT。Date描述的时间表示世界标准时，换算成本地时间，需要知道用户所在的时区。你可以用setDateHeader来设置这个头以避免转换时间格式的麻烦。\n\nExpires：告诉浏览器把回送的资源缓存多长时间，-1或0则是不缓存。\n\nLast-Modified：文档的最后改动时间。客户可以通过If-Modified-Since请求头提供一个日期，该请求将被视为一个条件GET，只有改动时间迟于指定时间的文档才会返回，否则返回一个304(Not Modified)状态。Last-Modified也可用setDateHeader方法来设置。\n\nLocation：这个头配合302状态码使用，用于重定向接收者到一个新URI地址。表示客户应当到哪里去提取文档。Location通常不是直接设置的，而是通过HttpServletResponse的sendRedirect方法，该方法同时设置状态代码为302。\n\nRefresh：告诉浏览器隔多久刷新一次，以秒计。\n\nServer：服务器通过这个头告诉浏览器服务器的类型。Server响应头包含处理请求的原始服务器的软件信息。此域能包含多个产品标识和注释，产品标识一般按照重要性排序。Servlet一般不设置这个值，而是由Web服务器自己设置。\n\nSet-Cookie：设置和页面关联的Cookie。Servlet不应使用response.setHeader(“Set-Cookie”, …)，而是应使用HttpServletResponse提供的专用方法addCookie。\n\nTransfer-Encoding：告诉浏览器数据的传送格式。\n\nWWW-Authenticate：客户应该在Authorization头中提供什么类型的授权信息?在包含401(Unauthorized)状态行的应答中这个头是必需的。例如，response.setHeader(“WWW-Authenticate”, “BASIC realm=\\”executives\\”“)。注意Servlet一般不进行这方面的处理，而是让Web服务器的专门机制来控制受密码保护页面的访问。\n\n注：设置应答头最常用的方法是HttpServletResponse的setHeader，该方法有两个参数，分别表示应答头的名字和值。和设置状态代码相似，设置应答头应该在发送任何文档内容之前进行。\n\nsetDateHeader方法和setIntHeadr方法专门用来设置包含日期和整数值的应答头，前者避免了把Java时间转换为GMT时间字符串的麻烦，后者则避免了把整数转换为字符串的麻烦。\n\nHttpServletResponse还提供了许多设置\n\nsetContentType：设置Content-Type头。大多数Servlet都要用到这个方法。\n\nsetContentLength：设置Content-Length头。对于支持持久HTTP连接的浏览器来说，这个函数是很有用的。\n\naddCookie：设置一个Cookie(Servlet API中没有setCookie方法，因为应答往往包含多个Set-Cookie头)。\n##### 空行\n它的作用是通过一个空行，告诉服务器请求头部到此为止。\n##### 响应体\n响应体就是响应的消息体，如果是纯数据就是返回纯数据，如果请求的是HTML页面，那么返回的就是HTML代码，如果是JS就是JS代码，如此之类。\n\n![image](xiangying.jpg)\n\n### HTTP方法\n1. GET：获取资源\n2. POST：传输资源\n3. PUT：更新资源\n4. DELETE：删除资源\n5. HEAD：获取报文首部\n\n### POST请求和GET请求的区别\n- GET在浏览器回退时是无害的，而POST会再次提交请求。\n- GET产生的URL地址可以被收藏，而POST不可以。\n- GET请求会被浏览器主动缓存，而POST不会，除非手动设置。\n- GET请求只能进行url编码，而POST支持多种编码方式。\n- GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。\n- GET请求在URL中传送的参数是有长度限制的，而POST没有。\n- 对参数的数据类型，GET只接受ASCII字符，而POST没有限制。\n- GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。\n- GET参数通过URL传递，POST放在Request body中。\n\n### HTTP连接\n#### HTTP持久连接\nHTTP协议采用“请求-应答”模式，当使用普通模式，即非Keep-Alive模式时，每个请求/应答客户和服务器都要新建一个连接，完成后立即断开连接（HTTP协议为无连接的协议。\n\n当使用Keep-Alive模式（又称持久连接，连接重用）时，Keep-Alive功能使客户端到服务器端的连接持续有效，当出现服务器的后继请求时，Keep-Alive功能避免了建立或者重新建立连接。\n\n**只有http1.1开始支持持久连接**\n\n#### 管线化\n在使用持久连接的情况下，某个连接上的消息传递是这样的：  \n请求1->响应1->请求2->响应2->请求3->响应3\n\n管线化，则消息的传递变成这样：  \n请求1->请求2->请求3->响应1->响应2->响应3\n\n#### 管线化的特点\n1. 管线化机制通过持久连接完成，仅HTTP/1.1 支持此技术\n \n1. 只有GET和HEAD请求可以进行管线化，而POST则有所限制  \n2. 初次创建连接时不应启动管线机制，因为对方(服务器)不一定支持HTTP/1.1版本的协议  \n3. 管线化不会影响响应到来的顺序，如上面的例子所示，响应返回的顺序并未改变\n4. HTTP /1.1要求服务器端支持管线化，但并不要求服务器端也对响应进行管线化处理，只是要求对于管线化的请求不失败即可  \n5. 由于.上面提到的服务器端问题，开启管线化很可能并不会带来大幅度的性能提升，而且很多服务器端和代理程序对管线化的支持并不好，因此现代浏览器如**Chrome和Firefox** 默认并未开启管线化支持\n","slug":"HTTP协议","published":1,"updated":"2020-03-12T11:23:06.000Z","comments":1,"photos":[],"link":"","_id":"ck7onzqx50008yts60t2b29pw","content":"<h2 id=\"HTTP协议\"><a href=\"#HTTP协议\" class=\"headerlink\" title=\"HTTP协议\"></a>HTTP协议</h2><h3 id=\"HTTP协议的主要特点\"><a href=\"#HTTP协议的主要特点\" class=\"headerlink\" title=\"HTTP协议的主要特点\"></a>HTTP协议的主要特点</h3><ol>\n<li>支持客户/服务器模式。</li>\n<li>简单快速：客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有GET、HEAD、POST。每种方法规定了客户与服务器联系的类型不同。<br>由于HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快。</li>\n<li>灵活：HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记。</li>\n<li>无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。</li>\n<li>无状态：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。<a id=\"more\"></a>\n\n</li>\n</ol>\n<h3 id=\"HTTP协议报文\"><a href=\"#HTTP协议报文\" class=\"headerlink\" title=\"HTTP协议报文\"></a>HTTP协议报文</h3><h4 id=\"请求报文\"><a href=\"#请求报文\" class=\"headerlink\" title=\"请求报文\"></a>请求报文</h4><h5 id=\"请求行\"><a href=\"#请求行\" class=\"headerlink\" title=\"请求行\"></a>请求行</h5><p>请求行由请求方法字段、URL字段和HTTP协议版本字段3个字段组成，它们用空格分隔。比如 GET /data/info.html HTTP/1.1</p>\n<p>方法字段就是HTTP使用的请求方法，比如常见的GET/POST</p>\n<p>其中HTTP协议版本有两种：HTTP1.0/HTTP1.1 可以这样区别：</p>\n<p>HTTP1.0对于每个连接都只能传送一个请求和响应，请求就会关闭，HTTP1.0没有Host字段;而HTTP1.1在同一个连接中可以传送多个请求和响应，多个请求可以重叠和同时进行，HTTP1.1必须有Host字段。</p>\n<h5 id=\"请求头\"><a href=\"#请求头\" class=\"headerlink\" title=\"请求头\"></a>请求头</h5><p>HTTP客户程序(例如浏览器)，向服务器发送请求的时候必须指明请求类型(一般是GET或者 POST)。如有必要，客户程序还可以选择发送其他的请求头。大多数请求头并不是必需的，但Content-Length除外。对于POST请求来说 Content-Length必须出现。</p>\n<p>常见的请求头字段含义：</p>\n<p>Accept： 浏览器可接受的MIME类型。</p>\n<p>Accept-Charset：浏览器可接受的字符集。</p>\n<p>Accept-Encoding：浏览器能够进行解码的数据编码方式，比如gzip。Servlet能够向支持gzip的浏览器返回经gzip编码的HTML页面。许多情形下这可以减少5到10倍的下载时间。</p>\n<p>Accept-Language：浏览器所希望的语言种类，当服务器能够提供一种以上的语言版本时要用到。</p>\n<p>Authorization：授权信息，通常出现在对服务器发送的WWW-Authenticate头的应答中。</p>\n<p>Content-Length：表示请求消息正文的长度。</p>\n<p>Host： 客户机通过这个头告诉服务器，想访问的主机名。Host头域指定请求资源的Intenet主机和端口号，必须表示请求url的原始服务器或网关的位置。HTTP/1.1请求必须包含主机头域，否则系统会以400状态码返回。</p>\n<p>If-Modified-Since：客户机通过这个头告诉服务器，资源的缓存时间。只有当所请求的内容在指定的时间后又经过修改才返回它，否则返回304“Not Modified”应答。</p>\n<p>Referer：客户机通过这个头告诉服务器，它是从哪个资源来访问服务器的(防盗链)。包含一个URL，用户从该URL代表的页面出发访问当前请求的页面。</p>\n<p>User-Agent：User-Agent头域的内容包含发出请求的用户信息。浏览器类型，如果Servlet返回的内容与浏览器类型有关则该值非常有用。</p>\n<p>Cookie：客户机通过这个头可以向服务器带数据，这是最重要的请求头信息之一。</p>\n<p>Pragma：指定“no-cache”值表示服务器必须返回一个刷新后的文档，即使它是代理服务器而且已经有了页面的本地拷贝。</p>\n<p>From：请求发送者的email地址，由一些特殊的Web客户程序使用，浏览器不会用到它。</p>\n<p>Connection：处理完这次请求后是否断开连接还是继续保持连接。如果Servlet看到这里的值为“Keep- Alive”，或者看到请求使用的是HTTP 1.1(HTTP 1.1默认进行持久连接)，它就可以利用持久连接的优点，当页面包含多个元素时(例如Applet，图片)，显著地减少下载所需要的时间。要实现这一点，Servlet需要在应答中发送一个Content-Length头，最简单的实现方法是：先把内容写入 ByteArrayOutputStream，然后在正式写出内容之前计算它的大小。</p>\n<p>Range：Range头域可以请求实体的一个或者多个子范围。例如，</p>\n<p>表示头500个字节：bytes=0-499</p>\n<p>表示第二个500字节：bytes=500-999</p>\n<p>表示最后500个字节：bytes=-500</p>\n<p>表示500字节以后的范围：bytes=500-</p>\n<p>第一个和最后一个字节：bytes=0-0,-1</p>\n<p>同时指定几个范围：bytes=500-600,601-999</p>\n<p>但是服务器可以忽略此请求头，如果无条件GET包含Range请求头，响应会以状态码206(PartialContent)返回而不是以200 (OK)。</p>\n<p>UA-Pixels，UA-Color，UA-OS，UA-CPU：由某些版本的IE浏览器所发送的非标准的请求头，表示屏幕大小、颜色深度、操作系统和CPU类型。</p>\n<h5 id=\"空行\"><a href=\"#空行\" class=\"headerlink\" title=\"空行\"></a>空行</h5><p>它的作用是通过一个空行，告诉服务器请求头部到此为止。</p>\n<h5 id=\"请求体\"><a href=\"#请求体\" class=\"headerlink\" title=\"请求体\"></a>请求体</h5><p>若方法字段是GET，则此项为空，没有数据</p>\n<p>若方法字段是POST,则通常来说此处放置的就是要提交的数据</p>\n<p>比如要使用POST方法提交一个表单，其中有user字段中数据为“admin”, password字段为123456，那么这里的请求数据就是 user=admin&amp;password=123456，使用&amp;来连接各个字段。</p>\n<p><img src=\"/2020/07/02/HTTP%E5%8D%8F%E8%AE%AE/qingqiuti.png\" alt=\"image\"></p>\n<p><img src=\"/2020/07/02/HTTP%E5%8D%8F%E8%AE%AE/qingqiudemo.jpg\" alt=\"image\"></p>\n<h4 id=\"响应报文\"><a href=\"#响应报文\" class=\"headerlink\" title=\"响应报文\"></a>响应报文</h4><h5 id=\"状态行\"><a href=\"#状态行\" class=\"headerlink\" title=\"状态行\"></a>状态行</h5><p>响应行一般由协议版本、状态码及其描述组成 比如 HTTP/1.1 200 OK</p>\n<p>其中协议版本HTTP/1.1或者HTTP/1.0，200就是它的状态码，OK则为它的描述。</p>\n<p>//常见状态码：</p>\n<p>100~199：表示成功接收请求，要求客户端继续提交下一次请求才能完成整个处理过程。</p>\n<p>200~299：表示成功接收请求并已完成整个处理过程。常用200</p>\n<p>300~399：为完成请求，客户需进一步细化请求。例如：请求的资源已经移动一个新地址、常用302(意味着你请求我，我让你去找别人),307和304(我不给你这个资源，自己拿缓存)</p>\n<p>400~499：客户端的请求有错误，常用404(意味着你请求的资源在web服务器中没有)403(服务器拒绝访问，权限不够)</p>\n<p>500~599：服务器端出现错误，常用500</p>\n<p><a href=\"https://baike.baidu.com/item/HTTP%E7%8A%B6%E6%80%81%E7%A0%81/5053660?fr=aladdin\" target=\"_blank\" rel=\"noopener\">更加详细的状态码</a></p>\n<h5 id=\"响应头\"><a href=\"#响应头\" class=\"headerlink\" title=\"响应头\"></a>响应头</h5><p>响应头用于描述服务器的基本信息，以及数据的描述，服务器通过这些数据的描述信息，可以通知客户端如何处理等一会儿它回送的数据。</p>\n<p>设置HTTP响应头往往和状态码结合起来。例如，有好几个表示“文档位置已经改变”的状态代码都伴随着一个Location头，而401(Unauthorized)状态代码则必须伴随一个WWW-Authenticate头。然而，即使在没有设置特殊含义的状态代码时，指定应答头也是很有用的。应答头可以用来完成：设置Cookie，指定修改日期，指示浏览器按照指定的间隔刷新页面，声明文档的长度以便利用持久HTTP连接，……等等许多其他任务。</p>\n<p>常见的响应头字段含义：</p>\n<p>Allow：服务器支持哪些请求方法(如GET、POST等)。</p>\n<p>Content-Encoding：文档的编码(Encode)方法。只有在解码之后才可以得到Content-Type头指定的内容类型。利用gzip压缩文档能够显著地减少HTML文档的下载时间。Java的GZIPOutputStream可以很方便地进行gzip压缩，但只有Unix上的Netscape和Windows上的IE4、IE5才支持它。因此，Servlet应该通过查看Accept-Encoding头(即request.getHeader(“Accept- Encoding”))检查浏览器是否支持gzip，为支持gzip的浏览器返回经gzip压缩的HTML页面，为其他浏览器返回普通页面。</p>\n<p>Content-Length：表示内容长度。只有当浏览器使用持久HTTP连接时才需要这个数据。如果你想要利用持久连接的优势，可以把输出文档写入 ByteArrayOutputStram，完成后查看其大小，然后把该值放入Content-Length头，最后通过byteArrayStream.writeTo(response.getOutputStream()发送内容。</p>\n<p>Content- Type：表示后面的文档属于什么MIME类型。Servlet默认为text/plain，但通常需要显式地指定为text/html。由于经常要设置 Content-Type，因此HttpServletResponse提供了一个专用的方法setContentType。</p>\n<p>Date：当前的GMT时间，例如，Date:Mon,31Dec200104:25:57GMT。Date描述的时间表示世界标准时，换算成本地时间，需要知道用户所在的时区。你可以用setDateHeader来设置这个头以避免转换时间格式的麻烦。</p>\n<p>Expires：告诉浏览器把回送的资源缓存多长时间，-1或0则是不缓存。</p>\n<p>Last-Modified：文档的最后改动时间。客户可以通过If-Modified-Since请求头提供一个日期，该请求将被视为一个条件GET，只有改动时间迟于指定时间的文档才会返回，否则返回一个304(Not Modified)状态。Last-Modified也可用setDateHeader方法来设置。</p>\n<p>Location：这个头配合302状态码使用，用于重定向接收者到一个新URI地址。表示客户应当到哪里去提取文档。Location通常不是直接设置的，而是通过HttpServletResponse的sendRedirect方法，该方法同时设置状态代码为302。</p>\n<p>Refresh：告诉浏览器隔多久刷新一次，以秒计。</p>\n<p>Server：服务器通过这个头告诉浏览器服务器的类型。Server响应头包含处理请求的原始服务器的软件信息。此域能包含多个产品标识和注释，产品标识一般按照重要性排序。Servlet一般不设置这个值，而是由Web服务器自己设置。</p>\n<p>Set-Cookie：设置和页面关联的Cookie。Servlet不应使用response.setHeader(“Set-Cookie”, …)，而是应使用HttpServletResponse提供的专用方法addCookie。</p>\n<p>Transfer-Encoding：告诉浏览器数据的传送格式。</p>\n<p>WWW-Authenticate：客户应该在Authorization头中提供什么类型的授权信息?在包含401(Unauthorized)状态行的应答中这个头是必需的。例如，response.setHeader(“WWW-Authenticate”, “BASIC realm=\\”executives\\”“)。注意Servlet一般不进行这方面的处理，而是让Web服务器的专门机制来控制受密码保护页面的访问。</p>\n<p>注：设置应答头最常用的方法是HttpServletResponse的setHeader，该方法有两个参数，分别表示应答头的名字和值。和设置状态代码相似，设置应答头应该在发送任何文档内容之前进行。</p>\n<p>setDateHeader方法和setIntHeadr方法专门用来设置包含日期和整数值的应答头，前者避免了把Java时间转换为GMT时间字符串的麻烦，后者则避免了把整数转换为字符串的麻烦。</p>\n<p>HttpServletResponse还提供了许多设置</p>\n<p>setContentType：设置Content-Type头。大多数Servlet都要用到这个方法。</p>\n<p>setContentLength：设置Content-Length头。对于支持持久HTTP连接的浏览器来说，这个函数是很有用的。</p>\n<p>addCookie：设置一个Cookie(Servlet API中没有setCookie方法，因为应答往往包含多个Set-Cookie头)。</p>\n<h5 id=\"空行-1\"><a href=\"#空行-1\" class=\"headerlink\" title=\"空行\"></a>空行</h5><p>它的作用是通过一个空行，告诉服务器请求头部到此为止。</p>\n<h5 id=\"响应体\"><a href=\"#响应体\" class=\"headerlink\" title=\"响应体\"></a>响应体</h5><p>响应体就是响应的消息体，如果是纯数据就是返回纯数据，如果请求的是HTML页面，那么返回的就是HTML代码，如果是JS就是JS代码，如此之类。</p>\n<p><img src=\"/2020/07/02/HTTP%E5%8D%8F%E8%AE%AE/xiangying.jpg\" alt=\"image\"></p>\n<h3 id=\"HTTP方法\"><a href=\"#HTTP方法\" class=\"headerlink\" title=\"HTTP方法\"></a>HTTP方法</h3><ol>\n<li>GET：获取资源</li>\n<li>POST：传输资源</li>\n<li>PUT：更新资源</li>\n<li>DELETE：删除资源</li>\n<li>HEAD：获取报文首部</li>\n</ol>\n<h3 id=\"POST请求和GET请求的区别\"><a href=\"#POST请求和GET请求的区别\" class=\"headerlink\" title=\"POST请求和GET请求的区别\"></a>POST请求和GET请求的区别</h3><ul>\n<li>GET在浏览器回退时是无害的，而POST会再次提交请求。</li>\n<li>GET产生的URL地址可以被收藏，而POST不可以。</li>\n<li>GET请求会被浏览器主动缓存，而POST不会，除非手动设置。</li>\n<li>GET请求只能进行url编码，而POST支持多种编码方式。</li>\n<li>GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。</li>\n<li>GET请求在URL中传送的参数是有长度限制的，而POST没有。</li>\n<li>对参数的数据类型，GET只接受ASCII字符，而POST没有限制。</li>\n<li>GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。</li>\n<li>GET参数通过URL传递，POST放在Request body中。</li>\n</ul>\n<h3 id=\"HTTP连接\"><a href=\"#HTTP连接\" class=\"headerlink\" title=\"HTTP连接\"></a>HTTP连接</h3><h4 id=\"HTTP持久连接\"><a href=\"#HTTP持久连接\" class=\"headerlink\" title=\"HTTP持久连接\"></a>HTTP持久连接</h4><p>HTTP协议采用“请求-应答”模式，当使用普通模式，即非Keep-Alive模式时，每个请求/应答客户和服务器都要新建一个连接，完成后立即断开连接（HTTP协议为无连接的协议。</p>\n<p>当使用Keep-Alive模式（又称持久连接，连接重用）时，Keep-Alive功能使客户端到服务器端的连接持续有效，当出现服务器的后继请求时，Keep-Alive功能避免了建立或者重新建立连接。</p>\n<p><strong>只有http1.1开始支持持久连接</strong></p>\n<h4 id=\"管线化\"><a href=\"#管线化\" class=\"headerlink\" title=\"管线化\"></a>管线化</h4><p>在使用持久连接的情况下，某个连接上的消息传递是这样的：<br>请求1-&gt;响应1-&gt;请求2-&gt;响应2-&gt;请求3-&gt;响应3</p>\n<p>管线化，则消息的传递变成这样：<br>请求1-&gt;请求2-&gt;请求3-&gt;响应1-&gt;响应2-&gt;响应3</p>\n<h4 id=\"管线化的特点\"><a href=\"#管线化的特点\" class=\"headerlink\" title=\"管线化的特点\"></a>管线化的特点</h4><ol>\n<li><p>管线化机制通过持久连接完成，仅HTTP/1.1 支持此技术</p>\n</li>\n<li><p>只有GET和HEAD请求可以进行管线化，而POST则有所限制  </p>\n</li>\n<li><p>初次创建连接时不应启动管线机制，因为对方(服务器)不一定支持HTTP/1.1版本的协议  </p>\n</li>\n<li><p>管线化不会影响响应到来的顺序，如上面的例子所示，响应返回的顺序并未改变</p>\n</li>\n<li><p>HTTP /1.1要求服务器端支持管线化，但并不要求服务器端也对响应进行管线化处理，只是要求对于管线化的请求不失败即可  </p>\n</li>\n<li><p>由于.上面提到的服务器端问题，开启管线化很可能并不会带来大幅度的性能提升，而且很多服务器端和代理程序对管线化的支持并不好，因此现代浏览器如<strong>Chrome和Firefox</strong> 默认并未开启管线化支持</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h2 id=\"HTTP协议\"><a href=\"#HTTP协议\" class=\"headerlink\" title=\"HTTP协议\"></a>HTTP协议</h2><h3 id=\"HTTP协议的主要特点\"><a href=\"#HTTP协议的主要特点\" class=\"headerlink\" title=\"HTTP协议的主要特点\"></a>HTTP协议的主要特点</h3><ol>\n<li>支持客户/服务器模式。</li>\n<li>简单快速：客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有GET、HEAD、POST。每种方法规定了客户与服务器联系的类型不同。<br>由于HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快。</li>\n<li>灵活：HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记。</li>\n<li>无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。</li>\n<li>无状态：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。</li></ol>","more":"\n\n<h3 id=\"HTTP协议报文\"><a href=\"#HTTP协议报文\" class=\"headerlink\" title=\"HTTP协议报文\"></a>HTTP协议报文</h3><h4 id=\"请求报文\"><a href=\"#请求报文\" class=\"headerlink\" title=\"请求报文\"></a>请求报文</h4><h5 id=\"请求行\"><a href=\"#请求行\" class=\"headerlink\" title=\"请求行\"></a>请求行</h5><p>请求行由请求方法字段、URL字段和HTTP协议版本字段3个字段组成，它们用空格分隔。比如 GET /data/info.html HTTP/1.1</p>\n<p>方法字段就是HTTP使用的请求方法，比如常见的GET/POST</p>\n<p>其中HTTP协议版本有两种：HTTP1.0/HTTP1.1 可以这样区别：</p>\n<p>HTTP1.0对于每个连接都只能传送一个请求和响应，请求就会关闭，HTTP1.0没有Host字段;而HTTP1.1在同一个连接中可以传送多个请求和响应，多个请求可以重叠和同时进行，HTTP1.1必须有Host字段。</p>\n<h5 id=\"请求头\"><a href=\"#请求头\" class=\"headerlink\" title=\"请求头\"></a>请求头</h5><p>HTTP客户程序(例如浏览器)，向服务器发送请求的时候必须指明请求类型(一般是GET或者 POST)。如有必要，客户程序还可以选择发送其他的请求头。大多数请求头并不是必需的，但Content-Length除外。对于POST请求来说 Content-Length必须出现。</p>\n<p>常见的请求头字段含义：</p>\n<p>Accept： 浏览器可接受的MIME类型。</p>\n<p>Accept-Charset：浏览器可接受的字符集。</p>\n<p>Accept-Encoding：浏览器能够进行解码的数据编码方式，比如gzip。Servlet能够向支持gzip的浏览器返回经gzip编码的HTML页面。许多情形下这可以减少5到10倍的下载时间。</p>\n<p>Accept-Language：浏览器所希望的语言种类，当服务器能够提供一种以上的语言版本时要用到。</p>\n<p>Authorization：授权信息，通常出现在对服务器发送的WWW-Authenticate头的应答中。</p>\n<p>Content-Length：表示请求消息正文的长度。</p>\n<p>Host： 客户机通过这个头告诉服务器，想访问的主机名。Host头域指定请求资源的Intenet主机和端口号，必须表示请求url的原始服务器或网关的位置。HTTP/1.1请求必须包含主机头域，否则系统会以400状态码返回。</p>\n<p>If-Modified-Since：客户机通过这个头告诉服务器，资源的缓存时间。只有当所请求的内容在指定的时间后又经过修改才返回它，否则返回304“Not Modified”应答。</p>\n<p>Referer：客户机通过这个头告诉服务器，它是从哪个资源来访问服务器的(防盗链)。包含一个URL，用户从该URL代表的页面出发访问当前请求的页面。</p>\n<p>User-Agent：User-Agent头域的内容包含发出请求的用户信息。浏览器类型，如果Servlet返回的内容与浏览器类型有关则该值非常有用。</p>\n<p>Cookie：客户机通过这个头可以向服务器带数据，这是最重要的请求头信息之一。</p>\n<p>Pragma：指定“no-cache”值表示服务器必须返回一个刷新后的文档，即使它是代理服务器而且已经有了页面的本地拷贝。</p>\n<p>From：请求发送者的email地址，由一些特殊的Web客户程序使用，浏览器不会用到它。</p>\n<p>Connection：处理完这次请求后是否断开连接还是继续保持连接。如果Servlet看到这里的值为“Keep- Alive”，或者看到请求使用的是HTTP 1.1(HTTP 1.1默认进行持久连接)，它就可以利用持久连接的优点，当页面包含多个元素时(例如Applet，图片)，显著地减少下载所需要的时间。要实现这一点，Servlet需要在应答中发送一个Content-Length头，最简单的实现方法是：先把内容写入 ByteArrayOutputStream，然后在正式写出内容之前计算它的大小。</p>\n<p>Range：Range头域可以请求实体的一个或者多个子范围。例如，</p>\n<p>表示头500个字节：bytes=0-499</p>\n<p>表示第二个500字节：bytes=500-999</p>\n<p>表示最后500个字节：bytes=-500</p>\n<p>表示500字节以后的范围：bytes=500-</p>\n<p>第一个和最后一个字节：bytes=0-0,-1</p>\n<p>同时指定几个范围：bytes=500-600,601-999</p>\n<p>但是服务器可以忽略此请求头，如果无条件GET包含Range请求头，响应会以状态码206(PartialContent)返回而不是以200 (OK)。</p>\n<p>UA-Pixels，UA-Color，UA-OS，UA-CPU：由某些版本的IE浏览器所发送的非标准的请求头，表示屏幕大小、颜色深度、操作系统和CPU类型。</p>\n<h5 id=\"空行\"><a href=\"#空行\" class=\"headerlink\" title=\"空行\"></a>空行</h5><p>它的作用是通过一个空行，告诉服务器请求头部到此为止。</p>\n<h5 id=\"请求体\"><a href=\"#请求体\" class=\"headerlink\" title=\"请求体\"></a>请求体</h5><p>若方法字段是GET，则此项为空，没有数据</p>\n<p>若方法字段是POST,则通常来说此处放置的就是要提交的数据</p>\n<p>比如要使用POST方法提交一个表单，其中有user字段中数据为“admin”, password字段为123456，那么这里的请求数据就是 user=admin&amp;password=123456，使用&amp;来连接各个字段。</p>\n<p><img src=\"/2020/07/02/HTTP%E5%8D%8F%E8%AE%AE/qingqiuti.png\" alt=\"image\"></p>\n<p><img src=\"/2020/07/02/HTTP%E5%8D%8F%E8%AE%AE/qingqiudemo.jpg\" alt=\"image\"></p>\n<h4 id=\"响应报文\"><a href=\"#响应报文\" class=\"headerlink\" title=\"响应报文\"></a>响应报文</h4><h5 id=\"状态行\"><a href=\"#状态行\" class=\"headerlink\" title=\"状态行\"></a>状态行</h5><p>响应行一般由协议版本、状态码及其描述组成 比如 HTTP/1.1 200 OK</p>\n<p>其中协议版本HTTP/1.1或者HTTP/1.0，200就是它的状态码，OK则为它的描述。</p>\n<p>//常见状态码：</p>\n<p>100~199：表示成功接收请求，要求客户端继续提交下一次请求才能完成整个处理过程。</p>\n<p>200~299：表示成功接收请求并已完成整个处理过程。常用200</p>\n<p>300~399：为完成请求，客户需进一步细化请求。例如：请求的资源已经移动一个新地址、常用302(意味着你请求我，我让你去找别人),307和304(我不给你这个资源，自己拿缓存)</p>\n<p>400~499：客户端的请求有错误，常用404(意味着你请求的资源在web服务器中没有)403(服务器拒绝访问，权限不够)</p>\n<p>500~599：服务器端出现错误，常用500</p>\n<p><a href=\"https://baike.baidu.com/item/HTTP%E7%8A%B6%E6%80%81%E7%A0%81/5053660?fr=aladdin\" target=\"_blank\" rel=\"noopener\">更加详细的状态码</a></p>\n<h5 id=\"响应头\"><a href=\"#响应头\" class=\"headerlink\" title=\"响应头\"></a>响应头</h5><p>响应头用于描述服务器的基本信息，以及数据的描述，服务器通过这些数据的描述信息，可以通知客户端如何处理等一会儿它回送的数据。</p>\n<p>设置HTTP响应头往往和状态码结合起来。例如，有好几个表示“文档位置已经改变”的状态代码都伴随着一个Location头，而401(Unauthorized)状态代码则必须伴随一个WWW-Authenticate头。然而，即使在没有设置特殊含义的状态代码时，指定应答头也是很有用的。应答头可以用来完成：设置Cookie，指定修改日期，指示浏览器按照指定的间隔刷新页面，声明文档的长度以便利用持久HTTP连接，……等等许多其他任务。</p>\n<p>常见的响应头字段含义：</p>\n<p>Allow：服务器支持哪些请求方法(如GET、POST等)。</p>\n<p>Content-Encoding：文档的编码(Encode)方法。只有在解码之后才可以得到Content-Type头指定的内容类型。利用gzip压缩文档能够显著地减少HTML文档的下载时间。Java的GZIPOutputStream可以很方便地进行gzip压缩，但只有Unix上的Netscape和Windows上的IE4、IE5才支持它。因此，Servlet应该通过查看Accept-Encoding头(即request.getHeader(“Accept- Encoding”))检查浏览器是否支持gzip，为支持gzip的浏览器返回经gzip压缩的HTML页面，为其他浏览器返回普通页面。</p>\n<p>Content-Length：表示内容长度。只有当浏览器使用持久HTTP连接时才需要这个数据。如果你想要利用持久连接的优势，可以把输出文档写入 ByteArrayOutputStram，完成后查看其大小，然后把该值放入Content-Length头，最后通过byteArrayStream.writeTo(response.getOutputStream()发送内容。</p>\n<p>Content- Type：表示后面的文档属于什么MIME类型。Servlet默认为text/plain，但通常需要显式地指定为text/html。由于经常要设置 Content-Type，因此HttpServletResponse提供了一个专用的方法setContentType。</p>\n<p>Date：当前的GMT时间，例如，Date:Mon,31Dec200104:25:57GMT。Date描述的时间表示世界标准时，换算成本地时间，需要知道用户所在的时区。你可以用setDateHeader来设置这个头以避免转换时间格式的麻烦。</p>\n<p>Expires：告诉浏览器把回送的资源缓存多长时间，-1或0则是不缓存。</p>\n<p>Last-Modified：文档的最后改动时间。客户可以通过If-Modified-Since请求头提供一个日期，该请求将被视为一个条件GET，只有改动时间迟于指定时间的文档才会返回，否则返回一个304(Not Modified)状态。Last-Modified也可用setDateHeader方法来设置。</p>\n<p>Location：这个头配合302状态码使用，用于重定向接收者到一个新URI地址。表示客户应当到哪里去提取文档。Location通常不是直接设置的，而是通过HttpServletResponse的sendRedirect方法，该方法同时设置状态代码为302。</p>\n<p>Refresh：告诉浏览器隔多久刷新一次，以秒计。</p>\n<p>Server：服务器通过这个头告诉浏览器服务器的类型。Server响应头包含处理请求的原始服务器的软件信息。此域能包含多个产品标识和注释，产品标识一般按照重要性排序。Servlet一般不设置这个值，而是由Web服务器自己设置。</p>\n<p>Set-Cookie：设置和页面关联的Cookie。Servlet不应使用response.setHeader(“Set-Cookie”, …)，而是应使用HttpServletResponse提供的专用方法addCookie。</p>\n<p>Transfer-Encoding：告诉浏览器数据的传送格式。</p>\n<p>WWW-Authenticate：客户应该在Authorization头中提供什么类型的授权信息?在包含401(Unauthorized)状态行的应答中这个头是必需的。例如，response.setHeader(“WWW-Authenticate”, “BASIC realm=\\”executives\\”“)。注意Servlet一般不进行这方面的处理，而是让Web服务器的专门机制来控制受密码保护页面的访问。</p>\n<p>注：设置应答头最常用的方法是HttpServletResponse的setHeader，该方法有两个参数，分别表示应答头的名字和值。和设置状态代码相似，设置应答头应该在发送任何文档内容之前进行。</p>\n<p>setDateHeader方法和setIntHeadr方法专门用来设置包含日期和整数值的应答头，前者避免了把Java时间转换为GMT时间字符串的麻烦，后者则避免了把整数转换为字符串的麻烦。</p>\n<p>HttpServletResponse还提供了许多设置</p>\n<p>setContentType：设置Content-Type头。大多数Servlet都要用到这个方法。</p>\n<p>setContentLength：设置Content-Length头。对于支持持久HTTP连接的浏览器来说，这个函数是很有用的。</p>\n<p>addCookie：设置一个Cookie(Servlet API中没有setCookie方法，因为应答往往包含多个Set-Cookie头)。</p>\n<h5 id=\"空行-1\"><a href=\"#空行-1\" class=\"headerlink\" title=\"空行\"></a>空行</h5><p>它的作用是通过一个空行，告诉服务器请求头部到此为止。</p>\n<h5 id=\"响应体\"><a href=\"#响应体\" class=\"headerlink\" title=\"响应体\"></a>响应体</h5><p>响应体就是响应的消息体，如果是纯数据就是返回纯数据，如果请求的是HTML页面，那么返回的就是HTML代码，如果是JS就是JS代码，如此之类。</p>\n<p><img src=\"/2020/07/02/HTTP%E5%8D%8F%E8%AE%AE/xiangying.jpg\" alt=\"image\"></p>\n<h3 id=\"HTTP方法\"><a href=\"#HTTP方法\" class=\"headerlink\" title=\"HTTP方法\"></a>HTTP方法</h3><ol>\n<li>GET：获取资源</li>\n<li>POST：传输资源</li>\n<li>PUT：更新资源</li>\n<li>DELETE：删除资源</li>\n<li>HEAD：获取报文首部</li>\n</ol>\n<h3 id=\"POST请求和GET请求的区别\"><a href=\"#POST请求和GET请求的区别\" class=\"headerlink\" title=\"POST请求和GET请求的区别\"></a>POST请求和GET请求的区别</h3><ul>\n<li>GET在浏览器回退时是无害的，而POST会再次提交请求。</li>\n<li>GET产生的URL地址可以被收藏，而POST不可以。</li>\n<li>GET请求会被浏览器主动缓存，而POST不会，除非手动设置。</li>\n<li>GET请求只能进行url编码，而POST支持多种编码方式。</li>\n<li>GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。</li>\n<li>GET请求在URL中传送的参数是有长度限制的，而POST没有。</li>\n<li>对参数的数据类型，GET只接受ASCII字符，而POST没有限制。</li>\n<li>GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。</li>\n<li>GET参数通过URL传递，POST放在Request body中。</li>\n</ul>\n<h3 id=\"HTTP连接\"><a href=\"#HTTP连接\" class=\"headerlink\" title=\"HTTP连接\"></a>HTTP连接</h3><h4 id=\"HTTP持久连接\"><a href=\"#HTTP持久连接\" class=\"headerlink\" title=\"HTTP持久连接\"></a>HTTP持久连接</h4><p>HTTP协议采用“请求-应答”模式，当使用普通模式，即非Keep-Alive模式时，每个请求/应答客户和服务器都要新建一个连接，完成后立即断开连接（HTTP协议为无连接的协议。</p>\n<p>当使用Keep-Alive模式（又称持久连接，连接重用）时，Keep-Alive功能使客户端到服务器端的连接持续有效，当出现服务器的后继请求时，Keep-Alive功能避免了建立或者重新建立连接。</p>\n<p><strong>只有http1.1开始支持持久连接</strong></p>\n<h4 id=\"管线化\"><a href=\"#管线化\" class=\"headerlink\" title=\"管线化\"></a>管线化</h4><p>在使用持久连接的情况下，某个连接上的消息传递是这样的：<br>请求1-&gt;响应1-&gt;请求2-&gt;响应2-&gt;请求3-&gt;响应3</p>\n<p>管线化，则消息的传递变成这样：<br>请求1-&gt;请求2-&gt;请求3-&gt;响应1-&gt;响应2-&gt;响应3</p>\n<h4 id=\"管线化的特点\"><a href=\"#管线化的特点\" class=\"headerlink\" title=\"管线化的特点\"></a>管线化的特点</h4><ol>\n<li><p>管线化机制通过持久连接完成，仅HTTP/1.1 支持此技术</p>\n</li>\n<li><p>只有GET和HEAD请求可以进行管线化，而POST则有所限制  </p>\n</li>\n<li><p>初次创建连接时不应启动管线机制，因为对方(服务器)不一定支持HTTP/1.1版本的协议  </p>\n</li>\n<li><p>管线化不会影响响应到来的顺序，如上面的例子所示，响应返回的顺序并未改变</p>\n</li>\n<li><p>HTTP /1.1要求服务器端支持管线化，但并不要求服务器端也对响应进行管线化处理，只是要求对于管线化的请求不失败即可  </p>\n</li>\n<li><p>由于.上面提到的服务器端问题，开启管线化很可能并不会带来大幅度的性能提升，而且很多服务器端和代理程序对管线化的支持并不好，因此现代浏览器如<strong>Chrome和Firefox</strong> 默认并未开启管线化支持</p>\n</li>\n</ol>"},{"layout":"[post]","title":"css之BFC","date":"2019-05-03T10:36:09.000Z","_content":"## BFC定义\n**BFC(Block formatting context)直译为\"块级格式化上下文\"。它是一个独立的渲染区域，只有Block-level box参与， 它规定了内部的Block-level Box如何布局，并且与这个区域外部毫不相干。**\n<!-- more -->\n### Box：css布局的基本单位\nBox 是 CSS 布局的对象和基本单位， 直观点来说，就是一个页面是由很多个 Box 组成的。元素的类型和 display 属性，决定了这个 Box 的类型。 不同类型的 Box， 会参与不同的 Formatting Context（一个决定如何渲染文档的容器），因此Box内的元素会以不同的方式渲染。让我们看看有哪些盒子：\n\n- block-level box:display 属性为 block, list-item, table 的元素，会生成 block-level box。并且参与 block fomatting context；\n- inline-level box:display 属性为 inline, inline-block, inline-table 的元素，会生成 inline-level box。并且参与 inline formatting context；\n- run-in box: css3\n\n### Formatting Context\nFormatting context 是 W3C CSS2.1 规范中的一个概念。它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。最常见的 Formatting context 有 Block fomatting context (简称BFC)和 Inline formatting context (简称IFC)。\n> BFC是一个独立的布局环境，其中的元素布局是不受外界的影响，并且在一个BFC中，块盒与行盒（行盒由一行中所有的内联元素所组成）都会垂直的沿着其父元素的边框排列。\n\n## BFC的布局规则\n1. 内部的Box会在垂直方向，一个接一个地放置。\n2. Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠。\n3. 每个盒子（块盒与行盒）的margin box的左边，与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。\n4. BFC的区域不会与float box重叠。\n5. BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。\n6. 计算BFC的高度时，浮动元素也参与计算。\n## 如何创建BFC\n1. float的值不是none。\n2. position的值不是static或者relative。\n3. display的值是inline-block、table-cell、flex、table-caption或者inline-flex\n4. overflow的值不是visible\n\n## BFC的作用\n1. 利用BFC避免margin重叠。\n2. 自适应两栏布局。\n3. 清除浮动。\n\n## 总结\n> BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。\n\n因为BFC内部的元素和外部的元素绝对不会互相影响，因此， 当BFC外部存在浮动时，它不应该影响BFC内部Box的布局，BFC会通过变窄，而不与浮动有重叠。同样的，当BFC内部有浮动时，为了不影响外部元素的布局，BFC计算高度时会包括浮动的高度。避免margin重叠也是这样的一个道理。\n\n## 代码展示\n### 在无BFC时候\n\n```html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\" />\n\t\t<title>css盒子模型</title>\n\t\t<style media=\"screen\">\n\t\t\thtml * {\n\t\t\t\tmargin: 0;\n\t\t\t\tpadding: 0;\n\t\t\t}\n\t\t</style>\n\t</head>\n\n\t<body>\n\t\t<!-- <section id=\"sec\">\n\t\t\t<style media=\"screen\">\n\t\t\t\t#sec {\n\t\t\t\t\tbackground: #f00;\n\t\t\t\t\t/* overflow: hidden; */\n\t\t\t\t}\n\t\t\t\t.child {\n\t\t\t\t\theight: 100px;\n\t\t\t\t\tmargin-top: 10px;\n\t\t\t\t\tbackground: yellow;\n\t\t\t\t}\n\t\t\t</style>\n\t\t\t<article class=\"child\"></article>\n        </section> -->\n\t\t<section id=\"margin\">\n\t\t\t<style>\n\t\t\t\t#margin {\n\t\t\t\t\tbackground: pink;\n\t\t\t\t\toverflow: hidden;\n\t\t\t\t}\n\t\t\t\t#margin > p {\n\t\t\t\t\tmargin: 5px auto 25px;\n\t\t\t\t\tbackground: blue;\n\t\t\t\t}\n\t\t\t</style>\n\t\t\t<p>1</p>\n\t\t\t<p>2</p>\n\t\t\t<p>3</p>\n\t\t</section>\n\t</body>\n</html>\n\n```\n![yasuo](wubfc.png)\n\n### 使用BFC\n\n```html\n<section id=\"margin\">\n\t\t\t<style>\n\t\t\t\t#margin {\n\t\t\t\t\tbackground: pink;\n\t\t\t\t\toverflow: hidden;\n\t\t\t\t}\n\t\t\t\t#margin > p {\n\t\t\t\t\tmargin: 5px auto 25px;\n\t\t\t\t\tbackground: blue;\n\t\t\t\t}\n\t\t\t</style>\n\t\t\t<p>1</p>\n\t\t\t<div style=\"overflow: hidden;\">\n                <p>2</p>\n            </div>\n\t\t\t<p>3</p>\n\t\t</section>\n```\n![yasuo](bfc.png)\n\n### 不与float重叠\n\n```html\n  <section id=\"layout\">\n            <style media\"screen\">\n                #layout{\n                    background: red;\n                }\n                #layout .left{\n                    float: left;\n                    width: 100px;\n                    height: 100px;\n                    background: pink;\n                }\n                #layout .right{\n                    height: 110px;\n                    background: blue;\n                    overflow: auto;\n                }\n            </style>\n            <div class=\"left\"></div>\n            <div class=\"right\"></div>\n        </section>\n```\n![yasuo](margin.png)\n\n### 清除浮动\n\n```html\n <!-- BFC子元素即使是float，也会参与高度计算 -->\n        <section id=\"float\">\n            <style media=\"screen\">\n                #float{\n                    background: red;\n                    overflow: hidden;\n                }\n                #float .float{\n                    float: left;\n                    font-size: 20px;\n                }\n            </style>\n            <div class=\"float\">\n                我是浮动元素\n            </div>\n        </section>\n```\n![yasuo](float.png)\n\n\n","source":"_posts/css之BFC.md","raw":"---\nlayout: '[post]'\ntitle: css之BFC\ndate: 2019-05-03 18:36:09\ntags: css\n---\n## BFC定义\n**BFC(Block formatting context)直译为\"块级格式化上下文\"。它是一个独立的渲染区域，只有Block-level box参与， 它规定了内部的Block-level Box如何布局，并且与这个区域外部毫不相干。**\n<!-- more -->\n### Box：css布局的基本单位\nBox 是 CSS 布局的对象和基本单位， 直观点来说，就是一个页面是由很多个 Box 组成的。元素的类型和 display 属性，决定了这个 Box 的类型。 不同类型的 Box， 会参与不同的 Formatting Context（一个决定如何渲染文档的容器），因此Box内的元素会以不同的方式渲染。让我们看看有哪些盒子：\n\n- block-level box:display 属性为 block, list-item, table 的元素，会生成 block-level box。并且参与 block fomatting context；\n- inline-level box:display 属性为 inline, inline-block, inline-table 的元素，会生成 inline-level box。并且参与 inline formatting context；\n- run-in box: css3\n\n### Formatting Context\nFormatting context 是 W3C CSS2.1 规范中的一个概念。它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。最常见的 Formatting context 有 Block fomatting context (简称BFC)和 Inline formatting context (简称IFC)。\n> BFC是一个独立的布局环境，其中的元素布局是不受外界的影响，并且在一个BFC中，块盒与行盒（行盒由一行中所有的内联元素所组成）都会垂直的沿着其父元素的边框排列。\n\n## BFC的布局规则\n1. 内部的Box会在垂直方向，一个接一个地放置。\n2. Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠。\n3. 每个盒子（块盒与行盒）的margin box的左边，与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。\n4. BFC的区域不会与float box重叠。\n5. BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。\n6. 计算BFC的高度时，浮动元素也参与计算。\n## 如何创建BFC\n1. float的值不是none。\n2. position的值不是static或者relative。\n3. display的值是inline-block、table-cell、flex、table-caption或者inline-flex\n4. overflow的值不是visible\n\n## BFC的作用\n1. 利用BFC避免margin重叠。\n2. 自适应两栏布局。\n3. 清除浮动。\n\n## 总结\n> BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。\n\n因为BFC内部的元素和外部的元素绝对不会互相影响，因此， 当BFC外部存在浮动时，它不应该影响BFC内部Box的布局，BFC会通过变窄，而不与浮动有重叠。同样的，当BFC内部有浮动时，为了不影响外部元素的布局，BFC计算高度时会包括浮动的高度。避免margin重叠也是这样的一个道理。\n\n## 代码展示\n### 在无BFC时候\n\n```html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\" />\n\t\t<title>css盒子模型</title>\n\t\t<style media=\"screen\">\n\t\t\thtml * {\n\t\t\t\tmargin: 0;\n\t\t\t\tpadding: 0;\n\t\t\t}\n\t\t</style>\n\t</head>\n\n\t<body>\n\t\t<!-- <section id=\"sec\">\n\t\t\t<style media=\"screen\">\n\t\t\t\t#sec {\n\t\t\t\t\tbackground: #f00;\n\t\t\t\t\t/* overflow: hidden; */\n\t\t\t\t}\n\t\t\t\t.child {\n\t\t\t\t\theight: 100px;\n\t\t\t\t\tmargin-top: 10px;\n\t\t\t\t\tbackground: yellow;\n\t\t\t\t}\n\t\t\t</style>\n\t\t\t<article class=\"child\"></article>\n        </section> -->\n\t\t<section id=\"margin\">\n\t\t\t<style>\n\t\t\t\t#margin {\n\t\t\t\t\tbackground: pink;\n\t\t\t\t\toverflow: hidden;\n\t\t\t\t}\n\t\t\t\t#margin > p {\n\t\t\t\t\tmargin: 5px auto 25px;\n\t\t\t\t\tbackground: blue;\n\t\t\t\t}\n\t\t\t</style>\n\t\t\t<p>1</p>\n\t\t\t<p>2</p>\n\t\t\t<p>3</p>\n\t\t</section>\n\t</body>\n</html>\n\n```\n![yasuo](wubfc.png)\n\n### 使用BFC\n\n```html\n<section id=\"margin\">\n\t\t\t<style>\n\t\t\t\t#margin {\n\t\t\t\t\tbackground: pink;\n\t\t\t\t\toverflow: hidden;\n\t\t\t\t}\n\t\t\t\t#margin > p {\n\t\t\t\t\tmargin: 5px auto 25px;\n\t\t\t\t\tbackground: blue;\n\t\t\t\t}\n\t\t\t</style>\n\t\t\t<p>1</p>\n\t\t\t<div style=\"overflow: hidden;\">\n                <p>2</p>\n            </div>\n\t\t\t<p>3</p>\n\t\t</section>\n```\n![yasuo](bfc.png)\n\n### 不与float重叠\n\n```html\n  <section id=\"layout\">\n            <style media\"screen\">\n                #layout{\n                    background: red;\n                }\n                #layout .left{\n                    float: left;\n                    width: 100px;\n                    height: 100px;\n                    background: pink;\n                }\n                #layout .right{\n                    height: 110px;\n                    background: blue;\n                    overflow: auto;\n                }\n            </style>\n            <div class=\"left\"></div>\n            <div class=\"right\"></div>\n        </section>\n```\n![yasuo](margin.png)\n\n### 清除浮动\n\n```html\n <!-- BFC子元素即使是float，也会参与高度计算 -->\n        <section id=\"float\">\n            <style media=\"screen\">\n                #float{\n                    background: red;\n                    overflow: hidden;\n                }\n                #float .float{\n                    float: left;\n                    font-size: 20px;\n                }\n            </style>\n            <div class=\"float\">\n                我是浮动元素\n            </div>\n        </section>\n```\n![yasuo](float.png)\n\n\n","slug":"css之BFC","published":1,"updated":"2020-03-04T11:25:43.000Z","comments":1,"photos":[],"link":"","_id":"ck7onzqx70009yts69jfyfltk","content":"<h2 id=\"BFC定义\"><a href=\"#BFC定义\" class=\"headerlink\" title=\"BFC定义\"></a>BFC定义</h2><p><strong>BFC(Block formatting context)直译为”块级格式化上下文”。它是一个独立的渲染区域，只有Block-level box参与， 它规定了内部的Block-level Box如何布局，并且与这个区域外部毫不相干。</strong></p>\n<a id=\"more\"></a>\n<h3 id=\"Box：css布局的基本单位\"><a href=\"#Box：css布局的基本单位\" class=\"headerlink\" title=\"Box：css布局的基本单位\"></a>Box：css布局的基本单位</h3><p>Box 是 CSS 布局的对象和基本单位， 直观点来说，就是一个页面是由很多个 Box 组成的。元素的类型和 display 属性，决定了这个 Box 的类型。 不同类型的 Box， 会参与不同的 Formatting Context（一个决定如何渲染文档的容器），因此Box内的元素会以不同的方式渲染。让我们看看有哪些盒子：</p>\n<ul>\n<li>block-level box:display 属性为 block, list-item, table 的元素，会生成 block-level box。并且参与 block fomatting context；</li>\n<li>inline-level box:display 属性为 inline, inline-block, inline-table 的元素，会生成 inline-level box。并且参与 inline formatting context；</li>\n<li>run-in box: css3</li>\n</ul>\n<h3 id=\"Formatting-Context\"><a href=\"#Formatting-Context\" class=\"headerlink\" title=\"Formatting Context\"></a>Formatting Context</h3><p>Formatting context 是 W3C CSS2.1 规范中的一个概念。它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。最常见的 Formatting context 有 Block fomatting context (简称BFC)和 Inline formatting context (简称IFC)。</p>\n<blockquote>\n<p>BFC是一个独立的布局环境，其中的元素布局是不受外界的影响，并且在一个BFC中，块盒与行盒（行盒由一行中所有的内联元素所组成）都会垂直的沿着其父元素的边框排列。</p>\n</blockquote>\n<h2 id=\"BFC的布局规则\"><a href=\"#BFC的布局规则\" class=\"headerlink\" title=\"BFC的布局规则\"></a>BFC的布局规则</h2><ol>\n<li>内部的Box会在垂直方向，一个接一个地放置。</li>\n<li>Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠。</li>\n<li>每个盒子（块盒与行盒）的margin box的左边，与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。</li>\n<li>BFC的区域不会与float box重叠。</li>\n<li>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</li>\n<li>计算BFC的高度时，浮动元素也参与计算。<h2 id=\"如何创建BFC\"><a href=\"#如何创建BFC\" class=\"headerlink\" title=\"如何创建BFC\"></a>如何创建BFC</h2></li>\n<li>float的值不是none。</li>\n<li>position的值不是static或者relative。</li>\n<li>display的值是inline-block、table-cell、flex、table-caption或者inline-flex</li>\n<li>overflow的值不是visible</li>\n</ol>\n<h2 id=\"BFC的作用\"><a href=\"#BFC的作用\" class=\"headerlink\" title=\"BFC的作用\"></a>BFC的作用</h2><ol>\n<li>利用BFC避免margin重叠。</li>\n<li>自适应两栏布局。</li>\n<li>清除浮动。</li>\n</ol>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><blockquote>\n<p>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</p>\n</blockquote>\n<p>因为BFC内部的元素和外部的元素绝对不会互相影响，因此， 当BFC外部存在浮动时，它不应该影响BFC内部Box的布局，BFC会通过变窄，而不与浮动有重叠。同样的，当BFC内部有浮动时，为了不影响外部元素的布局，BFC计算高度时会包括浮动的高度。避免margin重叠也是这样的一个道理。</p>\n<h2 id=\"代码展示\"><a href=\"#代码展示\" class=\"headerlink\" title=\"代码展示\"></a>代码展示</h2><h3 id=\"在无BFC时候\"><a href=\"#在无BFC时候\" class=\"headerlink\" title=\"在无BFC时候\"></a>在无BFC时候</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>css盒子模型<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">media</span>=<span class=\"string\">\"screen\"</span>&gt;</span></span><br><span class=\"line\">\t\t\thtml * &#123;</span><br><span class=\"line\">\t\t\t\tmargin: 0;</span><br><span class=\"line\">\t\t\t\tpadding: 0;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- &lt;section id=\"sec\"&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t&lt;style media=\"screen\"&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t#sec &#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\tbackground: #f00;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\t/* overflow: hidden; */</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t.child &#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\theight: 100px;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\tmargin-top: 10px;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\tbackground: yellow;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t&lt;/style&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t&lt;article class=\"child\"&gt;&lt;/article&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;/section&gt; --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">id</span>=<span class=\"string\">\"margin\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t\t<span class=\"selector-id\">#margin</span> &#123;</span></span><br><span class=\"line\">\t\t\t\t\tbackground: pink;</span><br><span class=\"line\">\t\t\t\t\toverflow: hidden;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\"><span class=\"css\">\t\t\t\t<span class=\"selector-id\">#margin</span> &gt; <span class=\"selector-tag\">p</span> &#123;</span></span><br><span class=\"line\">\t\t\t\t\tmargin: 5px auto 25px;</span><br><span class=\"line\">\t\t\t\t\tbackground: blue;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/05/03/css%E4%B9%8BBFC/wubfc.png\" alt=\"yasuo\"></p>\n<h3 id=\"使用BFC\"><a href=\"#使用BFC\" class=\"headerlink\" title=\"使用BFC\"></a>使用BFC</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">id</span>=<span class=\"string\">\"margin\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t\t<span class=\"selector-id\">#margin</span> &#123;</span></span><br><span class=\"line\">\t\t\t\t\tbackground: pink;</span><br><span class=\"line\">\t\t\t\t\toverflow: hidden;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\"><span class=\"css\">\t\t\t\t<span class=\"selector-id\">#margin</span> &gt; <span class=\"selector-tag\">p</span> &#123;</span></span><br><span class=\"line\">\t\t\t\t\tmargin: 5px auto 25px;</span><br><span class=\"line\">\t\t\t\t\tbackground: blue;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"overflow: hidden;\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/05/03/css%E4%B9%8BBFC/bfc.png\" alt=\"yasuo\"></p>\n<h3 id=\"不与float重叠\"><a href=\"#不与float重叠\" class=\"headerlink\" title=\"不与float重叠\"></a>不与float重叠</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">id</span>=<span class=\"string\">\"layout\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">media</span>\"<span class=\"attr\">screen</span>\"&gt;</span></span><br><span class=\"line\"><span class=\"css\">              <span class=\"selector-id\">#layout</span>&#123;</span></span><br><span class=\"line\">                  background: red;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\"><span class=\"css\">              <span class=\"selector-id\">#layout</span> <span class=\"selector-class\">.left</span>&#123;</span></span><br><span class=\"line\">                  float: left;</span><br><span class=\"line\">                  width: 100px;</span><br><span class=\"line\">                  height: 100px;</span><br><span class=\"line\">                  background: pink;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\"><span class=\"css\">              <span class=\"selector-id\">#layout</span> <span class=\"selector-class\">.right</span>&#123;</span></span><br><span class=\"line\">                  height: 110px;</span><br><span class=\"line\">                  background: blue;</span><br><span class=\"line\">                  overflow: auto;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/05/03/css%E4%B9%8BBFC/margin.png\" alt=\"yasuo\"></p>\n<h3 id=\"清除浮动\"><a href=\"#清除浮动\" class=\"headerlink\" title=\"清除浮动\"></a>清除浮动</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- BFC子元素即使是float，也会参与高度计算 --&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">id</span>=<span class=\"string\">\"float\"</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">media</span>=<span class=\"string\">\"screen\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">               <span class=\"selector-id\">#float</span>&#123;</span></span><br><span class=\"line\">                   background: red;</span><br><span class=\"line\">                   overflow: hidden;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\"><span class=\"css\">               <span class=\"selector-id\">#float</span> <span class=\"selector-class\">.float</span>&#123;</span></span><br><span class=\"line\">                   float: left;</span><br><span class=\"line\">                   font-size: 20px;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"float\"</span>&gt;</span></span><br><span class=\"line\">               我是浮动元素</span><br><span class=\"line\">           <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/05/03/css%E4%B9%8BBFC/float.png\" alt=\"yasuo\"></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"BFC定义\"><a href=\"#BFC定义\" class=\"headerlink\" title=\"BFC定义\"></a>BFC定义</h2><p><strong>BFC(Block formatting context)直译为”块级格式化上下文”。它是一个独立的渲染区域，只有Block-level box参与， 它规定了内部的Block-level Box如何布局，并且与这个区域外部毫不相干。</strong></p>","more":"<h3 id=\"Box：css布局的基本单位\"><a href=\"#Box：css布局的基本单位\" class=\"headerlink\" title=\"Box：css布局的基本单位\"></a>Box：css布局的基本单位</h3><p>Box 是 CSS 布局的对象和基本单位， 直观点来说，就是一个页面是由很多个 Box 组成的。元素的类型和 display 属性，决定了这个 Box 的类型。 不同类型的 Box， 会参与不同的 Formatting Context（一个决定如何渲染文档的容器），因此Box内的元素会以不同的方式渲染。让我们看看有哪些盒子：</p>\n<ul>\n<li>block-level box:display 属性为 block, list-item, table 的元素，会生成 block-level box。并且参与 block fomatting context；</li>\n<li>inline-level box:display 属性为 inline, inline-block, inline-table 的元素，会生成 inline-level box。并且参与 inline formatting context；</li>\n<li>run-in box: css3</li>\n</ul>\n<h3 id=\"Formatting-Context\"><a href=\"#Formatting-Context\" class=\"headerlink\" title=\"Formatting Context\"></a>Formatting Context</h3><p>Formatting context 是 W3C CSS2.1 规范中的一个概念。它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。最常见的 Formatting context 有 Block fomatting context (简称BFC)和 Inline formatting context (简称IFC)。</p>\n<blockquote>\n<p>BFC是一个独立的布局环境，其中的元素布局是不受外界的影响，并且在一个BFC中，块盒与行盒（行盒由一行中所有的内联元素所组成）都会垂直的沿着其父元素的边框排列。</p>\n</blockquote>\n<h2 id=\"BFC的布局规则\"><a href=\"#BFC的布局规则\" class=\"headerlink\" title=\"BFC的布局规则\"></a>BFC的布局规则</h2><ol>\n<li>内部的Box会在垂直方向，一个接一个地放置。</li>\n<li>Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠。</li>\n<li>每个盒子（块盒与行盒）的margin box的左边，与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。</li>\n<li>BFC的区域不会与float box重叠。</li>\n<li>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</li>\n<li>计算BFC的高度时，浮动元素也参与计算。<h2 id=\"如何创建BFC\"><a href=\"#如何创建BFC\" class=\"headerlink\" title=\"如何创建BFC\"></a>如何创建BFC</h2></li>\n<li>float的值不是none。</li>\n<li>position的值不是static或者relative。</li>\n<li>display的值是inline-block、table-cell、flex、table-caption或者inline-flex</li>\n<li>overflow的值不是visible</li>\n</ol>\n<h2 id=\"BFC的作用\"><a href=\"#BFC的作用\" class=\"headerlink\" title=\"BFC的作用\"></a>BFC的作用</h2><ol>\n<li>利用BFC避免margin重叠。</li>\n<li>自适应两栏布局。</li>\n<li>清除浮动。</li>\n</ol>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><blockquote>\n<p>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</p>\n</blockquote>\n<p>因为BFC内部的元素和外部的元素绝对不会互相影响，因此， 当BFC外部存在浮动时，它不应该影响BFC内部Box的布局，BFC会通过变窄，而不与浮动有重叠。同样的，当BFC内部有浮动时，为了不影响外部元素的布局，BFC计算高度时会包括浮动的高度。避免margin重叠也是这样的一个道理。</p>\n<h2 id=\"代码展示\"><a href=\"#代码展示\" class=\"headerlink\" title=\"代码展示\"></a>代码展示</h2><h3 id=\"在无BFC时候\"><a href=\"#在无BFC时候\" class=\"headerlink\" title=\"在无BFC时候\"></a>在无BFC时候</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>css盒子模型<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">media</span>=<span class=\"string\">\"screen\"</span>&gt;</span></span><br><span class=\"line\">\t\t\thtml * &#123;</span><br><span class=\"line\">\t\t\t\tmargin: 0;</span><br><span class=\"line\">\t\t\t\tpadding: 0;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- &lt;section id=\"sec\"&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t&lt;style media=\"screen\"&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t#sec &#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\tbackground: #f00;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\t/* overflow: hidden; */</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t.child &#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\theight: 100px;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\tmargin-top: 10px;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\tbackground: yellow;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t&lt;/style&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t&lt;article class=\"child\"&gt;&lt;/article&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;/section&gt; --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">id</span>=<span class=\"string\">\"margin\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t\t<span class=\"selector-id\">#margin</span> &#123;</span></span><br><span class=\"line\">\t\t\t\t\tbackground: pink;</span><br><span class=\"line\">\t\t\t\t\toverflow: hidden;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\"><span class=\"css\">\t\t\t\t<span class=\"selector-id\">#margin</span> &gt; <span class=\"selector-tag\">p</span> &#123;</span></span><br><span class=\"line\">\t\t\t\t\tmargin: 5px auto 25px;</span><br><span class=\"line\">\t\t\t\t\tbackground: blue;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/05/03/css%E4%B9%8BBFC/wubfc.png\" alt=\"yasuo\"></p>\n<h3 id=\"使用BFC\"><a href=\"#使用BFC\" class=\"headerlink\" title=\"使用BFC\"></a>使用BFC</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">id</span>=<span class=\"string\">\"margin\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t\t<span class=\"selector-id\">#margin</span> &#123;</span></span><br><span class=\"line\">\t\t\t\t\tbackground: pink;</span><br><span class=\"line\">\t\t\t\t\toverflow: hidden;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\"><span class=\"css\">\t\t\t\t<span class=\"selector-id\">#margin</span> &gt; <span class=\"selector-tag\">p</span> &#123;</span></span><br><span class=\"line\">\t\t\t\t\tmargin: 5px auto 25px;</span><br><span class=\"line\">\t\t\t\t\tbackground: blue;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"overflow: hidden;\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/05/03/css%E4%B9%8BBFC/bfc.png\" alt=\"yasuo\"></p>\n<h3 id=\"不与float重叠\"><a href=\"#不与float重叠\" class=\"headerlink\" title=\"不与float重叠\"></a>不与float重叠</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">id</span>=<span class=\"string\">\"layout\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">media</span>\"<span class=\"attr\">screen</span>\"&gt;</span></span><br><span class=\"line\"><span class=\"css\">              <span class=\"selector-id\">#layout</span>&#123;</span></span><br><span class=\"line\">                  background: red;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\"><span class=\"css\">              <span class=\"selector-id\">#layout</span> <span class=\"selector-class\">.left</span>&#123;</span></span><br><span class=\"line\">                  float: left;</span><br><span class=\"line\">                  width: 100px;</span><br><span class=\"line\">                  height: 100px;</span><br><span class=\"line\">                  background: pink;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\"><span class=\"css\">              <span class=\"selector-id\">#layout</span> <span class=\"selector-class\">.right</span>&#123;</span></span><br><span class=\"line\">                  height: 110px;</span><br><span class=\"line\">                  background: blue;</span><br><span class=\"line\">                  overflow: auto;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/05/03/css%E4%B9%8BBFC/margin.png\" alt=\"yasuo\"></p>\n<h3 id=\"清除浮动\"><a href=\"#清除浮动\" class=\"headerlink\" title=\"清除浮动\"></a>清除浮动</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- BFC子元素即使是float，也会参与高度计算 --&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">id</span>=<span class=\"string\">\"float\"</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">media</span>=<span class=\"string\">\"screen\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">               <span class=\"selector-id\">#float</span>&#123;</span></span><br><span class=\"line\">                   background: red;</span><br><span class=\"line\">                   overflow: hidden;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\"><span class=\"css\">               <span class=\"selector-id\">#float</span> <span class=\"selector-class\">.float</span>&#123;</span></span><br><span class=\"line\">                   float: left;</span><br><span class=\"line\">                   font-size: 20px;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"float\"</span>&gt;</span></span><br><span class=\"line\">               我是浮动元素</span><br><span class=\"line\">           <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/05/03/css%E4%B9%8BBFC/float.png\" alt=\"yasuo\"></p>"},{"layout":"[post]","title":"css盒子模型","date":"2019-05-01T02:15:02.000Z","_content":"\n## css 盒子模型\n\ncss 盒子模型包含标准模型和 IE 模型\n\n<!-- more -->\n\n### 标准模型\n\n![yasuo](biaozhun.jpg)\n\n#### 盒子的组成\n\n一个盒子由外到内可以分成四个部分：margin（外边距）、border（边框）、padding（内边距）、content（内容）。会发现 margin、border、padding 是 CSS 属性，因此可以通过这三个属性来控制盒子的这三个部分。而 content 则是 HTML 元素的内容。\n\n#### 盒子的大小\n\n```\n盒子的宽度 = width + padding-left + padding-right + border-left + border-right + margin-left + margin-right\n\n盒子的高度 = height + padding-top + padding-bottom + border-top + border-bottom + margin-top + margin-bottom\n```\n\n### IE 模型\n\n![yasuo](ie.jpg)\n\n### 用 css 如何设置两种模型\n\n标准模型：box-sizing:content-box\nie 模型：box-sizing:border-box\n\n### JS 获取盒子模型的宽高\n\n```\ndom.style.width/height(只能获取内嵌)\ndom.currentStyle.width/height（只有IE支持）\nwindow.getComputedStyle(dom).width/height(火狐谷歌)\ndom.getBoundClientRect().width/height (获取展示dom的位置的方法)\n```\n\n### 边距重叠\n\n#### 父子元素边距重叠\n\n```html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\" />\n\t\t<title>css盒子模型</title>\n\t\t<style media=\"screen\">\n\t\t\thtml * {\n\t\t\t\tmargin: 0;\n\t\t\t\tpadding: 0;\n\t\t\t}\n\t\t</style>\n\t</head>\n\n\t<body>\n\t\t<section id=\"sec\">\n\t\t\t<style media=\"screen\">\n\t\t\t\t#sec {\n\t\t\t\t\tbackground: #f00;\n\t\t\t\t\t/* overflow: hidden; */\n\t\t\t\t}\n\t\t\t\t.child {\n\t\t\t\t\theight: 100px;\n\t\t\t\t\tmargin-top: 10px;\n\t\t\t\t\tbackground: yellow;\n\t\t\t\t}\n\t\t\t</style>\n\t\t\t<article class=\"child\"></article>\n\t\t</section>\n\t</body>\n</html>\n```\n","source":"_posts/css盒子模型.md","raw":"---\nlayout: '[post]'\ntitle: css盒子模型\ndate: 2019-05-01 10:15:02\ntags: css\n---\n\n## css 盒子模型\n\ncss 盒子模型包含标准模型和 IE 模型\n\n<!-- more -->\n\n### 标准模型\n\n![yasuo](biaozhun.jpg)\n\n#### 盒子的组成\n\n一个盒子由外到内可以分成四个部分：margin（外边距）、border（边框）、padding（内边距）、content（内容）。会发现 margin、border、padding 是 CSS 属性，因此可以通过这三个属性来控制盒子的这三个部分。而 content 则是 HTML 元素的内容。\n\n#### 盒子的大小\n\n```\n盒子的宽度 = width + padding-left + padding-right + border-left + border-right + margin-left + margin-right\n\n盒子的高度 = height + padding-top + padding-bottom + border-top + border-bottom + margin-top + margin-bottom\n```\n\n### IE 模型\n\n![yasuo](ie.jpg)\n\n### 用 css 如何设置两种模型\n\n标准模型：box-sizing:content-box\nie 模型：box-sizing:border-box\n\n### JS 获取盒子模型的宽高\n\n```\ndom.style.width/height(只能获取内嵌)\ndom.currentStyle.width/height（只有IE支持）\nwindow.getComputedStyle(dom).width/height(火狐谷歌)\ndom.getBoundClientRect().width/height (获取展示dom的位置的方法)\n```\n\n### 边距重叠\n\n#### 父子元素边距重叠\n\n```html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\" />\n\t\t<title>css盒子模型</title>\n\t\t<style media=\"screen\">\n\t\t\thtml * {\n\t\t\t\tmargin: 0;\n\t\t\t\tpadding: 0;\n\t\t\t}\n\t\t</style>\n\t</head>\n\n\t<body>\n\t\t<section id=\"sec\">\n\t\t\t<style media=\"screen\">\n\t\t\t\t#sec {\n\t\t\t\t\tbackground: #f00;\n\t\t\t\t\t/* overflow: hidden; */\n\t\t\t\t}\n\t\t\t\t.child {\n\t\t\t\t\theight: 100px;\n\t\t\t\t\tmargin-top: 10px;\n\t\t\t\t\tbackground: yellow;\n\t\t\t\t}\n\t\t\t</style>\n\t\t\t<article class=\"child\"></article>\n\t\t</section>\n\t</body>\n</html>\n```\n","slug":"css盒子模型","published":1,"updated":"2020-03-04T07:53:42.000Z","comments":1,"photos":[],"link":"","_id":"ck7onzqxa000cyts6g6pl0rlp","content":"<h2 id=\"css-盒子模型\"><a href=\"#css-盒子模型\" class=\"headerlink\" title=\"css 盒子模型\"></a>css 盒子模型</h2><p>css 盒子模型包含标准模型和 IE 模型</p>\n<a id=\"more\"></a>\n\n<h3 id=\"标准模型\"><a href=\"#标准模型\" class=\"headerlink\" title=\"标准模型\"></a>标准模型</h3><p><img src=\"/2019/05/01/css%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/biaozhun.jpg\" alt=\"yasuo\"></p>\n<h4 id=\"盒子的组成\"><a href=\"#盒子的组成\" class=\"headerlink\" title=\"盒子的组成\"></a>盒子的组成</h4><p>一个盒子由外到内可以分成四个部分：margin（外边距）、border（边框）、padding（内边距）、content（内容）。会发现 margin、border、padding 是 CSS 属性，因此可以通过这三个属性来控制盒子的这三个部分。而 content 则是 HTML 元素的内容。</p>\n<h4 id=\"盒子的大小\"><a href=\"#盒子的大小\" class=\"headerlink\" title=\"盒子的大小\"></a>盒子的大小</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">盒子的宽度 &#x3D; width + padding-left + padding-right + border-left + border-right + margin-left + margin-right</span><br><span class=\"line\"></span><br><span class=\"line\">盒子的高度 &#x3D; height + padding-top + padding-bottom + border-top + border-bottom + margin-top + margin-bottom</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"IE-模型\"><a href=\"#IE-模型\" class=\"headerlink\" title=\"IE 模型\"></a>IE 模型</h3><p><img src=\"/2019/05/01/css%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/ie.jpg\" alt=\"yasuo\"></p>\n<h3 id=\"用-css-如何设置两种模型\"><a href=\"#用-css-如何设置两种模型\" class=\"headerlink\" title=\"用 css 如何设置两种模型\"></a>用 css 如何设置两种模型</h3><p>标准模型：box-sizing:content-box<br>ie 模型：box-sizing:border-box</p>\n<h3 id=\"JS-获取盒子模型的宽高\"><a href=\"#JS-获取盒子模型的宽高\" class=\"headerlink\" title=\"JS 获取盒子模型的宽高\"></a>JS 获取盒子模型的宽高</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dom.style.width&#x2F;height(只能获取内嵌)</span><br><span class=\"line\">dom.currentStyle.width&#x2F;height（只有IE支持）</span><br><span class=\"line\">window.getComputedStyle(dom).width&#x2F;height(火狐谷歌)</span><br><span class=\"line\">dom.getBoundClientRect().width&#x2F;height (获取展示dom的位置的方法)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"边距重叠\"><a href=\"#边距重叠\" class=\"headerlink\" title=\"边距重叠\"></a>边距重叠</h3><h4 id=\"父子元素边距重叠\"><a href=\"#父子元素边距重叠\" class=\"headerlink\" title=\"父子元素边距重叠\"></a>父子元素边距重叠</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>css盒子模型<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">media</span>=<span class=\"string\">\"screen\"</span>&gt;</span></span><br><span class=\"line\">\t\t\thtml * &#123;</span><br><span class=\"line\">\t\t\t\tmargin: 0;</span><br><span class=\"line\">\t\t\t\tpadding: 0;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">id</span>=<span class=\"string\">\"sec\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">media</span>=<span class=\"string\">\"screen\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t\t<span class=\"selector-id\">#sec</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t\t\t<span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#f00</span>;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t\t\t<span class=\"comment\">/* overflow: hidden; */</span></span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\"><span class=\"css\">\t\t\t\t<span class=\"selector-class\">.child</span> &#123;</span></span><br><span class=\"line\">\t\t\t\t\theight: 100px;</span><br><span class=\"line\">\t\t\t\t\tmargin-top: 10px;</span><br><span class=\"line\">\t\t\t\t\tbackground: yellow;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">article</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"css-盒子模型\"><a href=\"#css-盒子模型\" class=\"headerlink\" title=\"css 盒子模型\"></a>css 盒子模型</h2><p>css 盒子模型包含标准模型和 IE 模型</p>","more":"<h3 id=\"标准模型\"><a href=\"#标准模型\" class=\"headerlink\" title=\"标准模型\"></a>标准模型</h3><p><img src=\"/2019/05/01/css%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/biaozhun.jpg\" alt=\"yasuo\"></p>\n<h4 id=\"盒子的组成\"><a href=\"#盒子的组成\" class=\"headerlink\" title=\"盒子的组成\"></a>盒子的组成</h4><p>一个盒子由外到内可以分成四个部分：margin（外边距）、border（边框）、padding（内边距）、content（内容）。会发现 margin、border、padding 是 CSS 属性，因此可以通过这三个属性来控制盒子的这三个部分。而 content 则是 HTML 元素的内容。</p>\n<h4 id=\"盒子的大小\"><a href=\"#盒子的大小\" class=\"headerlink\" title=\"盒子的大小\"></a>盒子的大小</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">盒子的宽度 &#x3D; width + padding-left + padding-right + border-left + border-right + margin-left + margin-right</span><br><span class=\"line\"></span><br><span class=\"line\">盒子的高度 &#x3D; height + padding-top + padding-bottom + border-top + border-bottom + margin-top + margin-bottom</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"IE-模型\"><a href=\"#IE-模型\" class=\"headerlink\" title=\"IE 模型\"></a>IE 模型</h3><p><img src=\"/2019/05/01/css%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/ie.jpg\" alt=\"yasuo\"></p>\n<h3 id=\"用-css-如何设置两种模型\"><a href=\"#用-css-如何设置两种模型\" class=\"headerlink\" title=\"用 css 如何设置两种模型\"></a>用 css 如何设置两种模型</h3><p>标准模型：box-sizing:content-box<br>ie 模型：box-sizing:border-box</p>\n<h3 id=\"JS-获取盒子模型的宽高\"><a href=\"#JS-获取盒子模型的宽高\" class=\"headerlink\" title=\"JS 获取盒子模型的宽高\"></a>JS 获取盒子模型的宽高</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dom.style.width&#x2F;height(只能获取内嵌)</span><br><span class=\"line\">dom.currentStyle.width&#x2F;height（只有IE支持）</span><br><span class=\"line\">window.getComputedStyle(dom).width&#x2F;height(火狐谷歌)</span><br><span class=\"line\">dom.getBoundClientRect().width&#x2F;height (获取展示dom的位置的方法)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"边距重叠\"><a href=\"#边距重叠\" class=\"headerlink\" title=\"边距重叠\"></a>边距重叠</h3><h4 id=\"父子元素边距重叠\"><a href=\"#父子元素边距重叠\" class=\"headerlink\" title=\"父子元素边距重叠\"></a>父子元素边距重叠</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>css盒子模型<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">media</span>=<span class=\"string\">\"screen\"</span>&gt;</span></span><br><span class=\"line\">\t\t\thtml * &#123;</span><br><span class=\"line\">\t\t\t\tmargin: 0;</span><br><span class=\"line\">\t\t\t\tpadding: 0;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">id</span>=<span class=\"string\">\"sec\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">media</span>=<span class=\"string\">\"screen\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t\t<span class=\"selector-id\">#sec</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t\t\t<span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#f00</span>;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t\t\t<span class=\"comment\">/* overflow: hidden; */</span></span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\"><span class=\"css\">\t\t\t\t<span class=\"selector-class\">.child</span> &#123;</span></span><br><span class=\"line\">\t\t\t\t\theight: 100px;</span><br><span class=\"line\">\t\t\t\t\tmargin-top: 10px;</span><br><span class=\"line\">\t\t\t\t\tbackground: yellow;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">article</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>"},{"layout":"[post]","title":"meta标签使用总结","date":"2019-03-02T00:06:54.000Z","_content":"## Meta对象\nMeta 对象代表 HTML 的 一个 <meta> 元素。\n\n<meta> 元素可提供有关某个 HTML 元素的元信息 (meta-information)，比如描述、针对搜索引擎的关键词以及刷新频率。\n<!-- more -->\n## meta对象的属性\n\n属性 | 描述\n---|---\ncontent |设置或返回 <meta> 元素的 content 属性的值。\nhttpEquiv| 把 content 属性连接到一个 HTTP 头部。\nname|把 content 属性连接到某个名称。\nscheme|设置或返回用于解释 content 属性的值的格式。\n\n常用的包括 http-equiv搭配content和name搭配content两种。\n\n## name\n### **name可用参数有这些：**\n###  keywords(关键字)\n说明：用于告诉搜索引擎，你网页的关键字\n```html\n<meta name=\"keywords\" content=\"前端,js,css\">\n```\n### description(网站内容的描述)\n说明：用于告诉搜索引擎，你网站的主要内容  \n```html\n<meta name=\"description\" content=\"一个前端网站\">\n```\n\n### viewport(移动端的窗口)\n说明：在用bootstrap,AmazeUI等框架时候都有用过viewport。\n\n```html\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n```\n### robots(定义搜索引擎爬虫的索引方式)\n说明：robots用来告诉爬虫哪些页面需要索引，哪些页面不需要索引。content的参数有all,none,index,noindex,follow,nofollow。默认是all。\n\n```html\n<meta name=\"robots\" content=\"none\">\n```\n具体参数如下：\n\n1. none : 搜索引擎将忽略此网页，等价于noindex，nofollow。\n2. noindex : 搜索引擎不索引此网页。\n3. nofollow: 搜索引擎不继续通过此网页的链接索引搜索其它的网页。\n4. all : 搜索引擎将索引此网页与继续通过此网页的链接索引，等价于index，follow。\n5. index : 搜索引擎索引此网页。\n6. follow : 搜索引擎继续通过此网页的链接索引搜索其它的网页。\n\n### author(作者)\n说明：用于标注网页作者\n\n```html\n<meta name=\"author\" content=\"xxx\">\n```\n### generator(网页制作软件)\n说明：用于标明网页是什么软件做的\n\n```html\n<meta name=\"generator\" content=\"Sublime Text3\">\n```\n### copyright(版权)\n说明：用于标注版权信息\n\n```html\n<meta name=\"copyright\" content=\"xxx\">\n```\n### revisit-after(搜索引擎爬虫重访时间)\n说明：如果页面不是经常更新，为了减轻搜索引擎爬虫对服务器带来的压力，可以设置一个爬虫的重访时间。如果重访时间过短，爬虫将按它们定义的默认时间来访问。\n\n```html\n<meta name=\"revisit-after\" content=\"7 days\" >\n```\n### renderer(双核浏览器渲染方式)\n说明：renderer是为双核浏览器准备的，用于指定双核浏览器默认以何种方式渲染页面。比如说360浏览器。\n\n```html\n<meta name=\"renderer\" content=\"webkit\"> //默认webkit内核\n<meta name=\"renderer\" content=\"ie-comp\"> //默认IE兼容模式\n<meta name=\"renderer\" content=\"ie-stand\"> //默认IE标准模式\n```\n## http-equiv\n### content-Type(设定网页字符集)(推荐使用HTML5的方式)\n说明：用于设定网页字符集，便于浏览器解析与渲染页面举例：\n```html\n<meta http-equiv=\"content-Type\" content=\"text/html;charset=utf-8\">  //旧的HTML，不推荐\n\n<meta charset=\"utf-8\"> //HTML5设定网页字符集的方式，推荐使用UTF-8\n```\n### X-UA-Compatible(浏览器采取何种版本渲染当前页面)\n说明：用于告知浏览器以何种版本来渲染页面。（一般都设置为最新模式，在各大框架中这个设置也很常见。）举例：\n```html\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\"/> //指定IE和Chrome使用最新版本渲染当前页面\n```\n### cache-control(指定请求和响应遵循的缓存机制)\n说明：指导浏览器如何缓存某个响应以及缓存多长时间。\n\n```html\n<meta http-equiv=\"cache-control\" content=\"no-cache\">\n```\n共有以下几种用法：\n\n1. no-cache: 先发送请求，与服务器确认该资源是否被更改，如果未被更改，则使用缓存。\n\n2. no-store: 不允许缓存，每次都要去服务器上，下载完整的响应。（安全措施）\n\n3. public : 缓存所有响应，但并非必须。因为max-age也可以做到相同效果\n\n4. private : 只为单个用户缓存，因此不允许任何中继进行缓存。（比如说CDN就不允许缓存private的响应）\n\n5. maxage : 表示当前请求开始，该响应在多久内能被缓存和重用，而不去服务器重新请求。例如：max-age=60表示响应可以再缓存和重用 60 秒。\n用法2.(禁止百度自动转码)\n说明：用于禁止当前页面在移动端浏览时，被百度自动转码。虽然百度的本意是好的，但是转码效果很多时候却不尽人意。所以可以在head中加入例子中的那句话，就可以避免百度自动转码了。举例：\n\n\n```html\n<meta http-equiv=\"Cache-Control\" content=\"no-siteapp\" />\n```\n### expires(网页到期时间)\n说明:用于设定网页的到期时间，过期后网页必须到服务器上重新传输。\n\n```html\n<meta http-equiv=\"expires\" content=\"Sunday 26 October 2016 01:00 GMT\" />\n```\n### refresh(自动刷新并指向某页面)\n说明：网页将在设定的时间内，自动刷新并调向设定的网址。\n\n```html\n<meta http-equiv=\"refresh\" content=\"2；URL=http://www.baidu.com/\"> //意思是2秒后跳转向baidu\n```\n### Set-Cookie(cookie设定)\n说明：如果网页过期。那么这个网页存在本地的cookies也会被自动删除。\n\n```html\n<meta http-equiv=\"set-cookie\" content=\"runoobcookie=myContent;expires=Fri, 30 Dec 2015 12:00:00 GMT; path=http://www.runoob.com\">\n```\n","source":"_posts/meta标签使用总结.md","raw":"---\nlayout: '[post]'\ntitle: meta标签使用总结\ndate: 2019-03-02 08:06:54\ntags: html\n---\n## Meta对象\nMeta 对象代表 HTML 的 一个 <meta> 元素。\n\n<meta> 元素可提供有关某个 HTML 元素的元信息 (meta-information)，比如描述、针对搜索引擎的关键词以及刷新频率。\n<!-- more -->\n## meta对象的属性\n\n属性 | 描述\n---|---\ncontent |设置或返回 <meta> 元素的 content 属性的值。\nhttpEquiv| 把 content 属性连接到一个 HTTP 头部。\nname|把 content 属性连接到某个名称。\nscheme|设置或返回用于解释 content 属性的值的格式。\n\n常用的包括 http-equiv搭配content和name搭配content两种。\n\n## name\n### **name可用参数有这些：**\n###  keywords(关键字)\n说明：用于告诉搜索引擎，你网页的关键字\n```html\n<meta name=\"keywords\" content=\"前端,js,css\">\n```\n### description(网站内容的描述)\n说明：用于告诉搜索引擎，你网站的主要内容  \n```html\n<meta name=\"description\" content=\"一个前端网站\">\n```\n\n### viewport(移动端的窗口)\n说明：在用bootstrap,AmazeUI等框架时候都有用过viewport。\n\n```html\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n```\n### robots(定义搜索引擎爬虫的索引方式)\n说明：robots用来告诉爬虫哪些页面需要索引，哪些页面不需要索引。content的参数有all,none,index,noindex,follow,nofollow。默认是all。\n\n```html\n<meta name=\"robots\" content=\"none\">\n```\n具体参数如下：\n\n1. none : 搜索引擎将忽略此网页，等价于noindex，nofollow。\n2. noindex : 搜索引擎不索引此网页。\n3. nofollow: 搜索引擎不继续通过此网页的链接索引搜索其它的网页。\n4. all : 搜索引擎将索引此网页与继续通过此网页的链接索引，等价于index，follow。\n5. index : 搜索引擎索引此网页。\n6. follow : 搜索引擎继续通过此网页的链接索引搜索其它的网页。\n\n### author(作者)\n说明：用于标注网页作者\n\n```html\n<meta name=\"author\" content=\"xxx\">\n```\n### generator(网页制作软件)\n说明：用于标明网页是什么软件做的\n\n```html\n<meta name=\"generator\" content=\"Sublime Text3\">\n```\n### copyright(版权)\n说明：用于标注版权信息\n\n```html\n<meta name=\"copyright\" content=\"xxx\">\n```\n### revisit-after(搜索引擎爬虫重访时间)\n说明：如果页面不是经常更新，为了减轻搜索引擎爬虫对服务器带来的压力，可以设置一个爬虫的重访时间。如果重访时间过短，爬虫将按它们定义的默认时间来访问。\n\n```html\n<meta name=\"revisit-after\" content=\"7 days\" >\n```\n### renderer(双核浏览器渲染方式)\n说明：renderer是为双核浏览器准备的，用于指定双核浏览器默认以何种方式渲染页面。比如说360浏览器。\n\n```html\n<meta name=\"renderer\" content=\"webkit\"> //默认webkit内核\n<meta name=\"renderer\" content=\"ie-comp\"> //默认IE兼容模式\n<meta name=\"renderer\" content=\"ie-stand\"> //默认IE标准模式\n```\n## http-equiv\n### content-Type(设定网页字符集)(推荐使用HTML5的方式)\n说明：用于设定网页字符集，便于浏览器解析与渲染页面举例：\n```html\n<meta http-equiv=\"content-Type\" content=\"text/html;charset=utf-8\">  //旧的HTML，不推荐\n\n<meta charset=\"utf-8\"> //HTML5设定网页字符集的方式，推荐使用UTF-8\n```\n### X-UA-Compatible(浏览器采取何种版本渲染当前页面)\n说明：用于告知浏览器以何种版本来渲染页面。（一般都设置为最新模式，在各大框架中这个设置也很常见。）举例：\n```html\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\"/> //指定IE和Chrome使用最新版本渲染当前页面\n```\n### cache-control(指定请求和响应遵循的缓存机制)\n说明：指导浏览器如何缓存某个响应以及缓存多长时间。\n\n```html\n<meta http-equiv=\"cache-control\" content=\"no-cache\">\n```\n共有以下几种用法：\n\n1. no-cache: 先发送请求，与服务器确认该资源是否被更改，如果未被更改，则使用缓存。\n\n2. no-store: 不允许缓存，每次都要去服务器上，下载完整的响应。（安全措施）\n\n3. public : 缓存所有响应，但并非必须。因为max-age也可以做到相同效果\n\n4. private : 只为单个用户缓存，因此不允许任何中继进行缓存。（比如说CDN就不允许缓存private的响应）\n\n5. maxage : 表示当前请求开始，该响应在多久内能被缓存和重用，而不去服务器重新请求。例如：max-age=60表示响应可以再缓存和重用 60 秒。\n用法2.(禁止百度自动转码)\n说明：用于禁止当前页面在移动端浏览时，被百度自动转码。虽然百度的本意是好的，但是转码效果很多时候却不尽人意。所以可以在head中加入例子中的那句话，就可以避免百度自动转码了。举例：\n\n\n```html\n<meta http-equiv=\"Cache-Control\" content=\"no-siteapp\" />\n```\n### expires(网页到期时间)\n说明:用于设定网页的到期时间，过期后网页必须到服务器上重新传输。\n\n```html\n<meta http-equiv=\"expires\" content=\"Sunday 26 October 2016 01:00 GMT\" />\n```\n### refresh(自动刷新并指向某页面)\n说明：网页将在设定的时间内，自动刷新并调向设定的网址。\n\n```html\n<meta http-equiv=\"refresh\" content=\"2；URL=http://www.baidu.com/\"> //意思是2秒后跳转向baidu\n```\n### Set-Cookie(cookie设定)\n说明：如果网页过期。那么这个网页存在本地的cookies也会被自动删除。\n\n```html\n<meta http-equiv=\"set-cookie\" content=\"runoobcookie=myContent;expires=Fri, 30 Dec 2015 12:00:00 GMT; path=http://www.runoob.com\">\n```\n","slug":"meta标签使用总结","published":1,"updated":"2019-03-02T00:07:35.000Z","comments":1,"photos":[],"link":"","_id":"ck7onzqxc000dyts6dnkgeesi","content":"<h2 id=\"Meta对象\"><a href=\"#Meta对象\" class=\"headerlink\" title=\"Meta对象\"></a>Meta对象</h2><p>Meta 对象代表 HTML 的 一个 <meta> 元素。</p>\n<meta> 元素可提供有关某个 HTML 元素的元信息 (meta-information)，比如描述、针对搜索引擎的关键词以及刷新频率。\n<a id=\"more\"></a>\n## meta对象的属性\n\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>content</td>\n<td>设置或返回 <meta> 元素的 content 属性的值。</td>\n</tr>\n<tr>\n<td>httpEquiv</td>\n<td>把 content 属性连接到一个 HTTP 头部。</td>\n</tr>\n<tr>\n<td>name</td>\n<td>把 content 属性连接到某个名称。</td>\n</tr>\n<tr>\n<td>scheme</td>\n<td>设置或返回用于解释 content 属性的值的格式。</td>\n</tr>\n</tbody></table>\n<p>常用的包括 http-equiv搭配content和name搭配content两种。</p>\n<h2 id=\"name\"><a href=\"#name\" class=\"headerlink\" title=\"name\"></a>name</h2><h3 id=\"name可用参数有这些：\"><a href=\"#name可用参数有这些：\" class=\"headerlink\" title=\"name可用参数有这些：\"></a><strong>name可用参数有这些：</strong></h3><h3 id=\"keywords-关键字\"><a href=\"#keywords-关键字\" class=\"headerlink\" title=\"keywords(关键字)\"></a>keywords(关键字)</h3><p>说明：用于告诉搜索引擎，你网页的关键字</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"keywords\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"前端,js,css\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"description-网站内容的描述\"><a href=\"#description-网站内容的描述\" class=\"headerlink\" title=\"description(网站内容的描述)\"></a>description(网站内容的描述)</h3><p>说明：用于告诉搜索引擎，你网站的主要内容  </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"description\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"一个前端网站\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"viewport-移动端的窗口\"><a href=\"#viewport-移动端的窗口\" class=\"headerlink\" title=\"viewport(移动端的窗口)\"></a>viewport(移动端的窗口)</h3><p>说明：在用bootstrap,AmazeUI等框架时候都有用过viewport。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"robots-定义搜索引擎爬虫的索引方式\"><a href=\"#robots-定义搜索引擎爬虫的索引方式\" class=\"headerlink\" title=\"robots(定义搜索引擎爬虫的索引方式)\"></a>robots(定义搜索引擎爬虫的索引方式)</h3><p>说明：robots用来告诉爬虫哪些页面需要索引，哪些页面不需要索引。content的参数有all,none,index,noindex,follow,nofollow。默认是all。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"robots\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"none\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>具体参数如下：</p>\n<ol>\n<li>none : 搜索引擎将忽略此网页，等价于noindex，nofollow。</li>\n<li>noindex : 搜索引擎不索引此网页。</li>\n<li>nofollow: 搜索引擎不继续通过此网页的链接索引搜索其它的网页。</li>\n<li>all : 搜索引擎将索引此网页与继续通过此网页的链接索引，等价于index，follow。</li>\n<li>index : 搜索引擎索引此网页。</li>\n<li>follow : 搜索引擎继续通过此网页的链接索引搜索其它的网页。</li>\n</ol>\n<h3 id=\"author-作者\"><a href=\"#author-作者\" class=\"headerlink\" title=\"author(作者)\"></a>author(作者)</h3><p>说明：用于标注网页作者</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"author\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"xxx\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"generator-网页制作软件\"><a href=\"#generator-网页制作软件\" class=\"headerlink\" title=\"generator(网页制作软件)\"></a>generator(网页制作软件)</h3><p>说明：用于标明网页是什么软件做的</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"generator\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"Sublime Text3\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"copyright-版权\"><a href=\"#copyright-版权\" class=\"headerlink\" title=\"copyright(版权)\"></a>copyright(版权)</h3><p>说明：用于标注版权信息</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"copyright\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"xxx\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"revisit-after-搜索引擎爬虫重访时间\"><a href=\"#revisit-after-搜索引擎爬虫重访时间\" class=\"headerlink\" title=\"revisit-after(搜索引擎爬虫重访时间)\"></a>revisit-after(搜索引擎爬虫重访时间)</h3><p>说明：如果页面不是经常更新，为了减轻搜索引擎爬虫对服务器带来的压力，可以设置一个爬虫的重访时间。如果重访时间过短，爬虫将按它们定义的默认时间来访问。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"revisit-after\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"7 days\"</span> &gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"renderer-双核浏览器渲染方式\"><a href=\"#renderer-双核浏览器渲染方式\" class=\"headerlink\" title=\"renderer(双核浏览器渲染方式)\"></a>renderer(双核浏览器渲染方式)</h3><p>说明：renderer是为双核浏览器准备的，用于指定双核浏览器默认以何种方式渲染页面。比如说360浏览器。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"renderer\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"webkit\"</span>&gt;</span> //默认webkit内核</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"renderer\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie-comp\"</span>&gt;</span> //默认IE兼容模式</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"renderer\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie-stand\"</span>&gt;</span> //默认IE标准模式</span><br></pre></td></tr></table></figure>\n<h2 id=\"http-equiv\"><a href=\"#http-equiv\" class=\"headerlink\" title=\"http-equiv\"></a>http-equiv</h2><h3 id=\"content-Type-设定网页字符集-推荐使用HTML5的方式\"><a href=\"#content-Type-设定网页字符集-推荐使用HTML5的方式\" class=\"headerlink\" title=\"content-Type(设定网页字符集)(推荐使用HTML5的方式)\"></a>content-Type(设定网页字符集)(推荐使用HTML5的方式)</h3><p>说明：用于设定网页字符集，便于浏览器解析与渲染页面举例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"content-Type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html;charset=utf-8\"</span>&gt;</span>  //旧的HTML，不推荐</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span> //HTML5设定网页字符集的方式，推荐使用UTF-8</span><br></pre></td></tr></table></figure>\n<h3 id=\"X-UA-Compatible-浏览器采取何种版本渲染当前页面\"><a href=\"#X-UA-Compatible-浏览器采取何种版本渲染当前页面\" class=\"headerlink\" title=\"X-UA-Compatible(浏览器采取何种版本渲染当前页面)\"></a>X-UA-Compatible(浏览器采取何种版本渲染当前页面)</h3><p>说明：用于告知浏览器以何种版本来渲染页面。（一般都设置为最新模式，在各大框架中这个设置也很常见。）举例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=edge,chrome=1\"</span>/&gt;</span> //指定IE和Chrome使用最新版本渲染当前页面</span><br></pre></td></tr></table></figure>\n<h3 id=\"cache-control-指定请求和响应遵循的缓存机制\"><a href=\"#cache-control-指定请求和响应遵循的缓存机制\" class=\"headerlink\" title=\"cache-control(指定请求和响应遵循的缓存机制)\"></a>cache-control(指定请求和响应遵循的缓存机制)</h3><p>说明：指导浏览器如何缓存某个响应以及缓存多长时间。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"cache-control\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"no-cache\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>共有以下几种用法：</p>\n<ol>\n<li><p>no-cache: 先发送请求，与服务器确认该资源是否被更改，如果未被更改，则使用缓存。</p>\n</li>\n<li><p>no-store: 不允许缓存，每次都要去服务器上，下载完整的响应。（安全措施）</p>\n</li>\n<li><p>public : 缓存所有响应，但并非必须。因为max-age也可以做到相同效果</p>\n</li>\n<li><p>private : 只为单个用户缓存，因此不允许任何中继进行缓存。（比如说CDN就不允许缓存private的响应）</p>\n</li>\n<li><p>maxage : 表示当前请求开始，该响应在多久内能被缓存和重用，而不去服务器重新请求。例如：max-age=60表示响应可以再缓存和重用 60 秒。<br>用法2.(禁止百度自动转码)<br>说明：用于禁止当前页面在移动端浏览时，被百度自动转码。虽然百度的本意是好的，但是转码效果很多时候却不尽人意。所以可以在head中加入例子中的那句话，就可以避免百度自动转码了。举例：</p>\n</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Cache-Control\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"no-siteapp\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"expires-网页到期时间\"><a href=\"#expires-网页到期时间\" class=\"headerlink\" title=\"expires(网页到期时间)\"></a>expires(网页到期时间)</h3><p>说明:用于设定网页的到期时间，过期后网页必须到服务器上重新传输。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"expires\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"Sunday 26 October 2016 01:00 GMT\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"refresh-自动刷新并指向某页面\"><a href=\"#refresh-自动刷新并指向某页面\" class=\"headerlink\" title=\"refresh(自动刷新并指向某页面)\"></a>refresh(自动刷新并指向某页面)</h3><p>说明：网页将在设定的时间内，自动刷新并调向设定的网址。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"refresh\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"2；URL=http://www.baidu.com/\"</span>&gt;</span> //意思是2秒后跳转向baidu</span><br></pre></td></tr></table></figure>\n<h3 id=\"Set-Cookie-cookie设定\"><a href=\"#Set-Cookie-cookie设定\" class=\"headerlink\" title=\"Set-Cookie(cookie设定)\"></a>Set-Cookie(cookie设定)</h3><p>说明：如果网页过期。那么这个网页存在本地的cookies也会被自动删除。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"set-cookie\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"runoobcookie=myContent;expires=Fri, 30 Dec 2015 12:00:00 GMT; path=http://www.runoob.com\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"Meta对象\"><a href=\"#Meta对象\" class=\"headerlink\" title=\"Meta对象\"></a>Meta对象</h2><p>Meta 对象代表 HTML 的 一个 <meta> 元素。</p>\n<meta> 元素可提供有关某个 HTML 元素的元信息 (meta-information)，比如描述、针对搜索引擎的关键词以及刷新频率。","more":"## meta对象的属性\n\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>content</td>\n<td>设置或返回 <meta> 元素的 content 属性的值。</td>\n</tr>\n<tr>\n<td>httpEquiv</td>\n<td>把 content 属性连接到一个 HTTP 头部。</td>\n</tr>\n<tr>\n<td>name</td>\n<td>把 content 属性连接到某个名称。</td>\n</tr>\n<tr>\n<td>scheme</td>\n<td>设置或返回用于解释 content 属性的值的格式。</td>\n</tr>\n</tbody></table>\n<p>常用的包括 http-equiv搭配content和name搭配content两种。</p>\n<h2 id=\"name\"><a href=\"#name\" class=\"headerlink\" title=\"name\"></a>name</h2><h3 id=\"name可用参数有这些：\"><a href=\"#name可用参数有这些：\" class=\"headerlink\" title=\"name可用参数有这些：\"></a><strong>name可用参数有这些：</strong></h3><h3 id=\"keywords-关键字\"><a href=\"#keywords-关键字\" class=\"headerlink\" title=\"keywords(关键字)\"></a>keywords(关键字)</h3><p>说明：用于告诉搜索引擎，你网页的关键字</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"keywords\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"前端,js,css\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"description-网站内容的描述\"><a href=\"#description-网站内容的描述\" class=\"headerlink\" title=\"description(网站内容的描述)\"></a>description(网站内容的描述)</h3><p>说明：用于告诉搜索引擎，你网站的主要内容  </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"description\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"一个前端网站\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"viewport-移动端的窗口\"><a href=\"#viewport-移动端的窗口\" class=\"headerlink\" title=\"viewport(移动端的窗口)\"></a>viewport(移动端的窗口)</h3><p>说明：在用bootstrap,AmazeUI等框架时候都有用过viewport。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"robots-定义搜索引擎爬虫的索引方式\"><a href=\"#robots-定义搜索引擎爬虫的索引方式\" class=\"headerlink\" title=\"robots(定义搜索引擎爬虫的索引方式)\"></a>robots(定义搜索引擎爬虫的索引方式)</h3><p>说明：robots用来告诉爬虫哪些页面需要索引，哪些页面不需要索引。content的参数有all,none,index,noindex,follow,nofollow。默认是all。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"robots\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"none\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>具体参数如下：</p>\n<ol>\n<li>none : 搜索引擎将忽略此网页，等价于noindex，nofollow。</li>\n<li>noindex : 搜索引擎不索引此网页。</li>\n<li>nofollow: 搜索引擎不继续通过此网页的链接索引搜索其它的网页。</li>\n<li>all : 搜索引擎将索引此网页与继续通过此网页的链接索引，等价于index，follow。</li>\n<li>index : 搜索引擎索引此网页。</li>\n<li>follow : 搜索引擎继续通过此网页的链接索引搜索其它的网页。</li>\n</ol>\n<h3 id=\"author-作者\"><a href=\"#author-作者\" class=\"headerlink\" title=\"author(作者)\"></a>author(作者)</h3><p>说明：用于标注网页作者</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"author\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"xxx\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"generator-网页制作软件\"><a href=\"#generator-网页制作软件\" class=\"headerlink\" title=\"generator(网页制作软件)\"></a>generator(网页制作软件)</h3><p>说明：用于标明网页是什么软件做的</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"generator\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"Sublime Text3\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"copyright-版权\"><a href=\"#copyright-版权\" class=\"headerlink\" title=\"copyright(版权)\"></a>copyright(版权)</h3><p>说明：用于标注版权信息</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"copyright\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"xxx\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"revisit-after-搜索引擎爬虫重访时间\"><a href=\"#revisit-after-搜索引擎爬虫重访时间\" class=\"headerlink\" title=\"revisit-after(搜索引擎爬虫重访时间)\"></a>revisit-after(搜索引擎爬虫重访时间)</h3><p>说明：如果页面不是经常更新，为了减轻搜索引擎爬虫对服务器带来的压力，可以设置一个爬虫的重访时间。如果重访时间过短，爬虫将按它们定义的默认时间来访问。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"revisit-after\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"7 days\"</span> &gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"renderer-双核浏览器渲染方式\"><a href=\"#renderer-双核浏览器渲染方式\" class=\"headerlink\" title=\"renderer(双核浏览器渲染方式)\"></a>renderer(双核浏览器渲染方式)</h3><p>说明：renderer是为双核浏览器准备的，用于指定双核浏览器默认以何种方式渲染页面。比如说360浏览器。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"renderer\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"webkit\"</span>&gt;</span> //默认webkit内核</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"renderer\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie-comp\"</span>&gt;</span> //默认IE兼容模式</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"renderer\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie-stand\"</span>&gt;</span> //默认IE标准模式</span><br></pre></td></tr></table></figure>\n<h2 id=\"http-equiv\"><a href=\"#http-equiv\" class=\"headerlink\" title=\"http-equiv\"></a>http-equiv</h2><h3 id=\"content-Type-设定网页字符集-推荐使用HTML5的方式\"><a href=\"#content-Type-设定网页字符集-推荐使用HTML5的方式\" class=\"headerlink\" title=\"content-Type(设定网页字符集)(推荐使用HTML5的方式)\"></a>content-Type(设定网页字符集)(推荐使用HTML5的方式)</h3><p>说明：用于设定网页字符集，便于浏览器解析与渲染页面举例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"content-Type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html;charset=utf-8\"</span>&gt;</span>  //旧的HTML，不推荐</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span> //HTML5设定网页字符集的方式，推荐使用UTF-8</span><br></pre></td></tr></table></figure>\n<h3 id=\"X-UA-Compatible-浏览器采取何种版本渲染当前页面\"><a href=\"#X-UA-Compatible-浏览器采取何种版本渲染当前页面\" class=\"headerlink\" title=\"X-UA-Compatible(浏览器采取何种版本渲染当前页面)\"></a>X-UA-Compatible(浏览器采取何种版本渲染当前页面)</h3><p>说明：用于告知浏览器以何种版本来渲染页面。（一般都设置为最新模式，在各大框架中这个设置也很常见。）举例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=edge,chrome=1\"</span>/&gt;</span> //指定IE和Chrome使用最新版本渲染当前页面</span><br></pre></td></tr></table></figure>\n<h3 id=\"cache-control-指定请求和响应遵循的缓存机制\"><a href=\"#cache-control-指定请求和响应遵循的缓存机制\" class=\"headerlink\" title=\"cache-control(指定请求和响应遵循的缓存机制)\"></a>cache-control(指定请求和响应遵循的缓存机制)</h3><p>说明：指导浏览器如何缓存某个响应以及缓存多长时间。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"cache-control\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"no-cache\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>共有以下几种用法：</p>\n<ol>\n<li><p>no-cache: 先发送请求，与服务器确认该资源是否被更改，如果未被更改，则使用缓存。</p>\n</li>\n<li><p>no-store: 不允许缓存，每次都要去服务器上，下载完整的响应。（安全措施）</p>\n</li>\n<li><p>public : 缓存所有响应，但并非必须。因为max-age也可以做到相同效果</p>\n</li>\n<li><p>private : 只为单个用户缓存，因此不允许任何中继进行缓存。（比如说CDN就不允许缓存private的响应）</p>\n</li>\n<li><p>maxage : 表示当前请求开始，该响应在多久内能被缓存和重用，而不去服务器重新请求。例如：max-age=60表示响应可以再缓存和重用 60 秒。<br>用法2.(禁止百度自动转码)<br>说明：用于禁止当前页面在移动端浏览时，被百度自动转码。虽然百度的本意是好的，但是转码效果很多时候却不尽人意。所以可以在head中加入例子中的那句话，就可以避免百度自动转码了。举例：</p>\n</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Cache-Control\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"no-siteapp\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"expires-网页到期时间\"><a href=\"#expires-网页到期时间\" class=\"headerlink\" title=\"expires(网页到期时间)\"></a>expires(网页到期时间)</h3><p>说明:用于设定网页的到期时间，过期后网页必须到服务器上重新传输。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"expires\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"Sunday 26 October 2016 01:00 GMT\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"refresh-自动刷新并指向某页面\"><a href=\"#refresh-自动刷新并指向某页面\" class=\"headerlink\" title=\"refresh(自动刷新并指向某页面)\"></a>refresh(自动刷新并指向某页面)</h3><p>说明：网页将在设定的时间内，自动刷新并调向设定的网址。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"refresh\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"2；URL=http://www.baidu.com/\"</span>&gt;</span> //意思是2秒后跳转向baidu</span><br></pre></td></tr></table></figure>\n<h3 id=\"Set-Cookie-cookie设定\"><a href=\"#Set-Cookie-cookie设定\" class=\"headerlink\" title=\"Set-Cookie(cookie设定)\"></a>Set-Cookie(cookie设定)</h3><p>说明：如果网页过期。那么这个网页存在本地的cookies也会被自动删除。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"set-cookie\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"runoobcookie=myContent;expires=Fri, 30 Dec 2015 12:00:00 GMT; path=http://www.runoob.com\"</span>&gt;</span></span><br></pre></td></tr></table></figure>"},{"layout":"[post]","title":"Promise原理和实现","date":"2019-02-05T01:57:01.000Z","_content":"### 什么是Promise\nPromise 对象用于表示一个异步操作的最终完成 (或失败), 及其结果值.\n<!-- more -->\n### Promise规范\n- ES6中使用[Promise/A+](https://juejin.im/post/5c4b0423e51d4525211c0fbc)规范。\n- Promise的标准理解\n  - promise对象有三种状态**pending**、**fulfilled**和**rejected**。\n  - promise对象的状态必须有并且只有上述三种当中的一种。\n  - 状态的改变只能是从pending到fulfilled或者pending到rejected。\n  - then方法返回一个promise。then 方法可以被同一个 promise 调用多次。\n```\npromise.then(onFulfilled, onRejected)\n```\n### Promise实现\n1. 构造函数\n```js\nfunction Promise(resolver) {}\n```\n2. 原型链\n```js\nPromise.prototype.then = function() {}\nPromise.prototype.catch = function() {}\n```\n3. 静态方法\n```js\nPromise.resolve = function() {}\nPromise.reject = function() {}\nPromise.all = function() {}\nPromise.race = function() {}\n```\n### Promise基本结构\n\n```js\nlet promise=new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve('FULFILLED')\n  }, 1000)\n})\npromise.then(a=> alert(a));\npromise.then(a => alert(a+1));\n```\n### Promise构造函数\n构造函数用法总结：\n1. 构造函数接收一个**executor**立即执行函数\n2. **executor**立即执行函数接收一个**resolve**函数\n3. **promise**对象的**then**方法绑定状态变为**fulfilled**时的回调\n4. **resolve**函数被调用时会触发**then**方法中的回调\n#### 构造函数的初步实现\n\n```js\nfunction Promise(executor) {\n    var self = this;\n    self.status = 'pending'; //promise当前的状态\n    self.data = undefined; //promise的值\n    self.onResolvedCallback = [];\n    //promise状态变为resolve时的回调函数集，可能有多个\n   function resolve(value) {\n       if(self.status === 'pending') {\n           self.status = 'resolved';\n           self.data = value;\n           for(var i = 0; i < self.onResolvedCallback.length; i++) {\n               self.onResolvedCallback[i](value);\n           }\n       }\n   }\n   executor(resolve);\n};\nPromise.prototype.then = function (resolve) {\n    this.onResolvedCallback.push(resolve);\n};\n```\n#### 添加reject结果\n\n```js\nfunction Promise(executor) {\n    var self = this;\n    self.status = 'pending'; //promise当前的状态\n    self.data = undefined; //promise的值\n    self.onResolvedCallback = [];\n    //promise状态变为resolve时的回调函数集，可能有多个\n    self.onRejectedCallback = [];\n    //promise状态变为reject时的回调函数集，可能有多个\n   function resolve(value) {\n       if(self.status === 'pending') {\n           self.status = 'resolved';\n           self.data = value;\n           for(var i = 0; i < self.onResolvedCallback.length; i++) {\n               self.onResolvedCallback[i](value);\n           }\n       }\n   }\n\n   function reject(reason) {\n        if(self.status === 'pending') {\n            self.status = 'rejected';\n            self.data = reason;\n            for(var i = 0; i < self.onRejectedCallback.length; i++) {\n                self.onRejectedCallback[i](reason);\n            }\n        }\n   }\n\n   try {\n       executor(resolve, reject);\n   } catch (e){\n       reject(e);\n   }\n};\nPromise.prototype.then = function (onResolve, onReject) {\n    this.onResolvedCallback.push(onResolve);\n    this.onRejectedCallback.push(onReject);\n};\n```\n小结：\n1. **executor**函数作为实参在创建**Promise**对象时传入**Promise**构造函数。\n2. **resolve**和**reject**函数作为实参传入**executor**函数。\n3. **value**作为实参传入**resolve**和**reject**函数。\n#### 如果executor自执行函数中的resolve函数立即触发时，发现Promise失效\n\n```js\nconst promise = new Promise((resolve) => {\n    resolve(1);\n});\npromise.then((a) => alert(a));\n\n```\n将promise的resolve和reject异步执行\n\n```js\nfunction resolve(value) {\n    setTimeout(function () {\n        if(self.status === 'pending') {\n            self.status = 'resolved';\n            self.data = value;\n            for(var i = 0; i < self.onResolvedCallback.length; i++) {\n                self.onResolvedCallback[i](value);\n            }\n        }\n    })\n}\n\nfunction reject(reason) {\n    setTimeout(function () {\n        if(self.status === 'pending') {\n            self.status = 'rejected';\n            self.data = reason;\n            for(var i = 0; i < self.onRejectedCallback.length; i++) {\n                self.onRejectedCallback[i](reason);\n            }\n        }\n    })\n}\n```\n### then方法\n\n```js\npromise.then(onFulfilled, onRejected)\n```\n1.  **then**方法返回一个新的**promise**对象。\n1.  **executor**自执行函数中的**resolve**参数调用时执行**then**方法的第一个回调函数**onResolved**。\n1.  **executor**自执行函数中的**reject**参数调用时执行**then**方法的第二个回调函数**onRejected**。\n\n```js\nPromise.prototype.then = function (onResolved, onRejected) {\n    var self = this;\n    var promise2;\n    onResolved = typeof onResolved === 'function' \n                ? onResolved \n                : function (value) {return value};\n    onRejected = typeof onRejected === 'function' \n                ? onRejected \n                : function (reason) {throw reason};\n    //promise对象当前状态为resolved\n    if(self.status === 'resolved') {\n        return promise2 = new Promise(function (resolve, reject) {\n            try {\n                //调用onResolve回调函数\n                var x = onResolved(self.data);\n                //如果onResolve回调函数返回值为一个promise对象\n                if(x instanceof  Promise) {\n                    //将它的结果作为promise2的结果\n                    x.then(resolve, reject);\n                } else {\n                    resolve(x);//执行promise2的onResolve回调\n           }        \n            } catch (e) {\n                reject(e); //执行promise2的onReject回调\n            }\n        })\n    }\n    //promise对象当前状态为rejected\n    if(self.status === 'rejected') {\n        return promise2 = new Promise(function (resolve, reject) {\n            try {\n                var x = onRejected(self.data);\n                if (x instanceof Promise) {\n                    x.then(resolve, reject)\n                } else {\n                    resolve(x)\n                }\n            } catch (e) {\n                reject(e)\n            }\n        })\n    }\n    //promise对象当前状态为pending\n    //此时并不能确定调用onResolved还是onRejected，需要等当前Promise状态确定。\n    //所以需要将callBack放入promise1的回调数组中\n    if(self.status === 'pending') {\n        return promise2 = new Promise(function (resolve, reject) {\n            self.onResolvedCallback.push(function (value) {\n                try {\n                    var x = onResolved(self.data);\n                    if (x instanceof Promise) {\n                        x.then(resolve, reject);\n                    } else {\n                        resolve(x);\n          }\n                } catch (e) {\n                    reject(e);\n                }\n            })\n            self.onRejectedCallback.push(function(reason) {\n                try {\n                    var x = onRejected(self.data);\n                    if (x instanceof Promise) {\n                        x.then(resolve, reject)\n                    } else {\n                        resolve(x);\n                    }\n                } catch (e) {\n                    reject(e)\n                }\n            })\n        })\n    }\n};\n```\n### 完整代码\n\n```js\nvar Promise = (function() {\n    function Promise(resolver) {\n        if (typeof resolver !== 'function') { //resolver必须是函数\n            throw new TypeError('Promise resolver ' + resolver + ' is not a function')\n        }\n        if (!(this instanceof Promise)) return new Promise(resolver)\n\n        var self = this //保存this\n        self.callbacks = [] //保存onResolve和onReject函数集合\n        self.status = 'pending' //当前状态\n\n        function resolve(value) {\n            setTimeout(function() { //异步调用\n                if (self.status !== 'pending') {\n                    return\n                }\n                self.status = 'resolved' //修改状态\n                self.data = value\n\n                for (var i = 0; i < self.callbacks.length; i++) {\n                    self.callbacks[i].onResolved(value)\n                }\n            })\n        }\n\n        function reject(reason) {\n            setTimeout(function(){ //异步调用\n                if (self.status !== 'pending') {\n                    return\n                }\n                self.status = 'rejected' //修改状态\n                self.data = reason\n\n                for (var i = 0; i < self.callbacks.length; i++) {\n                    self.callbacks[i].onRejected(reason)\n                }\n            })\n        }\n\n        try{\n            resolver(resolve, reject) //执行resolver函数\n        } catch(e) {\n            reject(e)\n        }\n    }\n\n    function resolvePromise(promise, x, resolve, reject) {\n        var then\n        var thenCalledOrThrow = false\n\n        if (promise === x) {\n            return reject(new TypeError('Chaining cycle detected for promise!'))\n        }\n\n        if ((x !== null) && ((typeof x === 'object') || (typeof x === 'function'))) {\n            try {\n                then = x.then\n                if (typeof then === 'function') {\n                    then.call(x, function rs(y) {\n                        if (thenCalledOrThrow) return\n                        thenCalledOrThrow = true\n                        return resolvePromise(promise, y, resolve, reject)\n                    }, function rj(r) {\n                        if (thenCalledOrThrow) return\n                        thenCalledOrThrow = true\n                        return reject(r)\n                    })\n                } else {\n                    return resolve(x)\n                }\n            } catch(e) {\n                if (thenCalledOrThrow) return\n                thenCalledOrThrow = true\n                return reject(e)\n            }\n        } else {\n            return resolve(x)\n        }\n    }\n\n    Promise.prototype.then = function(onResolved, onRejected) {\n        //健壮性处理，处理点击穿透\n        onResolved = typeof onResolved === 'function' ? onResolved : function(v){return v}\n        onRejected = typeof onRejected === 'function' ? onRejected : function(r){throw r}\n        var self = this\n        var promise2\n\n        //promise状态为resolved\n        if (self.status === 'resolved') {\n            return promise2 = new Promise(function(resolve, reject) {\n                setTimeout(function() {\n                    try {\n                        //调用then方法的onResolved回调\n                        var x = onResolved(self.data)\n                        //根据x的值修改promise2的状态\n                        resolvePromise(promise2, x, resolve, reject)\n                    } catch(e) {\n                        //promise2状态变为rejected\n                        return reject(e)\n                    }\n                })\n            })\n        }\n\n        //promise状态为rejected\n        if (self.status === 'rejected') {\n            return promise2 = new Promise(function(resolve, reject) {\n                setTimeout(function() {\n                    try {\n                        //调用then方法的onReject回调\n                        var x = onRejected(self.data)\n                        //根据x的值修改promise2的状态\n                        resolvePromise(promise2, x, resolve, reject)\n                    } catch(e) {\n                        //promise2状态变为rejected\n                        return reject(e)\n                    }\n                })\n            })\n        }\n\n        //promise状态为pending\n        //需要等待promise的状态改变\n        if (self.status === 'pending') {\n            return promise2 = new Promise(function(resolve, reject) {\n                self.callbacks.push({\n                    onResolved: function(value) {\n                        try {\n                            //调用then方法的onResolved回调\n                            var x = onResolved(value)\n                            //根据x的值修改promise2的状态\n                            resolvePromise(promise2, x, resolve, reject)\n                        } catch(e) {\n                            //promise2状态变为rejected\n                            return reject(e)\n                        }\n                    },\n                    onRejected: function(reason) {\n                        try {\n                            //调用then方法的onResolved回调\n                            var x = onRejected(reason)\n                            //根据x的值修改promise2的状态\n                            resolvePromise(promise2, x, resolve, reject)\n                        } catch(e) {\n                            //promise2状态变为rejected\n                            return reject(e)\n                        }\n                    }\n                })\n            })\n        }\n    }\n\n    //获取当前Promise传递的值\n    Promise.prototype.valueOf = function() {\n        return this.data\n    }\n\n    //由then方法实现catch方法\n    Promise.prototype.catch = function(onRejected) {\n        return this.then(null, onRejected)\n    }\n\n    //finally方法\n    Promise.prototype.finally = function(fn) {\n        return this.then(function(v){\n            setTimeout(fn)\n            return v\n        }, function(r){\n            setTimeout(fn)\n            throw r\n        })\n    }\n\n    Promise.prototype.spread = function(fn, onRejected) {\n        return this.then(function(values) {\n            return fn.apply(null, values)\n        }, onRejected)\n    }\n\n    Promise.prototype.inject = function(fn, onRejected) {\n        return this.then(function(v) {\n            return fn.apply(null, fn.toString().match(/\\((.*?)\\)/)[1].split(',').map(function(key){\n                return v[key];\n            }))\n        }, onRejected)\n    }\n\n    Promise.prototype.delay = function(duration) {\n        return this.then(function(value) {\n            return new Promise(function(resolve, reject) {\n                setTimeout(function() {\n                    resolve(value)\n                }, duration)\n            })\n        }, function(reason) {\n            return new Promise(function(resolve, reject) {\n                setTimeout(function() {\n                    reject(reason)\n                }, duration)\n            })\n        })\n    }\n\n    Promise.all = function(promises) {\n        return new Promise(function(resolve, reject) {\n            var resolvedCounter = 0\n            var promiseNum = promises.length\n            var resolvedValues = new Array(promiseNum)\n            for (var i = 0; i < promiseNum; i++) {\n                (function(i) {\n                    Promise.resolve(promises[i]).then(function(value) {\n                        resolvedCounter++\n                        resolvedValues[i] = value\n                        if (resolvedCounter == promiseNum) {\n                            return resolve(resolvedValues)\n                        }\n                    }, function(reason) {\n                        return reject(reason)\n                    })\n                })(i)\n            }\n        })\n    }\n\n    Promise.race = function(promises) {\n        return new Promise(function(resolve, reject) {\n            for (var i = 0; i < promises.length; i++) {\n                Promise.resolve(promises[i]).then(function(value) {\n                    return resolve(value)\n                }, function(reason) {\n                    return reject(reason)\n                })\n            }\n        })\n    }\n\n    Promise.resolve = function(value) {\n        var promise = new Promise(function(resolve, reject) {\n            resolvePromise(promise, value, resolve, reject)\n        })\n        return promise\n    }\n\n    Promise.reject = function(reason) {\n        return new Promise(function(resolve, reject) {\n            reject(reason)\n        })\n    }\n\n    Promise.fcall = function(fn){\n        // 虽然fn可以接收到上一层then里传来的参数，但是其实是undefined，所以跟没有是一样的，因为resolve没参数啊\n        return Promise.resolve().then(fn)\n    }\n\n    Promise.done = Promise.stop = function(){\n        return new Promise(function(){})\n    }\n\n    Promise.deferred = Promise.defer = function() {\n        var dfd = {}\n        dfd.promise = new Promise(function(resolve, reject) {\n            dfd.resolve = resolve\n            dfd.reject = reject\n        })\n        return dfd\n    }\n\n    try { // CommonJS compliance\n        module.exports = Promise\n    } catch(e) {}\n\n    return Promise\n})()\n```\n### 参考\n[Promise实现原理](https://www.jianshu.com/p/43de678e918a)  \n[Promise原理与实现](https://www.jianshu.com/p/b4f0425b22a1)\n\n\n\n\n\n\n\n","source":"_posts/promise原理和实现.md","raw":"---\nlayout: '[post]'\ntitle: Promise原理和实现\ndate: 2019-02-05 09:57:01\ntags: Promise\n---\n### 什么是Promise\nPromise 对象用于表示一个异步操作的最终完成 (或失败), 及其结果值.\n<!-- more -->\n### Promise规范\n- ES6中使用[Promise/A+](https://juejin.im/post/5c4b0423e51d4525211c0fbc)规范。\n- Promise的标准理解\n  - promise对象有三种状态**pending**、**fulfilled**和**rejected**。\n  - promise对象的状态必须有并且只有上述三种当中的一种。\n  - 状态的改变只能是从pending到fulfilled或者pending到rejected。\n  - then方法返回一个promise。then 方法可以被同一个 promise 调用多次。\n```\npromise.then(onFulfilled, onRejected)\n```\n### Promise实现\n1. 构造函数\n```js\nfunction Promise(resolver) {}\n```\n2. 原型链\n```js\nPromise.prototype.then = function() {}\nPromise.prototype.catch = function() {}\n```\n3. 静态方法\n```js\nPromise.resolve = function() {}\nPromise.reject = function() {}\nPromise.all = function() {}\nPromise.race = function() {}\n```\n### Promise基本结构\n\n```js\nlet promise=new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve('FULFILLED')\n  }, 1000)\n})\npromise.then(a=> alert(a));\npromise.then(a => alert(a+1));\n```\n### Promise构造函数\n构造函数用法总结：\n1. 构造函数接收一个**executor**立即执行函数\n2. **executor**立即执行函数接收一个**resolve**函数\n3. **promise**对象的**then**方法绑定状态变为**fulfilled**时的回调\n4. **resolve**函数被调用时会触发**then**方法中的回调\n#### 构造函数的初步实现\n\n```js\nfunction Promise(executor) {\n    var self = this;\n    self.status = 'pending'; //promise当前的状态\n    self.data = undefined; //promise的值\n    self.onResolvedCallback = [];\n    //promise状态变为resolve时的回调函数集，可能有多个\n   function resolve(value) {\n       if(self.status === 'pending') {\n           self.status = 'resolved';\n           self.data = value;\n           for(var i = 0; i < self.onResolvedCallback.length; i++) {\n               self.onResolvedCallback[i](value);\n           }\n       }\n   }\n   executor(resolve);\n};\nPromise.prototype.then = function (resolve) {\n    this.onResolvedCallback.push(resolve);\n};\n```\n#### 添加reject结果\n\n```js\nfunction Promise(executor) {\n    var self = this;\n    self.status = 'pending'; //promise当前的状态\n    self.data = undefined; //promise的值\n    self.onResolvedCallback = [];\n    //promise状态变为resolve时的回调函数集，可能有多个\n    self.onRejectedCallback = [];\n    //promise状态变为reject时的回调函数集，可能有多个\n   function resolve(value) {\n       if(self.status === 'pending') {\n           self.status = 'resolved';\n           self.data = value;\n           for(var i = 0; i < self.onResolvedCallback.length; i++) {\n               self.onResolvedCallback[i](value);\n           }\n       }\n   }\n\n   function reject(reason) {\n        if(self.status === 'pending') {\n            self.status = 'rejected';\n            self.data = reason;\n            for(var i = 0; i < self.onRejectedCallback.length; i++) {\n                self.onRejectedCallback[i](reason);\n            }\n        }\n   }\n\n   try {\n       executor(resolve, reject);\n   } catch (e){\n       reject(e);\n   }\n};\nPromise.prototype.then = function (onResolve, onReject) {\n    this.onResolvedCallback.push(onResolve);\n    this.onRejectedCallback.push(onReject);\n};\n```\n小结：\n1. **executor**函数作为实参在创建**Promise**对象时传入**Promise**构造函数。\n2. **resolve**和**reject**函数作为实参传入**executor**函数。\n3. **value**作为实参传入**resolve**和**reject**函数。\n#### 如果executor自执行函数中的resolve函数立即触发时，发现Promise失效\n\n```js\nconst promise = new Promise((resolve) => {\n    resolve(1);\n});\npromise.then((a) => alert(a));\n\n```\n将promise的resolve和reject异步执行\n\n```js\nfunction resolve(value) {\n    setTimeout(function () {\n        if(self.status === 'pending') {\n            self.status = 'resolved';\n            self.data = value;\n            for(var i = 0; i < self.onResolvedCallback.length; i++) {\n                self.onResolvedCallback[i](value);\n            }\n        }\n    })\n}\n\nfunction reject(reason) {\n    setTimeout(function () {\n        if(self.status === 'pending') {\n            self.status = 'rejected';\n            self.data = reason;\n            for(var i = 0; i < self.onRejectedCallback.length; i++) {\n                self.onRejectedCallback[i](reason);\n            }\n        }\n    })\n}\n```\n### then方法\n\n```js\npromise.then(onFulfilled, onRejected)\n```\n1.  **then**方法返回一个新的**promise**对象。\n1.  **executor**自执行函数中的**resolve**参数调用时执行**then**方法的第一个回调函数**onResolved**。\n1.  **executor**自执行函数中的**reject**参数调用时执行**then**方法的第二个回调函数**onRejected**。\n\n```js\nPromise.prototype.then = function (onResolved, onRejected) {\n    var self = this;\n    var promise2;\n    onResolved = typeof onResolved === 'function' \n                ? onResolved \n                : function (value) {return value};\n    onRejected = typeof onRejected === 'function' \n                ? onRejected \n                : function (reason) {throw reason};\n    //promise对象当前状态为resolved\n    if(self.status === 'resolved') {\n        return promise2 = new Promise(function (resolve, reject) {\n            try {\n                //调用onResolve回调函数\n                var x = onResolved(self.data);\n                //如果onResolve回调函数返回值为一个promise对象\n                if(x instanceof  Promise) {\n                    //将它的结果作为promise2的结果\n                    x.then(resolve, reject);\n                } else {\n                    resolve(x);//执行promise2的onResolve回调\n           }        \n            } catch (e) {\n                reject(e); //执行promise2的onReject回调\n            }\n        })\n    }\n    //promise对象当前状态为rejected\n    if(self.status === 'rejected') {\n        return promise2 = new Promise(function (resolve, reject) {\n            try {\n                var x = onRejected(self.data);\n                if (x instanceof Promise) {\n                    x.then(resolve, reject)\n                } else {\n                    resolve(x)\n                }\n            } catch (e) {\n                reject(e)\n            }\n        })\n    }\n    //promise对象当前状态为pending\n    //此时并不能确定调用onResolved还是onRejected，需要等当前Promise状态确定。\n    //所以需要将callBack放入promise1的回调数组中\n    if(self.status === 'pending') {\n        return promise2 = new Promise(function (resolve, reject) {\n            self.onResolvedCallback.push(function (value) {\n                try {\n                    var x = onResolved(self.data);\n                    if (x instanceof Promise) {\n                        x.then(resolve, reject);\n                    } else {\n                        resolve(x);\n          }\n                } catch (e) {\n                    reject(e);\n                }\n            })\n            self.onRejectedCallback.push(function(reason) {\n                try {\n                    var x = onRejected(self.data);\n                    if (x instanceof Promise) {\n                        x.then(resolve, reject)\n                    } else {\n                        resolve(x);\n                    }\n                } catch (e) {\n                    reject(e)\n                }\n            })\n        })\n    }\n};\n```\n### 完整代码\n\n```js\nvar Promise = (function() {\n    function Promise(resolver) {\n        if (typeof resolver !== 'function') { //resolver必须是函数\n            throw new TypeError('Promise resolver ' + resolver + ' is not a function')\n        }\n        if (!(this instanceof Promise)) return new Promise(resolver)\n\n        var self = this //保存this\n        self.callbacks = [] //保存onResolve和onReject函数集合\n        self.status = 'pending' //当前状态\n\n        function resolve(value) {\n            setTimeout(function() { //异步调用\n                if (self.status !== 'pending') {\n                    return\n                }\n                self.status = 'resolved' //修改状态\n                self.data = value\n\n                for (var i = 0; i < self.callbacks.length; i++) {\n                    self.callbacks[i].onResolved(value)\n                }\n            })\n        }\n\n        function reject(reason) {\n            setTimeout(function(){ //异步调用\n                if (self.status !== 'pending') {\n                    return\n                }\n                self.status = 'rejected' //修改状态\n                self.data = reason\n\n                for (var i = 0; i < self.callbacks.length; i++) {\n                    self.callbacks[i].onRejected(reason)\n                }\n            })\n        }\n\n        try{\n            resolver(resolve, reject) //执行resolver函数\n        } catch(e) {\n            reject(e)\n        }\n    }\n\n    function resolvePromise(promise, x, resolve, reject) {\n        var then\n        var thenCalledOrThrow = false\n\n        if (promise === x) {\n            return reject(new TypeError('Chaining cycle detected for promise!'))\n        }\n\n        if ((x !== null) && ((typeof x === 'object') || (typeof x === 'function'))) {\n            try {\n                then = x.then\n                if (typeof then === 'function') {\n                    then.call(x, function rs(y) {\n                        if (thenCalledOrThrow) return\n                        thenCalledOrThrow = true\n                        return resolvePromise(promise, y, resolve, reject)\n                    }, function rj(r) {\n                        if (thenCalledOrThrow) return\n                        thenCalledOrThrow = true\n                        return reject(r)\n                    })\n                } else {\n                    return resolve(x)\n                }\n            } catch(e) {\n                if (thenCalledOrThrow) return\n                thenCalledOrThrow = true\n                return reject(e)\n            }\n        } else {\n            return resolve(x)\n        }\n    }\n\n    Promise.prototype.then = function(onResolved, onRejected) {\n        //健壮性处理，处理点击穿透\n        onResolved = typeof onResolved === 'function' ? onResolved : function(v){return v}\n        onRejected = typeof onRejected === 'function' ? onRejected : function(r){throw r}\n        var self = this\n        var promise2\n\n        //promise状态为resolved\n        if (self.status === 'resolved') {\n            return promise2 = new Promise(function(resolve, reject) {\n                setTimeout(function() {\n                    try {\n                        //调用then方法的onResolved回调\n                        var x = onResolved(self.data)\n                        //根据x的值修改promise2的状态\n                        resolvePromise(promise2, x, resolve, reject)\n                    } catch(e) {\n                        //promise2状态变为rejected\n                        return reject(e)\n                    }\n                })\n            })\n        }\n\n        //promise状态为rejected\n        if (self.status === 'rejected') {\n            return promise2 = new Promise(function(resolve, reject) {\n                setTimeout(function() {\n                    try {\n                        //调用then方法的onReject回调\n                        var x = onRejected(self.data)\n                        //根据x的值修改promise2的状态\n                        resolvePromise(promise2, x, resolve, reject)\n                    } catch(e) {\n                        //promise2状态变为rejected\n                        return reject(e)\n                    }\n                })\n            })\n        }\n\n        //promise状态为pending\n        //需要等待promise的状态改变\n        if (self.status === 'pending') {\n            return promise2 = new Promise(function(resolve, reject) {\n                self.callbacks.push({\n                    onResolved: function(value) {\n                        try {\n                            //调用then方法的onResolved回调\n                            var x = onResolved(value)\n                            //根据x的值修改promise2的状态\n                            resolvePromise(promise2, x, resolve, reject)\n                        } catch(e) {\n                            //promise2状态变为rejected\n                            return reject(e)\n                        }\n                    },\n                    onRejected: function(reason) {\n                        try {\n                            //调用then方法的onResolved回调\n                            var x = onRejected(reason)\n                            //根据x的值修改promise2的状态\n                            resolvePromise(promise2, x, resolve, reject)\n                        } catch(e) {\n                            //promise2状态变为rejected\n                            return reject(e)\n                        }\n                    }\n                })\n            })\n        }\n    }\n\n    //获取当前Promise传递的值\n    Promise.prototype.valueOf = function() {\n        return this.data\n    }\n\n    //由then方法实现catch方法\n    Promise.prototype.catch = function(onRejected) {\n        return this.then(null, onRejected)\n    }\n\n    //finally方法\n    Promise.prototype.finally = function(fn) {\n        return this.then(function(v){\n            setTimeout(fn)\n            return v\n        }, function(r){\n            setTimeout(fn)\n            throw r\n        })\n    }\n\n    Promise.prototype.spread = function(fn, onRejected) {\n        return this.then(function(values) {\n            return fn.apply(null, values)\n        }, onRejected)\n    }\n\n    Promise.prototype.inject = function(fn, onRejected) {\n        return this.then(function(v) {\n            return fn.apply(null, fn.toString().match(/\\((.*?)\\)/)[1].split(',').map(function(key){\n                return v[key];\n            }))\n        }, onRejected)\n    }\n\n    Promise.prototype.delay = function(duration) {\n        return this.then(function(value) {\n            return new Promise(function(resolve, reject) {\n                setTimeout(function() {\n                    resolve(value)\n                }, duration)\n            })\n        }, function(reason) {\n            return new Promise(function(resolve, reject) {\n                setTimeout(function() {\n                    reject(reason)\n                }, duration)\n            })\n        })\n    }\n\n    Promise.all = function(promises) {\n        return new Promise(function(resolve, reject) {\n            var resolvedCounter = 0\n            var promiseNum = promises.length\n            var resolvedValues = new Array(promiseNum)\n            for (var i = 0; i < promiseNum; i++) {\n                (function(i) {\n                    Promise.resolve(promises[i]).then(function(value) {\n                        resolvedCounter++\n                        resolvedValues[i] = value\n                        if (resolvedCounter == promiseNum) {\n                            return resolve(resolvedValues)\n                        }\n                    }, function(reason) {\n                        return reject(reason)\n                    })\n                })(i)\n            }\n        })\n    }\n\n    Promise.race = function(promises) {\n        return new Promise(function(resolve, reject) {\n            for (var i = 0; i < promises.length; i++) {\n                Promise.resolve(promises[i]).then(function(value) {\n                    return resolve(value)\n                }, function(reason) {\n                    return reject(reason)\n                })\n            }\n        })\n    }\n\n    Promise.resolve = function(value) {\n        var promise = new Promise(function(resolve, reject) {\n            resolvePromise(promise, value, resolve, reject)\n        })\n        return promise\n    }\n\n    Promise.reject = function(reason) {\n        return new Promise(function(resolve, reject) {\n            reject(reason)\n        })\n    }\n\n    Promise.fcall = function(fn){\n        // 虽然fn可以接收到上一层then里传来的参数，但是其实是undefined，所以跟没有是一样的，因为resolve没参数啊\n        return Promise.resolve().then(fn)\n    }\n\n    Promise.done = Promise.stop = function(){\n        return new Promise(function(){})\n    }\n\n    Promise.deferred = Promise.defer = function() {\n        var dfd = {}\n        dfd.promise = new Promise(function(resolve, reject) {\n            dfd.resolve = resolve\n            dfd.reject = reject\n        })\n        return dfd\n    }\n\n    try { // CommonJS compliance\n        module.exports = Promise\n    } catch(e) {}\n\n    return Promise\n})()\n```\n### 参考\n[Promise实现原理](https://www.jianshu.com/p/43de678e918a)  \n[Promise原理与实现](https://www.jianshu.com/p/b4f0425b22a1)\n\n\n\n\n\n\n\n","slug":"promise原理和实现","published":1,"updated":"2020-01-24T14:55:13.000Z","comments":1,"photos":[],"link":"","_id":"ck7onzqxg000gyts6d2hq4ut2","content":"<h3 id=\"什么是Promise\"><a href=\"#什么是Promise\" class=\"headerlink\" title=\"什么是Promise\"></a>什么是Promise</h3><p>Promise 对象用于表示一个异步操作的最终完成 (或失败), 及其结果值.</p>\n<a id=\"more\"></a>\n<h3 id=\"Promise规范\"><a href=\"#Promise规范\" class=\"headerlink\" title=\"Promise规范\"></a>Promise规范</h3><ul>\n<li>ES6中使用<a href=\"https://juejin.im/post/5c4b0423e51d4525211c0fbc\" target=\"_blank\" rel=\"noopener\">Promise/A+</a>规范。</li>\n<li>Promise的标准理解<ul>\n<li>promise对象有三种状态<strong>pending</strong>、<strong>fulfilled</strong>和<strong>rejected</strong>。</li>\n<li>promise对象的状态必须有并且只有上述三种当中的一种。</li>\n<li>状态的改变只能是从pending到fulfilled或者pending到rejected。</li>\n<li>then方法返回一个promise。then 方法可以被同一个 promise 调用多次。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promise.then(onFulfilled, onRejected)</span><br></pre></td></tr></table></figure>\n<h3 id=\"Promise实现\"><a href=\"#Promise实现\" class=\"headerlink\" title=\"Promise实现\"></a>Promise实现</h3></li>\n</ul>\n</li>\n</ul>\n<ol>\n<li>构造函数<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Promise</span>(<span class=\"params\">resolver</span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure></li>\n<li>原型链<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.then = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.catch = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure></li>\n<li>静态方法<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.reject = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.all = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.race = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Promise基本结构\"><a href=\"#Promise基本结构\" class=\"headerlink\" title=\"Promise基本结构\"></a>Promise基本结构</h3></li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> promise=<span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    resolve(<span class=\"string\">'FULFILLED'</span>)</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">promise.then(<span class=\"function\"><span class=\"params\">a</span>=&gt;</span> alert(a));</span><br><span class=\"line\">promise.then(<span class=\"function\"><span class=\"params\">a</span> =&gt;</span> alert(a+<span class=\"number\">1</span>));</span><br></pre></td></tr></table></figure>\n<h3 id=\"Promise构造函数\"><a href=\"#Promise构造函数\" class=\"headerlink\" title=\"Promise构造函数\"></a>Promise构造函数</h3><p>构造函数用法总结：</p>\n<ol>\n<li>构造函数接收一个<strong>executor</strong>立即执行函数</li>\n<li><strong>executor</strong>立即执行函数接收一个<strong>resolve</strong>函数</li>\n<li><strong>promise</strong>对象的<strong>then</strong>方法绑定状态变为<strong>fulfilled</strong>时的回调</li>\n<li><strong>resolve</strong>函数被调用时会触发<strong>then</strong>方法中的回调<h4 id=\"构造函数的初步实现\"><a href=\"#构造函数的初步实现\" class=\"headerlink\" title=\"构造函数的初步实现\"></a>构造函数的初步实现</h4></li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Promise</span>(<span class=\"params\">executor</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    self.status = <span class=\"string\">'pending'</span>; <span class=\"comment\">//promise当前的状态</span></span><br><span class=\"line\">    self.data = <span class=\"literal\">undefined</span>; <span class=\"comment\">//promise的值</span></span><br><span class=\"line\">    self.onResolvedCallback = [];</span><br><span class=\"line\">    <span class=\"comment\">//promise状态变为resolve时的回调函数集，可能有多个</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolve</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(self.status === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">           self.status = <span class=\"string\">'resolved'</span>;</span><br><span class=\"line\">           self.data = value;</span><br><span class=\"line\">           <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; self.onResolvedCallback.length; i++) &#123;</span><br><span class=\"line\">               self.onResolvedCallback[i](value);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   executor(resolve);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.then = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onResolvedCallback.push(resolve);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"添加reject结果\"><a href=\"#添加reject结果\" class=\"headerlink\" title=\"添加reject结果\"></a>添加reject结果</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Promise</span>(<span class=\"params\">executor</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    self.status = <span class=\"string\">'pending'</span>; <span class=\"comment\">//promise当前的状态</span></span><br><span class=\"line\">    self.data = <span class=\"literal\">undefined</span>; <span class=\"comment\">//promise的值</span></span><br><span class=\"line\">    self.onResolvedCallback = [];</span><br><span class=\"line\">    <span class=\"comment\">//promise状态变为resolve时的回调函数集，可能有多个</span></span><br><span class=\"line\">    self.onRejectedCallback = [];</span><br><span class=\"line\">    <span class=\"comment\">//promise状态变为reject时的回调函数集，可能有多个</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolve</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(self.status === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">           self.status = <span class=\"string\">'resolved'</span>;</span><br><span class=\"line\">           self.data = value;</span><br><span class=\"line\">           <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; self.onResolvedCallback.length; i++) &#123;</span><br><span class=\"line\">               self.onResolvedCallback[i](value);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reject</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(self.status === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">            self.status = <span class=\"string\">'rejected'</span>;</span><br><span class=\"line\">            self.data = reason;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; self.onRejectedCallback.length; i++) &#123;</span><br><span class=\"line\">                self.onRejectedCallback[i](reason);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">       executor(resolve, reject);</span><br><span class=\"line\">   &#125; <span class=\"keyword\">catch</span> (e)&#123;</span><br><span class=\"line\">       reject(e);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.then = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">onResolve, onReject</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onResolvedCallback.push(onResolve);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onRejectedCallback.push(onReject);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>小结：</p>\n<ol>\n<li><strong>executor</strong>函数作为实参在创建<strong>Promise</strong>对象时传入<strong>Promise</strong>构造函数。</li>\n<li><strong>resolve</strong>和<strong>reject</strong>函数作为实参传入<strong>executor</strong>函数。</li>\n<li><strong>value</strong>作为实参传入<strong>resolve</strong>和<strong>reject</strong>函数。<h4 id=\"如果executor自执行函数中的resolve函数立即触发时，发现Promise失效\"><a href=\"#如果executor自执行函数中的resolve函数立即触发时，发现Promise失效\" class=\"headerlink\" title=\"如果executor自执行函数中的resolve函数立即触发时，发现Promise失效\"></a>如果executor自执行函数中的resolve函数立即触发时，发现Promise失效</h4></li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    resolve(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">promise.then(<span class=\"function\">(<span class=\"params\">a</span>) =&gt;</span> alert(a));</span><br></pre></td></tr></table></figure>\n<p>将promise的resolve和reject异步执行</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolve</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(self.status === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">            self.status = <span class=\"string\">'resolved'</span>;</span><br><span class=\"line\">            self.data = value;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; self.onResolvedCallback.length; i++) &#123;</span><br><span class=\"line\">                self.onResolvedCallback[i](value);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reject</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(self.status === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">            self.status = <span class=\"string\">'rejected'</span>;</span><br><span class=\"line\">            self.data = reason;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; self.onRejectedCallback.length; i++) &#123;</span><br><span class=\"line\">                self.onRejectedCallback[i](reason);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"then方法\"><a href=\"#then方法\" class=\"headerlink\" title=\"then方法\"></a>then方法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promise.then(onFulfilled, onRejected)</span><br></pre></td></tr></table></figure>\n<ol>\n<li><strong>then</strong>方法返回一个新的<strong>promise</strong>对象。</li>\n<li><strong>executor</strong>自执行函数中的<strong>resolve</strong>参数调用时执行<strong>then</strong>方法的第一个回调函数<strong>onResolved</strong>。</li>\n<li><strong>executor</strong>自执行函数中的<strong>reject</strong>参数调用时执行<strong>then</strong>方法的第二个回调函数<strong>onRejected</strong>。</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.then = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">onResolved, onRejected</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> promise2;</span><br><span class=\"line\">    onResolved = <span class=\"keyword\">typeof</span> onResolved === <span class=\"string\">'function'</span> </span><br><span class=\"line\">                ? onResolved </span><br><span class=\"line\">                : <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;<span class=\"keyword\">return</span> value&#125;;</span><br><span class=\"line\">    onRejected = <span class=\"keyword\">typeof</span> onRejected === <span class=\"string\">'function'</span> </span><br><span class=\"line\">                ? onRejected </span><br><span class=\"line\">                : <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">reason</span>) </span>&#123;<span class=\"keyword\">throw</span> reason&#125;;</span><br><span class=\"line\">    <span class=\"comment\">//promise对象当前状态为resolved</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(self.status === <span class=\"string\">'resolved'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> promise2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//调用onResolve回调函数</span></span><br><span class=\"line\">                <span class=\"keyword\">var</span> x = onResolved(self.data);</span><br><span class=\"line\">                <span class=\"comment\">//如果onResolve回调函数返回值为一个promise对象</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(x <span class=\"keyword\">instanceof</span>  <span class=\"built_in\">Promise</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//将它的结果作为promise2的结果</span></span><br><span class=\"line\">                    x.then(resolve, reject);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    resolve(x);<span class=\"comment\">//执行promise2的onResolve回调</span></span><br><span class=\"line\">           &#125;        </span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">                reject(e); <span class=\"comment\">//执行promise2的onReject回调</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//promise对象当前状态为rejected</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(self.status === <span class=\"string\">'rejected'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> promise2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> x = onRejected(self.data);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (x <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>) &#123;</span><br><span class=\"line\">                    x.then(resolve, reject)</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    resolve(x)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">                reject(e)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//promise对象当前状态为pending</span></span><br><span class=\"line\">    <span class=\"comment\">//此时并不能确定调用onResolved还是onRejected，需要等当前Promise状态确定。</span></span><br><span class=\"line\">    <span class=\"comment\">//所以需要将callBack放入promise1的回调数组中</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(self.status === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> promise2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">            self.onResolvedCallback.push(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> x = onResolved(self.data);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (x <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>) &#123;</span><br><span class=\"line\">                        x.then(resolve, reject);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        resolve(x);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">                    reject(e);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            self.onRejectedCallback.push(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> x = onRejected(self.data);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (x <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>) &#123;</span><br><span class=\"line\">                        x.then(resolve, reject)</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        resolve(x);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">                    reject(e)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">Promise</span> = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Promise</span>(<span class=\"params\">resolver</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> resolver !== <span class=\"string\">'function'</span>) &#123; <span class=\"comment\">//resolver必须是函数</span></span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'Promise resolver '</span> + resolver + <span class=\"string\">' is not a function'</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!(<span class=\"keyword\">this</span> <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>)) <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(resolver)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span> <span class=\"comment\">//保存this</span></span><br><span class=\"line\">        self.callbacks = [] <span class=\"comment\">//保存onResolve和onReject函数集合</span></span><br><span class=\"line\">        self.status = <span class=\"string\">'pending'</span> <span class=\"comment\">//当前状态</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolve</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">            setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">//异步调用</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (self.status !== <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                self.status = <span class=\"string\">'resolved'</span> <span class=\"comment\">//修改状态</span></span><br><span class=\"line\">                self.data = value</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; self.callbacks.length; i++) &#123;</span><br><span class=\"line\">                    self.callbacks[i].onResolved(value)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reject</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">            setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"comment\">//异步调用</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (self.status !== <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                self.status = <span class=\"string\">'rejected'</span> <span class=\"comment\">//修改状态</span></span><br><span class=\"line\">                self.data = reason</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; self.callbacks.length; i++) &#123;</span><br><span class=\"line\">                    self.callbacks[i].onRejected(reason)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            resolver(resolve, reject) <span class=\"comment\">//执行resolver函数</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">            reject(e)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolvePromise</span>(<span class=\"params\">promise, x, resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> then</span><br><span class=\"line\">        <span class=\"keyword\">var</span> thenCalledOrThrow = <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (promise === x) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> reject(<span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'Chaining cycle detected for promise!'</span>))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((x !== <span class=\"literal\">null</span>) &amp;&amp; ((<span class=\"keyword\">typeof</span> x === <span class=\"string\">'object'</span>) || (<span class=\"keyword\">typeof</span> x === <span class=\"string\">'function'</span>))) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                then = x.then</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> then === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">                    then.call(x, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">rs</span>(<span class=\"params\">y</span>) </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (thenCalledOrThrow) <span class=\"keyword\">return</span></span><br><span class=\"line\">                        thenCalledOrThrow = <span class=\"literal\">true</span></span><br><span class=\"line\">                        <span class=\"keyword\">return</span> resolvePromise(promise, y, resolve, reject)</span><br><span class=\"line\">                    &#125;, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">rj</span>(<span class=\"params\">r</span>) </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (thenCalledOrThrow) <span class=\"keyword\">return</span></span><br><span class=\"line\">                        thenCalledOrThrow = <span class=\"literal\">true</span></span><br><span class=\"line\">                        <span class=\"keyword\">return</span> reject(r)</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> resolve(x)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (thenCalledOrThrow) <span class=\"keyword\">return</span></span><br><span class=\"line\">                thenCalledOrThrow = <span class=\"literal\">true</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> reject(e)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> resolve(x)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.prototype.then = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">onResolved, onRejected</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//健壮性处理，处理点击穿透</span></span><br><span class=\"line\">        onResolved = <span class=\"keyword\">typeof</span> onResolved === <span class=\"string\">'function'</span> ? onResolved : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>)</span>&#123;<span class=\"keyword\">return</span> v&#125;</span><br><span class=\"line\">        onRejected = <span class=\"keyword\">typeof</span> onRejected === <span class=\"string\">'function'</span> ? onRejected : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">r</span>)</span>&#123;<span class=\"keyword\">throw</span> r&#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> promise2</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//promise状态为resolved</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (self.status === <span class=\"string\">'resolved'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> promise2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">                setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//调用then方法的onResolved回调</span></span><br><span class=\"line\">                        <span class=\"keyword\">var</span> x = onResolved(self.data)</span><br><span class=\"line\">                        <span class=\"comment\">//根据x的值修改promise2的状态</span></span><br><span class=\"line\">                        resolvePromise(promise2, x, resolve, reject)</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//promise2状态变为rejected</span></span><br><span class=\"line\">                        <span class=\"keyword\">return</span> reject(e)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//promise状态为rejected</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (self.status === <span class=\"string\">'rejected'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> promise2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">                setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//调用then方法的onReject回调</span></span><br><span class=\"line\">                        <span class=\"keyword\">var</span> x = onRejected(self.data)</span><br><span class=\"line\">                        <span class=\"comment\">//根据x的值修改promise2的状态</span></span><br><span class=\"line\">                        resolvePromise(promise2, x, resolve, reject)</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//promise2状态变为rejected</span></span><br><span class=\"line\">                        <span class=\"keyword\">return</span> reject(e)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//promise状态为pending</span></span><br><span class=\"line\">        <span class=\"comment\">//需要等待promise的状态改变</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (self.status === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> promise2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">                self.callbacks.push(&#123;</span><br><span class=\"line\">                    onResolved: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                            <span class=\"comment\">//调用then方法的onResolved回调</span></span><br><span class=\"line\">                            <span class=\"keyword\">var</span> x = onResolved(value)</span><br><span class=\"line\">                            <span class=\"comment\">//根据x的值修改promise2的状态</span></span><br><span class=\"line\">                            resolvePromise(promise2, x, resolve, reject)</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">                            <span class=\"comment\">//promise2状态变为rejected</span></span><br><span class=\"line\">                            <span class=\"keyword\">return</span> reject(e)</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    onRejected: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                            <span class=\"comment\">//调用then方法的onResolved回调</span></span><br><span class=\"line\">                            <span class=\"keyword\">var</span> x = onRejected(reason)</span><br><span class=\"line\">                            <span class=\"comment\">//根据x的值修改promise2的状态</span></span><br><span class=\"line\">                            resolvePromise(promise2, x, resolve, reject)</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">                            <span class=\"comment\">//promise2状态变为rejected</span></span><br><span class=\"line\">                            <span class=\"keyword\">return</span> reject(e)</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//获取当前Promise传递的值</span></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.prototype.valueOf = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.data</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//由then方法实现catch方法</span></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.prototype.catch = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">onRejected</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.then(<span class=\"literal\">null</span>, onRejected)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//finally方法</span></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.prototype.finally = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>)</span>&#123;</span><br><span class=\"line\">            setTimeout(fn)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> v</span><br><span class=\"line\">        &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">r</span>)</span>&#123;</span><br><span class=\"line\">            setTimeout(fn)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> r</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.prototype.spread = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn, onRejected</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">values</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> fn.apply(<span class=\"literal\">null</span>, values)</span><br><span class=\"line\">        &#125;, onRejected)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.prototype.inject = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn, onRejected</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> fn.apply(<span class=\"literal\">null</span>, fn.toString().match(<span class=\"regexp\">/\\((.*?)\\)/</span>)[<span class=\"number\">1</span>].split(<span class=\"string\">','</span>).map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>)</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> v[key];</span><br><span class=\"line\">            &#125;))</span><br><span class=\"line\">        &#125;, onRejected)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.prototype.delay = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">duration</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">                setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                    resolve(value)</span><br><span class=\"line\">                &#125;, duration)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">                setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                    reject(reason)</span><br><span class=\"line\">                &#125;, duration)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.all = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">promises</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> resolvedCounter = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> promiseNum = promises.length</span><br><span class=\"line\">            <span class=\"keyword\">var</span> resolvedValues = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(promiseNum)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; promiseNum; i++) &#123;</span><br><span class=\"line\">                (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">                    <span class=\"built_in\">Promise</span>.resolve(promises[i]).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">                        resolvedCounter++</span><br><span class=\"line\">                        resolvedValues[i] = value</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (resolvedCounter == promiseNum) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">return</span> resolve(resolvedValues)</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> reject(reason)</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                &#125;)(i)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.race = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">promises</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; promises.length; i++) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">Promise</span>.resolve(promises[i]).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> resolve(value)</span><br><span class=\"line\">                &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> reject(reason)</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.resolve = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">            resolvePromise(promise, value, resolve, reject)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> promise</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.reject = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">            reject(reason)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.fcall = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 虽然fn可以接收到上一层then里传来的参数，但是其实是undefined，所以跟没有是一样的，因为resolve没参数啊</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve().then(fn)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.done = <span class=\"built_in\">Promise</span>.stop = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.deferred = <span class=\"built_in\">Promise</span>.defer = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> dfd = &#123;&#125;</span><br><span class=\"line\">        dfd.promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">            dfd.resolve = resolve</span><br><span class=\"line\">            dfd.reject = reject</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dfd</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123; <span class=\"comment\">// CommonJS compliance</span></span><br><span class=\"line\">        <span class=\"built_in\">module</span>.exports = <span class=\"built_in\">Promise</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span>(e) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span></span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://www.jianshu.com/p/43de678e918a\" target=\"_blank\" rel=\"noopener\">Promise实现原理</a><br><a href=\"https://www.jianshu.com/p/b4f0425b22a1\" target=\"_blank\" rel=\"noopener\">Promise原理与实现</a></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"什么是Promise\"><a href=\"#什么是Promise\" class=\"headerlink\" title=\"什么是Promise\"></a>什么是Promise</h3><p>Promise 对象用于表示一个异步操作的最终完成 (或失败), 及其结果值.</p>","more":"<h3 id=\"Promise规范\"><a href=\"#Promise规范\" class=\"headerlink\" title=\"Promise规范\"></a>Promise规范</h3><ul>\n<li>ES6中使用<a href=\"https://juejin.im/post/5c4b0423e51d4525211c0fbc\" target=\"_blank\" rel=\"noopener\">Promise/A+</a>规范。</li>\n<li>Promise的标准理解<ul>\n<li>promise对象有三种状态<strong>pending</strong>、<strong>fulfilled</strong>和<strong>rejected</strong>。</li>\n<li>promise对象的状态必须有并且只有上述三种当中的一种。</li>\n<li>状态的改变只能是从pending到fulfilled或者pending到rejected。</li>\n<li>then方法返回一个promise。then 方法可以被同一个 promise 调用多次。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promise.then(onFulfilled, onRejected)</span><br></pre></td></tr></table></figure>\n<h3 id=\"Promise实现\"><a href=\"#Promise实现\" class=\"headerlink\" title=\"Promise实现\"></a>Promise实现</h3></li>\n</ul>\n</li>\n</ul>\n<ol>\n<li>构造函数<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Promise</span>(<span class=\"params\">resolver</span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure></li>\n<li>原型链<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.then = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.catch = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure></li>\n<li>静态方法<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.reject = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.all = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.race = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Promise基本结构\"><a href=\"#Promise基本结构\" class=\"headerlink\" title=\"Promise基本结构\"></a>Promise基本结构</h3></li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> promise=<span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    resolve(<span class=\"string\">'FULFILLED'</span>)</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">promise.then(<span class=\"function\"><span class=\"params\">a</span>=&gt;</span> alert(a));</span><br><span class=\"line\">promise.then(<span class=\"function\"><span class=\"params\">a</span> =&gt;</span> alert(a+<span class=\"number\">1</span>));</span><br></pre></td></tr></table></figure>\n<h3 id=\"Promise构造函数\"><a href=\"#Promise构造函数\" class=\"headerlink\" title=\"Promise构造函数\"></a>Promise构造函数</h3><p>构造函数用法总结：</p>\n<ol>\n<li>构造函数接收一个<strong>executor</strong>立即执行函数</li>\n<li><strong>executor</strong>立即执行函数接收一个<strong>resolve</strong>函数</li>\n<li><strong>promise</strong>对象的<strong>then</strong>方法绑定状态变为<strong>fulfilled</strong>时的回调</li>\n<li><strong>resolve</strong>函数被调用时会触发<strong>then</strong>方法中的回调<h4 id=\"构造函数的初步实现\"><a href=\"#构造函数的初步实现\" class=\"headerlink\" title=\"构造函数的初步实现\"></a>构造函数的初步实现</h4></li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Promise</span>(<span class=\"params\">executor</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    self.status = <span class=\"string\">'pending'</span>; <span class=\"comment\">//promise当前的状态</span></span><br><span class=\"line\">    self.data = <span class=\"literal\">undefined</span>; <span class=\"comment\">//promise的值</span></span><br><span class=\"line\">    self.onResolvedCallback = [];</span><br><span class=\"line\">    <span class=\"comment\">//promise状态变为resolve时的回调函数集，可能有多个</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolve</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(self.status === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">           self.status = <span class=\"string\">'resolved'</span>;</span><br><span class=\"line\">           self.data = value;</span><br><span class=\"line\">           <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; self.onResolvedCallback.length; i++) &#123;</span><br><span class=\"line\">               self.onResolvedCallback[i](value);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   executor(resolve);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.then = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onResolvedCallback.push(resolve);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"添加reject结果\"><a href=\"#添加reject结果\" class=\"headerlink\" title=\"添加reject结果\"></a>添加reject结果</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Promise</span>(<span class=\"params\">executor</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    self.status = <span class=\"string\">'pending'</span>; <span class=\"comment\">//promise当前的状态</span></span><br><span class=\"line\">    self.data = <span class=\"literal\">undefined</span>; <span class=\"comment\">//promise的值</span></span><br><span class=\"line\">    self.onResolvedCallback = [];</span><br><span class=\"line\">    <span class=\"comment\">//promise状态变为resolve时的回调函数集，可能有多个</span></span><br><span class=\"line\">    self.onRejectedCallback = [];</span><br><span class=\"line\">    <span class=\"comment\">//promise状态变为reject时的回调函数集，可能有多个</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolve</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(self.status === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">           self.status = <span class=\"string\">'resolved'</span>;</span><br><span class=\"line\">           self.data = value;</span><br><span class=\"line\">           <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; self.onResolvedCallback.length; i++) &#123;</span><br><span class=\"line\">               self.onResolvedCallback[i](value);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reject</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(self.status === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">            self.status = <span class=\"string\">'rejected'</span>;</span><br><span class=\"line\">            self.data = reason;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; self.onRejectedCallback.length; i++) &#123;</span><br><span class=\"line\">                self.onRejectedCallback[i](reason);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">       executor(resolve, reject);</span><br><span class=\"line\">   &#125; <span class=\"keyword\">catch</span> (e)&#123;</span><br><span class=\"line\">       reject(e);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.then = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">onResolve, onReject</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onResolvedCallback.push(onResolve);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onRejectedCallback.push(onReject);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>小结：</p>\n<ol>\n<li><strong>executor</strong>函数作为实参在创建<strong>Promise</strong>对象时传入<strong>Promise</strong>构造函数。</li>\n<li><strong>resolve</strong>和<strong>reject</strong>函数作为实参传入<strong>executor</strong>函数。</li>\n<li><strong>value</strong>作为实参传入<strong>resolve</strong>和<strong>reject</strong>函数。<h4 id=\"如果executor自执行函数中的resolve函数立即触发时，发现Promise失效\"><a href=\"#如果executor自执行函数中的resolve函数立即触发时，发现Promise失效\" class=\"headerlink\" title=\"如果executor自执行函数中的resolve函数立即触发时，发现Promise失效\"></a>如果executor自执行函数中的resolve函数立即触发时，发现Promise失效</h4></li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    resolve(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">promise.then(<span class=\"function\">(<span class=\"params\">a</span>) =&gt;</span> alert(a));</span><br></pre></td></tr></table></figure>\n<p>将promise的resolve和reject异步执行</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolve</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(self.status === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">            self.status = <span class=\"string\">'resolved'</span>;</span><br><span class=\"line\">            self.data = value;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; self.onResolvedCallback.length; i++) &#123;</span><br><span class=\"line\">                self.onResolvedCallback[i](value);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reject</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(self.status === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">            self.status = <span class=\"string\">'rejected'</span>;</span><br><span class=\"line\">            self.data = reason;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; self.onRejectedCallback.length; i++) &#123;</span><br><span class=\"line\">                self.onRejectedCallback[i](reason);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"then方法\"><a href=\"#then方法\" class=\"headerlink\" title=\"then方法\"></a>then方法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promise.then(onFulfilled, onRejected)</span><br></pre></td></tr></table></figure>\n<ol>\n<li><strong>then</strong>方法返回一个新的<strong>promise</strong>对象。</li>\n<li><strong>executor</strong>自执行函数中的<strong>resolve</strong>参数调用时执行<strong>then</strong>方法的第一个回调函数<strong>onResolved</strong>。</li>\n<li><strong>executor</strong>自执行函数中的<strong>reject</strong>参数调用时执行<strong>then</strong>方法的第二个回调函数<strong>onRejected</strong>。</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.then = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">onResolved, onRejected</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> promise2;</span><br><span class=\"line\">    onResolved = <span class=\"keyword\">typeof</span> onResolved === <span class=\"string\">'function'</span> </span><br><span class=\"line\">                ? onResolved </span><br><span class=\"line\">                : <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;<span class=\"keyword\">return</span> value&#125;;</span><br><span class=\"line\">    onRejected = <span class=\"keyword\">typeof</span> onRejected === <span class=\"string\">'function'</span> </span><br><span class=\"line\">                ? onRejected </span><br><span class=\"line\">                : <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">reason</span>) </span>&#123;<span class=\"keyword\">throw</span> reason&#125;;</span><br><span class=\"line\">    <span class=\"comment\">//promise对象当前状态为resolved</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(self.status === <span class=\"string\">'resolved'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> promise2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//调用onResolve回调函数</span></span><br><span class=\"line\">                <span class=\"keyword\">var</span> x = onResolved(self.data);</span><br><span class=\"line\">                <span class=\"comment\">//如果onResolve回调函数返回值为一个promise对象</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(x <span class=\"keyword\">instanceof</span>  <span class=\"built_in\">Promise</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//将它的结果作为promise2的结果</span></span><br><span class=\"line\">                    x.then(resolve, reject);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    resolve(x);<span class=\"comment\">//执行promise2的onResolve回调</span></span><br><span class=\"line\">           &#125;        </span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">                reject(e); <span class=\"comment\">//执行promise2的onReject回调</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//promise对象当前状态为rejected</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(self.status === <span class=\"string\">'rejected'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> promise2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> x = onRejected(self.data);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (x <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>) &#123;</span><br><span class=\"line\">                    x.then(resolve, reject)</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    resolve(x)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">                reject(e)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//promise对象当前状态为pending</span></span><br><span class=\"line\">    <span class=\"comment\">//此时并不能确定调用onResolved还是onRejected，需要等当前Promise状态确定。</span></span><br><span class=\"line\">    <span class=\"comment\">//所以需要将callBack放入promise1的回调数组中</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(self.status === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> promise2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">            self.onResolvedCallback.push(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> x = onResolved(self.data);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (x <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>) &#123;</span><br><span class=\"line\">                        x.then(resolve, reject);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        resolve(x);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">                    reject(e);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            self.onRejectedCallback.push(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> x = onRejected(self.data);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (x <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>) &#123;</span><br><span class=\"line\">                        x.then(resolve, reject)</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        resolve(x);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">                    reject(e)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">Promise</span> = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Promise</span>(<span class=\"params\">resolver</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> resolver !== <span class=\"string\">'function'</span>) &#123; <span class=\"comment\">//resolver必须是函数</span></span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'Promise resolver '</span> + resolver + <span class=\"string\">' is not a function'</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!(<span class=\"keyword\">this</span> <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>)) <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(resolver)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span> <span class=\"comment\">//保存this</span></span><br><span class=\"line\">        self.callbacks = [] <span class=\"comment\">//保存onResolve和onReject函数集合</span></span><br><span class=\"line\">        self.status = <span class=\"string\">'pending'</span> <span class=\"comment\">//当前状态</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolve</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">            setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">//异步调用</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (self.status !== <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                self.status = <span class=\"string\">'resolved'</span> <span class=\"comment\">//修改状态</span></span><br><span class=\"line\">                self.data = value</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; self.callbacks.length; i++) &#123;</span><br><span class=\"line\">                    self.callbacks[i].onResolved(value)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reject</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">            setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"comment\">//异步调用</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (self.status !== <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                self.status = <span class=\"string\">'rejected'</span> <span class=\"comment\">//修改状态</span></span><br><span class=\"line\">                self.data = reason</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; self.callbacks.length; i++) &#123;</span><br><span class=\"line\">                    self.callbacks[i].onRejected(reason)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            resolver(resolve, reject) <span class=\"comment\">//执行resolver函数</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">            reject(e)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolvePromise</span>(<span class=\"params\">promise, x, resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> then</span><br><span class=\"line\">        <span class=\"keyword\">var</span> thenCalledOrThrow = <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (promise === x) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> reject(<span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'Chaining cycle detected for promise!'</span>))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((x !== <span class=\"literal\">null</span>) &amp;&amp; ((<span class=\"keyword\">typeof</span> x === <span class=\"string\">'object'</span>) || (<span class=\"keyword\">typeof</span> x === <span class=\"string\">'function'</span>))) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                then = x.then</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> then === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">                    then.call(x, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">rs</span>(<span class=\"params\">y</span>) </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (thenCalledOrThrow) <span class=\"keyword\">return</span></span><br><span class=\"line\">                        thenCalledOrThrow = <span class=\"literal\">true</span></span><br><span class=\"line\">                        <span class=\"keyword\">return</span> resolvePromise(promise, y, resolve, reject)</span><br><span class=\"line\">                    &#125;, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">rj</span>(<span class=\"params\">r</span>) </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (thenCalledOrThrow) <span class=\"keyword\">return</span></span><br><span class=\"line\">                        thenCalledOrThrow = <span class=\"literal\">true</span></span><br><span class=\"line\">                        <span class=\"keyword\">return</span> reject(r)</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> resolve(x)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (thenCalledOrThrow) <span class=\"keyword\">return</span></span><br><span class=\"line\">                thenCalledOrThrow = <span class=\"literal\">true</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> reject(e)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> resolve(x)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.prototype.then = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">onResolved, onRejected</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//健壮性处理，处理点击穿透</span></span><br><span class=\"line\">        onResolved = <span class=\"keyword\">typeof</span> onResolved === <span class=\"string\">'function'</span> ? onResolved : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>)</span>&#123;<span class=\"keyword\">return</span> v&#125;</span><br><span class=\"line\">        onRejected = <span class=\"keyword\">typeof</span> onRejected === <span class=\"string\">'function'</span> ? onRejected : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">r</span>)</span>&#123;<span class=\"keyword\">throw</span> r&#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> promise2</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//promise状态为resolved</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (self.status === <span class=\"string\">'resolved'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> promise2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">                setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//调用then方法的onResolved回调</span></span><br><span class=\"line\">                        <span class=\"keyword\">var</span> x = onResolved(self.data)</span><br><span class=\"line\">                        <span class=\"comment\">//根据x的值修改promise2的状态</span></span><br><span class=\"line\">                        resolvePromise(promise2, x, resolve, reject)</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//promise2状态变为rejected</span></span><br><span class=\"line\">                        <span class=\"keyword\">return</span> reject(e)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//promise状态为rejected</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (self.status === <span class=\"string\">'rejected'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> promise2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">                setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//调用then方法的onReject回调</span></span><br><span class=\"line\">                        <span class=\"keyword\">var</span> x = onRejected(self.data)</span><br><span class=\"line\">                        <span class=\"comment\">//根据x的值修改promise2的状态</span></span><br><span class=\"line\">                        resolvePromise(promise2, x, resolve, reject)</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//promise2状态变为rejected</span></span><br><span class=\"line\">                        <span class=\"keyword\">return</span> reject(e)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//promise状态为pending</span></span><br><span class=\"line\">        <span class=\"comment\">//需要等待promise的状态改变</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (self.status === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> promise2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">                self.callbacks.push(&#123;</span><br><span class=\"line\">                    onResolved: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                            <span class=\"comment\">//调用then方法的onResolved回调</span></span><br><span class=\"line\">                            <span class=\"keyword\">var</span> x = onResolved(value)</span><br><span class=\"line\">                            <span class=\"comment\">//根据x的值修改promise2的状态</span></span><br><span class=\"line\">                            resolvePromise(promise2, x, resolve, reject)</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">                            <span class=\"comment\">//promise2状态变为rejected</span></span><br><span class=\"line\">                            <span class=\"keyword\">return</span> reject(e)</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    onRejected: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                            <span class=\"comment\">//调用then方法的onResolved回调</span></span><br><span class=\"line\">                            <span class=\"keyword\">var</span> x = onRejected(reason)</span><br><span class=\"line\">                            <span class=\"comment\">//根据x的值修改promise2的状态</span></span><br><span class=\"line\">                            resolvePromise(promise2, x, resolve, reject)</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">                            <span class=\"comment\">//promise2状态变为rejected</span></span><br><span class=\"line\">                            <span class=\"keyword\">return</span> reject(e)</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//获取当前Promise传递的值</span></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.prototype.valueOf = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.data</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//由then方法实现catch方法</span></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.prototype.catch = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">onRejected</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.then(<span class=\"literal\">null</span>, onRejected)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//finally方法</span></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.prototype.finally = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>)</span>&#123;</span><br><span class=\"line\">            setTimeout(fn)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> v</span><br><span class=\"line\">        &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">r</span>)</span>&#123;</span><br><span class=\"line\">            setTimeout(fn)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> r</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.prototype.spread = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn, onRejected</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">values</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> fn.apply(<span class=\"literal\">null</span>, values)</span><br><span class=\"line\">        &#125;, onRejected)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.prototype.inject = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn, onRejected</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> fn.apply(<span class=\"literal\">null</span>, fn.toString().match(<span class=\"regexp\">/\\((.*?)\\)/</span>)[<span class=\"number\">1</span>].split(<span class=\"string\">','</span>).map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>)</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> v[key];</span><br><span class=\"line\">            &#125;))</span><br><span class=\"line\">        &#125;, onRejected)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.prototype.delay = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">duration</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">                setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                    resolve(value)</span><br><span class=\"line\">                &#125;, duration)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">                setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                    reject(reason)</span><br><span class=\"line\">                &#125;, duration)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.all = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">promises</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> resolvedCounter = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> promiseNum = promises.length</span><br><span class=\"line\">            <span class=\"keyword\">var</span> resolvedValues = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(promiseNum)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; promiseNum; i++) &#123;</span><br><span class=\"line\">                (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">                    <span class=\"built_in\">Promise</span>.resolve(promises[i]).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">                        resolvedCounter++</span><br><span class=\"line\">                        resolvedValues[i] = value</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (resolvedCounter == promiseNum) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">return</span> resolve(resolvedValues)</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> reject(reason)</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                &#125;)(i)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.race = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">promises</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; promises.length; i++) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">Promise</span>.resolve(promises[i]).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> resolve(value)</span><br><span class=\"line\">                &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> reject(reason)</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.resolve = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">            resolvePromise(promise, value, resolve, reject)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> promise</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.reject = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">            reject(reason)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.fcall = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 虽然fn可以接收到上一层then里传来的参数，但是其实是undefined，所以跟没有是一样的，因为resolve没参数啊</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve().then(fn)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.done = <span class=\"built_in\">Promise</span>.stop = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.deferred = <span class=\"built_in\">Promise</span>.defer = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> dfd = &#123;&#125;</span><br><span class=\"line\">        dfd.promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">            dfd.resolve = resolve</span><br><span class=\"line\">            dfd.reject = reject</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dfd</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123; <span class=\"comment\">// CommonJS compliance</span></span><br><span class=\"line\">        <span class=\"built_in\">module</span>.exports = <span class=\"built_in\">Promise</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span>(e) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span></span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://www.jianshu.com/p/43de678e918a\" target=\"_blank\" rel=\"noopener\">Promise实现原理</a><br><a href=\"https://www.jianshu.com/p/b4f0425b22a1\" target=\"_blank\" rel=\"noopener\">Promise原理与实现</a></p>"},{"layout":"[post]","title":"vue生命周期以及nextTick应用","date":"2019-04-01T02:14:30.000Z","_content":"\n## vue 的生命周期\n\n<!-- more -->\n\n![yasuo](shengming.webp)  \n![yasuo](biaoge.webp)\n\n- **beforeCreate**:在实例初始化之后，数据观测 data observer(props、data、computed) 和 event/watcher 事件配置之前被调用。\n- **created**:实例已经创建完成之后被调用。在这一步，实例已完成以下的配置：数据观测(data observer)，属性和方法的运算， watch/event 事件回调。然而，挂载阶段还没开始，\\$el 属性目前不可见。\n- **beforeMount**:在挂载开始之前被调用：相关的 render 函数首次被调用。\n- **mounted**:el 被新创建的 vm.\\$el 替换，并挂载到实例上去之后调用该钩子。\n- **beforeUpdate**:数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。 你可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。\n- **updated**:无论是组件本身的数据变更，还是从父组件接收到的 props 或者从 vuex 里面拿到的数据有变更，都会触发虚拟 DOM 重新渲染和打补丁，并在之后调用 updated。\n- **beforeDestroy**:实例销毁之前调用。在这一步，实例仍然完全可用。\n- **destroyed**:Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。 该钩子在服务器端渲染期间不被调用。\n\n##### 注意\n\ncreated 阶段的 ajax 请求与 mounted 请求的区别：前者页面视图未出现，如果请求信息过多，页面会长时间处于白屏状态。\n\n## 单个组件的生命周期\n\n1. 初始化组件时，仅执行了`beforeCreate/Created/beforeMount/mounted`四个钩子函数\n2. 当改变 data 中定义的变量（响应式变量）时，会执行`beforeUpdate/updated`钩子函数\n3. 当切换组件（当前组件未缓存）时，会执行`beforeDestory/destroyed`钩子函数\n4. 初始化和销毁时的生命钩子函数均只会执行一次，`beforeUpdate/updated`可多次执行\n\n## Vue.nextTick()\n\n> 在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。\n\n获取更新后的 DOM 言外之意就是什么操作需要用到了更新后的 DOM 而不能使用之前的 DOM 或者使用更新前的 DOM 会出问题，所以就衍生出了这个获取更新后的 DOM 的 Vue 方法。\n\n> **Vue.nextTick()回调函数中的执行的应该是会对 DOM 进行操作的 js 代码**\n\n### 什么时候需要用 Vue.nextTick()?\n\n- 你在 Vue 生命周期的 created()钩子函数进行的 DOM 操作一定要放在 Vue.nextTick()的回调函数中。原因是什么呢，原因是在 created()钩子函数执行的时候 DOM 其实并未进行任何渲染，而此时进行 DOM 操作无异于徒劳，所以此处一定要将 DOM 操作的 js 代码放进 Vue.nextTick()的回调函数中。与之对应的就是 mounted 钩子函数，因为该钩子函数执行时所有的 DOM 挂载和渲染都已完成，此时在该钩子函数中进行任何 DOM 操作都不会有问题 。\n- 在数据变化后要执行的某个操作，当你设置 vm.someData = 'new value'，DOM 并不会马上更新，而是在异步队列被清除，也就是下一个事件循环开始时执行更新时才会进行必要的 DOM 更新。如果此时你想要根据更新的 DOM 状态去做某些事情，就会出现问题。。为了在数据变化之后等待 Vue 完成更新 DOM ，可以在数据变化之后立即使用 Vue.nextTick(callback) 。这样回调函数在 DOM 更新完成后就会调用。\n- mounted 不会承诺所有的子组件也都一起被挂载。如果你希望等到整个视图都渲染完毕，可以用 vm.\\$nextTick 替换掉 mounted.\n\n```js\nmounted: function () {\nthis.$nextTick(function () {\n\n// Code that will run only after the\n// entire view has been rendered\n})\n}\n```\n\n[原文地址](https://www.jianshu.com/p/46c9d777cab1)\n","source":"_posts/vue生命周期以及nextTick应用.md","raw":"---\nlayout: '[post]'\ntitle: vue生命周期以及nextTick应用\ndate: 2019-04-01 10:14:30\ntags: vue\n---\n\n## vue 的生命周期\n\n<!-- more -->\n\n![yasuo](shengming.webp)  \n![yasuo](biaoge.webp)\n\n- **beforeCreate**:在实例初始化之后，数据观测 data observer(props、data、computed) 和 event/watcher 事件配置之前被调用。\n- **created**:实例已经创建完成之后被调用。在这一步，实例已完成以下的配置：数据观测(data observer)，属性和方法的运算， watch/event 事件回调。然而，挂载阶段还没开始，\\$el 属性目前不可见。\n- **beforeMount**:在挂载开始之前被调用：相关的 render 函数首次被调用。\n- **mounted**:el 被新创建的 vm.\\$el 替换，并挂载到实例上去之后调用该钩子。\n- **beforeUpdate**:数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。 你可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。\n- **updated**:无论是组件本身的数据变更，还是从父组件接收到的 props 或者从 vuex 里面拿到的数据有变更，都会触发虚拟 DOM 重新渲染和打补丁，并在之后调用 updated。\n- **beforeDestroy**:实例销毁之前调用。在这一步，实例仍然完全可用。\n- **destroyed**:Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。 该钩子在服务器端渲染期间不被调用。\n\n##### 注意\n\ncreated 阶段的 ajax 请求与 mounted 请求的区别：前者页面视图未出现，如果请求信息过多，页面会长时间处于白屏状态。\n\n## 单个组件的生命周期\n\n1. 初始化组件时，仅执行了`beforeCreate/Created/beforeMount/mounted`四个钩子函数\n2. 当改变 data 中定义的变量（响应式变量）时，会执行`beforeUpdate/updated`钩子函数\n3. 当切换组件（当前组件未缓存）时，会执行`beforeDestory/destroyed`钩子函数\n4. 初始化和销毁时的生命钩子函数均只会执行一次，`beforeUpdate/updated`可多次执行\n\n## Vue.nextTick()\n\n> 在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。\n\n获取更新后的 DOM 言外之意就是什么操作需要用到了更新后的 DOM 而不能使用之前的 DOM 或者使用更新前的 DOM 会出问题，所以就衍生出了这个获取更新后的 DOM 的 Vue 方法。\n\n> **Vue.nextTick()回调函数中的执行的应该是会对 DOM 进行操作的 js 代码**\n\n### 什么时候需要用 Vue.nextTick()?\n\n- 你在 Vue 生命周期的 created()钩子函数进行的 DOM 操作一定要放在 Vue.nextTick()的回调函数中。原因是什么呢，原因是在 created()钩子函数执行的时候 DOM 其实并未进行任何渲染，而此时进行 DOM 操作无异于徒劳，所以此处一定要将 DOM 操作的 js 代码放进 Vue.nextTick()的回调函数中。与之对应的就是 mounted 钩子函数，因为该钩子函数执行时所有的 DOM 挂载和渲染都已完成，此时在该钩子函数中进行任何 DOM 操作都不会有问题 。\n- 在数据变化后要执行的某个操作，当你设置 vm.someData = 'new value'，DOM 并不会马上更新，而是在异步队列被清除，也就是下一个事件循环开始时执行更新时才会进行必要的 DOM 更新。如果此时你想要根据更新的 DOM 状态去做某些事情，就会出现问题。。为了在数据变化之后等待 Vue 完成更新 DOM ，可以在数据变化之后立即使用 Vue.nextTick(callback) 。这样回调函数在 DOM 更新完成后就会调用。\n- mounted 不会承诺所有的子组件也都一起被挂载。如果你希望等到整个视图都渲染完毕，可以用 vm.\\$nextTick 替换掉 mounted.\n\n```js\nmounted: function () {\nthis.$nextTick(function () {\n\n// Code that will run only after the\n// entire view has been rendered\n})\n}\n```\n\n[原文地址](https://www.jianshu.com/p/46c9d777cab1)\n","slug":"vue生命周期以及nextTick应用","published":1,"updated":"2020-03-04T07:52:57.000Z","comments":1,"photos":[],"link":"","_id":"ck7onzqxi000iyts6cd9g3s63","content":"<h2 id=\"vue-的生命周期\"><a href=\"#vue-的生命周期\" class=\"headerlink\" title=\"vue 的生命周期\"></a>vue 的生命周期</h2><a id=\"more\"></a>\n\n<p><img src=\"/2019/04/01/vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E4%BB%A5%E5%8F%8AnextTick%E5%BA%94%E7%94%A8/shengming.webp\" alt=\"yasuo\"><br><img src=\"/2019/04/01/vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E4%BB%A5%E5%8F%8AnextTick%E5%BA%94%E7%94%A8/biaoge.webp\" alt=\"yasuo\"></p>\n<ul>\n<li><strong>beforeCreate</strong>:在实例初始化之后，数据观测 data observer(props、data、computed) 和 event/watcher 事件配置之前被调用。</li>\n<li><strong>created</strong>:实例已经创建完成之后被调用。在这一步，实例已完成以下的配置：数据观测(data observer)，属性和方法的运算， watch/event 事件回调。然而，挂载阶段还没开始，$el 属性目前不可见。</li>\n<li><strong>beforeMount</strong>:在挂载开始之前被调用：相关的 render 函数首次被调用。</li>\n<li><strong>mounted</strong>:el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子。</li>\n<li><strong>beforeUpdate</strong>:数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。 你可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。</li>\n<li><strong>updated</strong>:无论是组件本身的数据变更，还是从父组件接收到的 props 或者从 vuex 里面拿到的数据有变更，都会触发虚拟 DOM 重新渲染和打补丁，并在之后调用 updated。</li>\n<li><strong>beforeDestroy</strong>:实例销毁之前调用。在这一步，实例仍然完全可用。</li>\n<li><strong>destroyed</strong>:Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。 该钩子在服务器端渲染期间不被调用。</li>\n</ul>\n<h5 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h5><p>created 阶段的 ajax 请求与 mounted 请求的区别：前者页面视图未出现，如果请求信息过多，页面会长时间处于白屏状态。</p>\n<h2 id=\"单个组件的生命周期\"><a href=\"#单个组件的生命周期\" class=\"headerlink\" title=\"单个组件的生命周期\"></a>单个组件的生命周期</h2><ol>\n<li>初始化组件时，仅执行了<code>beforeCreate/Created/beforeMount/mounted</code>四个钩子函数</li>\n<li>当改变 data 中定义的变量（响应式变量）时，会执行<code>beforeUpdate/updated</code>钩子函数</li>\n<li>当切换组件（当前组件未缓存）时，会执行<code>beforeDestory/destroyed</code>钩子函数</li>\n<li>初始化和销毁时的生命钩子函数均只会执行一次，<code>beforeUpdate/updated</code>可多次执行</li>\n</ol>\n<h2 id=\"Vue-nextTick\"><a href=\"#Vue-nextTick\" class=\"headerlink\" title=\"Vue.nextTick()\"></a>Vue.nextTick()</h2><blockquote>\n<p>在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。</p>\n</blockquote>\n<p>获取更新后的 DOM 言外之意就是什么操作需要用到了更新后的 DOM 而不能使用之前的 DOM 或者使用更新前的 DOM 会出问题，所以就衍生出了这个获取更新后的 DOM 的 Vue 方法。</p>\n<blockquote>\n<p><strong>Vue.nextTick()回调函数中的执行的应该是会对 DOM 进行操作的 js 代码</strong></p>\n</blockquote>\n<h3 id=\"什么时候需要用-Vue-nextTick\"><a href=\"#什么时候需要用-Vue-nextTick\" class=\"headerlink\" title=\"什么时候需要用 Vue.nextTick()?\"></a>什么时候需要用 Vue.nextTick()?</h3><ul>\n<li>你在 Vue 生命周期的 created()钩子函数进行的 DOM 操作一定要放在 Vue.nextTick()的回调函数中。原因是什么呢，原因是在 created()钩子函数执行的时候 DOM 其实并未进行任何渲染，而此时进行 DOM 操作无异于徒劳，所以此处一定要将 DOM 操作的 js 代码放进 Vue.nextTick()的回调函数中。与之对应的就是 mounted 钩子函数，因为该钩子函数执行时所有的 DOM 挂载和渲染都已完成，此时在该钩子函数中进行任何 DOM 操作都不会有问题 。</li>\n<li>在数据变化后要执行的某个操作，当你设置 vm.someData = ‘new value’，DOM 并不会马上更新，而是在异步队列被清除，也就是下一个事件循环开始时执行更新时才会进行必要的 DOM 更新。如果此时你想要根据更新的 DOM 状态去做某些事情，就会出现问题。。为了在数据变化之后等待 Vue 完成更新 DOM ，可以在数据变化之后立即使用 Vue.nextTick(callback) 。这样回调函数在 DOM 更新完成后就会调用。</li>\n<li>mounted 不会承诺所有的子组件也都一起被挂载。如果你希望等到整个视图都渲染完毕，可以用 vm.$nextTick 替换掉 mounted.</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mounted: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">this</span>.$nextTick(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Code that will run only after the</span></span><br><span class=\"line\"><span class=\"comment\">// entire view has been rendered</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://www.jianshu.com/p/46c9d777cab1\" target=\"_blank\" rel=\"noopener\">原文地址</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"vue-的生命周期\"><a href=\"#vue-的生命周期\" class=\"headerlink\" title=\"vue 的生命周期\"></a>vue 的生命周期</h2>","more":"<p><img src=\"/2019/04/01/vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E4%BB%A5%E5%8F%8AnextTick%E5%BA%94%E7%94%A8/shengming.webp\" alt=\"yasuo\"><br><img src=\"/2019/04/01/vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E4%BB%A5%E5%8F%8AnextTick%E5%BA%94%E7%94%A8/biaoge.webp\" alt=\"yasuo\"></p>\n<ul>\n<li><strong>beforeCreate</strong>:在实例初始化之后，数据观测 data observer(props、data、computed) 和 event/watcher 事件配置之前被调用。</li>\n<li><strong>created</strong>:实例已经创建完成之后被调用。在这一步，实例已完成以下的配置：数据观测(data observer)，属性和方法的运算， watch/event 事件回调。然而，挂载阶段还没开始，$el 属性目前不可见。</li>\n<li><strong>beforeMount</strong>:在挂载开始之前被调用：相关的 render 函数首次被调用。</li>\n<li><strong>mounted</strong>:el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子。</li>\n<li><strong>beforeUpdate</strong>:数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。 你可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。</li>\n<li><strong>updated</strong>:无论是组件本身的数据变更，还是从父组件接收到的 props 或者从 vuex 里面拿到的数据有变更，都会触发虚拟 DOM 重新渲染和打补丁，并在之后调用 updated。</li>\n<li><strong>beforeDestroy</strong>:实例销毁之前调用。在这一步，实例仍然完全可用。</li>\n<li><strong>destroyed</strong>:Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。 该钩子在服务器端渲染期间不被调用。</li>\n</ul>\n<h5 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h5><p>created 阶段的 ajax 请求与 mounted 请求的区别：前者页面视图未出现，如果请求信息过多，页面会长时间处于白屏状态。</p>\n<h2 id=\"单个组件的生命周期\"><a href=\"#单个组件的生命周期\" class=\"headerlink\" title=\"单个组件的生命周期\"></a>单个组件的生命周期</h2><ol>\n<li>初始化组件时，仅执行了<code>beforeCreate/Created/beforeMount/mounted</code>四个钩子函数</li>\n<li>当改变 data 中定义的变量（响应式变量）时，会执行<code>beforeUpdate/updated</code>钩子函数</li>\n<li>当切换组件（当前组件未缓存）时，会执行<code>beforeDestory/destroyed</code>钩子函数</li>\n<li>初始化和销毁时的生命钩子函数均只会执行一次，<code>beforeUpdate/updated</code>可多次执行</li>\n</ol>\n<h2 id=\"Vue-nextTick\"><a href=\"#Vue-nextTick\" class=\"headerlink\" title=\"Vue.nextTick()\"></a>Vue.nextTick()</h2><blockquote>\n<p>在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。</p>\n</blockquote>\n<p>获取更新后的 DOM 言外之意就是什么操作需要用到了更新后的 DOM 而不能使用之前的 DOM 或者使用更新前的 DOM 会出问题，所以就衍生出了这个获取更新后的 DOM 的 Vue 方法。</p>\n<blockquote>\n<p><strong>Vue.nextTick()回调函数中的执行的应该是会对 DOM 进行操作的 js 代码</strong></p>\n</blockquote>\n<h3 id=\"什么时候需要用-Vue-nextTick\"><a href=\"#什么时候需要用-Vue-nextTick\" class=\"headerlink\" title=\"什么时候需要用 Vue.nextTick()?\"></a>什么时候需要用 Vue.nextTick()?</h3><ul>\n<li>你在 Vue 生命周期的 created()钩子函数进行的 DOM 操作一定要放在 Vue.nextTick()的回调函数中。原因是什么呢，原因是在 created()钩子函数执行的时候 DOM 其实并未进行任何渲染，而此时进行 DOM 操作无异于徒劳，所以此处一定要将 DOM 操作的 js 代码放进 Vue.nextTick()的回调函数中。与之对应的就是 mounted 钩子函数，因为该钩子函数执行时所有的 DOM 挂载和渲染都已完成，此时在该钩子函数中进行任何 DOM 操作都不会有问题 。</li>\n<li>在数据变化后要执行的某个操作，当你设置 vm.someData = ‘new value’，DOM 并不会马上更新，而是在异步队列被清除，也就是下一个事件循环开始时执行更新时才会进行必要的 DOM 更新。如果此时你想要根据更新的 DOM 状态去做某些事情，就会出现问题。。为了在数据变化之后等待 Vue 完成更新 DOM ，可以在数据变化之后立即使用 Vue.nextTick(callback) 。这样回调函数在 DOM 更新完成后就会调用。</li>\n<li>mounted 不会承诺所有的子组件也都一起被挂载。如果你希望等到整个视图都渲染完毕，可以用 vm.$nextTick 替换掉 mounted.</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mounted: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">this</span>.$nextTick(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Code that will run only after the</span></span><br><span class=\"line\"><span class=\"comment\">// entire view has been rendered</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://www.jianshu.com/p/46c9d777cab1\" target=\"_blank\" rel=\"noopener\">原文地址</a></p>"},{"layout":"[post]","title":"promise.all和promise.race","date":"2019-02-17T01:57:01.000Z","_content":"## Promise.all和Promise.race的功能\n### Promise.all\n**Promise.all可以将多个Promise实例包装成一个新的Promise实例。同时，成功和失败的返回值是不同的，成功的时候返回的是一个结果数组，而失败的时候则返回最先被reject失败状态的值。**\n<!-- more -->\n```js\nlet p1 = new Promise((resolve, reject) => {\n  resolve('p1完成')\n})\n\nlet p2 = new Promise((resolve, reject) => {\n  resolve('p2完成')\n})\n\nlet p3 = Promse.reject('p3失败')\n\nPromise.all([p1, p2]).then((result) => {\n  console.log(result)               //['p1完成', 'p2完成']\n}).catch((error) => {\n  console.log(error)\n})\n\nPromise.all([p1,p3,p2]).then((result) => {\n  console.log(result)\n}).catch((error) => {\n  console.log(error)      // 失败了，打出 ''p3失败'\n})\n```\n### Promise.race\n**Promise.race可以将多个Promise实例包装成一个新的Promise实例。同时，成功和失败的返回值是不同的，成功的时候返回的是第一个返回的resolve，而失败的时候则返回最先被reject失败状态的值。（换句话说就是返回最快的那个）**\n\n```js\nlet p1 = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve('success')\n  },1000)\n})\n\nlet p2 = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    reject('failed')\n  }, 500)\n})\n\nPromise.race([p1, p2]).then((result) => {\n  console.log(result)\n}).catch((error) => {\n  console.log(error)  // 打开的是 'failed'\n})\n```\n## 简易实现\n### Promise.all\n```js\nPromise.all = (arr) => {\n    let resultList = [];\n    return new Promise((resolve, reject) => {\n        let i = 0;\n        next();\n        next = () => {\n            arr[i].then((res, rej) => {\n                if (!rej) {\n                    resultList.push(res);\n                    i++;\n                } else {\n                    reject(rej);\n                }\n                if (i == arr.length) {\n                    resolve(resultList);\n                } else {\n                    next();\n                }\n            })\n        }\n    })\n};\n```\n### Promise.race\n```js\nPromise.race = (arr) => {\n    let resultList = [];\n    return new Promise((resolve, reject) => {\n        let i = 0;\n        next();\n        next = () => {\n            arr[i].then((res, rej) => {\n                if (!rej) {\n                    resultList.push(res);\n                    i++;\n                } else {\n                    reject(rej);\n                }\n                if (i == arr.length) {\n                    resolve(resultList);\n                } else {\n                    next();\n                }\n            })\n        }\n    })\n};\n```\n## Promise.all的问题\n**在上面的代码中，Promise.all使用的是循环调用的方式，也就算是链式调用（Promise链），事实上Promise.all是并发，同时进行所有的promise方法。**\n\n```js\nPromise.all = (arr) => {\n    let resultList = new Array(arr.length);\n    return new Promise((resolve, reject) => {\n        let temp = 0;\n        for (let i = 0, len = arr.length; i < len; i++) {\n            arr[i].then((res, rej) => {\n                if (!rej) {\n                    resultList[i] = (res);\n                    if (temp == arr.length) {\n                        resolve(resultList);\n                    }\n                    temp++;\n                } else {\n                    reject(rej);\n                }\n            })\n        }\n    })\n};\n```\n\n","source":"_posts/promose-all和promise-race.md","raw":"---\nlayout: '[post]'\ntitle: promise.all和promise.race\ndate: 2019-02-17 09:57:01\ntags: Promise\n---\n## Promise.all和Promise.race的功能\n### Promise.all\n**Promise.all可以将多个Promise实例包装成一个新的Promise实例。同时，成功和失败的返回值是不同的，成功的时候返回的是一个结果数组，而失败的时候则返回最先被reject失败状态的值。**\n<!-- more -->\n```js\nlet p1 = new Promise((resolve, reject) => {\n  resolve('p1完成')\n})\n\nlet p2 = new Promise((resolve, reject) => {\n  resolve('p2完成')\n})\n\nlet p3 = Promse.reject('p3失败')\n\nPromise.all([p1, p2]).then((result) => {\n  console.log(result)               //['p1完成', 'p2完成']\n}).catch((error) => {\n  console.log(error)\n})\n\nPromise.all([p1,p3,p2]).then((result) => {\n  console.log(result)\n}).catch((error) => {\n  console.log(error)      // 失败了，打出 ''p3失败'\n})\n```\n### Promise.race\n**Promise.race可以将多个Promise实例包装成一个新的Promise实例。同时，成功和失败的返回值是不同的，成功的时候返回的是第一个返回的resolve，而失败的时候则返回最先被reject失败状态的值。（换句话说就是返回最快的那个）**\n\n```js\nlet p1 = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve('success')\n  },1000)\n})\n\nlet p2 = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    reject('failed')\n  }, 500)\n})\n\nPromise.race([p1, p2]).then((result) => {\n  console.log(result)\n}).catch((error) => {\n  console.log(error)  // 打开的是 'failed'\n})\n```\n## 简易实现\n### Promise.all\n```js\nPromise.all = (arr) => {\n    let resultList = [];\n    return new Promise((resolve, reject) => {\n        let i = 0;\n        next();\n        next = () => {\n            arr[i].then((res, rej) => {\n                if (!rej) {\n                    resultList.push(res);\n                    i++;\n                } else {\n                    reject(rej);\n                }\n                if (i == arr.length) {\n                    resolve(resultList);\n                } else {\n                    next();\n                }\n            })\n        }\n    })\n};\n```\n### Promise.race\n```js\nPromise.race = (arr) => {\n    let resultList = [];\n    return new Promise((resolve, reject) => {\n        let i = 0;\n        next();\n        next = () => {\n            arr[i].then((res, rej) => {\n                if (!rej) {\n                    resultList.push(res);\n                    i++;\n                } else {\n                    reject(rej);\n                }\n                if (i == arr.length) {\n                    resolve(resultList);\n                } else {\n                    next();\n                }\n            })\n        }\n    })\n};\n```\n## Promise.all的问题\n**在上面的代码中，Promise.all使用的是循环调用的方式，也就算是链式调用（Promise链），事实上Promise.all是并发，同时进行所有的promise方法。**\n\n```js\nPromise.all = (arr) => {\n    let resultList = new Array(arr.length);\n    return new Promise((resolve, reject) => {\n        let temp = 0;\n        for (let i = 0, len = arr.length; i < len; i++) {\n            arr[i].then((res, rej) => {\n                if (!rej) {\n                    resultList[i] = (res);\n                    if (temp == arr.length) {\n                        resolve(resultList);\n                    }\n                    temp++;\n                } else {\n                    reject(rej);\n                }\n            })\n        }\n    })\n};\n```\n\n","slug":"promose-all和promise-race","published":1,"updated":"2020-01-24T14:55:10.000Z","comments":1,"photos":[],"link":"","_id":"ck7onzqxo000lyts6548ac0g3","content":"<h2 id=\"Promise-all和Promise-race的功能\"><a href=\"#Promise-all和Promise-race的功能\" class=\"headerlink\" title=\"Promise.all和Promise.race的功能\"></a>Promise.all和Promise.race的功能</h2><h3 id=\"Promise-all\"><a href=\"#Promise-all\" class=\"headerlink\" title=\"Promise.all\"></a>Promise.all</h3><p><strong>Promise.all可以将多个Promise实例包装成一个新的Promise实例。同时，成功和失败的返回值是不同的，成功的时候返回的是一个结果数组，而失败的时候则返回最先被reject失败状态的值。</strong></p>\n<a id=\"more\"></a>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  resolve(<span class=\"string\">'p1完成'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  resolve(<span class=\"string\">'p2完成'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p3 = Promse.reject(<span class=\"string\">'p3失败'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.all([p1, p2]).then(<span class=\"function\">(<span class=\"params\">result</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(result)               <span class=\"comment\">//['p1完成', 'p2完成']</span></span><br><span class=\"line\">&#125;).catch(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(error)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.all([p1,p3,p2]).then(<span class=\"function\">(<span class=\"params\">result</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(result)</span><br><span class=\"line\">&#125;).catch(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(error)      <span class=\"comment\">// 失败了，打出 ''p3失败'</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"Promise-race\"><a href=\"#Promise-race\" class=\"headerlink\" title=\"Promise.race\"></a>Promise.race</h3><p><strong>Promise.race可以将多个Promise实例包装成一个新的Promise实例。同时，成功和失败的返回值是不同的，成功的时候返回的是第一个返回的resolve，而失败的时候则返回最先被reject失败状态的值。（换句话说就是返回最快的那个）</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    resolve(<span class=\"string\">'success'</span>)</span><br><span class=\"line\">  &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    reject(<span class=\"string\">'failed'</span>)</span><br><span class=\"line\">  &#125;, <span class=\"number\">500</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.race([p1, p2]).then(<span class=\"function\">(<span class=\"params\">result</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(result)</span><br><span class=\"line\">&#125;).catch(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(error)  <span class=\"comment\">// 打开的是 'failed'</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"简易实现\"><a href=\"#简易实现\" class=\"headerlink\" title=\"简易实现\"></a>简易实现</h2><h3 id=\"Promise-all-1\"><a href=\"#Promise-all-1\" class=\"headerlink\" title=\"Promise.all\"></a>Promise.all</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.all = <span class=\"function\">(<span class=\"params\">arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> resultList = [];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">        next();</span><br><span class=\"line\">        next = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            arr[i].then(<span class=\"function\">(<span class=\"params\">res, rej</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!rej) &#123;</span><br><span class=\"line\">                    resultList.push(res);</span><br><span class=\"line\">                    i++;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    reject(rej);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (i == arr.length) &#123;</span><br><span class=\"line\">                    resolve(resultList);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    next();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Promise-race-1\"><a href=\"#Promise-race-1\" class=\"headerlink\" title=\"Promise.race\"></a>Promise.race</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.race = <span class=\"function\">(<span class=\"params\">arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> resultList = [];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">        next();</span><br><span class=\"line\">        next = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            arr[i].then(<span class=\"function\">(<span class=\"params\">res, rej</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!rej) &#123;</span><br><span class=\"line\">                    resultList.push(res);</span><br><span class=\"line\">                    i++;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    reject(rej);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (i == arr.length) &#123;</span><br><span class=\"line\">                    resolve(resultList);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    next();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Promise-all的问题\"><a href=\"#Promise-all的问题\" class=\"headerlink\" title=\"Promise.all的问题\"></a>Promise.all的问题</h2><p><strong>在上面的代码中，Promise.all使用的是循环调用的方式，也就算是链式调用（Promise链），事实上Promise.all是并发，同时进行所有的promise方法。</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.all = <span class=\"function\">(<span class=\"params\">arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> resultList = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(arr.length);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> temp = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, len = arr.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">            arr[i].then(<span class=\"function\">(<span class=\"params\">res, rej</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!rej) &#123;</span><br><span class=\"line\">                    resultList[i] = (res);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (temp == arr.length) &#123;</span><br><span class=\"line\">                        resolve(resultList);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    temp++;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    reject(rej);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<h2 id=\"Promise-all和Promise-race的功能\"><a href=\"#Promise-all和Promise-race的功能\" class=\"headerlink\" title=\"Promise.all和Promise.race的功能\"></a>Promise.all和Promise.race的功能</h2><h3 id=\"Promise-all\"><a href=\"#Promise-all\" class=\"headerlink\" title=\"Promise.all\"></a>Promise.all</h3><p><strong>Promise.all可以将多个Promise实例包装成一个新的Promise实例。同时，成功和失败的返回值是不同的，成功的时候返回的是一个结果数组，而失败的时候则返回最先被reject失败状态的值。</strong></p>","more":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  resolve(<span class=\"string\">'p1完成'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  resolve(<span class=\"string\">'p2完成'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p3 = Promse.reject(<span class=\"string\">'p3失败'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.all([p1, p2]).then(<span class=\"function\">(<span class=\"params\">result</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(result)               <span class=\"comment\">//['p1完成', 'p2完成']</span></span><br><span class=\"line\">&#125;).catch(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(error)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.all([p1,p3,p2]).then(<span class=\"function\">(<span class=\"params\">result</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(result)</span><br><span class=\"line\">&#125;).catch(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(error)      <span class=\"comment\">// 失败了，打出 ''p3失败'</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"Promise-race\"><a href=\"#Promise-race\" class=\"headerlink\" title=\"Promise.race\"></a>Promise.race</h3><p><strong>Promise.race可以将多个Promise实例包装成一个新的Promise实例。同时，成功和失败的返回值是不同的，成功的时候返回的是第一个返回的resolve，而失败的时候则返回最先被reject失败状态的值。（换句话说就是返回最快的那个）</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    resolve(<span class=\"string\">'success'</span>)</span><br><span class=\"line\">  &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    reject(<span class=\"string\">'failed'</span>)</span><br><span class=\"line\">  &#125;, <span class=\"number\">500</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.race([p1, p2]).then(<span class=\"function\">(<span class=\"params\">result</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(result)</span><br><span class=\"line\">&#125;).catch(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(error)  <span class=\"comment\">// 打开的是 'failed'</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"简易实现\"><a href=\"#简易实现\" class=\"headerlink\" title=\"简易实现\"></a>简易实现</h2><h3 id=\"Promise-all-1\"><a href=\"#Promise-all-1\" class=\"headerlink\" title=\"Promise.all\"></a>Promise.all</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.all = <span class=\"function\">(<span class=\"params\">arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> resultList = [];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">        next();</span><br><span class=\"line\">        next = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            arr[i].then(<span class=\"function\">(<span class=\"params\">res, rej</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!rej) &#123;</span><br><span class=\"line\">                    resultList.push(res);</span><br><span class=\"line\">                    i++;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    reject(rej);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (i == arr.length) &#123;</span><br><span class=\"line\">                    resolve(resultList);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    next();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Promise-race-1\"><a href=\"#Promise-race-1\" class=\"headerlink\" title=\"Promise.race\"></a>Promise.race</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.race = <span class=\"function\">(<span class=\"params\">arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> resultList = [];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">        next();</span><br><span class=\"line\">        next = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            arr[i].then(<span class=\"function\">(<span class=\"params\">res, rej</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!rej) &#123;</span><br><span class=\"line\">                    resultList.push(res);</span><br><span class=\"line\">                    i++;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    reject(rej);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (i == arr.length) &#123;</span><br><span class=\"line\">                    resolve(resultList);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    next();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Promise-all的问题\"><a href=\"#Promise-all的问题\" class=\"headerlink\" title=\"Promise.all的问题\"></a>Promise.all的问题</h2><p><strong>在上面的代码中，Promise.all使用的是循环调用的方式，也就算是链式调用（Promise链），事实上Promise.all是并发，同时进行所有的promise方法。</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.all = <span class=\"function\">(<span class=\"params\">arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> resultList = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(arr.length);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> temp = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, len = arr.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">            arr[i].then(<span class=\"function\">(<span class=\"params\">res, rej</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!rej) &#123;</span><br><span class=\"line\">                    resultList[i] = (res);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (temp == arr.length) &#123;</span><br><span class=\"line\">                        resolve(resultList);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    temp++;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    reject(rej);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"layout":"[post]","title":"webp在项目中的应用","date":"2019-03-22T03:11:26.000Z","_content":"## 什么是webp？\nWebP格式，谷歌开发的一种旨在加快图片加载速度的图片格式。图片压缩体积大约只有JPEG的2/3，并能节省大量的服务器宽带资源和数据空间。\n<!-- more -->\n\n## 为什么要用webp\n1. 减小图片加载资源的大小、节省用户流量资源\n2. 降低服务器流量资源  \n### 压缩率\n![yasuo](yasuo.webp)\n\n## webp兼容性情况\n![yasuo](jianrong.webp)  \n结果：谷歌全面支持、安卓浏览器从4.2开始支持。那么在页面中对于安卓用户中图片资源加载大小会有大幅度下降。\n\n## webp在各大网站的使用\n淘宝中大量使用webp。  \n![yasuo](taobao.webp)  \n各大cdn也是支持webp图片格式输出。\n\n## 项目中的实践\n![yasuo](liucheng.webp) \n### 技术实现\n#### webp兼容性如何检测？\n1. 通过js浏览器端判断是否支持webp\n```js\nfunction check_webp_feature(feature, callback) {\n    var kTestImages = {\n        lossy: \"UklGRiIAAABXRUJQVlA4IBYAAAAwAQCdASoBAAEADsD+JaQAA3AAAAAA\",\n        lossless: \"UklGRhoAAABXRUJQVlA4TA0AAAAvAAAAEAcQERGIiP4HAA==\",\n        alpha: \"UklGRkoAAABXRUJQVlA4WAoAAAAQAAAAAAAAAAAAQUxQSAwAAAARBxAR/Q9ERP8DAABWUDggGAAAABQBAJ0BKgEAAQAAAP4AAA3AAP7mtQAAAA==\",\n        animation: \"UklGRlIAAABXRUJQVlA4WAoAAAASAAAAAAAAAAAAQU5JTQYAAAD/////AABBTk1GJgAAAAAAAAAAAAAAAAAAAGQAAABWUDhMDQAAAC8AAAAQBxAREYiI/gcA\"\n    };\n    var img = new Image();\n    img.onload = function () {\n        var result = (img.width > 0) && (img.height > 0);\n        callback(feature, result);\n    };\n    img.onerror = function () {\n        callback(feature, false);\n    };\n    img.src = \"data:image/webp;base64,\" + kTestImages[feature];\n}\n```\n2. 浏览器向服务端发起请求的时候accept 会带上image/webp 信息，在服务端判断是否支持webp。\n\n```js\nmap $http_accept $webp_suffix {\n        default   \"\";\n        \"~*webp\"  \".webp\";\n}\n```\n通过nginx中map方法，查找是否有webp字段，如果有设置$webp_suffix 为.webp值。通过该值就可以来判断是否支持webp。如果支持写入cookie，前端通过检测cookie做判断，是否加载webp图片。\n\nnginx 中设置cookie代码\n\n```java\nlocation / {\n  if ($webp_suffix ~* webp) {\n    add_header Set-Cookie 'webpAvaile=true; path= /; expires=3153600';\n  }\n}\n```\n\n### 在开发中使用  \n#### sass中使用\n\n```scss\n@mixin webpbg($url) {\n    background-image: url($url);\n    @at-root .webpa & {\n        background-image: url($url+'.webp');\n    }\n}\n```\nscss文件使用  \n\n```scss\n@include webpbg('../image/header.jpg');\n```\n\n#### html中使用\n\n```html\n<picture class=\"img\" >\n    <source class=\"img\" srcset=\"images/banner.jpg.webp\" type=\"image/webp\">\n    <img class=\"img\" id=\"headImg\" src=\"images/banner.jpg\"/>\n</picture>\n```\n\n#### 生成webp资源\n使用webpack的loader\n\n```js\nvar imagemin = require('imagemin');\nvar imageminWebp = require('imagemin-webp');\nvar loaderUtils = require('loader-utils');\n \nmodule.exports = function (content) {\n    this.cacheable && this.cacheable();\n    if (!this.emitFile) throw new Error(\"emitFile is required from module system\");\n    var callback = this.async();\n    var options = loaderUtils.getOptions(this);\n \n    // 写入原文件\n    var url = loaderUtils.interpolateName(this, options.name || \"[hash].[ext]\", {\n        content: content,\n        regExp: options.regExp\n    });\n    this.emitFile(url, content);\n \n    // 如果源文件比较小，则没必要转换为webp格式的图片，直接使用callback传递给下一个loader处理\n    var limit;\n    if (options.limit) {\n        limit = parseInt(options.limit, 10);\n    }\n    if (limit <= 0 || content.length < limit) {\n        callback(null, { buffer: content, url })\n        return;\n    }\n \n    // 根据options内容生成webpOptions\n    var webpOptions = {\n        preset: options.preset || 'default',\n        quality: options.quality || 75,\n        alphaQuality: options.alphaQuality || 100,\n        method: options.method || 1,\n        sns: options.sns || 80,\n        autoFilter: options.autoFilter || false,\n        sharpness: options.sharpness || 0,\n        lossless: options.lossless || false,\n    };\n    if (options.size) {\n        webpOptions.size = options.size;\n    }\n    if (options.filter) {\n        webpOptions.filter = options.filter;\n    }\n \n    // 生成的webp图片的名称为原图片的名称后面追加.webp,\n    // 例如：xxx.jpg.webp, 方便在css预处理器中的使用\n    var webpUrl = url + '.webp';\n    // 原图片异步转换为webp的图片\n    imagemin.buffer(content, { plugins: [imageminWebp(webpOptions)] }).then(file => {\n        // 写入webp图片并调用callback\n        this.emitFile(webpUrl, file);\n        // 传递给svg-placrholder-loader，继续处理成placeholder\n        callback(null, { buffer: content, url, webpUrl });\n \n        /* 如果要单独使用的话，可以使用该注释部分的代码\n        const exportJson = 'module.exports = { ' +\n            '\"originSrc\": __webpack_public_path__ + \"' + url +\n            '\" , \"webpSrc\": __webpack_public_path__ + \"' + webpUrl +\n            '\"' +\n            ' };';\n        callback(null, exportJson);   \n        */  \n    }).catch(err => {\n        callback(err);\n    });\n \n};\n \n// 要求webpack传入原始的buffer，方便处理图片\nmodule.exports.raw = true;\n```\n\nnginx生成  \n实现过程，对支持webp的请求设置cookies。利用nginx检测图片请求是否存在，如果不存在通过lua调用imageMagic创建webp图片并返回。需要注意的是nginx需要安装lua支持的模块。\n\n\n```java\nuser  root; # nginx 用户权限 执行lua创建图片命令需要读写权限\n# ...\nhttp {\n    include       mime.types;\n    server {\n        listen       80;\n        server_name  webp.leewr.com;\n        root         /home/leewr/mono/app/public/december;\n        location / {\n            if ($webp_suffix ~* webp) {\n                add_header Set-Cookie 'webpAvaile=true; path= /;';\n            }\n        }\n        location ~* ^(.+\\.(jpg|png|jpeg|gif))(.webp)$ { # 正则匹配图片 paht/name.jpg.webp 格式的图片请求\n            if (!-f $request_filename) { # 如果图片不存在\n                access_log /usr/local/nginx/logs/december.log main; # 设置日志文件\n                set $request_filepath /home/leewr/mono/app/public/december/$1; # 图片真实路径变量\n                set $ext $3; # 设置图片扩展名$ext变量\n                content_by_lua_file lua/webp.lua; # 调用nginx/lua目录下的webp.lua文件\n            }\n        }\n    }\n}\n```\n\n下面看lua, lua 中代码非常简单。定义command命令，调用系统os.execute(command)执行convert图片转换命令。convert是ImageMagic的命令。.. lua 中字符串连接。ngx.var.ext是nginx中定义的变量。\n\n\n```nginx\nlocal command\ncommand = \"convert \" ..ngx.var.request_filepath.. \" \" ..ngx.var.request_filepath..ngx.var.ext\nos.execute(command)\nngx.exec(ngx.var.request_uri)\n```\n\n[原文地址](https://www.jianshu.com/p/73ca9e8b986a)\n","source":"_posts/webp在项目中的应用.md","raw":"---\nlayout: '[post]'\ntitle: webp在项目中的应用\ndate: 2019-03-22 11:11:26\ntags: html\n---\n## 什么是webp？\nWebP格式，谷歌开发的一种旨在加快图片加载速度的图片格式。图片压缩体积大约只有JPEG的2/3，并能节省大量的服务器宽带资源和数据空间。\n<!-- more -->\n\n## 为什么要用webp\n1. 减小图片加载资源的大小、节省用户流量资源\n2. 降低服务器流量资源  \n### 压缩率\n![yasuo](yasuo.webp)\n\n## webp兼容性情况\n![yasuo](jianrong.webp)  \n结果：谷歌全面支持、安卓浏览器从4.2开始支持。那么在页面中对于安卓用户中图片资源加载大小会有大幅度下降。\n\n## webp在各大网站的使用\n淘宝中大量使用webp。  \n![yasuo](taobao.webp)  \n各大cdn也是支持webp图片格式输出。\n\n## 项目中的实践\n![yasuo](liucheng.webp) \n### 技术实现\n#### webp兼容性如何检测？\n1. 通过js浏览器端判断是否支持webp\n```js\nfunction check_webp_feature(feature, callback) {\n    var kTestImages = {\n        lossy: \"UklGRiIAAABXRUJQVlA4IBYAAAAwAQCdASoBAAEADsD+JaQAA3AAAAAA\",\n        lossless: \"UklGRhoAAABXRUJQVlA4TA0AAAAvAAAAEAcQERGIiP4HAA==\",\n        alpha: \"UklGRkoAAABXRUJQVlA4WAoAAAAQAAAAAAAAAAAAQUxQSAwAAAARBxAR/Q9ERP8DAABWUDggGAAAABQBAJ0BKgEAAQAAAP4AAA3AAP7mtQAAAA==\",\n        animation: \"UklGRlIAAABXRUJQVlA4WAoAAAASAAAAAAAAAAAAQU5JTQYAAAD/////AABBTk1GJgAAAAAAAAAAAAAAAAAAAGQAAABWUDhMDQAAAC8AAAAQBxAREYiI/gcA\"\n    };\n    var img = new Image();\n    img.onload = function () {\n        var result = (img.width > 0) && (img.height > 0);\n        callback(feature, result);\n    };\n    img.onerror = function () {\n        callback(feature, false);\n    };\n    img.src = \"data:image/webp;base64,\" + kTestImages[feature];\n}\n```\n2. 浏览器向服务端发起请求的时候accept 会带上image/webp 信息，在服务端判断是否支持webp。\n\n```js\nmap $http_accept $webp_suffix {\n        default   \"\";\n        \"~*webp\"  \".webp\";\n}\n```\n通过nginx中map方法，查找是否有webp字段，如果有设置$webp_suffix 为.webp值。通过该值就可以来判断是否支持webp。如果支持写入cookie，前端通过检测cookie做判断，是否加载webp图片。\n\nnginx 中设置cookie代码\n\n```java\nlocation / {\n  if ($webp_suffix ~* webp) {\n    add_header Set-Cookie 'webpAvaile=true; path= /; expires=3153600';\n  }\n}\n```\n\n### 在开发中使用  \n#### sass中使用\n\n```scss\n@mixin webpbg($url) {\n    background-image: url($url);\n    @at-root .webpa & {\n        background-image: url($url+'.webp');\n    }\n}\n```\nscss文件使用  \n\n```scss\n@include webpbg('../image/header.jpg');\n```\n\n#### html中使用\n\n```html\n<picture class=\"img\" >\n    <source class=\"img\" srcset=\"images/banner.jpg.webp\" type=\"image/webp\">\n    <img class=\"img\" id=\"headImg\" src=\"images/banner.jpg\"/>\n</picture>\n```\n\n#### 生成webp资源\n使用webpack的loader\n\n```js\nvar imagemin = require('imagemin');\nvar imageminWebp = require('imagemin-webp');\nvar loaderUtils = require('loader-utils');\n \nmodule.exports = function (content) {\n    this.cacheable && this.cacheable();\n    if (!this.emitFile) throw new Error(\"emitFile is required from module system\");\n    var callback = this.async();\n    var options = loaderUtils.getOptions(this);\n \n    // 写入原文件\n    var url = loaderUtils.interpolateName(this, options.name || \"[hash].[ext]\", {\n        content: content,\n        regExp: options.regExp\n    });\n    this.emitFile(url, content);\n \n    // 如果源文件比较小，则没必要转换为webp格式的图片，直接使用callback传递给下一个loader处理\n    var limit;\n    if (options.limit) {\n        limit = parseInt(options.limit, 10);\n    }\n    if (limit <= 0 || content.length < limit) {\n        callback(null, { buffer: content, url })\n        return;\n    }\n \n    // 根据options内容生成webpOptions\n    var webpOptions = {\n        preset: options.preset || 'default',\n        quality: options.quality || 75,\n        alphaQuality: options.alphaQuality || 100,\n        method: options.method || 1,\n        sns: options.sns || 80,\n        autoFilter: options.autoFilter || false,\n        sharpness: options.sharpness || 0,\n        lossless: options.lossless || false,\n    };\n    if (options.size) {\n        webpOptions.size = options.size;\n    }\n    if (options.filter) {\n        webpOptions.filter = options.filter;\n    }\n \n    // 生成的webp图片的名称为原图片的名称后面追加.webp,\n    // 例如：xxx.jpg.webp, 方便在css预处理器中的使用\n    var webpUrl = url + '.webp';\n    // 原图片异步转换为webp的图片\n    imagemin.buffer(content, { plugins: [imageminWebp(webpOptions)] }).then(file => {\n        // 写入webp图片并调用callback\n        this.emitFile(webpUrl, file);\n        // 传递给svg-placrholder-loader，继续处理成placeholder\n        callback(null, { buffer: content, url, webpUrl });\n \n        /* 如果要单独使用的话，可以使用该注释部分的代码\n        const exportJson = 'module.exports = { ' +\n            '\"originSrc\": __webpack_public_path__ + \"' + url +\n            '\" , \"webpSrc\": __webpack_public_path__ + \"' + webpUrl +\n            '\"' +\n            ' };';\n        callback(null, exportJson);   \n        */  \n    }).catch(err => {\n        callback(err);\n    });\n \n};\n \n// 要求webpack传入原始的buffer，方便处理图片\nmodule.exports.raw = true;\n```\n\nnginx生成  \n实现过程，对支持webp的请求设置cookies。利用nginx检测图片请求是否存在，如果不存在通过lua调用imageMagic创建webp图片并返回。需要注意的是nginx需要安装lua支持的模块。\n\n\n```java\nuser  root; # nginx 用户权限 执行lua创建图片命令需要读写权限\n# ...\nhttp {\n    include       mime.types;\n    server {\n        listen       80;\n        server_name  webp.leewr.com;\n        root         /home/leewr/mono/app/public/december;\n        location / {\n            if ($webp_suffix ~* webp) {\n                add_header Set-Cookie 'webpAvaile=true; path= /;';\n            }\n        }\n        location ~* ^(.+\\.(jpg|png|jpeg|gif))(.webp)$ { # 正则匹配图片 paht/name.jpg.webp 格式的图片请求\n            if (!-f $request_filename) { # 如果图片不存在\n                access_log /usr/local/nginx/logs/december.log main; # 设置日志文件\n                set $request_filepath /home/leewr/mono/app/public/december/$1; # 图片真实路径变量\n                set $ext $3; # 设置图片扩展名$ext变量\n                content_by_lua_file lua/webp.lua; # 调用nginx/lua目录下的webp.lua文件\n            }\n        }\n    }\n}\n```\n\n下面看lua, lua 中代码非常简单。定义command命令，调用系统os.execute(command)执行convert图片转换命令。convert是ImageMagic的命令。.. lua 中字符串连接。ngx.var.ext是nginx中定义的变量。\n\n\n```nginx\nlocal command\ncommand = \"convert \" ..ngx.var.request_filepath.. \" \" ..ngx.var.request_filepath..ngx.var.ext\nos.execute(command)\nngx.exec(ngx.var.request_uri)\n```\n\n[原文地址](https://www.jianshu.com/p/73ca9e8b986a)\n","slug":"webp在项目中的应用","published":1,"updated":"2020-02-03T09:29:59.000Z","comments":1,"photos":[],"link":"","_id":"ck7onzqxp000myts6gi2lfh9q","content":"<h2 id=\"什么是webp？\"><a href=\"#什么是webp？\" class=\"headerlink\" title=\"什么是webp？\"></a>什么是webp？</h2><p>WebP格式，谷歌开发的一种旨在加快图片加载速度的图片格式。图片压缩体积大约只有JPEG的2/3，并能节省大量的服务器宽带资源和数据空间。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"为什么要用webp\"><a href=\"#为什么要用webp\" class=\"headerlink\" title=\"为什么要用webp\"></a>为什么要用webp</h2><ol>\n<li>减小图片加载资源的大小、节省用户流量资源</li>\n<li>降低服务器流量资源  <h3 id=\"压缩率\"><a href=\"#压缩率\" class=\"headerlink\" title=\"压缩率\"></a>压缩率</h3><img src=\"/2019/03/22/webp%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/yasuo.webp\" alt=\"yasuo\"></li>\n</ol>\n<h2 id=\"webp兼容性情况\"><a href=\"#webp兼容性情况\" class=\"headerlink\" title=\"webp兼容性情况\"></a>webp兼容性情况</h2><p><img src=\"/2019/03/22/webp%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/jianrong.webp\" alt=\"yasuo\"><br>结果：谷歌全面支持、安卓浏览器从4.2开始支持。那么在页面中对于安卓用户中图片资源加载大小会有大幅度下降。</p>\n<h2 id=\"webp在各大网站的使用\"><a href=\"#webp在各大网站的使用\" class=\"headerlink\" title=\"webp在各大网站的使用\"></a>webp在各大网站的使用</h2><p>淘宝中大量使用webp。<br><img src=\"/2019/03/22/webp%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/taobao.webp\" alt=\"yasuo\"><br>各大cdn也是支持webp图片格式输出。</p>\n<h2 id=\"项目中的实践\"><a href=\"#项目中的实践\" class=\"headerlink\" title=\"项目中的实践\"></a>项目中的实践</h2><p><img src=\"/2019/03/22/webp%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/liucheng.webp\" alt=\"yasuo\"> </p>\n<h3 id=\"技术实现\"><a href=\"#技术实现\" class=\"headerlink\" title=\"技术实现\"></a>技术实现</h3><h4 id=\"webp兼容性如何检测？\"><a href=\"#webp兼容性如何检测？\" class=\"headerlink\" title=\"webp兼容性如何检测？\"></a>webp兼容性如何检测？</h4><ol>\n<li>通过js浏览器端判断是否支持webp<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">check_webp_feature</span>(<span class=\"params\">feature, callback</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> kTestImages = &#123;</span><br><span class=\"line\">        lossy: <span class=\"string\">\"UklGRiIAAABXRUJQVlA4IBYAAAAwAQCdASoBAAEADsD+JaQAA3AAAAAA\"</span>,</span><br><span class=\"line\">        lossless: <span class=\"string\">\"UklGRhoAAABXRUJQVlA4TA0AAAAvAAAAEAcQERGIiP4HAA==\"</span>,</span><br><span class=\"line\">        alpha: <span class=\"string\">\"UklGRkoAAABXRUJQVlA4WAoAAAAQAAAAAAAAAAAAQUxQSAwAAAARBxAR/Q9ERP8DAABWUDggGAAAABQBAJ0BKgEAAQAAAP4AAA3AAP7mtQAAAA==\"</span>,</span><br><span class=\"line\">        animation: <span class=\"string\">\"UklGRlIAAABXRUJQVlA4WAoAAAASAAAAAAAAAAAAQU5JTQYAAAD/////AABBTk1GJgAAAAAAAAAAAAAAAAAAAGQAAABWUDhMDQAAAC8AAAAQBxAREYiI/gcA\"</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\">    img.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> result = (img.width &gt; <span class=\"number\">0</span>) &amp;&amp; (img.height &gt; <span class=\"number\">0</span>);</span><br><span class=\"line\">        callback(feature, result);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    img.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        callback(feature, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    img.src = <span class=\"string\">\"data:image/webp;base64,\"</span> + kTestImages[feature];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>浏览器向服务端发起请求的时候accept 会带上image/webp 信息，在服务端判断是否支持webp。</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map $http_accept $webp_suffix &#123;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>   <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        <span class=\"string\">\"~*webp\"</span>  <span class=\"string\">\".webp\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过nginx中map方法，查找是否有webp字段，如果有设置$webp_suffix 为.webp值。通过该值就可以来判断是否支持webp。如果支持写入cookie，前端通过检测cookie做判断，是否加载webp图片。</p>\n<p>nginx 中设置cookie代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location / &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ($webp_suffix ~* webp) &#123;</span><br><span class=\"line\">    add_header Set-Cookie <span class=\"string\">'webpAvaile=true; path= /; expires=3153600'</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在开发中使用\"><a href=\"#在开发中使用\" class=\"headerlink\" title=\"在开发中使用\"></a>在开发中使用</h3><h4 id=\"sass中使用\"><a href=\"#sass中使用\" class=\"headerlink\" title=\"sass中使用\"></a>sass中使用</h4><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@mixin</span> webpbg(<span class=\"variable\">$url</span>) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-image</span>: url(<span class=\"variable\">$url</span>);</span><br><span class=\"line\">    <span class=\"keyword\">@at-root</span> .webpa &amp; &#123;</span><br><span class=\"line\">        <span class=\"attribute\">background-image</span>: url(<span class=\"variable\">$url</span>+<span class=\"string\">'.webp'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>scss文件使用  </p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@include</span> webpbg(<span class=\"string\">'../image/header.jpg'</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"html中使用\"><a href=\"#html中使用\" class=\"headerlink\" title=\"html中使用\"></a>html中使用</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">picture</span> <span class=\"attr\">class</span>=<span class=\"string\">\"img\"</span> &gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">class</span>=<span class=\"string\">\"img\"</span> <span class=\"attr\">srcset</span>=<span class=\"string\">\"images/banner.jpg.webp\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"image/webp\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">class</span>=<span class=\"string\">\"img\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"headImg\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"images/banner.jpg\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">picture</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"生成webp资源\"><a href=\"#生成webp资源\" class=\"headerlink\" title=\"生成webp资源\"></a>生成webp资源</h4><p>使用webpack的loader</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> imagemin = <span class=\"built_in\">require</span>(<span class=\"string\">'imagemin'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> imageminWebp = <span class=\"built_in\">require</span>(<span class=\"string\">'imagemin-webp'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> loaderUtils = <span class=\"built_in\">require</span>(<span class=\"string\">'loader-utils'</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">content</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.cacheable &amp;&amp; <span class=\"keyword\">this</span>.cacheable();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.emitFile) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"emitFile is required from module system\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> callback = <span class=\"keyword\">this</span>.async();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> options = loaderUtils.getOptions(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 写入原文件</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> url = loaderUtils.interpolateName(<span class=\"keyword\">this</span>, options.name || <span class=\"string\">\"[hash].[ext]\"</span>, &#123;</span><br><span class=\"line\">        content: content,</span><br><span class=\"line\">        regExp: options.regExp</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.emitFile(url, content);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 如果源文件比较小，则没必要转换为webp格式的图片，直接使用callback传递给下一个loader处理</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> limit;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (options.limit) &#123;</span><br><span class=\"line\">        limit = <span class=\"built_in\">parseInt</span>(options.limit, <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (limit &lt;= <span class=\"number\">0</span> || content.length &lt; limit) &#123;</span><br><span class=\"line\">        callback(<span class=\"literal\">null</span>, &#123; <span class=\"attr\">buffer</span>: content, url &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 根据options内容生成webpOptions</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> webpOptions = &#123;</span><br><span class=\"line\">        preset: options.preset || <span class=\"string\">'default'</span>,</span><br><span class=\"line\">        quality: options.quality || <span class=\"number\">75</span>,</span><br><span class=\"line\">        alphaQuality: options.alphaQuality || <span class=\"number\">100</span>,</span><br><span class=\"line\">        method: options.method || <span class=\"number\">1</span>,</span><br><span class=\"line\">        sns: options.sns || <span class=\"number\">80</span>,</span><br><span class=\"line\">        autoFilter: options.autoFilter || <span class=\"literal\">false</span>,</span><br><span class=\"line\">        sharpness: options.sharpness || <span class=\"number\">0</span>,</span><br><span class=\"line\">        lossless: options.lossless || <span class=\"literal\">false</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (options.size) &#123;</span><br><span class=\"line\">        webpOptions.size = options.size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (options.filter) &#123;</span><br><span class=\"line\">        webpOptions.filter = options.filter;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 生成的webp图片的名称为原图片的名称后面追加.webp,</span></span><br><span class=\"line\">    <span class=\"comment\">// 例如：xxx.jpg.webp, 方便在css预处理器中的使用</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> webpUrl = url + <span class=\"string\">'.webp'</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 原图片异步转换为webp的图片</span></span><br><span class=\"line\">    imagemin.buffer(content, &#123; <span class=\"attr\">plugins</span>: [imageminWebp(webpOptions)] &#125;).then(<span class=\"function\"><span class=\"params\">file</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 写入webp图片并调用callback</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.emitFile(webpUrl, file);</span><br><span class=\"line\">        <span class=\"comment\">// 传递给svg-placrholder-loader，继续处理成placeholder</span></span><br><span class=\"line\">        callback(<span class=\"literal\">null</span>, &#123; <span class=\"attr\">buffer</span>: content, url, webpUrl &#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">/* 如果要单独使用的话，可以使用该注释部分的代码</span></span><br><span class=\"line\"><span class=\"comment\">        const exportJson = 'module.exports = &#123; ' +</span></span><br><span class=\"line\"><span class=\"comment\">            '\"originSrc\": __webpack_public_path__ + \"' + url +</span></span><br><span class=\"line\"><span class=\"comment\">            '\" , \"webpSrc\": __webpack_public_path__ + \"' + webpUrl +</span></span><br><span class=\"line\"><span class=\"comment\">            '\"' +</span></span><br><span class=\"line\"><span class=\"comment\">            ' &#125;;';</span></span><br><span class=\"line\"><span class=\"comment\">        callback(null, exportJson);   </span></span><br><span class=\"line\"><span class=\"comment\">        */</span>  </span><br><span class=\"line\">    &#125;).catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">        callback(err);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 要求webpack传入原始的buffer，方便处理图片</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports.raw = <span class=\"literal\">true</span>;</span><br></pre></td></tr></table></figure>\n\n<p>nginx生成<br>实现过程，对支持webp的请求设置cookies。利用nginx检测图片请求是否存在，如果不存在通过lua调用imageMagic创建webp图片并返回。需要注意的是nginx需要安装lua支持的模块。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user  root; # nginx 用户权限 执行lua创建图片命令需要读写权限</span><br><span class=\"line\"># ...</span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen       <span class=\"number\">80</span>;</span><br><span class=\"line\">        server_name  webp.leewr.com;</span><br><span class=\"line\">        root         /home/leewr/mono/app/<span class=\"keyword\">public</span>/december;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ($webp_suffix ~* webp) &#123;</span><br><span class=\"line\">                add_header Set-Cookie <span class=\"string\">'webpAvaile=true; path= /;'</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        location ~* ^(.+\\.(jpg|png|jpeg|gif))(.webp)$ &#123; # 正则匹配图片 paht/name.jpg.webp 格式的图片请求</span><br><span class=\"line\">            if (!-f $request_filename) &#123; # 如果图片不存在</span><br><span class=\"line\">                access_log /usr/local/nginx/logs/december.log main; # 设置日志文件</span><br><span class=\"line\">                set $request_filepath /home/leewr/mono/app/public/december/$1; # 图片真实路径变量</span><br><span class=\"line\">                set $ext $3; # 设置图片扩展名$ext变量</span><br><span class=\"line\">                content_by_lua_file lua/webp.lua; # 调用nginx/lua目录下的webp.lua文件</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面看lua, lua 中代码非常简单。定义command命令，调用系统os.execute(command)执行convert图片转换命令。convert是ImageMagic的命令。.. lua 中字符串连接。ngx.var.ext是nginx中定义的变量。</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">local</span> command</span><br><span class=\"line\">command = <span class=\"string\">\"convert \"</span> ..ngx.var.request_filepath.. <span class=\"string\">\" \"</span> ..ngx.var.request_filepath..ngx.var.ext</span><br><span class=\"line\">os.execute(command)</span><br><span class=\"line\">ngx.exec(ngx.var.request_uri)</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://www.jianshu.com/p/73ca9e8b986a\" target=\"_blank\" rel=\"noopener\">原文地址</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"什么是webp？\"><a href=\"#什么是webp？\" class=\"headerlink\" title=\"什么是webp？\"></a>什么是webp？</h2><p>WebP格式，谷歌开发的一种旨在加快图片加载速度的图片格式。图片压缩体积大约只有JPEG的2/3，并能节省大量的服务器宽带资源和数据空间。</p>","more":"<h2 id=\"为什么要用webp\"><a href=\"#为什么要用webp\" class=\"headerlink\" title=\"为什么要用webp\"></a>为什么要用webp</h2><ol>\n<li>减小图片加载资源的大小、节省用户流量资源</li>\n<li>降低服务器流量资源  <h3 id=\"压缩率\"><a href=\"#压缩率\" class=\"headerlink\" title=\"压缩率\"></a>压缩率</h3><img src=\"/2019/03/22/webp%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/yasuo.webp\" alt=\"yasuo\"></li>\n</ol>\n<h2 id=\"webp兼容性情况\"><a href=\"#webp兼容性情况\" class=\"headerlink\" title=\"webp兼容性情况\"></a>webp兼容性情况</h2><p><img src=\"/2019/03/22/webp%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/jianrong.webp\" alt=\"yasuo\"><br>结果：谷歌全面支持、安卓浏览器从4.2开始支持。那么在页面中对于安卓用户中图片资源加载大小会有大幅度下降。</p>\n<h2 id=\"webp在各大网站的使用\"><a href=\"#webp在各大网站的使用\" class=\"headerlink\" title=\"webp在各大网站的使用\"></a>webp在各大网站的使用</h2><p>淘宝中大量使用webp。<br><img src=\"/2019/03/22/webp%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/taobao.webp\" alt=\"yasuo\"><br>各大cdn也是支持webp图片格式输出。</p>\n<h2 id=\"项目中的实践\"><a href=\"#项目中的实践\" class=\"headerlink\" title=\"项目中的实践\"></a>项目中的实践</h2><p><img src=\"/2019/03/22/webp%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/liucheng.webp\" alt=\"yasuo\"> </p>\n<h3 id=\"技术实现\"><a href=\"#技术实现\" class=\"headerlink\" title=\"技术实现\"></a>技术实现</h3><h4 id=\"webp兼容性如何检测？\"><a href=\"#webp兼容性如何检测？\" class=\"headerlink\" title=\"webp兼容性如何检测？\"></a>webp兼容性如何检测？</h4><ol>\n<li>通过js浏览器端判断是否支持webp<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">check_webp_feature</span>(<span class=\"params\">feature, callback</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> kTestImages = &#123;</span><br><span class=\"line\">        lossy: <span class=\"string\">\"UklGRiIAAABXRUJQVlA4IBYAAAAwAQCdASoBAAEADsD+JaQAA3AAAAAA\"</span>,</span><br><span class=\"line\">        lossless: <span class=\"string\">\"UklGRhoAAABXRUJQVlA4TA0AAAAvAAAAEAcQERGIiP4HAA==\"</span>,</span><br><span class=\"line\">        alpha: <span class=\"string\">\"UklGRkoAAABXRUJQVlA4WAoAAAAQAAAAAAAAAAAAQUxQSAwAAAARBxAR/Q9ERP8DAABWUDggGAAAABQBAJ0BKgEAAQAAAP4AAA3AAP7mtQAAAA==\"</span>,</span><br><span class=\"line\">        animation: <span class=\"string\">\"UklGRlIAAABXRUJQVlA4WAoAAAASAAAAAAAAAAAAQU5JTQYAAAD/////AABBTk1GJgAAAAAAAAAAAAAAAAAAAGQAAABWUDhMDQAAAC8AAAAQBxAREYiI/gcA\"</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\">    img.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> result = (img.width &gt; <span class=\"number\">0</span>) &amp;&amp; (img.height &gt; <span class=\"number\">0</span>);</span><br><span class=\"line\">        callback(feature, result);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    img.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        callback(feature, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    img.src = <span class=\"string\">\"data:image/webp;base64,\"</span> + kTestImages[feature];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>浏览器向服务端发起请求的时候accept 会带上image/webp 信息，在服务端判断是否支持webp。</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map $http_accept $webp_suffix &#123;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>   <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        <span class=\"string\">\"~*webp\"</span>  <span class=\"string\">\".webp\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过nginx中map方法，查找是否有webp字段，如果有设置$webp_suffix 为.webp值。通过该值就可以来判断是否支持webp。如果支持写入cookie，前端通过检测cookie做判断，是否加载webp图片。</p>\n<p>nginx 中设置cookie代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location / &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ($webp_suffix ~* webp) &#123;</span><br><span class=\"line\">    add_header Set-Cookie <span class=\"string\">'webpAvaile=true; path= /; expires=3153600'</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在开发中使用\"><a href=\"#在开发中使用\" class=\"headerlink\" title=\"在开发中使用\"></a>在开发中使用</h3><h4 id=\"sass中使用\"><a href=\"#sass中使用\" class=\"headerlink\" title=\"sass中使用\"></a>sass中使用</h4><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@mixin</span> webpbg(<span class=\"variable\">$url</span>) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-image</span>: url(<span class=\"variable\">$url</span>);</span><br><span class=\"line\">    <span class=\"keyword\">@at-root</span> .webpa &amp; &#123;</span><br><span class=\"line\">        <span class=\"attribute\">background-image</span>: url(<span class=\"variable\">$url</span>+<span class=\"string\">'.webp'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>scss文件使用  </p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@include</span> webpbg(<span class=\"string\">'../image/header.jpg'</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"html中使用\"><a href=\"#html中使用\" class=\"headerlink\" title=\"html中使用\"></a>html中使用</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">picture</span> <span class=\"attr\">class</span>=<span class=\"string\">\"img\"</span> &gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">class</span>=<span class=\"string\">\"img\"</span> <span class=\"attr\">srcset</span>=<span class=\"string\">\"images/banner.jpg.webp\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"image/webp\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">class</span>=<span class=\"string\">\"img\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"headImg\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"images/banner.jpg\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">picture</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"生成webp资源\"><a href=\"#生成webp资源\" class=\"headerlink\" title=\"生成webp资源\"></a>生成webp资源</h4><p>使用webpack的loader</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> imagemin = <span class=\"built_in\">require</span>(<span class=\"string\">'imagemin'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> imageminWebp = <span class=\"built_in\">require</span>(<span class=\"string\">'imagemin-webp'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> loaderUtils = <span class=\"built_in\">require</span>(<span class=\"string\">'loader-utils'</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">content</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.cacheable &amp;&amp; <span class=\"keyword\">this</span>.cacheable();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.emitFile) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"emitFile is required from module system\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> callback = <span class=\"keyword\">this</span>.async();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> options = loaderUtils.getOptions(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 写入原文件</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> url = loaderUtils.interpolateName(<span class=\"keyword\">this</span>, options.name || <span class=\"string\">\"[hash].[ext]\"</span>, &#123;</span><br><span class=\"line\">        content: content,</span><br><span class=\"line\">        regExp: options.regExp</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.emitFile(url, content);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 如果源文件比较小，则没必要转换为webp格式的图片，直接使用callback传递给下一个loader处理</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> limit;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (options.limit) &#123;</span><br><span class=\"line\">        limit = <span class=\"built_in\">parseInt</span>(options.limit, <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (limit &lt;= <span class=\"number\">0</span> || content.length &lt; limit) &#123;</span><br><span class=\"line\">        callback(<span class=\"literal\">null</span>, &#123; <span class=\"attr\">buffer</span>: content, url &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 根据options内容生成webpOptions</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> webpOptions = &#123;</span><br><span class=\"line\">        preset: options.preset || <span class=\"string\">'default'</span>,</span><br><span class=\"line\">        quality: options.quality || <span class=\"number\">75</span>,</span><br><span class=\"line\">        alphaQuality: options.alphaQuality || <span class=\"number\">100</span>,</span><br><span class=\"line\">        method: options.method || <span class=\"number\">1</span>,</span><br><span class=\"line\">        sns: options.sns || <span class=\"number\">80</span>,</span><br><span class=\"line\">        autoFilter: options.autoFilter || <span class=\"literal\">false</span>,</span><br><span class=\"line\">        sharpness: options.sharpness || <span class=\"number\">0</span>,</span><br><span class=\"line\">        lossless: options.lossless || <span class=\"literal\">false</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (options.size) &#123;</span><br><span class=\"line\">        webpOptions.size = options.size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (options.filter) &#123;</span><br><span class=\"line\">        webpOptions.filter = options.filter;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 生成的webp图片的名称为原图片的名称后面追加.webp,</span></span><br><span class=\"line\">    <span class=\"comment\">// 例如：xxx.jpg.webp, 方便在css预处理器中的使用</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> webpUrl = url + <span class=\"string\">'.webp'</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 原图片异步转换为webp的图片</span></span><br><span class=\"line\">    imagemin.buffer(content, &#123; <span class=\"attr\">plugins</span>: [imageminWebp(webpOptions)] &#125;).then(<span class=\"function\"><span class=\"params\">file</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 写入webp图片并调用callback</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.emitFile(webpUrl, file);</span><br><span class=\"line\">        <span class=\"comment\">// 传递给svg-placrholder-loader，继续处理成placeholder</span></span><br><span class=\"line\">        callback(<span class=\"literal\">null</span>, &#123; <span class=\"attr\">buffer</span>: content, url, webpUrl &#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">/* 如果要单独使用的话，可以使用该注释部分的代码</span></span><br><span class=\"line\"><span class=\"comment\">        const exportJson = 'module.exports = &#123; ' +</span></span><br><span class=\"line\"><span class=\"comment\">            '\"originSrc\": __webpack_public_path__ + \"' + url +</span></span><br><span class=\"line\"><span class=\"comment\">            '\" , \"webpSrc\": __webpack_public_path__ + \"' + webpUrl +</span></span><br><span class=\"line\"><span class=\"comment\">            '\"' +</span></span><br><span class=\"line\"><span class=\"comment\">            ' &#125;;';</span></span><br><span class=\"line\"><span class=\"comment\">        callback(null, exportJson);   </span></span><br><span class=\"line\"><span class=\"comment\">        */</span>  </span><br><span class=\"line\">    &#125;).catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">        callback(err);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 要求webpack传入原始的buffer，方便处理图片</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports.raw = <span class=\"literal\">true</span>;</span><br></pre></td></tr></table></figure>\n\n<p>nginx生成<br>实现过程，对支持webp的请求设置cookies。利用nginx检测图片请求是否存在，如果不存在通过lua调用imageMagic创建webp图片并返回。需要注意的是nginx需要安装lua支持的模块。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user  root; # nginx 用户权限 执行lua创建图片命令需要读写权限</span><br><span class=\"line\"># ...</span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen       <span class=\"number\">80</span>;</span><br><span class=\"line\">        server_name  webp.leewr.com;</span><br><span class=\"line\">        root         /home/leewr/mono/app/<span class=\"keyword\">public</span>/december;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ($webp_suffix ~* webp) &#123;</span><br><span class=\"line\">                add_header Set-Cookie <span class=\"string\">'webpAvaile=true; path= /;'</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        location ~* ^(.+\\.(jpg|png|jpeg|gif))(.webp)$ &#123; # 正则匹配图片 paht/name.jpg.webp 格式的图片请求</span><br><span class=\"line\">            if (!-f $request_filename) &#123; # 如果图片不存在</span><br><span class=\"line\">                access_log /usr/local/nginx/logs/december.log main; # 设置日志文件</span><br><span class=\"line\">                set $request_filepath /home/leewr/mono/app/public/december/$1; # 图片真实路径变量</span><br><span class=\"line\">                set $ext $3; # 设置图片扩展名$ext变量</span><br><span class=\"line\">                content_by_lua_file lua/webp.lua; # 调用nginx/lua目录下的webp.lua文件</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面看lua, lua 中代码非常简单。定义command命令，调用系统os.execute(command)执行convert图片转换命令。convert是ImageMagic的命令。.. lua 中字符串连接。ngx.var.ext是nginx中定义的变量。</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">local</span> command</span><br><span class=\"line\">command = <span class=\"string\">\"convert \"</span> ..ngx.var.request_filepath.. <span class=\"string\">\" \"</span> ..ngx.var.request_filepath..ngx.var.ext</span><br><span class=\"line\">os.execute(command)</span><br><span class=\"line\">ngx.exec(ngx.var.request_uri)</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://www.jianshu.com/p/73ca9e8b986a\" target=\"_blank\" rel=\"noopener\">原文地址</a></p>"},{"layout":"[post]","title":"初次使用hexo","date":"2019-01-14T01:57:01.000Z","_content":"\n偶然间发现了hexo这个博客搭建工具，于是决定将使用多年的云笔记的内容搬迁至这个博客上，分享我的搬迁经历以及踩过的坑吧~。\n<!-- more -->\n\n## 我们开始吧\n\n### 新建仓库\n\n在github新建仓库，如果想要部署在github上，要仓库名为 ==<user-name>.github.io== 而不是user-name ，其中 ==<user-name>== 是你 ==github== 的昵称，要是问为什么，都是眼泪的教训。\n### 安装hexo\n\n```\nnpm install -g hexo-cli\n```\n或者\n```linux\nnpm install hexo\n```\n### 初始化项目\n初始化命令\n```\nhexo init\n```\n运行\n```\nhexo server\n```\n大功告成，访问 ==localhost:4000== 我们就能看到建的博客的效果了！\n### 将Hexo部署到GitHub Pages上\n1. 将[Travis CI](https://github.com/marketplace/travis-ci) 添加到你的 GitHub 账户中。\n2. 前往 GitHub 的 [Applications settings](https://github.com/settings/installations)，配置 Travis CI 权限，使其能够访问你的 repository。\n3. 你应该会被重定向到 Travis CI 的页面。如果没有，请 [手动前往](https://travis-ci.com/)。\n4. 在浏览器新建一个标签页，前往 GitHub [新建 Personal Access Token](https://github.com/settings/tokens) ，只勾选 repo 的权限并生成一个新的 Token。Token 生成后请复制并保存好。\n5. 回到 Travis CI，前往你的 repository 的设置页面，在 **Environment Variables** 下新建一个环境变量，**Name** 为 GH_TOKEN，**Value** 为刚才你在 GitHub 生成的 Token。确保 **DISPLAY VALUE IN BUILD LOG** 保持 **不被勾选** 避免你的 Token 泄漏。点击 Add 保存。\n6. 在你的 Hexo 站点文件夹中新建一个 ==.travis.yml== 文件：\n\n```\nsudo: false\nlanguage: node_js\nnode_js:\n  - 10 # use nodejs v10 LTS\ncache: npm\nbranches:\n  only:\n    - master # build master branch only\nscript:\n  - hexo generate # generate static files\ndeploy:\n  provider: pages\n  skip-cleanup: true\n  github-token: $GH_TOKEN\n  keep-history: true\n  on:\n    branch: master\n  local-dir: public\n```\n\n7. 将.travis.yml 推送到 repository 中。Travis CI 应该会自动开始运行，并将生成的文件推送到同一 repository 下的 gh-pages 分支下\n\n8. 在GitHub中前往你的repository 的设置页面，修改 GitHub Pages 的部署分支为 gh-pages。\n9.  完成以上步骤，我们就能在<user-name>.github.io上看到自己建设的博客了。\n### 其他配置项\n请参考[hexo文档](https://hexo.io/zh-cn/docs)。\n\n\n","source":"_posts/初尝hexo.md","raw":"---\nlayout: '[post]'\ntitle: 初次使用hexo\ndate: 2019-01-14 09:57:01\ntags: hexo\n---\n\n偶然间发现了hexo这个博客搭建工具，于是决定将使用多年的云笔记的内容搬迁至这个博客上，分享我的搬迁经历以及踩过的坑吧~。\n<!-- more -->\n\n## 我们开始吧\n\n### 新建仓库\n\n在github新建仓库，如果想要部署在github上，要仓库名为 ==<user-name>.github.io== 而不是user-name ，其中 ==<user-name>== 是你 ==github== 的昵称，要是问为什么，都是眼泪的教训。\n### 安装hexo\n\n```\nnpm install -g hexo-cli\n```\n或者\n```linux\nnpm install hexo\n```\n### 初始化项目\n初始化命令\n```\nhexo init\n```\n运行\n```\nhexo server\n```\n大功告成，访问 ==localhost:4000== 我们就能看到建的博客的效果了！\n### 将Hexo部署到GitHub Pages上\n1. 将[Travis CI](https://github.com/marketplace/travis-ci) 添加到你的 GitHub 账户中。\n2. 前往 GitHub 的 [Applications settings](https://github.com/settings/installations)，配置 Travis CI 权限，使其能够访问你的 repository。\n3. 你应该会被重定向到 Travis CI 的页面。如果没有，请 [手动前往](https://travis-ci.com/)。\n4. 在浏览器新建一个标签页，前往 GitHub [新建 Personal Access Token](https://github.com/settings/tokens) ，只勾选 repo 的权限并生成一个新的 Token。Token 生成后请复制并保存好。\n5. 回到 Travis CI，前往你的 repository 的设置页面，在 **Environment Variables** 下新建一个环境变量，**Name** 为 GH_TOKEN，**Value** 为刚才你在 GitHub 生成的 Token。确保 **DISPLAY VALUE IN BUILD LOG** 保持 **不被勾选** 避免你的 Token 泄漏。点击 Add 保存。\n6. 在你的 Hexo 站点文件夹中新建一个 ==.travis.yml== 文件：\n\n```\nsudo: false\nlanguage: node_js\nnode_js:\n  - 10 # use nodejs v10 LTS\ncache: npm\nbranches:\n  only:\n    - master # build master branch only\nscript:\n  - hexo generate # generate static files\ndeploy:\n  provider: pages\n  skip-cleanup: true\n  github-token: $GH_TOKEN\n  keep-history: true\n  on:\n    branch: master\n  local-dir: public\n```\n\n7. 将.travis.yml 推送到 repository 中。Travis CI 应该会自动开始运行，并将生成的文件推送到同一 repository 下的 gh-pages 分支下\n\n8. 在GitHub中前往你的repository 的设置页面，修改 GitHub Pages 的部署分支为 gh-pages。\n9.  完成以上步骤，我们就能在<user-name>.github.io上看到自己建设的博客了。\n### 其他配置项\n请参考[hexo文档](https://hexo.io/zh-cn/docs)。\n\n\n","slug":"初尝hexo","published":1,"updated":"2020-01-24T14:58:06.000Z","comments":1,"photos":[],"link":"","_id":"ck7onzqxr000oyts62r1ibagd","content":"<p>偶然间发现了hexo这个博客搭建工具，于是决定将使用多年的云笔记的内容搬迁至这个博客上，分享我的搬迁经历以及踩过的坑吧~。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"我们开始吧\"><a href=\"#我们开始吧\" class=\"headerlink\" title=\"我们开始吧\"></a>我们开始吧</h2><h3 id=\"新建仓库\"><a href=\"#新建仓库\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3><p>在github新建仓库，如果想要部署在github上，要仓库名为 ==<user-name>.github.io== 而不是user-name ，其中 ==<user-name>== 是你 ==github== 的昵称，要是问为什么，都是眼泪的教训。</user-name></user-name></p>\n<h3 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo</span><br></pre></td></tr></table></figure>\n<h3 id=\"初始化项目\"><a href=\"#初始化项目\" class=\"headerlink\" title=\"初始化项目\"></a>初始化项目</h3><p>初始化命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init</span><br></pre></td></tr></table></figure>\n<p>运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure>\n<p>大功告成，访问 ==localhost:4000== 我们就能看到建的博客的效果了！</p>\n<h3 id=\"将Hexo部署到GitHub-Pages上\"><a href=\"#将Hexo部署到GitHub-Pages上\" class=\"headerlink\" title=\"将Hexo部署到GitHub Pages上\"></a>将Hexo部署到GitHub Pages上</h3><ol>\n<li>将<a href=\"https://github.com/marketplace/travis-ci\" target=\"_blank\" rel=\"noopener\">Travis CI</a> 添加到你的 GitHub 账户中。</li>\n<li>前往 GitHub 的 <a href=\"https://github.com/settings/installations\" target=\"_blank\" rel=\"noopener\">Applications settings</a>，配置 Travis CI 权限，使其能够访问你的 repository。</li>\n<li>你应该会被重定向到 Travis CI 的页面。如果没有，请 <a href=\"https://travis-ci.com/\" target=\"_blank\" rel=\"noopener\">手动前往</a>。</li>\n<li>在浏览器新建一个标签页，前往 GitHub <a href=\"https://github.com/settings/tokens\" target=\"_blank\" rel=\"noopener\">新建 Personal Access Token</a> ，只勾选 repo 的权限并生成一个新的 Token。Token 生成后请复制并保存好。</li>\n<li>回到 Travis CI，前往你的 repository 的设置页面，在 <strong>Environment Variables</strong> 下新建一个环境变量，<strong>Name</strong> 为 GH_TOKEN，<strong>Value</strong> 为刚才你在 GitHub 生成的 Token。确保 <strong>DISPLAY VALUE IN BUILD LOG</strong> 保持 <strong>不被勾选</strong> 避免你的 Token 泄漏。点击 Add 保存。</li>\n<li>在你的 Hexo 站点文件夹中新建一个 ==.travis.yml== 文件：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo: false</span><br><span class=\"line\">language: node_js</span><br><span class=\"line\">node_js:</span><br><span class=\"line\">  - 10 # use nodejs v10 LTS</span><br><span class=\"line\">cache: npm</span><br><span class=\"line\">branches:</span><br><span class=\"line\">  only:</span><br><span class=\"line\">    - master # build master branch only</span><br><span class=\"line\">script:</span><br><span class=\"line\">  - hexo generate # generate static files</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  provider: pages</span><br><span class=\"line\">  skip-cleanup: true</span><br><span class=\"line\">  github-token: $GH_TOKEN</span><br><span class=\"line\">  keep-history: true</span><br><span class=\"line\">  on:</span><br><span class=\"line\">    branch: master</span><br><span class=\"line\">  local-dir: public</span><br></pre></td></tr></table></figure>\n\n<ol start=\"7\">\n<li><p>将.travis.yml 推送到 repository 中。Travis CI 应该会自动开始运行，并将生成的文件推送到同一 repository 下的 gh-pages 分支下</p>\n</li>\n<li><p>在GitHub中前往你的repository 的设置页面，修改 GitHub Pages 的部署分支为 gh-pages。</p>\n</li>\n<li><p>完成以上步骤，我们就能在<user-name>.github.io上看到自己建设的博客了。</user-name></p>\n<h3 id=\"其他配置项\"><a href=\"#其他配置项\" class=\"headerlink\" title=\"其他配置项\"></a>其他配置项</h3><p>请参考<a href=\"https://hexo.io/zh-cn/docs\" target=\"_blank\" rel=\"noopener\">hexo文档</a>。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>偶然间发现了hexo这个博客搭建工具，于是决定将使用多年的云笔记的内容搬迁至这个博客上，分享我的搬迁经历以及踩过的坑吧~。</p>","more":"<h2 id=\"我们开始吧\"><a href=\"#我们开始吧\" class=\"headerlink\" title=\"我们开始吧\"></a>我们开始吧</h2><h3 id=\"新建仓库\"><a href=\"#新建仓库\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3><p>在github新建仓库，如果想要部署在github上，要仓库名为 ==<user-name>.github.io== 而不是user-name ，其中 ==<user-name>== 是你 ==github== 的昵称，要是问为什么，都是眼泪的教训。</user-name></user-name></p>\n<h3 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo</span><br></pre></td></tr></table></figure>\n<h3 id=\"初始化项目\"><a href=\"#初始化项目\" class=\"headerlink\" title=\"初始化项目\"></a>初始化项目</h3><p>初始化命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init</span><br></pre></td></tr></table></figure>\n<p>运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure>\n<p>大功告成，访问 ==localhost:4000== 我们就能看到建的博客的效果了！</p>\n<h3 id=\"将Hexo部署到GitHub-Pages上\"><a href=\"#将Hexo部署到GitHub-Pages上\" class=\"headerlink\" title=\"将Hexo部署到GitHub Pages上\"></a>将Hexo部署到GitHub Pages上</h3><ol>\n<li>将<a href=\"https://github.com/marketplace/travis-ci\" target=\"_blank\" rel=\"noopener\">Travis CI</a> 添加到你的 GitHub 账户中。</li>\n<li>前往 GitHub 的 <a href=\"https://github.com/settings/installations\" target=\"_blank\" rel=\"noopener\">Applications settings</a>，配置 Travis CI 权限，使其能够访问你的 repository。</li>\n<li>你应该会被重定向到 Travis CI 的页面。如果没有，请 <a href=\"https://travis-ci.com/\" target=\"_blank\" rel=\"noopener\">手动前往</a>。</li>\n<li>在浏览器新建一个标签页，前往 GitHub <a href=\"https://github.com/settings/tokens\" target=\"_blank\" rel=\"noopener\">新建 Personal Access Token</a> ，只勾选 repo 的权限并生成一个新的 Token。Token 生成后请复制并保存好。</li>\n<li>回到 Travis CI，前往你的 repository 的设置页面，在 <strong>Environment Variables</strong> 下新建一个环境变量，<strong>Name</strong> 为 GH_TOKEN，<strong>Value</strong> 为刚才你在 GitHub 生成的 Token。确保 <strong>DISPLAY VALUE IN BUILD LOG</strong> 保持 <strong>不被勾选</strong> 避免你的 Token 泄漏。点击 Add 保存。</li>\n<li>在你的 Hexo 站点文件夹中新建一个 ==.travis.yml== 文件：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo: false</span><br><span class=\"line\">language: node_js</span><br><span class=\"line\">node_js:</span><br><span class=\"line\">  - 10 # use nodejs v10 LTS</span><br><span class=\"line\">cache: npm</span><br><span class=\"line\">branches:</span><br><span class=\"line\">  only:</span><br><span class=\"line\">    - master # build master branch only</span><br><span class=\"line\">script:</span><br><span class=\"line\">  - hexo generate # generate static files</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  provider: pages</span><br><span class=\"line\">  skip-cleanup: true</span><br><span class=\"line\">  github-token: $GH_TOKEN</span><br><span class=\"line\">  keep-history: true</span><br><span class=\"line\">  on:</span><br><span class=\"line\">    branch: master</span><br><span class=\"line\">  local-dir: public</span><br></pre></td></tr></table></figure>\n\n<ol start=\"7\">\n<li><p>将.travis.yml 推送到 repository 中。Travis CI 应该会自动开始运行，并将生成的文件推送到同一 repository 下的 gh-pages 分支下</p>\n</li>\n<li><p>在GitHub中前往你的repository 的设置页面，修改 GitHub Pages 的部署分支为 gh-pages。</p>\n</li>\n<li><p>完成以上步骤，我们就能在<user-name>.github.io上看到自己建设的博客了。</user-name></p>\n<h3 id=\"其他配置项\"><a href=\"#其他配置项\" class=\"headerlink\" title=\"其他配置项\"></a>其他配置项</h3><p>请参考<a href=\"https://hexo.io/zh-cn/docs\" target=\"_blank\" rel=\"noopener\">hexo文档</a>。</p>\n</li>\n</ol>"},{"layout":"[post]","title":"函数的防抖和节流","date":"2019-04-07T07:13:43.000Z","_content":"## 什么是防抖？什么是节流？\n### 防抖（debounce）\n> **当持续触发事件时，一定时间段内没有再触发事件，事件处理函数才会执行一次，如果设定的时间到来之前，又一次触发了事件，就重新开始延时。**\n\n### 节流（throttle）\n> **当持续触发事件时，保证一定时间段内只调用一次事件处理函数。**\n\n<!-- more -->\n## 防抖和节流的应用场景\n在前端开发的过程中，我们经常会需要绑定一些持续触发的事件，如 resize、scroll、mousemove 等等，但有些时候我们并不希望在事件持续触发的过程中那么频繁地去执行函数。\n\n### 防抖\n\n**所谓防抖，就是指触发事件后在 n 秒（或毫秒）内函数只能执行一次，如果在 n 秒（或毫秒）内又触发了事件，则会重新计算函数执行时间。**\n\n比如我们进行实时的搜索功能、对用户输入框进行监测，对用户的滚动条进行监测等等。\n\n### 节流\n**所谓节流，就是指连续触发事件但是在 n 秒中只执行一次函数。**\n\n比如我们在做搜索输入时，用户连续点击多次搜索按钮，我们使用节流的方式。\n\n## 防抖和节流的实现\n### 防抖\n防抖可以分为两种，一种是延时、一种是立即执行。\n\n#### 延时版\n\n```js\nfunction debounce(func, wait) {\n    let timeout;\n    return function () {\n        let context = this;\n        let args = arguments;\n\n        if (timeout) clearTimeout(timeout);\n        \n        timeout = setTimeout(() => {\n            func.apply(context, args)\n        }, wait);\n    }\n}\n```\n#### 立即执行版\n\n```js\nfunction debounce(func,wait) {\n    let timeout;\n    return function () {\n        let context = this;\n        let args = arguments;\n\n        if (timeout) clearTimeout(timeout);\n\n        let callNow = !timeout;\n        timeout = setTimeout(() => {\n            timeout = null;\n        }, wait)\n\n        if (callNow) func.apply(context, args)\n    }\n}\n```\n\n\n**二者的区别在于，前者在延时n秒后执行，后者是立即执行，但是在n秒后才能再次执行。**\n\n#### 延时版和立即执行版结合\n\n```js\n/**\n * @desc 函数防抖\n * @param func 函数\n * @param wait 延迟执行毫秒数\n * @param immediate true 表立即执行，false 表非立即执行\n */\n\nfunction debounce(func,wait,immediate) {\n    let timeout;\n\n    return function () {\n        let context = this;\n        let args = arguments;\n\n        if (timeout) clearTimeout(timeout);\n        if (immediate) {\n            var callNow = !timeout;\n            timeout = setTimeout(() => {\n                timeout = null;\n            }, wait)\n            if (callNow) func.apply(context, args)\n        }\n        else {\n            timeout = setTimeout(function(){\n                func.apply(context, args)\n            }, wait);\n        }\n    }\n}\n```\n**这个方法可以作为公用的服务实现防抖。**\n\n### 节流\n节流也可以分为两种，一种是时间戳版，一种是定时器版。\n#### 时间戳\n\n```js\nfunction throttle(func, wait) {\n    let previous = 0;\n    return function() {\n        let now = Date.now();\n        let context = this;\n        let args = arguments;\n        if (now - previous > wait) {\n            func.apply(context, args);\n            previous = now;\n        }\n    }\n}\n```\n#### 定时器\n\n```js\nfunction throttle(func, wait) {\n    let timeout;\n    return function() {\n        let context = this;\n        let args = arguments;\n        if (!timeout) {\n            timeout = setTimeout(() => {\n                timeout = null;\n                func.apply(context, args)\n            }, wait)\n        }\n\n    }\n}\n```\n\n\n**时间戳版和定时器版的节流函数的区别就是，时间戳版的函数触发是在时间段内开始的时候，而定时器版的函数触发是在时间段内结束的时候。**\n\n#### 结合版本\n\n```js\n/**\n * @desc 函数节流\n * @param func 函数\n * @param wait 延迟执行毫秒数\n * @param type 1 表时间戳版，2 表定时器版\n */\nfunction throttle(func, wait ,type) {\n    if(type===1){\n        let previous = 0;\n    }else if(type===2){\n        let timeout;\n    }\n    return function() {\n        let context = this;\n        let args = arguments;\n        if(type===1){\n            let now = Date.now();\n\n            if (now - previous > wait) {\n                func.apply(context, args);\n                previous = now;\n            }\n        }else if(type===2){\n            if (!timeout) {\n                timeout = setTimeout(() => {\n                    timeout = null;\n                    func.apply(context, args)\n                }, wait)\n            }\n        }\n    }\n}\n```\n","source":"_posts/函数的防抖和节流.md","raw":"---\nlayout: '[post]'\ntitle: 函数的防抖和节流\ndate: 2019-04-07 15:13:43\ntags: javascript\n---\n## 什么是防抖？什么是节流？\n### 防抖（debounce）\n> **当持续触发事件时，一定时间段内没有再触发事件，事件处理函数才会执行一次，如果设定的时间到来之前，又一次触发了事件，就重新开始延时。**\n\n### 节流（throttle）\n> **当持续触发事件时，保证一定时间段内只调用一次事件处理函数。**\n\n<!-- more -->\n## 防抖和节流的应用场景\n在前端开发的过程中，我们经常会需要绑定一些持续触发的事件，如 resize、scroll、mousemove 等等，但有些时候我们并不希望在事件持续触发的过程中那么频繁地去执行函数。\n\n### 防抖\n\n**所谓防抖，就是指触发事件后在 n 秒（或毫秒）内函数只能执行一次，如果在 n 秒（或毫秒）内又触发了事件，则会重新计算函数执行时间。**\n\n比如我们进行实时的搜索功能、对用户输入框进行监测，对用户的滚动条进行监测等等。\n\n### 节流\n**所谓节流，就是指连续触发事件但是在 n 秒中只执行一次函数。**\n\n比如我们在做搜索输入时，用户连续点击多次搜索按钮，我们使用节流的方式。\n\n## 防抖和节流的实现\n### 防抖\n防抖可以分为两种，一种是延时、一种是立即执行。\n\n#### 延时版\n\n```js\nfunction debounce(func, wait) {\n    let timeout;\n    return function () {\n        let context = this;\n        let args = arguments;\n\n        if (timeout) clearTimeout(timeout);\n        \n        timeout = setTimeout(() => {\n            func.apply(context, args)\n        }, wait);\n    }\n}\n```\n#### 立即执行版\n\n```js\nfunction debounce(func,wait) {\n    let timeout;\n    return function () {\n        let context = this;\n        let args = arguments;\n\n        if (timeout) clearTimeout(timeout);\n\n        let callNow = !timeout;\n        timeout = setTimeout(() => {\n            timeout = null;\n        }, wait)\n\n        if (callNow) func.apply(context, args)\n    }\n}\n```\n\n\n**二者的区别在于，前者在延时n秒后执行，后者是立即执行，但是在n秒后才能再次执行。**\n\n#### 延时版和立即执行版结合\n\n```js\n/**\n * @desc 函数防抖\n * @param func 函数\n * @param wait 延迟执行毫秒数\n * @param immediate true 表立即执行，false 表非立即执行\n */\n\nfunction debounce(func,wait,immediate) {\n    let timeout;\n\n    return function () {\n        let context = this;\n        let args = arguments;\n\n        if (timeout) clearTimeout(timeout);\n        if (immediate) {\n            var callNow = !timeout;\n            timeout = setTimeout(() => {\n                timeout = null;\n            }, wait)\n            if (callNow) func.apply(context, args)\n        }\n        else {\n            timeout = setTimeout(function(){\n                func.apply(context, args)\n            }, wait);\n        }\n    }\n}\n```\n**这个方法可以作为公用的服务实现防抖。**\n\n### 节流\n节流也可以分为两种，一种是时间戳版，一种是定时器版。\n#### 时间戳\n\n```js\nfunction throttle(func, wait) {\n    let previous = 0;\n    return function() {\n        let now = Date.now();\n        let context = this;\n        let args = arguments;\n        if (now - previous > wait) {\n            func.apply(context, args);\n            previous = now;\n        }\n    }\n}\n```\n#### 定时器\n\n```js\nfunction throttle(func, wait) {\n    let timeout;\n    return function() {\n        let context = this;\n        let args = arguments;\n        if (!timeout) {\n            timeout = setTimeout(() => {\n                timeout = null;\n                func.apply(context, args)\n            }, wait)\n        }\n\n    }\n}\n```\n\n\n**时间戳版和定时器版的节流函数的区别就是，时间戳版的函数触发是在时间段内开始的时候，而定时器版的函数触发是在时间段内结束的时候。**\n\n#### 结合版本\n\n```js\n/**\n * @desc 函数节流\n * @param func 函数\n * @param wait 延迟执行毫秒数\n * @param type 1 表时间戳版，2 表定时器版\n */\nfunction throttle(func, wait ,type) {\n    if(type===1){\n        let previous = 0;\n    }else if(type===2){\n        let timeout;\n    }\n    return function() {\n        let context = this;\n        let args = arguments;\n        if(type===1){\n            let now = Date.now();\n\n            if (now - previous > wait) {\n                func.apply(context, args);\n                previous = now;\n            }\n        }else if(type===2){\n            if (!timeout) {\n                timeout = setTimeout(() => {\n                    timeout = null;\n                    func.apply(context, args)\n                }, wait)\n            }\n        }\n    }\n}\n```\n","slug":"函数的防抖和节流","published":1,"updated":"2020-02-05T07:42:37.000Z","comments":1,"photos":[],"link":"","_id":"ck7onzqy1000qyts69est56wm","content":"<h2 id=\"什么是防抖？什么是节流？\"><a href=\"#什么是防抖？什么是节流？\" class=\"headerlink\" title=\"什么是防抖？什么是节流？\"></a>什么是防抖？什么是节流？</h2><h3 id=\"防抖（debounce）\"><a href=\"#防抖（debounce）\" class=\"headerlink\" title=\"防抖（debounce）\"></a>防抖（debounce）</h3><blockquote>\n<p><strong>当持续触发事件时，一定时间段内没有再触发事件，事件处理函数才会执行一次，如果设定的时间到来之前，又一次触发了事件，就重新开始延时。</strong></p>\n</blockquote>\n<h3 id=\"节流（throttle）\"><a href=\"#节流（throttle）\" class=\"headerlink\" title=\"节流（throttle）\"></a>节流（throttle）</h3><blockquote>\n<p><strong>当持续触发事件时，保证一定时间段内只调用一次事件处理函数。</strong></p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"防抖和节流的应用场景\"><a href=\"#防抖和节流的应用场景\" class=\"headerlink\" title=\"防抖和节流的应用场景\"></a>防抖和节流的应用场景</h2><p>在前端开发的过程中，我们经常会需要绑定一些持续触发的事件，如 resize、scroll、mousemove 等等，但有些时候我们并不希望在事件持续触发的过程中那么频繁地去执行函数。</p>\n<h3 id=\"防抖\"><a href=\"#防抖\" class=\"headerlink\" title=\"防抖\"></a>防抖</h3><p><strong>所谓防抖，就是指触发事件后在 n 秒（或毫秒）内函数只能执行一次，如果在 n 秒（或毫秒）内又触发了事件，则会重新计算函数执行时间。</strong></p>\n<p>比如我们进行实时的搜索功能、对用户输入框进行监测，对用户的滚动条进行监测等等。</p>\n<h3 id=\"节流\"><a href=\"#节流\" class=\"headerlink\" title=\"节流\"></a>节流</h3><p><strong>所谓节流，就是指连续触发事件但是在 n 秒中只执行一次函数。</strong></p>\n<p>比如我们在做搜索输入时，用户连续点击多次搜索按钮，我们使用节流的方式。</p>\n<h2 id=\"防抖和节流的实现\"><a href=\"#防抖和节流的实现\" class=\"headerlink\" title=\"防抖和节流的实现\"></a>防抖和节流的实现</h2><h3 id=\"防抖-1\"><a href=\"#防抖-1\" class=\"headerlink\" title=\"防抖\"></a>防抖</h3><p>防抖可以分为两种，一种是延时、一种是立即执行。</p>\n<h4 id=\"延时版\"><a href=\"#延时版\" class=\"headerlink\" title=\"延时版\"></a>延时版</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">func, wait</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timeout;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> context = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timeout) clearTimeout(timeout);</span><br><span class=\"line\">        </span><br><span class=\"line\">        timeout = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            func.apply(context, args)</span><br><span class=\"line\">        &#125;, wait);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"立即执行版\"><a href=\"#立即执行版\" class=\"headerlink\" title=\"立即执行版\"></a>立即执行版</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">func,wait</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timeout;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> context = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timeout) clearTimeout(timeout);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> callNow = !timeout;</span><br><span class=\"line\">        timeout = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;, wait)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (callNow) func.apply(context, args)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p><strong>二者的区别在于，前者在延时n秒后执行，后者是立即执行，但是在n秒后才能再次执行。</strong></p>\n<h4 id=\"延时版和立即执行版结合\"><a href=\"#延时版和立即执行版结合\" class=\"headerlink\" title=\"延时版和立即执行版结合\"></a>延时版和立即执行版结合</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@desc </span>函数防抖</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param </span>func 函数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param </span>wait 延迟执行毫秒数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param </span>immediate true 表立即执行，false 表非立即执行</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">func,wait,immediate</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timeout;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> context = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timeout) clearTimeout(timeout);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (immediate) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> callNow = !timeout;</span><br><span class=\"line\">            timeout = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">                timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">            &#125;, wait)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (callNow) func.apply(context, args)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            timeout = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">                func.apply(context, args)</span><br><span class=\"line\">            &#125;, wait);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>这个方法可以作为公用的服务实现防抖。</strong></p>\n<h3 id=\"节流-1\"><a href=\"#节流-1\" class=\"headerlink\" title=\"节流\"></a>节流</h3><p>节流也可以分为两种，一种是时间戳版，一种是定时器版。</p>\n<h4 id=\"时间戳\"><a href=\"#时间戳\" class=\"headerlink\" title=\"时间戳\"></a>时间戳</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">throttle</span>(<span class=\"params\">func, wait</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> previous = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> now = <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\">        <span class=\"keyword\">let</span> context = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (now - previous &gt; wait) &#123;</span><br><span class=\"line\">            func.apply(context, args);</span><br><span class=\"line\">            previous = now;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"定时器\"><a href=\"#定时器\" class=\"headerlink\" title=\"定时器\"></a>定时器</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">throttle</span>(<span class=\"params\">func, wait</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timeout;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> context = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!timeout) &#123;</span><br><span class=\"line\">            timeout = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">                timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                func.apply(context, args)</span><br><span class=\"line\">            &#125;, wait)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p><strong>时间戳版和定时器版的节流函数的区别就是，时间戳版的函数触发是在时间段内开始的时候，而定时器版的函数触发是在时间段内结束的时候。</strong></p>\n<h4 id=\"结合版本\"><a href=\"#结合版本\" class=\"headerlink\" title=\"结合版本\"></a>结合版本</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@desc </span>函数节流</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param </span>func 函数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param </span>wait 延迟执行毫秒数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param </span>type 1 表时间戳版，2 表定时器版</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">throttle</span>(<span class=\"params\">func, wait ,type</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(type===<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> previous = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(type===<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> timeout;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> context = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(type===<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> now = <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (now - previous &gt; wait) &#123;</span><br><span class=\"line\">                func.apply(context, args);</span><br><span class=\"line\">                previous = now;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(type===<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!timeout) &#123;</span><br><span class=\"line\">                timeout = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">                    timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                    func.apply(context, args)</span><br><span class=\"line\">                &#125;, wait)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"什么是防抖？什么是节流？\"><a href=\"#什么是防抖？什么是节流？\" class=\"headerlink\" title=\"什么是防抖？什么是节流？\"></a>什么是防抖？什么是节流？</h2><h3 id=\"防抖（debounce）\"><a href=\"#防抖（debounce）\" class=\"headerlink\" title=\"防抖（debounce）\"></a>防抖（debounce）</h3><blockquote>\n<p><strong>当持续触发事件时，一定时间段内没有再触发事件，事件处理函数才会执行一次，如果设定的时间到来之前，又一次触发了事件，就重新开始延时。</strong></p>\n</blockquote>\n<h3 id=\"节流（throttle）\"><a href=\"#节流（throttle）\" class=\"headerlink\" title=\"节流（throttle）\"></a>节流（throttle）</h3><blockquote>\n<p><strong>当持续触发事件时，保证一定时间段内只调用一次事件处理函数。</strong></p>\n</blockquote>","more":"<h2 id=\"防抖和节流的应用场景\"><a href=\"#防抖和节流的应用场景\" class=\"headerlink\" title=\"防抖和节流的应用场景\"></a>防抖和节流的应用场景</h2><p>在前端开发的过程中，我们经常会需要绑定一些持续触发的事件，如 resize、scroll、mousemove 等等，但有些时候我们并不希望在事件持续触发的过程中那么频繁地去执行函数。</p>\n<h3 id=\"防抖\"><a href=\"#防抖\" class=\"headerlink\" title=\"防抖\"></a>防抖</h3><p><strong>所谓防抖，就是指触发事件后在 n 秒（或毫秒）内函数只能执行一次，如果在 n 秒（或毫秒）内又触发了事件，则会重新计算函数执行时间。</strong></p>\n<p>比如我们进行实时的搜索功能、对用户输入框进行监测，对用户的滚动条进行监测等等。</p>\n<h3 id=\"节流\"><a href=\"#节流\" class=\"headerlink\" title=\"节流\"></a>节流</h3><p><strong>所谓节流，就是指连续触发事件但是在 n 秒中只执行一次函数。</strong></p>\n<p>比如我们在做搜索输入时，用户连续点击多次搜索按钮，我们使用节流的方式。</p>\n<h2 id=\"防抖和节流的实现\"><a href=\"#防抖和节流的实现\" class=\"headerlink\" title=\"防抖和节流的实现\"></a>防抖和节流的实现</h2><h3 id=\"防抖-1\"><a href=\"#防抖-1\" class=\"headerlink\" title=\"防抖\"></a>防抖</h3><p>防抖可以分为两种，一种是延时、一种是立即执行。</p>\n<h4 id=\"延时版\"><a href=\"#延时版\" class=\"headerlink\" title=\"延时版\"></a>延时版</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">func, wait</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timeout;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> context = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timeout) clearTimeout(timeout);</span><br><span class=\"line\">        </span><br><span class=\"line\">        timeout = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            func.apply(context, args)</span><br><span class=\"line\">        &#125;, wait);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"立即执行版\"><a href=\"#立即执行版\" class=\"headerlink\" title=\"立即执行版\"></a>立即执行版</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">func,wait</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timeout;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> context = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timeout) clearTimeout(timeout);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> callNow = !timeout;</span><br><span class=\"line\">        timeout = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;, wait)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (callNow) func.apply(context, args)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p><strong>二者的区别在于，前者在延时n秒后执行，后者是立即执行，但是在n秒后才能再次执行。</strong></p>\n<h4 id=\"延时版和立即执行版结合\"><a href=\"#延时版和立即执行版结合\" class=\"headerlink\" title=\"延时版和立即执行版结合\"></a>延时版和立即执行版结合</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@desc </span>函数防抖</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param </span>func 函数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param </span>wait 延迟执行毫秒数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param </span>immediate true 表立即执行，false 表非立即执行</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">func,wait,immediate</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timeout;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> context = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timeout) clearTimeout(timeout);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (immediate) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> callNow = !timeout;</span><br><span class=\"line\">            timeout = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">                timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">            &#125;, wait)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (callNow) func.apply(context, args)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            timeout = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">                func.apply(context, args)</span><br><span class=\"line\">            &#125;, wait);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>这个方法可以作为公用的服务实现防抖。</strong></p>\n<h3 id=\"节流-1\"><a href=\"#节流-1\" class=\"headerlink\" title=\"节流\"></a>节流</h3><p>节流也可以分为两种，一种是时间戳版，一种是定时器版。</p>\n<h4 id=\"时间戳\"><a href=\"#时间戳\" class=\"headerlink\" title=\"时间戳\"></a>时间戳</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">throttle</span>(<span class=\"params\">func, wait</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> previous = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> now = <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\">        <span class=\"keyword\">let</span> context = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (now - previous &gt; wait) &#123;</span><br><span class=\"line\">            func.apply(context, args);</span><br><span class=\"line\">            previous = now;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"定时器\"><a href=\"#定时器\" class=\"headerlink\" title=\"定时器\"></a>定时器</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">throttle</span>(<span class=\"params\">func, wait</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timeout;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> context = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!timeout) &#123;</span><br><span class=\"line\">            timeout = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">                timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                func.apply(context, args)</span><br><span class=\"line\">            &#125;, wait)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p><strong>时间戳版和定时器版的节流函数的区别就是，时间戳版的函数触发是在时间段内开始的时候，而定时器版的函数触发是在时间段内结束的时候。</strong></p>\n<h4 id=\"结合版本\"><a href=\"#结合版本\" class=\"headerlink\" title=\"结合版本\"></a>结合版本</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@desc </span>函数节流</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param </span>func 函数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param </span>wait 延迟执行毫秒数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param </span>type 1 表时间戳版，2 表定时器版</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">throttle</span>(<span class=\"params\">func, wait ,type</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(type===<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> previous = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(type===<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> timeout;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> context = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(type===<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> now = <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (now - previous &gt; wait) &#123;</span><br><span class=\"line\">                func.apply(context, args);</span><br><span class=\"line\">                previous = now;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(type===<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!timeout) &#123;</span><br><span class=\"line\">                timeout = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">                    timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                    func.apply(context, args)</span><br><span class=\"line\">                &#125;, wait)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"layout":"[post]","title":"前端性能优化——DNS预解析","date":"2019-02-21T08:39:49.000Z","_content":"## 什么是DNS预解析？\n我们在进行前端性能优化时，涉及到DNS方面的优化一般有两点： 一个是减少DNS的请求次数，另一个就是进行DNS预解析 。\n\nDNS 实现域名到IP的映射。通过域名访问站点，每次请求都要做DNS解析。目前每次DNS解析，通常在200ms以下。针对DNS解析耗时问题，一些浏览器通过DNS Prefetch 来提高访问的流畅性。  \n\n**DNS Prefetch** 是一种DNS 预解析技术，当浏览网页时，浏览器会在加载网页时对网页中的域名进行解析缓存，这样在单击当前网页中的连接时就无需进行DNS的解析，减少用户等待时间，提高用户体验。\n#### **DNS Prefetch，即DNS预解析。**  \n<!-- more -->\n\n## 为什么使用DNS预解析？\nDNS 作为互联网的基础协议，其解析的速度似乎很容易被网站优化人员忽视。现在大多数新浏览器已经针对DNS解析进行了优化，典型的一次DNS解析需要耗费 20-120 毫秒，减少DNS解析时间和次数是个很好的优化方式。DNS预解析 是让具有此属性的域名不需要用户点击链接就在后台解析，而域名解析和内容载入是串行的网络操作，所以这个方式能 减少用户的等待时间，提升用户体验 。\n#### DNS解析的运行顺序\n浏览器对网站第一次的域名DNS解析查找流程依次为：  \n**浏览器缓存-系统缓存-路由器缓存-ISP DNS缓存-递归搜索**  \n## 支持DNS Prefetch的浏览器\n- Chrome\n- IE:9+\n- Firefox:3.5+\n- Safari:5+\n- Edge  \n\n## 如何在网站中使用DNS预解析\n因为浏览器的html解析是顺序的，所以DNS Prefetch 应该尽量的放在网页的前面，推荐放在 <meta charset=\"UTF-8\"> 后面：  \n```html\n<meta http-equiv=\"x-dns-prefetch-control\" content=\"on\">\n<!--打开和关闭DNS预预解析-->\n<link rel=\"dns-prefetch\" href=\"//www.baidu.com\">\n<!--解析的DNS的地址-->\n```\n注：dns-prefetch需慎用，多页面重复DNS预解析会增加重复DNS查询次数。\n","source":"_posts/前端性能优化——DNS预解析.md","raw":"---\nlayout: '[post]'\ntitle: 前端性能优化——DNS预解析\ndate: 2019-02-21 16:39:49\ntags: 前端性能优化\n---\n## 什么是DNS预解析？\n我们在进行前端性能优化时，涉及到DNS方面的优化一般有两点： 一个是减少DNS的请求次数，另一个就是进行DNS预解析 。\n\nDNS 实现域名到IP的映射。通过域名访问站点，每次请求都要做DNS解析。目前每次DNS解析，通常在200ms以下。针对DNS解析耗时问题，一些浏览器通过DNS Prefetch 来提高访问的流畅性。  \n\n**DNS Prefetch** 是一种DNS 预解析技术，当浏览网页时，浏览器会在加载网页时对网页中的域名进行解析缓存，这样在单击当前网页中的连接时就无需进行DNS的解析，减少用户等待时间，提高用户体验。\n#### **DNS Prefetch，即DNS预解析。**  \n<!-- more -->\n\n## 为什么使用DNS预解析？\nDNS 作为互联网的基础协议，其解析的速度似乎很容易被网站优化人员忽视。现在大多数新浏览器已经针对DNS解析进行了优化，典型的一次DNS解析需要耗费 20-120 毫秒，减少DNS解析时间和次数是个很好的优化方式。DNS预解析 是让具有此属性的域名不需要用户点击链接就在后台解析，而域名解析和内容载入是串行的网络操作，所以这个方式能 减少用户的等待时间，提升用户体验 。\n#### DNS解析的运行顺序\n浏览器对网站第一次的域名DNS解析查找流程依次为：  \n**浏览器缓存-系统缓存-路由器缓存-ISP DNS缓存-递归搜索**  \n## 支持DNS Prefetch的浏览器\n- Chrome\n- IE:9+\n- Firefox:3.5+\n- Safari:5+\n- Edge  \n\n## 如何在网站中使用DNS预解析\n因为浏览器的html解析是顺序的，所以DNS Prefetch 应该尽量的放在网页的前面，推荐放在 <meta charset=\"UTF-8\"> 后面：  \n```html\n<meta http-equiv=\"x-dns-prefetch-control\" content=\"on\">\n<!--打开和关闭DNS预预解析-->\n<link rel=\"dns-prefetch\" href=\"//www.baidu.com\">\n<!--解析的DNS的地址-->\n```\n注：dns-prefetch需慎用，多页面重复DNS预解析会增加重复DNS查询次数。\n","slug":"前端性能优化——DNS预解析","published":1,"updated":"2020-02-05T02:21:53.000Z","comments":1,"photos":[],"link":"","_id":"ck7onzqy3000tyts6hzca7up2","content":"<h2 id=\"什么是DNS预解析？\"><a href=\"#什么是DNS预解析？\" class=\"headerlink\" title=\"什么是DNS预解析？\"></a>什么是DNS预解析？</h2><p>我们在进行前端性能优化时，涉及到DNS方面的优化一般有两点： 一个是减少DNS的请求次数，另一个就是进行DNS预解析 。</p>\n<p>DNS 实现域名到IP的映射。通过域名访问站点，每次请求都要做DNS解析。目前每次DNS解析，通常在200ms以下。针对DNS解析耗时问题，一些浏览器通过DNS Prefetch 来提高访问的流畅性。  </p>\n<p><strong>DNS Prefetch</strong> 是一种DNS 预解析技术，当浏览网页时，浏览器会在加载网页时对网页中的域名进行解析缓存，这样在单击当前网页中的连接时就无需进行DNS的解析，减少用户等待时间，提高用户体验。</p>\n<h4 id=\"DNS-Prefetch，即DNS预解析。\"><a href=\"#DNS-Prefetch，即DNS预解析。\" class=\"headerlink\" title=\"DNS Prefetch，即DNS预解析。\"></a><strong>DNS Prefetch，即DNS预解析。</strong></h4><a id=\"more\"></a>\n\n<h2 id=\"为什么使用DNS预解析？\"><a href=\"#为什么使用DNS预解析？\" class=\"headerlink\" title=\"为什么使用DNS预解析？\"></a>为什么使用DNS预解析？</h2><p>DNS 作为互联网的基础协议，其解析的速度似乎很容易被网站优化人员忽视。现在大多数新浏览器已经针对DNS解析进行了优化，典型的一次DNS解析需要耗费 20-120 毫秒，减少DNS解析时间和次数是个很好的优化方式。DNS预解析 是让具有此属性的域名不需要用户点击链接就在后台解析，而域名解析和内容载入是串行的网络操作，所以这个方式能 减少用户的等待时间，提升用户体验 。</p>\n<h4 id=\"DNS解析的运行顺序\"><a href=\"#DNS解析的运行顺序\" class=\"headerlink\" title=\"DNS解析的运行顺序\"></a>DNS解析的运行顺序</h4><p>浏览器对网站第一次的域名DNS解析查找流程依次为：<br><strong>浏览器缓存-系统缓存-路由器缓存-ISP DNS缓存-递归搜索</strong>  </p>\n<h2 id=\"支持DNS-Prefetch的浏览器\"><a href=\"#支持DNS-Prefetch的浏览器\" class=\"headerlink\" title=\"支持DNS Prefetch的浏览器\"></a>支持DNS Prefetch的浏览器</h2><ul>\n<li>Chrome</li>\n<li>IE:9+</li>\n<li>Firefox:3.5+</li>\n<li>Safari:5+</li>\n<li>Edge  </li>\n</ul>\n<h2 id=\"如何在网站中使用DNS预解析\"><a href=\"#如何在网站中使用DNS预解析\" class=\"headerlink\" title=\"如何在网站中使用DNS预解析\"></a>如何在网站中使用DNS预解析</h2><p>因为浏览器的html解析是顺序的，所以DNS Prefetch 应该尽量的放在网页的前面，推荐放在 <meta charset=\"UTF-8\"> 后面：  </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"x-dns-prefetch-control\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"on\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--打开和关闭DNS预预解析--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"dns-prefetch\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"//www.baidu.com\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--解析的DNS的地址--&gt;</span></span><br></pre></td></tr></table></figure>\n<p>注：dns-prefetch需慎用，多页面重复DNS预解析会增加重复DNS查询次数。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"什么是DNS预解析？\"><a href=\"#什么是DNS预解析？\" class=\"headerlink\" title=\"什么是DNS预解析？\"></a>什么是DNS预解析？</h2><p>我们在进行前端性能优化时，涉及到DNS方面的优化一般有两点： 一个是减少DNS的请求次数，另一个就是进行DNS预解析 。</p>\n<p>DNS 实现域名到IP的映射。通过域名访问站点，每次请求都要做DNS解析。目前每次DNS解析，通常在200ms以下。针对DNS解析耗时问题，一些浏览器通过DNS Prefetch 来提高访问的流畅性。  </p>\n<p><strong>DNS Prefetch</strong> 是一种DNS 预解析技术，当浏览网页时，浏览器会在加载网页时对网页中的域名进行解析缓存，这样在单击当前网页中的连接时就无需进行DNS的解析，减少用户等待时间，提高用户体验。</p>\n<h4 id=\"DNS-Prefetch，即DNS预解析。\"><a href=\"#DNS-Prefetch，即DNS预解析。\" class=\"headerlink\" title=\"DNS Prefetch，即DNS预解析。\"></a><strong>DNS Prefetch，即DNS预解析。</strong></h4>","more":"<h2 id=\"为什么使用DNS预解析？\"><a href=\"#为什么使用DNS预解析？\" class=\"headerlink\" title=\"为什么使用DNS预解析？\"></a>为什么使用DNS预解析？</h2><p>DNS 作为互联网的基础协议，其解析的速度似乎很容易被网站优化人员忽视。现在大多数新浏览器已经针对DNS解析进行了优化，典型的一次DNS解析需要耗费 20-120 毫秒，减少DNS解析时间和次数是个很好的优化方式。DNS预解析 是让具有此属性的域名不需要用户点击链接就在后台解析，而域名解析和内容载入是串行的网络操作，所以这个方式能 减少用户的等待时间，提升用户体验 。</p>\n<h4 id=\"DNS解析的运行顺序\"><a href=\"#DNS解析的运行顺序\" class=\"headerlink\" title=\"DNS解析的运行顺序\"></a>DNS解析的运行顺序</h4><p>浏览器对网站第一次的域名DNS解析查找流程依次为：<br><strong>浏览器缓存-系统缓存-路由器缓存-ISP DNS缓存-递归搜索</strong>  </p>\n<h2 id=\"支持DNS-Prefetch的浏览器\"><a href=\"#支持DNS-Prefetch的浏览器\" class=\"headerlink\" title=\"支持DNS Prefetch的浏览器\"></a>支持DNS Prefetch的浏览器</h2><ul>\n<li>Chrome</li>\n<li>IE:9+</li>\n<li>Firefox:3.5+</li>\n<li>Safari:5+</li>\n<li>Edge  </li>\n</ul>\n<h2 id=\"如何在网站中使用DNS预解析\"><a href=\"#如何在网站中使用DNS预解析\" class=\"headerlink\" title=\"如何在网站中使用DNS预解析\"></a>如何在网站中使用DNS预解析</h2><p>因为浏览器的html解析是顺序的，所以DNS Prefetch 应该尽量的放在网页的前面，推荐放在 <meta charset=\"UTF-8\"> 后面：  </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"x-dns-prefetch-control\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"on\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--打开和关闭DNS预预解析--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"dns-prefetch\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"//www.baidu.com\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--解析的DNS的地址--&gt;</span></span><br></pre></td></tr></table></figure>\n<p>注：dns-prefetch需慎用，多页面重复DNS预解析会增加重复DNS查询次数。</p>"},{"layout":"[post]","title":"页面布局","date":"2019-04-19T07:13:43.000Z","_content":"## 页面布局\n页面布局是作为前端开发的必备技能，能够让页面适应多种规格大小的屏幕，才是一个合格的开发，那么我们有多少种形式呢？  \n<!-- more -->\n**我们使用最基本的三格式布局来做这个尝试**\n### float方式\n\n```css\n        .area {\n            min-height: 200px;\n            \n        }\n\n        .box-one {\n            width: 300px;\n            background: red;\n            float: left;\n        }\n\n        .box-two {\n            background: blue;\n            color: #ffffff;\n            text-align: center;\n        }\n\n        .box-three {\n            width: 300px;\n            background: orange;\n            float: right;\n        }\n```\n\n```html\n    <article class=\"area\">\n        <div class=\"box-one\">box1</div>\n        <div class=\"box-three\">box3</div>\n        <div class=\"box-two\">\n            <h2>页面布局</h2>\n            <p>我是第一行</p>\n            <p>我是第二行</p>\n            <p>我是第三行</p>\n        </div>\n    </article>\n```\n**需要注意box-two是放在最后位置的，因为float的关系，放到最后会将三号挤下去**\n### 使用绝对定位\n**过于low，不必了解了。**\n### flex布局\n\n```css\n.area {\n            min-height: 200px;\n            display: grid;\n            width: 100%;\n        }\n\n        .box-one {\n            width: 300px;\n            background: red;\n        }\n\n        .box-two {\n            background: blue;\n            color: #ffffff;\n            text-align: center;\n            flex-grow: 1;\n        }\n\n        .box-three {\n            width: 300px;\n            background: orange;\n        }\n```\n\n```html\n <article class=\"area\">\n        <div class=\"box-one\">box1</div>\n        <div class=\"box-two\">\n            <h2>页面布局</h2>\n            <p>我是第一行</p>\n            <p>我是第二行</p>\n            <p>我是第三行</p>\n        </div>\n        <div class=\"box-three\">box3</div>\n\n    </article>\n```\n### grid布局\n\n```css\n.area {\n            min-height: 200px;\n            display: grid;\n            width: 100%;\n            grid-template-columns: 33% 34% 33%;\n        }\n\n        .box-one {\n            background: red;\n        }\n\n        .box-two {\n            background: blue;\n            color: #ffffff;\n            text-align: center;\n        }\n\n        .box-three {\n            background: orange;\n        }\n```\n```html\n <article class=\"area\">\n        <div class=\"box-one\">box1</div>\n        <div class=\"box-two\">\n            <h2>页面布局</h2>\n            <p>我是第一行</p>\n            <p>我是第二行</p>\n            <p>我是第三行</p>\n        </div>\n        <div class=\"box-three\">box3</div>\n\n    </article>\n```\n### table布局\n\n```css\n        .area {\n            min-height: 200px;\n            display: table;\n            width: 100%;\n\n        }\n\n        .area div {\n            display: table-cell;\n            height: 200px;\n        }\n\n        .box-one {\n            background: red;\n        }\n\n        .box-two {\n            background: blue;\n            color: #ffffff;\n            text-align: center;\n        }\n\n        .box-three {\n            background: orange;\n        }\n```\n```html\n <article class=\"area\">\n        <div class=\"box-one\">box1</div>\n        <div class=\"box-two\">\n            <h2>页面布局</h2>\n            <p>我是第一行</p>\n            <p>我是第二行</p>\n            <p>我是第三行</p>\n        </div>\n        <div class=\"box-three\">box3</div>\n\n    </article>\n```\n各方案优缺点：\n\n1.浮动和绝对定位都脱离了文档流，浮动如果周边处理得当，兼容性就会比较好，绝对定位使用较方便。\n\n2.flex布局是CSS3中新增，就是为了解决浮动和绝对顶对带来的不足，是一种比较完美的解决方案。\n\n3.网格布局是最新特性，就像是栅格系统。代码量少。\n\n4.表格布局一旦有一部分高度发生变化，如当表格中内容较多，超出设定高度后，其余部分都会发生变化，这样会不符合开发要求，用户体检也不好。\n\n5.上述题目，当高度未知时，只有flex布局和table布局通用。\n\n\n\n","source":"_posts/页面布局.md","raw":"---\nlayout: '[post]'\ntitle: 页面布局\ndate: 2019-04-19 15:13:43\ntags: html\n---\n## 页面布局\n页面布局是作为前端开发的必备技能，能够让页面适应多种规格大小的屏幕，才是一个合格的开发，那么我们有多少种形式呢？  \n<!-- more -->\n**我们使用最基本的三格式布局来做这个尝试**\n### float方式\n\n```css\n        .area {\n            min-height: 200px;\n            \n        }\n\n        .box-one {\n            width: 300px;\n            background: red;\n            float: left;\n        }\n\n        .box-two {\n            background: blue;\n            color: #ffffff;\n            text-align: center;\n        }\n\n        .box-three {\n            width: 300px;\n            background: orange;\n            float: right;\n        }\n```\n\n```html\n    <article class=\"area\">\n        <div class=\"box-one\">box1</div>\n        <div class=\"box-three\">box3</div>\n        <div class=\"box-two\">\n            <h2>页面布局</h2>\n            <p>我是第一行</p>\n            <p>我是第二行</p>\n            <p>我是第三行</p>\n        </div>\n    </article>\n```\n**需要注意box-two是放在最后位置的，因为float的关系，放到最后会将三号挤下去**\n### 使用绝对定位\n**过于low，不必了解了。**\n### flex布局\n\n```css\n.area {\n            min-height: 200px;\n            display: grid;\n            width: 100%;\n        }\n\n        .box-one {\n            width: 300px;\n            background: red;\n        }\n\n        .box-two {\n            background: blue;\n            color: #ffffff;\n            text-align: center;\n            flex-grow: 1;\n        }\n\n        .box-three {\n            width: 300px;\n            background: orange;\n        }\n```\n\n```html\n <article class=\"area\">\n        <div class=\"box-one\">box1</div>\n        <div class=\"box-two\">\n            <h2>页面布局</h2>\n            <p>我是第一行</p>\n            <p>我是第二行</p>\n            <p>我是第三行</p>\n        </div>\n        <div class=\"box-three\">box3</div>\n\n    </article>\n```\n### grid布局\n\n```css\n.area {\n            min-height: 200px;\n            display: grid;\n            width: 100%;\n            grid-template-columns: 33% 34% 33%;\n        }\n\n        .box-one {\n            background: red;\n        }\n\n        .box-two {\n            background: blue;\n            color: #ffffff;\n            text-align: center;\n        }\n\n        .box-three {\n            background: orange;\n        }\n```\n```html\n <article class=\"area\">\n        <div class=\"box-one\">box1</div>\n        <div class=\"box-two\">\n            <h2>页面布局</h2>\n            <p>我是第一行</p>\n            <p>我是第二行</p>\n            <p>我是第三行</p>\n        </div>\n        <div class=\"box-three\">box3</div>\n\n    </article>\n```\n### table布局\n\n```css\n        .area {\n            min-height: 200px;\n            display: table;\n            width: 100%;\n\n        }\n\n        .area div {\n            display: table-cell;\n            height: 200px;\n        }\n\n        .box-one {\n            background: red;\n        }\n\n        .box-two {\n            background: blue;\n            color: #ffffff;\n            text-align: center;\n        }\n\n        .box-three {\n            background: orange;\n        }\n```\n```html\n <article class=\"area\">\n        <div class=\"box-one\">box1</div>\n        <div class=\"box-two\">\n            <h2>页面布局</h2>\n            <p>我是第一行</p>\n            <p>我是第二行</p>\n            <p>我是第三行</p>\n        </div>\n        <div class=\"box-three\">box3</div>\n\n    </article>\n```\n各方案优缺点：\n\n1.浮动和绝对定位都脱离了文档流，浮动如果周边处理得当，兼容性就会比较好，绝对定位使用较方便。\n\n2.flex布局是CSS3中新增，就是为了解决浮动和绝对顶对带来的不足，是一种比较完美的解决方案。\n\n3.网格布局是最新特性，就像是栅格系统。代码量少。\n\n4.表格布局一旦有一部分高度发生变化，如当表格中内容较多，超出设定高度后，其余部分都会发生变化，这样会不符合开发要求，用户体检也不好。\n\n5.上述题目，当高度未知时，只有flex布局和table布局通用。\n\n\n\n","slug":"页面布局","published":1,"updated":"2020-02-12T10:03:14.000Z","comments":1,"photos":[],"link":"","_id":"ck7onzqy5000vyts6dbyqa0qi","content":"<h2 id=\"页面布局\"><a href=\"#页面布局\" class=\"headerlink\" title=\"页面布局\"></a>页面布局</h2><p>页面布局是作为前端开发的必备技能，能够让页面适应多种规格大小的屏幕，才是一个合格的开发，那么我们有多少种形式呢？  </p>\n<a id=\"more\"></a>\n<p><strong>我们使用最基本的三格式布局来做这个尝试</strong></p>\n<h3 id=\"float方式\"><a href=\"#float方式\" class=\"headerlink\" title=\"float方式\"></a>float方式</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.area</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">min-height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box-one</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box-two</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: blue;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#ffffff</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box-three</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: orange;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: right;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">article</span> <span class=\"attr\">class</span>=<span class=\"string\">\"area\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box-one\"</span>&gt;</span>box1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box-three\"</span>&gt;</span>box3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box-two\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>页面布局<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是第一行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是第二行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是第三行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>需要注意box-two是放在最后位置的，因为float的关系，放到最后会将三号挤下去</strong></p>\n<h3 id=\"使用绝对定位\"><a href=\"#使用绝对定位\" class=\"headerlink\" title=\"使用绝对定位\"></a>使用绝对定位</h3><p><strong>过于low，不必了解了。</strong></p>\n<h3 id=\"flex布局\"><a href=\"#flex布局\" class=\"headerlink\" title=\"flex布局\"></a>flex布局</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.area</span> &#123;</span><br><span class=\"line\">            <span class=\"attribute\">min-height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">            <span class=\"attribute\">display</span>: grid;</span><br><span class=\"line\">            <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"selector-class\">.box-one</span> &#123;</span><br><span class=\"line\">            <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">            <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"selector-class\">.box-two</span> &#123;</span><br><span class=\"line\">            <span class=\"attribute\">background</span>: blue;</span><br><span class=\"line\">            <span class=\"attribute\">color</span>: <span class=\"number\">#ffffff</span>;</span><br><span class=\"line\">            <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">            <span class=\"attribute\">flex-grow</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"selector-class\">.box-three</span> &#123;</span><br><span class=\"line\">            <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">            <span class=\"attribute\">background</span>: orange;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">article</span> <span class=\"attr\">class</span>=<span class=\"string\">\"area\"</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box-one\"</span>&gt;</span>box1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box-two\"</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>页面布局<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是第一行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是第二行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是第三行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box-three\"</span>&gt;</span>box3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"grid布局\"><a href=\"#grid布局\" class=\"headerlink\" title=\"grid布局\"></a>grid布局</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.area</span> &#123;</span><br><span class=\"line\">            <span class=\"attribute\">min-height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">            <span class=\"attribute\">display</span>: grid;</span><br><span class=\"line\">            <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">            <span class=\"attribute\">grid-template-columns</span>: <span class=\"number\">33%</span> <span class=\"number\">34%</span> <span class=\"number\">33%</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"selector-class\">.box-one</span> &#123;</span><br><span class=\"line\">            <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"selector-class\">.box-two</span> &#123;</span><br><span class=\"line\">            <span class=\"attribute\">background</span>: blue;</span><br><span class=\"line\">            <span class=\"attribute\">color</span>: <span class=\"number\">#ffffff</span>;</span><br><span class=\"line\">            <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"selector-class\">.box-three</span> &#123;</span><br><span class=\"line\">            <span class=\"attribute\">background</span>: orange;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">article</span> <span class=\"attr\">class</span>=<span class=\"string\">\"area\"</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box-one\"</span>&gt;</span>box1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box-two\"</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>页面布局<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是第一行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是第二行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是第三行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box-three\"</span>&gt;</span>box3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"table布局\"><a href=\"#table布局\" class=\"headerlink\" title=\"table布局\"></a>table布局</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.area</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">min-height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: table;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.area</span> <span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: table-cell;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box-one</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box-two</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: blue;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#ffffff</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box-three</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: orange;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">article</span> <span class=\"attr\">class</span>=<span class=\"string\">\"area\"</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box-one\"</span>&gt;</span>box1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box-two\"</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>页面布局<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是第一行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是第二行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是第三行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box-three\"</span>&gt;</span>box3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>各方案优缺点：</p>\n<p>1.浮动和绝对定位都脱离了文档流，浮动如果周边处理得当，兼容性就会比较好，绝对定位使用较方便。</p>\n<p>2.flex布局是CSS3中新增，就是为了解决浮动和绝对顶对带来的不足，是一种比较完美的解决方案。</p>\n<p>3.网格布局是最新特性，就像是栅格系统。代码量少。</p>\n<p>4.表格布局一旦有一部分高度发生变化，如当表格中内容较多，超出设定高度后，其余部分都会发生变化，这样会不符合开发要求，用户体检也不好。</p>\n<p>5.上述题目，当高度未知时，只有flex布局和table布局通用。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"页面布局\"><a href=\"#页面布局\" class=\"headerlink\" title=\"页面布局\"></a>页面布局</h2><p>页面布局是作为前端开发的必备技能，能够让页面适应多种规格大小的屏幕，才是一个合格的开发，那么我们有多少种形式呢？  </p>","more":"<p><strong>我们使用最基本的三格式布局来做这个尝试</strong></p>\n<h3 id=\"float方式\"><a href=\"#float方式\" class=\"headerlink\" title=\"float方式\"></a>float方式</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.area</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">min-height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box-one</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box-two</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: blue;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#ffffff</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box-three</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: orange;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: right;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">article</span> <span class=\"attr\">class</span>=<span class=\"string\">\"area\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box-one\"</span>&gt;</span>box1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box-three\"</span>&gt;</span>box3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box-two\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>页面布局<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是第一行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是第二行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是第三行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>需要注意box-two是放在最后位置的，因为float的关系，放到最后会将三号挤下去</strong></p>\n<h3 id=\"使用绝对定位\"><a href=\"#使用绝对定位\" class=\"headerlink\" title=\"使用绝对定位\"></a>使用绝对定位</h3><p><strong>过于low，不必了解了。</strong></p>\n<h3 id=\"flex布局\"><a href=\"#flex布局\" class=\"headerlink\" title=\"flex布局\"></a>flex布局</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.area</span> &#123;</span><br><span class=\"line\">            <span class=\"attribute\">min-height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">            <span class=\"attribute\">display</span>: grid;</span><br><span class=\"line\">            <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"selector-class\">.box-one</span> &#123;</span><br><span class=\"line\">            <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">            <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"selector-class\">.box-two</span> &#123;</span><br><span class=\"line\">            <span class=\"attribute\">background</span>: blue;</span><br><span class=\"line\">            <span class=\"attribute\">color</span>: <span class=\"number\">#ffffff</span>;</span><br><span class=\"line\">            <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">            <span class=\"attribute\">flex-grow</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"selector-class\">.box-three</span> &#123;</span><br><span class=\"line\">            <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">            <span class=\"attribute\">background</span>: orange;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">article</span> <span class=\"attr\">class</span>=<span class=\"string\">\"area\"</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box-one\"</span>&gt;</span>box1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box-two\"</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>页面布局<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是第一行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是第二行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是第三行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box-three\"</span>&gt;</span>box3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"grid布局\"><a href=\"#grid布局\" class=\"headerlink\" title=\"grid布局\"></a>grid布局</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.area</span> &#123;</span><br><span class=\"line\">            <span class=\"attribute\">min-height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">            <span class=\"attribute\">display</span>: grid;</span><br><span class=\"line\">            <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">            <span class=\"attribute\">grid-template-columns</span>: <span class=\"number\">33%</span> <span class=\"number\">34%</span> <span class=\"number\">33%</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"selector-class\">.box-one</span> &#123;</span><br><span class=\"line\">            <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"selector-class\">.box-two</span> &#123;</span><br><span class=\"line\">            <span class=\"attribute\">background</span>: blue;</span><br><span class=\"line\">            <span class=\"attribute\">color</span>: <span class=\"number\">#ffffff</span>;</span><br><span class=\"line\">            <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"selector-class\">.box-three</span> &#123;</span><br><span class=\"line\">            <span class=\"attribute\">background</span>: orange;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">article</span> <span class=\"attr\">class</span>=<span class=\"string\">\"area\"</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box-one\"</span>&gt;</span>box1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box-two\"</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>页面布局<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是第一行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是第二行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是第三行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box-three\"</span>&gt;</span>box3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"table布局\"><a href=\"#table布局\" class=\"headerlink\" title=\"table布局\"></a>table布局</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.area</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">min-height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: table;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.area</span> <span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: table-cell;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box-one</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box-two</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: blue;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#ffffff</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box-three</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: orange;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">article</span> <span class=\"attr\">class</span>=<span class=\"string\">\"area\"</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box-one\"</span>&gt;</span>box1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box-two\"</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>页面布局<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是第一行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是第二行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是第三行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box-three\"</span>&gt;</span>box3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>各方案优缺点：</p>\n<p>1.浮动和绝对定位都脱离了文档流，浮动如果周边处理得当，兼容性就会比较好，绝对定位使用较方便。</p>\n<p>2.flex布局是CSS3中新增，就是为了解决浮动和绝对顶对带来的不足，是一种比较完美的解决方案。</p>\n<p>3.网格布局是最新特性，就像是栅格系统。代码量少。</p>\n<p>4.表格布局一旦有一部分高度发生变化，如当表格中内容较多，超出设定高度后，其余部分都会发生变化，这样会不符合开发要求，用户体检也不好。</p>\n<p>5.上述题目，当高度未知时，只有flex布局和table布局通用。</p>"}],"PostAsset":[{"_id":"source/_posts/vue生命周期以及nextTick应用/shengming.webp","slug":"shengming.webp","post":"ck7onzqxi000iyts6cd9g3s63","modified":1,"renderable":0},{"_id":"source/_posts/css盒子模型/biaozhun.jpg","post":"ck7onzqxa000cyts6g6pl0rlp","slug":"biaozhun.jpg","modified":1,"renderable":1},{"_id":"source/_posts/css盒子模型/ie.jpg","post":"ck7onzqxa000cyts6g6pl0rlp","slug":"ie.jpg","modified":1,"renderable":1},{"_id":"source/_posts/vue生命周期以及nextTick应用/biaoge.webp","post":"ck7onzqxi000iyts6cd9g3s63","slug":"biaoge.webp","modified":1,"renderable":1},{"_id":"source/_posts/HTTP协议/qingqiudemo.jpg","post":"ck7onzqx50008yts60t2b29pw","slug":"qingqiudemo.jpg","modified":1,"renderable":1},{"_id":"source/_posts/HTTP协议/qingqiuti.png","post":"ck7onzqx50008yts60t2b29pw","slug":"qingqiuti.png","modified":1,"renderable":1},{"_id":"source/_posts/HTTP协议/xiangying.jpg","post":"ck7onzqx50008yts60t2b29pw","slug":"xiangying.jpg","modified":1,"renderable":1},{"_id":"source/_posts/css之BFC/bfc.png","post":"ck7onzqx70009yts69jfyfltk","slug":"bfc.png","modified":1,"renderable":1},{"_id":"source/_posts/css之BFC/float.png","post":"ck7onzqx70009yts69jfyfltk","slug":"float.png","modified":1,"renderable":1},{"_id":"source/_posts/css之BFC/margin.png","post":"ck7onzqx70009yts69jfyfltk","slug":"margin.png","modified":1,"renderable":1},{"_id":"source/_posts/css之BFC/wubfc.png","post":"ck7onzqx70009yts69jfyfltk","slug":"wubfc.png","modified":1,"renderable":1},{"_id":"source/_posts/webp在项目中的应用/jianrong.webp","post":"ck7onzqxp000myts6gi2lfh9q","slug":"jianrong.webp","modified":1,"renderable":1},{"_id":"source/_posts/webp在项目中的应用/liucheng.webp","post":"ck7onzqxp000myts6gi2lfh9q","slug":"liucheng.webp","modified":1,"renderable":1},{"_id":"source/_posts/webp在项目中的应用/taobao.webp","post":"ck7onzqxp000myts6gi2lfh9q","slug":"taobao.webp","modified":1,"renderable":1},{"_id":"source/_posts/webp在项目中的应用/yasuo.webp","post":"ck7onzqxp000myts6gi2lfh9q","slug":"yasuo.webp","modified":1,"renderable":1}],"PostCategory":[],"PostTag":[{"post_id":"ck7onzqwv0003yts6c28khbm4","tag_id":"ck7onzqx10006yts608i4e9s3","_id":"ck7onzqxa000byts61xa8b8tm"},{"post_id":"ck7onzqwz0005yts68kot0x07","tag_id":"ck7onzqx10006yts608i4e9s3","_id":"ck7onzqxf000fyts62to4cj4r"},{"post_id":"ck7onzqxc000dyts6dnkgeesi","tag_id":"ck7onzqx10006yts608i4e9s3","_id":"ck7onzqxi000hyts60yuu21a6"},{"post_id":"ck7onzqx30007yts60m607t7t","tag_id":"ck7onzqx10006yts608i4e9s3","_id":"ck7onzqxn000kyts6hfqigiu4"},{"post_id":"ck7onzqx50008yts60t2b29pw","tag_id":"ck7onzqxj000jyts678wz1om1","_id":"ck7onzqy0000pyts6cgft5re3"},{"post_id":"ck7onzqxp000myts6gi2lfh9q","tag_id":"ck7onzqx10006yts608i4e9s3","_id":"ck7onzqy2000ryts6glik60bn"},{"post_id":"ck7onzqx70009yts69jfyfltk","tag_id":"ck7onzqxr000nyts652bw1hkn","_id":"ck7onzqy4000uyts63738e3ez"},{"post_id":"ck7onzqxa000cyts6g6pl0rlp","tag_id":"ck7onzqxr000nyts652bw1hkn","_id":"ck7onzqy7000xyts60ltf37uc"},{"post_id":"ck7onzqy5000vyts6dbyqa0qi","tag_id":"ck7onzqx10006yts608i4e9s3","_id":"ck7onzqy8000yyts68sj64b1u"},{"post_id":"ck7onzqxg000gyts6d2hq4ut2","tag_id":"ck7onzqy6000wyts6doi36nfp","_id":"ck7onzqy80010yts610n99vg0"},{"post_id":"ck7onzqxi000iyts6cd9g3s63","tag_id":"ck7onzqy8000zyts652lj2qv2","_id":"ck7onzqy90012yts66xctej7h"},{"post_id":"ck7onzqxo000lyts6548ac0g3","tag_id":"ck7onzqy6000wyts6doi36nfp","_id":"ck7onzqya0014yts65fd44h0s"},{"post_id":"ck7onzqxr000oyts62r1ibagd","tag_id":"ck7onzqy90013yts6f88r7hpk","_id":"ck7onzqya0016yts61as76qoq"},{"post_id":"ck7onzqy1000qyts69est56wm","tag_id":"ck7onzqya0015yts6hyvlacb3","_id":"ck7onzqyb0018yts6fh3hh22s"},{"post_id":"ck7onzqy3000tyts6hzca7up2","tag_id":"ck7onzqya0017yts68n2n5os3","_id":"ck7onzqyb0019yts66gxg7rvr"}],"Tag":[{"name":"html","_id":"ck7onzqx10006yts608i4e9s3"},{"name":"http","_id":"ck7onzqxj000jyts678wz1om1"},{"name":"css","_id":"ck7onzqxr000nyts652bw1hkn"},{"name":"Promise","_id":"ck7onzqy6000wyts6doi36nfp"},{"name":"vue","_id":"ck7onzqy8000zyts652lj2qv2"},{"name":"hexo","_id":"ck7onzqy90013yts6f88r7hpk"},{"name":"javascript","_id":"ck7onzqya0015yts6hyvlacb3"},{"name":"前端性能优化","_id":"ck7onzqya0017yts68n2n5os3"}]}}