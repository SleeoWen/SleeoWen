{"meta":{"version":1,"warehouse":"3.0.1"},"models":{"Asset":[{"_id":"themes/archer/source/404.md","path":"404.md","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/algolia_logo.svg","path":"assets/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/example_qr.png","path":"assets/example_qr.png","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/favicon.ico","path":"assets/favicon.ico","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/loading.svg","path":"assets/loading.svg","modified":0,"renderable":1},{"_id":"themes/archer/source/avatar/Misaka.jpg","path":"avatar/Misaka.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/css/mobile.css","path":"css/mobile.css","modified":0,"renderable":1},{"_id":"themes/archer/source/css/style.css","path":"css/style.css","modified":0,"renderable":1},{"_id":"themes/archer/source/font/Source Sans Pro.woff","path":"font/Source Sans Pro.woff","modified":0,"renderable":1},{"_id":"themes/archer/source/font/Source Sans Pro.woff2","path":"font/Source Sans Pro.woff2","modified":0,"renderable":1},{"_id":"themes/archer/source/lib/webfontloader.min.js","path":"lib/webfontloader.min.js","modified":0,"renderable":1},{"_id":"themes/archer/source/scripts/main.js","path":"scripts/main.js","modified":0,"renderable":1},{"_id":"themes/archer/source/scripts/search.js","path":"scripts/search.js","modified":0,"renderable":1},{"_id":"themes/archer/source/scripts/share.js","path":"scripts/share.js","modified":0,"renderable":1},{"_id":"themes/archer/source/avatar/mine.jpeg","path":"avatar/mine.jpeg","modified":0,"renderable":1},{"_id":"themes/archer/source/font/Oswald-Regular.ttf","path":"font/Oswald-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff","path":"font/SourceCodePro-Regular.ttf.woff","modified":0,"renderable":1},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff2","path":"font/SourceCodePro-Regular.ttf.woff2","modified":0,"renderable":1},{"_id":"themes/archer/source/intro/404-bg.jpg","path":"intro/404-bg.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/lib/jquery.min.js","path":"lib/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/archer/source/intro/post-bg.jpg","path":"intro/post-bg.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/intro/about-bg.jpg","path":"intro/about-bg.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/intro/index-bg.jpg","path":"intro/index-bg.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"b9806e9f2a409be793c05f378064530660ea1476","modified":1583305738000},{"_id":"source/404.md","hash":"4c9d9dafe0f3f8457b921a96a9260e09de6ad0ab","modified":1580892208000},{"_id":"source/test.html","hash":"9b80e45cf6d28c52b6c79299c2f3b737ab26c7e8","modified":1584528895000},{"_id":"source/test.js","hash":"a3cee6bbe056a6c447892a8f06c82674982c68e5","modified":1584528895000},{"_id":"themes/archer/.DS_Store","hash":"2c3f2d0cc71171fc8d22b7f9468bdb8cce95eb24","modified":1578964906000},{"_id":"themes/archer/.eslintrc.json","hash":"35eeca97fa5a2d0c6d78ef1257c58f03c42d43df","modified":1553725894000},{"_id":"themes/archer/.gitattributes","hash":"82c1a621642d5b620275ae1ed59845c3f7015a64","modified":1553725894000},{"_id":"themes/archer/.gitignore","hash":"e2d7fa953bade3b94ed1cab25ffcf442c7540433","modified":1553725894000},{"_id":"themes/archer/.prettierignore","hash":"58caf761f07e5df9cdc21f7f19f0670fde41089b","modified":1553725894000},{"_id":"themes/archer/.prettierrc.js","hash":"875b0b95f6eb24a23e4ea83a75709b97897135e0","modified":1553725894000},{"_id":"themes/archer/LICENSE","hash":"0da0c361bf299375739c6b668a44af0f5faf37bb","modified":1553725894000},{"_id":"themes/archer/README.md","hash":"97edb54cb7aecff714f132110ed4ba8215da7136","modified":1553725894000},{"_id":"themes/archer/_config.yml","hash":"d174522f3f24d25673695bad1fec3ead7f9377e9","modified":1579072074000},{"_id":"themes/archer/gulpfile.js","hash":"46dfe693b00ac4dea4d1b1af56f5ced4ee095c10","modified":1553725894000},{"_id":"themes/archer/package.json","hash":"67872d7647b43cc341b0ad9744b4b89819c07834","modified":1579877231000},{"_id":"themes/archer/webpack.config.js","hash":"d20b6350c50e2981484cb9356a3e21a2124bcd72","modified":1553725894000},{"_id":"themes/archer/webpack.prod.js","hash":"48de76cfa6274895801d3afc89ecbf04ee182a1c","modified":1553725894000},{"_id":"source/_posts/CSRF和XSS.md","hash":"1dcbb4227402431a13b59f918a1e0cf20d4668bf","modified":1587800704000},{"_id":"source/_posts/DOM事件流.md","hash":"2ea3db1eb30ab8d10d71e0604fa08f64a3ad2a5a","modified":1583923781000},{"_id":"source/_posts/DOM级别与DOM事件.md","hash":"fe2556803ead30356f85be45fb9963a9be1a7c96","modified":1583378580000},{"_id":"source/_posts/Event事件常见应用.md","hash":"05dda590a122f96bff3f5d4a46cfc5373bc5815a","modified":1584004888000},{"_id":"source/_posts/HTTP协议.md","hash":"2eb9a7f2487812f5b27b24e168b06875efc8b4b2","modified":1584096007000},{"_id":"source/_posts/Vue基础一.md","hash":"7883837f37f2a4d7d109025e6a9a0ea1deb4a118","modified":1588758945000},{"_id":"source/_posts/Vue基础二.md","hash":"0a3fad346bcc5abea03780abe558cc4277c42ce1","modified":1588759130000},{"_id":"source/_posts/Vue组件的高级特性.md","hash":"feec6ddfb1c9e319777f25c52ac47909ca6a465e","modified":1588758827000},{"_id":"source/_posts/Vue组件通讯.md","hash":"c301236bab547162805e448b69b350bc913a13bf","modified":1588758748000},{"_id":"source/_posts/css之BFC.md","hash":"8113ebace00f58cc7fee59c25fbbbf8e51b10494","modified":1583321143000},{"_id":"source/_posts/css盒子模型.md","hash":"f5dbfc991a3217894e9e0533f456a22cd3624e8b","modified":1583308422000},{"_id":"source/_posts/js栈.md","hash":"cb2ad7a03027b20783bdb50eeef03d75d073eb28","modified":1587958888000},{"_id":"source/_posts/js的面向对象.md","hash":"a8a7b13fb54484b9eb7d2d69df1e17f62d664bf7","modified":1586827311000},{"_id":"source/_posts/meta标签使用总结.md","hash":"a6f056b3da4a3e78dd1fb22a4253dfa3765ba20f","modified":1551485255000},{"_id":"source/_posts/promise原理和实现.md","hash":"06773cf1e5b945b25c2f649178edd95c4f1efcf7","modified":1579877713000},{"_id":"source/_posts/promose-all和promise-race.md","hash":"f810014fb28698f31afa663a5ab808cd9573e5ee","modified":1579877710000},{"_id":"source/_posts/vue生命周期以及nextTick应用.md","hash":"fa75689ad16851b6c840fcd69a3e523107bd8fdd","modified":1588758696000},{"_id":"source/_posts/webp在项目中的应用.md","hash":"4e3e36bb8b09e9442da6764a29d6ae85753be3d6","modified":1580722199000},{"_id":"source/_posts/事件循环EventLoop.md","hash":"f16c305ddaae5373c51859e3155df6f816b80986","modified":1588217338000},{"_id":"source/_posts/函数的防抖和节流.md","hash":"6d0a0bbba8cf105a8a0419a715343edd14d15de5","modified":1580888557000},{"_id":"source/_posts/初尝hexo.md","hash":"82fc2da8e88fd595378a3695a3b1803eefb9ce11","modified":1579877886000},{"_id":"source/_posts/前端性能优化——DNS预解析.md","hash":"9c7e670203b672166b7c3c0701e4cc2400148e6d","modified":1580869313000},{"_id":"source/_posts/前端错误监控.md","hash":"37dd301749cb35dae0fdc1e57d1943203940e6f8","modified":1588607695000},{"_id":"source/_posts/原型链.md","hash":"050965cfde15eb8c08fd71fd61049b2d5f460be9","modified":1584095925000},{"_id":"source/_posts/浏览器渲染原理与过程.md","hash":"38c9cd178cc6ecf12fea9490d690b087a8f66925","modified":1587973730000},{"_id":"source/_posts/通信相关问题.md","hash":"a72f344dbcc0057ec222defbcf69e67c97d3d7ff","modified":1587024886000},{"_id":"source/_posts/页面布局.md","hash":"03137abe9e6cec065c6e4b88ce72bc91a81dd98b","modified":1581501794000},{"_id":"source/_posts/页面性能优化.md","hash":"392ce733236c21cbbd9a3f8be1b9e6c8b47f5764","modified":1588600985000},{"_id":"source/about/index.md","hash":"45e21d80f01cd72b3393602ae556828d2f78e7e9","modified":1578986204000},{"_id":"themes/archer/dev/archer.sh","hash":"4065c4e55462d5ecf016464adea0d1db967ef4b4","modified":1578905288000},{"_id":"themes/archer/docs/README-en.md","hash":"f325565c0bb94501fd046268659c7752709895d1","modified":1578905288000},{"_id":"themes/archer/docs/develop-guide-en.md","hash":"0bb09c3c9d5f56820cb84e3316f60352b731d70c","modified":1578905288000},{"_id":"themes/archer/docs/develop-guide-zh.md","hash":"effc2bc9e0cecfd228b19283337ff29649ea5985","modified":1578905288000},{"_id":"themes/archer/languages/default.yml","hash":"d56b6923c70efdef09cd1f0270d7adc9cc338f6b","modified":1578905288000},{"_id":"themes/archer/languages/en.yml","hash":"ad75d3e5f7f5f0463d3077e1b5a26f40938a1faa","modified":1578905288000},{"_id":"themes/archer/layout/404.ejs","hash":"879641b1b5e49c43f2e096cad281f7d74df05127","modified":1578905288000},{"_id":"themes/archer/layout/about.ejs","hash":"06019d835c0a51fed8aa086d1dfcf368f9921b42","modified":1578905288000},{"_id":"themes/archer/layout/index.ejs","hash":"716ba4a30860e36077dfdfffa02c1cd60301d8a3","modified":1578905288000},{"_id":"themes/archer/layout/layout.ejs","hash":"08ebd10c1b2bfc11be8f5115a836a98e6c6ba13c","modified":1578905288000},{"_id":"themes/archer/layout/post.ejs","hash":"b61156aff41641a14d5e4e45d9fd776309f2801a","modified":1578905288000},{"_id":"themes/archer/layout/site-meta.ejs","hash":"d866aa1a892d4bfe3368f6dbd0f1baa8c5831947","modified":1578905288000},{"_id":"themes/archer/source/.DS_Store","hash":"7c7eb3a712f76ac51e7786fc218f5bcdeb11424d","modified":1578964878000},{"_id":"themes/archer/source/404.md","hash":"3fb58e3ebd8e0961a3af837ff8e7395ef9092cb4","modified":1578906418000},{"_id":"themes/archer/src/.DS_Store","hash":"72720482c4291a6e91510301a6ae4b67b0b062c8","modified":1578964878000},{"_id":"source/_posts/HTTP协议/qingqiuti.png","hash":"b7b26c845c04013bef1513270b0c279fc93e1f0f","modified":1584009800000},{"_id":"source/_posts/HTTP协议/xiangying.jpg","hash":"11a3601c3b3c30400007d53b6725d652ece9f93f","modified":1584010087000},{"_id":"source/_posts/css之BFC/bfc.png","hash":"e772b86e17f557dae7eac673b115afafdb3768b2","modified":1583319715000},{"_id":"source/_posts/css之BFC/float.png","hash":"bc3d6012419c506cd97e17128172e54436377208","modified":1583321083000},{"_id":"source/_posts/css之BFC/margin.png","hash":"5844c6e7cb183a9485b20cfb70ab7328fdfb2301","modified":1583321088000},{"_id":"source/_posts/css之BFC/wubfc.png","hash":"20d781a1edf2c4f9e655f98f2d654df0a16dccc6","modified":1583319518000},{"_id":"source/_posts/css盒子模型/ie.jpg","hash":"10836afcaf1bfc8e0c51e6e3f10fe8c158af3913","modified":1583288533000},{"_id":"source/_posts/js栈/duizhan1.webp","hash":"7d52bc8f99fbecf880bbca354f60c8cb1056d769","modified":1587958809000},{"_id":"source/_posts/vue生命周期以及nextTick应用/biaoge.webp","hash":"88aa25471288da771d62ab51ee7c9fd1305c6b46","modified":1580869395000},{"_id":"source/_posts/webp在项目中的应用/jianrong.webp","hash":"9fd19fedb37fe15ab8e79ee5968b0489653c0a7b","modified":1580700082000},{"_id":"source/_posts/webp在项目中的应用/liucheng.webp","hash":"29fb994c83bb701f895f149177e04c6f7ea4f450","modified":1580700319000},{"_id":"source/_posts/webp在项目中的应用/taobao.webp","hash":"bbfa44c19551573a9d915babea32a5ac024d4a03","modified":1580700203000},{"_id":"source/_posts/webp在项目中的应用/yasuo.webp","hash":"6919a10f5c95993e136b21c6ff2e990029413a4b","modified":1580699903000},{"_id":"source/_posts/事件循环EventLoop/eventloop1.png","hash":"fed3abd4769f3a247d66922637ee943fbed5a6da","modified":1588217274000},{"_id":"source/_posts/事件循环EventLoop/eventloop2.png","hash":"a33ed65a240c7ffc5d9cd732e37733315f416f8e","modified":1588217274000},{"_id":"source/_posts/事件循环EventLoop/eventloop3.png","hash":"25525ac83038fdac33412beb110205b17b8f90e6","modified":1588217274000},{"_id":"source/_posts/事件循环EventLoop/eventloop4.png","hash":"d6d971cf65bbf011bb3430f210794f8a4cfee439","modified":1588217274000},{"_id":"source/_posts/事件循环EventLoop/eventloop5.png","hash":"4d2b36ffe8d720062aa37dd5364c0442e87c9b71","modified":1588217274000},{"_id":"source/_posts/原型链/gouzao.png","hash":"76c59d3f727046806cc72bcefe0e111181ab8519","modified":1584088356000},{"_id":"source/_posts/原型链/yuanxing1.png","hash":"4d30d56367fe9cb2966c1e5ac331bacdff11a951","modified":1584091395000},{"_id":"source/_posts/浏览器渲染原理与过程/liulanqi1.webp","hash":"33f97300e890423d143627be4f168106bdd34e70","modified":1587973703000},{"_id":"source/_posts/浏览器渲染原理与过程/liulanqi2.webp","hash":"cb1d6fce9653a7b4b7f736231bdaa8fd0d3ecf89","modified":1587973703000},{"_id":"source/_posts/浏览器渲染原理与过程/liulanqi3.webp","hash":"66444f9b305059a4b6657438ac0eb0800c8b4fb1","modified":1587973703000},{"_id":"source/_posts/浏览器渲染原理与过程/liulanqi4.webp","hash":"82186a2cfc98643591b9d865f15f641f5a7c4b46","modified":1587973703000},{"_id":"themes/archer/.github/ISSUE_TEMPLATE/-----------bug--help-wanted-or-bug-report-.md","hash":"012bd3afea5565204f75d8c89048ad33b9c2f948","modified":1553725894000},{"_id":"themes/archer/.github/ISSUE_TEMPLATE/-----feature-request-.md","hash":"886fb1252702d46c89536b579d35ce49e53ec54d","modified":1553725894000},{"_id":"themes/archer/.github/ISSUE_TEMPLATE/-----other-issue-.md","hash":"4bf3c8ebef14a81bb55e8e0468d816e83c4133ac","modified":1553725894000},{"_id":"themes/archer/layout/_partial/algolia.ejs","hash":"2f5f9073378f628a9124792b5301c1540bc5a264","modified":1578905288000},{"_id":"themes/archer/layout/_partial/base-background-image.ejs","hash":"82203d9a1c6e16ef2d37b8b587f56bf6d16edaf2","modified":1578905288000},{"_id":"themes/archer/layout/_partial/base-footer.ejs","hash":"a9f0f831a7c48553b109dbada60c797aa03b43d8","modified":1578905939000},{"_id":"themes/archer/layout/_partial/base-head.ejs","hash":"f2e8d4dfd11d879491a4b10f74f8c886cd392240","modified":1578905288000},{"_id":"themes/archer/layout/_partial/base-header.ejs","hash":"12e28693dc53cab5f6fd389f15ea0f811c9c37e9","modified":1578905288000},{"_id":"themes/archer/layout/_partial/base-preload-polyfill.ejs","hash":"2aea84cb43f4479131620b3c3dfd7cebe9be36ba","modified":1578905288000},{"_id":"themes/archer/layout/_partial/base-profile.ejs","hash":"743d97452d4ac358e631c43c9c2120aafdfd3e24","modified":1578905288000},{"_id":"themes/archer/layout/_partial/base-social.ejs","hash":"2d068432031b3bebf9438c775370a2d1b4492d6b","modified":1578905288000},{"_id":"themes/archer/layout/_partial/base-title-tags.ejs","hash":"418559ab11726f69621c3a58cd21903adff1e48e","modified":1578905288000},{"_id":"themes/archer/layout/_partial/intro-height.ejs","hash":"cd0d34a811dc4666980d57c00d70dd82bd5450eb","modified":1578905288000},{"_id":"themes/archer/source/assets/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1578905288000},{"_id":"themes/archer/source/assets/example_qr.png","hash":"cce20432c34875f4d9c6df927ede0fc0f00bb194","modified":1578905288000},{"_id":"themes/archer/source/assets/favicon.ico","hash":"25d327edb1a95957606731ca725ad7a41aa86832","modified":1578908703000},{"_id":"themes/archer/source/assets/loading.svg","hash":"45be17d07697d604d8981890eb21e308530c7a38","modified":1578905288000},{"_id":"themes/archer/source/avatar/Misaka.jpg","hash":"74a0372523f98dfbba992bf80642e160d04dc9b1","modified":1578905288000},{"_id":"themes/archer/source/css/mobile.css","hash":"51d7b5cf26c8f82a3daad4bc55518673fdf281f5","modified":1578905288000},{"_id":"themes/archer/source/css/style.css","hash":"5d5e869db0c62957d59c6865baaecd1428c51804","modified":1578905288000},{"_id":"themes/archer/source/font/Source Sans Pro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1578905288000},{"_id":"themes/archer/source/font/Source Sans Pro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1578905288000},{"_id":"themes/archer/source/lib/webfontloader.min.js","hash":"bc6ffe9c0d8b3285564619a445c6ca575eb9d0f5","modified":1578905288000},{"_id":"themes/archer/source/scripts/main.js","hash":"e89a9651131684204118fa74bd19cb781d76a372","modified":1578905288000},{"_id":"themes/archer/source/scripts/search.js","hash":"d5f739e261e8ce74f993c6157b248663bda122bf","modified":1578905288000},{"_id":"themes/archer/source/scripts/share.js","hash":"bb5bb37ce7f47f8c084b232df3e5fe2378d7ca01","modified":1578905288000},{"_id":"themes/archer/src/js/browser.js","hash":"ce061db99db5b880db0ddb768246352ca885b13c","modified":1578905288000},{"_id":"themes/archer/src/js/fancybox.js","hash":"0daf0e83deca055102268e3bd95cb1962acc2264","modified":1578905288000},{"_id":"themes/archer/src/js/init.js","hash":"346c6ef75ae85e4350c1b0811985172fdaa0d3a5","modified":1578905288000},{"_id":"themes/archer/src/js/initSidebar.js","hash":"b25615ff254913db83e2a20263d445f35083843b","modified":1578905288000},{"_id":"themes/archer/src/js/main.js","hash":"e1a48d5822326792e38d44efee86e01473549eba","modified":1578905288000},{"_id":"themes/archer/src/js/mobile.js","hash":"228a68d851517b5e47d2132f1d499cb812a64171","modified":1578905288000},{"_id":"themes/archer/src/js/scroll.js","hash":"aa2315a80daaa183a7e462c7e879ff9d2f050933","modified":1578905288000},{"_id":"themes/archer/src/js/search.js","hash":"2e59ac745da7c22801d9029cf9904a4fc3c384f1","modified":1578905288000},{"_id":"themes/archer/src/js/share.js","hash":"1314b19a852e291e35d6809f7f58652d3e7c524c","modified":1578905288000},{"_id":"themes/archer/src/js/sidebar.js","hash":"68d5fe0ee5e86df810d304e5efe11e5e1fddc46d","modified":1578905288000},{"_id":"themes/archer/src/js/tag.js","hash":"e0f0a914c02922e42977d78dc4993b3855167cd8","modified":1578905288000},{"_id":"themes/archer/src/js/toc.js","hash":"b3482031e4c8728535d480bfaec76229469e3aba","modified":1578905288000},{"_id":"themes/archer/src/js/util.js","hash":"27de6446892bcf399430dd5776df0b8759ca0eea","modified":1578905288000},{"_id":"themes/archer/src/scss/_common.scss","hash":"dedc313b082e0a16daf87213badd21b13be11af8","modified":1578905288000},{"_id":"themes/archer/src/scss/_mixin.scss","hash":"e7deb20a16868ae9d3e35ba3c5693de71fdf6999","modified":1578905288000},{"_id":"themes/archer/src/scss/_normalize.scss","hash":"a2dbeb38ad08bb8975856d75954cc697bf8e5ff7","modified":1578905288000},{"_id":"themes/archer/src/scss/_variables.scss","hash":"136e5d990c4f8eadf6cabdfa5a053941e90bcd20","modified":1579071861000},{"_id":"themes/archer/src/scss/mobile.scss","hash":"aadc2fbf37fefc2ad391d8172d5b61817f9db0c5","modified":1578905288000},{"_id":"themes/archer/src/scss/style.scss","hash":"78e31370d45089b97fa91929345f1a29f2e6a0a2","modified":1578905288000},{"_id":"source/_posts/HTTP协议/qingqiudemo.jpg","hash":"eb7d5a99e337010949017c5771d3d451be607f05","modified":1584009799000},{"_id":"source/_posts/css盒子模型/biaozhun.jpg","hash":"2e38705c1f2bbf04182ce788a33f276825529929","modified":1583288533000},{"_id":"themes/archer/layout/_partial/comment/custom.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1578905288000},{"_id":"themes/archer/source/avatar/mine.jpeg","hash":"1b4eccdbeb9a87e66ddad3569b16e0b3b9bbbd5d","modified":1578908374000},{"_id":"themes/archer/source/font/Oswald-Regular.ttf","hash":"965d729546a43a8490ad4cf33c25ac475682100c","modified":1578905288000},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff","hash":"12eef75e1ad3eca9dae42b65505010ce4464a315","modified":1578905288000},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff2","hash":"f5991289ec17884cb641da0646d278d36702a190","modified":1578905288000},{"_id":"themes/archer/source/intro/404-bg.jpg","hash":"3afb5bb26f4ff0bd0e0a28df955c8aa7d746d3c5","modified":1578905288000},{"_id":"themes/archer/source/lib/jquery.min.js","hash":"0dc32db4aa9c5f03f3b38c47d883dbd4fed13aae","modified":1578905288000},{"_id":"themes/archer/layout/_partial/comment/changyan.ejs","hash":"7691642fb9375607e0ac988a7420999e242cb2c9","modified":1578905288000},{"_id":"themes/archer/layout/_partial/comment/disqus.ejs","hash":"cadd97820a23d01d8b7e2f19a86e5290cef5a8a6","modified":1578905288000},{"_id":"themes/archer/layout/_partial/comment/gitment.ejs","hash":"794647a8a4ac9e1d01d74c07717175a141b1e01c","modified":1578905288000},{"_id":"themes/archer/layout/_partial/comment/livere.ejs","hash":"b27469f19f35ec2037c7bce736a12e9dfb5e360b","modified":1578905288000},{"_id":"themes/archer/layout/_partial/comment/valine.ejs","hash":"2154360e330dab94540e168e9d301c7b7091968e","modified":1578905288000},{"_id":"themes/archer/layout/_partial/comment/youyan.ejs","hash":"790d76f2667377db78a7d04bad8d629e47e7aab0","modified":1578905288000},{"_id":"themes/archer/layout/_partial/critical-css/critical-style.ejs","hash":"c03e16a7741908c207bf58363dcd1349cb639ef8","modified":1578905288000},{"_id":"themes/archer/layout/_partial/script/font-loader.ejs","hash":"291cc0a4a444a93b93c32e2c39383c70e36e46de","modified":1578905288000},{"_id":"themes/archer/layout/_partial/sidebar/base-sidebar.ejs","hash":"2d38af7cb5aabc0af99de239bd180c516ec4c56c","modified":1578905288000},{"_id":"themes/archer/layout/_partial/sidebar/sidebar-archives.ejs","hash":"daa78b17a773bca569f1c8ca2c916495ca138da6","modified":1578905288000},{"_id":"themes/archer/layout/_partial/sidebar/sidebar-categories.ejs","hash":"147214469c4909eb94943599883f9fa0f3cc090d","modified":1578905288000},{"_id":"themes/archer/layout/_partial/sidebar/sidebar-tags.ejs","hash":"d6e1a192cac5dcf365ce1a52df4f23feafeeb849","modified":1578905288000},{"_id":"themes/archer/package-lock.json","hash":"89a3b67d32f6916cdc21d590d87e43d8a44be8c3","modified":1553725894000},{"_id":"themes/archer/src/scss/_partial/_404.scss","hash":"a2b56f441a9a44d7f5b9b41eaa8136321328d7e9","modified":1578905288000},{"_id":"themes/archer/src/scss/_partial/_algolia.scss","hash":"c679578d2feb0bd7d3f80c2f693ba58cbca4428b","modified":1578905288000},{"_id":"themes/archer/src/scss/_partial/_index-page.scss","hash":"fa993cf0bbe0086cd8ec3d9a639b2d5b28ccfa8e","modified":1578905288000},{"_id":"themes/archer/src/scss/_partial/_post-page.scss","hash":"7c557844850d53cc4fc36aaf6d59847d8f238947","modified":1578905288000},{"_id":"source/_posts/CSRF和XSS/csrf.png","hash":"9082e53767d90d9e3a3f4c68124f5e40823d923d","modified":1587800571000},{"_id":"source/_posts/页面性能优化/youhua1.png","hash":"d5e4fb7eeb64480c51660d2dce6a9ccf3f36cc28","modified":1588600938000},{"_id":"themes/archer/docs/snap.png","hash":"0b2a8bf016f6eed576abfdcdb7dcf8de51c12562","modified":1578905288000},{"_id":"source/_posts/vue生命周期以及nextTick应用/shengming.webp","hash":"ceb669b5a12f77fdb6207e0382a3d629def72680","modified":1580869026000},{"_id":"themes/archer/source/intro/post-bg.jpg","hash":"525fafb2238c27754d8fa751f143ff1de9b8482d","modified":1578905288000},{"_id":"themes/archer/src/scss/_partial/_partial/_footer.scss","hash":"726c543ee066e0b3222b236d9b4ef0109c0bdddf","modified":1578905288000},{"_id":"themes/archer/src/scss/_partial/_partial/_header.scss","hash":"77003ff22b1a10fae2d2768938277959b3f93a72","modified":1578905288000},{"_id":"themes/archer/src/scss/_partial/_partial/_intro.scss","hash":"a1569f39eccd64a12425d81b794c53df126a4d87","modified":1578905288000},{"_id":"themes/archer/src/scss/_partial/_partial/_paginator.scss","hash":"67c2e697a5fbb3b8006cf358ea45eb7f75b496f8","modified":1578905288000},{"_id":"themes/archer/src/scss/_partial/_partial/_profile.scss","hash":"0c986b52ce9083f08c37c5c9b5de045ac5e1d2fa","modified":1578905288000},{"_id":"themes/archer/src/scss/_partial/_partial/_scrollbar.scss","hash":"f2514031f9d7e4ed4a126694e78618ce6ff3a574","modified":1578905288000},{"_id":"themes/archer/src/scss/_partial/_post/_code.scss","hash":"9c9a4e470da8732c9a3be3d5ce0d2f80f53714fe","modified":1578905288000},{"_id":"themes/archer/src/scss/_partial/_sidebar/_sidebar-archive.scss","hash":"14bc42292873880c61b5fa9f47ee9d2e08d46871","modified":1578905288000},{"_id":"themes/archer/src/scss/_partial/_sidebar/_sidebar-tags.scss","hash":"9ab6f96d0df0c4ad4c72e2515fa2599d487d8f1a","modified":1578905288000},{"_id":"themes/archer/src/scss/_partial/_sidebar/_sidebar.scss","hash":"981a94978535769cb51c29e12b627f83c6fcedc5","modified":1578905288000},{"_id":"source/_posts/原型链/yuanxing.png","hash":"0003715c80652574deba4378b28089731a1f1898","modified":1584087593000},{"_id":"themes/archer/source/intro/about-bg.jpg","hash":"ab388276822417cc4e703312c14e20280ec783b3","modified":1578905288000},{"_id":"themes/archer/source/intro/index-bg.jpg","hash":"96b52e177b8bc53e64ec6ee1e10b2b6a4e13083b","modified":1578905288000},{"_id":"public/test.js","hash":"a3cee6bbe056a6c447892a8f06c82674982c68e5","modified":1588758987920},{"_id":"public/content.json","hash":"c5a888675bdbb01b4e2a1aa9a068218f22d0a4e3","modified":1588772067001},{"_id":"public/404.html","hash":"13e591b6be477b7abc833a46d0edb010a0e772bc","modified":1588772067001},{"_id":"public/test.html","hash":"9d2ef8872a306a6ff3d3e067fcc6658ca694342a","modified":1588772067001},{"_id":"public/about/index.html","hash":"8fee77fa56c4e316c07258ec85376fb4e14486e5","modified":1588772067001},{"_id":"public/2020/11/01/Vue基础二/index.html","hash":"85444c178fb5133736faec21f3104bb8aa611168","modified":1588758987920},{"_id":"public/2019/11/21/Vue组件的高级特性/index.html","hash":"3b9cf1394aaee200d73430c9e1f26b2500748bb3","modified":1588772067001},{"_id":"public/2019/11/11/Vue组件通讯/index.html","hash":"b9adb11145ccce76d0be06c9b1eea68af2f148e0","modified":1588772067001},{"_id":"public/2019/10/21/前端错误监控/index.html","hash":"387e89f395972f253a4ad32a81bed3ea2db4ff5d","modified":1588772067001},{"_id":"public/2019/10/20/Vue基础一/index.html","hash":"12c0378422adc2b49bb01803c747759930aa5281","modified":1588772067001},{"_id":"public/2019/10/11/页面性能优化/index.html","hash":"da637925e155df984c35bef24578cd92c0403b3b","modified":1588772067001},{"_id":"public/2019/10/07/事件循环EventLoop/index.html","hash":"00050d00821ff9b677d653852e2cd0885a798810","modified":1588772067001},{"_id":"public/2019/09/27/浏览器渲染原理与过程/index.html","hash":"4c2d735527540615f3bddaaf0ea03895bd88469d","modified":1588772067001},{"_id":"public/2019/09/03/CSRF和XSS/index.html","hash":"5c358e2e4a74ec1b9804aa05a0e48d12283cfcb0","modified":1588772067001},{"_id":"public/2019/08/22/通信相关问题/index.html","hash":"68db8cfe0cde409aeaa1053abe5185c1bc0f5b40","modified":1588772067001},{"_id":"public/2019/08/19/js栈/index.html","hash":"d8d225e0049d4586675ccf3ccb061f80ba0a31b3","modified":1588772067001},{"_id":"public/2019/07/25/js的面向对象/index.html","hash":"b585b108f7c432326779a4a8372a2bec21684722","modified":1588772067001},{"_id":"public/2019/07/24/原型链/index.html","hash":"bac15a36411d010b10552097d2734161ed778f26","modified":1588772067001},{"_id":"public/2019/07/02/HTTP协议/index.html","hash":"1cfbd8e284d6001c79e57ac361b95607ac09327e","modified":1588772067001},{"_id":"public/2019/06/25/Event事件常见应用/index.html","hash":"235abf5d96889ec99f3aa5a5a323a00249ef8d52","modified":1588772067001},{"_id":"public/2019/06/11/DOM事件流/index.html","hash":"76cab4b6ef7931bfe81e5e484da88d3abe9559b2","modified":1588772067001},{"_id":"public/2019/06/01/DOM级别与DOM事件/index.html","hash":"046ba766faeca03118b1652c6f5a4ef89132a246","modified":1588772067001},{"_id":"public/2019/05/03/css之BFC/index.html","hash":"6f30d79bf4867a80e6be545b761ddfae50d264aa","modified":1588772067001},{"_id":"public/2019/05/01/css盒子模型/index.html","hash":"b65ff093a4d43f28825b231fbe3fad77a628de59","modified":1588772067001},{"_id":"public/2019/04/19/页面布局/index.html","hash":"710ee172f96f539ca4fd55a358ab9f0f8e46e379","modified":1588772067001},{"_id":"public/2019/04/07/函数的防抖和节流/index.html","hash":"6bc5afa4a0538e7596d458a9d9edf9f8033c9270","modified":1588772067001},{"_id":"public/2019/04/01/vue生命周期以及nextTick应用/index.html","hash":"b4be7b02ce62edee10c98d76a4fa99750deccf07","modified":1588772067001},{"_id":"public/2019/03/22/webp在项目中的应用/index.html","hash":"b62ad33f07026598e379a9d9e717dd7d9c654748","modified":1588772067001},{"_id":"public/2019/03/02/meta标签使用总结/index.html","hash":"e3d21e74fb438b4814617b5a6961133d950d579f","modified":1588772067001},{"_id":"public/2019/02/21/前端性能优化——DNS预解析/index.html","hash":"750e96c8bbcf9f59ff161d17c0497ac68af275c1","modified":1588772067001},{"_id":"public/2019/02/17/promose-all和promise-race/index.html","hash":"07948108d27980acd7f816802dedc6ad163f834f","modified":1588772067001},{"_id":"public/2019/02/05/promise原理和实现/index.html","hash":"83995b41dd81388724eb7406991caa8fb03d9bb0","modified":1588772067001},{"_id":"public/2019/01/14/初尝hexo/index.html","hash":"c7524094b49c2cf96baa6821357b7bf1afe202b6","modified":1588772067001},{"_id":"public/archives/index.html","hash":"020334c28af54f0d3899160ce9fd015dad5b8067","modified":1588772067001},{"_id":"public/archives/page/2/index.html","hash":"646e9c2bd88817e3f854866fb0324bb69aa55f55","modified":1588772067001},{"_id":"public/archives/page/3/index.html","hash":"7bd8c3a4c3b490246f6421427db5f2a3f9e43d8c","modified":1588772067001},{"_id":"public/archives/2019/index.html","hash":"db0ec179bc41c2753c2a271d3b17e4b4fe88f721","modified":1588772067001},{"_id":"public/archives/2019/page/2/index.html","hash":"f29de6558bdd5b9dd81030ae2f62fd513fd04575","modified":1588772067001},{"_id":"public/archives/2019/page/3/index.html","hash":"596469649b2b2a08d7f9a75443ca5356b83bbb1a","modified":1588772067001},{"_id":"public/archives/2019/01/index.html","hash":"f9f8004784dc785bfb3098732511da6eff04c033","modified":1588772067001},{"_id":"public/archives/2019/02/index.html","hash":"63f800479211972989da35cb0738d1d5764a0a94","modified":1588772067001},{"_id":"public/archives/2019/03/index.html","hash":"fa2639f8981a83b923b3d72f555a96aecd16436d","modified":1588772067001},{"_id":"public/archives/2019/04/index.html","hash":"f7def6c7485ff1321b6ea2a317451a4b9687a2a1","modified":1588772067001},{"_id":"public/archives/2019/05/index.html","hash":"327b937d06dd7ee3a5f378f77869d5f26b2725dd","modified":1588772067001},{"_id":"public/archives/2019/06/index.html","hash":"ca5ad774030b49f17f418748491b9b4a7266879d","modified":1588772067001},{"_id":"public/archives/2019/07/index.html","hash":"aa3c65d1e252f5310033cdd7f87677d3ca8cf73d","modified":1588772067001},{"_id":"public/archives/2019/08/index.html","hash":"75142a98ec55265e7016b76f882ad965cd15b114","modified":1588772067001},{"_id":"public/archives/2019/09/index.html","hash":"d85a820ce8439c2ebdb286ba51538d57a08fb61d","modified":1588772067001},{"_id":"public/archives/2019/10/index.html","hash":"3b6efc77477a872442867c4d477f1e15d119589f","modified":1588772067001},{"_id":"public/archives/2019/11/index.html","hash":"a88508c3835167801dd58f6c32b014656de83664","modified":1588772067001},{"_id":"public/archives/2020/index.html","hash":"9c921e2b8d140ea1a2970f23290e30e36a60537a","modified":1588772067001},{"_id":"public/archives/2020/11/index.html","hash":"27c3aa17f3fb788989894e6f6b1cb9a803dd2bdf","modified":1588758987920},{"_id":"public/index.html","hash":"51e5576d75b543bb5f93d7becbf4cc1b98c9cf86","modified":1588772067001},{"_id":"public/page/2/index.html","hash":"e54955b617dc7904ba923e48cebeb5140c7bd907","modified":1588772067001},{"_id":"public/page/3/index.html","hash":"2314be512824d2ff0057d514174bc06beb48cd9a","modified":1588772067001},{"_id":"public/tags/网络安全/index.html","hash":"fbbba4b096bd693d76072527b296bbd9e91b8dac","modified":1588772067001},{"_id":"public/tags/html/index.html","hash":"f07842cc199486b8f96c92cf6bc0275abb291f2e","modified":1588772067001},{"_id":"public/tags/http/index.html","hash":"45a6ea1960862b6517f17202bfb3021f9f1cf592","modified":1588772067001},{"_id":"public/tags/Vue/index.html","hash":"a7e1cd62753cb6e8fece53b0b29464c7f6d89cfb","modified":1588772067001},{"_id":"public/tags/css/index.html","hash":"327b937d06dd7ee3a5f378f77869d5f26b2725dd","modified":1588772067001},{"_id":"public/tags/javascript/index.html","hash":"46688c5ad4041095a2b60e28b2f836e39ad47267","modified":1588772067001},{"_id":"public/tags/Promise/index.html","hash":"6c945c0db9d8c4bd2948695b3c7d1883be992358","modified":1588772067001},{"_id":"public/tags/hexo/index.html","hash":"f9f8004784dc785bfb3098732511da6eff04c033","modified":1588772067001},{"_id":"public/tags/前端性能优化/index.html","hash":"c41d46a3da58479e09b113bfcdc8d7760d14cdbf","modified":1588772067001},{"_id":"public/tags/浏览器/index.html","hash":"20f2ea4b15f0c867f6fffc361436f241e4dde59b","modified":1588772067001},{"_id":"public/tags/通信/index.html","hash":"6a5b0c89074d9ffa1680da877be4485825627906","modified":1588772067001},{"_id":"public/assets/example_qr.png","hash":"cce20432c34875f4d9c6df927ede0fc0f00bb194","modified":1588758987920},{"_id":"public/assets/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1588758987920},{"_id":"public/assets/favicon.ico","hash":"25d327edb1a95957606731ca725ad7a41aa86832","modified":1588758987920},{"_id":"public/assets/loading.svg","hash":"45be17d07697d604d8981890eb21e308530c7a38","modified":1588758987920},{"_id":"public/avatar/Misaka.jpg","hash":"74a0372523f98dfbba992bf80642e160d04dc9b1","modified":1588758987920},{"_id":"public/font/Source Sans Pro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1588758987920},{"_id":"public/font/Source Sans Pro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1588758987920},{"_id":"public/2019/08/19/js栈/duizhan1.webp","hash":"7d52bc8f99fbecf880bbca354f60c8cb1056d769","modified":1588758987920},{"_id":"public/2019/05/01/css盒子模型/ie.jpg","hash":"10836afcaf1bfc8e0c51e6e3f10fe8c158af3913","modified":1588758987920},{"_id":"public/2019/04/01/vue生命周期以及nextTick应用/biaoge.webp","hash":"88aa25471288da771d62ab51ee7c9fd1305c6b46","modified":1588758987920},{"_id":"public/2019/07/02/HTTP协议/qingqiuti.png","hash":"b7b26c845c04013bef1513270b0c279fc93e1f0f","modified":1588758987920},{"_id":"public/2019/07/02/HTTP协议/xiangying.jpg","hash":"11a3601c3b3c30400007d53b6725d652ece9f93f","modified":1588758987920},{"_id":"public/2019/07/24/原型链/gouzao.png","hash":"76c59d3f727046806cc72bcefe0e111181ab8519","modified":1588758987920},{"_id":"public/2019/05/03/css之BFC/bfc.png","hash":"e772b86e17f557dae7eac673b115afafdb3768b2","modified":1588758987920},{"_id":"public/2019/07/24/原型链/yuanxing1.png","hash":"4d30d56367fe9cb2966c1e5ac331bacdff11a951","modified":1588758987920},{"_id":"public/2019/05/03/css之BFC/float.png","hash":"bc3d6012419c506cd97e17128172e54436377208","modified":1588758987920},{"_id":"public/2019/05/03/css之BFC/margin.png","hash":"5844c6e7cb183a9485b20cfb70ab7328fdfb2301","modified":1588758987920},{"_id":"public/2019/05/03/css之BFC/wubfc.png","hash":"20d781a1edf2c4f9e655f98f2d654df0a16dccc6","modified":1588758987920},{"_id":"public/2019/03/22/webp在项目中的应用/liucheng.webp","hash":"29fb994c83bb701f895f149177e04c6f7ea4f450","modified":1588758987920},{"_id":"public/2019/03/22/webp在项目中的应用/taobao.webp","hash":"bbfa44c19551573a9d915babea32a5ac024d4a03","modified":1588758987920},{"_id":"public/2019/03/22/webp在项目中的应用/yasuo.webp","hash":"6919a10f5c95993e136b21c6ff2e990029413a4b","modified":1588758987920},{"_id":"public/2019/09/27/浏览器渲染原理与过程/liulanqi1.webp","hash":"33f97300e890423d143627be4f168106bdd34e70","modified":1588758987920},{"_id":"public/2019/09/27/浏览器渲染原理与过程/liulanqi2.webp","hash":"cb1d6fce9653a7b4b7f736231bdaa8fd0d3ecf89","modified":1588758987920},{"_id":"public/2019/09/27/浏览器渲染原理与过程/liulanqi3.webp","hash":"66444f9b305059a4b6657438ac0eb0800c8b4fb1","modified":1588758987920},{"_id":"public/2019/09/27/浏览器渲染原理与过程/liulanqi4.webp","hash":"82186a2cfc98643591b9d865f15f641f5a7c4b46","modified":1588758987920},{"_id":"public/2019/10/07/事件循环EventLoop/eventloop1.png","hash":"fed3abd4769f3a247d66922637ee943fbed5a6da","modified":1588758987920},{"_id":"public/2019/10/07/事件循环EventLoop/eventloop2.png","hash":"a33ed65a240c7ffc5d9cd732e37733315f416f8e","modified":1588758987920},{"_id":"public/2019/10/07/事件循环EventLoop/eventloop4.png","hash":"d6d971cf65bbf011bb3430f210794f8a4cfee439","modified":1588758987920},{"_id":"public/font/Oswald-Regular.ttf","hash":"965d729546a43a8490ad4cf33c25ac475682100c","modified":1588758987920},{"_id":"public/avatar/mine.jpeg","hash":"1b4eccdbeb9a87e66ddad3569b16e0b3b9bbbd5d","modified":1588758987920},{"_id":"public/font/SourceCodePro-Regular.ttf.woff","hash":"12eef75e1ad3eca9dae42b65505010ce4464a315","modified":1588758987920},{"_id":"public/font/SourceCodePro-Regular.ttf.woff2","hash":"f5991289ec17884cb641da0646d278d36702a190","modified":1588758987920},{"_id":"public/2019/05/01/css盒子模型/biaozhun.jpg","hash":"2e38705c1f2bbf04182ce788a33f276825529929","modified":1588758987920},{"_id":"public/2019/03/22/webp在项目中的应用/jianrong.webp","hash":"9fd19fedb37fe15ab8e79ee5968b0489653c0a7b","modified":1588758987920},{"_id":"public/2019/10/07/事件循环EventLoop/eventloop3.png","hash":"25525ac83038fdac33412beb110205b17b8f90e6","modified":1588758987920},{"_id":"public/2019/10/07/事件循环EventLoop/eventloop5.png","hash":"4d2b36ffe8d720062aa37dd5364c0442e87c9b71","modified":1588758987920},{"_id":"public/css/mobile.css","hash":"51d7b5cf26c8f82a3daad4bc55518673fdf281f5","modified":1588758987920},{"_id":"public/lib/webfontloader.min.js","hash":"bc6ffe9c0d8b3285564619a445c6ca575eb9d0f5","modified":1588758987920},{"_id":"public/scripts/search.js","hash":"d5f739e261e8ce74f993c6157b248663bda122bf","modified":1588758987920},{"_id":"public/css/style.css","hash":"5d5e869db0c62957d59c6865baaecd1428c51804","modified":1588758987920},{"_id":"public/scripts/main.js","hash":"e89a9651131684204118fa74bd19cb781d76a372","modified":1588758987920},{"_id":"public/scripts/share.js","hash":"bb5bb37ce7f47f8c084b232df3e5fe2378d7ca01","modified":1588758987920},{"_id":"public/lib/jquery.min.js","hash":"0dc32db4aa9c5f03f3b38c47d883dbd4fed13aae","modified":1588758987920},{"_id":"public/intro/404-bg.jpg","hash":"3afb5bb26f4ff0bd0e0a28df955c8aa7d746d3c5","modified":1588758987920},{"_id":"public/2019/07/02/HTTP协议/qingqiudemo.jpg","hash":"eb7d5a99e337010949017c5771d3d451be607f05","modified":1588758987920},{"_id":"public/2019/10/11/页面性能优化/youhua1.png","hash":"d5e4fb7eeb64480c51660d2dce6a9ccf3f36cc28","modified":1588758987920},{"_id":"public/2019/04/01/vue生命周期以及nextTick应用/shengming.webp","hash":"ceb669b5a12f77fdb6207e0382a3d629def72680","modified":1588758987920},{"_id":"public/intro/post-bg.jpg","hash":"525fafb2238c27754d8fa751f143ff1de9b8482d","modified":1588758987920},{"_id":"public/2019/09/03/CSRF和XSS/csrf.png","hash":"9082e53767d90d9e3a3f4c68124f5e40823d923d","modified":1588758987920},{"_id":"public/intro/about-bg.jpg","hash":"ab388276822417cc4e703312c14e20280ec783b3","modified":1588758987920},{"_id":"public/intro/index-bg.jpg","hash":"96b52e177b8bc53e64ec6ee1e10b2b6a4e13083b","modified":1588758987920},{"_id":"public/2019/07/24/原型链/yuanxing.png","hash":"0003715c80652574deba4378b28089731a1f1898","modified":1588758987920},{"_id":"public/2019/11/01/Vue基础二/index.html","hash":"a02da24c7260b468ce8d080c6ddf5ddd26aca4ad","modified":1588772067001},{"_id":"source/_posts/VueRouter.md","hash":"08db2e868918b97dc3fcbfdbcff1ed0fed9bdf77","modified":1588772046000},{"_id":"source/_posts/Vuex.md","hash":"2414eabddbd402210e81f203f106a18436e4560a","modified":1588771992000},{"_id":"source/_posts/VueRouter/luyou2.png","hash":"0067a14eabf89250f04ee16755d92821959dbf28","modified":1588771905000},{"_id":"source/_posts/VueRouter/luyou3.png","hash":"a4a767bea7ecd325d7938efe2f187c1574f7539d","modified":1588771905000},{"_id":"source/_posts/VueRouter/luyou1.png","hash":"30726838040c41ad883108b714bd1e115a208494","modified":1588771905000},{"_id":"public/2020/01/01/VueRouter/index.html","hash":"62a3e269d45ae3808def0519d9569bd7823ab78e","modified":1588772067001},{"_id":"public/2019/12/06/Vuex/index.html","hash":"a11ca3f68effdb4d36d35b4f13f5b490ec893966","modified":1588772067001},{"_id":"public/archives/2019/12/index.html","hash":"c31aff312046be5be756bcb995ca1b709172747e","modified":1588772067001},{"_id":"public/archives/2020/01/index.html","hash":"9c921e2b8d140ea1a2970f23290e30e36a60537a","modified":1588772067001},{"_id":"public/2020/01/01/VueRouter/luyou2.png","hash":"0067a14eabf89250f04ee16755d92821959dbf28","modified":1588772067001},{"_id":"public/2020/01/01/VueRouter/luyou3.png","hash":"a4a767bea7ecd325d7938efe2f187c1574f7539d","modified":1588772067001},{"_id":"public/2020/01/01/VueRouter/luyou1.png","hash":"30726838040c41ad883108b714bd1e115a208494","modified":1588772067001}],"Category":[],"Data":[],"Page":[{"layout":"404","title":"[404]","description":"我去哪里了？","_content":"我去哪里了？","source":"404.md","raw":"---\nlayout: 404\ntitle: \"[404]\"\ndescription: \"我去哪里了？\"\n---\n我去哪里了？","date":"2020-02-05T08:43:28.000Z","updated":"2020-02-05T08:43:28.000Z","path":"404.html","comments":1,"_id":"ck9v62x500000qqs6h9xl9kyx","content":"<p>我去哪里了？</p>\n","site":{"data":{}},"excerpt":"","more":"<p>我去哪里了？</p>\n"},{"_content":"<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\" />\n\t\t<title>面向对象</title>\n\t</head>\n\n\t<body>\n\t\t<script type=\"text/javascript\">\n\t\t\t// // 类的声明\n\t\t\t// function Animal() {\n\t\t\t// \tthis.name = 'animal';\n\t\t\t// }\n\t\t\t// // es6中的声明\n\t\t\t// class Animals {\n\t\t\t// \tconstructor() {\n\t\t\t// \t\tthis.name = 'animal';\n\t\t\t// \t}\n\t\t\t// }\n\t\t\t// // 实例化类\n\t\t\t// console.log(new Animal(), new Animals());\n\t\t\t// //\t使用构造函数进行继承（es5）\n\t\t\t// function Parent1() {\n\t\t\t// \tthis.name = 'name';\n\t\t\t// }\n\t\t\t// Parent1.prototype.say = function() {\n\t\t\t// \tconsole.log('say');\n\t\t\t// };\n\t\t\t// //这种方式不会继承父类原型对象上的方法\n\t\t\t// function Child1() {\n\t\t\t// \tParent1.call(this); // apply;\n\t\t\t// \tthis.type = 'chilid1';\n\t\t\t// }\n\t\t\t// console.log(new Child1());\n\n\t\t\t// //\t借助原型链实现继承\n\t\t\t// function Parent2() {\n\t\t\t// \tthis.name = 'name2';\n\t\t\t// \tthis.play = [1, 2, 3];\n\t\t\t// }\n\t\t\t// function Child2() {\n\t\t\t// \tthis.type = 'chilid2';\n\t\t\t// }\n\t\t\t// Child2.prototype = new Parent2();\n\t\t\t// console.log(new Child2());\n\t\t\t// var s1 = new Child2();\n\t\t\t// var s2 = new Child2();\n\t\t\t// console.log(s1.play, s2.play); //[1,2,3] [1,2,3]\n\t\t\t// s1.play.push(4);\n\t\t\t// console.log(s1.play, s2.play); //[1,2,3,4] [1,2,3,4]\n\n\t\t\t// // 组合方式\n\t\t\t// function Parent3() {\n\t\t\t// \tthis.name = 'name3';\n\t\t\t// \tthis.play = [1, 2, 3];\n\t\t\t// }\n\t\t\t// function Child3() {\n\t\t\t// \tParent3.call(this);\n\t\t\t// \tthis.type = 'chilid3';\n\t\t\t// }\n\t\t\t// Child3.prototype = new Parent3();\n\t\t\t// var s3 = new Child3();\n\t\t\t// var s4 = new Child3();\n\t\t\t// s3.play.push(4);\n\t\t\t// console.log(s3.play, s4.play);\n\t\t\t// 组合方式\n\t\t\t// function Parent4() {\n\t\t\t// \tthis.name = '4';\n\t\t\t// \tthis.play = [1, 2, 3];\n\t\t\t// }\n\t\t\t// function Child4() {\n\t\t\t// \tParent4.call(this);\n\t\t\t// \tthis.type = 'chilid4';\n\t\t\t// }\n\t\t\t// Child4.prototype = Parent4.prototype;\n\t\t\t// var s5 = new Child4();\n\t\t\t// var s6 = new Child4();\n\t\t\t// s5.play.push(4);\n\t\t\t// console.log(s5.play, s6.play);\n\t\t\t// console.log(s5 instanceof Child4, s5 instanceof Parent4);\t// true true\n\t\t\t// console.log(s5.constructor);\t// Parent4\n\t\t\t// // 因为子类的prototype就是父类的实例，他的constructor是从父类直接拿过来的\n\n\t\t\tfunction Parent5() {\n\t\t\t\tthis.name = '5';\n\t\t\t\tthis.play = [1, 2, 3];\n\t\t\t}\n\t\t\tfunction Child5() {\n\t\t\t\tParent5.call(this);\n\t\t\t\tthis.type = 'chilid5';\n\t\t\t}\n\t\t\tChild5.prototype = Object.create(Parent5.prototype);\n\t\t\tChild5.prototype.constructor = Child5;\n\t\t\tvar s5 = new Child5();\n\t\t\tvar s6 = new Child5();\n\t\t\ts5.play.push(4);\n\t\t\tconsole.log(s5.play, s6.play);\n\t\t\tconsole.log(s5 instanceof Child5, s5 instanceof Parent5); // true true\n\t\t\tconsole.log(s5.constructor); // Child5\n\t\t</script>\n\t</body>\n</html>\n","source":"test.html","raw":"<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\" />\n\t\t<title>面向对象</title>\n\t</head>\n\n\t<body>\n\t\t<script type=\"text/javascript\">\n\t\t\t// // 类的声明\n\t\t\t// function Animal() {\n\t\t\t// \tthis.name = 'animal';\n\t\t\t// }\n\t\t\t// // es6中的声明\n\t\t\t// class Animals {\n\t\t\t// \tconstructor() {\n\t\t\t// \t\tthis.name = 'animal';\n\t\t\t// \t}\n\t\t\t// }\n\t\t\t// // 实例化类\n\t\t\t// console.log(new Animal(), new Animals());\n\t\t\t// //\t使用构造函数进行继承（es5）\n\t\t\t// function Parent1() {\n\t\t\t// \tthis.name = 'name';\n\t\t\t// }\n\t\t\t// Parent1.prototype.say = function() {\n\t\t\t// \tconsole.log('say');\n\t\t\t// };\n\t\t\t// //这种方式不会继承父类原型对象上的方法\n\t\t\t// function Child1() {\n\t\t\t// \tParent1.call(this); // apply;\n\t\t\t// \tthis.type = 'chilid1';\n\t\t\t// }\n\t\t\t// console.log(new Child1());\n\n\t\t\t// //\t借助原型链实现继承\n\t\t\t// function Parent2() {\n\t\t\t// \tthis.name = 'name2';\n\t\t\t// \tthis.play = [1, 2, 3];\n\t\t\t// }\n\t\t\t// function Child2() {\n\t\t\t// \tthis.type = 'chilid2';\n\t\t\t// }\n\t\t\t// Child2.prototype = new Parent2();\n\t\t\t// console.log(new Child2());\n\t\t\t// var s1 = new Child2();\n\t\t\t// var s2 = new Child2();\n\t\t\t// console.log(s1.play, s2.play); //[1,2,3] [1,2,3]\n\t\t\t// s1.play.push(4);\n\t\t\t// console.log(s1.play, s2.play); //[1,2,3,4] [1,2,3,4]\n\n\t\t\t// // 组合方式\n\t\t\t// function Parent3() {\n\t\t\t// \tthis.name = 'name3';\n\t\t\t// \tthis.play = [1, 2, 3];\n\t\t\t// }\n\t\t\t// function Child3() {\n\t\t\t// \tParent3.call(this);\n\t\t\t// \tthis.type = 'chilid3';\n\t\t\t// }\n\t\t\t// Child3.prototype = new Parent3();\n\t\t\t// var s3 = new Child3();\n\t\t\t// var s4 = new Child3();\n\t\t\t// s3.play.push(4);\n\t\t\t// console.log(s3.play, s4.play);\n\t\t\t// 组合方式\n\t\t\t// function Parent4() {\n\t\t\t// \tthis.name = '4';\n\t\t\t// \tthis.play = [1, 2, 3];\n\t\t\t// }\n\t\t\t// function Child4() {\n\t\t\t// \tParent4.call(this);\n\t\t\t// \tthis.type = 'chilid4';\n\t\t\t// }\n\t\t\t// Child4.prototype = Parent4.prototype;\n\t\t\t// var s5 = new Child4();\n\t\t\t// var s6 = new Child4();\n\t\t\t// s5.play.push(4);\n\t\t\t// console.log(s5.play, s6.play);\n\t\t\t// console.log(s5 instanceof Child4, s5 instanceof Parent4);\t// true true\n\t\t\t// console.log(s5.constructor);\t// Parent4\n\t\t\t// // 因为子类的prototype就是父类的实例，他的constructor是从父类直接拿过来的\n\n\t\t\tfunction Parent5() {\n\t\t\t\tthis.name = '5';\n\t\t\t\tthis.play = [1, 2, 3];\n\t\t\t}\n\t\t\tfunction Child5() {\n\t\t\t\tParent5.call(this);\n\t\t\t\tthis.type = 'chilid5';\n\t\t\t}\n\t\t\tChild5.prototype = Object.create(Parent5.prototype);\n\t\t\tChild5.prototype.constructor = Child5;\n\t\t\tvar s5 = new Child5();\n\t\t\tvar s6 = new Child5();\n\t\t\ts5.play.push(4);\n\t\t\tconsole.log(s5.play, s6.play);\n\t\t\tconsole.log(s5 instanceof Child5, s5 instanceof Parent5); // true true\n\t\t\tconsole.log(s5.constructor); // Child5\n\t\t</script>\n\t</body>\n</html>\n","date":"2020-03-18T10:54:55.000Z","updated":"2020-03-18T10:54:55.000Z","path":"test.html","title":"","comments":1,"layout":"page","_id":"ck9v62x550001qqs6g04t3chg","content":"<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\">\n\t\t<title>面向对象</title>\n\t<meta name=\"generator\" content=\"Hexo 4.2.0\"></head>\n\n\t<body>\n\t\t<script type=\"text/javascript\">\n\t\t\t// // 类的声明\n\t\t\t// function Animal() {\n\t\t\t// \tthis.name = 'animal';\n\t\t\t// }\n\t\t\t// // es6中的声明\n\t\t\t// class Animals {\n\t\t\t// \tconstructor() {\n\t\t\t// \t\tthis.name = 'animal';\n\t\t\t// \t}\n\t\t\t// }\n\t\t\t// // 实例化类\n\t\t\t// console.log(new Animal(), new Animals());\n\t\t\t// //\t使用构造函数进行继承（es5）\n\t\t\t// function Parent1() {\n\t\t\t// \tthis.name = 'name';\n\t\t\t// }\n\t\t\t// Parent1.prototype.say = function() {\n\t\t\t// \tconsole.log('say');\n\t\t\t// };\n\t\t\t// //这种方式不会继承父类原型对象上的方法\n\t\t\t// function Child1() {\n\t\t\t// \tParent1.call(this); // apply;\n\t\t\t// \tthis.type = 'chilid1';\n\t\t\t// }\n\t\t\t// console.log(new Child1());\n\n\t\t\t// //\t借助原型链实现继承\n\t\t\t// function Parent2() {\n\t\t\t// \tthis.name = 'name2';\n\t\t\t// \tthis.play = [1, 2, 3];\n\t\t\t// }\n\t\t\t// function Child2() {\n\t\t\t// \tthis.type = 'chilid2';\n\t\t\t// }\n\t\t\t// Child2.prototype = new Parent2();\n\t\t\t// console.log(new Child2());\n\t\t\t// var s1 = new Child2();\n\t\t\t// var s2 = new Child2();\n\t\t\t// console.log(s1.play, s2.play); //[1,2,3] [1,2,3]\n\t\t\t// s1.play.push(4);\n\t\t\t// console.log(s1.play, s2.play); //[1,2,3,4] [1,2,3,4]\n\n\t\t\t// // 组合方式\n\t\t\t// function Parent3() {\n\t\t\t// \tthis.name = 'name3';\n\t\t\t// \tthis.play = [1, 2, 3];\n\t\t\t// }\n\t\t\t// function Child3() {\n\t\t\t// \tParent3.call(this);\n\t\t\t// \tthis.type = 'chilid3';\n\t\t\t// }\n\t\t\t// Child3.prototype = new Parent3();\n\t\t\t// var s3 = new Child3();\n\t\t\t// var s4 = new Child3();\n\t\t\t// s3.play.push(4);\n\t\t\t// console.log(s3.play, s4.play);\n\t\t\t// 组合方式\n\t\t\t// function Parent4() {\n\t\t\t// \tthis.name = '4';\n\t\t\t// \tthis.play = [1, 2, 3];\n\t\t\t// }\n\t\t\t// function Child4() {\n\t\t\t// \tParent4.call(this);\n\t\t\t// \tthis.type = 'chilid4';\n\t\t\t// }\n\t\t\t// Child4.prototype = Parent4.prototype;\n\t\t\t// var s5 = new Child4();\n\t\t\t// var s6 = new Child4();\n\t\t\t// s5.play.push(4);\n\t\t\t// console.log(s5.play, s6.play);\n\t\t\t// console.log(s5 instanceof Child4, s5 instanceof Parent4);\t// true true\n\t\t\t// console.log(s5.constructor);\t// Parent4\n\t\t\t// // 因为子类的prototype就是父类的实例，他的constructor是从父类直接拿过来的\n\n\t\t\tfunction Parent5() {\n\t\t\t\tthis.name = '5';\n\t\t\t\tthis.play = [1, 2, 3];\n\t\t\t}\n\t\t\tfunction Child5() {\n\t\t\t\tParent5.call(this);\n\t\t\t\tthis.type = 'chilid5';\n\t\t\t}\n\t\t\tChild5.prototype = Object.create(Parent5.prototype);\n\t\t\tChild5.prototype.constructor = Child5;\n\t\t\tvar s5 = new Child5();\n\t\t\tvar s6 = new Child5();\n\t\t\ts5.play.push(4);\n\t\t\tconsole.log(s5.play, s6.play);\n\t\t\tconsole.log(s5 instanceof Child5, s5 instanceof Parent5); // true true\n\t\t\tconsole.log(s5.constructor); // Child5\n\t\t</script>\n\t</body>\n</html>\n","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\">\n\t\t<title>面向对象</title>\n\t<meta name=\"generator\" content=\"Hexo 4.2.0\"></head>\n\n\t<body>\n\t\t<script type=\"text/javascript\">\n\t\t\t// // 类的声明\n\t\t\t// function Animal() {\n\t\t\t// \tthis.name = 'animal';\n\t\t\t// }\n\t\t\t// // es6中的声明\n\t\t\t// class Animals {\n\t\t\t// \tconstructor() {\n\t\t\t// \t\tthis.name = 'animal';\n\t\t\t// \t}\n\t\t\t// }\n\t\t\t// // 实例化类\n\t\t\t// console.log(new Animal(), new Animals());\n\t\t\t// //\t使用构造函数进行继承（es5）\n\t\t\t// function Parent1() {\n\t\t\t// \tthis.name = 'name';\n\t\t\t// }\n\t\t\t// Parent1.prototype.say = function() {\n\t\t\t// \tconsole.log('say');\n\t\t\t// };\n\t\t\t// //这种方式不会继承父类原型对象上的方法\n\t\t\t// function Child1() {\n\t\t\t// \tParent1.call(this); // apply;\n\t\t\t// \tthis.type = 'chilid1';\n\t\t\t// }\n\t\t\t// console.log(new Child1());\n\n\t\t\t// //\t借助原型链实现继承\n\t\t\t// function Parent2() {\n\t\t\t// \tthis.name = 'name2';\n\t\t\t// \tthis.play = [1, 2, 3];\n\t\t\t// }\n\t\t\t// function Child2() {\n\t\t\t// \tthis.type = 'chilid2';\n\t\t\t// }\n\t\t\t// Child2.prototype = new Parent2();\n\t\t\t// console.log(new Child2());\n\t\t\t// var s1 = new Child2();\n\t\t\t// var s2 = new Child2();\n\t\t\t// console.log(s1.play, s2.play); //[1,2,3] [1,2,3]\n\t\t\t// s1.play.push(4);\n\t\t\t// console.log(s1.play, s2.play); //[1,2,3,4] [1,2,3,4]\n\n\t\t\t// // 组合方式\n\t\t\t// function Parent3() {\n\t\t\t// \tthis.name = 'name3';\n\t\t\t// \tthis.play = [1, 2, 3];\n\t\t\t// }\n\t\t\t// function Child3() {\n\t\t\t// \tParent3.call(this);\n\t\t\t// \tthis.type = 'chilid3';\n\t\t\t// }\n\t\t\t// Child3.prototype = new Parent3();\n\t\t\t// var s3 = new Child3();\n\t\t\t// var s4 = new Child3();\n\t\t\t// s3.play.push(4);\n\t\t\t// console.log(s3.play, s4.play);\n\t\t\t// 组合方式\n\t\t\t// function Parent4() {\n\t\t\t// \tthis.name = '4';\n\t\t\t// \tthis.play = [1, 2, 3];\n\t\t\t// }\n\t\t\t// function Child4() {\n\t\t\t// \tParent4.call(this);\n\t\t\t// \tthis.type = 'chilid4';\n\t\t\t// }\n\t\t\t// Child4.prototype = Parent4.prototype;\n\t\t\t// var s5 = new Child4();\n\t\t\t// var s6 = new Child4();\n\t\t\t// s5.play.push(4);\n\t\t\t// console.log(s5.play, s6.play);\n\t\t\t// console.log(s5 instanceof Child4, s5 instanceof Parent4);\t// true true\n\t\t\t// console.log(s5.constructor);\t// Parent4\n\t\t\t// // 因为子类的prototype就是父类的实例，他的constructor是从父类直接拿过来的\n\n\t\t\tfunction Parent5() {\n\t\t\t\tthis.name = '5';\n\t\t\t\tthis.play = [1, 2, 3];\n\t\t\t}\n\t\t\tfunction Child5() {\n\t\t\t\tParent5.call(this);\n\t\t\t\tthis.type = 'chilid5';\n\t\t\t}\n\t\t\tChild5.prototype = Object.create(Parent5.prototype);\n\t\t\tChild5.prototype.constructor = Child5;\n\t\t\tvar s5 = new Child5();\n\t\t\tvar s6 = new Child5();\n\t\t\ts5.play.push(4);\n\t\t\tconsole.log(s5.play, s6.play);\n\t\t\tconsole.log(s5 instanceof Child5, s5 instanceof Parent5); // true true\n\t\t\tconsole.log(s5.constructor); // Child5\n\t\t</script>\n\t</body>\n</html>\n"},{"_content":"Promise.all = (arr) => {\n    let resultList = new Array(arr.length);\n    return new Promise((resolve, reject) => {\n        let temp = 0;\n        for (let i = 0, len = arr.length; i < len; i++) {\n            arr[i].then((res, rej) => {\n                if (!rej) {\n                    resultList[i] = (res);\n                    if (temp == arr.length) {\n                        resolve(resultList);\n                    }\n                    temp++;\n                } else {\n                    reject(rej);\n                }\n            })\n        }\n    })\n};\nvar a = { name: 'demo' };\nvar b = new Object({ name: 'demo' });\nvar func = function () {\n    this.name = 'demo';\n}\nvar c = new func();\nvar demo = { name: 'demo' };\nvar d = Object.create(demo);\n//\t借助原型链实现继承\nfunction Parent2() {\n    this.name = 'name2';\n    this.play = [1, 2, 3];\n}\nfunction Child2() {\n    this.type = 'chilid2';\n}\nChild2.prototype = new Parent2();\nconsole.log(new Child2());\nvar s1 = new Child2();\nvar s2 = new Child2();\nconsole.log(s1.play, s2.play);\t//[1,2,3] [1,2,3]\ns1.play.push(4);\nconsole.log(s1.play, s2.play);\t//[1,2,3,4] [1,2,3,4]\n// 组合方式\nfunction Parent3() {\n    this.name = 'name3';\n    this.play = [1, 2, 3];\n}\nfunction Child3() {\n    Parent3.call(this);\n    this.type = 'chilid3';\n}\nChild3.prototype = new Parent3();\nvar s3 = new Child3();\nvar s4 = new Child3();\ns3.play.push(4);\nconsole.log(s3.play, s4.play);\nfunction Parent4() {\n    this.name = '4';\n    this.play = [1, 2, 3];\n}\nfunction Child4() {\n    Parent4.call(this);\n    this.type = 'chilid4';\n}\nChild4.prototype = Parent4.prototype;\nvar s5 = new Child4();\nvar s6 = new Child4();\ns5.play.push(4);\nconsole.log(s5.play, s6.play);\nconsole.log(s5 instanceof Child4, s5 instanceof Parent4);\t// true true\nconsole.log(s5.constructor);\t// Parent4\n// 因为子类的prototype就是父类的实例，他的constructor是从父类直接拿过来的\n\nfunction Parent5() {\n    this.name = '5';\n    this.play = [1, 2, 3];\n}\nfunction Child5() {\n    Parent5.call(this);\n    this.type = 'chilid5';\n}\nChild5.prototype = Object.create(Parent5.prototype);\nChild5.prototype.constructor = Child5;\nvar s5 = new Child5();\nvar s6 = new Child5();\ns5.play.push(4);\nconsole.log(s5.play, s6.play);\nconsole.log(s5 instanceof Child5, s5 instanceof Parent5); // true true\nconsole.log(s5.constructor); // Child5","source":"test.js","raw":"Promise.all = (arr) => {\n    let resultList = new Array(arr.length);\n    return new Promise((resolve, reject) => {\n        let temp = 0;\n        for (let i = 0, len = arr.length; i < len; i++) {\n            arr[i].then((res, rej) => {\n                if (!rej) {\n                    resultList[i] = (res);\n                    if (temp == arr.length) {\n                        resolve(resultList);\n                    }\n                    temp++;\n                } else {\n                    reject(rej);\n                }\n            })\n        }\n    })\n};\nvar a = { name: 'demo' };\nvar b = new Object({ name: 'demo' });\nvar func = function () {\n    this.name = 'demo';\n}\nvar c = new func();\nvar demo = { name: 'demo' };\nvar d = Object.create(demo);\n//\t借助原型链实现继承\nfunction Parent2() {\n    this.name = 'name2';\n    this.play = [1, 2, 3];\n}\nfunction Child2() {\n    this.type = 'chilid2';\n}\nChild2.prototype = new Parent2();\nconsole.log(new Child2());\nvar s1 = new Child2();\nvar s2 = new Child2();\nconsole.log(s1.play, s2.play);\t//[1,2,3] [1,2,3]\ns1.play.push(4);\nconsole.log(s1.play, s2.play);\t//[1,2,3,4] [1,2,3,4]\n// 组合方式\nfunction Parent3() {\n    this.name = 'name3';\n    this.play = [1, 2, 3];\n}\nfunction Child3() {\n    Parent3.call(this);\n    this.type = 'chilid3';\n}\nChild3.prototype = new Parent3();\nvar s3 = new Child3();\nvar s4 = new Child3();\ns3.play.push(4);\nconsole.log(s3.play, s4.play);\nfunction Parent4() {\n    this.name = '4';\n    this.play = [1, 2, 3];\n}\nfunction Child4() {\n    Parent4.call(this);\n    this.type = 'chilid4';\n}\nChild4.prototype = Parent4.prototype;\nvar s5 = new Child4();\nvar s6 = new Child4();\ns5.play.push(4);\nconsole.log(s5.play, s6.play);\nconsole.log(s5 instanceof Child4, s5 instanceof Parent4);\t// true true\nconsole.log(s5.constructor);\t// Parent4\n// 因为子类的prototype就是父类的实例，他的constructor是从父类直接拿过来的\n\nfunction Parent5() {\n    this.name = '5';\n    this.play = [1, 2, 3];\n}\nfunction Child5() {\n    Parent5.call(this);\n    this.type = 'chilid5';\n}\nChild5.prototype = Object.create(Parent5.prototype);\nChild5.prototype.constructor = Child5;\nvar s5 = new Child5();\nvar s6 = new Child5();\ns5.play.push(4);\nconsole.log(s5.play, s6.play);\nconsole.log(s5 instanceof Child5, s5 instanceof Parent5); // true true\nconsole.log(s5.constructor); // Child5","date":"2020-03-18T10:54:55.000Z","updated":"2020-03-18T10:54:55.000Z","path":"test.js","layout":"false","title":"","comments":1,"_id":"ck9v62x560002qqs6e3hv0g5w","content":"Promise.all = (arr) => {\n    let resultList = new Array(arr.length);\n    return new Promise((resolve, reject) => {\n        let temp = 0;\n        for (let i = 0, len = arr.length; i < len; i++) {\n            arr[i].then((res, rej) => {\n                if (!rej) {\n                    resultList[i] = (res);\n                    if (temp == arr.length) {\n                        resolve(resultList);\n                    }\n                    temp++;\n                } else {\n                    reject(rej);\n                }\n            })\n        }\n    })\n};\nvar a = { name: 'demo' };\nvar b = new Object({ name: 'demo' });\nvar func = function () {\n    this.name = 'demo';\n}\nvar c = new func();\nvar demo = { name: 'demo' };\nvar d = Object.create(demo);\n//\t借助原型链实现继承\nfunction Parent2() {\n    this.name = 'name2';\n    this.play = [1, 2, 3];\n}\nfunction Child2() {\n    this.type = 'chilid2';\n}\nChild2.prototype = new Parent2();\nconsole.log(new Child2());\nvar s1 = new Child2();\nvar s2 = new Child2();\nconsole.log(s1.play, s2.play);\t//[1,2,3] [1,2,3]\ns1.play.push(4);\nconsole.log(s1.play, s2.play);\t//[1,2,3,4] [1,2,3,4]\n// 组合方式\nfunction Parent3() {\n    this.name = 'name3';\n    this.play = [1, 2, 3];\n}\nfunction Child3() {\n    Parent3.call(this);\n    this.type = 'chilid3';\n}\nChild3.prototype = new Parent3();\nvar s3 = new Child3();\nvar s4 = new Child3();\ns3.play.push(4);\nconsole.log(s3.play, s4.play);\nfunction Parent4() {\n    this.name = '4';\n    this.play = [1, 2, 3];\n}\nfunction Child4() {\n    Parent4.call(this);\n    this.type = 'chilid4';\n}\nChild4.prototype = Parent4.prototype;\nvar s5 = new Child4();\nvar s6 = new Child4();\ns5.play.push(4);\nconsole.log(s5.play, s6.play);\nconsole.log(s5 instanceof Child4, s5 instanceof Parent4);\t// true true\nconsole.log(s5.constructor);\t// Parent4\n// 因为子类的prototype就是父类的实例，他的constructor是从父类直接拿过来的\n\nfunction Parent5() {\n    this.name = '5';\n    this.play = [1, 2, 3];\n}\nfunction Child5() {\n    Parent5.call(this);\n    this.type = 'chilid5';\n}\nChild5.prototype = Object.create(Parent5.prototype);\nChild5.prototype.constructor = Child5;\nvar s5 = new Child5();\nvar s6 = new Child5();\ns5.play.push(4);\nconsole.log(s5.play, s6.play);\nconsole.log(s5 instanceof Child5, s5 instanceof Parent5); // true true\nconsole.log(s5.constructor); // Child5","site":{"data":{}},"excerpt":"","more":"Promise.all = (arr) => {\n    let resultList = new Array(arr.length);\n    return new Promise((resolve, reject) => {\n        let temp = 0;\n        for (let i = 0, len = arr.length; i < len; i++) {\n            arr[i].then((res, rej) => {\n                if (!rej) {\n                    resultList[i] = (res);\n                    if (temp == arr.length) {\n                        resolve(resultList);\n                    }\n                    temp++;\n                } else {\n                    reject(rej);\n                }\n            })\n        }\n    })\n};\nvar a = { name: 'demo' };\nvar b = new Object({ name: 'demo' });\nvar func = function () {\n    this.name = 'demo';\n}\nvar c = new func();\nvar demo = { name: 'demo' };\nvar d = Object.create(demo);\n//\t借助原型链实现继承\nfunction Parent2() {\n    this.name = 'name2';\n    this.play = [1, 2, 3];\n}\nfunction Child2() {\n    this.type = 'chilid2';\n}\nChild2.prototype = new Parent2();\nconsole.log(new Child2());\nvar s1 = new Child2();\nvar s2 = new Child2();\nconsole.log(s1.play, s2.play);\t//[1,2,3] [1,2,3]\ns1.play.push(4);\nconsole.log(s1.play, s2.play);\t//[1,2,3,4] [1,2,3,4]\n// 组合方式\nfunction Parent3() {\n    this.name = 'name3';\n    this.play = [1, 2, 3];\n}\nfunction Child3() {\n    Parent3.call(this);\n    this.type = 'chilid3';\n}\nChild3.prototype = new Parent3();\nvar s3 = new Child3();\nvar s4 = new Child3();\ns3.play.push(4);\nconsole.log(s3.play, s4.play);\nfunction Parent4() {\n    this.name = '4';\n    this.play = [1, 2, 3];\n}\nfunction Child4() {\n    Parent4.call(this);\n    this.type = 'chilid4';\n}\nChild4.prototype = Parent4.prototype;\nvar s5 = new Child4();\nvar s6 = new Child4();\ns5.play.push(4);\nconsole.log(s5.play, s6.play);\nconsole.log(s5 instanceof Child4, s5 instanceof Parent4);\t// true true\nconsole.log(s5.constructor);\t// Parent4\n// 因为子类的prototype就是父类的实例，他的constructor是从父类直接拿过来的\n\nfunction Parent5() {\n    this.name = '5';\n    this.play = [1, 2, 3];\n}\nfunction Child5() {\n    Parent5.call(this);\n    this.type = 'chilid5';\n}\nChild5.prototype = Object.create(Parent5.prototype);\nChild5.prototype.constructor = Child5;\nvar s5 = new Child5();\nvar s6 = new Child5();\ns5.play.push(4);\nconsole.log(s5.play, s6.play);\nconsole.log(s5 instanceof Child5, s5 instanceof Parent5); // true true\nconsole.log(s5.constructor); // Child5"},{"title":"个人分享自己的学习经历的blog","layout":"about","_content":"前端攻城狮一枚，工作多年后将自己的笔记总结为博客，总结自己。\n","source":"about/index.md","raw":"---\ntitle: 个人分享自己的学习经历的blog\nlayout: about\n---\n前端攻城狮一枚，工作多年后将自己的笔记总结为博客，总结自己。\n","date":"2020-01-14T07:16:44.000Z","updated":"2020-01-14T07:16:44.000Z","path":"about/index.html","comments":1,"_id":"ck9v62x6k0004qqs6cd7h8a07","content":"<p>前端攻城狮一枚，工作多年后将自己的笔记总结为博客，总结自己。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>前端攻城狮一枚，工作多年后将自己的笔记总结为博客，总结自己。</p>\n"}],"Post":[{"layout":"[post]","title":"CSRF和XSS","date":"2019-09-03T07:41:47.000Z","_content":"## CSRF和XSS\n前端安全主要分为两种：\n1. CSRF\n2. XSS\n<!-- more -->\n### CSRF\n**CSRF跨站点请求伪造(Cross—Site Request Forgery)**\n\n![image](csrf.png)\n\n攻击者盗用了你的身份，以你的名义发送恶意请求，对服务器来说这个请求是完全合法的，但是却完成了攻击者所期望的一个操作，比如以你的名义发送邮件、发消息，盗取你的账号，添加系统管理员，甚至于购买商品、虚拟货币转账等。 如下：其中Web A为存在CSRF漏洞的网站，Web B为攻击者构建的恶意网站，User C为Web A网站的合法用户。\n\n#### 漏洞检测\n检测CSRF漏洞是一项比较繁琐的工作，最简单的方法就是抓取一个正常请求的数据包，去掉Referer字段后再重新提交，如果该提交还有效，那么基本上可以确定存在CSRF漏洞。\n\n#### 防御方式\n\n##### token形式\nCSRF 攻击之所以能够成功，是因为黑客可以完全伪造用户的请求，该请求中所有的用户验证信息都是存在于 cookie 中，因此黑客可以在不知道这些验证信息的情况下直接利用用户自己的 cookie 来通过安全验证。要抵御 CSRF，关键在于在请求中放入黑客所不能伪造的信息，并且该信息不存在于 cookie 之中。可以在 HTTP 请求中以参数的形式加入一个随机产生的 token，并在服务器端建立一个拦截器来验证这个 token，如果请求中没有 token 或者 token 内容不正确，则认为可能是 CSRF 攻击而拒绝该请求。\n\n这种方法要比检查 Referer 要安全一些，token 可以在用户登陆后产生并放于 session 之中，然后在每次请求时把 token 从 session 中拿出，与请求中的 token 进行比对，但这种方法的难点在于如何把 token 以参数的形式加入请求。对于 GET 请求，token 将附在请求地址之后，这样 URL 就变成 ```http://url?csrftoken=tokenvalue```。 而对于 POST 请求来说，要在 form 的最后加上```<input type=”hidden” name=”csrftoken” value=”tokenvalue”/>```\n，这样就把 token 以参数的形式加入请求了。但是，在一个网站中，可以接受请求的地方非常多，要对于每一个请求都加上 token 是很麻烦的，并且很容易漏掉，通常使用的方法就是在每次页面加载时，使用 javascript 遍历整个 dom 树，对于 dom 中所有的 a 和 form 标签后加入 token。这样可以解决大部分的请求，但是对于在页面加载之后动态生成的 html 代码，这种方法就没有作用，还需要程序员在编码时手动添加 token。\n\n 该方法还有一个缺点是难以保证 token 本身的安全。特别是在一些论坛之类支持用户自己发表内容的网站，黑客可以在上面发布自己个人网站的地址。由于系统也会在这个地址后面加上 token，黑客可以在自己的网站上得到这个 token，并马上就可以发动 CSRF 攻击。为了避免这一点，系统可以在添加 token 的时候增加一个判断，如果这个链接是链到自己本站的，就在后面添加 token，如果是通向外网则不加。不过，即使这个 csrftoken 不以参数的形式附加在请求之中，黑客的网站也同样可以通过 Referer 来得到这个 token 值以发动 CSRF 攻击。这也是一些用户喜欢手动关闭浏览器 Referer 功能的原因。\n##### Referer验证\n根据 HTTP 协议，在 HTTP 头中有一个字段叫 Referer，它记录了该 HTTP 请求的来源地址。在通常情况下，访问一个安全受限页面的请求来自于同一个网站，比如需要访问 ```http://bank.example/withdraw?account=bob&amount=1000000&for=Mallory```，用户必须先登陆 bank.example，然后通过点击页面上的按钮来触发转账事件。这时，该转帐请求的 Referer 值就会是转账按钮所在的页面的 URL，通常是以 bank.example 域名开头的地址。而如果黑客要对银行网站实施 CSRF 攻击，他只能在他自己的网站构造请求，当用户通过黑客的网站发送请求到银行时，该请求的 Referer 是指向黑客自己的网站。因此，要防御 CSRF 攻击，银行网站只需要对于每一个转账请求验证其 Referer 值，如果是以 bank.example 开头的域名，则说明该请求是来自银行网站自己的请求，是合法的。如果 Referer 是其他网站的话，则有可能是黑客的 CSRF 攻击，拒绝该请求。\n\n这种方法的显而易见的好处就是简单易行，网站的普通开发人员不需要操心 CSRF 的漏洞，只需要在最后给所有安全敏感的请求统一增加一个拦截器来检查 Referer 的值就可以。特别是对于当前现有的系统，不需要改变当前系统的任何已有代码和逻辑，没有风险，非常便捷。\n\n然而，这种方法并非万无一失。Referer 的值是由浏览器提供的，虽然 HTTP 协议上有明确的要求，但是每个浏览器对于 Referer 的具体实现可能有差别，并不能保证浏览器自身没有安全漏洞。使用验证 Referer 值的方法，就是把安全性都依赖于第三方（即浏览器）来保障，从理论上来讲，这样并不安全。事实上，对于某些浏览器，比如 IE6 或 FF2，目前已经有一些方法可以篡改 Referer 值。如果 bank.example 网站支持 IE6 浏览器，黑客完全可以把用户浏览器的 Referer 值设为以 bank.example 域名开头的地址，这样就可以通过验证，从而进行 CSRF 攻击。\n\n即便是使用最新的浏览器，黑客无法篡改 Referer 值，这种方法仍然有问题。因为 Referer 值会记录下用户的访问来源，有些用户认为这样会侵犯到他们自己的隐私权，特别是有些组织担心 Referer 值会把组织内网中的某些信息泄露到外网中。因此，用户自己可以设置浏览器使其在发送请求时不再提供 Referer。当他们正常访问银行网站时，网站会因为请求没有 Referer 值而认为是 CSRF 攻击，拒绝合法用户的访问。\n##### 隐藏令牌\n这种方法也是使用 token 并进行验证，和上一种方法不同的是，这里并不是把 token 以参数的形式置于 HTTP 请求之中，而是把它放到 HTTP 头中自定义的属性里。通过 XMLHttpRequest 这个类，可以一次性给所有该类请求加上 csrftoken 这个 HTTP 头属性，并把 token 值放入其中。这样解决了上种方法在请求中加入 token 的不便，同时，通过 XMLHttpRequest 请求的地址不会被记录到浏览器的地址栏，也不用担心 token 会透过 Referer 泄露到其他网站中去。\n\n然而这种方法的局限性非常大。XMLHttpRequest 请求通常用于 Ajax 方法中对于页面局部的异步刷新，并非所有的请求都适合用这个类来发起，而且通过该类请求得到的页面不能被浏览器所记录下，从而进行前进，后退，刷新，收藏等操作，给用户带来不便。另外，对于没有进行 CSRF 防护的遗留系统来说，要采用这种方法来进行防护，要把所有请求都改为 XMLHttpRequest 请求，这样几乎是要重写整个网站，这代价无疑是不能接受的。\n\n### XSS\n**XSS跨域脚本攻击（Cross Site Scripting）**\n\n跨站脚本攻击是指恶意攻击者往Web页面里插入恶意Script代码，当用户浏览该页之时，嵌入其中Web里面的Script代码会被执行，从而达到恶意攻击用户的目的。\nxss漏洞通常是通过php的输出函数将javascript代码输出到html页面中，通过用户本地浏览器执行的，所以xss漏洞关键就是寻找参数未过滤的输出函数。\n\n#### 分类\n##### 反射型\n**非持久化**\n\n攻击者事先制作好攻击链接, 需要欺骗用户自己去点击链接才能触发XSS代码（服务器中没有这样的页面和内容），一般容易出现在搜索页面。\n##### 存储型XSS\n**持久化**\n\n代码是存储在服务器中的，如在个人信息或发表文章等地方，加入代码，如果没有过滤或过滤不严，那么这些代码将储存到服务器中，每当有用户访问该页面的时候都会触发代码执行，这种XSS非常危险，容易造成蠕虫，大量盗窃cookie（虽然还有种DOM型XSS，但是也还是包括在存储型XSS内）。\n\n##### DOM型XSS\n基于文档对象模型Document Objeet Model，DOM)的一种漏洞。DOM是一个与平台、编程语言无关的接口，它允许程序或脚本动态地访问和更新文档内容、结构和样式，处理后的结果能够成为显示页面的一部分。DOM中有很多对象，其中一些是用户可以操纵的，如uRI ，location，refelTer等。客户端的脚本程序可以通过DOM动态地检查和修改页面内容，它不依赖于提交数据到服务器端，而从客户端获得DOM中的数据在本地执行，如果DOM中的数据没有经过严格确认，就会产生DOM XSS漏洞。\n\n#### 防御措施\nXSS防御的总体思路是：**对输入(和URL参数)进行过滤，对输出进行编码。**\n##### 对输入和URL参数进行过滤(白名单和黑名单)\n##### 对输出进行编码\n##### 使用HTTPOnly保护用户信息","source":"_posts/CSRF和XSS.md","raw":"---\nlayout: '[post]'\ntitle: CSRF和XSS\ndate: 2019-09-03 15:41:47\ntags: 网络安全\n---\n## CSRF和XSS\n前端安全主要分为两种：\n1. CSRF\n2. XSS\n<!-- more -->\n### CSRF\n**CSRF跨站点请求伪造(Cross—Site Request Forgery)**\n\n![image](csrf.png)\n\n攻击者盗用了你的身份，以你的名义发送恶意请求，对服务器来说这个请求是完全合法的，但是却完成了攻击者所期望的一个操作，比如以你的名义发送邮件、发消息，盗取你的账号，添加系统管理员，甚至于购买商品、虚拟货币转账等。 如下：其中Web A为存在CSRF漏洞的网站，Web B为攻击者构建的恶意网站，User C为Web A网站的合法用户。\n\n#### 漏洞检测\n检测CSRF漏洞是一项比较繁琐的工作，最简单的方法就是抓取一个正常请求的数据包，去掉Referer字段后再重新提交，如果该提交还有效，那么基本上可以确定存在CSRF漏洞。\n\n#### 防御方式\n\n##### token形式\nCSRF 攻击之所以能够成功，是因为黑客可以完全伪造用户的请求，该请求中所有的用户验证信息都是存在于 cookie 中，因此黑客可以在不知道这些验证信息的情况下直接利用用户自己的 cookie 来通过安全验证。要抵御 CSRF，关键在于在请求中放入黑客所不能伪造的信息，并且该信息不存在于 cookie 之中。可以在 HTTP 请求中以参数的形式加入一个随机产生的 token，并在服务器端建立一个拦截器来验证这个 token，如果请求中没有 token 或者 token 内容不正确，则认为可能是 CSRF 攻击而拒绝该请求。\n\n这种方法要比检查 Referer 要安全一些，token 可以在用户登陆后产生并放于 session 之中，然后在每次请求时把 token 从 session 中拿出，与请求中的 token 进行比对，但这种方法的难点在于如何把 token 以参数的形式加入请求。对于 GET 请求，token 将附在请求地址之后，这样 URL 就变成 ```http://url?csrftoken=tokenvalue```。 而对于 POST 请求来说，要在 form 的最后加上```<input type=”hidden” name=”csrftoken” value=”tokenvalue”/>```\n，这样就把 token 以参数的形式加入请求了。但是，在一个网站中，可以接受请求的地方非常多，要对于每一个请求都加上 token 是很麻烦的，并且很容易漏掉，通常使用的方法就是在每次页面加载时，使用 javascript 遍历整个 dom 树，对于 dom 中所有的 a 和 form 标签后加入 token。这样可以解决大部分的请求，但是对于在页面加载之后动态生成的 html 代码，这种方法就没有作用，还需要程序员在编码时手动添加 token。\n\n 该方法还有一个缺点是难以保证 token 本身的安全。特别是在一些论坛之类支持用户自己发表内容的网站，黑客可以在上面发布自己个人网站的地址。由于系统也会在这个地址后面加上 token，黑客可以在自己的网站上得到这个 token，并马上就可以发动 CSRF 攻击。为了避免这一点，系统可以在添加 token 的时候增加一个判断，如果这个链接是链到自己本站的，就在后面添加 token，如果是通向外网则不加。不过，即使这个 csrftoken 不以参数的形式附加在请求之中，黑客的网站也同样可以通过 Referer 来得到这个 token 值以发动 CSRF 攻击。这也是一些用户喜欢手动关闭浏览器 Referer 功能的原因。\n##### Referer验证\n根据 HTTP 协议，在 HTTP 头中有一个字段叫 Referer，它记录了该 HTTP 请求的来源地址。在通常情况下，访问一个安全受限页面的请求来自于同一个网站，比如需要访问 ```http://bank.example/withdraw?account=bob&amount=1000000&for=Mallory```，用户必须先登陆 bank.example，然后通过点击页面上的按钮来触发转账事件。这时，该转帐请求的 Referer 值就会是转账按钮所在的页面的 URL，通常是以 bank.example 域名开头的地址。而如果黑客要对银行网站实施 CSRF 攻击，他只能在他自己的网站构造请求，当用户通过黑客的网站发送请求到银行时，该请求的 Referer 是指向黑客自己的网站。因此，要防御 CSRF 攻击，银行网站只需要对于每一个转账请求验证其 Referer 值，如果是以 bank.example 开头的域名，则说明该请求是来自银行网站自己的请求，是合法的。如果 Referer 是其他网站的话，则有可能是黑客的 CSRF 攻击，拒绝该请求。\n\n这种方法的显而易见的好处就是简单易行，网站的普通开发人员不需要操心 CSRF 的漏洞，只需要在最后给所有安全敏感的请求统一增加一个拦截器来检查 Referer 的值就可以。特别是对于当前现有的系统，不需要改变当前系统的任何已有代码和逻辑，没有风险，非常便捷。\n\n然而，这种方法并非万无一失。Referer 的值是由浏览器提供的，虽然 HTTP 协议上有明确的要求，但是每个浏览器对于 Referer 的具体实现可能有差别，并不能保证浏览器自身没有安全漏洞。使用验证 Referer 值的方法，就是把安全性都依赖于第三方（即浏览器）来保障，从理论上来讲，这样并不安全。事实上，对于某些浏览器，比如 IE6 或 FF2，目前已经有一些方法可以篡改 Referer 值。如果 bank.example 网站支持 IE6 浏览器，黑客完全可以把用户浏览器的 Referer 值设为以 bank.example 域名开头的地址，这样就可以通过验证，从而进行 CSRF 攻击。\n\n即便是使用最新的浏览器，黑客无法篡改 Referer 值，这种方法仍然有问题。因为 Referer 值会记录下用户的访问来源，有些用户认为这样会侵犯到他们自己的隐私权，特别是有些组织担心 Referer 值会把组织内网中的某些信息泄露到外网中。因此，用户自己可以设置浏览器使其在发送请求时不再提供 Referer。当他们正常访问银行网站时，网站会因为请求没有 Referer 值而认为是 CSRF 攻击，拒绝合法用户的访问。\n##### 隐藏令牌\n这种方法也是使用 token 并进行验证，和上一种方法不同的是，这里并不是把 token 以参数的形式置于 HTTP 请求之中，而是把它放到 HTTP 头中自定义的属性里。通过 XMLHttpRequest 这个类，可以一次性给所有该类请求加上 csrftoken 这个 HTTP 头属性，并把 token 值放入其中。这样解决了上种方法在请求中加入 token 的不便，同时，通过 XMLHttpRequest 请求的地址不会被记录到浏览器的地址栏，也不用担心 token 会透过 Referer 泄露到其他网站中去。\n\n然而这种方法的局限性非常大。XMLHttpRequest 请求通常用于 Ajax 方法中对于页面局部的异步刷新，并非所有的请求都适合用这个类来发起，而且通过该类请求得到的页面不能被浏览器所记录下，从而进行前进，后退，刷新，收藏等操作，给用户带来不便。另外，对于没有进行 CSRF 防护的遗留系统来说，要采用这种方法来进行防护，要把所有请求都改为 XMLHttpRequest 请求，这样几乎是要重写整个网站，这代价无疑是不能接受的。\n\n### XSS\n**XSS跨域脚本攻击（Cross Site Scripting）**\n\n跨站脚本攻击是指恶意攻击者往Web页面里插入恶意Script代码，当用户浏览该页之时，嵌入其中Web里面的Script代码会被执行，从而达到恶意攻击用户的目的。\nxss漏洞通常是通过php的输出函数将javascript代码输出到html页面中，通过用户本地浏览器执行的，所以xss漏洞关键就是寻找参数未过滤的输出函数。\n\n#### 分类\n##### 反射型\n**非持久化**\n\n攻击者事先制作好攻击链接, 需要欺骗用户自己去点击链接才能触发XSS代码（服务器中没有这样的页面和内容），一般容易出现在搜索页面。\n##### 存储型XSS\n**持久化**\n\n代码是存储在服务器中的，如在个人信息或发表文章等地方，加入代码，如果没有过滤或过滤不严，那么这些代码将储存到服务器中，每当有用户访问该页面的时候都会触发代码执行，这种XSS非常危险，容易造成蠕虫，大量盗窃cookie（虽然还有种DOM型XSS，但是也还是包括在存储型XSS内）。\n\n##### DOM型XSS\n基于文档对象模型Document Objeet Model，DOM)的一种漏洞。DOM是一个与平台、编程语言无关的接口，它允许程序或脚本动态地访问和更新文档内容、结构和样式，处理后的结果能够成为显示页面的一部分。DOM中有很多对象，其中一些是用户可以操纵的，如uRI ，location，refelTer等。客户端的脚本程序可以通过DOM动态地检查和修改页面内容，它不依赖于提交数据到服务器端，而从客户端获得DOM中的数据在本地执行，如果DOM中的数据没有经过严格确认，就会产生DOM XSS漏洞。\n\n#### 防御措施\nXSS防御的总体思路是：**对输入(和URL参数)进行过滤，对输出进行编码。**\n##### 对输入和URL参数进行过滤(白名单和黑名单)\n##### 对输出进行编码\n##### 使用HTTPOnly保护用户信息","slug":"CSRF和XSS","published":1,"updated":"2020-04-25T07:45:04.000Z","comments":1,"photos":[],"link":"","_id":"ck9v62x6g0003qqs6h4qxerrp","content":"<h2 id=\"CSRF和XSS\"><a href=\"#CSRF和XSS\" class=\"headerlink\" title=\"CSRF和XSS\"></a>CSRF和XSS</h2><p>前端安全主要分为两种：</p>\n<ol>\n<li>CSRF</li>\n<li>XSS<a id=\"more\"></a>\n<h3 id=\"CSRF\"><a href=\"#CSRF\" class=\"headerlink\" title=\"CSRF\"></a>CSRF</h3></li>\n</ol>\n<p><strong>CSRF跨站点请求伪造(Cross—Site Request Forgery)</strong></p>\n<p><img src=\"/2019/09/03/CSRF%E5%92%8CXSS/csrf.png\" alt=\"image\"></p>\n<p>攻击者盗用了你的身份，以你的名义发送恶意请求，对服务器来说这个请求是完全合法的，但是却完成了攻击者所期望的一个操作，比如以你的名义发送邮件、发消息，盗取你的账号，添加系统管理员，甚至于购买商品、虚拟货币转账等。 如下：其中Web A为存在CSRF漏洞的网站，Web B为攻击者构建的恶意网站，User C为Web A网站的合法用户。</p>\n<h4 id=\"漏洞检测\"><a href=\"#漏洞检测\" class=\"headerlink\" title=\"漏洞检测\"></a>漏洞检测</h4><p>检测CSRF漏洞是一项比较繁琐的工作，最简单的方法就是抓取一个正常请求的数据包，去掉Referer字段后再重新提交，如果该提交还有效，那么基本上可以确定存在CSRF漏洞。</p>\n<h4 id=\"防御方式\"><a href=\"#防御方式\" class=\"headerlink\" title=\"防御方式\"></a>防御方式</h4><h5 id=\"token形式\"><a href=\"#token形式\" class=\"headerlink\" title=\"token形式\"></a>token形式</h5><p>CSRF 攻击之所以能够成功，是因为黑客可以完全伪造用户的请求，该请求中所有的用户验证信息都是存在于 cookie 中，因此黑客可以在不知道这些验证信息的情况下直接利用用户自己的 cookie 来通过安全验证。要抵御 CSRF，关键在于在请求中放入黑客所不能伪造的信息，并且该信息不存在于 cookie 之中。可以在 HTTP 请求中以参数的形式加入一个随机产生的 token，并在服务器端建立一个拦截器来验证这个 token，如果请求中没有 token 或者 token 内容不正确，则认为可能是 CSRF 攻击而拒绝该请求。</p>\n<p>这种方法要比检查 Referer 要安全一些，token 可以在用户登陆后产生并放于 session 之中，然后在每次请求时把 token 从 session 中拿出，与请求中的 token 进行比对，但这种方法的难点在于如何把 token 以参数的形式加入请求。对于 GET 请求，token 将附在请求地址之后，这样 URL 就变成 <code>http://url?csrftoken=tokenvalue</code>。 而对于 POST 请求来说，要在 form 的最后加上<code>&lt;input type=”hidden” name=”csrftoken” value=”tokenvalue”/&gt;</code><br>，这样就把 token 以参数的形式加入请求了。但是，在一个网站中，可以接受请求的地方非常多，要对于每一个请求都加上 token 是很麻烦的，并且很容易漏掉，通常使用的方法就是在每次页面加载时，使用 javascript 遍历整个 dom 树，对于 dom 中所有的 a 和 form 标签后加入 token。这样可以解决大部分的请求，但是对于在页面加载之后动态生成的 html 代码，这种方法就没有作用，还需要程序员在编码时手动添加 token。</p>\n<p> 该方法还有一个缺点是难以保证 token 本身的安全。特别是在一些论坛之类支持用户自己发表内容的网站，黑客可以在上面发布自己个人网站的地址。由于系统也会在这个地址后面加上 token，黑客可以在自己的网站上得到这个 token，并马上就可以发动 CSRF 攻击。为了避免这一点，系统可以在添加 token 的时候增加一个判断，如果这个链接是链到自己本站的，就在后面添加 token，如果是通向外网则不加。不过，即使这个 csrftoken 不以参数的形式附加在请求之中，黑客的网站也同样可以通过 Referer 来得到这个 token 值以发动 CSRF 攻击。这也是一些用户喜欢手动关闭浏览器 Referer 功能的原因。</p>\n<h5 id=\"Referer验证\"><a href=\"#Referer验证\" class=\"headerlink\" title=\"Referer验证\"></a>Referer验证</h5><p>根据 HTTP 协议，在 HTTP 头中有一个字段叫 Referer，它记录了该 HTTP 请求的来源地址。在通常情况下，访问一个安全受限页面的请求来自于同一个网站，比如需要访问 <code>http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=Mallory</code>，用户必须先登陆 bank.example，然后通过点击页面上的按钮来触发转账事件。这时，该转帐请求的 Referer 值就会是转账按钮所在的页面的 URL，通常是以 bank.example 域名开头的地址。而如果黑客要对银行网站实施 CSRF 攻击，他只能在他自己的网站构造请求，当用户通过黑客的网站发送请求到银行时，该请求的 Referer 是指向黑客自己的网站。因此，要防御 CSRF 攻击，银行网站只需要对于每一个转账请求验证其 Referer 值，如果是以 bank.example 开头的域名，则说明该请求是来自银行网站自己的请求，是合法的。如果 Referer 是其他网站的话，则有可能是黑客的 CSRF 攻击，拒绝该请求。</p>\n<p>这种方法的显而易见的好处就是简单易行，网站的普通开发人员不需要操心 CSRF 的漏洞，只需要在最后给所有安全敏感的请求统一增加一个拦截器来检查 Referer 的值就可以。特别是对于当前现有的系统，不需要改变当前系统的任何已有代码和逻辑，没有风险，非常便捷。</p>\n<p>然而，这种方法并非万无一失。Referer 的值是由浏览器提供的，虽然 HTTP 协议上有明确的要求，但是每个浏览器对于 Referer 的具体实现可能有差别，并不能保证浏览器自身没有安全漏洞。使用验证 Referer 值的方法，就是把安全性都依赖于第三方（即浏览器）来保障，从理论上来讲，这样并不安全。事实上，对于某些浏览器，比如 IE6 或 FF2，目前已经有一些方法可以篡改 Referer 值。如果 bank.example 网站支持 IE6 浏览器，黑客完全可以把用户浏览器的 Referer 值设为以 bank.example 域名开头的地址，这样就可以通过验证，从而进行 CSRF 攻击。</p>\n<p>即便是使用最新的浏览器，黑客无法篡改 Referer 值，这种方法仍然有问题。因为 Referer 值会记录下用户的访问来源，有些用户认为这样会侵犯到他们自己的隐私权，特别是有些组织担心 Referer 值会把组织内网中的某些信息泄露到外网中。因此，用户自己可以设置浏览器使其在发送请求时不再提供 Referer。当他们正常访问银行网站时，网站会因为请求没有 Referer 值而认为是 CSRF 攻击，拒绝合法用户的访问。</p>\n<h5 id=\"隐藏令牌\"><a href=\"#隐藏令牌\" class=\"headerlink\" title=\"隐藏令牌\"></a>隐藏令牌</h5><p>这种方法也是使用 token 并进行验证，和上一种方法不同的是，这里并不是把 token 以参数的形式置于 HTTP 请求之中，而是把它放到 HTTP 头中自定义的属性里。通过 XMLHttpRequest 这个类，可以一次性给所有该类请求加上 csrftoken 这个 HTTP 头属性，并把 token 值放入其中。这样解决了上种方法在请求中加入 token 的不便，同时，通过 XMLHttpRequest 请求的地址不会被记录到浏览器的地址栏，也不用担心 token 会透过 Referer 泄露到其他网站中去。</p>\n<p>然而这种方法的局限性非常大。XMLHttpRequest 请求通常用于 Ajax 方法中对于页面局部的异步刷新，并非所有的请求都适合用这个类来发起，而且通过该类请求得到的页面不能被浏览器所记录下，从而进行前进，后退，刷新，收藏等操作，给用户带来不便。另外，对于没有进行 CSRF 防护的遗留系统来说，要采用这种方法来进行防护，要把所有请求都改为 XMLHttpRequest 请求，这样几乎是要重写整个网站，这代价无疑是不能接受的。</p>\n<h3 id=\"XSS\"><a href=\"#XSS\" class=\"headerlink\" title=\"XSS\"></a>XSS</h3><p><strong>XSS跨域脚本攻击（Cross Site Scripting）</strong></p>\n<p>跨站脚本攻击是指恶意攻击者往Web页面里插入恶意Script代码，当用户浏览该页之时，嵌入其中Web里面的Script代码会被执行，从而达到恶意攻击用户的目的。<br>xss漏洞通常是通过php的输出函数将javascript代码输出到html页面中，通过用户本地浏览器执行的，所以xss漏洞关键就是寻找参数未过滤的输出函数。</p>\n<h4 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h4><h5 id=\"反射型\"><a href=\"#反射型\" class=\"headerlink\" title=\"反射型\"></a>反射型</h5><p><strong>非持久化</strong></p>\n<p>攻击者事先制作好攻击链接, 需要欺骗用户自己去点击链接才能触发XSS代码（服务器中没有这样的页面和内容），一般容易出现在搜索页面。</p>\n<h5 id=\"存储型XSS\"><a href=\"#存储型XSS\" class=\"headerlink\" title=\"存储型XSS\"></a>存储型XSS</h5><p><strong>持久化</strong></p>\n<p>代码是存储在服务器中的，如在个人信息或发表文章等地方，加入代码，如果没有过滤或过滤不严，那么这些代码将储存到服务器中，每当有用户访问该页面的时候都会触发代码执行，这种XSS非常危险，容易造成蠕虫，大量盗窃cookie（虽然还有种DOM型XSS，但是也还是包括在存储型XSS内）。</p>\n<h5 id=\"DOM型XSS\"><a href=\"#DOM型XSS\" class=\"headerlink\" title=\"DOM型XSS\"></a>DOM型XSS</h5><p>基于文档对象模型Document Objeet Model，DOM)的一种漏洞。DOM是一个与平台、编程语言无关的接口，它允许程序或脚本动态地访问和更新文档内容、结构和样式，处理后的结果能够成为显示页面的一部分。DOM中有很多对象，其中一些是用户可以操纵的，如uRI ，location，refelTer等。客户端的脚本程序可以通过DOM动态地检查和修改页面内容，它不依赖于提交数据到服务器端，而从客户端获得DOM中的数据在本地执行，如果DOM中的数据没有经过严格确认，就会产生DOM XSS漏洞。</p>\n<h4 id=\"防御措施\"><a href=\"#防御措施\" class=\"headerlink\" title=\"防御措施\"></a>防御措施</h4><p>XSS防御的总体思路是：<strong>对输入(和URL参数)进行过滤，对输出进行编码。</strong></p>\n<h5 id=\"对输入和URL参数进行过滤-白名单和黑名单\"><a href=\"#对输入和URL参数进行过滤-白名单和黑名单\" class=\"headerlink\" title=\"对输入和URL参数进行过滤(白名单和黑名单)\"></a>对输入和URL参数进行过滤(白名单和黑名单)</h5><h5 id=\"对输出进行编码\"><a href=\"#对输出进行编码\" class=\"headerlink\" title=\"对输出进行编码\"></a>对输出进行编码</h5><h5 id=\"使用HTTPOnly保护用户信息\"><a href=\"#使用HTTPOnly保护用户信息\" class=\"headerlink\" title=\"使用HTTPOnly保护用户信息\"></a>使用HTTPOnly保护用户信息</h5>","site":{"data":{}},"excerpt":"<h2 id=\"CSRF和XSS\"><a href=\"#CSRF和XSS\" class=\"headerlink\" title=\"CSRF和XSS\"></a>CSRF和XSS</h2><p>前端安全主要分为两种：</p>\n<ol>\n<li>CSRF</li>\n<li>XSS</li></ol>","more":"<h3 id=\"CSRF\"><a href=\"#CSRF\" class=\"headerlink\" title=\"CSRF\"></a>CSRF</h3>\n\n<p><strong>CSRF跨站点请求伪造(Cross—Site Request Forgery)</strong></p>\n<p><img src=\"/2019/09/03/CSRF%E5%92%8CXSS/csrf.png\" alt=\"image\"></p>\n<p>攻击者盗用了你的身份，以你的名义发送恶意请求，对服务器来说这个请求是完全合法的，但是却完成了攻击者所期望的一个操作，比如以你的名义发送邮件、发消息，盗取你的账号，添加系统管理员，甚至于购买商品、虚拟货币转账等。 如下：其中Web A为存在CSRF漏洞的网站，Web B为攻击者构建的恶意网站，User C为Web A网站的合法用户。</p>\n<h4 id=\"漏洞检测\"><a href=\"#漏洞检测\" class=\"headerlink\" title=\"漏洞检测\"></a>漏洞检测</h4><p>检测CSRF漏洞是一项比较繁琐的工作，最简单的方法就是抓取一个正常请求的数据包，去掉Referer字段后再重新提交，如果该提交还有效，那么基本上可以确定存在CSRF漏洞。</p>\n<h4 id=\"防御方式\"><a href=\"#防御方式\" class=\"headerlink\" title=\"防御方式\"></a>防御方式</h4><h5 id=\"token形式\"><a href=\"#token形式\" class=\"headerlink\" title=\"token形式\"></a>token形式</h5><p>CSRF 攻击之所以能够成功，是因为黑客可以完全伪造用户的请求，该请求中所有的用户验证信息都是存在于 cookie 中，因此黑客可以在不知道这些验证信息的情况下直接利用用户自己的 cookie 来通过安全验证。要抵御 CSRF，关键在于在请求中放入黑客所不能伪造的信息，并且该信息不存在于 cookie 之中。可以在 HTTP 请求中以参数的形式加入一个随机产生的 token，并在服务器端建立一个拦截器来验证这个 token，如果请求中没有 token 或者 token 内容不正确，则认为可能是 CSRF 攻击而拒绝该请求。</p>\n<p>这种方法要比检查 Referer 要安全一些，token 可以在用户登陆后产生并放于 session 之中，然后在每次请求时把 token 从 session 中拿出，与请求中的 token 进行比对，但这种方法的难点在于如何把 token 以参数的形式加入请求。对于 GET 请求，token 将附在请求地址之后，这样 URL 就变成 <code>http://url?csrftoken=tokenvalue</code>。 而对于 POST 请求来说，要在 form 的最后加上<code>&lt;input type=”hidden” name=”csrftoken” value=”tokenvalue”/&gt;</code><br>，这样就把 token 以参数的形式加入请求了。但是，在一个网站中，可以接受请求的地方非常多，要对于每一个请求都加上 token 是很麻烦的，并且很容易漏掉，通常使用的方法就是在每次页面加载时，使用 javascript 遍历整个 dom 树，对于 dom 中所有的 a 和 form 标签后加入 token。这样可以解决大部分的请求，但是对于在页面加载之后动态生成的 html 代码，这种方法就没有作用，还需要程序员在编码时手动添加 token。</p>\n<p> 该方法还有一个缺点是难以保证 token 本身的安全。特别是在一些论坛之类支持用户自己发表内容的网站，黑客可以在上面发布自己个人网站的地址。由于系统也会在这个地址后面加上 token，黑客可以在自己的网站上得到这个 token，并马上就可以发动 CSRF 攻击。为了避免这一点，系统可以在添加 token 的时候增加一个判断，如果这个链接是链到自己本站的，就在后面添加 token，如果是通向外网则不加。不过，即使这个 csrftoken 不以参数的形式附加在请求之中，黑客的网站也同样可以通过 Referer 来得到这个 token 值以发动 CSRF 攻击。这也是一些用户喜欢手动关闭浏览器 Referer 功能的原因。</p>\n<h5 id=\"Referer验证\"><a href=\"#Referer验证\" class=\"headerlink\" title=\"Referer验证\"></a>Referer验证</h5><p>根据 HTTP 协议，在 HTTP 头中有一个字段叫 Referer，它记录了该 HTTP 请求的来源地址。在通常情况下，访问一个安全受限页面的请求来自于同一个网站，比如需要访问 <code>http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=Mallory</code>，用户必须先登陆 bank.example，然后通过点击页面上的按钮来触发转账事件。这时，该转帐请求的 Referer 值就会是转账按钮所在的页面的 URL，通常是以 bank.example 域名开头的地址。而如果黑客要对银行网站实施 CSRF 攻击，他只能在他自己的网站构造请求，当用户通过黑客的网站发送请求到银行时，该请求的 Referer 是指向黑客自己的网站。因此，要防御 CSRF 攻击，银行网站只需要对于每一个转账请求验证其 Referer 值，如果是以 bank.example 开头的域名，则说明该请求是来自银行网站自己的请求，是合法的。如果 Referer 是其他网站的话，则有可能是黑客的 CSRF 攻击，拒绝该请求。</p>\n<p>这种方法的显而易见的好处就是简单易行，网站的普通开发人员不需要操心 CSRF 的漏洞，只需要在最后给所有安全敏感的请求统一增加一个拦截器来检查 Referer 的值就可以。特别是对于当前现有的系统，不需要改变当前系统的任何已有代码和逻辑，没有风险，非常便捷。</p>\n<p>然而，这种方法并非万无一失。Referer 的值是由浏览器提供的，虽然 HTTP 协议上有明确的要求，但是每个浏览器对于 Referer 的具体实现可能有差别，并不能保证浏览器自身没有安全漏洞。使用验证 Referer 值的方法，就是把安全性都依赖于第三方（即浏览器）来保障，从理论上来讲，这样并不安全。事实上，对于某些浏览器，比如 IE6 或 FF2，目前已经有一些方法可以篡改 Referer 值。如果 bank.example 网站支持 IE6 浏览器，黑客完全可以把用户浏览器的 Referer 值设为以 bank.example 域名开头的地址，这样就可以通过验证，从而进行 CSRF 攻击。</p>\n<p>即便是使用最新的浏览器，黑客无法篡改 Referer 值，这种方法仍然有问题。因为 Referer 值会记录下用户的访问来源，有些用户认为这样会侵犯到他们自己的隐私权，特别是有些组织担心 Referer 值会把组织内网中的某些信息泄露到外网中。因此，用户自己可以设置浏览器使其在发送请求时不再提供 Referer。当他们正常访问银行网站时，网站会因为请求没有 Referer 值而认为是 CSRF 攻击，拒绝合法用户的访问。</p>\n<h5 id=\"隐藏令牌\"><a href=\"#隐藏令牌\" class=\"headerlink\" title=\"隐藏令牌\"></a>隐藏令牌</h5><p>这种方法也是使用 token 并进行验证，和上一种方法不同的是，这里并不是把 token 以参数的形式置于 HTTP 请求之中，而是把它放到 HTTP 头中自定义的属性里。通过 XMLHttpRequest 这个类，可以一次性给所有该类请求加上 csrftoken 这个 HTTP 头属性，并把 token 值放入其中。这样解决了上种方法在请求中加入 token 的不便，同时，通过 XMLHttpRequest 请求的地址不会被记录到浏览器的地址栏，也不用担心 token 会透过 Referer 泄露到其他网站中去。</p>\n<p>然而这种方法的局限性非常大。XMLHttpRequest 请求通常用于 Ajax 方法中对于页面局部的异步刷新，并非所有的请求都适合用这个类来发起，而且通过该类请求得到的页面不能被浏览器所记录下，从而进行前进，后退，刷新，收藏等操作，给用户带来不便。另外，对于没有进行 CSRF 防护的遗留系统来说，要采用这种方法来进行防护，要把所有请求都改为 XMLHttpRequest 请求，这样几乎是要重写整个网站，这代价无疑是不能接受的。</p>\n<h3 id=\"XSS\"><a href=\"#XSS\" class=\"headerlink\" title=\"XSS\"></a>XSS</h3><p><strong>XSS跨域脚本攻击（Cross Site Scripting）</strong></p>\n<p>跨站脚本攻击是指恶意攻击者往Web页面里插入恶意Script代码，当用户浏览该页之时，嵌入其中Web里面的Script代码会被执行，从而达到恶意攻击用户的目的。<br>xss漏洞通常是通过php的输出函数将javascript代码输出到html页面中，通过用户本地浏览器执行的，所以xss漏洞关键就是寻找参数未过滤的输出函数。</p>\n<h4 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h4><h5 id=\"反射型\"><a href=\"#反射型\" class=\"headerlink\" title=\"反射型\"></a>反射型</h5><p><strong>非持久化</strong></p>\n<p>攻击者事先制作好攻击链接, 需要欺骗用户自己去点击链接才能触发XSS代码（服务器中没有这样的页面和内容），一般容易出现在搜索页面。</p>\n<h5 id=\"存储型XSS\"><a href=\"#存储型XSS\" class=\"headerlink\" title=\"存储型XSS\"></a>存储型XSS</h5><p><strong>持久化</strong></p>\n<p>代码是存储在服务器中的，如在个人信息或发表文章等地方，加入代码，如果没有过滤或过滤不严，那么这些代码将储存到服务器中，每当有用户访问该页面的时候都会触发代码执行，这种XSS非常危险，容易造成蠕虫，大量盗窃cookie（虽然还有种DOM型XSS，但是也还是包括在存储型XSS内）。</p>\n<h5 id=\"DOM型XSS\"><a href=\"#DOM型XSS\" class=\"headerlink\" title=\"DOM型XSS\"></a>DOM型XSS</h5><p>基于文档对象模型Document Objeet Model，DOM)的一种漏洞。DOM是一个与平台、编程语言无关的接口，它允许程序或脚本动态地访问和更新文档内容、结构和样式，处理后的结果能够成为显示页面的一部分。DOM中有很多对象，其中一些是用户可以操纵的，如uRI ，location，refelTer等。客户端的脚本程序可以通过DOM动态地检查和修改页面内容，它不依赖于提交数据到服务器端，而从客户端获得DOM中的数据在本地执行，如果DOM中的数据没有经过严格确认，就会产生DOM XSS漏洞。</p>\n<h4 id=\"防御措施\"><a href=\"#防御措施\" class=\"headerlink\" title=\"防御措施\"></a>防御措施</h4><p>XSS防御的总体思路是：<strong>对输入(和URL参数)进行过滤，对输出进行编码。</strong></p>\n<h5 id=\"对输入和URL参数进行过滤-白名单和黑名单\"><a href=\"#对输入和URL参数进行过滤-白名单和黑名单\" class=\"headerlink\" title=\"对输入和URL参数进行过滤(白名单和黑名单)\"></a>对输入和URL参数进行过滤(白名单和黑名单)</h5><h5 id=\"对输出进行编码\"><a href=\"#对输出进行编码\" class=\"headerlink\" title=\"对输出进行编码\"></a>对输出进行编码</h5><h5 id=\"使用HTTPOnly保护用户信息\"><a href=\"#使用HTTPOnly保护用户信息\" class=\"headerlink\" title=\"使用HTTPOnly保护用户信息\"></a>使用HTTPOnly保护用户信息</h5>"},{"layout":"[post]","title":"DOM事件流","date":"2019-06-11T10:48:56.000Z","_content":"## 什么是事件？\n> 事件, 就是文档或浏览器窗口发生的一些特定的交互瞬间. JavaScript 和 HTML 之间的交互是通过事件实现的. 可以使用事件监听器来监听事件, 以便事件发生时执行相应的代码.\n<!-- more -->\n## 事件流是什么？\n\n当在页面上某个元素触发特定事件时, 比如点击, 除了被点击的目标元素, 所有祖先元素都会触发该事件, 一直到 window.\n\n那这样就出现了一个问题, 是先在目标元素上触发事件, 还是先在祖先元素上触发呢? 这就是事件流的概念.\n\n**事件流是事件在目标元素和祖先元素间的触发顺序**\n\n- **捕获**- Capture - 事件由最顶层逐级向下传播, 直至到达目标元素.\n- **冒泡** - Bubble - 顾名思义, 类似水中冒泡, 从下往上. 事件由第一个被触发的元素接收, 然后逐级向上传播.\n\n后来 w3c 采用折中的方式, 规定先捕获再冒泡平息了战火. 如此一个事件就被分成了三个阶段(是的, 不光是捕获和冒泡):\n\n1. 捕获阶段 - The capture phase - 事件从最顶层元素 window 一直传递到目标元素的父元素.\n2. 目标阶段 - The target phase - 事件到达目标元素. 如果事件指定不冒泡. 那就会在这里中止.\n3. 冒泡阶段 - The bubble phase - 事件从目标元素父元素向上逐级传递直到最顶层元素 window. 及捕获阶段的反方向.\n\n那这里又有一个新的疑问, 既然捕获和冒泡阶段都会触发事件, 那先捕获再冒泡, 岂不是路径上的元素都会触发两次事件?\n\n在 DOM2 中, 事件监听机制提供了一个参数来决定事件是在捕获阶段生效还是在冒泡阶段生效, 接下来简要学习下 ==addEventListener== .\n\n## addEventListener\n**EventTarget.addEventListener()** 方法将指定的监听器注册到目标元素上, 当该对象触发指定的事件时, 指定的回调函数就会被执行. 事件目标可以是一个文档上的元素或任何其他支持事件的对象 (比如 XMLHttpRequest).\n\n它的工作原理是将实现EventListener的函数或对象添加到调用它的 EventTarget 上的指定事件类型的事件侦听器列表中.\n\n#### 语法\n\n```js\ntarget.addEventListener(type, listener[, options]);\ntarget.addEventListener(type, listener[, useCapture]);\ntarget.addEventListener(type, listener[, useCapture, wantsUntrusted  ]);  // Gecko/Mozilla only\n```\n - type: 表示监听事件类型的字符串. 事件列表.\n - listener: 当所监听的事件类型触发时的回调. 会接收到一个事件通知对象.\n - options: 可选. 可用的选项如下:\n - capture: Boolean, 如果是 true, 表示 listener 会在捕获阶段触发. 默认是 false. 冒泡捕获. 所以微软牛逼.\n - once: Boolean, 如果是 true, 表示 listener 在添加之后最多只调用一次.\n - passive: Boolean，如果是, 表示 listener 永远不会调用 preventDefault(). 如果 listener 仍然调用了这个函数, 客户端将会忽略它并抛出一个控制台警告.\n - useCapture: 可选. Boolean, 同 options - capture\n\n> 注意: 对于目标元素上的事件监听器来说, 事件会处于目标阶段, 而不是冒泡阶段或者捕获阶段. 在目标阶段的事件会触发该元素上的所有监听器, 而不在乎这个监听器到底在注册时 useCapture 是 true 还是 false.\n\n## 事件监听添加与移除\n### 事件添加的三种方式\n1. 通过HTML 属性的方式\n```html\n<div onclick=\"console.log('click')\"></div>\n```\n\n2. DOM0 中可以通过js脚本来给指定元素提供事件处理函数，即\n```\nelement.onclick = function // 只会在冒泡阶段生效\n```\n\n3. DOM2 中, 添加了新的事件监听API, 即```addEventListener```, 同时提供了取消监听的 ```removeEventListener(type, handler[, options | useCapture])```. 显然事件处理函数注册后, 要取消监听, ```type/hanlder/useCapture```的一致.\n\n相比第一, 第二种, ```addEventListener```的方式有以下几点优势:\n- 可以为同一个事件注册多个回调函数, 依次触发. 而 DOM0 的方式则会被覆盖掉. 只能添加一种\n- 使用 DOM0 会覆盖 HTML 的方式.\n- 可以通过参数决定监听是在冒泡阶段生效还是在捕获阶段生效.\n- ```element.onclick``` 注册的监听只会在冒泡阶段生效\n\n##### 实例\n\n\n```html\n<div id=\"parent\">\n    <div id=\"child\" onclick=\"console.log('html')\"/>\n</div>\n```\n\n```js\nconst child = document.getElementById('child') \n\nchild.onclick = function () { console.log('DOM0A') } // 覆盖了 HTML 的方式\nchild.onclick = function () { console.log('DOM0B') } // 覆盖了上一条 DOM0A   \n\nchild.addEventLisnter('click', function () { console.log('lisnterA') })\nchild.addEventLisnter('click', function () { console.log('lisnterB') }) // 不会覆盖\n```\n##### 三种方式对应的如何移除:\n\n```js\nchild.setAttributer('onclick', false)\nchild.onclick = null\nchild.removeEventLisnter('设置相同的参数')\n```\n## 问题\n1. 以下代码的输出顺序\n```html\n<html onclick=\"console.log('html')\">\n\n<head>\n    <meta charset=\"UTF-8\">\n\n    <title>Test</title>\n    <script type=\"text/javascript\">\n        window.onload = function() {\n            const parent = document.getElementById(\"parent\");\n            const child = document.getElementById(\"child\");\n\n            child.onclick = function () { console.log('child onclick') };\n\n            // capture 默认为 false, 冒泡\n            parent.addEventListener('click', function () { console.log('parent event') });\n            child.addEventListener('click', function () { console.log('child event') });\n\n            // 捕获\n            parent.addEventListener('click', function () { console.log('parent event capture') }, { capture: true });\n            child.addEventListener('click', function () { console.log('child event capture') }, { capture: true });\n        }\n        window.onclick = function() {\n            console.log('window');\n        }\n    </script>\n</head>\n\n<body onclick=\"console.log('body')\">\n    <div id=\"parent\" onclick=\"console.log('parent html')\">parent\n        <div id=\"child\" onclick=\"console.log('child html')\">child</div>\n    </div>\n</div>\n</body>\n\n</html>\n```\n\n2. 什么是事件流，同一个事件有几个阶段？\n3. 如何移除通过HTML属性、element.onclick等注册的事件处理函数？\n## 答案\n### 问题1\n\n首先参考 chrome 浏览器的结果. 先来看点击 child, 输出:  \n\n1. parent html\n2. parent event\n3. parent event capture\n4. body\n5. html\n6. window\n\n奇怪! 这时候不是应该先捕获, capture 在前吗? 别急, 这时候如果调换 parent event 与 parent event capture 的 addEventListener 顺序, 会发现, 输出顺序也变了:\n\n1. parent html\n1. **parent event capture**\n1. **parent event**\n1. body\n1. html\n1. window\n\n其实这时候的输出顺序只和 ```addEventListener``` 的顺序有关. 是否开启 ```capture``` 无关. 因为我们是直接点击了 ```parent```. 对于 ```parent``` 自身而言. 它在整个点击传递过程中处于目标阶段. 并不涉及捕获和冒泡. 同时我们也发现. html 设置的点击是优先于 ```addEventListener``` 的方式的.\n\n我们再来看下点击 child:\n\n1. parent event capture\n1. hild onclick\n1. child event\n1. child event capture\n1. parent html\n1. parent event\n1. body\n1. html\n1. window\n\n首先, child html 没有输出, 因为被 child onclick 覆盖掉了.\n\n第二点, child onclick 的优先级也是高于 ```addEventListener``` 的.\n\n再然后, 点击事件传递过程中, 首先在捕获阶段, 输出了 parent event capture. 然后到达目标阶段. 同理之前点击 parent. 如果此时调换 child event 与 child event capture 的 ```addEventListener``` 顺序. 输出顺序也会改变\n\n最后, 到达冒泡阶段, 由于 html 的优先级高于 ```addEventListener```. 所以被输出. (别忘了, 默认都是开启冒泡)\n\n但是. 如果使用 Safari 浏览器, 则会发现, 点击 parent, 输出:\n\n1. parent event capture\n2. parent html\n3. parent event\n4. body\n5. html\n6. window\n\n点击 child, 输出:\n\n1. parent event capture\n1. child event capture\n1. child onclick\n1. child event\n1. parent html\n1. parent event\n1. body\n1. html\n1. window\n\n会发现, 对于捕获阶段的处理不一样了. 点击目标元素时, 目标元素不仅处于目标阶段, 也处于捕获阶段的终点和冒泡阶段的起点. 所以会进行 ```capture``` 的判断. 所以在代码编写时这里要尤为注意.\n\n[原文地址](https://www.jianshu.com/p/6512139d1d9e)\n\n","source":"_posts/DOM事件流.md","raw":"---\nlayout: '[post]'\ntitle: DOM事件流\ndate: 2019-06-11 18:48:56\ntags: html\n---\n## 什么是事件？\n> 事件, 就是文档或浏览器窗口发生的一些特定的交互瞬间. JavaScript 和 HTML 之间的交互是通过事件实现的. 可以使用事件监听器来监听事件, 以便事件发生时执行相应的代码.\n<!-- more -->\n## 事件流是什么？\n\n当在页面上某个元素触发特定事件时, 比如点击, 除了被点击的目标元素, 所有祖先元素都会触发该事件, 一直到 window.\n\n那这样就出现了一个问题, 是先在目标元素上触发事件, 还是先在祖先元素上触发呢? 这就是事件流的概念.\n\n**事件流是事件在目标元素和祖先元素间的触发顺序**\n\n- **捕获**- Capture - 事件由最顶层逐级向下传播, 直至到达目标元素.\n- **冒泡** - Bubble - 顾名思义, 类似水中冒泡, 从下往上. 事件由第一个被触发的元素接收, 然后逐级向上传播.\n\n后来 w3c 采用折中的方式, 规定先捕获再冒泡平息了战火. 如此一个事件就被分成了三个阶段(是的, 不光是捕获和冒泡):\n\n1. 捕获阶段 - The capture phase - 事件从最顶层元素 window 一直传递到目标元素的父元素.\n2. 目标阶段 - The target phase - 事件到达目标元素. 如果事件指定不冒泡. 那就会在这里中止.\n3. 冒泡阶段 - The bubble phase - 事件从目标元素父元素向上逐级传递直到最顶层元素 window. 及捕获阶段的反方向.\n\n那这里又有一个新的疑问, 既然捕获和冒泡阶段都会触发事件, 那先捕获再冒泡, 岂不是路径上的元素都会触发两次事件?\n\n在 DOM2 中, 事件监听机制提供了一个参数来决定事件是在捕获阶段生效还是在冒泡阶段生效, 接下来简要学习下 ==addEventListener== .\n\n## addEventListener\n**EventTarget.addEventListener()** 方法将指定的监听器注册到目标元素上, 当该对象触发指定的事件时, 指定的回调函数就会被执行. 事件目标可以是一个文档上的元素或任何其他支持事件的对象 (比如 XMLHttpRequest).\n\n它的工作原理是将实现EventListener的函数或对象添加到调用它的 EventTarget 上的指定事件类型的事件侦听器列表中.\n\n#### 语法\n\n```js\ntarget.addEventListener(type, listener[, options]);\ntarget.addEventListener(type, listener[, useCapture]);\ntarget.addEventListener(type, listener[, useCapture, wantsUntrusted  ]);  // Gecko/Mozilla only\n```\n - type: 表示监听事件类型的字符串. 事件列表.\n - listener: 当所监听的事件类型触发时的回调. 会接收到一个事件通知对象.\n - options: 可选. 可用的选项如下:\n - capture: Boolean, 如果是 true, 表示 listener 会在捕获阶段触发. 默认是 false. 冒泡捕获. 所以微软牛逼.\n - once: Boolean, 如果是 true, 表示 listener 在添加之后最多只调用一次.\n - passive: Boolean，如果是, 表示 listener 永远不会调用 preventDefault(). 如果 listener 仍然调用了这个函数, 客户端将会忽略它并抛出一个控制台警告.\n - useCapture: 可选. Boolean, 同 options - capture\n\n> 注意: 对于目标元素上的事件监听器来说, 事件会处于目标阶段, 而不是冒泡阶段或者捕获阶段. 在目标阶段的事件会触发该元素上的所有监听器, 而不在乎这个监听器到底在注册时 useCapture 是 true 还是 false.\n\n## 事件监听添加与移除\n### 事件添加的三种方式\n1. 通过HTML 属性的方式\n```html\n<div onclick=\"console.log('click')\"></div>\n```\n\n2. DOM0 中可以通过js脚本来给指定元素提供事件处理函数，即\n```\nelement.onclick = function // 只会在冒泡阶段生效\n```\n\n3. DOM2 中, 添加了新的事件监听API, 即```addEventListener```, 同时提供了取消监听的 ```removeEventListener(type, handler[, options | useCapture])```. 显然事件处理函数注册后, 要取消监听, ```type/hanlder/useCapture```的一致.\n\n相比第一, 第二种, ```addEventListener```的方式有以下几点优势:\n- 可以为同一个事件注册多个回调函数, 依次触发. 而 DOM0 的方式则会被覆盖掉. 只能添加一种\n- 使用 DOM0 会覆盖 HTML 的方式.\n- 可以通过参数决定监听是在冒泡阶段生效还是在捕获阶段生效.\n- ```element.onclick``` 注册的监听只会在冒泡阶段生效\n\n##### 实例\n\n\n```html\n<div id=\"parent\">\n    <div id=\"child\" onclick=\"console.log('html')\"/>\n</div>\n```\n\n```js\nconst child = document.getElementById('child') \n\nchild.onclick = function () { console.log('DOM0A') } // 覆盖了 HTML 的方式\nchild.onclick = function () { console.log('DOM0B') } // 覆盖了上一条 DOM0A   \n\nchild.addEventLisnter('click', function () { console.log('lisnterA') })\nchild.addEventLisnter('click', function () { console.log('lisnterB') }) // 不会覆盖\n```\n##### 三种方式对应的如何移除:\n\n```js\nchild.setAttributer('onclick', false)\nchild.onclick = null\nchild.removeEventLisnter('设置相同的参数')\n```\n## 问题\n1. 以下代码的输出顺序\n```html\n<html onclick=\"console.log('html')\">\n\n<head>\n    <meta charset=\"UTF-8\">\n\n    <title>Test</title>\n    <script type=\"text/javascript\">\n        window.onload = function() {\n            const parent = document.getElementById(\"parent\");\n            const child = document.getElementById(\"child\");\n\n            child.onclick = function () { console.log('child onclick') };\n\n            // capture 默认为 false, 冒泡\n            parent.addEventListener('click', function () { console.log('parent event') });\n            child.addEventListener('click', function () { console.log('child event') });\n\n            // 捕获\n            parent.addEventListener('click', function () { console.log('parent event capture') }, { capture: true });\n            child.addEventListener('click', function () { console.log('child event capture') }, { capture: true });\n        }\n        window.onclick = function() {\n            console.log('window');\n        }\n    </script>\n</head>\n\n<body onclick=\"console.log('body')\">\n    <div id=\"parent\" onclick=\"console.log('parent html')\">parent\n        <div id=\"child\" onclick=\"console.log('child html')\">child</div>\n    </div>\n</div>\n</body>\n\n</html>\n```\n\n2. 什么是事件流，同一个事件有几个阶段？\n3. 如何移除通过HTML属性、element.onclick等注册的事件处理函数？\n## 答案\n### 问题1\n\n首先参考 chrome 浏览器的结果. 先来看点击 child, 输出:  \n\n1. parent html\n2. parent event\n3. parent event capture\n4. body\n5. html\n6. window\n\n奇怪! 这时候不是应该先捕获, capture 在前吗? 别急, 这时候如果调换 parent event 与 parent event capture 的 addEventListener 顺序, 会发现, 输出顺序也变了:\n\n1. parent html\n1. **parent event capture**\n1. **parent event**\n1. body\n1. html\n1. window\n\n其实这时候的输出顺序只和 ```addEventListener``` 的顺序有关. 是否开启 ```capture``` 无关. 因为我们是直接点击了 ```parent```. 对于 ```parent``` 自身而言. 它在整个点击传递过程中处于目标阶段. 并不涉及捕获和冒泡. 同时我们也发现. html 设置的点击是优先于 ```addEventListener``` 的方式的.\n\n我们再来看下点击 child:\n\n1. parent event capture\n1. hild onclick\n1. child event\n1. child event capture\n1. parent html\n1. parent event\n1. body\n1. html\n1. window\n\n首先, child html 没有输出, 因为被 child onclick 覆盖掉了.\n\n第二点, child onclick 的优先级也是高于 ```addEventListener``` 的.\n\n再然后, 点击事件传递过程中, 首先在捕获阶段, 输出了 parent event capture. 然后到达目标阶段. 同理之前点击 parent. 如果此时调换 child event 与 child event capture 的 ```addEventListener``` 顺序. 输出顺序也会改变\n\n最后, 到达冒泡阶段, 由于 html 的优先级高于 ```addEventListener```. 所以被输出. (别忘了, 默认都是开启冒泡)\n\n但是. 如果使用 Safari 浏览器, 则会发现, 点击 parent, 输出:\n\n1. parent event capture\n2. parent html\n3. parent event\n4. body\n5. html\n6. window\n\n点击 child, 输出:\n\n1. parent event capture\n1. child event capture\n1. child onclick\n1. child event\n1. parent html\n1. parent event\n1. body\n1. html\n1. window\n\n会发现, 对于捕获阶段的处理不一样了. 点击目标元素时, 目标元素不仅处于目标阶段, 也处于捕获阶段的终点和冒泡阶段的起点. 所以会进行 ```capture``` 的判断. 所以在代码编写时这里要尤为注意.\n\n[原文地址](https://www.jianshu.com/p/6512139d1d9e)\n\n","slug":"DOM事件流","published":1,"updated":"2020-03-11T10:49:41.000Z","comments":1,"photos":[],"link":"","_id":"ck9v62x6l0005qqs6huy6hdue","content":"<h2 id=\"什么是事件？\"><a href=\"#什么是事件？\" class=\"headerlink\" title=\"什么是事件？\"></a>什么是事件？</h2><blockquote>\n<p>事件, 就是文档或浏览器窗口发生的一些特定的交互瞬间. JavaScript 和 HTML 之间的交互是通过事件实现的. 可以使用事件监听器来监听事件, 以便事件发生时执行相应的代码.</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"事件流是什么？\"><a href=\"#事件流是什么？\" class=\"headerlink\" title=\"事件流是什么？\"></a>事件流是什么？</h2><p>当在页面上某个元素触发特定事件时, 比如点击, 除了被点击的目标元素, 所有祖先元素都会触发该事件, 一直到 window.</p>\n<p>那这样就出现了一个问题, 是先在目标元素上触发事件, 还是先在祖先元素上触发呢? 这就是事件流的概念.</p>\n<p><strong>事件流是事件在目标元素和祖先元素间的触发顺序</strong></p>\n<ul>\n<li><strong>捕获</strong>- Capture - 事件由最顶层逐级向下传播, 直至到达目标元素.</li>\n<li><strong>冒泡</strong> - Bubble - 顾名思义, 类似水中冒泡, 从下往上. 事件由第一个被触发的元素接收, 然后逐级向上传播.</li>\n</ul>\n<p>后来 w3c 采用折中的方式, 规定先捕获再冒泡平息了战火. 如此一个事件就被分成了三个阶段(是的, 不光是捕获和冒泡):</p>\n<ol>\n<li>捕获阶段 - The capture phase - 事件从最顶层元素 window 一直传递到目标元素的父元素.</li>\n<li>目标阶段 - The target phase - 事件到达目标元素. 如果事件指定不冒泡. 那就会在这里中止.</li>\n<li>冒泡阶段 - The bubble phase - 事件从目标元素父元素向上逐级传递直到最顶层元素 window. 及捕获阶段的反方向.</li>\n</ol>\n<p>那这里又有一个新的疑问, 既然捕获和冒泡阶段都会触发事件, 那先捕获再冒泡, 岂不是路径上的元素都会触发两次事件?</p>\n<p>在 DOM2 中, 事件监听机制提供了一个参数来决定事件是在捕获阶段生效还是在冒泡阶段生效, 接下来简要学习下 ==addEventListener== .</p>\n<h2 id=\"addEventListener\"><a href=\"#addEventListener\" class=\"headerlink\" title=\"addEventListener\"></a>addEventListener</h2><p><strong>EventTarget.addEventListener()</strong> 方法将指定的监听器注册到目标元素上, 当该对象触发指定的事件时, 指定的回调函数就会被执行. 事件目标可以是一个文档上的元素或任何其他支持事件的对象 (比如 XMLHttpRequest).</p>\n<p>它的工作原理是将实现EventListener的函数或对象添加到调用它的 EventTarget 上的指定事件类型的事件侦听器列表中.</p>\n<h4 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">target.addEventListener(type, listener[, options]);</span><br><span class=\"line\">target.addEventListener(type, listener[, useCapture]);</span><br><span class=\"line\">target.addEventListener(type, listener[, useCapture, wantsUntrusted  ]);  <span class=\"comment\">// Gecko/Mozilla only</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>type: 表示监听事件类型的字符串. 事件列表.</li>\n<li>listener: 当所监听的事件类型触发时的回调. 会接收到一个事件通知对象.</li>\n<li>options: 可选. 可用的选项如下:</li>\n<li>capture: Boolean, 如果是 true, 表示 listener 会在捕获阶段触发. 默认是 false. 冒泡捕获. 所以微软牛逼.</li>\n<li>once: Boolean, 如果是 true, 表示 listener 在添加之后最多只调用一次.</li>\n<li>passive: Boolean，如果是, 表示 listener 永远不会调用 preventDefault(). 如果 listener 仍然调用了这个函数, 客户端将会忽略它并抛出一个控制台警告.</li>\n<li>useCapture: 可选. Boolean, 同 options - capture</li>\n</ul>\n<blockquote>\n<p>注意: 对于目标元素上的事件监听器来说, 事件会处于目标阶段, 而不是冒泡阶段或者捕获阶段. 在目标阶段的事件会触发该元素上的所有监听器, 而不在乎这个监听器到底在注册时 useCapture 是 true 还是 false.</p>\n</blockquote>\n<h2 id=\"事件监听添加与移除\"><a href=\"#事件监听添加与移除\" class=\"headerlink\" title=\"事件监听添加与移除\"></a>事件监听添加与移除</h2><h3 id=\"事件添加的三种方式\"><a href=\"#事件添加的三种方式\" class=\"headerlink\" title=\"事件添加的三种方式\"></a>事件添加的三种方式</h3><ol>\n<li><p>通过HTML 属性的方式</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"console.log('click')\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>DOM0 中可以通过js脚本来给指定元素提供事件处理函数，即</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">element.onclick &#x3D; function &#x2F;&#x2F; 只会在冒泡阶段生效</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>DOM2 中, 添加了新的事件监听API, 即<code>addEventListener</code>, 同时提供了取消监听的 <code>removeEventListener(type, handler[, options | useCapture])</code>. 显然事件处理函数注册后, 要取消监听, <code>type/hanlder/useCapture</code>的一致.</p>\n</li>\n</ol>\n<p>相比第一, 第二种, <code>addEventListener</code>的方式有以下几点优势:</p>\n<ul>\n<li>可以为同一个事件注册多个回调函数, 依次触发. 而 DOM0 的方式则会被覆盖掉. 只能添加一种</li>\n<li>使用 DOM0 会覆盖 HTML 的方式.</li>\n<li>可以通过参数决定监听是在冒泡阶段生效还是在捕获阶段生效.</li>\n<li><code>element.onclick</code> 注册的监听只会在冒泡阶段生效</li>\n</ul>\n<h5 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"child\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"console.log('html')\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> child = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'child'</span>) </span><br><span class=\"line\"></span><br><span class=\"line\">child.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'DOM0A'</span>) &#125; <span class=\"comment\">// 覆盖了 HTML 的方式</span></span><br><span class=\"line\">child.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'DOM0B'</span>) &#125; <span class=\"comment\">// 覆盖了上一条 DOM0A   </span></span><br><span class=\"line\"></span><br><span class=\"line\">child.addEventLisnter(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'lisnterA'</span>) &#125;)</span><br><span class=\"line\">child.addEventLisnter(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'lisnterB'</span>) &#125;) <span class=\"comment\">// 不会覆盖</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"三种方式对应的如何移除\"><a href=\"#三种方式对应的如何移除\" class=\"headerlink\" title=\"三种方式对应的如何移除:\"></a>三种方式对应的如何移除:</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">child.setAttributer(<span class=\"string\">'onclick'</span>, <span class=\"literal\">false</span>)</span><br><span class=\"line\">child.onclick = <span class=\"literal\">null</span></span><br><span class=\"line\">child.removeEventLisnter(<span class=\"string\">'设置相同的参数'</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><ol>\n<li><p>以下代码的输出顺序</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"console.log('html')\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Test<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">const</span> parent = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"parent\"</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">const</span> child = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"child\"</span>);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">            child.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'child onclick'</span>) &#125;;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// capture 默认为 false, 冒泡</span></span></span><br><span class=\"line\"><span class=\"javascript\">            parent.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'parent event'</span>) &#125;);</span></span><br><span class=\"line\"><span class=\"javascript\">            child.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'child event'</span>) &#125;);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// 捕获</span></span></span><br><span class=\"line\"><span class=\"javascript\">            parent.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'parent event capture'</span>) &#125;, &#123; <span class=\"attr\">capture</span>: <span class=\"literal\">true</span> &#125;);</span></span><br><span class=\"line\"><span class=\"javascript\">            child.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'child event capture'</span>) &#125;, &#123; <span class=\"attr\">capture</span>: <span class=\"literal\">true</span> &#125;);</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">window</span>.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'window'</span>);</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"console.log('body')\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"parent\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"console.log('parent html')\"</span>&gt;</span>parent</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"child\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"console.log('child html')\"</span>&gt;</span>child<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>什么是事件流，同一个事件有几个阶段？</p>\n</li>\n<li><p>如何移除通过HTML属性、element.onclick等注册的事件处理函数？</p>\n<h2 id=\"答案\"><a href=\"#答案\" class=\"headerlink\" title=\"答案\"></a>答案</h2><h3 id=\"问题1\"><a href=\"#问题1\" class=\"headerlink\" title=\"问题1\"></a>问题1</h3></li>\n</ol>\n<p>首先参考 chrome 浏览器的结果. 先来看点击 child, 输出:  </p>\n<ol>\n<li>parent html</li>\n<li>parent event</li>\n<li>parent event capture</li>\n<li>body</li>\n<li>html</li>\n<li>window</li>\n</ol>\n<p>奇怪! 这时候不是应该先捕获, capture 在前吗? 别急, 这时候如果调换 parent event 与 parent event capture 的 addEventListener 顺序, 会发现, 输出顺序也变了:</p>\n<ol>\n<li>parent html</li>\n<li><strong>parent event capture</strong></li>\n<li><strong>parent event</strong></li>\n<li>body</li>\n<li>html</li>\n<li>window</li>\n</ol>\n<p>其实这时候的输出顺序只和 <code>addEventListener</code> 的顺序有关. 是否开启 <code>capture</code> 无关. 因为我们是直接点击了 <code>parent</code>. 对于 <code>parent</code> 自身而言. 它在整个点击传递过程中处于目标阶段. 并不涉及捕获和冒泡. 同时我们也发现. html 设置的点击是优先于 <code>addEventListener</code> 的方式的.</p>\n<p>我们再来看下点击 child:</p>\n<ol>\n<li>parent event capture</li>\n<li>hild onclick</li>\n<li>child event</li>\n<li>child event capture</li>\n<li>parent html</li>\n<li>parent event</li>\n<li>body</li>\n<li>html</li>\n<li>window</li>\n</ol>\n<p>首先, child html 没有输出, 因为被 child onclick 覆盖掉了.</p>\n<p>第二点, child onclick 的优先级也是高于 <code>addEventListener</code> 的.</p>\n<p>再然后, 点击事件传递过程中, 首先在捕获阶段, 输出了 parent event capture. 然后到达目标阶段. 同理之前点击 parent. 如果此时调换 child event 与 child event capture 的 <code>addEventListener</code> 顺序. 输出顺序也会改变</p>\n<p>最后, 到达冒泡阶段, 由于 html 的优先级高于 <code>addEventListener</code>. 所以被输出. (别忘了, 默认都是开启冒泡)</p>\n<p>但是. 如果使用 Safari 浏览器, 则会发现, 点击 parent, 输出:</p>\n<ol>\n<li>parent event capture</li>\n<li>parent html</li>\n<li>parent event</li>\n<li>body</li>\n<li>html</li>\n<li>window</li>\n</ol>\n<p>点击 child, 输出:</p>\n<ol>\n<li>parent event capture</li>\n<li>child event capture</li>\n<li>child onclick</li>\n<li>child event</li>\n<li>parent html</li>\n<li>parent event</li>\n<li>body</li>\n<li>html</li>\n<li>window</li>\n</ol>\n<p>会发现, 对于捕获阶段的处理不一样了. 点击目标元素时, 目标元素不仅处于目标阶段, 也处于捕获阶段的终点和冒泡阶段的起点. 所以会进行 <code>capture</code> 的判断. 所以在代码编写时这里要尤为注意.</p>\n<p><a href=\"https://www.jianshu.com/p/6512139d1d9e\" target=\"_blank\" rel=\"noopener\">原文地址</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"什么是事件？\"><a href=\"#什么是事件？\" class=\"headerlink\" title=\"什么是事件？\"></a>什么是事件？</h2><blockquote>\n<p>事件, 就是文档或浏览器窗口发生的一些特定的交互瞬间. JavaScript 和 HTML 之间的交互是通过事件实现的. 可以使用事件监听器来监听事件, 以便事件发生时执行相应的代码.</p>\n</blockquote>","more":"<h2 id=\"事件流是什么？\"><a href=\"#事件流是什么？\" class=\"headerlink\" title=\"事件流是什么？\"></a>事件流是什么？</h2><p>当在页面上某个元素触发特定事件时, 比如点击, 除了被点击的目标元素, 所有祖先元素都会触发该事件, 一直到 window.</p>\n<p>那这样就出现了一个问题, 是先在目标元素上触发事件, 还是先在祖先元素上触发呢? 这就是事件流的概念.</p>\n<p><strong>事件流是事件在目标元素和祖先元素间的触发顺序</strong></p>\n<ul>\n<li><strong>捕获</strong>- Capture - 事件由最顶层逐级向下传播, 直至到达目标元素.</li>\n<li><strong>冒泡</strong> - Bubble - 顾名思义, 类似水中冒泡, 从下往上. 事件由第一个被触发的元素接收, 然后逐级向上传播.</li>\n</ul>\n<p>后来 w3c 采用折中的方式, 规定先捕获再冒泡平息了战火. 如此一个事件就被分成了三个阶段(是的, 不光是捕获和冒泡):</p>\n<ol>\n<li>捕获阶段 - The capture phase - 事件从最顶层元素 window 一直传递到目标元素的父元素.</li>\n<li>目标阶段 - The target phase - 事件到达目标元素. 如果事件指定不冒泡. 那就会在这里中止.</li>\n<li>冒泡阶段 - The bubble phase - 事件从目标元素父元素向上逐级传递直到最顶层元素 window. 及捕获阶段的反方向.</li>\n</ol>\n<p>那这里又有一个新的疑问, 既然捕获和冒泡阶段都会触发事件, 那先捕获再冒泡, 岂不是路径上的元素都会触发两次事件?</p>\n<p>在 DOM2 中, 事件监听机制提供了一个参数来决定事件是在捕获阶段生效还是在冒泡阶段生效, 接下来简要学习下 ==addEventListener== .</p>\n<h2 id=\"addEventListener\"><a href=\"#addEventListener\" class=\"headerlink\" title=\"addEventListener\"></a>addEventListener</h2><p><strong>EventTarget.addEventListener()</strong> 方法将指定的监听器注册到目标元素上, 当该对象触发指定的事件时, 指定的回调函数就会被执行. 事件目标可以是一个文档上的元素或任何其他支持事件的对象 (比如 XMLHttpRequest).</p>\n<p>它的工作原理是将实现EventListener的函数或对象添加到调用它的 EventTarget 上的指定事件类型的事件侦听器列表中.</p>\n<h4 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">target.addEventListener(type, listener[, options]);</span><br><span class=\"line\">target.addEventListener(type, listener[, useCapture]);</span><br><span class=\"line\">target.addEventListener(type, listener[, useCapture, wantsUntrusted  ]);  <span class=\"comment\">// Gecko/Mozilla only</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>type: 表示监听事件类型的字符串. 事件列表.</li>\n<li>listener: 当所监听的事件类型触发时的回调. 会接收到一个事件通知对象.</li>\n<li>options: 可选. 可用的选项如下:</li>\n<li>capture: Boolean, 如果是 true, 表示 listener 会在捕获阶段触发. 默认是 false. 冒泡捕获. 所以微软牛逼.</li>\n<li>once: Boolean, 如果是 true, 表示 listener 在添加之后最多只调用一次.</li>\n<li>passive: Boolean，如果是, 表示 listener 永远不会调用 preventDefault(). 如果 listener 仍然调用了这个函数, 客户端将会忽略它并抛出一个控制台警告.</li>\n<li>useCapture: 可选. Boolean, 同 options - capture</li>\n</ul>\n<blockquote>\n<p>注意: 对于目标元素上的事件监听器来说, 事件会处于目标阶段, 而不是冒泡阶段或者捕获阶段. 在目标阶段的事件会触发该元素上的所有监听器, 而不在乎这个监听器到底在注册时 useCapture 是 true 还是 false.</p>\n</blockquote>\n<h2 id=\"事件监听添加与移除\"><a href=\"#事件监听添加与移除\" class=\"headerlink\" title=\"事件监听添加与移除\"></a>事件监听添加与移除</h2><h3 id=\"事件添加的三种方式\"><a href=\"#事件添加的三种方式\" class=\"headerlink\" title=\"事件添加的三种方式\"></a>事件添加的三种方式</h3><ol>\n<li><p>通过HTML 属性的方式</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"console.log('click')\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>DOM0 中可以通过js脚本来给指定元素提供事件处理函数，即</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">element.onclick &#x3D; function &#x2F;&#x2F; 只会在冒泡阶段生效</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>DOM2 中, 添加了新的事件监听API, 即<code>addEventListener</code>, 同时提供了取消监听的 <code>removeEventListener(type, handler[, options | useCapture])</code>. 显然事件处理函数注册后, 要取消监听, <code>type/hanlder/useCapture</code>的一致.</p>\n</li>\n</ol>\n<p>相比第一, 第二种, <code>addEventListener</code>的方式有以下几点优势:</p>\n<ul>\n<li>可以为同一个事件注册多个回调函数, 依次触发. 而 DOM0 的方式则会被覆盖掉. 只能添加一种</li>\n<li>使用 DOM0 会覆盖 HTML 的方式.</li>\n<li>可以通过参数决定监听是在冒泡阶段生效还是在捕获阶段生效.</li>\n<li><code>element.onclick</code> 注册的监听只会在冒泡阶段生效</li>\n</ul>\n<h5 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"child\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"console.log('html')\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> child = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'child'</span>) </span><br><span class=\"line\"></span><br><span class=\"line\">child.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'DOM0A'</span>) &#125; <span class=\"comment\">// 覆盖了 HTML 的方式</span></span><br><span class=\"line\">child.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'DOM0B'</span>) &#125; <span class=\"comment\">// 覆盖了上一条 DOM0A   </span></span><br><span class=\"line\"></span><br><span class=\"line\">child.addEventLisnter(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'lisnterA'</span>) &#125;)</span><br><span class=\"line\">child.addEventLisnter(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'lisnterB'</span>) &#125;) <span class=\"comment\">// 不会覆盖</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"三种方式对应的如何移除\"><a href=\"#三种方式对应的如何移除\" class=\"headerlink\" title=\"三种方式对应的如何移除:\"></a>三种方式对应的如何移除:</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">child.setAttributer(<span class=\"string\">'onclick'</span>, <span class=\"literal\">false</span>)</span><br><span class=\"line\">child.onclick = <span class=\"literal\">null</span></span><br><span class=\"line\">child.removeEventLisnter(<span class=\"string\">'设置相同的参数'</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><ol>\n<li><p>以下代码的输出顺序</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"console.log('html')\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Test<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">const</span> parent = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"parent\"</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">const</span> child = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"child\"</span>);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">            child.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'child onclick'</span>) &#125;;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// capture 默认为 false, 冒泡</span></span></span><br><span class=\"line\"><span class=\"javascript\">            parent.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'parent event'</span>) &#125;);</span></span><br><span class=\"line\"><span class=\"javascript\">            child.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'child event'</span>) &#125;);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// 捕获</span></span></span><br><span class=\"line\"><span class=\"javascript\">            parent.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'parent event capture'</span>) &#125;, &#123; <span class=\"attr\">capture</span>: <span class=\"literal\">true</span> &#125;);</span></span><br><span class=\"line\"><span class=\"javascript\">            child.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'child event capture'</span>) &#125;, &#123; <span class=\"attr\">capture</span>: <span class=\"literal\">true</span> &#125;);</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">window</span>.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'window'</span>);</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"console.log('body')\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"parent\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"console.log('parent html')\"</span>&gt;</span>parent</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"child\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"console.log('child html')\"</span>&gt;</span>child<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>什么是事件流，同一个事件有几个阶段？</p>\n</li>\n<li><p>如何移除通过HTML属性、element.onclick等注册的事件处理函数？</p>\n<h2 id=\"答案\"><a href=\"#答案\" class=\"headerlink\" title=\"答案\"></a>答案</h2><h3 id=\"问题1\"><a href=\"#问题1\" class=\"headerlink\" title=\"问题1\"></a>问题1</h3></li>\n</ol>\n<p>首先参考 chrome 浏览器的结果. 先来看点击 child, 输出:  </p>\n<ol>\n<li>parent html</li>\n<li>parent event</li>\n<li>parent event capture</li>\n<li>body</li>\n<li>html</li>\n<li>window</li>\n</ol>\n<p>奇怪! 这时候不是应该先捕获, capture 在前吗? 别急, 这时候如果调换 parent event 与 parent event capture 的 addEventListener 顺序, 会发现, 输出顺序也变了:</p>\n<ol>\n<li>parent html</li>\n<li><strong>parent event capture</strong></li>\n<li><strong>parent event</strong></li>\n<li>body</li>\n<li>html</li>\n<li>window</li>\n</ol>\n<p>其实这时候的输出顺序只和 <code>addEventListener</code> 的顺序有关. 是否开启 <code>capture</code> 无关. 因为我们是直接点击了 <code>parent</code>. 对于 <code>parent</code> 自身而言. 它在整个点击传递过程中处于目标阶段. 并不涉及捕获和冒泡. 同时我们也发现. html 设置的点击是优先于 <code>addEventListener</code> 的方式的.</p>\n<p>我们再来看下点击 child:</p>\n<ol>\n<li>parent event capture</li>\n<li>hild onclick</li>\n<li>child event</li>\n<li>child event capture</li>\n<li>parent html</li>\n<li>parent event</li>\n<li>body</li>\n<li>html</li>\n<li>window</li>\n</ol>\n<p>首先, child html 没有输出, 因为被 child onclick 覆盖掉了.</p>\n<p>第二点, child onclick 的优先级也是高于 <code>addEventListener</code> 的.</p>\n<p>再然后, 点击事件传递过程中, 首先在捕获阶段, 输出了 parent event capture. 然后到达目标阶段. 同理之前点击 parent. 如果此时调换 child event 与 child event capture 的 <code>addEventListener</code> 顺序. 输出顺序也会改变</p>\n<p>最后, 到达冒泡阶段, 由于 html 的优先级高于 <code>addEventListener</code>. 所以被输出. (别忘了, 默认都是开启冒泡)</p>\n<p>但是. 如果使用 Safari 浏览器, 则会发现, 点击 parent, 输出:</p>\n<ol>\n<li>parent event capture</li>\n<li>parent html</li>\n<li>parent event</li>\n<li>body</li>\n<li>html</li>\n<li>window</li>\n</ol>\n<p>点击 child, 输出:</p>\n<ol>\n<li>parent event capture</li>\n<li>child event capture</li>\n<li>child onclick</li>\n<li>child event</li>\n<li>parent html</li>\n<li>parent event</li>\n<li>body</li>\n<li>html</li>\n<li>window</li>\n</ol>\n<p>会发现, 对于捕获阶段的处理不一样了. 点击目标元素时, 目标元素不仅处于目标阶段, 也处于捕获阶段的终点和冒泡阶段的起点. 所以会进行 <code>capture</code> 的判断. 所以在代码编写时这里要尤为注意.</p>\n<p><a href=\"https://www.jianshu.com/p/6512139d1d9e\" target=\"_blank\" rel=\"noopener\">原文地址</a></p>"},{"layout":"[post]","title":"DOM级别与DOM事件","date":"2019-06-01T02:58:39.000Z","_content":"事件是javascript和HTML交互基础, 任何文档或者浏览器窗口发生的交互, 都要通过绑定事件进行交互;比如鼠标点击事件、敲击键盘事件等。这样的事件行为都是前端DOM事件的组成部分，不同的DOM事件会有不同的触发条件和触发效果。\n<!-- more -->\n## DOM级别与DOM事件\nDOM级别一共可以分为四个级别：DOM0级、DOM1级、DOM2级和DOM3级。而DOM事件分为3个级别：DOM0级事件处理，DOM2级事件处理和DOM3级事件处理。\n\n有人可能会疑惑，为什么没有DOM1级事件处理呢？因为1级DOM标准并没有定义事件相关的内容，所以没有所谓的1级DOM事件模型。\n\n### HTML的事件处理程序\nHTML事件处理程序，也是最早的一种事件处理方式。\n\n```js\n <button type=\"button\" onclick=\"showFn()\"></button>\n  function showFn() {\n      alert('Hello World');\n  }\n```\n以上的代码，我们通过直接在HTML代码里面定义了一个 onclick属性触发showfu这样的事件处理程序最大的缺点就是HTML和JS耦合太强，我们如果需要修改函数名就必须修改两个地方，优点是不需要操作DOM来完成事件的绑定。\n\n### DOM0级事件\nDOM0级处理事件就是将一个函数赋值给一个事件处理属性。\n\n```js\n <button id=\"btn\" type=\"button\"></button>\n    var btn = document.getElementById('btn');\n    btn.onclick = function() {\n        console.log('Hello World');\n    }\n```\n以上的代码我们给button定义了一个id 通过js原生的api获取按钮\n将一个函数赋值给了一个事件处理属性onclick 这样的方法就是DOM0级\n处理事件的体现。我们可以通过给事件处理属性赋值null来解绑事件。\n\n**DOM0级事件处理程序的缺点在于一个处理程序无法同时绑定多个处理函数，比如我还想再点击按钮事件上加上另外一个函数。**\n\n### DOM2级事件\nDOM2级事件在DOM0级时间段额基础上弥补了一个处理处理程序\n无法同时绑定多个处理函数的缺点。允许给一个程序添加多个处理函数。\n\n```js\n <button id=\"btn\" type=\"button\"></button>\n    var btn = document.getElementById('btn');    \n    function showFn() {\n        alert('Hello World');\n    }    \n    btn.addEventListener('click', showFn, false);\n    // btn.removeEventListener('click', showFn, false); 解绑事件 \n```\nDOM2级事件定义了addEventListener 和 removeEventListener两个方法，分别用来绑定和解绑事件，方法中包含三个参数，分别是绑定的事件处理的属性名称（没有on）处理函数和是否在捕获时候执行事件处理函数如果我们还需要添加一个鼠标的移入的方法，只需要：\n\n\n```js\n btn.addEventlistener('mouseover',showfn,false)\n```\n这样，点击按钮和鼠标移入时候都将触发showfn的方法。\n\n需要注意的是IE8以下版本不支持 addEventlistener 和 removeEventListerner\n需要使用attachEvent和detachEvent实现：\n\n```js\n    btn.attachEvent('onclick', showFn); // 绑定事件 \n    btn.detachEvent('onclick', showFn); // 解绑事件\n```\n这里我们不需要传入第三个参数，因为IE8以下版本只支持冒泡型事件。\n### DOM3级事件\n\n```\nDOM3级事件是在DOM2级事件的基础上添加很多事件类型。\nUI事件，当用户与页面上的元素交互时触发，如：load、scroll\n焦点事件，当元素获得或失去焦点时触发，如：blur、focus\n鼠标事件，当用户通过鼠标在页面执行操作时触发如：dbclick、mouseup\n滚轮事件，当使用鼠标滚轮或类似设备时触发，如：mousewheel\n文本事件，当在文档中输入文本时触发，如：textInput\n键盘事件，当用户通过键盘在页面上执行操作时触发，如：keydown、keypress\n合成事件，当为IME（输入法编辑器）输入字符时触发，如：compositionstart\n变动事件，当底层DOM结构发生变化时触发，如：DOMsubtreeModified\n同时DOM3级事件也允许使用者自定义一些事件。\n```\n转载链接:[DOM级别与DOM事件](https://www.jianshu.com/p/622d994906f7)","source":"_posts/DOM级别与DOM事件.md","raw":"---\nlayout: '[post]'\ntitle: DOM级别与DOM事件\ndate: 2019-06-01 10:58:39\ntags: html\n---\n事件是javascript和HTML交互基础, 任何文档或者浏览器窗口发生的交互, 都要通过绑定事件进行交互;比如鼠标点击事件、敲击键盘事件等。这样的事件行为都是前端DOM事件的组成部分，不同的DOM事件会有不同的触发条件和触发效果。\n<!-- more -->\n## DOM级别与DOM事件\nDOM级别一共可以分为四个级别：DOM0级、DOM1级、DOM2级和DOM3级。而DOM事件分为3个级别：DOM0级事件处理，DOM2级事件处理和DOM3级事件处理。\n\n有人可能会疑惑，为什么没有DOM1级事件处理呢？因为1级DOM标准并没有定义事件相关的内容，所以没有所谓的1级DOM事件模型。\n\n### HTML的事件处理程序\nHTML事件处理程序，也是最早的一种事件处理方式。\n\n```js\n <button type=\"button\" onclick=\"showFn()\"></button>\n  function showFn() {\n      alert('Hello World');\n  }\n```\n以上的代码，我们通过直接在HTML代码里面定义了一个 onclick属性触发showfu这样的事件处理程序最大的缺点就是HTML和JS耦合太强，我们如果需要修改函数名就必须修改两个地方，优点是不需要操作DOM来完成事件的绑定。\n\n### DOM0级事件\nDOM0级处理事件就是将一个函数赋值给一个事件处理属性。\n\n```js\n <button id=\"btn\" type=\"button\"></button>\n    var btn = document.getElementById('btn');\n    btn.onclick = function() {\n        console.log('Hello World');\n    }\n```\n以上的代码我们给button定义了一个id 通过js原生的api获取按钮\n将一个函数赋值给了一个事件处理属性onclick 这样的方法就是DOM0级\n处理事件的体现。我们可以通过给事件处理属性赋值null来解绑事件。\n\n**DOM0级事件处理程序的缺点在于一个处理程序无法同时绑定多个处理函数，比如我还想再点击按钮事件上加上另外一个函数。**\n\n### DOM2级事件\nDOM2级事件在DOM0级时间段额基础上弥补了一个处理处理程序\n无法同时绑定多个处理函数的缺点。允许给一个程序添加多个处理函数。\n\n```js\n <button id=\"btn\" type=\"button\"></button>\n    var btn = document.getElementById('btn');    \n    function showFn() {\n        alert('Hello World');\n    }    \n    btn.addEventListener('click', showFn, false);\n    // btn.removeEventListener('click', showFn, false); 解绑事件 \n```\nDOM2级事件定义了addEventListener 和 removeEventListener两个方法，分别用来绑定和解绑事件，方法中包含三个参数，分别是绑定的事件处理的属性名称（没有on）处理函数和是否在捕获时候执行事件处理函数如果我们还需要添加一个鼠标的移入的方法，只需要：\n\n\n```js\n btn.addEventlistener('mouseover',showfn,false)\n```\n这样，点击按钮和鼠标移入时候都将触发showfn的方法。\n\n需要注意的是IE8以下版本不支持 addEventlistener 和 removeEventListerner\n需要使用attachEvent和detachEvent实现：\n\n```js\n    btn.attachEvent('onclick', showFn); // 绑定事件 \n    btn.detachEvent('onclick', showFn); // 解绑事件\n```\n这里我们不需要传入第三个参数，因为IE8以下版本只支持冒泡型事件。\n### DOM3级事件\n\n```\nDOM3级事件是在DOM2级事件的基础上添加很多事件类型。\nUI事件，当用户与页面上的元素交互时触发，如：load、scroll\n焦点事件，当元素获得或失去焦点时触发，如：blur、focus\n鼠标事件，当用户通过鼠标在页面执行操作时触发如：dbclick、mouseup\n滚轮事件，当使用鼠标滚轮或类似设备时触发，如：mousewheel\n文本事件，当在文档中输入文本时触发，如：textInput\n键盘事件，当用户通过键盘在页面上执行操作时触发，如：keydown、keypress\n合成事件，当为IME（输入法编辑器）输入字符时触发，如：compositionstart\n变动事件，当底层DOM结构发生变化时触发，如：DOMsubtreeModified\n同时DOM3级事件也允许使用者自定义一些事件。\n```\n转载链接:[DOM级别与DOM事件](https://www.jianshu.com/p/622d994906f7)","slug":"DOM级别与DOM事件","published":1,"updated":"2020-03-05T03:23:00.000Z","comments":1,"photos":[],"link":"","_id":"ck9v62x6p0007qqs6ebw79i17","content":"<p>事件是javascript和HTML交互基础, 任何文档或者浏览器窗口发生的交互, 都要通过绑定事件进行交互;比如鼠标点击事件、敲击键盘事件等。这样的事件行为都是前端DOM事件的组成部分，不同的DOM事件会有不同的触发条件和触发效果。</p>\n<a id=\"more\"></a>\n<h2 id=\"DOM级别与DOM事件\"><a href=\"#DOM级别与DOM事件\" class=\"headerlink\" title=\"DOM级别与DOM事件\"></a>DOM级别与DOM事件</h2><p>DOM级别一共可以分为四个级别：DOM0级、DOM1级、DOM2级和DOM3级。而DOM事件分为3个级别：DOM0级事件处理，DOM2级事件处理和DOM3级事件处理。</p>\n<p>有人可能会疑惑，为什么没有DOM1级事件处理呢？因为1级DOM标准并没有定义事件相关的内容，所以没有所谓的1级DOM事件模型。</p>\n<h3 id=\"HTML的事件处理程序\"><a href=\"#HTML的事件处理程序\" class=\"headerlink\" title=\"HTML的事件处理程序\"></a>HTML的事件处理程序</h3><p>HTML事件处理程序，也是最早的一种事件处理方式。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button type=<span class=\"string\">\"button\"</span> onclick=<span class=\"string\">\"showFn()\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showFn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">     alert(<span class=\"string\">'Hello World'</span>);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>以上的代码，我们通过直接在HTML代码里面定义了一个 onclick属性触发showfu这样的事件处理程序最大的缺点就是HTML和JS耦合太强，我们如果需要修改函数名就必须修改两个地方，优点是不需要操作DOM来完成事件的绑定。</p>\n<h3 id=\"DOM0级事件\"><a href=\"#DOM0级事件\" class=\"headerlink\" title=\"DOM0级事件\"></a>DOM0级事件</h3><p>DOM0级处理事件就是将一个函数赋值给一个事件处理属性。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button id=<span class=\"string\">\"btn\"</span> type=<span class=\"string\">\"button\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">   <span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'btn'</span>);</span><br><span class=\"line\">   btn.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">       <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello World'</span>);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>以上的代码我们给button定义了一个id 通过js原生的api获取按钮<br>将一个函数赋值给了一个事件处理属性onclick 这样的方法就是DOM0级<br>处理事件的体现。我们可以通过给事件处理属性赋值null来解绑事件。</p>\n<p><strong>DOM0级事件处理程序的缺点在于一个处理程序无法同时绑定多个处理函数，比如我还想再点击按钮事件上加上另外一个函数。</strong></p>\n<h3 id=\"DOM2级事件\"><a href=\"#DOM2级事件\" class=\"headerlink\" title=\"DOM2级事件\"></a>DOM2级事件</h3><p>DOM2级事件在DOM0级时间段额基础上弥补了一个处理处理程序<br>无法同时绑定多个处理函数的缺点。允许给一个程序添加多个处理函数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button id=<span class=\"string\">\"btn\"</span> type=<span class=\"string\">\"button\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">   <span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'btn'</span>);    </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showFn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">       alert(<span class=\"string\">'Hello World'</span>);</span><br><span class=\"line\">   &#125;    </span><br><span class=\"line\">   btn.addEventListener(<span class=\"string\">'click'</span>, showFn, <span class=\"literal\">false</span>);</span><br><span class=\"line\">   <span class=\"comment\">// btn.removeEventListener('click', showFn, false); 解绑事件</span></span><br></pre></td></tr></table></figure>\n<p>DOM2级事件定义了addEventListener 和 removeEventListener两个方法，分别用来绑定和解绑事件，方法中包含三个参数，分别是绑定的事件处理的属性名称（没有on）处理函数和是否在捕获时候执行事件处理函数如果我们还需要添加一个鼠标的移入的方法，只需要：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">btn.addEventlistener(<span class=\"string\">'mouseover'</span>,showfn,<span class=\"literal\">false</span>)</span><br></pre></td></tr></table></figure>\n<p>这样，点击按钮和鼠标移入时候都将触发showfn的方法。</p>\n<p>需要注意的是IE8以下版本不支持 addEventlistener 和 removeEventListerner<br>需要使用attachEvent和detachEvent实现：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">btn.attachEvent(<span class=\"string\">'onclick'</span>, showFn); <span class=\"comment\">// 绑定事件 </span></span><br><span class=\"line\">btn.detachEvent(<span class=\"string\">'onclick'</span>, showFn); <span class=\"comment\">// 解绑事件</span></span><br></pre></td></tr></table></figure>\n<p>这里我们不需要传入第三个参数，因为IE8以下版本只支持冒泡型事件。</p>\n<h3 id=\"DOM3级事件\"><a href=\"#DOM3级事件\" class=\"headerlink\" title=\"DOM3级事件\"></a>DOM3级事件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DOM3级事件是在DOM2级事件的基础上添加很多事件类型。</span><br><span class=\"line\">UI事件，当用户与页面上的元素交互时触发，如：load、scroll</span><br><span class=\"line\">焦点事件，当元素获得或失去焦点时触发，如：blur、focus</span><br><span class=\"line\">鼠标事件，当用户通过鼠标在页面执行操作时触发如：dbclick、mouseup</span><br><span class=\"line\">滚轮事件，当使用鼠标滚轮或类似设备时触发，如：mousewheel</span><br><span class=\"line\">文本事件，当在文档中输入文本时触发，如：textInput</span><br><span class=\"line\">键盘事件，当用户通过键盘在页面上执行操作时触发，如：keydown、keypress</span><br><span class=\"line\">合成事件，当为IME（输入法编辑器）输入字符时触发，如：compositionstart</span><br><span class=\"line\">变动事件，当底层DOM结构发生变化时触发，如：DOMsubtreeModified</span><br><span class=\"line\">同时DOM3级事件也允许使用者自定义一些事件。</span><br></pre></td></tr></table></figure>\n<p>转载链接:<a href=\"https://www.jianshu.com/p/622d994906f7\" target=\"_blank\" rel=\"noopener\">DOM级别与DOM事件</a></p>\n","site":{"data":{}},"excerpt":"<p>事件是javascript和HTML交互基础, 任何文档或者浏览器窗口发生的交互, 都要通过绑定事件进行交互;比如鼠标点击事件、敲击键盘事件等。这样的事件行为都是前端DOM事件的组成部分，不同的DOM事件会有不同的触发条件和触发效果。</p>","more":"<h2 id=\"DOM级别与DOM事件\"><a href=\"#DOM级别与DOM事件\" class=\"headerlink\" title=\"DOM级别与DOM事件\"></a>DOM级别与DOM事件</h2><p>DOM级别一共可以分为四个级别：DOM0级、DOM1级、DOM2级和DOM3级。而DOM事件分为3个级别：DOM0级事件处理，DOM2级事件处理和DOM3级事件处理。</p>\n<p>有人可能会疑惑，为什么没有DOM1级事件处理呢？因为1级DOM标准并没有定义事件相关的内容，所以没有所谓的1级DOM事件模型。</p>\n<h3 id=\"HTML的事件处理程序\"><a href=\"#HTML的事件处理程序\" class=\"headerlink\" title=\"HTML的事件处理程序\"></a>HTML的事件处理程序</h3><p>HTML事件处理程序，也是最早的一种事件处理方式。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button type=<span class=\"string\">\"button\"</span> onclick=<span class=\"string\">\"showFn()\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showFn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">     alert(<span class=\"string\">'Hello World'</span>);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>以上的代码，我们通过直接在HTML代码里面定义了一个 onclick属性触发showfu这样的事件处理程序最大的缺点就是HTML和JS耦合太强，我们如果需要修改函数名就必须修改两个地方，优点是不需要操作DOM来完成事件的绑定。</p>\n<h3 id=\"DOM0级事件\"><a href=\"#DOM0级事件\" class=\"headerlink\" title=\"DOM0级事件\"></a>DOM0级事件</h3><p>DOM0级处理事件就是将一个函数赋值给一个事件处理属性。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button id=<span class=\"string\">\"btn\"</span> type=<span class=\"string\">\"button\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">   <span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'btn'</span>);</span><br><span class=\"line\">   btn.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">       <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello World'</span>);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>以上的代码我们给button定义了一个id 通过js原生的api获取按钮<br>将一个函数赋值给了一个事件处理属性onclick 这样的方法就是DOM0级<br>处理事件的体现。我们可以通过给事件处理属性赋值null来解绑事件。</p>\n<p><strong>DOM0级事件处理程序的缺点在于一个处理程序无法同时绑定多个处理函数，比如我还想再点击按钮事件上加上另外一个函数。</strong></p>\n<h3 id=\"DOM2级事件\"><a href=\"#DOM2级事件\" class=\"headerlink\" title=\"DOM2级事件\"></a>DOM2级事件</h3><p>DOM2级事件在DOM0级时间段额基础上弥补了一个处理处理程序<br>无法同时绑定多个处理函数的缺点。允许给一个程序添加多个处理函数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button id=<span class=\"string\">\"btn\"</span> type=<span class=\"string\">\"button\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">   <span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'btn'</span>);    </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showFn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">       alert(<span class=\"string\">'Hello World'</span>);</span><br><span class=\"line\">   &#125;    </span><br><span class=\"line\">   btn.addEventListener(<span class=\"string\">'click'</span>, showFn, <span class=\"literal\">false</span>);</span><br><span class=\"line\">   <span class=\"comment\">// btn.removeEventListener('click', showFn, false); 解绑事件</span></span><br></pre></td></tr></table></figure>\n<p>DOM2级事件定义了addEventListener 和 removeEventListener两个方法，分别用来绑定和解绑事件，方法中包含三个参数，分别是绑定的事件处理的属性名称（没有on）处理函数和是否在捕获时候执行事件处理函数如果我们还需要添加一个鼠标的移入的方法，只需要：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">btn.addEventlistener(<span class=\"string\">'mouseover'</span>,showfn,<span class=\"literal\">false</span>)</span><br></pre></td></tr></table></figure>\n<p>这样，点击按钮和鼠标移入时候都将触发showfn的方法。</p>\n<p>需要注意的是IE8以下版本不支持 addEventlistener 和 removeEventListerner<br>需要使用attachEvent和detachEvent实现：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">btn.attachEvent(<span class=\"string\">'onclick'</span>, showFn); <span class=\"comment\">// 绑定事件 </span></span><br><span class=\"line\">btn.detachEvent(<span class=\"string\">'onclick'</span>, showFn); <span class=\"comment\">// 解绑事件</span></span><br></pre></td></tr></table></figure>\n<p>这里我们不需要传入第三个参数，因为IE8以下版本只支持冒泡型事件。</p>\n<h3 id=\"DOM3级事件\"><a href=\"#DOM3级事件\" class=\"headerlink\" title=\"DOM3级事件\"></a>DOM3级事件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DOM3级事件是在DOM2级事件的基础上添加很多事件类型。</span><br><span class=\"line\">UI事件，当用户与页面上的元素交互时触发，如：load、scroll</span><br><span class=\"line\">焦点事件，当元素获得或失去焦点时触发，如：blur、focus</span><br><span class=\"line\">鼠标事件，当用户通过鼠标在页面执行操作时触发如：dbclick、mouseup</span><br><span class=\"line\">滚轮事件，当使用鼠标滚轮或类似设备时触发，如：mousewheel</span><br><span class=\"line\">文本事件，当在文档中输入文本时触发，如：textInput</span><br><span class=\"line\">键盘事件，当用户通过键盘在页面上执行操作时触发，如：keydown、keypress</span><br><span class=\"line\">合成事件，当为IME（输入法编辑器）输入字符时触发，如：compositionstart</span><br><span class=\"line\">变动事件，当底层DOM结构发生变化时触发，如：DOMsubtreeModified</span><br><span class=\"line\">同时DOM3级事件也允许使用者自定义一些事件。</span><br></pre></td></tr></table></figure>\n<p>转载链接:<a href=\"https://www.jianshu.com/p/622d994906f7\" target=\"_blank\" rel=\"noopener\">DOM级别与DOM事件</a></p>"},{"layout":"[post]","title":"Event事件常见应用","date":"2019-06-25T09:20:41.000Z","_content":"## Event 对象\nW3C的说法是：\n\nEvent 对象代表事件的状态，比如事件在其中发生的元素、键盘按键的状态、鼠标的位置、鼠标按钮的状态。\n\n事件通常与函数结合使用，函数不会在事件发生前被执行！\n<!-- more -->\n## 几种常见事件\n**event.preventDefault()** :阻止默认事件  \n\n**event.stopPropagation()**:阻止冒泡  \n\n**event.stopImmediatePropagation()**:按优先级阻止执行\n\n```html\n<!DOCTYPE html>\n<html>\n    <head>\n        <style>\n            p { height: 30px; width: 150px; background-color: #ccf; }\n            div {height: 30px; width: 150px; background-color: #cfc; }\n        </style>\n    </head>\n    <body>\n        <div>\n            <p>paragraph</p>\n        </div>\n        <script>\n            const p = document.querySelector('p')\n            p.addEventListener(\"click\", (event) => {\n              alert(\"我是p元素上被绑定的第一个监听函数\");\n            }, false);\n\n            p.addEventListener(\"click\", (event) => {\n              alert(\"我是p元素上被绑定的第二个监听函数\");\n              event.stopImmediatePropagation();\n              // 执行stopImmediatePropagation方法,阻止click事件冒泡,并且阻止p元素上绑定的其他click事件的事件监听函数的执行.\n            }, false);\n\n            p.addEventListener(\"click\",(event) => {\n              alert(\"我是p元素上被绑定的第三个监听函数\");\n              // 该监听函数排在上个函数后面，该函数不会被执行\n            }, false);\n\n            document.querySelector(\"div\").addEventListener(\"click\", (event) => {\n              alert(\"我是div元素,我是p元素的上层元素\");\n              // p元素的click事件没有向上冒泡，该函数不会被执行\n            }, false);\n        </script>\n    </body>\n</html>\n```\n\n**event.currentTarget**:当前绑定的事件（父级元素）\n\n**event.target**:绑定的事件\n\n以上两者主要用于事件委托中。  \n**事件委托就是利用冒泡的原理，将事件加到 父元素 或 祖先元素上，触发执行效果。**\n\n```html\n<ul id=\"myLinks\">\n  <li id=\"goSomewhere\">Go somewhere</li>\n  <li id=\"doSomething\">Do something</li>\n  <li id=\"sayHi\">Say hi</li>\n</ul>\n```\n正常情况下添加点击事件\n\n```js\nvar item1 = document.getElementById(\"goSomewhere\");\n    var item2 = document.getElementById(\"doSomething\");\n    var item3 = document.getElementById(\"sayHi\");\n \n    item1.onclick = function() {\n      location.href = \"http://www.baidu.com\";\n    };\n    item2.onclick = function() {\n      document.title = \"事件委托\";\n    };\n    item3.onclick = function() {\n      alert(\"hi\");\n    };\n\n```\n使用事件委托\n\n```js\n document.addEventListener(\"click\", function (event) {\n      var target = event.target;\n      switch (target.id) {\n        case \"doSomething\":\n          document.title = \"事件委托\";\n          break;\n        case \"goSomewhere\":\n          location.href = \"http://www.baidu.com\";\n          break;\n        case \"sayHi\": alert(\"hi\");\n          break;\n      }\n    })\n```\n## 自定义事件\n\n```js\nvar eventCus = new Event('custome');\nev.addEventListener('custome',function(){\n    console.log('自定义事件');\n});\nev.dispatchEvent(eve);\n```\n自定义事件也可以使用```customEvent```\n\n区别在于能够传递数据\n\n\n```js\nfunction createEvent(params, eventName = 'mock-event') {\n    return new CustomEvent(eventName, { detail: params });\n}\n\nconst event = createEvent({ id: '0010' });\n```\n这里值得注意，需要把想要传递的参数包裹在一个包含detail属性的对象，否则传递的参数不会被挂载？（这里不太确定，我试过传id和params都不会生效）\n\n```js\n window.addEventListener('mock-event', ({ detail: { id } }) => {\n            console.log('id',id) // 会在控制台打印0010\n        });\n```\n## DOM事件流的补充\n\n```html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\" />\n\t\t<title>DOM事件流</title>\n\t</head>\n\n\t<body>\n\t\t<div id=\"ev\">\n\t\t\t<style>\n\t\t\t\t#ev {\n\t\t\t\t\twidth: 300px;\n\t\t\t\t\theight: 100px;\n\t\t\t\t\tbackground-color: red;\n\t\t\t\t\tcolor: #fff;\n\t\t\t\t\ttext-align: center;\n\t\t\t\t\tline-height: 100px;\n\t\t\t\t}\n\t\t\t</style>\n\t\t\t目标元素\n\t\t</div>\n\t\t<script type=\"text/javascript\">\n\t\t\tvar ev = document.getElementById('ev');\n\t\t\twindow.addEventListener(\n\t\t\t\t'click',\n\t\t\t\tfunction() {\n\t\t\t\t\tconsole.log('window捕获阶段');\n\t\t\t\t},\n\t\t\t\ttrue\n\t\t\t);\n\t\t\tdocument.addEventListener(\n\t\t\t\t'click',\n\t\t\t\tfunction() {\n\t\t\t\t\tconsole.log('doc捕获阶段');\n\t\t\t\t},\n\t\t\t\ttrue\n\t\t\t);\n\t\t\tdocument.documentElement.addEventListener(\n\t\t\t\t'click',\n\t\t\t\tfunction() {\n\t\t\t\t\tconsole.log('html捕获阶段');\n\t\t\t\t},\n\t\t\t\ttrue\n\t\t\t);\n\t\t\tdocument.body.addEventListener(\n\t\t\t\t'click',\n\t\t\t\tfunction() {\n\t\t\t\t\tconsole.log('body捕获阶段');\n\t\t\t\t},\n\t\t\t\ttrue\n\t\t\t);\n\t\t\tev.addEventListener(\n\t\t\t\t'click',\n\t\t\t\tfunction() {\n\t\t\t\t\tconsole.log('div捕获阶段');\n\t\t\t\t},\n\t\t\t\ttrue\n            );\n            var eve=new Event('test');\n            ev.addEventListener('test',function(){\n                console.log('自定义事件');\n            });\n            ev.dispatchEvent(eve);\n\t\t</script>\n\t</body>\n</html>\n\n```\n\n\n","source":"_posts/Event事件常见应用.md","raw":"---\nlayout: '[post]'\ntitle: Event事件常见应用\ndate: 2019-06-25 17:20:41\ntags: html\n---\n## Event 对象\nW3C的说法是：\n\nEvent 对象代表事件的状态，比如事件在其中发生的元素、键盘按键的状态、鼠标的位置、鼠标按钮的状态。\n\n事件通常与函数结合使用，函数不会在事件发生前被执行！\n<!-- more -->\n## 几种常见事件\n**event.preventDefault()** :阻止默认事件  \n\n**event.stopPropagation()**:阻止冒泡  \n\n**event.stopImmediatePropagation()**:按优先级阻止执行\n\n```html\n<!DOCTYPE html>\n<html>\n    <head>\n        <style>\n            p { height: 30px; width: 150px; background-color: #ccf; }\n            div {height: 30px; width: 150px; background-color: #cfc; }\n        </style>\n    </head>\n    <body>\n        <div>\n            <p>paragraph</p>\n        </div>\n        <script>\n            const p = document.querySelector('p')\n            p.addEventListener(\"click\", (event) => {\n              alert(\"我是p元素上被绑定的第一个监听函数\");\n            }, false);\n\n            p.addEventListener(\"click\", (event) => {\n              alert(\"我是p元素上被绑定的第二个监听函数\");\n              event.stopImmediatePropagation();\n              // 执行stopImmediatePropagation方法,阻止click事件冒泡,并且阻止p元素上绑定的其他click事件的事件监听函数的执行.\n            }, false);\n\n            p.addEventListener(\"click\",(event) => {\n              alert(\"我是p元素上被绑定的第三个监听函数\");\n              // 该监听函数排在上个函数后面，该函数不会被执行\n            }, false);\n\n            document.querySelector(\"div\").addEventListener(\"click\", (event) => {\n              alert(\"我是div元素,我是p元素的上层元素\");\n              // p元素的click事件没有向上冒泡，该函数不会被执行\n            }, false);\n        </script>\n    </body>\n</html>\n```\n\n**event.currentTarget**:当前绑定的事件（父级元素）\n\n**event.target**:绑定的事件\n\n以上两者主要用于事件委托中。  \n**事件委托就是利用冒泡的原理，将事件加到 父元素 或 祖先元素上，触发执行效果。**\n\n```html\n<ul id=\"myLinks\">\n  <li id=\"goSomewhere\">Go somewhere</li>\n  <li id=\"doSomething\">Do something</li>\n  <li id=\"sayHi\">Say hi</li>\n</ul>\n```\n正常情况下添加点击事件\n\n```js\nvar item1 = document.getElementById(\"goSomewhere\");\n    var item2 = document.getElementById(\"doSomething\");\n    var item3 = document.getElementById(\"sayHi\");\n \n    item1.onclick = function() {\n      location.href = \"http://www.baidu.com\";\n    };\n    item2.onclick = function() {\n      document.title = \"事件委托\";\n    };\n    item3.onclick = function() {\n      alert(\"hi\");\n    };\n\n```\n使用事件委托\n\n```js\n document.addEventListener(\"click\", function (event) {\n      var target = event.target;\n      switch (target.id) {\n        case \"doSomething\":\n          document.title = \"事件委托\";\n          break;\n        case \"goSomewhere\":\n          location.href = \"http://www.baidu.com\";\n          break;\n        case \"sayHi\": alert(\"hi\");\n          break;\n      }\n    })\n```\n## 自定义事件\n\n```js\nvar eventCus = new Event('custome');\nev.addEventListener('custome',function(){\n    console.log('自定义事件');\n});\nev.dispatchEvent(eve);\n```\n自定义事件也可以使用```customEvent```\n\n区别在于能够传递数据\n\n\n```js\nfunction createEvent(params, eventName = 'mock-event') {\n    return new CustomEvent(eventName, { detail: params });\n}\n\nconst event = createEvent({ id: '0010' });\n```\n这里值得注意，需要把想要传递的参数包裹在一个包含detail属性的对象，否则传递的参数不会被挂载？（这里不太确定，我试过传id和params都不会生效）\n\n```js\n window.addEventListener('mock-event', ({ detail: { id } }) => {\n            console.log('id',id) // 会在控制台打印0010\n        });\n```\n## DOM事件流的补充\n\n```html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\" />\n\t\t<title>DOM事件流</title>\n\t</head>\n\n\t<body>\n\t\t<div id=\"ev\">\n\t\t\t<style>\n\t\t\t\t#ev {\n\t\t\t\t\twidth: 300px;\n\t\t\t\t\theight: 100px;\n\t\t\t\t\tbackground-color: red;\n\t\t\t\t\tcolor: #fff;\n\t\t\t\t\ttext-align: center;\n\t\t\t\t\tline-height: 100px;\n\t\t\t\t}\n\t\t\t</style>\n\t\t\t目标元素\n\t\t</div>\n\t\t<script type=\"text/javascript\">\n\t\t\tvar ev = document.getElementById('ev');\n\t\t\twindow.addEventListener(\n\t\t\t\t'click',\n\t\t\t\tfunction() {\n\t\t\t\t\tconsole.log('window捕获阶段');\n\t\t\t\t},\n\t\t\t\ttrue\n\t\t\t);\n\t\t\tdocument.addEventListener(\n\t\t\t\t'click',\n\t\t\t\tfunction() {\n\t\t\t\t\tconsole.log('doc捕获阶段');\n\t\t\t\t},\n\t\t\t\ttrue\n\t\t\t);\n\t\t\tdocument.documentElement.addEventListener(\n\t\t\t\t'click',\n\t\t\t\tfunction() {\n\t\t\t\t\tconsole.log('html捕获阶段');\n\t\t\t\t},\n\t\t\t\ttrue\n\t\t\t);\n\t\t\tdocument.body.addEventListener(\n\t\t\t\t'click',\n\t\t\t\tfunction() {\n\t\t\t\t\tconsole.log('body捕获阶段');\n\t\t\t\t},\n\t\t\t\ttrue\n\t\t\t);\n\t\t\tev.addEventListener(\n\t\t\t\t'click',\n\t\t\t\tfunction() {\n\t\t\t\t\tconsole.log('div捕获阶段');\n\t\t\t\t},\n\t\t\t\ttrue\n            );\n            var eve=new Event('test');\n            ev.addEventListener('test',function(){\n                console.log('自定义事件');\n            });\n            ev.dispatchEvent(eve);\n\t\t</script>\n\t</body>\n</html>\n\n```\n\n\n","slug":"Event事件常见应用","published":1,"updated":"2020-03-12T09:21:28.000Z","comments":1,"photos":[],"link":"","_id":"ck9v62x6r0008qqs6emacfkbr","content":"<h2 id=\"Event-对象\"><a href=\"#Event-对象\" class=\"headerlink\" title=\"Event 对象\"></a>Event 对象</h2><p>W3C的说法是：</p>\n<p>Event 对象代表事件的状态，比如事件在其中发生的元素、键盘按键的状态、鼠标的位置、鼠标按钮的状态。</p>\n<p>事件通常与函数结合使用，函数不会在事件发生前被执行！</p>\n<a id=\"more\"></a>\n<h2 id=\"几种常见事件\"><a href=\"#几种常见事件\" class=\"headerlink\" title=\"几种常见事件\"></a>几种常见事件</h2><p><strong>event.preventDefault()</strong> :阻止默认事件  </p>\n<p><strong>event.stopPropagation()</strong>:阻止冒泡  </p>\n<p><strong>event.stopImmediatePropagation()</strong>:按优先级阻止执行</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">p</span> &#123; <span class=\"attribute\">height</span>: <span class=\"number\">30px</span>; <span class=\"attribute\">width</span>: <span class=\"number\">150px</span>; <span class=\"attribute\">background-color</span>: <span class=\"number\">#ccf</span>; &#125;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">div</span> &#123;<span class=\"attribute\">height</span>: <span class=\"number\">30px</span>; <span class=\"attribute\">width</span>: <span class=\"number\">150px</span>; <span class=\"attribute\">background-color</span>: <span class=\"number\">#cfc</span>; &#125;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>paragraph<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">const</span> p = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'p'</span>)</span></span><br><span class=\"line\"><span class=\"actionscript\">            p.addEventListener(<span class=\"string\">\"click\"</span>, (event) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">              alert(<span class=\"string\">\"我是p元素上被绑定的第一个监听函数\"</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">            &#125;, <span class=\"literal\">false</span>);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">            p.addEventListener(<span class=\"string\">\"click\"</span>, (event) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">              alert(<span class=\"string\">\"我是p元素上被绑定的第二个监听函数\"</span>);</span></span><br><span class=\"line\">              event.stopImmediatePropagation();</span><br><span class=\"line\"><span class=\"actionscript\">              <span class=\"comment\">// 执行stopImmediatePropagation方法,阻止click事件冒泡,并且阻止p元素上绑定的其他click事件的事件监听函数的执行.</span></span></span><br><span class=\"line\"><span class=\"actionscript\">            &#125;, <span class=\"literal\">false</span>);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">            p.addEventListener(<span class=\"string\">\"click\"</span>,(event) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">              alert(<span class=\"string\">\"我是p元素上被绑定的第三个监听函数\"</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">              <span class=\"comment\">// 该监听函数排在上个函数后面，该函数不会被执行</span></span></span><br><span class=\"line\"><span class=\"actionscript\">            &#125;, <span class=\"literal\">false</span>);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">\"div\"</span>).addEventListener(<span class=\"string\">\"click\"</span>, (event) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">              alert(<span class=\"string\">\"我是div元素,我是p元素的上层元素\"</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">              <span class=\"comment\">// p元素的click事件没有向上冒泡，该函数不会被执行</span></span></span><br><span class=\"line\"><span class=\"actionscript\">            &#125;, <span class=\"literal\">false</span>);</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>event.currentTarget</strong>:当前绑定的事件（父级元素）</p>\n<p><strong>event.target</strong>:绑定的事件</p>\n<p>以上两者主要用于事件委托中。<br><strong>事件委托就是利用冒泡的原理，将事件加到 父元素 或 祖先元素上，触发执行效果。</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myLinks\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"goSomewhere\"</span>&gt;</span>Go somewhere<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"doSomething\"</span>&gt;</span>Do something<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"sayHi\"</span>&gt;</span>Say hi<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>正常情况下添加点击事件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> item1 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"goSomewhere\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> item2 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"doSomething\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> item3 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"sayHi\"</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">    item1.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      location.href = <span class=\"string\">\"http://www.baidu.com\"</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    item2.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">document</span>.title = <span class=\"string\">\"事件委托\"</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    item3.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      alert(<span class=\"string\">\"hi\"</span>);</span><br><span class=\"line\">    &#125;;</span><br></pre></td></tr></table></figure>\n<p>使用事件委托</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"click\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">var</span> target = event.target;</span><br><span class=\"line\">     <span class=\"keyword\">switch</span> (target.id) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">case</span> <span class=\"string\">\"doSomething\"</span>:</span><br><span class=\"line\">         <span class=\"built_in\">document</span>.title = <span class=\"string\">\"事件委托\"</span>;</span><br><span class=\"line\">         <span class=\"keyword\">break</span>;</span><br><span class=\"line\">       <span class=\"keyword\">case</span> <span class=\"string\">\"goSomewhere\"</span>:</span><br><span class=\"line\">         location.href = <span class=\"string\">\"http://www.baidu.com\"</span>;</span><br><span class=\"line\">         <span class=\"keyword\">break</span>;</span><br><span class=\"line\">       <span class=\"keyword\">case</span> <span class=\"string\">\"sayHi\"</span>: alert(<span class=\"string\">\"hi\"</span>);</span><br><span class=\"line\">         <span class=\"keyword\">break</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"自定义事件\"><a href=\"#自定义事件\" class=\"headerlink\" title=\"自定义事件\"></a>自定义事件</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> eventCus = <span class=\"keyword\">new</span> Event(<span class=\"string\">'custome'</span>);</span><br><span class=\"line\">ev.addEventListener(<span class=\"string\">'custome'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'自定义事件'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">ev.dispatchEvent(eve);</span><br></pre></td></tr></table></figure>\n<p>自定义事件也可以使用<code>customEvent</code></p>\n<p>区别在于能够传递数据</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createEvent</span>(<span class=\"params\">params, eventName = <span class=\"string\">'mock-event'</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> CustomEvent(eventName, &#123; <span class=\"attr\">detail</span>: params &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> event = createEvent(&#123; <span class=\"attr\">id</span>: <span class=\"string\">'0010'</span> &#125;);</span><br></pre></td></tr></table></figure>\n<p>这里值得注意，需要把想要传递的参数包裹在一个包含detail属性的对象，否则传递的参数不会被挂载？（这里不太确定，我试过传id和params都不会生效）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'mock-event'</span>, (&#123; <span class=\"attr\">detail</span>: &#123; id &#125; &#125;) =&gt; &#123;</span><br><span class=\"line\">           <span class=\"built_in\">console</span>.log(<span class=\"string\">'id'</span>,id) <span class=\"comment\">// 会在控制台打印0010</span></span><br><span class=\"line\">       &#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"DOM事件流的补充\"><a href=\"#DOM事件流的补充\" class=\"headerlink\" title=\"DOM事件流的补充\"></a>DOM事件流的补充</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>DOM事件流<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"ev\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t\t<span class=\"selector-id\">#ev</span> &#123;</span></span><br><span class=\"line\">\t\t\t\t\twidth: 300px;</span><br><span class=\"line\">\t\t\t\t\theight: 100px;</span><br><span class=\"line\">\t\t\t\t\tbackground-color: red;</span><br><span class=\"line\"><span class=\"css\">\t\t\t\t\t<span class=\"selector-tag\">color</span>: <span class=\"selector-id\">#fff</span>;</span></span><br><span class=\"line\">\t\t\t\t\ttext-align: center;</span><br><span class=\"line\">\t\t\t\t\tline-height: 100px;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">\t\t\t目标元素</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"keyword\">var</span> ev = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'ev'</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"built_in\">window</span>.addEventListener(</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"string\">'click'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'window捕获阶段'</span>);</span></span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"literal\">true</span></span></span><br><span class=\"line\">\t\t\t);</span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"built_in\">document</span>.addEventListener(</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"string\">'click'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'doc捕获阶段'</span>);</span></span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"literal\">true</span></span></span><br><span class=\"line\">\t\t\t);</span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"built_in\">document</span>.documentElement.addEventListener(</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"string\">'click'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'html捕获阶段'</span>);</span></span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"literal\">true</span></span></span><br><span class=\"line\">\t\t\t);</span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"built_in\">document</span>.body.addEventListener(</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"string\">'click'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'body捕获阶段'</span>);</span></span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"literal\">true</span></span></span><br><span class=\"line\">\t\t\t);</span><br><span class=\"line\">\t\t\tev.addEventListener(</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"string\">'click'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'div捕获阶段'</span>);</span></span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"literal\">true</span></span></span><br><span class=\"line\">            );</span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"keyword\">var</span> eve=<span class=\"keyword\">new</span> Event(<span class=\"string\">'test'</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">            ev.addEventListener(<span class=\"string\">'test'</span>,<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'自定义事件'</span>);</span></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            ev.dispatchEvent(eve);</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{}},"excerpt":"<h2 id=\"Event-对象\"><a href=\"#Event-对象\" class=\"headerlink\" title=\"Event 对象\"></a>Event 对象</h2><p>W3C的说法是：</p>\n<p>Event 对象代表事件的状态，比如事件在其中发生的元素、键盘按键的状态、鼠标的位置、鼠标按钮的状态。</p>\n<p>事件通常与函数结合使用，函数不会在事件发生前被执行！</p>","more":"<h2 id=\"几种常见事件\"><a href=\"#几种常见事件\" class=\"headerlink\" title=\"几种常见事件\"></a>几种常见事件</h2><p><strong>event.preventDefault()</strong> :阻止默认事件  </p>\n<p><strong>event.stopPropagation()</strong>:阻止冒泡  </p>\n<p><strong>event.stopImmediatePropagation()</strong>:按优先级阻止执行</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">p</span> &#123; <span class=\"attribute\">height</span>: <span class=\"number\">30px</span>; <span class=\"attribute\">width</span>: <span class=\"number\">150px</span>; <span class=\"attribute\">background-color</span>: <span class=\"number\">#ccf</span>; &#125;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">div</span> &#123;<span class=\"attribute\">height</span>: <span class=\"number\">30px</span>; <span class=\"attribute\">width</span>: <span class=\"number\">150px</span>; <span class=\"attribute\">background-color</span>: <span class=\"number\">#cfc</span>; &#125;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>paragraph<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">const</span> p = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'p'</span>)</span></span><br><span class=\"line\"><span class=\"actionscript\">            p.addEventListener(<span class=\"string\">\"click\"</span>, (event) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">              alert(<span class=\"string\">\"我是p元素上被绑定的第一个监听函数\"</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">            &#125;, <span class=\"literal\">false</span>);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">            p.addEventListener(<span class=\"string\">\"click\"</span>, (event) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">              alert(<span class=\"string\">\"我是p元素上被绑定的第二个监听函数\"</span>);</span></span><br><span class=\"line\">              event.stopImmediatePropagation();</span><br><span class=\"line\"><span class=\"actionscript\">              <span class=\"comment\">// 执行stopImmediatePropagation方法,阻止click事件冒泡,并且阻止p元素上绑定的其他click事件的事件监听函数的执行.</span></span></span><br><span class=\"line\"><span class=\"actionscript\">            &#125;, <span class=\"literal\">false</span>);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">            p.addEventListener(<span class=\"string\">\"click\"</span>,(event) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">              alert(<span class=\"string\">\"我是p元素上被绑定的第三个监听函数\"</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">              <span class=\"comment\">// 该监听函数排在上个函数后面，该函数不会被执行</span></span></span><br><span class=\"line\"><span class=\"actionscript\">            &#125;, <span class=\"literal\">false</span>);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">\"div\"</span>).addEventListener(<span class=\"string\">\"click\"</span>, (event) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">              alert(<span class=\"string\">\"我是div元素,我是p元素的上层元素\"</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">              <span class=\"comment\">// p元素的click事件没有向上冒泡，该函数不会被执行</span></span></span><br><span class=\"line\"><span class=\"actionscript\">            &#125;, <span class=\"literal\">false</span>);</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>event.currentTarget</strong>:当前绑定的事件（父级元素）</p>\n<p><strong>event.target</strong>:绑定的事件</p>\n<p>以上两者主要用于事件委托中。<br><strong>事件委托就是利用冒泡的原理，将事件加到 父元素 或 祖先元素上，触发执行效果。</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myLinks\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"goSomewhere\"</span>&gt;</span>Go somewhere<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"doSomething\"</span>&gt;</span>Do something<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"sayHi\"</span>&gt;</span>Say hi<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>正常情况下添加点击事件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> item1 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"goSomewhere\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> item2 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"doSomething\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> item3 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"sayHi\"</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">    item1.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      location.href = <span class=\"string\">\"http://www.baidu.com\"</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    item2.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">document</span>.title = <span class=\"string\">\"事件委托\"</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    item3.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      alert(<span class=\"string\">\"hi\"</span>);</span><br><span class=\"line\">    &#125;;</span><br></pre></td></tr></table></figure>\n<p>使用事件委托</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"click\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">var</span> target = event.target;</span><br><span class=\"line\">     <span class=\"keyword\">switch</span> (target.id) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">case</span> <span class=\"string\">\"doSomething\"</span>:</span><br><span class=\"line\">         <span class=\"built_in\">document</span>.title = <span class=\"string\">\"事件委托\"</span>;</span><br><span class=\"line\">         <span class=\"keyword\">break</span>;</span><br><span class=\"line\">       <span class=\"keyword\">case</span> <span class=\"string\">\"goSomewhere\"</span>:</span><br><span class=\"line\">         location.href = <span class=\"string\">\"http://www.baidu.com\"</span>;</span><br><span class=\"line\">         <span class=\"keyword\">break</span>;</span><br><span class=\"line\">       <span class=\"keyword\">case</span> <span class=\"string\">\"sayHi\"</span>: alert(<span class=\"string\">\"hi\"</span>);</span><br><span class=\"line\">         <span class=\"keyword\">break</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"自定义事件\"><a href=\"#自定义事件\" class=\"headerlink\" title=\"自定义事件\"></a>自定义事件</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> eventCus = <span class=\"keyword\">new</span> Event(<span class=\"string\">'custome'</span>);</span><br><span class=\"line\">ev.addEventListener(<span class=\"string\">'custome'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'自定义事件'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">ev.dispatchEvent(eve);</span><br></pre></td></tr></table></figure>\n<p>自定义事件也可以使用<code>customEvent</code></p>\n<p>区别在于能够传递数据</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createEvent</span>(<span class=\"params\">params, eventName = <span class=\"string\">'mock-event'</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> CustomEvent(eventName, &#123; <span class=\"attr\">detail</span>: params &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> event = createEvent(&#123; <span class=\"attr\">id</span>: <span class=\"string\">'0010'</span> &#125;);</span><br></pre></td></tr></table></figure>\n<p>这里值得注意，需要把想要传递的参数包裹在一个包含detail属性的对象，否则传递的参数不会被挂载？（这里不太确定，我试过传id和params都不会生效）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'mock-event'</span>, (&#123; <span class=\"attr\">detail</span>: &#123; id &#125; &#125;) =&gt; &#123;</span><br><span class=\"line\">           <span class=\"built_in\">console</span>.log(<span class=\"string\">'id'</span>,id) <span class=\"comment\">// 会在控制台打印0010</span></span><br><span class=\"line\">       &#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"DOM事件流的补充\"><a href=\"#DOM事件流的补充\" class=\"headerlink\" title=\"DOM事件流的补充\"></a>DOM事件流的补充</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>DOM事件流<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"ev\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t\t<span class=\"selector-id\">#ev</span> &#123;</span></span><br><span class=\"line\">\t\t\t\t\twidth: 300px;</span><br><span class=\"line\">\t\t\t\t\theight: 100px;</span><br><span class=\"line\">\t\t\t\t\tbackground-color: red;</span><br><span class=\"line\"><span class=\"css\">\t\t\t\t\t<span class=\"selector-tag\">color</span>: <span class=\"selector-id\">#fff</span>;</span></span><br><span class=\"line\">\t\t\t\t\ttext-align: center;</span><br><span class=\"line\">\t\t\t\t\tline-height: 100px;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">\t\t\t目标元素</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"keyword\">var</span> ev = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'ev'</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"built_in\">window</span>.addEventListener(</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"string\">'click'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'window捕获阶段'</span>);</span></span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"literal\">true</span></span></span><br><span class=\"line\">\t\t\t);</span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"built_in\">document</span>.addEventListener(</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"string\">'click'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'doc捕获阶段'</span>);</span></span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"literal\">true</span></span></span><br><span class=\"line\">\t\t\t);</span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"built_in\">document</span>.documentElement.addEventListener(</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"string\">'click'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'html捕获阶段'</span>);</span></span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"literal\">true</span></span></span><br><span class=\"line\">\t\t\t);</span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"built_in\">document</span>.body.addEventListener(</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"string\">'click'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'body捕获阶段'</span>);</span></span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"literal\">true</span></span></span><br><span class=\"line\">\t\t\t);</span><br><span class=\"line\">\t\t\tev.addEventListener(</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"string\">'click'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'div捕获阶段'</span>);</span></span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"literal\">true</span></span></span><br><span class=\"line\">            );</span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"keyword\">var</span> eve=<span class=\"keyword\">new</span> Event(<span class=\"string\">'test'</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">            ev.addEventListener(<span class=\"string\">'test'</span>,<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'自定义事件'</span>);</span></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            ev.dispatchEvent(eve);</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>"},{"layout":"[post]","title":"HTTP协议","date":"2019-07-02T10:42:57.000Z","_content":"## HTTP协议\n### HTTP协议的主要特点\n1. 支持客户/服务器模式。\n2. 简单快速：客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有GET、HEAD、POST。每种方法规定了客户与服务器联系的类型不同。\n由于HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快。\n3. 灵活：HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记。\n4. 无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。\n5. 无状态：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。\n<!-- more -->\n\n### HTTP协议报文\n#### 请求报文\n\n##### 请求行\n请求行由请求方法字段、URL字段和HTTP协议版本字段3个字段组成，它们用空格分隔。比如 GET /data/info.html HTTP/1.1\n\n方法字段就是HTTP使用的请求方法，比如常见的GET/POST\n\n其中HTTP协议版本有两种：HTTP1.0/HTTP1.1 可以这样区别：\n\nHTTP1.0对于每个连接都只能传送一个请求和响应，请求就会关闭，HTTP1.0没有Host字段;而HTTP1.1在同一个连接中可以传送多个请求和响应，多个请求可以重叠和同时进行，HTTP1.1必须有Host字段。\n##### 请求头\nHTTP客户程序(例如浏览器)，向服务器发送请求的时候必须指明请求类型(一般是GET或者 POST)。如有必要，客户程序还可以选择发送其他的请求头。大多数请求头并不是必需的，但Content-Length除外。对于POST请求来说 Content-Length必须出现。\n\n常见的请求头字段含义：\n\nAccept： 浏览器可接受的MIME类型。\n\nAccept-Charset：浏览器可接受的字符集。\n\nAccept-Encoding：浏览器能够进行解码的数据编码方式，比如gzip。Servlet能够向支持gzip的浏览器返回经gzip编码的HTML页面。许多情形下这可以减少5到10倍的下载时间。\n\nAccept-Language：浏览器所希望的语言种类，当服务器能够提供一种以上的语言版本时要用到。\n\nAuthorization：授权信息，通常出现在对服务器发送的WWW-Authenticate头的应答中。\n\nContent-Length：表示请求消息正文的长度。\n\nHost： 客户机通过这个头告诉服务器，想访问的主机名。Host头域指定请求资源的Intenet主机和端口号，必须表示请求url的原始服务器或网关的位置。HTTP/1.1请求必须包含主机头域，否则系统会以400状态码返回。\n\nIf-Modified-Since：客户机通过这个头告诉服务器，资源的缓存时间。只有当所请求的内容在指定的时间后又经过修改才返回它，否则返回304“Not Modified”应答。\n\nReferer：客户机通过这个头告诉服务器，它是从哪个资源来访问服务器的(防盗链)。包含一个URL，用户从该URL代表的页面出发访问当前请求的页面。\n\nUser-Agent：User-Agent头域的内容包含发出请求的用户信息。浏览器类型，如果Servlet返回的内容与浏览器类型有关则该值非常有用。\n\nCookie：客户机通过这个头可以向服务器带数据，这是最重要的请求头信息之一。\n\nPragma：指定“no-cache”值表示服务器必须返回一个刷新后的文档，即使它是代理服务器而且已经有了页面的本地拷贝。\n\nFrom：请求发送者的email地址，由一些特殊的Web客户程序使用，浏览器不会用到它。\n\nConnection：处理完这次请求后是否断开连接还是继续保持连接。如果Servlet看到这里的值为“Keep- Alive”，或者看到请求使用的是HTTP 1.1(HTTP 1.1默认进行持久连接)，它就可以利用持久连接的优点，当页面包含多个元素时(例如Applet，图片)，显著地减少下载所需要的时间。要实现这一点，Servlet需要在应答中发送一个Content-Length头，最简单的实现方法是：先把内容写入 ByteArrayOutputStream，然后在正式写出内容之前计算它的大小。\n\nRange：Range头域可以请求实体的一个或者多个子范围。例如，\n\n表示头500个字节：bytes=0-499\n\n表示第二个500字节：bytes=500-999\n\n表示最后500个字节：bytes=-500\n\n表示500字节以后的范围：bytes=500-\n\n第一个和最后一个字节：bytes=0-0,-1\n\n同时指定几个范围：bytes=500-600,601-999\n\n但是服务器可以忽略此请求头，如果无条件GET包含Range请求头，响应会以状态码206(PartialContent)返回而不是以200 (OK)。\n\nUA-Pixels，UA-Color，UA-OS，UA-CPU：由某些版本的IE浏览器所发送的非标准的请求头，表示屏幕大小、颜色深度、操作系统和CPU类型。\n##### 空行\n它的作用是通过一个空行，告诉服务器请求头部到此为止。\n##### 请求体\n若方法字段是GET，则此项为空，没有数据\n\n若方法字段是POST,则通常来说此处放置的就是要提交的数据\n\n比如要使用POST方法提交一个表单，其中有user字段中数据为“admin”, password字段为123456，那么这里的请求数据就是 user=admin&password=123456，使用&来连接各个字段。\n\n![image](qingqiuti.png)\n\n![image](qingqiudemo.jpg)\n#### 响应报文\n##### 状态行\n响应行一般由协议版本、状态码及其描述组成 比如 HTTP/1.1 200 OK\n\n其中协议版本HTTP/1.1或者HTTP/1.0，200就是它的状态码，OK则为它的描述。\n\n//常见状态码：\n\n100~199：表示成功接收请求，要求客户端继续提交下一次请求才能完成整个处理过程。\n\n200~299：表示成功接收请求并已完成整个处理过程。常用200\n\n300~399：为完成请求，客户需进一步细化请求。例如：请求的资源已经移动一个新地址、常用302(意味着你请求我，我让你去找别人),307和304(我不给你这个资源，自己拿缓存)\n\n400~499：客户端的请求有错误，常用404(意味着你请求的资源在web服务器中没有)403(服务器拒绝访问，权限不够)\n\n500~599：服务器端出现错误，常用500\n\n[更加详细的状态码](https://baike.baidu.com/item/HTTP%E7%8A%B6%E6%80%81%E7%A0%81/5053660?fr=aladdin)\n##### 响应头\n响应头用于描述服务器的基本信息，以及数据的描述，服务器通过这些数据的描述信息，可以通知客户端如何处理等一会儿它回送的数据。\n\n设置HTTP响应头往往和状态码结合起来。例如，有好几个表示“文档位置已经改变”的状态代码都伴随着一个Location头，而401(Unauthorized)状态代码则必须伴随一个WWW-Authenticate头。然而，即使在没有设置特殊含义的状态代码时，指定应答头也是很有用的。应答头可以用来完成：设置Cookie，指定修改日期，指示浏览器按照指定的间隔刷新页面，声明文档的长度以便利用持久HTTP连接，……等等许多其他任务。\n\n常见的响应头字段含义：\n\nAllow：服务器支持哪些请求方法(如GET、POST等)。\n\nContent-Encoding：文档的编码(Encode)方法。只有在解码之后才可以得到Content-Type头指定的内容类型。利用gzip压缩文档能够显著地减少HTML文档的下载时间。Java的GZIPOutputStream可以很方便地进行gzip压缩，但只有Unix上的Netscape和Windows上的IE4、IE5才支持它。因此，Servlet应该通过查看Accept-Encoding头(即request.getHeader(“Accept- Encoding”))检查浏览器是否支持gzip，为支持gzip的浏览器返回经gzip压缩的HTML页面，为其他浏览器返回普通页面。\n\nContent-Length：表示内容长度。只有当浏览器使用持久HTTP连接时才需要这个数据。如果你想要利用持久连接的优势，可以把输出文档写入 ByteArrayOutputStram，完成后查看其大小，然后把该值放入Content-Length头，最后通过byteArrayStream.writeTo(response.getOutputStream()发送内容。\n\nContent- Type：表示后面的文档属于什么MIME类型。Servlet默认为text/plain，但通常需要显式地指定为text/html。由于经常要设置 Content-Type，因此HttpServletResponse提供了一个专用的方法setContentType。\n\nDate：当前的GMT时间，例如，Date:Mon,31Dec200104:25:57GMT。Date描述的时间表示世界标准时，换算成本地时间，需要知道用户所在的时区。你可以用setDateHeader来设置这个头以避免转换时间格式的麻烦。\n\nExpires：告诉浏览器把回送的资源缓存多长时间，-1或0则是不缓存。\n\nLast-Modified：文档的最后改动时间。客户可以通过If-Modified-Since请求头提供一个日期，该请求将被视为一个条件GET，只有改动时间迟于指定时间的文档才会返回，否则返回一个304(Not Modified)状态。Last-Modified也可用setDateHeader方法来设置。\n\nLocation：这个头配合302状态码使用，用于重定向接收者到一个新URI地址。表示客户应当到哪里去提取文档。Location通常不是直接设置的，而是通过HttpServletResponse的sendRedirect方法，该方法同时设置状态代码为302。\n\nRefresh：告诉浏览器隔多久刷新一次，以秒计。\n\nServer：服务器通过这个头告诉浏览器服务器的类型。Server响应头包含处理请求的原始服务器的软件信息。此域能包含多个产品标识和注释，产品标识一般按照重要性排序。Servlet一般不设置这个值，而是由Web服务器自己设置。\n\nSet-Cookie：设置和页面关联的Cookie。Servlet不应使用response.setHeader(“Set-Cookie”, …)，而是应使用HttpServletResponse提供的专用方法addCookie。\n\nTransfer-Encoding：告诉浏览器数据的传送格式。\n\nWWW-Authenticate：客户应该在Authorization头中提供什么类型的授权信息?在包含401(Unauthorized)状态行的应答中这个头是必需的。例如，response.setHeader(“WWW-Authenticate”, “BASIC realm=\\”executives\\”“)。注意Servlet一般不进行这方面的处理，而是让Web服务器的专门机制来控制受密码保护页面的访问。\n\n注：设置应答头最常用的方法是HttpServletResponse的setHeader，该方法有两个参数，分别表示应答头的名字和值。和设置状态代码相似，设置应答头应该在发送任何文档内容之前进行。\n\nsetDateHeader方法和setIntHeadr方法专门用来设置包含日期和整数值的应答头，前者避免了把Java时间转换为GMT时间字符串的麻烦，后者则避免了把整数转换为字符串的麻烦。\n\nHttpServletResponse还提供了许多设置\n\nsetContentType：设置Content-Type头。大多数Servlet都要用到这个方法。\n\nsetContentLength：设置Content-Length头。对于支持持久HTTP连接的浏览器来说，这个函数是很有用的。\n\naddCookie：设置一个Cookie(Servlet API中没有setCookie方法，因为应答往往包含多个Set-Cookie头)。\n##### 空行\n它的作用是通过一个空行，告诉服务器请求头部到此为止。\n##### 响应体\n响应体就是响应的消息体，如果是纯数据就是返回纯数据，如果请求的是HTML页面，那么返回的就是HTML代码，如果是JS就是JS代码，如此之类。\n\n![image](xiangying.jpg)\n\n### HTTP方法\n1. GET：获取资源\n2. POST：传输资源\n3. PUT：更新资源\n4. DELETE：删除资源\n5. HEAD：获取报文首部\n\n### POST请求和GET请求的区别\n- GET在浏览器回退时是无害的，而POST会再次提交请求。\n- GET产生的URL地址可以被收藏，而POST不可以。\n- GET请求会被浏览器主动缓存，而POST不会，除非手动设置。\n- GET请求只能进行url编码，而POST支持多种编码方式。\n- GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。\n- GET请求在URL中传送的参数是有长度限制的，而POST没有。\n- 对参数的数据类型，GET只接受ASCII字符，而POST没有限制。\n- GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。\n- GET参数通过URL传递，POST放在Request body中。\n\n### HTTP连接\n#### HTTP持久连接\nHTTP协议采用“请求-应答”模式，当使用普通模式，即非Keep-Alive模式时，每个请求/应答客户和服务器都要新建一个连接，完成后立即断开连接（HTTP协议为无连接的协议。\n\n当使用Keep-Alive模式（又称持久连接，连接重用）时，Keep-Alive功能使客户端到服务器端的连接持续有效，当出现服务器的后继请求时，Keep-Alive功能避免了建立或者重新建立连接。\n\n**只有http1.1开始支持持久连接**\n\n#### 管线化\n在使用持久连接的情况下，某个连接上的消息传递是这样的：  \n请求1->响应1->请求2->响应2->请求3->响应3\n\n管线化，则消息的传递变成这样：  \n请求1->请求2->请求3->响应1->响应2->响应3\n\n#### 管线化的特点\n1. 管线化机制通过持久连接完成，仅HTTP/1.1 支持此技术\n \n1. 只有GET和HEAD请求可以进行管线化，而POST则有所限制  \n2. 初次创建连接时不应启动管线机制，因为对方(服务器)不一定支持HTTP/1.1版本的协议  \n3. 管线化不会影响响应到来的顺序，如上面的例子所示，响应返回的顺序并未改变\n4. HTTP /1.1要求服务器端支持管线化，但并不要求服务器端也对响应进行管线化处理，只是要求对于管线化的请求不失败即可  \n5. 由于.上面提到的服务器端问题，开启管线化很可能并不会带来大幅度的性能提升，而且很多服务器端和代理程序对管线化的支持并不好，因此现代浏览器如**Chrome和Firefox** 默认并未开启管线化支持\n","source":"_posts/HTTP协议.md","raw":"---\nlayout: '[post]'\ntitle: HTTP协议\ndate: 2019-07-02 18:42:57\ntags: http\n---\n## HTTP协议\n### HTTP协议的主要特点\n1. 支持客户/服务器模式。\n2. 简单快速：客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有GET、HEAD、POST。每种方法规定了客户与服务器联系的类型不同。\n由于HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快。\n3. 灵活：HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记。\n4. 无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。\n5. 无状态：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。\n<!-- more -->\n\n### HTTP协议报文\n#### 请求报文\n\n##### 请求行\n请求行由请求方法字段、URL字段和HTTP协议版本字段3个字段组成，它们用空格分隔。比如 GET /data/info.html HTTP/1.1\n\n方法字段就是HTTP使用的请求方法，比如常见的GET/POST\n\n其中HTTP协议版本有两种：HTTP1.0/HTTP1.1 可以这样区别：\n\nHTTP1.0对于每个连接都只能传送一个请求和响应，请求就会关闭，HTTP1.0没有Host字段;而HTTP1.1在同一个连接中可以传送多个请求和响应，多个请求可以重叠和同时进行，HTTP1.1必须有Host字段。\n##### 请求头\nHTTP客户程序(例如浏览器)，向服务器发送请求的时候必须指明请求类型(一般是GET或者 POST)。如有必要，客户程序还可以选择发送其他的请求头。大多数请求头并不是必需的，但Content-Length除外。对于POST请求来说 Content-Length必须出现。\n\n常见的请求头字段含义：\n\nAccept： 浏览器可接受的MIME类型。\n\nAccept-Charset：浏览器可接受的字符集。\n\nAccept-Encoding：浏览器能够进行解码的数据编码方式，比如gzip。Servlet能够向支持gzip的浏览器返回经gzip编码的HTML页面。许多情形下这可以减少5到10倍的下载时间。\n\nAccept-Language：浏览器所希望的语言种类，当服务器能够提供一种以上的语言版本时要用到。\n\nAuthorization：授权信息，通常出现在对服务器发送的WWW-Authenticate头的应答中。\n\nContent-Length：表示请求消息正文的长度。\n\nHost： 客户机通过这个头告诉服务器，想访问的主机名。Host头域指定请求资源的Intenet主机和端口号，必须表示请求url的原始服务器或网关的位置。HTTP/1.1请求必须包含主机头域，否则系统会以400状态码返回。\n\nIf-Modified-Since：客户机通过这个头告诉服务器，资源的缓存时间。只有当所请求的内容在指定的时间后又经过修改才返回它，否则返回304“Not Modified”应答。\n\nReferer：客户机通过这个头告诉服务器，它是从哪个资源来访问服务器的(防盗链)。包含一个URL，用户从该URL代表的页面出发访问当前请求的页面。\n\nUser-Agent：User-Agent头域的内容包含发出请求的用户信息。浏览器类型，如果Servlet返回的内容与浏览器类型有关则该值非常有用。\n\nCookie：客户机通过这个头可以向服务器带数据，这是最重要的请求头信息之一。\n\nPragma：指定“no-cache”值表示服务器必须返回一个刷新后的文档，即使它是代理服务器而且已经有了页面的本地拷贝。\n\nFrom：请求发送者的email地址，由一些特殊的Web客户程序使用，浏览器不会用到它。\n\nConnection：处理完这次请求后是否断开连接还是继续保持连接。如果Servlet看到这里的值为“Keep- Alive”，或者看到请求使用的是HTTP 1.1(HTTP 1.1默认进行持久连接)，它就可以利用持久连接的优点，当页面包含多个元素时(例如Applet，图片)，显著地减少下载所需要的时间。要实现这一点，Servlet需要在应答中发送一个Content-Length头，最简单的实现方法是：先把内容写入 ByteArrayOutputStream，然后在正式写出内容之前计算它的大小。\n\nRange：Range头域可以请求实体的一个或者多个子范围。例如，\n\n表示头500个字节：bytes=0-499\n\n表示第二个500字节：bytes=500-999\n\n表示最后500个字节：bytes=-500\n\n表示500字节以后的范围：bytes=500-\n\n第一个和最后一个字节：bytes=0-0,-1\n\n同时指定几个范围：bytes=500-600,601-999\n\n但是服务器可以忽略此请求头，如果无条件GET包含Range请求头，响应会以状态码206(PartialContent)返回而不是以200 (OK)。\n\nUA-Pixels，UA-Color，UA-OS，UA-CPU：由某些版本的IE浏览器所发送的非标准的请求头，表示屏幕大小、颜色深度、操作系统和CPU类型。\n##### 空行\n它的作用是通过一个空行，告诉服务器请求头部到此为止。\n##### 请求体\n若方法字段是GET，则此项为空，没有数据\n\n若方法字段是POST,则通常来说此处放置的就是要提交的数据\n\n比如要使用POST方法提交一个表单，其中有user字段中数据为“admin”, password字段为123456，那么这里的请求数据就是 user=admin&password=123456，使用&来连接各个字段。\n\n![image](qingqiuti.png)\n\n![image](qingqiudemo.jpg)\n#### 响应报文\n##### 状态行\n响应行一般由协议版本、状态码及其描述组成 比如 HTTP/1.1 200 OK\n\n其中协议版本HTTP/1.1或者HTTP/1.0，200就是它的状态码，OK则为它的描述。\n\n//常见状态码：\n\n100~199：表示成功接收请求，要求客户端继续提交下一次请求才能完成整个处理过程。\n\n200~299：表示成功接收请求并已完成整个处理过程。常用200\n\n300~399：为完成请求，客户需进一步细化请求。例如：请求的资源已经移动一个新地址、常用302(意味着你请求我，我让你去找别人),307和304(我不给你这个资源，自己拿缓存)\n\n400~499：客户端的请求有错误，常用404(意味着你请求的资源在web服务器中没有)403(服务器拒绝访问，权限不够)\n\n500~599：服务器端出现错误，常用500\n\n[更加详细的状态码](https://baike.baidu.com/item/HTTP%E7%8A%B6%E6%80%81%E7%A0%81/5053660?fr=aladdin)\n##### 响应头\n响应头用于描述服务器的基本信息，以及数据的描述，服务器通过这些数据的描述信息，可以通知客户端如何处理等一会儿它回送的数据。\n\n设置HTTP响应头往往和状态码结合起来。例如，有好几个表示“文档位置已经改变”的状态代码都伴随着一个Location头，而401(Unauthorized)状态代码则必须伴随一个WWW-Authenticate头。然而，即使在没有设置特殊含义的状态代码时，指定应答头也是很有用的。应答头可以用来完成：设置Cookie，指定修改日期，指示浏览器按照指定的间隔刷新页面，声明文档的长度以便利用持久HTTP连接，……等等许多其他任务。\n\n常见的响应头字段含义：\n\nAllow：服务器支持哪些请求方法(如GET、POST等)。\n\nContent-Encoding：文档的编码(Encode)方法。只有在解码之后才可以得到Content-Type头指定的内容类型。利用gzip压缩文档能够显著地减少HTML文档的下载时间。Java的GZIPOutputStream可以很方便地进行gzip压缩，但只有Unix上的Netscape和Windows上的IE4、IE5才支持它。因此，Servlet应该通过查看Accept-Encoding头(即request.getHeader(“Accept- Encoding”))检查浏览器是否支持gzip，为支持gzip的浏览器返回经gzip压缩的HTML页面，为其他浏览器返回普通页面。\n\nContent-Length：表示内容长度。只有当浏览器使用持久HTTP连接时才需要这个数据。如果你想要利用持久连接的优势，可以把输出文档写入 ByteArrayOutputStram，完成后查看其大小，然后把该值放入Content-Length头，最后通过byteArrayStream.writeTo(response.getOutputStream()发送内容。\n\nContent- Type：表示后面的文档属于什么MIME类型。Servlet默认为text/plain，但通常需要显式地指定为text/html。由于经常要设置 Content-Type，因此HttpServletResponse提供了一个专用的方法setContentType。\n\nDate：当前的GMT时间，例如，Date:Mon,31Dec200104:25:57GMT。Date描述的时间表示世界标准时，换算成本地时间，需要知道用户所在的时区。你可以用setDateHeader来设置这个头以避免转换时间格式的麻烦。\n\nExpires：告诉浏览器把回送的资源缓存多长时间，-1或0则是不缓存。\n\nLast-Modified：文档的最后改动时间。客户可以通过If-Modified-Since请求头提供一个日期，该请求将被视为一个条件GET，只有改动时间迟于指定时间的文档才会返回，否则返回一个304(Not Modified)状态。Last-Modified也可用setDateHeader方法来设置。\n\nLocation：这个头配合302状态码使用，用于重定向接收者到一个新URI地址。表示客户应当到哪里去提取文档。Location通常不是直接设置的，而是通过HttpServletResponse的sendRedirect方法，该方法同时设置状态代码为302。\n\nRefresh：告诉浏览器隔多久刷新一次，以秒计。\n\nServer：服务器通过这个头告诉浏览器服务器的类型。Server响应头包含处理请求的原始服务器的软件信息。此域能包含多个产品标识和注释，产品标识一般按照重要性排序。Servlet一般不设置这个值，而是由Web服务器自己设置。\n\nSet-Cookie：设置和页面关联的Cookie。Servlet不应使用response.setHeader(“Set-Cookie”, …)，而是应使用HttpServletResponse提供的专用方法addCookie。\n\nTransfer-Encoding：告诉浏览器数据的传送格式。\n\nWWW-Authenticate：客户应该在Authorization头中提供什么类型的授权信息?在包含401(Unauthorized)状态行的应答中这个头是必需的。例如，response.setHeader(“WWW-Authenticate”, “BASIC realm=\\”executives\\”“)。注意Servlet一般不进行这方面的处理，而是让Web服务器的专门机制来控制受密码保护页面的访问。\n\n注：设置应答头最常用的方法是HttpServletResponse的setHeader，该方法有两个参数，分别表示应答头的名字和值。和设置状态代码相似，设置应答头应该在发送任何文档内容之前进行。\n\nsetDateHeader方法和setIntHeadr方法专门用来设置包含日期和整数值的应答头，前者避免了把Java时间转换为GMT时间字符串的麻烦，后者则避免了把整数转换为字符串的麻烦。\n\nHttpServletResponse还提供了许多设置\n\nsetContentType：设置Content-Type头。大多数Servlet都要用到这个方法。\n\nsetContentLength：设置Content-Length头。对于支持持久HTTP连接的浏览器来说，这个函数是很有用的。\n\naddCookie：设置一个Cookie(Servlet API中没有setCookie方法，因为应答往往包含多个Set-Cookie头)。\n##### 空行\n它的作用是通过一个空行，告诉服务器请求头部到此为止。\n##### 响应体\n响应体就是响应的消息体，如果是纯数据就是返回纯数据，如果请求的是HTML页面，那么返回的就是HTML代码，如果是JS就是JS代码，如此之类。\n\n![image](xiangying.jpg)\n\n### HTTP方法\n1. GET：获取资源\n2. POST：传输资源\n3. PUT：更新资源\n4. DELETE：删除资源\n5. HEAD：获取报文首部\n\n### POST请求和GET请求的区别\n- GET在浏览器回退时是无害的，而POST会再次提交请求。\n- GET产生的URL地址可以被收藏，而POST不可以。\n- GET请求会被浏览器主动缓存，而POST不会，除非手动设置。\n- GET请求只能进行url编码，而POST支持多种编码方式。\n- GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。\n- GET请求在URL中传送的参数是有长度限制的，而POST没有。\n- 对参数的数据类型，GET只接受ASCII字符，而POST没有限制。\n- GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。\n- GET参数通过URL传递，POST放在Request body中。\n\n### HTTP连接\n#### HTTP持久连接\nHTTP协议采用“请求-应答”模式，当使用普通模式，即非Keep-Alive模式时，每个请求/应答客户和服务器都要新建一个连接，完成后立即断开连接（HTTP协议为无连接的协议。\n\n当使用Keep-Alive模式（又称持久连接，连接重用）时，Keep-Alive功能使客户端到服务器端的连接持续有效，当出现服务器的后继请求时，Keep-Alive功能避免了建立或者重新建立连接。\n\n**只有http1.1开始支持持久连接**\n\n#### 管线化\n在使用持久连接的情况下，某个连接上的消息传递是这样的：  \n请求1->响应1->请求2->响应2->请求3->响应3\n\n管线化，则消息的传递变成这样：  \n请求1->请求2->请求3->响应1->响应2->响应3\n\n#### 管线化的特点\n1. 管线化机制通过持久连接完成，仅HTTP/1.1 支持此技术\n \n1. 只有GET和HEAD请求可以进行管线化，而POST则有所限制  \n2. 初次创建连接时不应启动管线机制，因为对方(服务器)不一定支持HTTP/1.1版本的协议  \n3. 管线化不会影响响应到来的顺序，如上面的例子所示，响应返回的顺序并未改变\n4. HTTP /1.1要求服务器端支持管线化，但并不要求服务器端也对响应进行管线化处理，只是要求对于管线化的请求不失败即可  \n5. 由于.上面提到的服务器端问题，开启管线化很可能并不会带来大幅度的性能提升，而且很多服务器端和代理程序对管线化的支持并不好，因此现代浏览器如**Chrome和Firefox** 默认并未开启管线化支持\n","slug":"HTTP协议","published":1,"updated":"2020-03-13T10:40:07.000Z","comments":1,"photos":[],"link":"","_id":"ck9v62x6s0009qqs6h07wa3xd","content":"<h2 id=\"HTTP协议\"><a href=\"#HTTP协议\" class=\"headerlink\" title=\"HTTP协议\"></a>HTTP协议</h2><h3 id=\"HTTP协议的主要特点\"><a href=\"#HTTP协议的主要特点\" class=\"headerlink\" title=\"HTTP协议的主要特点\"></a>HTTP协议的主要特点</h3><ol>\n<li>支持客户/服务器模式。</li>\n<li>简单快速：客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有GET、HEAD、POST。每种方法规定了客户与服务器联系的类型不同。<br>由于HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快。</li>\n<li>灵活：HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记。</li>\n<li>无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。</li>\n<li>无状态：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。<a id=\"more\"></a>\n\n</li>\n</ol>\n<h3 id=\"HTTP协议报文\"><a href=\"#HTTP协议报文\" class=\"headerlink\" title=\"HTTP协议报文\"></a>HTTP协议报文</h3><h4 id=\"请求报文\"><a href=\"#请求报文\" class=\"headerlink\" title=\"请求报文\"></a>请求报文</h4><h5 id=\"请求行\"><a href=\"#请求行\" class=\"headerlink\" title=\"请求行\"></a>请求行</h5><p>请求行由请求方法字段、URL字段和HTTP协议版本字段3个字段组成，它们用空格分隔。比如 GET /data/info.html HTTP/1.1</p>\n<p>方法字段就是HTTP使用的请求方法，比如常见的GET/POST</p>\n<p>其中HTTP协议版本有两种：HTTP1.0/HTTP1.1 可以这样区别：</p>\n<p>HTTP1.0对于每个连接都只能传送一个请求和响应，请求就会关闭，HTTP1.0没有Host字段;而HTTP1.1在同一个连接中可以传送多个请求和响应，多个请求可以重叠和同时进行，HTTP1.1必须有Host字段。</p>\n<h5 id=\"请求头\"><a href=\"#请求头\" class=\"headerlink\" title=\"请求头\"></a>请求头</h5><p>HTTP客户程序(例如浏览器)，向服务器发送请求的时候必须指明请求类型(一般是GET或者 POST)。如有必要，客户程序还可以选择发送其他的请求头。大多数请求头并不是必需的，但Content-Length除外。对于POST请求来说 Content-Length必须出现。</p>\n<p>常见的请求头字段含义：</p>\n<p>Accept： 浏览器可接受的MIME类型。</p>\n<p>Accept-Charset：浏览器可接受的字符集。</p>\n<p>Accept-Encoding：浏览器能够进行解码的数据编码方式，比如gzip。Servlet能够向支持gzip的浏览器返回经gzip编码的HTML页面。许多情形下这可以减少5到10倍的下载时间。</p>\n<p>Accept-Language：浏览器所希望的语言种类，当服务器能够提供一种以上的语言版本时要用到。</p>\n<p>Authorization：授权信息，通常出现在对服务器发送的WWW-Authenticate头的应答中。</p>\n<p>Content-Length：表示请求消息正文的长度。</p>\n<p>Host： 客户机通过这个头告诉服务器，想访问的主机名。Host头域指定请求资源的Intenet主机和端口号，必须表示请求url的原始服务器或网关的位置。HTTP/1.1请求必须包含主机头域，否则系统会以400状态码返回。</p>\n<p>If-Modified-Since：客户机通过这个头告诉服务器，资源的缓存时间。只有当所请求的内容在指定的时间后又经过修改才返回它，否则返回304“Not Modified”应答。</p>\n<p>Referer：客户机通过这个头告诉服务器，它是从哪个资源来访问服务器的(防盗链)。包含一个URL，用户从该URL代表的页面出发访问当前请求的页面。</p>\n<p>User-Agent：User-Agent头域的内容包含发出请求的用户信息。浏览器类型，如果Servlet返回的内容与浏览器类型有关则该值非常有用。</p>\n<p>Cookie：客户机通过这个头可以向服务器带数据，这是最重要的请求头信息之一。</p>\n<p>Pragma：指定“no-cache”值表示服务器必须返回一个刷新后的文档，即使它是代理服务器而且已经有了页面的本地拷贝。</p>\n<p>From：请求发送者的email地址，由一些特殊的Web客户程序使用，浏览器不会用到它。</p>\n<p>Connection：处理完这次请求后是否断开连接还是继续保持连接。如果Servlet看到这里的值为“Keep- Alive”，或者看到请求使用的是HTTP 1.1(HTTP 1.1默认进行持久连接)，它就可以利用持久连接的优点，当页面包含多个元素时(例如Applet，图片)，显著地减少下载所需要的时间。要实现这一点，Servlet需要在应答中发送一个Content-Length头，最简单的实现方法是：先把内容写入 ByteArrayOutputStream，然后在正式写出内容之前计算它的大小。</p>\n<p>Range：Range头域可以请求实体的一个或者多个子范围。例如，</p>\n<p>表示头500个字节：bytes=0-499</p>\n<p>表示第二个500字节：bytes=500-999</p>\n<p>表示最后500个字节：bytes=-500</p>\n<p>表示500字节以后的范围：bytes=500-</p>\n<p>第一个和最后一个字节：bytes=0-0,-1</p>\n<p>同时指定几个范围：bytes=500-600,601-999</p>\n<p>但是服务器可以忽略此请求头，如果无条件GET包含Range请求头，响应会以状态码206(PartialContent)返回而不是以200 (OK)。</p>\n<p>UA-Pixels，UA-Color，UA-OS，UA-CPU：由某些版本的IE浏览器所发送的非标准的请求头，表示屏幕大小、颜色深度、操作系统和CPU类型。</p>\n<h5 id=\"空行\"><a href=\"#空行\" class=\"headerlink\" title=\"空行\"></a>空行</h5><p>它的作用是通过一个空行，告诉服务器请求头部到此为止。</p>\n<h5 id=\"请求体\"><a href=\"#请求体\" class=\"headerlink\" title=\"请求体\"></a>请求体</h5><p>若方法字段是GET，则此项为空，没有数据</p>\n<p>若方法字段是POST,则通常来说此处放置的就是要提交的数据</p>\n<p>比如要使用POST方法提交一个表单，其中有user字段中数据为“admin”, password字段为123456，那么这里的请求数据就是 user=admin&amp;password=123456，使用&amp;来连接各个字段。</p>\n<p><img src=\"/2019/07/02/HTTP%E5%8D%8F%E8%AE%AE/qingqiuti.png\" alt=\"image\"></p>\n<p><img src=\"/2019/07/02/HTTP%E5%8D%8F%E8%AE%AE/qingqiudemo.jpg\" alt=\"image\"></p>\n<h4 id=\"响应报文\"><a href=\"#响应报文\" class=\"headerlink\" title=\"响应报文\"></a>响应报文</h4><h5 id=\"状态行\"><a href=\"#状态行\" class=\"headerlink\" title=\"状态行\"></a>状态行</h5><p>响应行一般由协议版本、状态码及其描述组成 比如 HTTP/1.1 200 OK</p>\n<p>其中协议版本HTTP/1.1或者HTTP/1.0，200就是它的状态码，OK则为它的描述。</p>\n<p>//常见状态码：</p>\n<p>100~199：表示成功接收请求，要求客户端继续提交下一次请求才能完成整个处理过程。</p>\n<p>200~299：表示成功接收请求并已完成整个处理过程。常用200</p>\n<p>300~399：为完成请求，客户需进一步细化请求。例如：请求的资源已经移动一个新地址、常用302(意味着你请求我，我让你去找别人),307和304(我不给你这个资源，自己拿缓存)</p>\n<p>400~499：客户端的请求有错误，常用404(意味着你请求的资源在web服务器中没有)403(服务器拒绝访问，权限不够)</p>\n<p>500~599：服务器端出现错误，常用500</p>\n<p><a href=\"https://baike.baidu.com/item/HTTP%E7%8A%B6%E6%80%81%E7%A0%81/5053660?fr=aladdin\" target=\"_blank\" rel=\"noopener\">更加详细的状态码</a></p>\n<h5 id=\"响应头\"><a href=\"#响应头\" class=\"headerlink\" title=\"响应头\"></a>响应头</h5><p>响应头用于描述服务器的基本信息，以及数据的描述，服务器通过这些数据的描述信息，可以通知客户端如何处理等一会儿它回送的数据。</p>\n<p>设置HTTP响应头往往和状态码结合起来。例如，有好几个表示“文档位置已经改变”的状态代码都伴随着一个Location头，而401(Unauthorized)状态代码则必须伴随一个WWW-Authenticate头。然而，即使在没有设置特殊含义的状态代码时，指定应答头也是很有用的。应答头可以用来完成：设置Cookie，指定修改日期，指示浏览器按照指定的间隔刷新页面，声明文档的长度以便利用持久HTTP连接，……等等许多其他任务。</p>\n<p>常见的响应头字段含义：</p>\n<p>Allow：服务器支持哪些请求方法(如GET、POST等)。</p>\n<p>Content-Encoding：文档的编码(Encode)方法。只有在解码之后才可以得到Content-Type头指定的内容类型。利用gzip压缩文档能够显著地减少HTML文档的下载时间。Java的GZIPOutputStream可以很方便地进行gzip压缩，但只有Unix上的Netscape和Windows上的IE4、IE5才支持它。因此，Servlet应该通过查看Accept-Encoding头(即request.getHeader(“Accept- Encoding”))检查浏览器是否支持gzip，为支持gzip的浏览器返回经gzip压缩的HTML页面，为其他浏览器返回普通页面。</p>\n<p>Content-Length：表示内容长度。只有当浏览器使用持久HTTP连接时才需要这个数据。如果你想要利用持久连接的优势，可以把输出文档写入 ByteArrayOutputStram，完成后查看其大小，然后把该值放入Content-Length头，最后通过byteArrayStream.writeTo(response.getOutputStream()发送内容。</p>\n<p>Content- Type：表示后面的文档属于什么MIME类型。Servlet默认为text/plain，但通常需要显式地指定为text/html。由于经常要设置 Content-Type，因此HttpServletResponse提供了一个专用的方法setContentType。</p>\n<p>Date：当前的GMT时间，例如，Date:Mon,31Dec200104:25:57GMT。Date描述的时间表示世界标准时，换算成本地时间，需要知道用户所在的时区。你可以用setDateHeader来设置这个头以避免转换时间格式的麻烦。</p>\n<p>Expires：告诉浏览器把回送的资源缓存多长时间，-1或0则是不缓存。</p>\n<p>Last-Modified：文档的最后改动时间。客户可以通过If-Modified-Since请求头提供一个日期，该请求将被视为一个条件GET，只有改动时间迟于指定时间的文档才会返回，否则返回一个304(Not Modified)状态。Last-Modified也可用setDateHeader方法来设置。</p>\n<p>Location：这个头配合302状态码使用，用于重定向接收者到一个新URI地址。表示客户应当到哪里去提取文档。Location通常不是直接设置的，而是通过HttpServletResponse的sendRedirect方法，该方法同时设置状态代码为302。</p>\n<p>Refresh：告诉浏览器隔多久刷新一次，以秒计。</p>\n<p>Server：服务器通过这个头告诉浏览器服务器的类型。Server响应头包含处理请求的原始服务器的软件信息。此域能包含多个产品标识和注释，产品标识一般按照重要性排序。Servlet一般不设置这个值，而是由Web服务器自己设置。</p>\n<p>Set-Cookie：设置和页面关联的Cookie。Servlet不应使用response.setHeader(“Set-Cookie”, …)，而是应使用HttpServletResponse提供的专用方法addCookie。</p>\n<p>Transfer-Encoding：告诉浏览器数据的传送格式。</p>\n<p>WWW-Authenticate：客户应该在Authorization头中提供什么类型的授权信息?在包含401(Unauthorized)状态行的应答中这个头是必需的。例如，response.setHeader(“WWW-Authenticate”, “BASIC realm=\\”executives\\”“)。注意Servlet一般不进行这方面的处理，而是让Web服务器的专门机制来控制受密码保护页面的访问。</p>\n<p>注：设置应答头最常用的方法是HttpServletResponse的setHeader，该方法有两个参数，分别表示应答头的名字和值。和设置状态代码相似，设置应答头应该在发送任何文档内容之前进行。</p>\n<p>setDateHeader方法和setIntHeadr方法专门用来设置包含日期和整数值的应答头，前者避免了把Java时间转换为GMT时间字符串的麻烦，后者则避免了把整数转换为字符串的麻烦。</p>\n<p>HttpServletResponse还提供了许多设置</p>\n<p>setContentType：设置Content-Type头。大多数Servlet都要用到这个方法。</p>\n<p>setContentLength：设置Content-Length头。对于支持持久HTTP连接的浏览器来说，这个函数是很有用的。</p>\n<p>addCookie：设置一个Cookie(Servlet API中没有setCookie方法，因为应答往往包含多个Set-Cookie头)。</p>\n<h5 id=\"空行-1\"><a href=\"#空行-1\" class=\"headerlink\" title=\"空行\"></a>空行</h5><p>它的作用是通过一个空行，告诉服务器请求头部到此为止。</p>\n<h5 id=\"响应体\"><a href=\"#响应体\" class=\"headerlink\" title=\"响应体\"></a>响应体</h5><p>响应体就是响应的消息体，如果是纯数据就是返回纯数据，如果请求的是HTML页面，那么返回的就是HTML代码，如果是JS就是JS代码，如此之类。</p>\n<p><img src=\"/2019/07/02/HTTP%E5%8D%8F%E8%AE%AE/xiangying.jpg\" alt=\"image\"></p>\n<h3 id=\"HTTP方法\"><a href=\"#HTTP方法\" class=\"headerlink\" title=\"HTTP方法\"></a>HTTP方法</h3><ol>\n<li>GET：获取资源</li>\n<li>POST：传输资源</li>\n<li>PUT：更新资源</li>\n<li>DELETE：删除资源</li>\n<li>HEAD：获取报文首部</li>\n</ol>\n<h3 id=\"POST请求和GET请求的区别\"><a href=\"#POST请求和GET请求的区别\" class=\"headerlink\" title=\"POST请求和GET请求的区别\"></a>POST请求和GET请求的区别</h3><ul>\n<li>GET在浏览器回退时是无害的，而POST会再次提交请求。</li>\n<li>GET产生的URL地址可以被收藏，而POST不可以。</li>\n<li>GET请求会被浏览器主动缓存，而POST不会，除非手动设置。</li>\n<li>GET请求只能进行url编码，而POST支持多种编码方式。</li>\n<li>GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。</li>\n<li>GET请求在URL中传送的参数是有长度限制的，而POST没有。</li>\n<li>对参数的数据类型，GET只接受ASCII字符，而POST没有限制。</li>\n<li>GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。</li>\n<li>GET参数通过URL传递，POST放在Request body中。</li>\n</ul>\n<h3 id=\"HTTP连接\"><a href=\"#HTTP连接\" class=\"headerlink\" title=\"HTTP连接\"></a>HTTP连接</h3><h4 id=\"HTTP持久连接\"><a href=\"#HTTP持久连接\" class=\"headerlink\" title=\"HTTP持久连接\"></a>HTTP持久连接</h4><p>HTTP协议采用“请求-应答”模式，当使用普通模式，即非Keep-Alive模式时，每个请求/应答客户和服务器都要新建一个连接，完成后立即断开连接（HTTP协议为无连接的协议。</p>\n<p>当使用Keep-Alive模式（又称持久连接，连接重用）时，Keep-Alive功能使客户端到服务器端的连接持续有效，当出现服务器的后继请求时，Keep-Alive功能避免了建立或者重新建立连接。</p>\n<p><strong>只有http1.1开始支持持久连接</strong></p>\n<h4 id=\"管线化\"><a href=\"#管线化\" class=\"headerlink\" title=\"管线化\"></a>管线化</h4><p>在使用持久连接的情况下，某个连接上的消息传递是这样的：<br>请求1-&gt;响应1-&gt;请求2-&gt;响应2-&gt;请求3-&gt;响应3</p>\n<p>管线化，则消息的传递变成这样：<br>请求1-&gt;请求2-&gt;请求3-&gt;响应1-&gt;响应2-&gt;响应3</p>\n<h4 id=\"管线化的特点\"><a href=\"#管线化的特点\" class=\"headerlink\" title=\"管线化的特点\"></a>管线化的特点</h4><ol>\n<li><p>管线化机制通过持久连接完成，仅HTTP/1.1 支持此技术</p>\n</li>\n<li><p>只有GET和HEAD请求可以进行管线化，而POST则有所限制  </p>\n</li>\n<li><p>初次创建连接时不应启动管线机制，因为对方(服务器)不一定支持HTTP/1.1版本的协议  </p>\n</li>\n<li><p>管线化不会影响响应到来的顺序，如上面的例子所示，响应返回的顺序并未改变</p>\n</li>\n<li><p>HTTP /1.1要求服务器端支持管线化，但并不要求服务器端也对响应进行管线化处理，只是要求对于管线化的请求不失败即可  </p>\n</li>\n<li><p>由于.上面提到的服务器端问题，开启管线化很可能并不会带来大幅度的性能提升，而且很多服务器端和代理程序对管线化的支持并不好，因此现代浏览器如<strong>Chrome和Firefox</strong> 默认并未开启管线化支持</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h2 id=\"HTTP协议\"><a href=\"#HTTP协议\" class=\"headerlink\" title=\"HTTP协议\"></a>HTTP协议</h2><h3 id=\"HTTP协议的主要特点\"><a href=\"#HTTP协议的主要特点\" class=\"headerlink\" title=\"HTTP协议的主要特点\"></a>HTTP协议的主要特点</h3><ol>\n<li>支持客户/服务器模式。</li>\n<li>简单快速：客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有GET、HEAD、POST。每种方法规定了客户与服务器联系的类型不同。<br>由于HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快。</li>\n<li>灵活：HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记。</li>\n<li>无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。</li>\n<li>无状态：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。</li></ol>","more":"\n\n<h3 id=\"HTTP协议报文\"><a href=\"#HTTP协议报文\" class=\"headerlink\" title=\"HTTP协议报文\"></a>HTTP协议报文</h3><h4 id=\"请求报文\"><a href=\"#请求报文\" class=\"headerlink\" title=\"请求报文\"></a>请求报文</h4><h5 id=\"请求行\"><a href=\"#请求行\" class=\"headerlink\" title=\"请求行\"></a>请求行</h5><p>请求行由请求方法字段、URL字段和HTTP协议版本字段3个字段组成，它们用空格分隔。比如 GET /data/info.html HTTP/1.1</p>\n<p>方法字段就是HTTP使用的请求方法，比如常见的GET/POST</p>\n<p>其中HTTP协议版本有两种：HTTP1.0/HTTP1.1 可以这样区别：</p>\n<p>HTTP1.0对于每个连接都只能传送一个请求和响应，请求就会关闭，HTTP1.0没有Host字段;而HTTP1.1在同一个连接中可以传送多个请求和响应，多个请求可以重叠和同时进行，HTTP1.1必须有Host字段。</p>\n<h5 id=\"请求头\"><a href=\"#请求头\" class=\"headerlink\" title=\"请求头\"></a>请求头</h5><p>HTTP客户程序(例如浏览器)，向服务器发送请求的时候必须指明请求类型(一般是GET或者 POST)。如有必要，客户程序还可以选择发送其他的请求头。大多数请求头并不是必需的，但Content-Length除外。对于POST请求来说 Content-Length必须出现。</p>\n<p>常见的请求头字段含义：</p>\n<p>Accept： 浏览器可接受的MIME类型。</p>\n<p>Accept-Charset：浏览器可接受的字符集。</p>\n<p>Accept-Encoding：浏览器能够进行解码的数据编码方式，比如gzip。Servlet能够向支持gzip的浏览器返回经gzip编码的HTML页面。许多情形下这可以减少5到10倍的下载时间。</p>\n<p>Accept-Language：浏览器所希望的语言种类，当服务器能够提供一种以上的语言版本时要用到。</p>\n<p>Authorization：授权信息，通常出现在对服务器发送的WWW-Authenticate头的应答中。</p>\n<p>Content-Length：表示请求消息正文的长度。</p>\n<p>Host： 客户机通过这个头告诉服务器，想访问的主机名。Host头域指定请求资源的Intenet主机和端口号，必须表示请求url的原始服务器或网关的位置。HTTP/1.1请求必须包含主机头域，否则系统会以400状态码返回。</p>\n<p>If-Modified-Since：客户机通过这个头告诉服务器，资源的缓存时间。只有当所请求的内容在指定的时间后又经过修改才返回它，否则返回304“Not Modified”应答。</p>\n<p>Referer：客户机通过这个头告诉服务器，它是从哪个资源来访问服务器的(防盗链)。包含一个URL，用户从该URL代表的页面出发访问当前请求的页面。</p>\n<p>User-Agent：User-Agent头域的内容包含发出请求的用户信息。浏览器类型，如果Servlet返回的内容与浏览器类型有关则该值非常有用。</p>\n<p>Cookie：客户机通过这个头可以向服务器带数据，这是最重要的请求头信息之一。</p>\n<p>Pragma：指定“no-cache”值表示服务器必须返回一个刷新后的文档，即使它是代理服务器而且已经有了页面的本地拷贝。</p>\n<p>From：请求发送者的email地址，由一些特殊的Web客户程序使用，浏览器不会用到它。</p>\n<p>Connection：处理完这次请求后是否断开连接还是继续保持连接。如果Servlet看到这里的值为“Keep- Alive”，或者看到请求使用的是HTTP 1.1(HTTP 1.1默认进行持久连接)，它就可以利用持久连接的优点，当页面包含多个元素时(例如Applet，图片)，显著地减少下载所需要的时间。要实现这一点，Servlet需要在应答中发送一个Content-Length头，最简单的实现方法是：先把内容写入 ByteArrayOutputStream，然后在正式写出内容之前计算它的大小。</p>\n<p>Range：Range头域可以请求实体的一个或者多个子范围。例如，</p>\n<p>表示头500个字节：bytes=0-499</p>\n<p>表示第二个500字节：bytes=500-999</p>\n<p>表示最后500个字节：bytes=-500</p>\n<p>表示500字节以后的范围：bytes=500-</p>\n<p>第一个和最后一个字节：bytes=0-0,-1</p>\n<p>同时指定几个范围：bytes=500-600,601-999</p>\n<p>但是服务器可以忽略此请求头，如果无条件GET包含Range请求头，响应会以状态码206(PartialContent)返回而不是以200 (OK)。</p>\n<p>UA-Pixels，UA-Color，UA-OS，UA-CPU：由某些版本的IE浏览器所发送的非标准的请求头，表示屏幕大小、颜色深度、操作系统和CPU类型。</p>\n<h5 id=\"空行\"><a href=\"#空行\" class=\"headerlink\" title=\"空行\"></a>空行</h5><p>它的作用是通过一个空行，告诉服务器请求头部到此为止。</p>\n<h5 id=\"请求体\"><a href=\"#请求体\" class=\"headerlink\" title=\"请求体\"></a>请求体</h5><p>若方法字段是GET，则此项为空，没有数据</p>\n<p>若方法字段是POST,则通常来说此处放置的就是要提交的数据</p>\n<p>比如要使用POST方法提交一个表单，其中有user字段中数据为“admin”, password字段为123456，那么这里的请求数据就是 user=admin&amp;password=123456，使用&amp;来连接各个字段。</p>\n<p><img src=\"/2019/07/02/HTTP%E5%8D%8F%E8%AE%AE/qingqiuti.png\" alt=\"image\"></p>\n<p><img src=\"/2019/07/02/HTTP%E5%8D%8F%E8%AE%AE/qingqiudemo.jpg\" alt=\"image\"></p>\n<h4 id=\"响应报文\"><a href=\"#响应报文\" class=\"headerlink\" title=\"响应报文\"></a>响应报文</h4><h5 id=\"状态行\"><a href=\"#状态行\" class=\"headerlink\" title=\"状态行\"></a>状态行</h5><p>响应行一般由协议版本、状态码及其描述组成 比如 HTTP/1.1 200 OK</p>\n<p>其中协议版本HTTP/1.1或者HTTP/1.0，200就是它的状态码，OK则为它的描述。</p>\n<p>//常见状态码：</p>\n<p>100~199：表示成功接收请求，要求客户端继续提交下一次请求才能完成整个处理过程。</p>\n<p>200~299：表示成功接收请求并已完成整个处理过程。常用200</p>\n<p>300~399：为完成请求，客户需进一步细化请求。例如：请求的资源已经移动一个新地址、常用302(意味着你请求我，我让你去找别人),307和304(我不给你这个资源，自己拿缓存)</p>\n<p>400~499：客户端的请求有错误，常用404(意味着你请求的资源在web服务器中没有)403(服务器拒绝访问，权限不够)</p>\n<p>500~599：服务器端出现错误，常用500</p>\n<p><a href=\"https://baike.baidu.com/item/HTTP%E7%8A%B6%E6%80%81%E7%A0%81/5053660?fr=aladdin\" target=\"_blank\" rel=\"noopener\">更加详细的状态码</a></p>\n<h5 id=\"响应头\"><a href=\"#响应头\" class=\"headerlink\" title=\"响应头\"></a>响应头</h5><p>响应头用于描述服务器的基本信息，以及数据的描述，服务器通过这些数据的描述信息，可以通知客户端如何处理等一会儿它回送的数据。</p>\n<p>设置HTTP响应头往往和状态码结合起来。例如，有好几个表示“文档位置已经改变”的状态代码都伴随着一个Location头，而401(Unauthorized)状态代码则必须伴随一个WWW-Authenticate头。然而，即使在没有设置特殊含义的状态代码时，指定应答头也是很有用的。应答头可以用来完成：设置Cookie，指定修改日期，指示浏览器按照指定的间隔刷新页面，声明文档的长度以便利用持久HTTP连接，……等等许多其他任务。</p>\n<p>常见的响应头字段含义：</p>\n<p>Allow：服务器支持哪些请求方法(如GET、POST等)。</p>\n<p>Content-Encoding：文档的编码(Encode)方法。只有在解码之后才可以得到Content-Type头指定的内容类型。利用gzip压缩文档能够显著地减少HTML文档的下载时间。Java的GZIPOutputStream可以很方便地进行gzip压缩，但只有Unix上的Netscape和Windows上的IE4、IE5才支持它。因此，Servlet应该通过查看Accept-Encoding头(即request.getHeader(“Accept- Encoding”))检查浏览器是否支持gzip，为支持gzip的浏览器返回经gzip压缩的HTML页面，为其他浏览器返回普通页面。</p>\n<p>Content-Length：表示内容长度。只有当浏览器使用持久HTTP连接时才需要这个数据。如果你想要利用持久连接的优势，可以把输出文档写入 ByteArrayOutputStram，完成后查看其大小，然后把该值放入Content-Length头，最后通过byteArrayStream.writeTo(response.getOutputStream()发送内容。</p>\n<p>Content- Type：表示后面的文档属于什么MIME类型。Servlet默认为text/plain，但通常需要显式地指定为text/html。由于经常要设置 Content-Type，因此HttpServletResponse提供了一个专用的方法setContentType。</p>\n<p>Date：当前的GMT时间，例如，Date:Mon,31Dec200104:25:57GMT。Date描述的时间表示世界标准时，换算成本地时间，需要知道用户所在的时区。你可以用setDateHeader来设置这个头以避免转换时间格式的麻烦。</p>\n<p>Expires：告诉浏览器把回送的资源缓存多长时间，-1或0则是不缓存。</p>\n<p>Last-Modified：文档的最后改动时间。客户可以通过If-Modified-Since请求头提供一个日期，该请求将被视为一个条件GET，只有改动时间迟于指定时间的文档才会返回，否则返回一个304(Not Modified)状态。Last-Modified也可用setDateHeader方法来设置。</p>\n<p>Location：这个头配合302状态码使用，用于重定向接收者到一个新URI地址。表示客户应当到哪里去提取文档。Location通常不是直接设置的，而是通过HttpServletResponse的sendRedirect方法，该方法同时设置状态代码为302。</p>\n<p>Refresh：告诉浏览器隔多久刷新一次，以秒计。</p>\n<p>Server：服务器通过这个头告诉浏览器服务器的类型。Server响应头包含处理请求的原始服务器的软件信息。此域能包含多个产品标识和注释，产品标识一般按照重要性排序。Servlet一般不设置这个值，而是由Web服务器自己设置。</p>\n<p>Set-Cookie：设置和页面关联的Cookie。Servlet不应使用response.setHeader(“Set-Cookie”, …)，而是应使用HttpServletResponse提供的专用方法addCookie。</p>\n<p>Transfer-Encoding：告诉浏览器数据的传送格式。</p>\n<p>WWW-Authenticate：客户应该在Authorization头中提供什么类型的授权信息?在包含401(Unauthorized)状态行的应答中这个头是必需的。例如，response.setHeader(“WWW-Authenticate”, “BASIC realm=\\”executives\\”“)。注意Servlet一般不进行这方面的处理，而是让Web服务器的专门机制来控制受密码保护页面的访问。</p>\n<p>注：设置应答头最常用的方法是HttpServletResponse的setHeader，该方法有两个参数，分别表示应答头的名字和值。和设置状态代码相似，设置应答头应该在发送任何文档内容之前进行。</p>\n<p>setDateHeader方法和setIntHeadr方法专门用来设置包含日期和整数值的应答头，前者避免了把Java时间转换为GMT时间字符串的麻烦，后者则避免了把整数转换为字符串的麻烦。</p>\n<p>HttpServletResponse还提供了许多设置</p>\n<p>setContentType：设置Content-Type头。大多数Servlet都要用到这个方法。</p>\n<p>setContentLength：设置Content-Length头。对于支持持久HTTP连接的浏览器来说，这个函数是很有用的。</p>\n<p>addCookie：设置一个Cookie(Servlet API中没有setCookie方法，因为应答往往包含多个Set-Cookie头)。</p>\n<h5 id=\"空行-1\"><a href=\"#空行-1\" class=\"headerlink\" title=\"空行\"></a>空行</h5><p>它的作用是通过一个空行，告诉服务器请求头部到此为止。</p>\n<h5 id=\"响应体\"><a href=\"#响应体\" class=\"headerlink\" title=\"响应体\"></a>响应体</h5><p>响应体就是响应的消息体，如果是纯数据就是返回纯数据，如果请求的是HTML页面，那么返回的就是HTML代码，如果是JS就是JS代码，如此之类。</p>\n<p><img src=\"/2019/07/02/HTTP%E5%8D%8F%E8%AE%AE/xiangying.jpg\" alt=\"image\"></p>\n<h3 id=\"HTTP方法\"><a href=\"#HTTP方法\" class=\"headerlink\" title=\"HTTP方法\"></a>HTTP方法</h3><ol>\n<li>GET：获取资源</li>\n<li>POST：传输资源</li>\n<li>PUT：更新资源</li>\n<li>DELETE：删除资源</li>\n<li>HEAD：获取报文首部</li>\n</ol>\n<h3 id=\"POST请求和GET请求的区别\"><a href=\"#POST请求和GET请求的区别\" class=\"headerlink\" title=\"POST请求和GET请求的区别\"></a>POST请求和GET请求的区别</h3><ul>\n<li>GET在浏览器回退时是无害的，而POST会再次提交请求。</li>\n<li>GET产生的URL地址可以被收藏，而POST不可以。</li>\n<li>GET请求会被浏览器主动缓存，而POST不会，除非手动设置。</li>\n<li>GET请求只能进行url编码，而POST支持多种编码方式。</li>\n<li>GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。</li>\n<li>GET请求在URL中传送的参数是有长度限制的，而POST没有。</li>\n<li>对参数的数据类型，GET只接受ASCII字符，而POST没有限制。</li>\n<li>GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。</li>\n<li>GET参数通过URL传递，POST放在Request body中。</li>\n</ul>\n<h3 id=\"HTTP连接\"><a href=\"#HTTP连接\" class=\"headerlink\" title=\"HTTP连接\"></a>HTTP连接</h3><h4 id=\"HTTP持久连接\"><a href=\"#HTTP持久连接\" class=\"headerlink\" title=\"HTTP持久连接\"></a>HTTP持久连接</h4><p>HTTP协议采用“请求-应答”模式，当使用普通模式，即非Keep-Alive模式时，每个请求/应答客户和服务器都要新建一个连接，完成后立即断开连接（HTTP协议为无连接的协议。</p>\n<p>当使用Keep-Alive模式（又称持久连接，连接重用）时，Keep-Alive功能使客户端到服务器端的连接持续有效，当出现服务器的后继请求时，Keep-Alive功能避免了建立或者重新建立连接。</p>\n<p><strong>只有http1.1开始支持持久连接</strong></p>\n<h4 id=\"管线化\"><a href=\"#管线化\" class=\"headerlink\" title=\"管线化\"></a>管线化</h4><p>在使用持久连接的情况下，某个连接上的消息传递是这样的：<br>请求1-&gt;响应1-&gt;请求2-&gt;响应2-&gt;请求3-&gt;响应3</p>\n<p>管线化，则消息的传递变成这样：<br>请求1-&gt;请求2-&gt;请求3-&gt;响应1-&gt;响应2-&gt;响应3</p>\n<h4 id=\"管线化的特点\"><a href=\"#管线化的特点\" class=\"headerlink\" title=\"管线化的特点\"></a>管线化的特点</h4><ol>\n<li><p>管线化机制通过持久连接完成，仅HTTP/1.1 支持此技术</p>\n</li>\n<li><p>只有GET和HEAD请求可以进行管线化，而POST则有所限制  </p>\n</li>\n<li><p>初次创建连接时不应启动管线机制，因为对方(服务器)不一定支持HTTP/1.1版本的协议  </p>\n</li>\n<li><p>管线化不会影响响应到来的顺序，如上面的例子所示，响应返回的顺序并未改变</p>\n</li>\n<li><p>HTTP /1.1要求服务器端支持管线化，但并不要求服务器端也对响应进行管线化处理，只是要求对于管线化的请求不失败即可  </p>\n</li>\n<li><p>由于.上面提到的服务器端问题，开启管线化很可能并不会带来大幅度的性能提升，而且很多服务器端和代理程序对管线化的支持并不好，因此现代浏览器如<strong>Chrome和Firefox</strong> 默认并未开启管线化支持</p>\n</li>\n</ol>"},{"layout":"[post]","title":"Vue基础一","date":"2019-10-19T16:03:47.000Z","_content":"## 插值表达式\n<!-- more -->\n```html\n<template>\n    <div>\n        <p>文本插值 {{message}}</p>\n        <p>JS 表达式 {{ flag ? 'yes' : 'no' }} （只能是表达式，不能是 js 语句）</p>\n\n        <p :id=\"dynamicId\">动态属性 id</p>\n\n        <hr/>\n        <p v-html=\"rawHtml\">\n            <span>有 xss 风险</span>\n            <span>【注意】使用 v-html 之后，将会覆盖子元素</span>\n        </p>\n        <!-- 其他常用指令后面讲 -->\n    </div>\n</template>\n<script>\nexport default {\n    data() {\n        return {\n            message: 'hello vue',\n            flag: true,\n            rawHtml: '指令 - 原始 html <b>加粗</b> <i>斜体</i>',\n            dynamicId: `id-${Date.now()}`\n        }\n    }\n}\n</script>\n\n```\n## computed和watch\n### computed\n一个计算属性,类似于过滤器,对绑定到view的数据进行处理。\n\n```js\n data: {\n    firstName: 'Foo',\n    lastName: 'Bar'\n  },\n  computed: {\n    fullName: function () {\n      return this.firstName + ' ' + this.lastName\n    }\n  }\n```\n**fullName不可在data里面定义**\n#### get和set用法\n\n```js\ndata: {\n    firstName: 'Foo',\n    lastName: 'Bar'\n  },\n  computed: {\n  fullName：{\n   get(){//回调函数 当需要读取当前属性值是执行，根据相关数据计算并返回当前属性的值\n      return this.firstName + ' ' + this.lastName\n    },\n   set(val){//监视当前属性值的变化，当属性值发生变化时执行，更新相关的属性数据\n       //val就是fullName的最新属性值\n       console.log(val)\n        const names = val.split(' ');\n        console.log(names)\n        this.firstName = names[0];\n        this.lastName = names[1];\n   }\n   }\n  }\n```\n\n**computed有缓存，data不变则不会重新计算**\n\n### watch\nwatch是一个观察的动作\n\n```js\ndata: {\n    firstName: 'Foo',\n    lastName: 'Bar',\n    fullName: 'Foo Bar'\n  },\n  watch: {\n     firstName: function (val) {\n     this.fullName = val + ' ' + this.lastName\n  },\n  lastName: function (val) {\n     this.fullName = this.firstName + ' ' + val\n   }\n}\n```\n#### 简单数据类型\n\n```js\ndata(){\n      return{\n        'first':2\n      }\n    },\n    watch:{\n      first(){\n        console.log(this.first)\n      }\n    },\n```\n#### 复杂数据类型\n\n```js\ndata(){\n      return{\n        'first':{\n          second:0\n        }\n      }\n    },\n    watch:{\n      secondChange:{\n        handler(oldVal,newVal){\n          console.log(oldVal)\n          console.log(newVal)\n        },\n        deep:true\n      }\n    },\n```\n - **console.log打印的结果,发现oldVal和newVal值是一样的,所以深度监听虽然可以监听到对象的变化,但是无法监听到具体对象里面那个属性的变化（只针对引用类型）**\n\n - oldVal和newVal值一样的原因是它们索引同一个对象/数组。Vue **不会保留修改之前值的副本**\n\n - 深度监听对应的函数名必须为handler,否则无效果,因为watcher里面对应的是对handler的调用\n\n#### 监听对象单个属性\n##### 方法一\n```js\n  data() {\n    return {\n      first: {\n        second: 0\n      }\n    };\n  },\n  watch: {\n    \"first.second\": function(newVal, oldVal) {\n      console.log(newVal, oldVal);\n    }\n  }\n```\n##### 方法二\n\n用computed作为中间件转化,因为computed可以取到对应的属性值\n```js\n  data() {\n    return {\n      first: {\n        second: 0\n      }\n    };\n  },\n  computed: {\n    secondChange() {\n      return this.first.second;\n    }\n  },\n  watch: {\n    secondChange() {\n      console.log(\"second属性值变化了\");\n    }\n  }\n```\n\n### computed和watch的区别\n####  computed特性\n1. 是计算值\n2. 应用：就是简化tempalte里面双花括号计算和处理props或$emit的传值\n3. 具有缓存性，页面重新渲染值不变化,计算属性会立即返回之前的计算结果，而不必再次执行函数\n\n#### watch特性\n1. 是观察的动作\n2. 应用：监听props，$emit或本组件的值执行异步操作\n3. 无缓存性，页面重新渲染时值不变化也会执行\n\n## class和style\n - 使用动态属性\n - 使用驼峰式写法\n\n```html\n<template>\n    <div>\n        <p :class=\"{ black: isBlack, yellow: isYellow }\">使用 class</p>\n        <p :class=\"[black, yellow]\">使用 class （数组）</p>\n        <p :style=\"styleData\">使用 style</p>\n    </div>\n</template>\n\n<script>\nexport default {\n    data() {\n        return {\n            isBlack: true,\n            isYellow: true,\n\n            black: 'black',\n            yellow: 'yellow',\n\n            styleData: {\n                fontSize: '40px', // 转换为驼峰式\n                color: 'red',\n                backgroundColor: '#ccc' // 转换为驼峰式\n            }\n        }\n    }\n}\n</script>\n\n<style scoped>\n    .black {\n        background-color: #999;\n    }\n    .yellow {\n        color: yellow;\n    }\n</style>\n```\n\n## 条件渲染\n\n```html\n<template>\n    <div>\n        <p v-if=\"type === 'a'\">A</p>\n        <p v-else-if=\"type === 'b'\">B</p>\n        <p v-else>other</p>\n\n        <p v-show=\"type === 'a'\">A by v-show</p>\n        <p v-show=\"type === 'b'\">B by v-show</p>\n    </div>\n</template>\n\n<script>\nexport default {\n    data() {\n        return {\n            type: 'a'\n        }\n    }\n}\n</script>\n```\n\n#### v-if和v-show\n - v-if是false时候不会渲染dom，v-show则是display:none\n - 频繁切换使用v-show,不会频繁渲染dom\n\n\n","source":"_posts/Vue基础一.md","raw":"---\nlayout: '[post]'\ntitle: Vue基础一\ndate: 2019-10-20 00:03:47\ntags: Vue\n---\n## 插值表达式\n<!-- more -->\n```html\n<template>\n    <div>\n        <p>文本插值 {{message}}</p>\n        <p>JS 表达式 {{ flag ? 'yes' : 'no' }} （只能是表达式，不能是 js 语句）</p>\n\n        <p :id=\"dynamicId\">动态属性 id</p>\n\n        <hr/>\n        <p v-html=\"rawHtml\">\n            <span>有 xss 风险</span>\n            <span>【注意】使用 v-html 之后，将会覆盖子元素</span>\n        </p>\n        <!-- 其他常用指令后面讲 -->\n    </div>\n</template>\n<script>\nexport default {\n    data() {\n        return {\n            message: 'hello vue',\n            flag: true,\n            rawHtml: '指令 - 原始 html <b>加粗</b> <i>斜体</i>',\n            dynamicId: `id-${Date.now()}`\n        }\n    }\n}\n</script>\n\n```\n## computed和watch\n### computed\n一个计算属性,类似于过滤器,对绑定到view的数据进行处理。\n\n```js\n data: {\n    firstName: 'Foo',\n    lastName: 'Bar'\n  },\n  computed: {\n    fullName: function () {\n      return this.firstName + ' ' + this.lastName\n    }\n  }\n```\n**fullName不可在data里面定义**\n#### get和set用法\n\n```js\ndata: {\n    firstName: 'Foo',\n    lastName: 'Bar'\n  },\n  computed: {\n  fullName：{\n   get(){//回调函数 当需要读取当前属性值是执行，根据相关数据计算并返回当前属性的值\n      return this.firstName + ' ' + this.lastName\n    },\n   set(val){//监视当前属性值的变化，当属性值发生变化时执行，更新相关的属性数据\n       //val就是fullName的最新属性值\n       console.log(val)\n        const names = val.split(' ');\n        console.log(names)\n        this.firstName = names[0];\n        this.lastName = names[1];\n   }\n   }\n  }\n```\n\n**computed有缓存，data不变则不会重新计算**\n\n### watch\nwatch是一个观察的动作\n\n```js\ndata: {\n    firstName: 'Foo',\n    lastName: 'Bar',\n    fullName: 'Foo Bar'\n  },\n  watch: {\n     firstName: function (val) {\n     this.fullName = val + ' ' + this.lastName\n  },\n  lastName: function (val) {\n     this.fullName = this.firstName + ' ' + val\n   }\n}\n```\n#### 简单数据类型\n\n```js\ndata(){\n      return{\n        'first':2\n      }\n    },\n    watch:{\n      first(){\n        console.log(this.first)\n      }\n    },\n```\n#### 复杂数据类型\n\n```js\ndata(){\n      return{\n        'first':{\n          second:0\n        }\n      }\n    },\n    watch:{\n      secondChange:{\n        handler(oldVal,newVal){\n          console.log(oldVal)\n          console.log(newVal)\n        },\n        deep:true\n      }\n    },\n```\n - **console.log打印的结果,发现oldVal和newVal值是一样的,所以深度监听虽然可以监听到对象的变化,但是无法监听到具体对象里面那个属性的变化（只针对引用类型）**\n\n - oldVal和newVal值一样的原因是它们索引同一个对象/数组。Vue **不会保留修改之前值的副本**\n\n - 深度监听对应的函数名必须为handler,否则无效果,因为watcher里面对应的是对handler的调用\n\n#### 监听对象单个属性\n##### 方法一\n```js\n  data() {\n    return {\n      first: {\n        second: 0\n      }\n    };\n  },\n  watch: {\n    \"first.second\": function(newVal, oldVal) {\n      console.log(newVal, oldVal);\n    }\n  }\n```\n##### 方法二\n\n用computed作为中间件转化,因为computed可以取到对应的属性值\n```js\n  data() {\n    return {\n      first: {\n        second: 0\n      }\n    };\n  },\n  computed: {\n    secondChange() {\n      return this.first.second;\n    }\n  },\n  watch: {\n    secondChange() {\n      console.log(\"second属性值变化了\");\n    }\n  }\n```\n\n### computed和watch的区别\n####  computed特性\n1. 是计算值\n2. 应用：就是简化tempalte里面双花括号计算和处理props或$emit的传值\n3. 具有缓存性，页面重新渲染值不变化,计算属性会立即返回之前的计算结果，而不必再次执行函数\n\n#### watch特性\n1. 是观察的动作\n2. 应用：监听props，$emit或本组件的值执行异步操作\n3. 无缓存性，页面重新渲染时值不变化也会执行\n\n## class和style\n - 使用动态属性\n - 使用驼峰式写法\n\n```html\n<template>\n    <div>\n        <p :class=\"{ black: isBlack, yellow: isYellow }\">使用 class</p>\n        <p :class=\"[black, yellow]\">使用 class （数组）</p>\n        <p :style=\"styleData\">使用 style</p>\n    </div>\n</template>\n\n<script>\nexport default {\n    data() {\n        return {\n            isBlack: true,\n            isYellow: true,\n\n            black: 'black',\n            yellow: 'yellow',\n\n            styleData: {\n                fontSize: '40px', // 转换为驼峰式\n                color: 'red',\n                backgroundColor: '#ccc' // 转换为驼峰式\n            }\n        }\n    }\n}\n</script>\n\n<style scoped>\n    .black {\n        background-color: #999;\n    }\n    .yellow {\n        color: yellow;\n    }\n</style>\n```\n\n## 条件渲染\n\n```html\n<template>\n    <div>\n        <p v-if=\"type === 'a'\">A</p>\n        <p v-else-if=\"type === 'b'\">B</p>\n        <p v-else>other</p>\n\n        <p v-show=\"type === 'a'\">A by v-show</p>\n        <p v-show=\"type === 'b'\">B by v-show</p>\n    </div>\n</template>\n\n<script>\nexport default {\n    data() {\n        return {\n            type: 'a'\n        }\n    }\n}\n</script>\n```\n\n#### v-if和v-show\n - v-if是false时候不会渲染dom，v-show则是display:none\n - 频繁切换使用v-show,不会频繁渲染dom\n\n\n","slug":"Vue基础一","published":1,"updated":"2020-05-06T09:55:45.000Z","comments":1,"photos":[],"link":"","_id":"ck9v62x70000cqqs61md994fv","content":"<h2 id=\"插值表达式\"><a href=\"#插值表达式\" class=\"headerlink\" title=\"插值表达式\"></a>插值表达式</h2><a id=\"more\"></a>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>文本插值 &#123;&#123;message&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>JS 表达式 &#123;&#123; flag ? 'yes' : 'no' &#125;&#125; （只能是表达式，不能是 js 语句）<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">:id</span>=<span class=\"string\">\"dynamicId\"</span>&gt;</span>动态属性 id<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">hr</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-html</span>=<span class=\"string\">\"rawHtml\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>有 xss 风险<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>【注意】使用 v-html 之后，将会覆盖子元素<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 其他常用指令后面讲 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">            message: <span class=\"string\">'hello vue'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">            flag: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">            rawHtml: '指令 - 原始 html <span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span>加粗<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span>斜体<span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span>',</span></span></span><br><span class=\"line\"><span class=\"javascript\">            dynamicId: <span class=\"string\">`id-<span class=\"subst\">$&#123;<span class=\"built_in\">Date</span>.now()&#125;</span>`</span></span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"computed和watch\"><a href=\"#computed和watch\" class=\"headerlink\" title=\"computed和watch\"></a>computed和watch</h2><h3 id=\"computed\"><a href=\"#computed\" class=\"headerlink\" title=\"computed\"></a>computed</h3><p>一个计算属性,类似于过滤器,对绑定到view的数据进行处理。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data: &#123;</span><br><span class=\"line\">   firstName: <span class=\"string\">'Foo'</span>,</span><br><span class=\"line\">   lastName: <span class=\"string\">'Bar'</span></span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"> computed: &#123;</span><br><span class=\"line\">   fullName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.firstName + <span class=\"string\">' '</span> + <span class=\"keyword\">this</span>.lastName</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p><strong>fullName不可在data里面定义</strong></p>\n<h4 id=\"get和set用法\"><a href=\"#get和set用法\" class=\"headerlink\" title=\"get和set用法\"></a>get和set用法</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data: &#123;</span><br><span class=\"line\">    firstName: <span class=\"string\">'Foo'</span>,</span><br><span class=\"line\">    lastName: <span class=\"string\">'Bar'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  computed: &#123;</span><br><span class=\"line\">  fullName：&#123;</span><br><span class=\"line\">   <span class=\"keyword\">get</span>()&#123;<span class=\"comment\">//回调函数 当需要读取当前属性值是执行，根据相关数据计算并返回当前属性的值</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.firstName + <span class=\"string\">' '</span> + <span class=\"keyword\">this</span>.lastName</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">   <span class=\"keyword\">set</span>(val)&#123;<span class=\"comment\">//监视当前属性值的变化，当属性值发生变化时执行，更新相关的属性数据</span></span><br><span class=\"line\">       <span class=\"comment\">//val就是fullName的最新属性值</span></span><br><span class=\"line\">       <span class=\"built_in\">console</span>.log(val)</span><br><span class=\"line\">        <span class=\"keyword\">const</span> names = val.split(<span class=\"string\">' '</span>);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(names)</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.firstName = names[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.lastName = names[<span class=\"number\">1</span>];</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>computed有缓存，data不变则不会重新计算</strong></p>\n<h3 id=\"watch\"><a href=\"#watch\" class=\"headerlink\" title=\"watch\"></a>watch</h3><p>watch是一个观察的动作</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data: &#123;</span><br><span class=\"line\">    firstName: <span class=\"string\">'Foo'</span>,</span><br><span class=\"line\">    lastName: <span class=\"string\">'Bar'</span>,</span><br><span class=\"line\">    fullName: <span class=\"string\">'Foo Bar'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  watch: &#123;</span><br><span class=\"line\">     firstName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">this</span>.fullName = val + <span class=\"string\">' '</span> + <span class=\"keyword\">this</span>.lastName</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  lastName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">this</span>.fullName = <span class=\"keyword\">this</span>.firstName + <span class=\"string\">' '</span> + val</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"简单数据类型\"><a href=\"#简单数据类型\" class=\"headerlink\" title=\"简单数据类型\"></a>简单数据类型</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data()&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>&#123;</span><br><span class=\"line\">        <span class=\"string\">'first'</span>:<span class=\"number\">2</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    watch:&#123;</span><br><span class=\"line\">      first()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.first)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br></pre></td></tr></table></figure>\n<h4 id=\"复杂数据类型\"><a href=\"#复杂数据类型\" class=\"headerlink\" title=\"复杂数据类型\"></a>复杂数据类型</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data()&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>&#123;</span><br><span class=\"line\">        <span class=\"string\">'first'</span>:&#123;</span><br><span class=\"line\">          second:<span class=\"number\">0</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    watch:&#123;</span><br><span class=\"line\">      secondChange:&#123;</span><br><span class=\"line\">        handler(oldVal,newVal)&#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(oldVal)</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(newVal)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        deep:<span class=\"literal\">true</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p><strong>console.log打印的结果,发现oldVal和newVal值是一样的,所以深度监听虽然可以监听到对象的变化,但是无法监听到具体对象里面那个属性的变化（只针对引用类型）</strong></p>\n</li>\n<li><p>oldVal和newVal值一样的原因是它们索引同一个对象/数组。Vue <strong>不会保留修改之前值的副本</strong></p>\n</li>\n<li><p>深度监听对应的函数名必须为handler,否则无效果,因为watcher里面对应的是对handler的调用</p>\n</li>\n</ul>\n<h4 id=\"监听对象单个属性\"><a href=\"#监听对象单个属性\" class=\"headerlink\" title=\"监听对象单个属性\"></a>监听对象单个属性</h4><h5 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    first: &#123;</span><br><span class=\"line\">      second: <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">watch: &#123;</span><br><span class=\"line\">  <span class=\"string\">\"first.second\"</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">newVal, oldVal</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(newVal, oldVal);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h5><p>用computed作为中间件转化,因为computed可以取到对应的属性值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    first: &#123;</span><br><span class=\"line\">      second: <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  secondChange() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.first.second;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">watch: &#123;</span><br><span class=\"line\">  secondChange() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"second属性值变化了\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"computed和watch的区别\"><a href=\"#computed和watch的区别\" class=\"headerlink\" title=\"computed和watch的区别\"></a>computed和watch的区别</h3><h4 id=\"computed特性\"><a href=\"#computed特性\" class=\"headerlink\" title=\"computed特性\"></a>computed特性</h4><ol>\n<li>是计算值</li>\n<li>应用：就是简化tempalte里面双花括号计算和处理props或$emit的传值</li>\n<li>具有缓存性，页面重新渲染值不变化,计算属性会立即返回之前的计算结果，而不必再次执行函数</li>\n</ol>\n<h4 id=\"watch特性\"><a href=\"#watch特性\" class=\"headerlink\" title=\"watch特性\"></a>watch特性</h4><ol>\n<li>是观察的动作</li>\n<li>应用：监听props，$emit或本组件的值执行异步操作</li>\n<li>无缓存性，页面重新渲染时值不变化也会执行</li>\n</ol>\n<h2 id=\"class和style\"><a href=\"#class和style\" class=\"headerlink\" title=\"class和style\"></a>class和style</h2><ul>\n<li>使用动态属性</li>\n<li>使用驼峰式写法</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">:class</span>=<span class=\"string\">\"&#123; black: isBlack, yellow: isYellow &#125;\"</span>&gt;</span>使用 class<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">:class</span>=<span class=\"string\">\"[black, yellow]\"</span>&gt;</span>使用 class （数组）<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">:style</span>=<span class=\"string\">\"styleData\"</span>&gt;</span>使用 style<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">            isBlack: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">            isYellow: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">            black: <span class=\"string\">'black'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">            yellow: <span class=\"string\">'yellow'</span>,</span></span><br><span class=\"line\"></span><br><span class=\"line\">            styleData: &#123;</span><br><span class=\"line\"><span class=\"actionscript\">                fontSize: <span class=\"string\">'40px'</span>, <span class=\"comment\">// 转换为驼峰式</span></span></span><br><span class=\"line\"><span class=\"actionscript\">                color: <span class=\"string\">'red'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">                backgroundColor: <span class=\"string\">'#ccc'</span> <span class=\"comment\">// 转换为驼峰式</span></span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">scoped</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.black</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#999</span>;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.yellow</span> &#123;</span></span><br><span class=\"line\">        color: yellow;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"条件渲染\"><a href=\"#条件渲染\" class=\"headerlink\" title=\"条件渲染\"></a>条件渲染</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"type === 'a'\"</span>&gt;</span>A<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-else-if</span>=<span class=\"string\">\"type === 'b'\"</span>&gt;</span>B<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-else</span>&gt;</span>other<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-show</span>=<span class=\"string\">\"type === 'a'\"</span>&gt;</span>A by v-show<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-show</span>=<span class=\"string\">\"type === 'b'\"</span>&gt;</span>B by v-show<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">            type: <span class=\"string\">'a'</span></span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"v-if和v-show\"><a href=\"#v-if和v-show\" class=\"headerlink\" title=\"v-if和v-show\"></a>v-if和v-show</h4><ul>\n<li>v-if是false时候不会渲染dom，v-show则是display:none</li>\n<li>频繁切换使用v-show,不会频繁渲染dom</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"插值表达式\"><a href=\"#插值表达式\" class=\"headerlink\" title=\"插值表达式\"></a>插值表达式</h2>","more":"<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>文本插值 &#123;&#123;message&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>JS 表达式 &#123;&#123; flag ? 'yes' : 'no' &#125;&#125; （只能是表达式，不能是 js 语句）<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">:id</span>=<span class=\"string\">\"dynamicId\"</span>&gt;</span>动态属性 id<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">hr</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-html</span>=<span class=\"string\">\"rawHtml\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>有 xss 风险<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>【注意】使用 v-html 之后，将会覆盖子元素<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 其他常用指令后面讲 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">            message: <span class=\"string\">'hello vue'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">            flag: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">            rawHtml: '指令 - 原始 html <span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span>加粗<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span>斜体<span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span>',</span></span></span><br><span class=\"line\"><span class=\"javascript\">            dynamicId: <span class=\"string\">`id-<span class=\"subst\">$&#123;<span class=\"built_in\">Date</span>.now()&#125;</span>`</span></span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"computed和watch\"><a href=\"#computed和watch\" class=\"headerlink\" title=\"computed和watch\"></a>computed和watch</h2><h3 id=\"computed\"><a href=\"#computed\" class=\"headerlink\" title=\"computed\"></a>computed</h3><p>一个计算属性,类似于过滤器,对绑定到view的数据进行处理。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data: &#123;</span><br><span class=\"line\">   firstName: <span class=\"string\">'Foo'</span>,</span><br><span class=\"line\">   lastName: <span class=\"string\">'Bar'</span></span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"> computed: &#123;</span><br><span class=\"line\">   fullName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.firstName + <span class=\"string\">' '</span> + <span class=\"keyword\">this</span>.lastName</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p><strong>fullName不可在data里面定义</strong></p>\n<h4 id=\"get和set用法\"><a href=\"#get和set用法\" class=\"headerlink\" title=\"get和set用法\"></a>get和set用法</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data: &#123;</span><br><span class=\"line\">    firstName: <span class=\"string\">'Foo'</span>,</span><br><span class=\"line\">    lastName: <span class=\"string\">'Bar'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  computed: &#123;</span><br><span class=\"line\">  fullName：&#123;</span><br><span class=\"line\">   <span class=\"keyword\">get</span>()&#123;<span class=\"comment\">//回调函数 当需要读取当前属性值是执行，根据相关数据计算并返回当前属性的值</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.firstName + <span class=\"string\">' '</span> + <span class=\"keyword\">this</span>.lastName</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">   <span class=\"keyword\">set</span>(val)&#123;<span class=\"comment\">//监视当前属性值的变化，当属性值发生变化时执行，更新相关的属性数据</span></span><br><span class=\"line\">       <span class=\"comment\">//val就是fullName的最新属性值</span></span><br><span class=\"line\">       <span class=\"built_in\">console</span>.log(val)</span><br><span class=\"line\">        <span class=\"keyword\">const</span> names = val.split(<span class=\"string\">' '</span>);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(names)</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.firstName = names[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.lastName = names[<span class=\"number\">1</span>];</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>computed有缓存，data不变则不会重新计算</strong></p>\n<h3 id=\"watch\"><a href=\"#watch\" class=\"headerlink\" title=\"watch\"></a>watch</h3><p>watch是一个观察的动作</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data: &#123;</span><br><span class=\"line\">    firstName: <span class=\"string\">'Foo'</span>,</span><br><span class=\"line\">    lastName: <span class=\"string\">'Bar'</span>,</span><br><span class=\"line\">    fullName: <span class=\"string\">'Foo Bar'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  watch: &#123;</span><br><span class=\"line\">     firstName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">this</span>.fullName = val + <span class=\"string\">' '</span> + <span class=\"keyword\">this</span>.lastName</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  lastName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">this</span>.fullName = <span class=\"keyword\">this</span>.firstName + <span class=\"string\">' '</span> + val</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"简单数据类型\"><a href=\"#简单数据类型\" class=\"headerlink\" title=\"简单数据类型\"></a>简单数据类型</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data()&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>&#123;</span><br><span class=\"line\">        <span class=\"string\">'first'</span>:<span class=\"number\">2</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    watch:&#123;</span><br><span class=\"line\">      first()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.first)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br></pre></td></tr></table></figure>\n<h4 id=\"复杂数据类型\"><a href=\"#复杂数据类型\" class=\"headerlink\" title=\"复杂数据类型\"></a>复杂数据类型</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data()&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>&#123;</span><br><span class=\"line\">        <span class=\"string\">'first'</span>:&#123;</span><br><span class=\"line\">          second:<span class=\"number\">0</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    watch:&#123;</span><br><span class=\"line\">      secondChange:&#123;</span><br><span class=\"line\">        handler(oldVal,newVal)&#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(oldVal)</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(newVal)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        deep:<span class=\"literal\">true</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p><strong>console.log打印的结果,发现oldVal和newVal值是一样的,所以深度监听虽然可以监听到对象的变化,但是无法监听到具体对象里面那个属性的变化（只针对引用类型）</strong></p>\n</li>\n<li><p>oldVal和newVal值一样的原因是它们索引同一个对象/数组。Vue <strong>不会保留修改之前值的副本</strong></p>\n</li>\n<li><p>深度监听对应的函数名必须为handler,否则无效果,因为watcher里面对应的是对handler的调用</p>\n</li>\n</ul>\n<h4 id=\"监听对象单个属性\"><a href=\"#监听对象单个属性\" class=\"headerlink\" title=\"监听对象单个属性\"></a>监听对象单个属性</h4><h5 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    first: &#123;</span><br><span class=\"line\">      second: <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">watch: &#123;</span><br><span class=\"line\">  <span class=\"string\">\"first.second\"</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">newVal, oldVal</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(newVal, oldVal);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h5><p>用computed作为中间件转化,因为computed可以取到对应的属性值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    first: &#123;</span><br><span class=\"line\">      second: <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  secondChange() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.first.second;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">watch: &#123;</span><br><span class=\"line\">  secondChange() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"second属性值变化了\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"computed和watch的区别\"><a href=\"#computed和watch的区别\" class=\"headerlink\" title=\"computed和watch的区别\"></a>computed和watch的区别</h3><h4 id=\"computed特性\"><a href=\"#computed特性\" class=\"headerlink\" title=\"computed特性\"></a>computed特性</h4><ol>\n<li>是计算值</li>\n<li>应用：就是简化tempalte里面双花括号计算和处理props或$emit的传值</li>\n<li>具有缓存性，页面重新渲染值不变化,计算属性会立即返回之前的计算结果，而不必再次执行函数</li>\n</ol>\n<h4 id=\"watch特性\"><a href=\"#watch特性\" class=\"headerlink\" title=\"watch特性\"></a>watch特性</h4><ol>\n<li>是观察的动作</li>\n<li>应用：监听props，$emit或本组件的值执行异步操作</li>\n<li>无缓存性，页面重新渲染时值不变化也会执行</li>\n</ol>\n<h2 id=\"class和style\"><a href=\"#class和style\" class=\"headerlink\" title=\"class和style\"></a>class和style</h2><ul>\n<li>使用动态属性</li>\n<li>使用驼峰式写法</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">:class</span>=<span class=\"string\">\"&#123; black: isBlack, yellow: isYellow &#125;\"</span>&gt;</span>使用 class<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">:class</span>=<span class=\"string\">\"[black, yellow]\"</span>&gt;</span>使用 class （数组）<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">:style</span>=<span class=\"string\">\"styleData\"</span>&gt;</span>使用 style<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">            isBlack: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">            isYellow: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">            black: <span class=\"string\">'black'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">            yellow: <span class=\"string\">'yellow'</span>,</span></span><br><span class=\"line\"></span><br><span class=\"line\">            styleData: &#123;</span><br><span class=\"line\"><span class=\"actionscript\">                fontSize: <span class=\"string\">'40px'</span>, <span class=\"comment\">// 转换为驼峰式</span></span></span><br><span class=\"line\"><span class=\"actionscript\">                color: <span class=\"string\">'red'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">                backgroundColor: <span class=\"string\">'#ccc'</span> <span class=\"comment\">// 转换为驼峰式</span></span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">scoped</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.black</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#999</span>;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.yellow</span> &#123;</span></span><br><span class=\"line\">        color: yellow;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"条件渲染\"><a href=\"#条件渲染\" class=\"headerlink\" title=\"条件渲染\"></a>条件渲染</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"type === 'a'\"</span>&gt;</span>A<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-else-if</span>=<span class=\"string\">\"type === 'b'\"</span>&gt;</span>B<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-else</span>&gt;</span>other<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-show</span>=<span class=\"string\">\"type === 'a'\"</span>&gt;</span>A by v-show<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-show</span>=<span class=\"string\">\"type === 'b'\"</span>&gt;</span>B by v-show<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">            type: <span class=\"string\">'a'</span></span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"v-if和v-show\"><a href=\"#v-if和v-show\" class=\"headerlink\" title=\"v-if和v-show\"></a>v-if和v-show</h4><ul>\n<li>v-if是false时候不会渲染dom，v-show则是display:none</li>\n<li>频繁切换使用v-show,不会频繁渲染dom</li>\n</ul>"},{"layout":"[post]","title":"Vue基础二","date":"2019-11-01T09:50:02.000Z","_content":"## 循环渲染\n<!-- more -->\n```html\n<template>\n    <div>\n        <p>遍历数组</p>\n        <ul>\n            <li v-for=\"(item, index) in listArr\" :key=\"item.id\">\n                {{index}} - {{item.id}} - {{item.title}}\n            </li>\n        </ul>\n\n        <p>遍历对象</p>\n        <ul >\n            <li v-for=\"(val, key, index) in listObj\" :key=\"key\">\n                {{index}} - {{key}} -  {{val.title}}\n            </li>\n        </ul>\n    </div>\n</template>\n\n<script>\nexport default {\n    data() {\n        return {\n            flag: false,\n            listArr: [\n                { id: 'a', title: '标题1' }, // 数据结构中，最好有 id ，方便使用 key\n                { id: 'b', title: '标题2' },\n                { id: 'c', title: '标题3' }\n            ],\n            listObj: {\n                a: { title: '标题1' },\n                b: { title: '标题2' },\n                c: { title: '标题3' },\n            }\n        }\n    }\n}\n</script>\n```\n- v-for不光能遍历数组，也可以遍历对象\n- v-for和v-if不能同时使用\n\n## 事件\n\n```html\n<template>\n    <div>\n        <p>{{num}}</p>\n        <button @click=\"increment1\">+1</button>\n        <button @click=\"increment2(2, $event)\">+2</button>\n    </div>\n</template>\n\n<script>\nexport default {\n    data() {\n        return {\n            num: 0\n        }\n    },\n    methods: {\n        increment1(event) {\n            // eslint-disable-next-line\n            console.log('event', event, event.__proto__.constructor) // 是原生的 event 对象\n            // eslint-disable-next-line\n            console.log(event.target)\n            // eslint-disable-next-line\n            console.log(event.currentTarget) // 注意，事件是被注册到当前元素的，和 React 不一样\n            this.num++\n\n            // 1. event 是原生的\n            // 2. 事件被挂载到当前元素\n            // 和 DOM 事件一样\n        },\n        increment2(val, event) {\n            // eslint-disable-next-line\n            console.log(event.target)\n            this.num = this.num + val\n        },\n        loadHandler() {\n            // do some thing\n        }\n    },\n    mounted() {\n        window.addEventListener('load', this.loadHandler)\n    },\n    beforeDestroy() {\n        //【注意】用 vue 绑定的事件，组建销毁时会自动被解绑\n        // 自己绑定的事件，需要自己销毁！！！\n        window.removeEventListener('load', this.loadHandler)\n    }\n}\n</script>\n```\n\n## 表单\n\n```html\n<template>\n    <div>\n        <p>输入框: {{name}}</p>\n        <input type=\"text\" v-model.trim=\"name\"/>\n        <input type=\"text\" v-model.lazy=\"name\"/>\n        <input type=\"text\" v-model.number=\"age\"/>\n\n        <p>多行文本: {{desc}}</p>\n        <textarea v-model=\"desc\"></textarea>\n        <!-- 注意，<textarea>{{desc}}</textarea> 是不允许的！！！ -->\n\n        <p>复选框 {{checked}}</p>\n        <input type=\"checkbox\" v-model=\"checked\"/>\n\n        <p>多个复选框 {{checkedNames}}</p>\n        <input type=\"checkbox\" id=\"jack\" value=\"Jack\" v-model=\"checkedNames\">\n        <label for=\"jack\">Jack</label>\n        <input type=\"checkbox\" id=\"john\" value=\"John\" v-model=\"checkedNames\">\n        <label for=\"john\">John</label>\n        <input type=\"checkbox\" id=\"mike\" value=\"Mike\" v-model=\"checkedNames\">\n        <label for=\"mike\">Mike</label>\n\n        <p>单选 {{gender}}</p>\n        <input type=\"radio\" id=\"male\" value=\"male\" v-model=\"gender\"/>\n        <label for=\"male\">男</label>\n        <input type=\"radio\" id=\"female\" value=\"female\" v-model=\"gender\"/>\n        <label for=\"female\">女</label>\n\n        <p>下拉列表选择 {{selected}}</p>\n        <select v-model=\"selected\">\n            <option disabled value=\"\">请选择</option>\n            <option>A</option>\n            <option>B</option>\n            <option>C</option>\n        </select>\n\n        <p>下拉列表选择（多选） {{selectedList}}</p>\n        <select v-model=\"selectedList\" multiple>\n            <option disabled value=\"\">请选择</option>\n            <option>A</option>\n            <option>B</option>\n            <option>C</option>\n        </select>\n    </div>\n</template>\n\n<script>\nexport default {\n    data() {\n        return {\n            name: '双越',\n            age: 18,\n            desc: '自我介绍',\n\n            checked: true,\n            checkedNames: [],\n\n            gender: 'male',\n\n            selected: '',\n            selectedList: []\n        }\n    }\n}\n</script>\n```\n","source":"_posts/Vue基础二.md","raw":"---\nlayout: '[post]'\ntitle: Vue基础二\ndate: 2019-11-01 17:50:02\ntags: Vue\n---\n## 循环渲染\n<!-- more -->\n```html\n<template>\n    <div>\n        <p>遍历数组</p>\n        <ul>\n            <li v-for=\"(item, index) in listArr\" :key=\"item.id\">\n                {{index}} - {{item.id}} - {{item.title}}\n            </li>\n        </ul>\n\n        <p>遍历对象</p>\n        <ul >\n            <li v-for=\"(val, key, index) in listObj\" :key=\"key\">\n                {{index}} - {{key}} -  {{val.title}}\n            </li>\n        </ul>\n    </div>\n</template>\n\n<script>\nexport default {\n    data() {\n        return {\n            flag: false,\n            listArr: [\n                { id: 'a', title: '标题1' }, // 数据结构中，最好有 id ，方便使用 key\n                { id: 'b', title: '标题2' },\n                { id: 'c', title: '标题3' }\n            ],\n            listObj: {\n                a: { title: '标题1' },\n                b: { title: '标题2' },\n                c: { title: '标题3' },\n            }\n        }\n    }\n}\n</script>\n```\n- v-for不光能遍历数组，也可以遍历对象\n- v-for和v-if不能同时使用\n\n## 事件\n\n```html\n<template>\n    <div>\n        <p>{{num}}</p>\n        <button @click=\"increment1\">+1</button>\n        <button @click=\"increment2(2, $event)\">+2</button>\n    </div>\n</template>\n\n<script>\nexport default {\n    data() {\n        return {\n            num: 0\n        }\n    },\n    methods: {\n        increment1(event) {\n            // eslint-disable-next-line\n            console.log('event', event, event.__proto__.constructor) // 是原生的 event 对象\n            // eslint-disable-next-line\n            console.log(event.target)\n            // eslint-disable-next-line\n            console.log(event.currentTarget) // 注意，事件是被注册到当前元素的，和 React 不一样\n            this.num++\n\n            // 1. event 是原生的\n            // 2. 事件被挂载到当前元素\n            // 和 DOM 事件一样\n        },\n        increment2(val, event) {\n            // eslint-disable-next-line\n            console.log(event.target)\n            this.num = this.num + val\n        },\n        loadHandler() {\n            // do some thing\n        }\n    },\n    mounted() {\n        window.addEventListener('load', this.loadHandler)\n    },\n    beforeDestroy() {\n        //【注意】用 vue 绑定的事件，组建销毁时会自动被解绑\n        // 自己绑定的事件，需要自己销毁！！！\n        window.removeEventListener('load', this.loadHandler)\n    }\n}\n</script>\n```\n\n## 表单\n\n```html\n<template>\n    <div>\n        <p>输入框: {{name}}</p>\n        <input type=\"text\" v-model.trim=\"name\"/>\n        <input type=\"text\" v-model.lazy=\"name\"/>\n        <input type=\"text\" v-model.number=\"age\"/>\n\n        <p>多行文本: {{desc}}</p>\n        <textarea v-model=\"desc\"></textarea>\n        <!-- 注意，<textarea>{{desc}}</textarea> 是不允许的！！！ -->\n\n        <p>复选框 {{checked}}</p>\n        <input type=\"checkbox\" v-model=\"checked\"/>\n\n        <p>多个复选框 {{checkedNames}}</p>\n        <input type=\"checkbox\" id=\"jack\" value=\"Jack\" v-model=\"checkedNames\">\n        <label for=\"jack\">Jack</label>\n        <input type=\"checkbox\" id=\"john\" value=\"John\" v-model=\"checkedNames\">\n        <label for=\"john\">John</label>\n        <input type=\"checkbox\" id=\"mike\" value=\"Mike\" v-model=\"checkedNames\">\n        <label for=\"mike\">Mike</label>\n\n        <p>单选 {{gender}}</p>\n        <input type=\"radio\" id=\"male\" value=\"male\" v-model=\"gender\"/>\n        <label for=\"male\">男</label>\n        <input type=\"radio\" id=\"female\" value=\"female\" v-model=\"gender\"/>\n        <label for=\"female\">女</label>\n\n        <p>下拉列表选择 {{selected}}</p>\n        <select v-model=\"selected\">\n            <option disabled value=\"\">请选择</option>\n            <option>A</option>\n            <option>B</option>\n            <option>C</option>\n        </select>\n\n        <p>下拉列表选择（多选） {{selectedList}}</p>\n        <select v-model=\"selectedList\" multiple>\n            <option disabled value=\"\">请选择</option>\n            <option>A</option>\n            <option>B</option>\n            <option>C</option>\n        </select>\n    </div>\n</template>\n\n<script>\nexport default {\n    data() {\n        return {\n            name: '双越',\n            age: 18,\n            desc: '自我介绍',\n\n            checked: true,\n            checkedNames: [],\n\n            gender: 'male',\n\n            selected: '',\n            selectedList: []\n        }\n    }\n}\n</script>\n```\n","slug":"Vue基础二","published":1,"updated":"2020-05-06T09:58:50.000Z","_id":"ck9v62x72000dqqs666d4bbrj","comments":1,"photos":[],"link":"","content":"<h2 id=\"循环渲染\"><a href=\"#循环渲染\" class=\"headerlink\" title=\"循环渲染\"></a>循环渲染</h2><a id=\"more\"></a>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>遍历数组<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(item, index) in listArr\"</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"item.id\"</span>&gt;</span></span><br><span class=\"line\">                &#123;&#123;index&#125;&#125; - &#123;&#123;item.id&#125;&#125; - &#123;&#123;item.title&#125;&#125;</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>遍历对象<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ul</span> &gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(val, key, index) in listObj\"</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"key\"</span>&gt;</span></span><br><span class=\"line\">                &#123;&#123;index&#125;&#125; - &#123;&#123;key&#125;&#125; -  &#123;&#123;val.title&#125;&#125;</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">            flag: <span class=\"literal\">false</span>,</span></span><br><span class=\"line\">            listArr: [</span><br><span class=\"line\"><span class=\"actionscript\">                &#123; id: <span class=\"string\">'a'</span>, title: <span class=\"string\">'标题1'</span> &#125;, <span class=\"comment\">// 数据结构中，最好有 id ，方便使用 key</span></span></span><br><span class=\"line\"><span class=\"actionscript\">                &#123; id: <span class=\"string\">'b'</span>, title: <span class=\"string\">'标题2'</span> &#125;,</span></span><br><span class=\"line\"><span class=\"actionscript\">                &#123; id: <span class=\"string\">'c'</span>, title: <span class=\"string\">'标题3'</span> &#125;</span></span><br><span class=\"line\">            ],</span><br><span class=\"line\">            listObj: &#123;</span><br><span class=\"line\"><span class=\"actionscript\">                a: &#123; title: <span class=\"string\">'标题1'</span> &#125;,</span></span><br><span class=\"line\"><span class=\"actionscript\">                b: &#123; title: <span class=\"string\">'标题2'</span> &#125;,</span></span><br><span class=\"line\"><span class=\"actionscript\">                c: &#123; title: <span class=\"string\">'标题3'</span> &#125;,</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>v-for不光能遍历数组，也可以遍历对象</li>\n<li>v-for和v-if不能同时使用</li>\n</ul>\n<h2 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;num&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"increment1\"</span>&gt;</span>+1<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"increment2(2, $event)\"</span>&gt;</span>+2<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\">            num: 0</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        increment1(event) &#123;</span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// eslint-disable-next-line</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'event'</span>, event, event.__proto__.constructor) <span class=\"comment\">// 是原生的 event 对象</span></span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// eslint-disable-next-line</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(event.target)</span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// eslint-disable-next-line</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(event.currentTarget) <span class=\"comment\">// 注意，事件是被注册到当前元素的，和 React 不一样</span></span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"keyword\">this</span>.num++</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// 1. event 是原生的</span></span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// 2. 事件被挂载到当前元素</span></span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// 和 DOM 事件一样</span></span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        increment2(val, event) &#123;</span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// eslint-disable-next-line</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(event.target)</span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"keyword\">this</span>.num = <span class=\"keyword\">this</span>.num + val</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        loadHandler() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// do some thing</span></span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    mounted() &#123;</span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'load'</span>, <span class=\"keyword\">this</span>.loadHandler)</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    beforeDestroy() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">//【注意】用 vue 绑定的事件，组建销毁时会自动被解绑</span></span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// 自己绑定的事件，需要自己销毁！！！</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">window</span>.removeEventListener(<span class=\"string\">'load'</span>, <span class=\"keyword\">this</span>.loadHandler)</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"表单\"><a href=\"#表单\" class=\"headerlink\" title=\"表单\"></a>表单</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>输入框: &#123;&#123;name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">v-model.trim</span>=<span class=\"string\">\"name\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">v-model.lazy</span>=<span class=\"string\">\"name\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">v-model.number</span>=<span class=\"string\">\"age\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>多行文本: &#123;&#123;desc&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"desc\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 注意，&lt;textarea&gt;&#123;&#123;desc&#125;&#125;&lt;/textarea&gt; 是不允许的！！！ --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>复选框 &#123;&#123;checked&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"checked\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>多个复选框 &#123;&#123;checkedNames&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"jack\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Jack\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"checkedNames\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"jack\"</span>&gt;</span>Jack<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"john\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"John\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"checkedNames\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"john\"</span>&gt;</span>John<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"mike\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Mike\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"checkedNames\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"mike\"</span>&gt;</span>Mike<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>单选 &#123;&#123;gender&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"male\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"male\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"gender\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"male\"</span>&gt;</span>男<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"female\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"female\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"gender\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"female\"</span>&gt;</span>女<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>下拉列表选择 &#123;&#123;selected&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"selected\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">disabled</span> <span class=\"attr\">value</span>=<span class=\"string\">\"\"</span>&gt;</span>请选择<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>A<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>B<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>C<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>下拉列表选择（多选） &#123;&#123;selectedList&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"selectedList\"</span> <span class=\"attr\">multiple</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">disabled</span> <span class=\"attr\">value</span>=<span class=\"string\">\"\"</span>&gt;</span>请选择<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>A<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>B<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>C<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">            name: <span class=\"string\">'双越'</span>,</span></span><br><span class=\"line\">            age: 18,</span><br><span class=\"line\"><span class=\"actionscript\">            desc: <span class=\"string\">'自我介绍'</span>,</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">            checked: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\">            checkedNames: [],</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">            gender: <span class=\"string\">'male'</span>,</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">            selected: <span class=\"string\">''</span>,</span></span><br><span class=\"line\">            selectedList: []</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"循环渲染\"><a href=\"#循环渲染\" class=\"headerlink\" title=\"循环渲染\"></a>循环渲染</h2>","more":"<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>遍历数组<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(item, index) in listArr\"</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"item.id\"</span>&gt;</span></span><br><span class=\"line\">                &#123;&#123;index&#125;&#125; - &#123;&#123;item.id&#125;&#125; - &#123;&#123;item.title&#125;&#125;</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>遍历对象<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ul</span> &gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(val, key, index) in listObj\"</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"key\"</span>&gt;</span></span><br><span class=\"line\">                &#123;&#123;index&#125;&#125; - &#123;&#123;key&#125;&#125; -  &#123;&#123;val.title&#125;&#125;</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">            flag: <span class=\"literal\">false</span>,</span></span><br><span class=\"line\">            listArr: [</span><br><span class=\"line\"><span class=\"actionscript\">                &#123; id: <span class=\"string\">'a'</span>, title: <span class=\"string\">'标题1'</span> &#125;, <span class=\"comment\">// 数据结构中，最好有 id ，方便使用 key</span></span></span><br><span class=\"line\"><span class=\"actionscript\">                &#123; id: <span class=\"string\">'b'</span>, title: <span class=\"string\">'标题2'</span> &#125;,</span></span><br><span class=\"line\"><span class=\"actionscript\">                &#123; id: <span class=\"string\">'c'</span>, title: <span class=\"string\">'标题3'</span> &#125;</span></span><br><span class=\"line\">            ],</span><br><span class=\"line\">            listObj: &#123;</span><br><span class=\"line\"><span class=\"actionscript\">                a: &#123; title: <span class=\"string\">'标题1'</span> &#125;,</span></span><br><span class=\"line\"><span class=\"actionscript\">                b: &#123; title: <span class=\"string\">'标题2'</span> &#125;,</span></span><br><span class=\"line\"><span class=\"actionscript\">                c: &#123; title: <span class=\"string\">'标题3'</span> &#125;,</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>v-for不光能遍历数组，也可以遍历对象</li>\n<li>v-for和v-if不能同时使用</li>\n</ul>\n<h2 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;num&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"increment1\"</span>&gt;</span>+1<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"increment2(2, $event)\"</span>&gt;</span>+2<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\">            num: 0</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        increment1(event) &#123;</span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// eslint-disable-next-line</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'event'</span>, event, event.__proto__.constructor) <span class=\"comment\">// 是原生的 event 对象</span></span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// eslint-disable-next-line</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(event.target)</span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// eslint-disable-next-line</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(event.currentTarget) <span class=\"comment\">// 注意，事件是被注册到当前元素的，和 React 不一样</span></span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"keyword\">this</span>.num++</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// 1. event 是原生的</span></span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// 2. 事件被挂载到当前元素</span></span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// 和 DOM 事件一样</span></span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        increment2(val, event) &#123;</span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// eslint-disable-next-line</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(event.target)</span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"keyword\">this</span>.num = <span class=\"keyword\">this</span>.num + val</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        loadHandler() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// do some thing</span></span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    mounted() &#123;</span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'load'</span>, <span class=\"keyword\">this</span>.loadHandler)</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    beforeDestroy() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">//【注意】用 vue 绑定的事件，组建销毁时会自动被解绑</span></span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// 自己绑定的事件，需要自己销毁！！！</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">window</span>.removeEventListener(<span class=\"string\">'load'</span>, <span class=\"keyword\">this</span>.loadHandler)</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"表单\"><a href=\"#表单\" class=\"headerlink\" title=\"表单\"></a>表单</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>输入框: &#123;&#123;name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">v-model.trim</span>=<span class=\"string\">\"name\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">v-model.lazy</span>=<span class=\"string\">\"name\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">v-model.number</span>=<span class=\"string\">\"age\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>多行文本: &#123;&#123;desc&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"desc\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 注意，&lt;textarea&gt;&#123;&#123;desc&#125;&#125;&lt;/textarea&gt; 是不允许的！！！ --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>复选框 &#123;&#123;checked&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"checked\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>多个复选框 &#123;&#123;checkedNames&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"jack\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Jack\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"checkedNames\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"jack\"</span>&gt;</span>Jack<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"john\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"John\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"checkedNames\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"john\"</span>&gt;</span>John<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"mike\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Mike\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"checkedNames\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"mike\"</span>&gt;</span>Mike<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>单选 &#123;&#123;gender&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"male\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"male\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"gender\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"male\"</span>&gt;</span>男<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"female\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"female\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"gender\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"female\"</span>&gt;</span>女<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>下拉列表选择 &#123;&#123;selected&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"selected\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">disabled</span> <span class=\"attr\">value</span>=<span class=\"string\">\"\"</span>&gt;</span>请选择<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>A<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>B<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>C<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>下拉列表选择（多选） &#123;&#123;selectedList&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"selectedList\"</span> <span class=\"attr\">multiple</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">disabled</span> <span class=\"attr\">value</span>=<span class=\"string\">\"\"</span>&gt;</span>请选择<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>A<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>B<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>C<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">            name: <span class=\"string\">'双越'</span>,</span></span><br><span class=\"line\">            age: 18,</span><br><span class=\"line\"><span class=\"actionscript\">            desc: <span class=\"string\">'自我介绍'</span>,</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">            checked: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\">            checkedNames: [],</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">            gender: <span class=\"string\">'male'</span>,</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">            selected: <span class=\"string\">''</span>,</span></span><br><span class=\"line\">            selectedList: []</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>"},{"layout":"[post]","title":"Vue组件的高级特性","date":"2019-11-21T09:52:51.000Z","_content":"## 自定义v-model\n#### model.vue\n<!-- more -->\n```html\n<template>\n    <!-- 例如：vue 颜色选择 -->\n    <input type=\"text\"\n        :value=\"text1\"\n        @input=\"$emit('change1', $event.target.value)\"\n    >\n    <!--\n        1. 上面的 input 使用了 :value 而不是 v-model\n        2. 上面的 change1 和 model.event1 要对应起来\n        3. text1 属性对应起来\n    -->\n</template>\n\n<script>\nexport default {\n    model: {\n        prop: 'text1', // 对应 props text1\n        event: 'change1'\n    },\n    props: {\n        text1: String,\n        default() {\n            return ''\n        }\n    }\n}\n</script>\n```\n使用\n```html\n   <p>{{name}}</p>\n   <CustomVModel v-model=\"name\"/>\n```\n\n## $nextTick\n\n```html\n<template>\n  <div id=\"app\">\n    <ul ref=\"ul1\">\n        <li v-for=\"(item, index) in list\" :key=\"index\">\n            {{item}}\n        </li>\n    </ul>\n    <button @click=\"addItem\">添加一项</button>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'app',\n  data() {\n      return {\n        list: ['a', 'b', 'c']\n      }\n  },\n  methods: {\n    addItem() {\n        this.list.push(`${Date.now()}`)\n        this.list.push(`${Date.now()}`)\n        this.list.push(`${Date.now()}`)\n\n        // 1. 异步渲染，$nextTick 待 DOM 渲染完再回调\n        // 2. 页面渲染时会将 data 的修改做整合，多次 data 修改只会渲染一次\n        this.$nextTick(() => {\n          // 获取 DOM 元素\n          const ulElem = this.$refs.ul1\n          // eslint-disable-next-line\n          console.log( ulElem.childNodes.length )\n        })\n    }\n  }\n}\n</script>\n\n\n```\n\n## slot（插槽）\n### slot\n#### 子组件\n```html\n<template>\n    <a :href=\"url\">\n        <slot>\n            默认内容，即父组件没设置内容时，这里显示\n        </slot>\n    </a>\n</template>\n\n<script>\nexport default {\n    props: ['url'],\n    data() {\n        return {}\n    }\n}\n</script>\n```\n#### 父组件使用时\n\n```html\n <SlotDemo :url=\"website.url\">\n    {{website.title}}\n </SlotDemo>\n```\n### scope slot\n#### 子组件\n\n```html\n<template>\n    <a :href=\"url\">\n        <slot :slotData=\"website\">\n            {{website.subTitle}} <!-- 默认值显示 subTitle ，即父组件不传内容时 -->\n        </slot>\n    </a>\n</template>\n\n<script>\nexport default {\n    props: ['url'],\n    data() {\n        return {\n            website: {\n                url: 'http://wangEditor.com/',\n                title: 'wangEditor',\n                subTitle: '轻量级富文本编辑器'\n            }\n        }\n    }\n}\n</script>\n```\n#### 父组件\n\n```html\n        <ScopedSlotDemo :url=\"website.url\">\n            <template v-slot=\"slotProps\">\n                {{slotProps.slotData.title}}\n            </template>\n        </ScopedSlotDemo>\n```\n\n## 动态、异步组件\n### 动态组件\n#### 用法\n\n```html\n<component :is=\"xxxx(组件名称)\"/>\n// 此处需要写动态的名字（在data中绑定）\n```\n### 异步组件\n#### 使用\n```js\n  components: {\n        FormDemo: () => {\n            return import('../BaseUse/FormDemo')\n        }\n    },\n```\n或者\n\n```js\n  components: {\n        FormDemo: () => import('../BaseUse/FormDemo')\n    },\n```\n\n## keep-alive\n - vue内置组件，能在组件切换过程中将状态保留在内存中，防止重复渲染DOM\n - keep-alive是用在一个直属子组件被开关的情形，同时只有一个子组件在渲染，若有v-for则不会工作\n\n注：keep-alive是一个抽象组件，自身不会渲染一个DOM元素，也不会出现在父组件链中\n\n```html\n        <keep-alive> <!-- tab 切换 -->\n            <KeepAliveStageA v-if=\"state === 'A'\"/> <!-- v-show -->\n            <KeepAliveStageB v-if=\"state === 'B'\"/>\n            <KeepAliveStageC v-if=\"state === 'C'\"/>\n        </keep-alive>\n```\n区别：\n- v-if在切换过程中会销毁并创建\n- v-show在首次加载组件时，会三个同时创建\n- keep-alive会在在切换时候创建，但是不会销毁\n\n\n## mixin\n混入 (mixin) 提供了一种非常灵活的方式，来分发 Vue 组件中的可复用功能。一个混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被“混合”进入该组件本身的选项。\n### mixin.js\n```js\nexport default {\n    data() {\n        return {\n            city: '北京'\n        }\n    },\n    methods: {\n        showName() {\n            // eslint-disable-next-line\n            console.log(this.name)\n        }\n    },\n    mounted() {\n        // eslint-disable-next-line\n        console.log('mixin mounted', this.name)\n    }\n}\n\n```\n### 使用\n\n```html\n<template>\n    <div>\n        <p>{{name}} {{major}} {{city}}</p>\n        <button @click=\"showName\">显示姓名</button>\n    </div>\n</template>\n\n<script>\nimport myMixin from './mixin'\n\nexport default {\n    mixins: [myMixin], // 可以添加多个，会自动合并起来\n    data() {\n        return {\n            name: '双越',\n            major: 'web 前端'\n        }\n    },\n    methods: {\n    },\n    mounted() {\n        // eslint-disable-next-line\n        console.log('component mounted', this.name)\n    }\n}\n</script>\n```\n### 注意\n- mixin对象则local对象覆盖mixin对象\n- 生命周期钩子函数则是合并执行，先执行mixin后执行local\n\n### mixin的问题\n- 变量来源不明确，不利于阅读\n- 多mixin可能造成命名冲突\n- mixin和组件可能出现多对多的关系，复杂度高","source":"_posts/Vue组件的高级特性.md","raw":"---\nlayout: '[post]'\ntitle: Vue组件的高级特性\ndate: 2019-11-21 17:52:51\ntags: Vue\n---\n## 自定义v-model\n#### model.vue\n<!-- more -->\n```html\n<template>\n    <!-- 例如：vue 颜色选择 -->\n    <input type=\"text\"\n        :value=\"text1\"\n        @input=\"$emit('change1', $event.target.value)\"\n    >\n    <!--\n        1. 上面的 input 使用了 :value 而不是 v-model\n        2. 上面的 change1 和 model.event1 要对应起来\n        3. text1 属性对应起来\n    -->\n</template>\n\n<script>\nexport default {\n    model: {\n        prop: 'text1', // 对应 props text1\n        event: 'change1'\n    },\n    props: {\n        text1: String,\n        default() {\n            return ''\n        }\n    }\n}\n</script>\n```\n使用\n```html\n   <p>{{name}}</p>\n   <CustomVModel v-model=\"name\"/>\n```\n\n## $nextTick\n\n```html\n<template>\n  <div id=\"app\">\n    <ul ref=\"ul1\">\n        <li v-for=\"(item, index) in list\" :key=\"index\">\n            {{item}}\n        </li>\n    </ul>\n    <button @click=\"addItem\">添加一项</button>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'app',\n  data() {\n      return {\n        list: ['a', 'b', 'c']\n      }\n  },\n  methods: {\n    addItem() {\n        this.list.push(`${Date.now()}`)\n        this.list.push(`${Date.now()}`)\n        this.list.push(`${Date.now()}`)\n\n        // 1. 异步渲染，$nextTick 待 DOM 渲染完再回调\n        // 2. 页面渲染时会将 data 的修改做整合，多次 data 修改只会渲染一次\n        this.$nextTick(() => {\n          // 获取 DOM 元素\n          const ulElem = this.$refs.ul1\n          // eslint-disable-next-line\n          console.log( ulElem.childNodes.length )\n        })\n    }\n  }\n}\n</script>\n\n\n```\n\n## slot（插槽）\n### slot\n#### 子组件\n```html\n<template>\n    <a :href=\"url\">\n        <slot>\n            默认内容，即父组件没设置内容时，这里显示\n        </slot>\n    </a>\n</template>\n\n<script>\nexport default {\n    props: ['url'],\n    data() {\n        return {}\n    }\n}\n</script>\n```\n#### 父组件使用时\n\n```html\n <SlotDemo :url=\"website.url\">\n    {{website.title}}\n </SlotDemo>\n```\n### scope slot\n#### 子组件\n\n```html\n<template>\n    <a :href=\"url\">\n        <slot :slotData=\"website\">\n            {{website.subTitle}} <!-- 默认值显示 subTitle ，即父组件不传内容时 -->\n        </slot>\n    </a>\n</template>\n\n<script>\nexport default {\n    props: ['url'],\n    data() {\n        return {\n            website: {\n                url: 'http://wangEditor.com/',\n                title: 'wangEditor',\n                subTitle: '轻量级富文本编辑器'\n            }\n        }\n    }\n}\n</script>\n```\n#### 父组件\n\n```html\n        <ScopedSlotDemo :url=\"website.url\">\n            <template v-slot=\"slotProps\">\n                {{slotProps.slotData.title}}\n            </template>\n        </ScopedSlotDemo>\n```\n\n## 动态、异步组件\n### 动态组件\n#### 用法\n\n```html\n<component :is=\"xxxx(组件名称)\"/>\n// 此处需要写动态的名字（在data中绑定）\n```\n### 异步组件\n#### 使用\n```js\n  components: {\n        FormDemo: () => {\n            return import('../BaseUse/FormDemo')\n        }\n    },\n```\n或者\n\n```js\n  components: {\n        FormDemo: () => import('../BaseUse/FormDemo')\n    },\n```\n\n## keep-alive\n - vue内置组件，能在组件切换过程中将状态保留在内存中，防止重复渲染DOM\n - keep-alive是用在一个直属子组件被开关的情形，同时只有一个子组件在渲染，若有v-for则不会工作\n\n注：keep-alive是一个抽象组件，自身不会渲染一个DOM元素，也不会出现在父组件链中\n\n```html\n        <keep-alive> <!-- tab 切换 -->\n            <KeepAliveStageA v-if=\"state === 'A'\"/> <!-- v-show -->\n            <KeepAliveStageB v-if=\"state === 'B'\"/>\n            <KeepAliveStageC v-if=\"state === 'C'\"/>\n        </keep-alive>\n```\n区别：\n- v-if在切换过程中会销毁并创建\n- v-show在首次加载组件时，会三个同时创建\n- keep-alive会在在切换时候创建，但是不会销毁\n\n\n## mixin\n混入 (mixin) 提供了一种非常灵活的方式，来分发 Vue 组件中的可复用功能。一个混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被“混合”进入该组件本身的选项。\n### mixin.js\n```js\nexport default {\n    data() {\n        return {\n            city: '北京'\n        }\n    },\n    methods: {\n        showName() {\n            // eslint-disable-next-line\n            console.log(this.name)\n        }\n    },\n    mounted() {\n        // eslint-disable-next-line\n        console.log('mixin mounted', this.name)\n    }\n}\n\n```\n### 使用\n\n```html\n<template>\n    <div>\n        <p>{{name}} {{major}} {{city}}</p>\n        <button @click=\"showName\">显示姓名</button>\n    </div>\n</template>\n\n<script>\nimport myMixin from './mixin'\n\nexport default {\n    mixins: [myMixin], // 可以添加多个，会自动合并起来\n    data() {\n        return {\n            name: '双越',\n            major: 'web 前端'\n        }\n    },\n    methods: {\n    },\n    mounted() {\n        // eslint-disable-next-line\n        console.log('component mounted', this.name)\n    }\n}\n</script>\n```\n### 注意\n- mixin对象则local对象覆盖mixin对象\n- 生命周期钩子函数则是合并执行，先执行mixin后执行local\n\n### mixin的问题\n- 变量来源不明确，不利于阅读\n- 多mixin可能造成命名冲突\n- mixin和组件可能出现多对多的关系，复杂度高","slug":"Vue组件的高级特性","published":1,"updated":"2020-05-06T09:53:47.000Z","comments":1,"photos":[],"link":"","_id":"ck9v62x76000fqqs66k7x787y","content":"<h2 id=\"自定义v-model\"><a href=\"#自定义v-model\" class=\"headerlink\" title=\"自定义v-model\"></a>自定义v-model</h2><h4 id=\"model-vue\"><a href=\"#model-vue\" class=\"headerlink\" title=\"model.vue\"></a>model.vue</h4><a id=\"more\"></a>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 例如：vue 颜色选择 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">:value</span>=<span class=\"string\">\"text1\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        @<span class=\"attr\">input</span>=<span class=\"string\">\"$emit('change1', $event.target.value)\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    &gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">        1. 上面的 input 使用了 :value 而不是 v-model</span></span><br><span class=\"line\"><span class=\"comment\">        2. 上面的 change1 和 model.event1 要对应起来</span></span><br><span class=\"line\"><span class=\"comment\">        3. text1 属性对应起来</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\">    model: &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        prop: <span class=\"string\">'text1'</span>, <span class=\"comment\">// 对应 props text1</span></span></span><br><span class=\"line\"><span class=\"actionscript\">        event: <span class=\"string\">'change1'</span></span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    props: &#123;</span><br><span class=\"line\"><span class=\"javascript\">        text1: <span class=\"built_in\">String</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">default</span>() &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"keyword\">return</span> <span class=\"string\">''</span></span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>使用</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">CustomVModel</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"name\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"nextTick\"><a href=\"#nextTick\" class=\"headerlink\" title=\"$nextTick\"></a>$nextTick</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"ul1\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(item, index) in list\"</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"index\"</span>&gt;</span></span><br><span class=\"line\">            &#123;&#123;item&#125;&#125;</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"addItem\"</span>&gt;</span>添加一项<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">  name: <span class=\"string\">'app'</span>,</span></span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">        list: [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>]</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    addItem() &#123;</span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">this</span>.list.push(<span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"built_in\">Date</span>.now()&#125;</span>`</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">this</span>.list.push(<span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"built_in\">Date</span>.now()&#125;</span>`</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">this</span>.list.push(<span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"built_in\">Date</span>.now()&#125;</span>`</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// 1. 异步渲染，$nextTick 待 DOM 渲染完再回调</span></span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// 2. 页面渲染时会将 data 的修改做整合，多次 data 修改只会渲染一次</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">this</span>.$nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">          <span class=\"comment\">// 获取 DOM 元素</span></span></span><br><span class=\"line\"><span class=\"actionscript\">          <span class=\"keyword\">const</span> ulElem = <span class=\"keyword\">this</span>.$refs.ul1</span></span><br><span class=\"line\"><span class=\"actionscript\">          <span class=\"comment\">// eslint-disable-next-line</span></span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"built_in\">console</span>.log( ulElem.childNodes.length )</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"slot（插槽）\"><a href=\"#slot（插槽）\" class=\"headerlink\" title=\"slot（插槽）\"></a>slot（插槽）</h2><h3 id=\"slot\"><a href=\"#slot\" class=\"headerlink\" title=\"slot\"></a>slot</h3><h4 id=\"子组件\"><a href=\"#子组件\" class=\"headerlink\" title=\"子组件\"></a>子组件</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">:href</span>=<span class=\"string\">\"url\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">            默认内容，即父组件没设置内容时，这里显示</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">    props: [<span class=\"string\">'url'</span>],</span></span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">return</span> &#123;&#125;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"父组件使用时\"><a href=\"#父组件使用时\" class=\"headerlink\" title=\"父组件使用时\"></a>父组件使用时</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">SlotDemo</span> <span class=\"attr\">:url</span>=<span class=\"string\">\"website.url\"</span>&gt;</span></span><br><span class=\"line\">   &#123;&#123;website.title&#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">SlotDemo</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"scope-slot\"><a href=\"#scope-slot\" class=\"headerlink\" title=\"scope slot\"></a>scope slot</h3><h4 id=\"子组件-1\"><a href=\"#子组件-1\" class=\"headerlink\" title=\"子组件\"></a>子组件</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">:href</span>=<span class=\"string\">\"url\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">:slotData</span>=<span class=\"string\">\"website\"</span>&gt;</span></span><br><span class=\"line\">            &#123;&#123;website.subTitle&#125;&#125; <span class=\"comment\">&lt;!-- 默认值显示 subTitle ，即父组件不传内容时 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">    props: [<span class=\"string\">'url'</span>],</span></span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\">            website: &#123;</span><br><span class=\"line\"><span class=\"actionscript\">                url: <span class=\"string\">'http://wangEditor.com/'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">                title: <span class=\"string\">'wangEditor'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">                subTitle: <span class=\"string\">'轻量级富文本编辑器'</span></span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"父组件\"><a href=\"#父组件\" class=\"headerlink\" title=\"父组件\"></a>父组件</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ScopedSlotDemo</span> <span class=\"attr\">:url</span>=<span class=\"string\">\"website.url\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot</span>=<span class=\"string\">\"slotProps\"</span>&gt;</span></span><br><span class=\"line\">        &#123;&#123;slotProps.slotData.title&#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ScopedSlotDemo</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"动态、异步组件\"><a href=\"#动态、异步组件\" class=\"headerlink\" title=\"动态、异步组件\"></a>动态、异步组件</h2><h3 id=\"动态组件\"><a href=\"#动态组件\" class=\"headerlink\" title=\"动态组件\"></a>动态组件</h3><h4 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">\"xxxx(组件名称)\"</span>/&gt;</span></span><br><span class=\"line\">// 此处需要写动态的名字（在data中绑定）</span><br></pre></td></tr></table></figure>\n<h3 id=\"异步组件\"><a href=\"#异步组件\" class=\"headerlink\" title=\"异步组件\"></a>异步组件</h3><h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">components: &#123;</span><br><span class=\"line\">      FormDemo: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">import</span>(<span class=\"string\">'../BaseUse/FormDemo'</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">components: &#123;</span><br><span class=\"line\">      FormDemo: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">'../BaseUse/FormDemo'</span>)</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"keep-alive\"><a href=\"#keep-alive\" class=\"headerlink\" title=\"keep-alive\"></a>keep-alive</h2><ul>\n<li>vue内置组件，能在组件切换过程中将状态保留在内存中，防止重复渲染DOM</li>\n<li>keep-alive是用在一个直属子组件被开关的情形，同时只有一个子组件在渲染，若有v-for则不会工作</li>\n</ul>\n<p>注：keep-alive是一个抽象组件，自身不会渲染一个DOM元素，也不会出现在父组件链中</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">keep-alive</span>&gt;</span> <span class=\"comment\">&lt;!-- tab 切换 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">KeepAliveStageA</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"state === 'A'\"</span>/&gt;</span> <span class=\"comment\">&lt;!-- v-show --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">KeepAliveStageB</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"state === 'B'\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">KeepAliveStageC</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"state === 'C'\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>区别：</p>\n<ul>\n<li>v-if在切换过程中会销毁并创建</li>\n<li>v-show在首次加载组件时，会三个同时创建</li>\n<li>keep-alive会在在切换时候创建，但是不会销毁</li>\n</ul>\n<h2 id=\"mixin\"><a href=\"#mixin\" class=\"headerlink\" title=\"mixin\"></a>mixin</h2><p>混入 (mixin) 提供了一种非常灵活的方式，来分发 Vue 组件中的可复用功能。一个混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被“混合”进入该组件本身的选项。</p>\n<h3 id=\"mixin-js\"><a href=\"#mixin-js\" class=\"headerlink\" title=\"mixin.js\"></a>mixin.js</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            city: <span class=\"string\">'北京'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        showName() &#123;</span><br><span class=\"line\">            <span class=\"comment\">// eslint-disable-next-line</span></span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    mounted() &#123;</span><br><span class=\"line\">        <span class=\"comment\">// eslint-disable-next-line</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'mixin mounted'</span>, <span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用-1\"><a href=\"#使用-1\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;name&#125;&#125; &#123;&#123;major&#125;&#125; &#123;&#123;city&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"showName\"</span>&gt;</span>显示姓名<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span> myMixin <span class=\"keyword\">from</span> <span class=\"string\">'./mixin'</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">    mixins: [myMixin], <span class=\"comment\">// 可以添加多个，会自动合并起来</span></span></span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">            name: <span class=\"string\">'双越'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">            major: <span class=\"string\">'web 前端'</span></span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    mounted() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// eslint-disable-next-line</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'component mounted'</span>, <span class=\"keyword\">this</span>.name)</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><ul>\n<li>mixin对象则local对象覆盖mixin对象</li>\n<li>生命周期钩子函数则是合并执行，先执行mixin后执行local</li>\n</ul>\n<h3 id=\"mixin的问题\"><a href=\"#mixin的问题\" class=\"headerlink\" title=\"mixin的问题\"></a>mixin的问题</h3><ul>\n<li>变量来源不明确，不利于阅读</li>\n<li>多mixin可能造成命名冲突</li>\n<li>mixin和组件可能出现多对多的关系，复杂度高</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"自定义v-model\"><a href=\"#自定义v-model\" class=\"headerlink\" title=\"自定义v-model\"></a>自定义v-model</h2><h4 id=\"model-vue\"><a href=\"#model-vue\" class=\"headerlink\" title=\"model.vue\"></a>model.vue</h4>","more":"<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 例如：vue 颜色选择 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">:value</span>=<span class=\"string\">\"text1\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        @<span class=\"attr\">input</span>=<span class=\"string\">\"$emit('change1', $event.target.value)\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    &gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">        1. 上面的 input 使用了 :value 而不是 v-model</span></span><br><span class=\"line\"><span class=\"comment\">        2. 上面的 change1 和 model.event1 要对应起来</span></span><br><span class=\"line\"><span class=\"comment\">        3. text1 属性对应起来</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\">    model: &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        prop: <span class=\"string\">'text1'</span>, <span class=\"comment\">// 对应 props text1</span></span></span><br><span class=\"line\"><span class=\"actionscript\">        event: <span class=\"string\">'change1'</span></span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    props: &#123;</span><br><span class=\"line\"><span class=\"javascript\">        text1: <span class=\"built_in\">String</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">default</span>() &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"keyword\">return</span> <span class=\"string\">''</span></span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>使用</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">CustomVModel</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"name\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"nextTick\"><a href=\"#nextTick\" class=\"headerlink\" title=\"$nextTick\"></a>$nextTick</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"ul1\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(item, index) in list\"</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"index\"</span>&gt;</span></span><br><span class=\"line\">            &#123;&#123;item&#125;&#125;</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"addItem\"</span>&gt;</span>添加一项<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">  name: <span class=\"string\">'app'</span>,</span></span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">        list: [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>]</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    addItem() &#123;</span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">this</span>.list.push(<span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"built_in\">Date</span>.now()&#125;</span>`</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">this</span>.list.push(<span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"built_in\">Date</span>.now()&#125;</span>`</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">this</span>.list.push(<span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"built_in\">Date</span>.now()&#125;</span>`</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// 1. 异步渲染，$nextTick 待 DOM 渲染完再回调</span></span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// 2. 页面渲染时会将 data 的修改做整合，多次 data 修改只会渲染一次</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">this</span>.$nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">          <span class=\"comment\">// 获取 DOM 元素</span></span></span><br><span class=\"line\"><span class=\"actionscript\">          <span class=\"keyword\">const</span> ulElem = <span class=\"keyword\">this</span>.$refs.ul1</span></span><br><span class=\"line\"><span class=\"actionscript\">          <span class=\"comment\">// eslint-disable-next-line</span></span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"built_in\">console</span>.log( ulElem.childNodes.length )</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"slot（插槽）\"><a href=\"#slot（插槽）\" class=\"headerlink\" title=\"slot（插槽）\"></a>slot（插槽）</h2><h3 id=\"slot\"><a href=\"#slot\" class=\"headerlink\" title=\"slot\"></a>slot</h3><h4 id=\"子组件\"><a href=\"#子组件\" class=\"headerlink\" title=\"子组件\"></a>子组件</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">:href</span>=<span class=\"string\">\"url\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">            默认内容，即父组件没设置内容时，这里显示</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">    props: [<span class=\"string\">'url'</span>],</span></span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">return</span> &#123;&#125;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"父组件使用时\"><a href=\"#父组件使用时\" class=\"headerlink\" title=\"父组件使用时\"></a>父组件使用时</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">SlotDemo</span> <span class=\"attr\">:url</span>=<span class=\"string\">\"website.url\"</span>&gt;</span></span><br><span class=\"line\">   &#123;&#123;website.title&#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">SlotDemo</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"scope-slot\"><a href=\"#scope-slot\" class=\"headerlink\" title=\"scope slot\"></a>scope slot</h3><h4 id=\"子组件-1\"><a href=\"#子组件-1\" class=\"headerlink\" title=\"子组件\"></a>子组件</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">:href</span>=<span class=\"string\">\"url\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">:slotData</span>=<span class=\"string\">\"website\"</span>&gt;</span></span><br><span class=\"line\">            &#123;&#123;website.subTitle&#125;&#125; <span class=\"comment\">&lt;!-- 默认值显示 subTitle ，即父组件不传内容时 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">    props: [<span class=\"string\">'url'</span>],</span></span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\">            website: &#123;</span><br><span class=\"line\"><span class=\"actionscript\">                url: <span class=\"string\">'http://wangEditor.com/'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">                title: <span class=\"string\">'wangEditor'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">                subTitle: <span class=\"string\">'轻量级富文本编辑器'</span></span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"父组件\"><a href=\"#父组件\" class=\"headerlink\" title=\"父组件\"></a>父组件</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ScopedSlotDemo</span> <span class=\"attr\">:url</span>=<span class=\"string\">\"website.url\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot</span>=<span class=\"string\">\"slotProps\"</span>&gt;</span></span><br><span class=\"line\">        &#123;&#123;slotProps.slotData.title&#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ScopedSlotDemo</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"动态、异步组件\"><a href=\"#动态、异步组件\" class=\"headerlink\" title=\"动态、异步组件\"></a>动态、异步组件</h2><h3 id=\"动态组件\"><a href=\"#动态组件\" class=\"headerlink\" title=\"动态组件\"></a>动态组件</h3><h4 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">\"xxxx(组件名称)\"</span>/&gt;</span></span><br><span class=\"line\">// 此处需要写动态的名字（在data中绑定）</span><br></pre></td></tr></table></figure>\n<h3 id=\"异步组件\"><a href=\"#异步组件\" class=\"headerlink\" title=\"异步组件\"></a>异步组件</h3><h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">components: &#123;</span><br><span class=\"line\">      FormDemo: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">import</span>(<span class=\"string\">'../BaseUse/FormDemo'</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">components: &#123;</span><br><span class=\"line\">      FormDemo: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">'../BaseUse/FormDemo'</span>)</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"keep-alive\"><a href=\"#keep-alive\" class=\"headerlink\" title=\"keep-alive\"></a>keep-alive</h2><ul>\n<li>vue内置组件，能在组件切换过程中将状态保留在内存中，防止重复渲染DOM</li>\n<li>keep-alive是用在一个直属子组件被开关的情形，同时只有一个子组件在渲染，若有v-for则不会工作</li>\n</ul>\n<p>注：keep-alive是一个抽象组件，自身不会渲染一个DOM元素，也不会出现在父组件链中</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">keep-alive</span>&gt;</span> <span class=\"comment\">&lt;!-- tab 切换 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">KeepAliveStageA</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"state === 'A'\"</span>/&gt;</span> <span class=\"comment\">&lt;!-- v-show --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">KeepAliveStageB</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"state === 'B'\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">KeepAliveStageC</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"state === 'C'\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>区别：</p>\n<ul>\n<li>v-if在切换过程中会销毁并创建</li>\n<li>v-show在首次加载组件时，会三个同时创建</li>\n<li>keep-alive会在在切换时候创建，但是不会销毁</li>\n</ul>\n<h2 id=\"mixin\"><a href=\"#mixin\" class=\"headerlink\" title=\"mixin\"></a>mixin</h2><p>混入 (mixin) 提供了一种非常灵活的方式，来分发 Vue 组件中的可复用功能。一个混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被“混合”进入该组件本身的选项。</p>\n<h3 id=\"mixin-js\"><a href=\"#mixin-js\" class=\"headerlink\" title=\"mixin.js\"></a>mixin.js</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            city: <span class=\"string\">'北京'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        showName() &#123;</span><br><span class=\"line\">            <span class=\"comment\">// eslint-disable-next-line</span></span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    mounted() &#123;</span><br><span class=\"line\">        <span class=\"comment\">// eslint-disable-next-line</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'mixin mounted'</span>, <span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用-1\"><a href=\"#使用-1\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;name&#125;&#125; &#123;&#123;major&#125;&#125; &#123;&#123;city&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"showName\"</span>&gt;</span>显示姓名<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span> myMixin <span class=\"keyword\">from</span> <span class=\"string\">'./mixin'</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">    mixins: [myMixin], <span class=\"comment\">// 可以添加多个，会自动合并起来</span></span></span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">            name: <span class=\"string\">'双越'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">            major: <span class=\"string\">'web 前端'</span></span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    mounted() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// eslint-disable-next-line</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'component mounted'</span>, <span class=\"keyword\">this</span>.name)</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><ul>\n<li>mixin对象则local对象覆盖mixin对象</li>\n<li>生命周期钩子函数则是合并执行，先执行mixin后执行local</li>\n</ul>\n<h3 id=\"mixin的问题\"><a href=\"#mixin的问题\" class=\"headerlink\" title=\"mixin的问题\"></a>mixin的问题</h3><ul>\n<li>变量来源不明确，不利于阅读</li>\n<li>多mixin可能造成命名冲突</li>\n<li>mixin和组件可能出现多对多的关系，复杂度高</li>\n</ul>"},{"layout":"[post]","title":"Vue组件通讯","date":"2019-11-11T09:51:37.000Z","_content":"## prop和$emit\n<!-- more -->\n### index.vue\n\n```html\n<template>\n    <div>\n        <Input @add=\"addHandler\"/>\n        <List :list=\"list\" @delete=\"deleteHandler\"/>\n    </div>\n</template>\n\n<script>\nimport Input from './Input'\nimport List from './List'\n\nexport default {\n    components: {\n        Input,\n        List\n    },\n    data() {\n        return {\n            list: [\n                {\n                    id: 'id-1',\n                    title: '标题1'\n                },\n                {\n                    id: 'id-2',\n                    title: '标题2'\n                }\n            ]\n        }\n    },\n    methods: {\n        addHandler(title) {\n            this.list.push({\n                id: `id-${Date.now()}`,\n                title\n            })\n        },\n        deleteHandler(id) {\n            this.list = this.list.filter(item => item.id !== id)\n        }\n    },\n    created() {\n        // eslint-disable-next-line\n        console.log('index created')\n    },\n    mounted() {\n        // eslint-disable-next-line\n        console.log('index mounted')\n    },\n    beforeUpdate() {\n        // eslint-disable-next-line\n        console.log('index before update')\n    },\n    updated() {\n        // eslint-disable-next-line\n        console.log('index updated')\n    },\n}\n</script>\n```\n### input.vue\n\n```html\n<template>\n    <div>\n        <input type=\"text\" v-model=\"title\"/>\n        <button @click=\"addTitle\">add</button>\n    </div>\n</template>\n\n<script>\nimport event from './event'\n\nexport default {\n    data() {\n        return {\n            title: ''\n        }\n    },\n    methods: {\n        addTitle() {\n            // 调用父组件的事件\n            this.$emit('add', this.title)\n\n            // 调用自定义事件\n            event.$emit('onAddTitle', this.title)\n\n            this.title = ''\n        }\n    }\n}\n</script>\n```\n### list.vue\n\n```html\n<template>\n    <div>\n        <ul>\n            <li v-for=\"item in list\" :key=\"item.id\">\n                {{item.title}}\n\n                <button @click=\"deleteItem(item.id)\">删除</button>\n            </li>\n        </ul>\n    </div>\n</template>\n\n<script>\nimport event from './event'\n\nexport default {\n    // props: ['list']\n    props: {\n        // prop 类型和默认值\n        list: {\n            type: Array,\n            default() {\n                return []\n            }\n        }\n    },\n    data() {\n        return {\n\n        }\n    },\n    methods: {\n        deleteItem(id) {\n            this.$emit('delete', id)\n        },\n        addTitleHandler(title) {\n            // eslint-disable-next-line\n            console.log('on add title', title)\n        }\n    },\n    created() {\n        // eslint-disable-next-line\n        console.log('list created')\n    },\n    mounted() {\n        // eslint-disable-next-line\n        console.log('list mounted')\n\n        // 绑定自定义事件\n        event.$on('onAddTitle', this.addTitleHandler)\n    },\n    beforeUpdate() {\n        // eslint-disable-next-line\n        console.log('list before update')\n    },\n    updated() {\n        // eslint-disable-next-line\n        console.log('list updated')\n    },\n    beforeDestroy() {\n        // 及时销毁，否则可能造成内存泄露\n        event.$off('onAddTitle', this.addTitleHandler)\n    }\n}\n</script>\n```\n### event.js\n\n```js\nimport Vue from 'vue'\n\nexport default new Vue()\n\n```\n**在组件销毁时，需要销毁自定义事件。**\n","source":"_posts/Vue组件通讯.md","raw":"---\nlayout: '[post]'\ntitle: Vue组件通讯\ndate: 2019-11-11 17:51:37\ntags: Vue\n---\n## prop和$emit\n<!-- more -->\n### index.vue\n\n```html\n<template>\n    <div>\n        <Input @add=\"addHandler\"/>\n        <List :list=\"list\" @delete=\"deleteHandler\"/>\n    </div>\n</template>\n\n<script>\nimport Input from './Input'\nimport List from './List'\n\nexport default {\n    components: {\n        Input,\n        List\n    },\n    data() {\n        return {\n            list: [\n                {\n                    id: 'id-1',\n                    title: '标题1'\n                },\n                {\n                    id: 'id-2',\n                    title: '标题2'\n                }\n            ]\n        }\n    },\n    methods: {\n        addHandler(title) {\n            this.list.push({\n                id: `id-${Date.now()}`,\n                title\n            })\n        },\n        deleteHandler(id) {\n            this.list = this.list.filter(item => item.id !== id)\n        }\n    },\n    created() {\n        // eslint-disable-next-line\n        console.log('index created')\n    },\n    mounted() {\n        // eslint-disable-next-line\n        console.log('index mounted')\n    },\n    beforeUpdate() {\n        // eslint-disable-next-line\n        console.log('index before update')\n    },\n    updated() {\n        // eslint-disable-next-line\n        console.log('index updated')\n    },\n}\n</script>\n```\n### input.vue\n\n```html\n<template>\n    <div>\n        <input type=\"text\" v-model=\"title\"/>\n        <button @click=\"addTitle\">add</button>\n    </div>\n</template>\n\n<script>\nimport event from './event'\n\nexport default {\n    data() {\n        return {\n            title: ''\n        }\n    },\n    methods: {\n        addTitle() {\n            // 调用父组件的事件\n            this.$emit('add', this.title)\n\n            // 调用自定义事件\n            event.$emit('onAddTitle', this.title)\n\n            this.title = ''\n        }\n    }\n}\n</script>\n```\n### list.vue\n\n```html\n<template>\n    <div>\n        <ul>\n            <li v-for=\"item in list\" :key=\"item.id\">\n                {{item.title}}\n\n                <button @click=\"deleteItem(item.id)\">删除</button>\n            </li>\n        </ul>\n    </div>\n</template>\n\n<script>\nimport event from './event'\n\nexport default {\n    // props: ['list']\n    props: {\n        // prop 类型和默认值\n        list: {\n            type: Array,\n            default() {\n                return []\n            }\n        }\n    },\n    data() {\n        return {\n\n        }\n    },\n    methods: {\n        deleteItem(id) {\n            this.$emit('delete', id)\n        },\n        addTitleHandler(title) {\n            // eslint-disable-next-line\n            console.log('on add title', title)\n        }\n    },\n    created() {\n        // eslint-disable-next-line\n        console.log('list created')\n    },\n    mounted() {\n        // eslint-disable-next-line\n        console.log('list mounted')\n\n        // 绑定自定义事件\n        event.$on('onAddTitle', this.addTitleHandler)\n    },\n    beforeUpdate() {\n        // eslint-disable-next-line\n        console.log('list before update')\n    },\n    updated() {\n        // eslint-disable-next-line\n        console.log('list updated')\n    },\n    beforeDestroy() {\n        // 及时销毁，否则可能造成内存泄露\n        event.$off('onAddTitle', this.addTitleHandler)\n    }\n}\n</script>\n```\n### event.js\n\n```js\nimport Vue from 'vue'\n\nexport default new Vue()\n\n```\n**在组件销毁时，需要销毁自定义事件。**\n","slug":"Vue组件通讯","published":1,"updated":"2020-05-06T09:52:28.000Z","comments":1,"photos":[],"link":"","_id":"ck9v62x77000hqqs6efd02dqh","content":"<h2 id=\"prop和-emit\"><a href=\"#prop和-emit\" class=\"headerlink\" title=\"prop和$emit\"></a>prop和$emit</h2><a id=\"more\"></a>\n<h3 id=\"index-vue\"><a href=\"#index-vue\" class=\"headerlink\" title=\"index.vue\"></a>index.vue</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Input</span> @<span class=\"attr\">add</span>=<span class=\"string\">\"addHandler\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">List</span> <span class=\"attr\">:list</span>=<span class=\"string\">\"list\"</span> @<span class=\"attr\">delete</span>=<span class=\"string\">\"deleteHandler\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span> Input <span class=\"keyword\">from</span> <span class=\"string\">'./Input'</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span> List <span class=\"keyword\">from</span> <span class=\"string\">'./List'</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">        Input,</span><br><span class=\"line\">        List</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\">            list: [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\"><span class=\"actionscript\">                    id: <span class=\"string\">'id-1'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">                    title: <span class=\"string\">'标题1'</span></span></span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\"><span class=\"actionscript\">                    id: <span class=\"string\">'id-2'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">                    title: <span class=\"string\">'标题2'</span></span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        addHandler(title) &#123;</span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"keyword\">this</span>.list.push(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                id: <span class=\"string\">`id-<span class=\"subst\">$&#123;<span class=\"built_in\">Date</span>.now()&#125;</span>`</span>,</span></span><br><span class=\"line\">                title</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        deleteHandler(id) &#123;</span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">this</span>.list = <span class=\"keyword\">this</span>.list.filter(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.id !== id)</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    created() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// eslint-disable-next-line</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'index created'</span>)</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    mounted() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// eslint-disable-next-line</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'index mounted'</span>)</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    beforeUpdate() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// eslint-disable-next-line</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'index before update'</span>)</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    updated() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// eslint-disable-next-line</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'index updated'</span>)</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"input-vue\"><a href=\"#input-vue\" class=\"headerlink\" title=\"input.vue\"></a>input.vue</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"title\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"addTitle\"</span>&gt;</span>add<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span> event <span class=\"keyword\">from</span> <span class=\"string\">'./event'</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">            title: <span class=\"string\">''</span></span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        addTitle() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// 调用父组件的事件</span></span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'add'</span>, <span class=\"keyword\">this</span>.title)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// 调用自定义事件</span></span></span><br><span class=\"line\"><span class=\"actionscript\">            event.$emit(<span class=\"string\">'onAddTitle'</span>, <span class=\"keyword\">this</span>.title)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"keyword\">this</span>.title = <span class=\"string\">''</span></span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"list-vue\"><a href=\"#list-vue\" class=\"headerlink\" title=\"list.vue\"></a>list.vue</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in list\"</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"item.id\"</span>&gt;</span></span><br><span class=\"line\">                &#123;&#123;item.title&#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"deleteItem(item.id)\"</span>&gt;</span>删除<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span> event <span class=\"keyword\">from</span> <span class=\"string\">'./event'</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"comment\">// props: ['list']</span></span></span><br><span class=\"line\">    props: &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// prop 类型和默认值</span></span></span><br><span class=\"line\">        list: &#123;</span><br><span class=\"line\"><span class=\"javascript\">            type: <span class=\"built_in\">Array</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"keyword\">default</span>() &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">                <span class=\"keyword\">return</span> []</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        deleteItem(id) &#123;</span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'delete'</span>, id)</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        addTitleHandler(title) &#123;</span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// eslint-disable-next-line</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'on add title'</span>, title)</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    created() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// eslint-disable-next-line</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'list created'</span>)</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    mounted() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// eslint-disable-next-line</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'list mounted'</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// 绑定自定义事件</span></span></span><br><span class=\"line\"><span class=\"actionscript\">        event.$on(<span class=\"string\">'onAddTitle'</span>, <span class=\"keyword\">this</span>.addTitleHandler)</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    beforeUpdate() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// eslint-disable-next-line</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'list before update'</span>)</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    updated() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// eslint-disable-next-line</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'list updated'</span>)</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    beforeDestroy() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// 及时销毁，否则可能造成内存泄露</span></span></span><br><span class=\"line\"><span class=\"actionscript\">        event.$off(<span class=\"string\">'onAddTitle'</span>, <span class=\"keyword\">this</span>.addTitleHandler)</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"event-js\"><a href=\"#event-js\" class=\"headerlink\" title=\"event.js\"></a>event.js</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Vue()</span><br></pre></td></tr></table></figure>\n<p><strong>在组件销毁时，需要销毁自定义事件。</strong></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"prop和-emit\"><a href=\"#prop和-emit\" class=\"headerlink\" title=\"prop和$emit\"></a>prop和$emit</h2>","more":"<h3 id=\"index-vue\"><a href=\"#index-vue\" class=\"headerlink\" title=\"index.vue\"></a>index.vue</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Input</span> @<span class=\"attr\">add</span>=<span class=\"string\">\"addHandler\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">List</span> <span class=\"attr\">:list</span>=<span class=\"string\">\"list\"</span> @<span class=\"attr\">delete</span>=<span class=\"string\">\"deleteHandler\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span> Input <span class=\"keyword\">from</span> <span class=\"string\">'./Input'</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span> List <span class=\"keyword\">from</span> <span class=\"string\">'./List'</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">        Input,</span><br><span class=\"line\">        List</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\">            list: [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\"><span class=\"actionscript\">                    id: <span class=\"string\">'id-1'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">                    title: <span class=\"string\">'标题1'</span></span></span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\"><span class=\"actionscript\">                    id: <span class=\"string\">'id-2'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">                    title: <span class=\"string\">'标题2'</span></span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        addHandler(title) &#123;</span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"keyword\">this</span>.list.push(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                id: <span class=\"string\">`id-<span class=\"subst\">$&#123;<span class=\"built_in\">Date</span>.now()&#125;</span>`</span>,</span></span><br><span class=\"line\">                title</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        deleteHandler(id) &#123;</span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">this</span>.list = <span class=\"keyword\">this</span>.list.filter(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.id !== id)</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    created() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// eslint-disable-next-line</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'index created'</span>)</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    mounted() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// eslint-disable-next-line</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'index mounted'</span>)</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    beforeUpdate() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// eslint-disable-next-line</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'index before update'</span>)</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    updated() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// eslint-disable-next-line</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'index updated'</span>)</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"input-vue\"><a href=\"#input-vue\" class=\"headerlink\" title=\"input.vue\"></a>input.vue</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"title\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"addTitle\"</span>&gt;</span>add<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span> event <span class=\"keyword\">from</span> <span class=\"string\">'./event'</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">            title: <span class=\"string\">''</span></span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        addTitle() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// 调用父组件的事件</span></span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'add'</span>, <span class=\"keyword\">this</span>.title)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// 调用自定义事件</span></span></span><br><span class=\"line\"><span class=\"actionscript\">            event.$emit(<span class=\"string\">'onAddTitle'</span>, <span class=\"keyword\">this</span>.title)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"keyword\">this</span>.title = <span class=\"string\">''</span></span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"list-vue\"><a href=\"#list-vue\" class=\"headerlink\" title=\"list.vue\"></a>list.vue</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in list\"</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"item.id\"</span>&gt;</span></span><br><span class=\"line\">                &#123;&#123;item.title&#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"deleteItem(item.id)\"</span>&gt;</span>删除<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span> event <span class=\"keyword\">from</span> <span class=\"string\">'./event'</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"comment\">// props: ['list']</span></span></span><br><span class=\"line\">    props: &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// prop 类型和默认值</span></span></span><br><span class=\"line\">        list: &#123;</span><br><span class=\"line\"><span class=\"javascript\">            type: <span class=\"built_in\">Array</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"keyword\">default</span>() &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">                <span class=\"keyword\">return</span> []</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        deleteItem(id) &#123;</span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'delete'</span>, id)</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        addTitleHandler(title) &#123;</span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// eslint-disable-next-line</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'on add title'</span>, title)</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    created() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// eslint-disable-next-line</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'list created'</span>)</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    mounted() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// eslint-disable-next-line</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'list mounted'</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// 绑定自定义事件</span></span></span><br><span class=\"line\"><span class=\"actionscript\">        event.$on(<span class=\"string\">'onAddTitle'</span>, <span class=\"keyword\">this</span>.addTitleHandler)</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    beforeUpdate() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// eslint-disable-next-line</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'list before update'</span>)</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    updated() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// eslint-disable-next-line</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'list updated'</span>)</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    beforeDestroy() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// 及时销毁，否则可能造成内存泄露</span></span></span><br><span class=\"line\"><span class=\"actionscript\">        event.$off(<span class=\"string\">'onAddTitle'</span>, <span class=\"keyword\">this</span>.addTitleHandler)</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"event-js\"><a href=\"#event-js\" class=\"headerlink\" title=\"event.js\"></a>event.js</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Vue()</span><br></pre></td></tr></table></figure>\n<p><strong>在组件销毁时，需要销毁自定义事件。</strong></p>"},{"layout":"[post]","title":"css之BFC","date":"2019-05-03T10:36:09.000Z","_content":"## BFC定义\n**BFC(Block formatting context)直译为\"块级格式化上下文\"。它是一个独立的渲染区域，只有Block-level box参与， 它规定了内部的Block-level Box如何布局，并且与这个区域外部毫不相干。**\n<!-- more -->\n### Box：css布局的基本单位\nBox 是 CSS 布局的对象和基本单位， 直观点来说，就是一个页面是由很多个 Box 组成的。元素的类型和 display 属性，决定了这个 Box 的类型。 不同类型的 Box， 会参与不同的 Formatting Context（一个决定如何渲染文档的容器），因此Box内的元素会以不同的方式渲染。让我们看看有哪些盒子：\n\n- block-level box:display 属性为 block, list-item, table 的元素，会生成 block-level box。并且参与 block fomatting context；\n- inline-level box:display 属性为 inline, inline-block, inline-table 的元素，会生成 inline-level box。并且参与 inline formatting context；\n- run-in box: css3\n\n### Formatting Context\nFormatting context 是 W3C CSS2.1 规范中的一个概念。它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。最常见的 Formatting context 有 Block fomatting context (简称BFC)和 Inline formatting context (简称IFC)。\n> BFC是一个独立的布局环境，其中的元素布局是不受外界的影响，并且在一个BFC中，块盒与行盒（行盒由一行中所有的内联元素所组成）都会垂直的沿着其父元素的边框排列。\n\n## BFC的布局规则\n1. 内部的Box会在垂直方向，一个接一个地放置。\n2. Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠。\n3. 每个盒子（块盒与行盒）的margin box的左边，与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。\n4. BFC的区域不会与float box重叠。\n5. BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。\n6. 计算BFC的高度时，浮动元素也参与计算。\n## 如何创建BFC\n1. float的值不是none。\n2. position的值不是static或者relative。\n3. display的值是inline-block、table-cell、flex、table-caption或者inline-flex\n4. overflow的值不是visible\n\n## BFC的作用\n1. 利用BFC避免margin重叠。\n2. 自适应两栏布局。\n3. 清除浮动。\n\n## 总结\n> BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。\n\n因为BFC内部的元素和外部的元素绝对不会互相影响，因此， 当BFC外部存在浮动时，它不应该影响BFC内部Box的布局，BFC会通过变窄，而不与浮动有重叠。同样的，当BFC内部有浮动时，为了不影响外部元素的布局，BFC计算高度时会包括浮动的高度。避免margin重叠也是这样的一个道理。\n\n## 代码展示\n### 在无BFC时候\n\n```html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\" />\n\t\t<title>css盒子模型</title>\n\t\t<style media=\"screen\">\n\t\t\thtml * {\n\t\t\t\tmargin: 0;\n\t\t\t\tpadding: 0;\n\t\t\t}\n\t\t</style>\n\t</head>\n\n\t<body>\n\t\t<!-- <section id=\"sec\">\n\t\t\t<style media=\"screen\">\n\t\t\t\t#sec {\n\t\t\t\t\tbackground: #f00;\n\t\t\t\t\t/* overflow: hidden; */\n\t\t\t\t}\n\t\t\t\t.child {\n\t\t\t\t\theight: 100px;\n\t\t\t\t\tmargin-top: 10px;\n\t\t\t\t\tbackground: yellow;\n\t\t\t\t}\n\t\t\t</style>\n\t\t\t<article class=\"child\"></article>\n        </section> -->\n\t\t<section id=\"margin\">\n\t\t\t<style>\n\t\t\t\t#margin {\n\t\t\t\t\tbackground: pink;\n\t\t\t\t\toverflow: hidden;\n\t\t\t\t}\n\t\t\t\t#margin > p {\n\t\t\t\t\tmargin: 5px auto 25px;\n\t\t\t\t\tbackground: blue;\n\t\t\t\t}\n\t\t\t</style>\n\t\t\t<p>1</p>\n\t\t\t<p>2</p>\n\t\t\t<p>3</p>\n\t\t</section>\n\t</body>\n</html>\n\n```\n![yasuo](wubfc.png)\n\n### 使用BFC\n\n```html\n<section id=\"margin\">\n\t\t\t<style>\n\t\t\t\t#margin {\n\t\t\t\t\tbackground: pink;\n\t\t\t\t\toverflow: hidden;\n\t\t\t\t}\n\t\t\t\t#margin > p {\n\t\t\t\t\tmargin: 5px auto 25px;\n\t\t\t\t\tbackground: blue;\n\t\t\t\t}\n\t\t\t</style>\n\t\t\t<p>1</p>\n\t\t\t<div style=\"overflow: hidden;\">\n                <p>2</p>\n            </div>\n\t\t\t<p>3</p>\n\t\t</section>\n```\n![yasuo](bfc.png)\n\n### 不与float重叠\n\n```html\n  <section id=\"layout\">\n            <style media\"screen\">\n                #layout{\n                    background: red;\n                }\n                #layout .left{\n                    float: left;\n                    width: 100px;\n                    height: 100px;\n                    background: pink;\n                }\n                #layout .right{\n                    height: 110px;\n                    background: blue;\n                    overflow: auto;\n                }\n            </style>\n            <div class=\"left\"></div>\n            <div class=\"right\"></div>\n        </section>\n```\n![yasuo](margin.png)\n\n### 清除浮动\n\n```html\n <!-- BFC子元素即使是float，也会参与高度计算 -->\n        <section id=\"float\">\n            <style media=\"screen\">\n                #float{\n                    background: red;\n                    overflow: hidden;\n                }\n                #float .float{\n                    float: left;\n                    font-size: 20px;\n                }\n            </style>\n            <div class=\"float\">\n                我是浮动元素\n            </div>\n        </section>\n```\n![yasuo](float.png)\n\n\n","source":"_posts/css之BFC.md","raw":"---\nlayout: '[post]'\ntitle: css之BFC\ndate: 2019-05-03 18:36:09\ntags: css\n---\n## BFC定义\n**BFC(Block formatting context)直译为\"块级格式化上下文\"。它是一个独立的渲染区域，只有Block-level box参与， 它规定了内部的Block-level Box如何布局，并且与这个区域外部毫不相干。**\n<!-- more -->\n### Box：css布局的基本单位\nBox 是 CSS 布局的对象和基本单位， 直观点来说，就是一个页面是由很多个 Box 组成的。元素的类型和 display 属性，决定了这个 Box 的类型。 不同类型的 Box， 会参与不同的 Formatting Context（一个决定如何渲染文档的容器），因此Box内的元素会以不同的方式渲染。让我们看看有哪些盒子：\n\n- block-level box:display 属性为 block, list-item, table 的元素，会生成 block-level box。并且参与 block fomatting context；\n- inline-level box:display 属性为 inline, inline-block, inline-table 的元素，会生成 inline-level box。并且参与 inline formatting context；\n- run-in box: css3\n\n### Formatting Context\nFormatting context 是 W3C CSS2.1 规范中的一个概念。它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。最常见的 Formatting context 有 Block fomatting context (简称BFC)和 Inline formatting context (简称IFC)。\n> BFC是一个独立的布局环境，其中的元素布局是不受外界的影响，并且在一个BFC中，块盒与行盒（行盒由一行中所有的内联元素所组成）都会垂直的沿着其父元素的边框排列。\n\n## BFC的布局规则\n1. 内部的Box会在垂直方向，一个接一个地放置。\n2. Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠。\n3. 每个盒子（块盒与行盒）的margin box的左边，与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。\n4. BFC的区域不会与float box重叠。\n5. BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。\n6. 计算BFC的高度时，浮动元素也参与计算。\n## 如何创建BFC\n1. float的值不是none。\n2. position的值不是static或者relative。\n3. display的值是inline-block、table-cell、flex、table-caption或者inline-flex\n4. overflow的值不是visible\n\n## BFC的作用\n1. 利用BFC避免margin重叠。\n2. 自适应两栏布局。\n3. 清除浮动。\n\n## 总结\n> BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。\n\n因为BFC内部的元素和外部的元素绝对不会互相影响，因此， 当BFC外部存在浮动时，它不应该影响BFC内部Box的布局，BFC会通过变窄，而不与浮动有重叠。同样的，当BFC内部有浮动时，为了不影响外部元素的布局，BFC计算高度时会包括浮动的高度。避免margin重叠也是这样的一个道理。\n\n## 代码展示\n### 在无BFC时候\n\n```html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\" />\n\t\t<title>css盒子模型</title>\n\t\t<style media=\"screen\">\n\t\t\thtml * {\n\t\t\t\tmargin: 0;\n\t\t\t\tpadding: 0;\n\t\t\t}\n\t\t</style>\n\t</head>\n\n\t<body>\n\t\t<!-- <section id=\"sec\">\n\t\t\t<style media=\"screen\">\n\t\t\t\t#sec {\n\t\t\t\t\tbackground: #f00;\n\t\t\t\t\t/* overflow: hidden; */\n\t\t\t\t}\n\t\t\t\t.child {\n\t\t\t\t\theight: 100px;\n\t\t\t\t\tmargin-top: 10px;\n\t\t\t\t\tbackground: yellow;\n\t\t\t\t}\n\t\t\t</style>\n\t\t\t<article class=\"child\"></article>\n        </section> -->\n\t\t<section id=\"margin\">\n\t\t\t<style>\n\t\t\t\t#margin {\n\t\t\t\t\tbackground: pink;\n\t\t\t\t\toverflow: hidden;\n\t\t\t\t}\n\t\t\t\t#margin > p {\n\t\t\t\t\tmargin: 5px auto 25px;\n\t\t\t\t\tbackground: blue;\n\t\t\t\t}\n\t\t\t</style>\n\t\t\t<p>1</p>\n\t\t\t<p>2</p>\n\t\t\t<p>3</p>\n\t\t</section>\n\t</body>\n</html>\n\n```\n![yasuo](wubfc.png)\n\n### 使用BFC\n\n```html\n<section id=\"margin\">\n\t\t\t<style>\n\t\t\t\t#margin {\n\t\t\t\t\tbackground: pink;\n\t\t\t\t\toverflow: hidden;\n\t\t\t\t}\n\t\t\t\t#margin > p {\n\t\t\t\t\tmargin: 5px auto 25px;\n\t\t\t\t\tbackground: blue;\n\t\t\t\t}\n\t\t\t</style>\n\t\t\t<p>1</p>\n\t\t\t<div style=\"overflow: hidden;\">\n                <p>2</p>\n            </div>\n\t\t\t<p>3</p>\n\t\t</section>\n```\n![yasuo](bfc.png)\n\n### 不与float重叠\n\n```html\n  <section id=\"layout\">\n            <style media\"screen\">\n                #layout{\n                    background: red;\n                }\n                #layout .left{\n                    float: left;\n                    width: 100px;\n                    height: 100px;\n                    background: pink;\n                }\n                #layout .right{\n                    height: 110px;\n                    background: blue;\n                    overflow: auto;\n                }\n            </style>\n            <div class=\"left\"></div>\n            <div class=\"right\"></div>\n        </section>\n```\n![yasuo](margin.png)\n\n### 清除浮动\n\n```html\n <!-- BFC子元素即使是float，也会参与高度计算 -->\n        <section id=\"float\">\n            <style media=\"screen\">\n                #float{\n                    background: red;\n                    overflow: hidden;\n                }\n                #float .float{\n                    float: left;\n                    font-size: 20px;\n                }\n            </style>\n            <div class=\"float\">\n                我是浮动元素\n            </div>\n        </section>\n```\n![yasuo](float.png)\n\n\n","slug":"css之BFC","published":1,"updated":"2020-03-04T11:25:43.000Z","comments":1,"photos":[],"link":"","_id":"ck9v62x7a000jqqs63fhfasra","content":"<h2 id=\"BFC定义\"><a href=\"#BFC定义\" class=\"headerlink\" title=\"BFC定义\"></a>BFC定义</h2><p><strong>BFC(Block formatting context)直译为”块级格式化上下文”。它是一个独立的渲染区域，只有Block-level box参与， 它规定了内部的Block-level Box如何布局，并且与这个区域外部毫不相干。</strong></p>\n<a id=\"more\"></a>\n<h3 id=\"Box：css布局的基本单位\"><a href=\"#Box：css布局的基本单位\" class=\"headerlink\" title=\"Box：css布局的基本单位\"></a>Box：css布局的基本单位</h3><p>Box 是 CSS 布局的对象和基本单位， 直观点来说，就是一个页面是由很多个 Box 组成的。元素的类型和 display 属性，决定了这个 Box 的类型。 不同类型的 Box， 会参与不同的 Formatting Context（一个决定如何渲染文档的容器），因此Box内的元素会以不同的方式渲染。让我们看看有哪些盒子：</p>\n<ul>\n<li>block-level box:display 属性为 block, list-item, table 的元素，会生成 block-level box。并且参与 block fomatting context；</li>\n<li>inline-level box:display 属性为 inline, inline-block, inline-table 的元素，会生成 inline-level box。并且参与 inline formatting context；</li>\n<li>run-in box: css3</li>\n</ul>\n<h3 id=\"Formatting-Context\"><a href=\"#Formatting-Context\" class=\"headerlink\" title=\"Formatting Context\"></a>Formatting Context</h3><p>Formatting context 是 W3C CSS2.1 规范中的一个概念。它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。最常见的 Formatting context 有 Block fomatting context (简称BFC)和 Inline formatting context (简称IFC)。</p>\n<blockquote>\n<p>BFC是一个独立的布局环境，其中的元素布局是不受外界的影响，并且在一个BFC中，块盒与行盒（行盒由一行中所有的内联元素所组成）都会垂直的沿着其父元素的边框排列。</p>\n</blockquote>\n<h2 id=\"BFC的布局规则\"><a href=\"#BFC的布局规则\" class=\"headerlink\" title=\"BFC的布局规则\"></a>BFC的布局规则</h2><ol>\n<li>内部的Box会在垂直方向，一个接一个地放置。</li>\n<li>Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠。</li>\n<li>每个盒子（块盒与行盒）的margin box的左边，与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。</li>\n<li>BFC的区域不会与float box重叠。</li>\n<li>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</li>\n<li>计算BFC的高度时，浮动元素也参与计算。<h2 id=\"如何创建BFC\"><a href=\"#如何创建BFC\" class=\"headerlink\" title=\"如何创建BFC\"></a>如何创建BFC</h2></li>\n<li>float的值不是none。</li>\n<li>position的值不是static或者relative。</li>\n<li>display的值是inline-block、table-cell、flex、table-caption或者inline-flex</li>\n<li>overflow的值不是visible</li>\n</ol>\n<h2 id=\"BFC的作用\"><a href=\"#BFC的作用\" class=\"headerlink\" title=\"BFC的作用\"></a>BFC的作用</h2><ol>\n<li>利用BFC避免margin重叠。</li>\n<li>自适应两栏布局。</li>\n<li>清除浮动。</li>\n</ol>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><blockquote>\n<p>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</p>\n</blockquote>\n<p>因为BFC内部的元素和外部的元素绝对不会互相影响，因此， 当BFC外部存在浮动时，它不应该影响BFC内部Box的布局，BFC会通过变窄，而不与浮动有重叠。同样的，当BFC内部有浮动时，为了不影响外部元素的布局，BFC计算高度时会包括浮动的高度。避免margin重叠也是这样的一个道理。</p>\n<h2 id=\"代码展示\"><a href=\"#代码展示\" class=\"headerlink\" title=\"代码展示\"></a>代码展示</h2><h3 id=\"在无BFC时候\"><a href=\"#在无BFC时候\" class=\"headerlink\" title=\"在无BFC时候\"></a>在无BFC时候</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>css盒子模型<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">media</span>=<span class=\"string\">\"screen\"</span>&gt;</span></span><br><span class=\"line\">\t\t\thtml * &#123;</span><br><span class=\"line\">\t\t\t\tmargin: 0;</span><br><span class=\"line\">\t\t\t\tpadding: 0;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- &lt;section id=\"sec\"&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t&lt;style media=\"screen\"&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t#sec &#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\tbackground: #f00;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\t/* overflow: hidden; */</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t.child &#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\theight: 100px;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\tmargin-top: 10px;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\tbackground: yellow;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t&lt;/style&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t&lt;article class=\"child\"&gt;&lt;/article&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;/section&gt; --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">id</span>=<span class=\"string\">\"margin\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t\t<span class=\"selector-id\">#margin</span> &#123;</span></span><br><span class=\"line\">\t\t\t\t\tbackground: pink;</span><br><span class=\"line\">\t\t\t\t\toverflow: hidden;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\"><span class=\"css\">\t\t\t\t<span class=\"selector-id\">#margin</span> &gt; <span class=\"selector-tag\">p</span> &#123;</span></span><br><span class=\"line\">\t\t\t\t\tmargin: 5px auto 25px;</span><br><span class=\"line\">\t\t\t\t\tbackground: blue;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/05/03/css%E4%B9%8BBFC/wubfc.png\" alt=\"yasuo\"></p>\n<h3 id=\"使用BFC\"><a href=\"#使用BFC\" class=\"headerlink\" title=\"使用BFC\"></a>使用BFC</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">id</span>=<span class=\"string\">\"margin\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t\t<span class=\"selector-id\">#margin</span> &#123;</span></span><br><span class=\"line\">\t\t\t\t\tbackground: pink;</span><br><span class=\"line\">\t\t\t\t\toverflow: hidden;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\"><span class=\"css\">\t\t\t\t<span class=\"selector-id\">#margin</span> &gt; <span class=\"selector-tag\">p</span> &#123;</span></span><br><span class=\"line\">\t\t\t\t\tmargin: 5px auto 25px;</span><br><span class=\"line\">\t\t\t\t\tbackground: blue;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"overflow: hidden;\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/05/03/css%E4%B9%8BBFC/bfc.png\" alt=\"yasuo\"></p>\n<h3 id=\"不与float重叠\"><a href=\"#不与float重叠\" class=\"headerlink\" title=\"不与float重叠\"></a>不与float重叠</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">id</span>=<span class=\"string\">\"layout\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">media</span>\"<span class=\"attr\">screen</span>\"&gt;</span></span><br><span class=\"line\"><span class=\"css\">              <span class=\"selector-id\">#layout</span>&#123;</span></span><br><span class=\"line\">                  background: red;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\"><span class=\"css\">              <span class=\"selector-id\">#layout</span> <span class=\"selector-class\">.left</span>&#123;</span></span><br><span class=\"line\">                  float: left;</span><br><span class=\"line\">                  width: 100px;</span><br><span class=\"line\">                  height: 100px;</span><br><span class=\"line\">                  background: pink;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\"><span class=\"css\">              <span class=\"selector-id\">#layout</span> <span class=\"selector-class\">.right</span>&#123;</span></span><br><span class=\"line\">                  height: 110px;</span><br><span class=\"line\">                  background: blue;</span><br><span class=\"line\">                  overflow: auto;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/05/03/css%E4%B9%8BBFC/margin.png\" alt=\"yasuo\"></p>\n<h3 id=\"清除浮动\"><a href=\"#清除浮动\" class=\"headerlink\" title=\"清除浮动\"></a>清除浮动</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- BFC子元素即使是float，也会参与高度计算 --&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">id</span>=<span class=\"string\">\"float\"</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">media</span>=<span class=\"string\">\"screen\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">               <span class=\"selector-id\">#float</span>&#123;</span></span><br><span class=\"line\">                   background: red;</span><br><span class=\"line\">                   overflow: hidden;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\"><span class=\"css\">               <span class=\"selector-id\">#float</span> <span class=\"selector-class\">.float</span>&#123;</span></span><br><span class=\"line\">                   float: left;</span><br><span class=\"line\">                   font-size: 20px;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"float\"</span>&gt;</span></span><br><span class=\"line\">               我是浮动元素</span><br><span class=\"line\">           <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/05/03/css%E4%B9%8BBFC/float.png\" alt=\"yasuo\"></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"BFC定义\"><a href=\"#BFC定义\" class=\"headerlink\" title=\"BFC定义\"></a>BFC定义</h2><p><strong>BFC(Block formatting context)直译为”块级格式化上下文”。它是一个独立的渲染区域，只有Block-level box参与， 它规定了内部的Block-level Box如何布局，并且与这个区域外部毫不相干。</strong></p>","more":"<h3 id=\"Box：css布局的基本单位\"><a href=\"#Box：css布局的基本单位\" class=\"headerlink\" title=\"Box：css布局的基本单位\"></a>Box：css布局的基本单位</h3><p>Box 是 CSS 布局的对象和基本单位， 直观点来说，就是一个页面是由很多个 Box 组成的。元素的类型和 display 属性，决定了这个 Box 的类型。 不同类型的 Box， 会参与不同的 Formatting Context（一个决定如何渲染文档的容器），因此Box内的元素会以不同的方式渲染。让我们看看有哪些盒子：</p>\n<ul>\n<li>block-level box:display 属性为 block, list-item, table 的元素，会生成 block-level box。并且参与 block fomatting context；</li>\n<li>inline-level box:display 属性为 inline, inline-block, inline-table 的元素，会生成 inline-level box。并且参与 inline formatting context；</li>\n<li>run-in box: css3</li>\n</ul>\n<h3 id=\"Formatting-Context\"><a href=\"#Formatting-Context\" class=\"headerlink\" title=\"Formatting Context\"></a>Formatting Context</h3><p>Formatting context 是 W3C CSS2.1 规范中的一个概念。它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。最常见的 Formatting context 有 Block fomatting context (简称BFC)和 Inline formatting context (简称IFC)。</p>\n<blockquote>\n<p>BFC是一个独立的布局环境，其中的元素布局是不受外界的影响，并且在一个BFC中，块盒与行盒（行盒由一行中所有的内联元素所组成）都会垂直的沿着其父元素的边框排列。</p>\n</blockquote>\n<h2 id=\"BFC的布局规则\"><a href=\"#BFC的布局规则\" class=\"headerlink\" title=\"BFC的布局规则\"></a>BFC的布局规则</h2><ol>\n<li>内部的Box会在垂直方向，一个接一个地放置。</li>\n<li>Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠。</li>\n<li>每个盒子（块盒与行盒）的margin box的左边，与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。</li>\n<li>BFC的区域不会与float box重叠。</li>\n<li>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</li>\n<li>计算BFC的高度时，浮动元素也参与计算。<h2 id=\"如何创建BFC\"><a href=\"#如何创建BFC\" class=\"headerlink\" title=\"如何创建BFC\"></a>如何创建BFC</h2></li>\n<li>float的值不是none。</li>\n<li>position的值不是static或者relative。</li>\n<li>display的值是inline-block、table-cell、flex、table-caption或者inline-flex</li>\n<li>overflow的值不是visible</li>\n</ol>\n<h2 id=\"BFC的作用\"><a href=\"#BFC的作用\" class=\"headerlink\" title=\"BFC的作用\"></a>BFC的作用</h2><ol>\n<li>利用BFC避免margin重叠。</li>\n<li>自适应两栏布局。</li>\n<li>清除浮动。</li>\n</ol>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><blockquote>\n<p>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</p>\n</blockquote>\n<p>因为BFC内部的元素和外部的元素绝对不会互相影响，因此， 当BFC外部存在浮动时，它不应该影响BFC内部Box的布局，BFC会通过变窄，而不与浮动有重叠。同样的，当BFC内部有浮动时，为了不影响外部元素的布局，BFC计算高度时会包括浮动的高度。避免margin重叠也是这样的一个道理。</p>\n<h2 id=\"代码展示\"><a href=\"#代码展示\" class=\"headerlink\" title=\"代码展示\"></a>代码展示</h2><h3 id=\"在无BFC时候\"><a href=\"#在无BFC时候\" class=\"headerlink\" title=\"在无BFC时候\"></a>在无BFC时候</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>css盒子模型<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">media</span>=<span class=\"string\">\"screen\"</span>&gt;</span></span><br><span class=\"line\">\t\t\thtml * &#123;</span><br><span class=\"line\">\t\t\t\tmargin: 0;</span><br><span class=\"line\">\t\t\t\tpadding: 0;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- &lt;section id=\"sec\"&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t&lt;style media=\"screen\"&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t#sec &#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\tbackground: #f00;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\t/* overflow: hidden; */</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t.child &#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\theight: 100px;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\tmargin-top: 10px;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\tbackground: yellow;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t&lt;/style&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t&lt;article class=\"child\"&gt;&lt;/article&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;/section&gt; --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">id</span>=<span class=\"string\">\"margin\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t\t<span class=\"selector-id\">#margin</span> &#123;</span></span><br><span class=\"line\">\t\t\t\t\tbackground: pink;</span><br><span class=\"line\">\t\t\t\t\toverflow: hidden;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\"><span class=\"css\">\t\t\t\t<span class=\"selector-id\">#margin</span> &gt; <span class=\"selector-tag\">p</span> &#123;</span></span><br><span class=\"line\">\t\t\t\t\tmargin: 5px auto 25px;</span><br><span class=\"line\">\t\t\t\t\tbackground: blue;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/05/03/css%E4%B9%8BBFC/wubfc.png\" alt=\"yasuo\"></p>\n<h3 id=\"使用BFC\"><a href=\"#使用BFC\" class=\"headerlink\" title=\"使用BFC\"></a>使用BFC</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">id</span>=<span class=\"string\">\"margin\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t\t<span class=\"selector-id\">#margin</span> &#123;</span></span><br><span class=\"line\">\t\t\t\t\tbackground: pink;</span><br><span class=\"line\">\t\t\t\t\toverflow: hidden;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\"><span class=\"css\">\t\t\t\t<span class=\"selector-id\">#margin</span> &gt; <span class=\"selector-tag\">p</span> &#123;</span></span><br><span class=\"line\">\t\t\t\t\tmargin: 5px auto 25px;</span><br><span class=\"line\">\t\t\t\t\tbackground: blue;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"overflow: hidden;\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/05/03/css%E4%B9%8BBFC/bfc.png\" alt=\"yasuo\"></p>\n<h3 id=\"不与float重叠\"><a href=\"#不与float重叠\" class=\"headerlink\" title=\"不与float重叠\"></a>不与float重叠</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">id</span>=<span class=\"string\">\"layout\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">media</span>\"<span class=\"attr\">screen</span>\"&gt;</span></span><br><span class=\"line\"><span class=\"css\">              <span class=\"selector-id\">#layout</span>&#123;</span></span><br><span class=\"line\">                  background: red;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\"><span class=\"css\">              <span class=\"selector-id\">#layout</span> <span class=\"selector-class\">.left</span>&#123;</span></span><br><span class=\"line\">                  float: left;</span><br><span class=\"line\">                  width: 100px;</span><br><span class=\"line\">                  height: 100px;</span><br><span class=\"line\">                  background: pink;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\"><span class=\"css\">              <span class=\"selector-id\">#layout</span> <span class=\"selector-class\">.right</span>&#123;</span></span><br><span class=\"line\">                  height: 110px;</span><br><span class=\"line\">                  background: blue;</span><br><span class=\"line\">                  overflow: auto;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/05/03/css%E4%B9%8BBFC/margin.png\" alt=\"yasuo\"></p>\n<h3 id=\"清除浮动\"><a href=\"#清除浮动\" class=\"headerlink\" title=\"清除浮动\"></a>清除浮动</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- BFC子元素即使是float，也会参与高度计算 --&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">id</span>=<span class=\"string\">\"float\"</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">media</span>=<span class=\"string\">\"screen\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">               <span class=\"selector-id\">#float</span>&#123;</span></span><br><span class=\"line\">                   background: red;</span><br><span class=\"line\">                   overflow: hidden;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\"><span class=\"css\">               <span class=\"selector-id\">#float</span> <span class=\"selector-class\">.float</span>&#123;</span></span><br><span class=\"line\">                   float: left;</span><br><span class=\"line\">                   font-size: 20px;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"float\"</span>&gt;</span></span><br><span class=\"line\">               我是浮动元素</span><br><span class=\"line\">           <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/05/03/css%E4%B9%8BBFC/float.png\" alt=\"yasuo\"></p>"},{"layout":"[post]","title":"css盒子模型","date":"2019-05-01T02:15:02.000Z","_content":"\n## css 盒子模型\n\ncss 盒子模型包含标准模型和 IE 模型\n\n<!-- more -->\n\n### 标准模型\n\n![yasuo](biaozhun.jpg)\n\n#### 盒子的组成\n\n一个盒子由外到内可以分成四个部分：margin（外边距）、border（边框）、padding（内边距）、content（内容）。会发现 margin、border、padding 是 CSS 属性，因此可以通过这三个属性来控制盒子的这三个部分。而 content 则是 HTML 元素的内容。\n\n#### 盒子的大小\n\n```\n盒子的宽度 = width + padding-left + padding-right + border-left + border-right + margin-left + margin-right\n\n盒子的高度 = height + padding-top + padding-bottom + border-top + border-bottom + margin-top + margin-bottom\n```\n\n### IE 模型\n\n![yasuo](ie.jpg)\n\n### 用 css 如何设置两种模型\n\n标准模型：box-sizing:content-box\nie 模型：box-sizing:border-box\n\n### JS 获取盒子模型的宽高\n\n```\ndom.style.width/height(只能获取内嵌)\ndom.currentStyle.width/height（只有IE支持）\nwindow.getComputedStyle(dom).width/height(火狐谷歌)\ndom.getBoundClientRect().width/height (获取展示dom的位置的方法)\n```\n\n### 边距重叠\n\n#### 父子元素边距重叠\n\n```html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\" />\n\t\t<title>css盒子模型</title>\n\t\t<style media=\"screen\">\n\t\t\thtml * {\n\t\t\t\tmargin: 0;\n\t\t\t\tpadding: 0;\n\t\t\t}\n\t\t</style>\n\t</head>\n\n\t<body>\n\t\t<section id=\"sec\">\n\t\t\t<style media=\"screen\">\n\t\t\t\t#sec {\n\t\t\t\t\tbackground: #f00;\n\t\t\t\t\t/* overflow: hidden; */\n\t\t\t\t}\n\t\t\t\t.child {\n\t\t\t\t\theight: 100px;\n\t\t\t\t\tmargin-top: 10px;\n\t\t\t\t\tbackground: yellow;\n\t\t\t\t}\n\t\t\t</style>\n\t\t\t<article class=\"child\"></article>\n\t\t</section>\n\t</body>\n</html>\n```\n","source":"_posts/css盒子模型.md","raw":"---\nlayout: '[post]'\ntitle: css盒子模型\ndate: 2019-05-01 10:15:02\ntags: css\n---\n\n## css 盒子模型\n\ncss 盒子模型包含标准模型和 IE 模型\n\n<!-- more -->\n\n### 标准模型\n\n![yasuo](biaozhun.jpg)\n\n#### 盒子的组成\n\n一个盒子由外到内可以分成四个部分：margin（外边距）、border（边框）、padding（内边距）、content（内容）。会发现 margin、border、padding 是 CSS 属性，因此可以通过这三个属性来控制盒子的这三个部分。而 content 则是 HTML 元素的内容。\n\n#### 盒子的大小\n\n```\n盒子的宽度 = width + padding-left + padding-right + border-left + border-right + margin-left + margin-right\n\n盒子的高度 = height + padding-top + padding-bottom + border-top + border-bottom + margin-top + margin-bottom\n```\n\n### IE 模型\n\n![yasuo](ie.jpg)\n\n### 用 css 如何设置两种模型\n\n标准模型：box-sizing:content-box\nie 模型：box-sizing:border-box\n\n### JS 获取盒子模型的宽高\n\n```\ndom.style.width/height(只能获取内嵌)\ndom.currentStyle.width/height（只有IE支持）\nwindow.getComputedStyle(dom).width/height(火狐谷歌)\ndom.getBoundClientRect().width/height (获取展示dom的位置的方法)\n```\n\n### 边距重叠\n\n#### 父子元素边距重叠\n\n```html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\" />\n\t\t<title>css盒子模型</title>\n\t\t<style media=\"screen\">\n\t\t\thtml * {\n\t\t\t\tmargin: 0;\n\t\t\t\tpadding: 0;\n\t\t\t}\n\t\t</style>\n\t</head>\n\n\t<body>\n\t\t<section id=\"sec\">\n\t\t\t<style media=\"screen\">\n\t\t\t\t#sec {\n\t\t\t\t\tbackground: #f00;\n\t\t\t\t\t/* overflow: hidden; */\n\t\t\t\t}\n\t\t\t\t.child {\n\t\t\t\t\theight: 100px;\n\t\t\t\t\tmargin-top: 10px;\n\t\t\t\t\tbackground: yellow;\n\t\t\t\t}\n\t\t\t</style>\n\t\t\t<article class=\"child\"></article>\n\t\t</section>\n\t</body>\n</html>\n```\n","slug":"css盒子模型","published":1,"updated":"2020-03-04T07:53:42.000Z","comments":1,"photos":[],"link":"","_id":"ck9v62x7b000lqqs6bsmw2929","content":"<h2 id=\"css-盒子模型\"><a href=\"#css-盒子模型\" class=\"headerlink\" title=\"css 盒子模型\"></a>css 盒子模型</h2><p>css 盒子模型包含标准模型和 IE 模型</p>\n<a id=\"more\"></a>\n\n<h3 id=\"标准模型\"><a href=\"#标准模型\" class=\"headerlink\" title=\"标准模型\"></a>标准模型</h3><p><img src=\"/2019/05/01/css%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/biaozhun.jpg\" alt=\"yasuo\"></p>\n<h4 id=\"盒子的组成\"><a href=\"#盒子的组成\" class=\"headerlink\" title=\"盒子的组成\"></a>盒子的组成</h4><p>一个盒子由外到内可以分成四个部分：margin（外边距）、border（边框）、padding（内边距）、content（内容）。会发现 margin、border、padding 是 CSS 属性，因此可以通过这三个属性来控制盒子的这三个部分。而 content 则是 HTML 元素的内容。</p>\n<h4 id=\"盒子的大小\"><a href=\"#盒子的大小\" class=\"headerlink\" title=\"盒子的大小\"></a>盒子的大小</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">盒子的宽度 &#x3D; width + padding-left + padding-right + border-left + border-right + margin-left + margin-right</span><br><span class=\"line\"></span><br><span class=\"line\">盒子的高度 &#x3D; height + padding-top + padding-bottom + border-top + border-bottom + margin-top + margin-bottom</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"IE-模型\"><a href=\"#IE-模型\" class=\"headerlink\" title=\"IE 模型\"></a>IE 模型</h3><p><img src=\"/2019/05/01/css%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/ie.jpg\" alt=\"yasuo\"></p>\n<h3 id=\"用-css-如何设置两种模型\"><a href=\"#用-css-如何设置两种模型\" class=\"headerlink\" title=\"用 css 如何设置两种模型\"></a>用 css 如何设置两种模型</h3><p>标准模型：box-sizing:content-box<br>ie 模型：box-sizing:border-box</p>\n<h3 id=\"JS-获取盒子模型的宽高\"><a href=\"#JS-获取盒子模型的宽高\" class=\"headerlink\" title=\"JS 获取盒子模型的宽高\"></a>JS 获取盒子模型的宽高</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dom.style.width&#x2F;height(只能获取内嵌)</span><br><span class=\"line\">dom.currentStyle.width&#x2F;height（只有IE支持）</span><br><span class=\"line\">window.getComputedStyle(dom).width&#x2F;height(火狐谷歌)</span><br><span class=\"line\">dom.getBoundClientRect().width&#x2F;height (获取展示dom的位置的方法)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"边距重叠\"><a href=\"#边距重叠\" class=\"headerlink\" title=\"边距重叠\"></a>边距重叠</h3><h4 id=\"父子元素边距重叠\"><a href=\"#父子元素边距重叠\" class=\"headerlink\" title=\"父子元素边距重叠\"></a>父子元素边距重叠</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>css盒子模型<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">media</span>=<span class=\"string\">\"screen\"</span>&gt;</span></span><br><span class=\"line\">\t\t\thtml * &#123;</span><br><span class=\"line\">\t\t\t\tmargin: 0;</span><br><span class=\"line\">\t\t\t\tpadding: 0;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">id</span>=<span class=\"string\">\"sec\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">media</span>=<span class=\"string\">\"screen\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t\t<span class=\"selector-id\">#sec</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t\t\t<span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#f00</span>;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t\t\t<span class=\"comment\">/* overflow: hidden; */</span></span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\"><span class=\"css\">\t\t\t\t<span class=\"selector-class\">.child</span> &#123;</span></span><br><span class=\"line\">\t\t\t\t\theight: 100px;</span><br><span class=\"line\">\t\t\t\t\tmargin-top: 10px;</span><br><span class=\"line\">\t\t\t\t\tbackground: yellow;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">article</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"css-盒子模型\"><a href=\"#css-盒子模型\" class=\"headerlink\" title=\"css 盒子模型\"></a>css 盒子模型</h2><p>css 盒子模型包含标准模型和 IE 模型</p>","more":"<h3 id=\"标准模型\"><a href=\"#标准模型\" class=\"headerlink\" title=\"标准模型\"></a>标准模型</h3><p><img src=\"/2019/05/01/css%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/biaozhun.jpg\" alt=\"yasuo\"></p>\n<h4 id=\"盒子的组成\"><a href=\"#盒子的组成\" class=\"headerlink\" title=\"盒子的组成\"></a>盒子的组成</h4><p>一个盒子由外到内可以分成四个部分：margin（外边距）、border（边框）、padding（内边距）、content（内容）。会发现 margin、border、padding 是 CSS 属性，因此可以通过这三个属性来控制盒子的这三个部分。而 content 则是 HTML 元素的内容。</p>\n<h4 id=\"盒子的大小\"><a href=\"#盒子的大小\" class=\"headerlink\" title=\"盒子的大小\"></a>盒子的大小</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">盒子的宽度 &#x3D; width + padding-left + padding-right + border-left + border-right + margin-left + margin-right</span><br><span class=\"line\"></span><br><span class=\"line\">盒子的高度 &#x3D; height + padding-top + padding-bottom + border-top + border-bottom + margin-top + margin-bottom</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"IE-模型\"><a href=\"#IE-模型\" class=\"headerlink\" title=\"IE 模型\"></a>IE 模型</h3><p><img src=\"/2019/05/01/css%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/ie.jpg\" alt=\"yasuo\"></p>\n<h3 id=\"用-css-如何设置两种模型\"><a href=\"#用-css-如何设置两种模型\" class=\"headerlink\" title=\"用 css 如何设置两种模型\"></a>用 css 如何设置两种模型</h3><p>标准模型：box-sizing:content-box<br>ie 模型：box-sizing:border-box</p>\n<h3 id=\"JS-获取盒子模型的宽高\"><a href=\"#JS-获取盒子模型的宽高\" class=\"headerlink\" title=\"JS 获取盒子模型的宽高\"></a>JS 获取盒子模型的宽高</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dom.style.width&#x2F;height(只能获取内嵌)</span><br><span class=\"line\">dom.currentStyle.width&#x2F;height（只有IE支持）</span><br><span class=\"line\">window.getComputedStyle(dom).width&#x2F;height(火狐谷歌)</span><br><span class=\"line\">dom.getBoundClientRect().width&#x2F;height (获取展示dom的位置的方法)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"边距重叠\"><a href=\"#边距重叠\" class=\"headerlink\" title=\"边距重叠\"></a>边距重叠</h3><h4 id=\"父子元素边距重叠\"><a href=\"#父子元素边距重叠\" class=\"headerlink\" title=\"父子元素边距重叠\"></a>父子元素边距重叠</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>css盒子模型<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">media</span>=<span class=\"string\">\"screen\"</span>&gt;</span></span><br><span class=\"line\">\t\t\thtml * &#123;</span><br><span class=\"line\">\t\t\t\tmargin: 0;</span><br><span class=\"line\">\t\t\t\tpadding: 0;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">id</span>=<span class=\"string\">\"sec\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">media</span>=<span class=\"string\">\"screen\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t\t<span class=\"selector-id\">#sec</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t\t\t<span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#f00</span>;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t\t\t<span class=\"comment\">/* overflow: hidden; */</span></span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\"><span class=\"css\">\t\t\t\t<span class=\"selector-class\">.child</span> &#123;</span></span><br><span class=\"line\">\t\t\t\t\theight: 100px;</span><br><span class=\"line\">\t\t\t\t\tmargin-top: 10px;</span><br><span class=\"line\">\t\t\t\t\tbackground: yellow;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">article</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>"},{"layout":"[post]","title":"js栈","date":"2019-08-19T03:39:15.000Z","_content":"## 什么是堆栈\n栈，又叫堆栈，是和列表类似的一种数据结构，但是却更高效，因为栈内的元素只能通过列表的一端访问，称为栈顶，数据只能在栈顶添加或删除，遵循 先入后出(LIFO，last-in-first-out) 的原则，普遍运用于计算机的方方面面。\n<!-- more -->\n对栈的操作主要有两种，一是将一个元素压入栈，push方法，另一个就是将栈顶元素出栈，pop方法。\n\n除此之外，栈还有其他的一些属性和方法：查看当前栈顶的元素值，我们使用 peek 方法，它仅仅返回栈顶元素值，并不删除它；clear 方法用于清空当前栈内的所有元素；top属性记录当前栈顶位置；length方法返回当前栈内元素总数等；接着我们定义栈的数据类型，并利用JS中的数组去实现它。\n\n![image](duizhan1.webp)\n## 栈的实现\n\n```js\n//定义栈\n\nfunction Stack () {\n    this.dataStore = [];    //初始化为空\n    this.top = 0;           //记录栈顶位置\n    this.pop = pop;         //出栈\n    this.push = push;       //入栈\n    this.peek = peek;       //查看栈顶元素\n    this.length = length;   //查看栈内元素总数\n    this.clear = clear;     //清空栈\n}\n```\n\n我们利用 dataStore 来保存栈内元素，初始化为空数组，top 属性用于记录当前栈顶位置，初始化的时候为0，\n表示栈顶对应数组的起始位置是0，如果有元素入栈，则该属性会随之反生变化。\n\n**首先我们先来实现第一个入栈方法。**\n\n#### push：向栈内压入一个新的元素\n\n\n```js\n//该方法将一个新元素入栈，放到数组中 top 所对应的位置上，并将 top 的值加 1，让其指向数组的下一个空位置\n\nfunction push( element ){\n    this.dataStore[this.top++] = element;\n}\n```\n\n能入栈，就得可以出栈，接着我们来看出栈方法：\n#### pop：取出栈顶元素\n\n```js\n//该方法与入栈相反，返回栈顶元素，并将 top 的值减 1\n\nfunction pop(){\n    return this.dataStore[--this.top];\n}\n```\n\n如何查看栈顶元素呢，peek方法！\n\n#### peek：查看栈顶元素\n\n```js\n//该方法返回的是栈顶元素，即 top - 1 个位置元素\n\nfunction peek(){\n    if( this.top > 0 ) return this.dataStore[this.top-1];\n    else return 'Empty';\n}\n```\n\n这里我做了个判断，如果一个空栈调用了 peek 方法，因为栈内没有任何元素，所以我这里返回了一个 'Empty';\n\n现在，我们已经有了基本的入栈、出栈、查看栈顶元素的方法，我们不妨试一试。\n\n\n```js\n//初始化一个栈\nvar stack = new Stack();\nconsole.log( stack.peek() );    // Empty\n\n//入栈\nstack.push('Apple');\nstack.push('Banana');\nstack.push('Pear');\n\n//查看当前栈顶元素\nconsole.log( stack.peek() );    // Pear\nconsole.log( stack.pop() );     // Pear    \n```\n\n如果我放入了一些水果，吃掉了一个，我现在想知道我还剩多少个水果怎么办？length 方法可以实现\n\n#### length：返回栈内元素总数\n\n\n```js\n//该方法通过返回 top 属性的值来返回栈内总的元素个数\n\nfunction length(){\n    return this.top;\n}\n```\n\n我们把代码恢复到出栈前的状态，也就是里面已经放了三个水果，接着我们来看看\n\n\n```js\nconsole.log( stack.length() );      // 3\n\n//出栈\nstack.pop();\n\nconsole.log( stack.length() );      // 2\n```\n\n好了，我们还剩最后一个clear方法，我们来实现一下\n\n#### clear：清空栈\n\n```js\n//该方法实现很简单，我们将 top 值置为 0 ， dataStore 数值清空即可\n\nfunction clear(){\n    delete this.dataStore;\n    this.dataStore = [];\n    this.top = 0;\n}\n```\n## 实现数制间的相互转换\n我们可以利用栈将一个数字从一种数制转换成另一种数制。例如将数字 n 转换成以 b 为基数的数字，可以采用如下算法（该算法只针对基数为 2-9 的情况）：\n\n1. 最高位为 n % b ， 直接压入栈;\n2. 使用 n / b 来代替 n ;\n3. 重复上面的步骤，知道 n 为 0 ，并且没有余数；\n4. 以此将栈内元素弹出，直到栈空，并依次将这些元素排列，就得到了转换后的形式\n\n\n```js\n//进制转换（2-9）\n\nfunction mulBase ( num , base ) {\n    var s = new Stack();\n    do{\n        s.push( num % base );\n        num = Math.floor( num /= base );\n    }while ( num > 0 );\n\n    var converted = '';\n    while (s.length() > 0){\n        converted += s.pop();\n    }\n    return converted;\n}\n\nconsole.log( mulBase( 125 , 2 ) );      // 1111101\nconsole.log( mulBase( 125 , 8 ) );      // 175\n```\n","source":"_posts/js栈.md","raw":"---\nlayout: '[post]'\ntitle: js栈\ndate: 2019-08-19 11:39:15\ntags: javascript\n---\n## 什么是堆栈\n栈，又叫堆栈，是和列表类似的一种数据结构，但是却更高效，因为栈内的元素只能通过列表的一端访问，称为栈顶，数据只能在栈顶添加或删除，遵循 先入后出(LIFO，last-in-first-out) 的原则，普遍运用于计算机的方方面面。\n<!-- more -->\n对栈的操作主要有两种，一是将一个元素压入栈，push方法，另一个就是将栈顶元素出栈，pop方法。\n\n除此之外，栈还有其他的一些属性和方法：查看当前栈顶的元素值，我们使用 peek 方法，它仅仅返回栈顶元素值，并不删除它；clear 方法用于清空当前栈内的所有元素；top属性记录当前栈顶位置；length方法返回当前栈内元素总数等；接着我们定义栈的数据类型，并利用JS中的数组去实现它。\n\n![image](duizhan1.webp)\n## 栈的实现\n\n```js\n//定义栈\n\nfunction Stack () {\n    this.dataStore = [];    //初始化为空\n    this.top = 0;           //记录栈顶位置\n    this.pop = pop;         //出栈\n    this.push = push;       //入栈\n    this.peek = peek;       //查看栈顶元素\n    this.length = length;   //查看栈内元素总数\n    this.clear = clear;     //清空栈\n}\n```\n\n我们利用 dataStore 来保存栈内元素，初始化为空数组，top 属性用于记录当前栈顶位置，初始化的时候为0，\n表示栈顶对应数组的起始位置是0，如果有元素入栈，则该属性会随之反生变化。\n\n**首先我们先来实现第一个入栈方法。**\n\n#### push：向栈内压入一个新的元素\n\n\n```js\n//该方法将一个新元素入栈，放到数组中 top 所对应的位置上，并将 top 的值加 1，让其指向数组的下一个空位置\n\nfunction push( element ){\n    this.dataStore[this.top++] = element;\n}\n```\n\n能入栈，就得可以出栈，接着我们来看出栈方法：\n#### pop：取出栈顶元素\n\n```js\n//该方法与入栈相反，返回栈顶元素，并将 top 的值减 1\n\nfunction pop(){\n    return this.dataStore[--this.top];\n}\n```\n\n如何查看栈顶元素呢，peek方法！\n\n#### peek：查看栈顶元素\n\n```js\n//该方法返回的是栈顶元素，即 top - 1 个位置元素\n\nfunction peek(){\n    if( this.top > 0 ) return this.dataStore[this.top-1];\n    else return 'Empty';\n}\n```\n\n这里我做了个判断，如果一个空栈调用了 peek 方法，因为栈内没有任何元素，所以我这里返回了一个 'Empty';\n\n现在，我们已经有了基本的入栈、出栈、查看栈顶元素的方法，我们不妨试一试。\n\n\n```js\n//初始化一个栈\nvar stack = new Stack();\nconsole.log( stack.peek() );    // Empty\n\n//入栈\nstack.push('Apple');\nstack.push('Banana');\nstack.push('Pear');\n\n//查看当前栈顶元素\nconsole.log( stack.peek() );    // Pear\nconsole.log( stack.pop() );     // Pear    \n```\n\n如果我放入了一些水果，吃掉了一个，我现在想知道我还剩多少个水果怎么办？length 方法可以实现\n\n#### length：返回栈内元素总数\n\n\n```js\n//该方法通过返回 top 属性的值来返回栈内总的元素个数\n\nfunction length(){\n    return this.top;\n}\n```\n\n我们把代码恢复到出栈前的状态，也就是里面已经放了三个水果，接着我们来看看\n\n\n```js\nconsole.log( stack.length() );      // 3\n\n//出栈\nstack.pop();\n\nconsole.log( stack.length() );      // 2\n```\n\n好了，我们还剩最后一个clear方法，我们来实现一下\n\n#### clear：清空栈\n\n```js\n//该方法实现很简单，我们将 top 值置为 0 ， dataStore 数值清空即可\n\nfunction clear(){\n    delete this.dataStore;\n    this.dataStore = [];\n    this.top = 0;\n}\n```\n## 实现数制间的相互转换\n我们可以利用栈将一个数字从一种数制转换成另一种数制。例如将数字 n 转换成以 b 为基数的数字，可以采用如下算法（该算法只针对基数为 2-9 的情况）：\n\n1. 最高位为 n % b ， 直接压入栈;\n2. 使用 n / b 来代替 n ;\n3. 重复上面的步骤，知道 n 为 0 ，并且没有余数；\n4. 以此将栈内元素弹出，直到栈空，并依次将这些元素排列，就得到了转换后的形式\n\n\n```js\n//进制转换（2-9）\n\nfunction mulBase ( num , base ) {\n    var s = new Stack();\n    do{\n        s.push( num % base );\n        num = Math.floor( num /= base );\n    }while ( num > 0 );\n\n    var converted = '';\n    while (s.length() > 0){\n        converted += s.pop();\n    }\n    return converted;\n}\n\nconsole.log( mulBase( 125 , 2 ) );      // 1111101\nconsole.log( mulBase( 125 , 8 ) );      // 175\n```\n","slug":"js栈","published":1,"updated":"2020-04-27T03:41:28.000Z","comments":1,"photos":[],"link":"","_id":"ck9v62x7d000nqqs65ywrd6d0","content":"<h2 id=\"什么是堆栈\"><a href=\"#什么是堆栈\" class=\"headerlink\" title=\"什么是堆栈\"></a>什么是堆栈</h2><p>栈，又叫堆栈，是和列表类似的一种数据结构，但是却更高效，因为栈内的元素只能通过列表的一端访问，称为栈顶，数据只能在栈顶添加或删除，遵循 先入后出(LIFO，last-in-first-out) 的原则，普遍运用于计算机的方方面面。</p>\n<a id=\"more\"></a>\n<p>对栈的操作主要有两种，一是将一个元素压入栈，push方法，另一个就是将栈顶元素出栈，pop方法。</p>\n<p>除此之外，栈还有其他的一些属性和方法：查看当前栈顶的元素值，我们使用 peek 方法，它仅仅返回栈顶元素值，并不删除它；clear 方法用于清空当前栈内的所有元素；top属性记录当前栈顶位置；length方法返回当前栈内元素总数等；接着我们定义栈的数据类型，并利用JS中的数组去实现它。</p>\n<p><img src=\"/2019/08/19/js%E6%A0%88/duizhan1.webp\" alt=\"image\"></p>\n<h2 id=\"栈的实现\"><a href=\"#栈的实现\" class=\"headerlink\" title=\"栈的实现\"></a>栈的实现</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义栈</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Stack</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.dataStore = [];    <span class=\"comment\">//初始化为空</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.top = <span class=\"number\">0</span>;           <span class=\"comment\">//记录栈顶位置</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.pop = pop;         <span class=\"comment\">//出栈</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.push = push;       <span class=\"comment\">//入栈</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.peek = peek;       <span class=\"comment\">//查看栈顶元素</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.length = length;   <span class=\"comment\">//查看栈内元素总数</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.clear = clear;     <span class=\"comment\">//清空栈</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们利用 dataStore 来保存栈内元素，初始化为空数组，top 属性用于记录当前栈顶位置，初始化的时候为0，<br>表示栈顶对应数组的起始位置是0，如果有元素入栈，则该属性会随之反生变化。</p>\n<p><strong>首先我们先来实现第一个入栈方法。</strong></p>\n<h4 id=\"push：向栈内压入一个新的元素\"><a href=\"#push：向栈内压入一个新的元素\" class=\"headerlink\" title=\"push：向栈内压入一个新的元素\"></a>push：向栈内压入一个新的元素</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//该方法将一个新元素入栈，放到数组中 top 所对应的位置上，并将 top 的值加 1，让其指向数组的下一个空位置</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">push</span>(<span class=\"params\"> element </span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.dataStore[<span class=\"keyword\">this</span>.top++] = element;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>能入栈，就得可以出栈，接着我们来看出栈方法：</p>\n<h4 id=\"pop：取出栈顶元素\"><a href=\"#pop：取出栈顶元素\" class=\"headerlink\" title=\"pop：取出栈顶元素\"></a>pop：取出栈顶元素</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//该方法与入栈相反，返回栈顶元素，并将 top 的值减 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pop</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.dataStore[--<span class=\"keyword\">this</span>.top];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如何查看栈顶元素呢，peek方法！</p>\n<h4 id=\"peek：查看栈顶元素\"><a href=\"#peek：查看栈顶元素\" class=\"headerlink\" title=\"peek：查看栈顶元素\"></a>peek：查看栈顶元素</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//该方法返回的是栈顶元素，即 top - 1 个位置元素</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">peek</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( <span class=\"keyword\">this</span>.top &gt; <span class=\"number\">0</span> ) <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.dataStore[<span class=\"keyword\">this</span>.top<span class=\"number\">-1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"string\">'Empty'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里我做了个判断，如果一个空栈调用了 peek 方法，因为栈内没有任何元素，所以我这里返回了一个 ‘Empty’;</p>\n<p>现在，我们已经有了基本的入栈、出栈、查看栈顶元素的方法，我们不妨试一试。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//初始化一个栈</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> stack = <span class=\"keyword\">new</span> Stack();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( stack.peek() );    <span class=\"comment\">// Empty</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//入栈</span></span><br><span class=\"line\">stack.push(<span class=\"string\">'Apple'</span>);</span><br><span class=\"line\">stack.push(<span class=\"string\">'Banana'</span>);</span><br><span class=\"line\">stack.push(<span class=\"string\">'Pear'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//查看当前栈顶元素</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( stack.peek() );    <span class=\"comment\">// Pear</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( stack.pop() );     <span class=\"comment\">// Pear</span></span><br></pre></td></tr></table></figure>\n\n<p>如果我放入了一些水果，吃掉了一个，我现在想知道我还剩多少个水果怎么办？length 方法可以实现</p>\n<h4 id=\"length：返回栈内元素总数\"><a href=\"#length：返回栈内元素总数\" class=\"headerlink\" title=\"length：返回栈内元素总数\"></a>length：返回栈内元素总数</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//该方法通过返回 top 属性的值来返回栈内总的元素个数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">length</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.top;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们把代码恢复到出栈前的状态，也就是里面已经放了三个水果，接着我们来看看</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log( stack.length() );      <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//出栈</span></span><br><span class=\"line\">stack.pop();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( stack.length() );      <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n\n<p>好了，我们还剩最后一个clear方法，我们来实现一下</p>\n<h4 id=\"clear：清空栈\"><a href=\"#clear：清空栈\" class=\"headerlink\" title=\"clear：清空栈\"></a>clear：清空栈</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//该方法实现很简单，我们将 top 值置为 0 ， dataStore 数值清空即可</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clear</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> <span class=\"keyword\">this</span>.dataStore;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.dataStore = [];</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.top = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"实现数制间的相互转换\"><a href=\"#实现数制间的相互转换\" class=\"headerlink\" title=\"实现数制间的相互转换\"></a>实现数制间的相互转换</h2><p>我们可以利用栈将一个数字从一种数制转换成另一种数制。例如将数字 n 转换成以 b 为基数的数字，可以采用如下算法（该算法只针对基数为 2-9 的情况）：</p>\n<ol>\n<li>最高位为 n % b ， 直接压入栈;</li>\n<li>使用 n / b 来代替 n ;</li>\n<li>重复上面的步骤，知道 n 为 0 ，并且没有余数；</li>\n<li>以此将栈内元素弹出，直到栈空，并依次将这些元素排列，就得到了转换后的形式</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//进制转换（2-9）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mulBase</span> (<span class=\"params\"> num , base </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> Stack();</span><br><span class=\"line\">    <span class=\"keyword\">do</span>&#123;</span><br><span class=\"line\">        s.push( num % base );</span><br><span class=\"line\">        num = <span class=\"built_in\">Math</span>.floor( num /= base );</span><br><span class=\"line\">    &#125;<span class=\"keyword\">while</span> ( num &gt; <span class=\"number\">0</span> );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> converted = <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (s.length() &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        converted += s.pop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> converted;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( mulBase( <span class=\"number\">125</span> , <span class=\"number\">2</span> ) );      <span class=\"comment\">// 1111101</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( mulBase( <span class=\"number\">125</span> , <span class=\"number\">8</span> ) );      <span class=\"comment\">// 175</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"什么是堆栈\"><a href=\"#什么是堆栈\" class=\"headerlink\" title=\"什么是堆栈\"></a>什么是堆栈</h2><p>栈，又叫堆栈，是和列表类似的一种数据结构，但是却更高效，因为栈内的元素只能通过列表的一端访问，称为栈顶，数据只能在栈顶添加或删除，遵循 先入后出(LIFO，last-in-first-out) 的原则，普遍运用于计算机的方方面面。</p>","more":"<p>对栈的操作主要有两种，一是将一个元素压入栈，push方法，另一个就是将栈顶元素出栈，pop方法。</p>\n<p>除此之外，栈还有其他的一些属性和方法：查看当前栈顶的元素值，我们使用 peek 方法，它仅仅返回栈顶元素值，并不删除它；clear 方法用于清空当前栈内的所有元素；top属性记录当前栈顶位置；length方法返回当前栈内元素总数等；接着我们定义栈的数据类型，并利用JS中的数组去实现它。</p>\n<p><img src=\"/2019/08/19/js%E6%A0%88/duizhan1.webp\" alt=\"image\"></p>\n<h2 id=\"栈的实现\"><a href=\"#栈的实现\" class=\"headerlink\" title=\"栈的实现\"></a>栈的实现</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义栈</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Stack</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.dataStore = [];    <span class=\"comment\">//初始化为空</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.top = <span class=\"number\">0</span>;           <span class=\"comment\">//记录栈顶位置</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.pop = pop;         <span class=\"comment\">//出栈</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.push = push;       <span class=\"comment\">//入栈</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.peek = peek;       <span class=\"comment\">//查看栈顶元素</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.length = length;   <span class=\"comment\">//查看栈内元素总数</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.clear = clear;     <span class=\"comment\">//清空栈</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们利用 dataStore 来保存栈内元素，初始化为空数组，top 属性用于记录当前栈顶位置，初始化的时候为0，<br>表示栈顶对应数组的起始位置是0，如果有元素入栈，则该属性会随之反生变化。</p>\n<p><strong>首先我们先来实现第一个入栈方法。</strong></p>\n<h4 id=\"push：向栈内压入一个新的元素\"><a href=\"#push：向栈内压入一个新的元素\" class=\"headerlink\" title=\"push：向栈内压入一个新的元素\"></a>push：向栈内压入一个新的元素</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//该方法将一个新元素入栈，放到数组中 top 所对应的位置上，并将 top 的值加 1，让其指向数组的下一个空位置</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">push</span>(<span class=\"params\"> element </span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.dataStore[<span class=\"keyword\">this</span>.top++] = element;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>能入栈，就得可以出栈，接着我们来看出栈方法：</p>\n<h4 id=\"pop：取出栈顶元素\"><a href=\"#pop：取出栈顶元素\" class=\"headerlink\" title=\"pop：取出栈顶元素\"></a>pop：取出栈顶元素</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//该方法与入栈相反，返回栈顶元素，并将 top 的值减 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pop</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.dataStore[--<span class=\"keyword\">this</span>.top];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如何查看栈顶元素呢，peek方法！</p>\n<h4 id=\"peek：查看栈顶元素\"><a href=\"#peek：查看栈顶元素\" class=\"headerlink\" title=\"peek：查看栈顶元素\"></a>peek：查看栈顶元素</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//该方法返回的是栈顶元素，即 top - 1 个位置元素</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">peek</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( <span class=\"keyword\">this</span>.top &gt; <span class=\"number\">0</span> ) <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.dataStore[<span class=\"keyword\">this</span>.top<span class=\"number\">-1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"string\">'Empty'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里我做了个判断，如果一个空栈调用了 peek 方法，因为栈内没有任何元素，所以我这里返回了一个 ‘Empty’;</p>\n<p>现在，我们已经有了基本的入栈、出栈、查看栈顶元素的方法，我们不妨试一试。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//初始化一个栈</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> stack = <span class=\"keyword\">new</span> Stack();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( stack.peek() );    <span class=\"comment\">// Empty</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//入栈</span></span><br><span class=\"line\">stack.push(<span class=\"string\">'Apple'</span>);</span><br><span class=\"line\">stack.push(<span class=\"string\">'Banana'</span>);</span><br><span class=\"line\">stack.push(<span class=\"string\">'Pear'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//查看当前栈顶元素</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( stack.peek() );    <span class=\"comment\">// Pear</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( stack.pop() );     <span class=\"comment\">// Pear</span></span><br></pre></td></tr></table></figure>\n\n<p>如果我放入了一些水果，吃掉了一个，我现在想知道我还剩多少个水果怎么办？length 方法可以实现</p>\n<h4 id=\"length：返回栈内元素总数\"><a href=\"#length：返回栈内元素总数\" class=\"headerlink\" title=\"length：返回栈内元素总数\"></a>length：返回栈内元素总数</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//该方法通过返回 top 属性的值来返回栈内总的元素个数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">length</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.top;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们把代码恢复到出栈前的状态，也就是里面已经放了三个水果，接着我们来看看</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log( stack.length() );      <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//出栈</span></span><br><span class=\"line\">stack.pop();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( stack.length() );      <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n\n<p>好了，我们还剩最后一个clear方法，我们来实现一下</p>\n<h4 id=\"clear：清空栈\"><a href=\"#clear：清空栈\" class=\"headerlink\" title=\"clear：清空栈\"></a>clear：清空栈</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//该方法实现很简单，我们将 top 值置为 0 ， dataStore 数值清空即可</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clear</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> <span class=\"keyword\">this</span>.dataStore;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.dataStore = [];</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.top = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"实现数制间的相互转换\"><a href=\"#实现数制间的相互转换\" class=\"headerlink\" title=\"实现数制间的相互转换\"></a>实现数制间的相互转换</h2><p>我们可以利用栈将一个数字从一种数制转换成另一种数制。例如将数字 n 转换成以 b 为基数的数字，可以采用如下算法（该算法只针对基数为 2-9 的情况）：</p>\n<ol>\n<li>最高位为 n % b ， 直接压入栈;</li>\n<li>使用 n / b 来代替 n ;</li>\n<li>重复上面的步骤，知道 n 为 0 ，并且没有余数；</li>\n<li>以此将栈内元素弹出，直到栈空，并依次将这些元素排列，就得到了转换后的形式</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//进制转换（2-9）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mulBase</span> (<span class=\"params\"> num , base </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> Stack();</span><br><span class=\"line\">    <span class=\"keyword\">do</span>&#123;</span><br><span class=\"line\">        s.push( num % base );</span><br><span class=\"line\">        num = <span class=\"built_in\">Math</span>.floor( num /= base );</span><br><span class=\"line\">    &#125;<span class=\"keyword\">while</span> ( num &gt; <span class=\"number\">0</span> );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> converted = <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (s.length() &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        converted += s.pop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> converted;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( mulBase( <span class=\"number\">125</span> , <span class=\"number\">2</span> ) );      <span class=\"comment\">// 1111101</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( mulBase( <span class=\"number\">125</span> , <span class=\"number\">8</span> ) );      <span class=\"comment\">// 175</span></span><br></pre></td></tr></table></figure>"},{"layout":"[post]","title":"js的面向对象","date":"2019-07-25T10:54:57.000Z","_content":"## 类和实例\n<!-- more -->\n\n### 类的声明\n\n```js\n\t// 类的声明\n\tfunction Animal() {\n\t\tthis.name = 'animal';\n\t}\n\t// es6中的声明\n\tclass Animals {\n\t\tconstructor() {\n\t\tthis.name = 'animal';\n\t\t}\n\t}\n```\n### 类的实例化\n\n```js\n    // 实例化类\n    //在没有参数时，构造函数的括号可以省略\n\tconsole.log(new Animal(), new Animals());\n```\n## 类和继承\n### 使用构造函数进行继承\n\n```js\n//\t使用构造函数进行继承（es5）\nfunction Parent1() {\n    this.name = 'name';\n}\nParent1.prototype.say = function () {\n    console.log('say');\n}\n// 这种方式不会继承父类原型对象上的方法\nfunction Child1() {\n    Parent1.call(this); // apply;\n    this.type = 'chilid1';\n}\nconsole.log(new Child1);\n```\n**这种方式不会继承父类原型对象上的方法**\n### 借助原型链实现继承\n\n```js\n//\t借助原型链实现继承\nfunction Parent2() {\n    this.name = 'name2';\n    this.play = [1, 2, 3];\n}\nfunction Child2() {\n    this.type = 'chilid2';\n}\nChild2.prototype = new Parent2();\nconsole.log(new Child2());\nvar s1 = new Child2();\nvar s2 = new Child2();\nconsole.log(s1.play, s2.play);\t//[1,2,3] [1,2,3]\ns1.play.push(4);\nconsole.log(s1.play, s2.play);\t//[1,2,3,4] [1,2,3,4]\n```\n**多个实例化对象，共用一个原型链，修改对象中原型链上的属性，会导致其他对象的原型链上的属性也发生变化。**\n\n### 组合方式\n\n```js\n// 组合方式\nfunction Parent3() {\n    this.name = 'name3';\n    this.play = [1, 2, 3];\n}\nfunction Child3() {\n    Parent3.call(this);\n    this.type = 'chilid3';\n}\nChild3.prototype = new Parent3();\nvar s3 = new Child3();\nvar s4 = new Child3();\ns3.play.push(4);\nconsole.log(s3.play, s4.play);\n```\n**有缺点，父类的构造函数执行了两次。**\n### 组合继承的优化1\n\n```js\nfunction Parent4() {\n    this.name = '4';\n    this.play = [1, 2, 3];\n}\nfunction Child4() {\n    Parent4.call(this);\n    this.type = 'chilid4';\n}\nChild4.prototype = Parent4.prototype;\nvar s5 = new Child4();\nvar s6 = new Child4();\ns5.play.push(4);\nconsole.log(s5.play, s6.play);\nconsole.log(s5 instanceof Child4, s5 instanceof Parent4);\t// true true\nconsole.log(s5.constructor);\t// Parent4\n// 因为子类的prototype就是父类的实例，他的constructor是从父类直接拿过来的\n```\n父类只在子类实例化时执行一次，将父类的prototype赋给子类。\n\n### 组合继承的优化2\n\n```js\nfunction Parent5() {\n    this.name = '5';\n    this.play = [1, 2, 3];\n}\nfunction Child5() {\n    Parent5.call(this);\n    this.type = 'chilid5';\n}\nChild5.prototype = Object.create(Parent5.prototype);\nChild5.prototype.constructor = Child5;\nvar s5 = new Child5();\nvar s6 = new Child5();\ns5.play.push(4);\nconsole.log(s5.play, s6.play);\nconsole.log(s5 instanceof Child5, s5 instanceof Parent5); // true true\nconsole.log(s5.constructor); // Child5\n```\n### ES6的继承\n\n```js\n// es6继承\n  class Animal {\n    //构造函数，里面写上对象的属性\n    constructor(props) {\n      this.name = props.name || 'Unknown';\n    }\n    //方法写在后面\n    eat() {//父类共有的方法\n      console.log(this.name + \" will eat pests.\");\n    }\n  }\n\n  //class继承\n  class Bird extends Animal {\n    //构造函数\n    constructor(props,myAttribute) {//props是继承过来的属性，myAttribute是自己的属性\n      //调用实现父类的构造函数\n      super(props)//相当于获得父类的this指向\n      this.type = props.type || \"Unknown\";//父类的属性，也可写在父类中\n      this.attr = myAttribute;//自己的私有属性\n    }\n\n    fly() {//自己私有的方法\n      console.log(this.name + \" are friendly to people.\");\n    }\n    myattr() {//自己私有的方法\n      console.log(this.type+'---'+this.attr);\n    }\n  }\n\n//通过new实例化\n  var myBird = new Bird({\n    name: '小燕子',\n    type: 'Egg animal'//卵生动物\n  },'Bird class')\n  myBird.eat()\n  myBird.fly()\n  myBird.myattr()\n```\n","source":"_posts/js的面向对象.md","raw":"---\nlayout: '[post]'\ntitle: js的面向对象\ndate: 2019-07-25 18:54:57\ntags: javascript\n---\n## 类和实例\n<!-- more -->\n\n### 类的声明\n\n```js\n\t// 类的声明\n\tfunction Animal() {\n\t\tthis.name = 'animal';\n\t}\n\t// es6中的声明\n\tclass Animals {\n\t\tconstructor() {\n\t\tthis.name = 'animal';\n\t\t}\n\t}\n```\n### 类的实例化\n\n```js\n    // 实例化类\n    //在没有参数时，构造函数的括号可以省略\n\tconsole.log(new Animal(), new Animals());\n```\n## 类和继承\n### 使用构造函数进行继承\n\n```js\n//\t使用构造函数进行继承（es5）\nfunction Parent1() {\n    this.name = 'name';\n}\nParent1.prototype.say = function () {\n    console.log('say');\n}\n// 这种方式不会继承父类原型对象上的方法\nfunction Child1() {\n    Parent1.call(this); // apply;\n    this.type = 'chilid1';\n}\nconsole.log(new Child1);\n```\n**这种方式不会继承父类原型对象上的方法**\n### 借助原型链实现继承\n\n```js\n//\t借助原型链实现继承\nfunction Parent2() {\n    this.name = 'name2';\n    this.play = [1, 2, 3];\n}\nfunction Child2() {\n    this.type = 'chilid2';\n}\nChild2.prototype = new Parent2();\nconsole.log(new Child2());\nvar s1 = new Child2();\nvar s2 = new Child2();\nconsole.log(s1.play, s2.play);\t//[1,2,3] [1,2,3]\ns1.play.push(4);\nconsole.log(s1.play, s2.play);\t//[1,2,3,4] [1,2,3,4]\n```\n**多个实例化对象，共用一个原型链，修改对象中原型链上的属性，会导致其他对象的原型链上的属性也发生变化。**\n\n### 组合方式\n\n```js\n// 组合方式\nfunction Parent3() {\n    this.name = 'name3';\n    this.play = [1, 2, 3];\n}\nfunction Child3() {\n    Parent3.call(this);\n    this.type = 'chilid3';\n}\nChild3.prototype = new Parent3();\nvar s3 = new Child3();\nvar s4 = new Child3();\ns3.play.push(4);\nconsole.log(s3.play, s4.play);\n```\n**有缺点，父类的构造函数执行了两次。**\n### 组合继承的优化1\n\n```js\nfunction Parent4() {\n    this.name = '4';\n    this.play = [1, 2, 3];\n}\nfunction Child4() {\n    Parent4.call(this);\n    this.type = 'chilid4';\n}\nChild4.prototype = Parent4.prototype;\nvar s5 = new Child4();\nvar s6 = new Child4();\ns5.play.push(4);\nconsole.log(s5.play, s6.play);\nconsole.log(s5 instanceof Child4, s5 instanceof Parent4);\t// true true\nconsole.log(s5.constructor);\t// Parent4\n// 因为子类的prototype就是父类的实例，他的constructor是从父类直接拿过来的\n```\n父类只在子类实例化时执行一次，将父类的prototype赋给子类。\n\n### 组合继承的优化2\n\n```js\nfunction Parent5() {\n    this.name = '5';\n    this.play = [1, 2, 3];\n}\nfunction Child5() {\n    Parent5.call(this);\n    this.type = 'chilid5';\n}\nChild5.prototype = Object.create(Parent5.prototype);\nChild5.prototype.constructor = Child5;\nvar s5 = new Child5();\nvar s6 = new Child5();\ns5.play.push(4);\nconsole.log(s5.play, s6.play);\nconsole.log(s5 instanceof Child5, s5 instanceof Parent5); // true true\nconsole.log(s5.constructor); // Child5\n```\n### ES6的继承\n\n```js\n// es6继承\n  class Animal {\n    //构造函数，里面写上对象的属性\n    constructor(props) {\n      this.name = props.name || 'Unknown';\n    }\n    //方法写在后面\n    eat() {//父类共有的方法\n      console.log(this.name + \" will eat pests.\");\n    }\n  }\n\n  //class继承\n  class Bird extends Animal {\n    //构造函数\n    constructor(props,myAttribute) {//props是继承过来的属性，myAttribute是自己的属性\n      //调用实现父类的构造函数\n      super(props)//相当于获得父类的this指向\n      this.type = props.type || \"Unknown\";//父类的属性，也可写在父类中\n      this.attr = myAttribute;//自己的私有属性\n    }\n\n    fly() {//自己私有的方法\n      console.log(this.name + \" are friendly to people.\");\n    }\n    myattr() {//自己私有的方法\n      console.log(this.type+'---'+this.attr);\n    }\n  }\n\n//通过new实例化\n  var myBird = new Bird({\n    name: '小燕子',\n    type: 'Egg animal'//卵生动物\n  },'Bird class')\n  myBird.eat()\n  myBird.fly()\n  myBird.myattr()\n```\n","slug":"js的面向对象","published":1,"updated":"2020-04-14T01:21:51.000Z","comments":1,"photos":[],"link":"","_id":"ck9v62x7g000pqqs67boh5q8d","content":"<h2 id=\"类和实例\"><a href=\"#类和实例\" class=\"headerlink\" title=\"类和实例\"></a>类和实例</h2><a id=\"more\"></a>\n\n<h3 id=\"类的声明\"><a href=\"#类的声明\" class=\"headerlink\" title=\"类的声明\"></a>类的声明</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 类的声明</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Animal</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name = <span class=\"string\">'animal'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// es6中的声明</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animals</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name = <span class=\"string\">'animal'</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"类的实例化\"><a href=\"#类的实例化\" class=\"headerlink\" title=\"类的实例化\"></a>类的实例化</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"comment\">// 实例化类</span></span><br><span class=\"line\">   <span class=\"comment\">//在没有参数时，构造函数的括号可以省略</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> Animal(), <span class=\"keyword\">new</span> Animals());</span><br></pre></td></tr></table></figure>\n<h2 id=\"类和继承\"><a href=\"#类和继承\" class=\"headerlink\" title=\"类和继承\"></a>类和继承</h2><h3 id=\"使用构造函数进行继承\"><a href=\"#使用构造函数进行继承\" class=\"headerlink\" title=\"使用构造函数进行继承\"></a>使用构造函数进行继承</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//\t使用构造函数进行继承（es5）</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'name'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Parent1.prototype.say = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'say'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 这种方式不会继承父类原型对象上的方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    Parent1.call(<span class=\"keyword\">this</span>); <span class=\"comment\">// apply;</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.type = <span class=\"string\">'chilid1'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> Child1);</span><br></pre></td></tr></table></figure>\n<p><strong>这种方式不会继承父类原型对象上的方法</strong></p>\n<h3 id=\"借助原型链实现继承\"><a href=\"#借助原型链实现继承\" class=\"headerlink\" title=\"借助原型链实现继承\"></a>借助原型链实现继承</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//\t借助原型链实现继承</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'name2'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.play = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.type = <span class=\"string\">'chilid2'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Child2.prototype = <span class=\"keyword\">new</span> Parent2();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> Child2());</span><br><span class=\"line\"><span class=\"keyword\">var</span> s1 = <span class=\"keyword\">new</span> Child2();</span><br><span class=\"line\"><span class=\"keyword\">var</span> s2 = <span class=\"keyword\">new</span> Child2();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s1.play, s2.play);\t<span class=\"comment\">//[1,2,3] [1,2,3]</span></span><br><span class=\"line\">s1.play.push(<span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s1.play, s2.play);\t<span class=\"comment\">//[1,2,3,4] [1,2,3,4]</span></span><br></pre></td></tr></table></figure>\n<p><strong>多个实例化对象，共用一个原型链，修改对象中原型链上的属性，会导致其他对象的原型链上的属性也发生变化。</strong></p>\n<h3 id=\"组合方式\"><a href=\"#组合方式\" class=\"headerlink\" title=\"组合方式\"></a>组合方式</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 组合方式</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent3</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'name3'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.play = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child3</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    Parent3.call(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.type = <span class=\"string\">'chilid3'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Child3.prototype = <span class=\"keyword\">new</span> Parent3();</span><br><span class=\"line\"><span class=\"keyword\">var</span> s3 = <span class=\"keyword\">new</span> Child3();</span><br><span class=\"line\"><span class=\"keyword\">var</span> s4 = <span class=\"keyword\">new</span> Child3();</span><br><span class=\"line\">s3.play.push(<span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s3.play, s4.play);</span><br></pre></td></tr></table></figure>\n<p><strong>有缺点，父类的构造函数执行了两次。</strong></p>\n<h3 id=\"组合继承的优化1\"><a href=\"#组合继承的优化1\" class=\"headerlink\" title=\"组合继承的优化1\"></a>组合继承的优化1</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent4</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'4'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.play = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child4</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    Parent4.call(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.type = <span class=\"string\">'chilid4'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Child4.prototype = Parent4.prototype;</span><br><span class=\"line\"><span class=\"keyword\">var</span> s5 = <span class=\"keyword\">new</span> Child4();</span><br><span class=\"line\"><span class=\"keyword\">var</span> s6 = <span class=\"keyword\">new</span> Child4();</span><br><span class=\"line\">s5.play.push(<span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s5.play, s6.play);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s5 <span class=\"keyword\">instanceof</span> Child4, s5 <span class=\"keyword\">instanceof</span> Parent4);\t<span class=\"comment\">// true true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s5.constructor);\t<span class=\"comment\">// Parent4</span></span><br><span class=\"line\"><span class=\"comment\">// 因为子类的prototype就是父类的实例，他的constructor是从父类直接拿过来的</span></span><br></pre></td></tr></table></figure>\n<p>父类只在子类实例化时执行一次，将父类的prototype赋给子类。</p>\n<h3 id=\"组合继承的优化2\"><a href=\"#组合继承的优化2\" class=\"headerlink\" title=\"组合继承的优化2\"></a>组合继承的优化2</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent5</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'5'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.play = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child5</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    Parent5.call(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.type = <span class=\"string\">'chilid5'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Child5.prototype = <span class=\"built_in\">Object</span>.create(Parent5.prototype);</span><br><span class=\"line\">Child5.prototype.constructor = Child5;</span><br><span class=\"line\"><span class=\"keyword\">var</span> s5 = <span class=\"keyword\">new</span> Child5();</span><br><span class=\"line\"><span class=\"keyword\">var</span> s6 = <span class=\"keyword\">new</span> Child5();</span><br><span class=\"line\">s5.play.push(<span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s5.play, s6.play);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s5 <span class=\"keyword\">instanceof</span> Child5, s5 <span class=\"keyword\">instanceof</span> Parent5); <span class=\"comment\">// true true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s5.constructor); <span class=\"comment\">// Child5</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"ES6的继承\"><a href=\"#ES6的继承\" class=\"headerlink\" title=\"ES6的继承\"></a>ES6的继承</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// es6继承</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//构造函数，里面写上对象的属性</span></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.name = props.name || <span class=\"string\">'Unknown'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//方法写在后面</span></span><br><span class=\"line\">    eat() &#123;<span class=\"comment\">//父类共有的方法</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">\" will eat pests.\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//class继承</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bird</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//构造函数</span></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(props,myAttribute) &#123;<span class=\"comment\">//props是继承过来的属性，myAttribute是自己的属性</span></span><br><span class=\"line\">      <span class=\"comment\">//调用实现父类的构造函数</span></span><br><span class=\"line\">      <span class=\"keyword\">super</span>(props)<span class=\"comment\">//相当于获得父类的this指向</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.type = props.type || <span class=\"string\">\"Unknown\"</span>;<span class=\"comment\">//父类的属性，也可写在父类中</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.attr = myAttribute;<span class=\"comment\">//自己的私有属性</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    fly() &#123;<span class=\"comment\">//自己私有的方法</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">\" are friendly to people.\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    myattr() &#123;<span class=\"comment\">//自己私有的方法</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.type+<span class=\"string\">'---'</span>+<span class=\"keyword\">this</span>.attr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//通过new实例化</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> myBird = <span class=\"keyword\">new</span> Bird(&#123;</span><br><span class=\"line\">    name: <span class=\"string\">'小燕子'</span>,</span><br><span class=\"line\">    type: <span class=\"string\">'Egg animal'</span><span class=\"comment\">//卵生动物</span></span><br><span class=\"line\">  &#125;,<span class=\"string\">'Bird class'</span>)</span><br><span class=\"line\">  myBird.eat()</span><br><span class=\"line\">  myBird.fly()</span><br><span class=\"line\">  myBird.myattr()</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"类和实例\"><a href=\"#类和实例\" class=\"headerlink\" title=\"类和实例\"></a>类和实例</h2>","more":"<h3 id=\"类的声明\"><a href=\"#类的声明\" class=\"headerlink\" title=\"类的声明\"></a>类的声明</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 类的声明</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Animal</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name = <span class=\"string\">'animal'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// es6中的声明</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animals</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name = <span class=\"string\">'animal'</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"类的实例化\"><a href=\"#类的实例化\" class=\"headerlink\" title=\"类的实例化\"></a>类的实例化</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"comment\">// 实例化类</span></span><br><span class=\"line\">   <span class=\"comment\">//在没有参数时，构造函数的括号可以省略</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> Animal(), <span class=\"keyword\">new</span> Animals());</span><br></pre></td></tr></table></figure>\n<h2 id=\"类和继承\"><a href=\"#类和继承\" class=\"headerlink\" title=\"类和继承\"></a>类和继承</h2><h3 id=\"使用构造函数进行继承\"><a href=\"#使用构造函数进行继承\" class=\"headerlink\" title=\"使用构造函数进行继承\"></a>使用构造函数进行继承</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//\t使用构造函数进行继承（es5）</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'name'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Parent1.prototype.say = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'say'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 这种方式不会继承父类原型对象上的方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    Parent1.call(<span class=\"keyword\">this</span>); <span class=\"comment\">// apply;</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.type = <span class=\"string\">'chilid1'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> Child1);</span><br></pre></td></tr></table></figure>\n<p><strong>这种方式不会继承父类原型对象上的方法</strong></p>\n<h3 id=\"借助原型链实现继承\"><a href=\"#借助原型链实现继承\" class=\"headerlink\" title=\"借助原型链实现继承\"></a>借助原型链实现继承</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//\t借助原型链实现继承</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'name2'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.play = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.type = <span class=\"string\">'chilid2'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Child2.prototype = <span class=\"keyword\">new</span> Parent2();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> Child2());</span><br><span class=\"line\"><span class=\"keyword\">var</span> s1 = <span class=\"keyword\">new</span> Child2();</span><br><span class=\"line\"><span class=\"keyword\">var</span> s2 = <span class=\"keyword\">new</span> Child2();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s1.play, s2.play);\t<span class=\"comment\">//[1,2,3] [1,2,3]</span></span><br><span class=\"line\">s1.play.push(<span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s1.play, s2.play);\t<span class=\"comment\">//[1,2,3,4] [1,2,3,4]</span></span><br></pre></td></tr></table></figure>\n<p><strong>多个实例化对象，共用一个原型链，修改对象中原型链上的属性，会导致其他对象的原型链上的属性也发生变化。</strong></p>\n<h3 id=\"组合方式\"><a href=\"#组合方式\" class=\"headerlink\" title=\"组合方式\"></a>组合方式</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 组合方式</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent3</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'name3'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.play = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child3</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    Parent3.call(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.type = <span class=\"string\">'chilid3'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Child3.prototype = <span class=\"keyword\">new</span> Parent3();</span><br><span class=\"line\"><span class=\"keyword\">var</span> s3 = <span class=\"keyword\">new</span> Child3();</span><br><span class=\"line\"><span class=\"keyword\">var</span> s4 = <span class=\"keyword\">new</span> Child3();</span><br><span class=\"line\">s3.play.push(<span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s3.play, s4.play);</span><br></pre></td></tr></table></figure>\n<p><strong>有缺点，父类的构造函数执行了两次。</strong></p>\n<h3 id=\"组合继承的优化1\"><a href=\"#组合继承的优化1\" class=\"headerlink\" title=\"组合继承的优化1\"></a>组合继承的优化1</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent4</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'4'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.play = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child4</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    Parent4.call(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.type = <span class=\"string\">'chilid4'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Child4.prototype = Parent4.prototype;</span><br><span class=\"line\"><span class=\"keyword\">var</span> s5 = <span class=\"keyword\">new</span> Child4();</span><br><span class=\"line\"><span class=\"keyword\">var</span> s6 = <span class=\"keyword\">new</span> Child4();</span><br><span class=\"line\">s5.play.push(<span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s5.play, s6.play);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s5 <span class=\"keyword\">instanceof</span> Child4, s5 <span class=\"keyword\">instanceof</span> Parent4);\t<span class=\"comment\">// true true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s5.constructor);\t<span class=\"comment\">// Parent4</span></span><br><span class=\"line\"><span class=\"comment\">// 因为子类的prototype就是父类的实例，他的constructor是从父类直接拿过来的</span></span><br></pre></td></tr></table></figure>\n<p>父类只在子类实例化时执行一次，将父类的prototype赋给子类。</p>\n<h3 id=\"组合继承的优化2\"><a href=\"#组合继承的优化2\" class=\"headerlink\" title=\"组合继承的优化2\"></a>组合继承的优化2</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent5</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'5'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.play = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child5</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    Parent5.call(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.type = <span class=\"string\">'chilid5'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Child5.prototype = <span class=\"built_in\">Object</span>.create(Parent5.prototype);</span><br><span class=\"line\">Child5.prototype.constructor = Child5;</span><br><span class=\"line\"><span class=\"keyword\">var</span> s5 = <span class=\"keyword\">new</span> Child5();</span><br><span class=\"line\"><span class=\"keyword\">var</span> s6 = <span class=\"keyword\">new</span> Child5();</span><br><span class=\"line\">s5.play.push(<span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s5.play, s6.play);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s5 <span class=\"keyword\">instanceof</span> Child5, s5 <span class=\"keyword\">instanceof</span> Parent5); <span class=\"comment\">// true true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s5.constructor); <span class=\"comment\">// Child5</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"ES6的继承\"><a href=\"#ES6的继承\" class=\"headerlink\" title=\"ES6的继承\"></a>ES6的继承</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// es6继承</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//构造函数，里面写上对象的属性</span></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.name = props.name || <span class=\"string\">'Unknown'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//方法写在后面</span></span><br><span class=\"line\">    eat() &#123;<span class=\"comment\">//父类共有的方法</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">\" will eat pests.\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//class继承</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bird</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//构造函数</span></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(props,myAttribute) &#123;<span class=\"comment\">//props是继承过来的属性，myAttribute是自己的属性</span></span><br><span class=\"line\">      <span class=\"comment\">//调用实现父类的构造函数</span></span><br><span class=\"line\">      <span class=\"keyword\">super</span>(props)<span class=\"comment\">//相当于获得父类的this指向</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.type = props.type || <span class=\"string\">\"Unknown\"</span>;<span class=\"comment\">//父类的属性，也可写在父类中</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.attr = myAttribute;<span class=\"comment\">//自己的私有属性</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    fly() &#123;<span class=\"comment\">//自己私有的方法</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">\" are friendly to people.\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    myattr() &#123;<span class=\"comment\">//自己私有的方法</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.type+<span class=\"string\">'---'</span>+<span class=\"keyword\">this</span>.attr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//通过new实例化</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> myBird = <span class=\"keyword\">new</span> Bird(&#123;</span><br><span class=\"line\">    name: <span class=\"string\">'小燕子'</span>,</span><br><span class=\"line\">    type: <span class=\"string\">'Egg animal'</span><span class=\"comment\">//卵生动物</span></span><br><span class=\"line\">  &#125;,<span class=\"string\">'Bird class'</span>)</span><br><span class=\"line\">  myBird.eat()</span><br><span class=\"line\">  myBird.fly()</span><br><span class=\"line\">  myBird.myattr()</span><br></pre></td></tr></table></figure>"},{"layout":"[post]","title":"meta标签使用总结","date":"2019-03-02T00:06:54.000Z","_content":"## Meta对象\nMeta 对象代表 HTML 的 一个 <meta> 元素。\n\n<meta> 元素可提供有关某个 HTML 元素的元信息 (meta-information)，比如描述、针对搜索引擎的关键词以及刷新频率。\n<!-- more -->\n## meta对象的属性\n\n属性 | 描述\n---|---\ncontent |设置或返回 <meta> 元素的 content 属性的值。\nhttpEquiv| 把 content 属性连接到一个 HTTP 头部。\nname|把 content 属性连接到某个名称。\nscheme|设置或返回用于解释 content 属性的值的格式。\n\n常用的包括 http-equiv搭配content和name搭配content两种。\n\n## name\n### **name可用参数有这些：**\n###  keywords(关键字)\n说明：用于告诉搜索引擎，你网页的关键字\n```html\n<meta name=\"keywords\" content=\"前端,js,css\">\n```\n### description(网站内容的描述)\n说明：用于告诉搜索引擎，你网站的主要内容  \n```html\n<meta name=\"description\" content=\"一个前端网站\">\n```\n\n### viewport(移动端的窗口)\n说明：在用bootstrap,AmazeUI等框架时候都有用过viewport。\n\n```html\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n```\n### robots(定义搜索引擎爬虫的索引方式)\n说明：robots用来告诉爬虫哪些页面需要索引，哪些页面不需要索引。content的参数有all,none,index,noindex,follow,nofollow。默认是all。\n\n```html\n<meta name=\"robots\" content=\"none\">\n```\n具体参数如下：\n\n1. none : 搜索引擎将忽略此网页，等价于noindex，nofollow。\n2. noindex : 搜索引擎不索引此网页。\n3. nofollow: 搜索引擎不继续通过此网页的链接索引搜索其它的网页。\n4. all : 搜索引擎将索引此网页与继续通过此网页的链接索引，等价于index，follow。\n5. index : 搜索引擎索引此网页。\n6. follow : 搜索引擎继续通过此网页的链接索引搜索其它的网页。\n\n### author(作者)\n说明：用于标注网页作者\n\n```html\n<meta name=\"author\" content=\"xxx\">\n```\n### generator(网页制作软件)\n说明：用于标明网页是什么软件做的\n\n```html\n<meta name=\"generator\" content=\"Sublime Text3\">\n```\n### copyright(版权)\n说明：用于标注版权信息\n\n```html\n<meta name=\"copyright\" content=\"xxx\">\n```\n### revisit-after(搜索引擎爬虫重访时间)\n说明：如果页面不是经常更新，为了减轻搜索引擎爬虫对服务器带来的压力，可以设置一个爬虫的重访时间。如果重访时间过短，爬虫将按它们定义的默认时间来访问。\n\n```html\n<meta name=\"revisit-after\" content=\"7 days\" >\n```\n### renderer(双核浏览器渲染方式)\n说明：renderer是为双核浏览器准备的，用于指定双核浏览器默认以何种方式渲染页面。比如说360浏览器。\n\n```html\n<meta name=\"renderer\" content=\"webkit\"> //默认webkit内核\n<meta name=\"renderer\" content=\"ie-comp\"> //默认IE兼容模式\n<meta name=\"renderer\" content=\"ie-stand\"> //默认IE标准模式\n```\n## http-equiv\n### content-Type(设定网页字符集)(推荐使用HTML5的方式)\n说明：用于设定网页字符集，便于浏览器解析与渲染页面举例：\n```html\n<meta http-equiv=\"content-Type\" content=\"text/html;charset=utf-8\">  //旧的HTML，不推荐\n\n<meta charset=\"utf-8\"> //HTML5设定网页字符集的方式，推荐使用UTF-8\n```\n### X-UA-Compatible(浏览器采取何种版本渲染当前页面)\n说明：用于告知浏览器以何种版本来渲染页面。（一般都设置为最新模式，在各大框架中这个设置也很常见。）举例：\n```html\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\"/> //指定IE和Chrome使用最新版本渲染当前页面\n```\n### cache-control(指定请求和响应遵循的缓存机制)\n说明：指导浏览器如何缓存某个响应以及缓存多长时间。\n\n```html\n<meta http-equiv=\"cache-control\" content=\"no-cache\">\n```\n共有以下几种用法：\n\n1. no-cache: 先发送请求，与服务器确认该资源是否被更改，如果未被更改，则使用缓存。\n\n2. no-store: 不允许缓存，每次都要去服务器上，下载完整的响应。（安全措施）\n\n3. public : 缓存所有响应，但并非必须。因为max-age也可以做到相同效果\n\n4. private : 只为单个用户缓存，因此不允许任何中继进行缓存。（比如说CDN就不允许缓存private的响应）\n\n5. maxage : 表示当前请求开始，该响应在多久内能被缓存和重用，而不去服务器重新请求。例如：max-age=60表示响应可以再缓存和重用 60 秒。\n用法2.(禁止百度自动转码)\n说明：用于禁止当前页面在移动端浏览时，被百度自动转码。虽然百度的本意是好的，但是转码效果很多时候却不尽人意。所以可以在head中加入例子中的那句话，就可以避免百度自动转码了。举例：\n\n\n```html\n<meta http-equiv=\"Cache-Control\" content=\"no-siteapp\" />\n```\n### expires(网页到期时间)\n说明:用于设定网页的到期时间，过期后网页必须到服务器上重新传输。\n\n```html\n<meta http-equiv=\"expires\" content=\"Sunday 26 October 2016 01:00 GMT\" />\n```\n### refresh(自动刷新并指向某页面)\n说明：网页将在设定的时间内，自动刷新并调向设定的网址。\n\n```html\n<meta http-equiv=\"refresh\" content=\"2；URL=http://www.baidu.com/\"> //意思是2秒后跳转向baidu\n```\n### Set-Cookie(cookie设定)\n说明：如果网页过期。那么这个网页存在本地的cookies也会被自动删除。\n\n```html\n<meta http-equiv=\"set-cookie\" content=\"runoobcookie=myContent;expires=Fri, 30 Dec 2015 12:00:00 GMT; path=http://www.runoob.com\">\n```\n","source":"_posts/meta标签使用总结.md","raw":"---\nlayout: '[post]'\ntitle: meta标签使用总结\ndate: 2019-03-02 08:06:54\ntags: html\n---\n## Meta对象\nMeta 对象代表 HTML 的 一个 <meta> 元素。\n\n<meta> 元素可提供有关某个 HTML 元素的元信息 (meta-information)，比如描述、针对搜索引擎的关键词以及刷新频率。\n<!-- more -->\n## meta对象的属性\n\n属性 | 描述\n---|---\ncontent |设置或返回 <meta> 元素的 content 属性的值。\nhttpEquiv| 把 content 属性连接到一个 HTTP 头部。\nname|把 content 属性连接到某个名称。\nscheme|设置或返回用于解释 content 属性的值的格式。\n\n常用的包括 http-equiv搭配content和name搭配content两种。\n\n## name\n### **name可用参数有这些：**\n###  keywords(关键字)\n说明：用于告诉搜索引擎，你网页的关键字\n```html\n<meta name=\"keywords\" content=\"前端,js,css\">\n```\n### description(网站内容的描述)\n说明：用于告诉搜索引擎，你网站的主要内容  \n```html\n<meta name=\"description\" content=\"一个前端网站\">\n```\n\n### viewport(移动端的窗口)\n说明：在用bootstrap,AmazeUI等框架时候都有用过viewport。\n\n```html\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n```\n### robots(定义搜索引擎爬虫的索引方式)\n说明：robots用来告诉爬虫哪些页面需要索引，哪些页面不需要索引。content的参数有all,none,index,noindex,follow,nofollow。默认是all。\n\n```html\n<meta name=\"robots\" content=\"none\">\n```\n具体参数如下：\n\n1. none : 搜索引擎将忽略此网页，等价于noindex，nofollow。\n2. noindex : 搜索引擎不索引此网页。\n3. nofollow: 搜索引擎不继续通过此网页的链接索引搜索其它的网页。\n4. all : 搜索引擎将索引此网页与继续通过此网页的链接索引，等价于index，follow。\n5. index : 搜索引擎索引此网页。\n6. follow : 搜索引擎继续通过此网页的链接索引搜索其它的网页。\n\n### author(作者)\n说明：用于标注网页作者\n\n```html\n<meta name=\"author\" content=\"xxx\">\n```\n### generator(网页制作软件)\n说明：用于标明网页是什么软件做的\n\n```html\n<meta name=\"generator\" content=\"Sublime Text3\">\n```\n### copyright(版权)\n说明：用于标注版权信息\n\n```html\n<meta name=\"copyright\" content=\"xxx\">\n```\n### revisit-after(搜索引擎爬虫重访时间)\n说明：如果页面不是经常更新，为了减轻搜索引擎爬虫对服务器带来的压力，可以设置一个爬虫的重访时间。如果重访时间过短，爬虫将按它们定义的默认时间来访问。\n\n```html\n<meta name=\"revisit-after\" content=\"7 days\" >\n```\n### renderer(双核浏览器渲染方式)\n说明：renderer是为双核浏览器准备的，用于指定双核浏览器默认以何种方式渲染页面。比如说360浏览器。\n\n```html\n<meta name=\"renderer\" content=\"webkit\"> //默认webkit内核\n<meta name=\"renderer\" content=\"ie-comp\"> //默认IE兼容模式\n<meta name=\"renderer\" content=\"ie-stand\"> //默认IE标准模式\n```\n## http-equiv\n### content-Type(设定网页字符集)(推荐使用HTML5的方式)\n说明：用于设定网页字符集，便于浏览器解析与渲染页面举例：\n```html\n<meta http-equiv=\"content-Type\" content=\"text/html;charset=utf-8\">  //旧的HTML，不推荐\n\n<meta charset=\"utf-8\"> //HTML5设定网页字符集的方式，推荐使用UTF-8\n```\n### X-UA-Compatible(浏览器采取何种版本渲染当前页面)\n说明：用于告知浏览器以何种版本来渲染页面。（一般都设置为最新模式，在各大框架中这个设置也很常见。）举例：\n```html\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\"/> //指定IE和Chrome使用最新版本渲染当前页面\n```\n### cache-control(指定请求和响应遵循的缓存机制)\n说明：指导浏览器如何缓存某个响应以及缓存多长时间。\n\n```html\n<meta http-equiv=\"cache-control\" content=\"no-cache\">\n```\n共有以下几种用法：\n\n1. no-cache: 先发送请求，与服务器确认该资源是否被更改，如果未被更改，则使用缓存。\n\n2. no-store: 不允许缓存，每次都要去服务器上，下载完整的响应。（安全措施）\n\n3. public : 缓存所有响应，但并非必须。因为max-age也可以做到相同效果\n\n4. private : 只为单个用户缓存，因此不允许任何中继进行缓存。（比如说CDN就不允许缓存private的响应）\n\n5. maxage : 表示当前请求开始，该响应在多久内能被缓存和重用，而不去服务器重新请求。例如：max-age=60表示响应可以再缓存和重用 60 秒。\n用法2.(禁止百度自动转码)\n说明：用于禁止当前页面在移动端浏览时，被百度自动转码。虽然百度的本意是好的，但是转码效果很多时候却不尽人意。所以可以在head中加入例子中的那句话，就可以避免百度自动转码了。举例：\n\n\n```html\n<meta http-equiv=\"Cache-Control\" content=\"no-siteapp\" />\n```\n### expires(网页到期时间)\n说明:用于设定网页的到期时间，过期后网页必须到服务器上重新传输。\n\n```html\n<meta http-equiv=\"expires\" content=\"Sunday 26 October 2016 01:00 GMT\" />\n```\n### refresh(自动刷新并指向某页面)\n说明：网页将在设定的时间内，自动刷新并调向设定的网址。\n\n```html\n<meta http-equiv=\"refresh\" content=\"2；URL=http://www.baidu.com/\"> //意思是2秒后跳转向baidu\n```\n### Set-Cookie(cookie设定)\n说明：如果网页过期。那么这个网页存在本地的cookies也会被自动删除。\n\n```html\n<meta http-equiv=\"set-cookie\" content=\"runoobcookie=myContent;expires=Fri, 30 Dec 2015 12:00:00 GMT; path=http://www.runoob.com\">\n```\n","slug":"meta标签使用总结","published":1,"updated":"2019-03-02T00:07:35.000Z","comments":1,"photos":[],"link":"","_id":"ck9v62x7i000rqqs6205uhpbr","content":"<h2 id=\"Meta对象\"><a href=\"#Meta对象\" class=\"headerlink\" title=\"Meta对象\"></a>Meta对象</h2><p>Meta 对象代表 HTML 的 一个 <meta> 元素。</p>\n<meta> 元素可提供有关某个 HTML 元素的元信息 (meta-information)，比如描述、针对搜索引擎的关键词以及刷新频率。\n<a id=\"more\"></a>\n## meta对象的属性\n\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>content</td>\n<td>设置或返回 <meta> 元素的 content 属性的值。</td>\n</tr>\n<tr>\n<td>httpEquiv</td>\n<td>把 content 属性连接到一个 HTTP 头部。</td>\n</tr>\n<tr>\n<td>name</td>\n<td>把 content 属性连接到某个名称。</td>\n</tr>\n<tr>\n<td>scheme</td>\n<td>设置或返回用于解释 content 属性的值的格式。</td>\n</tr>\n</tbody></table>\n<p>常用的包括 http-equiv搭配content和name搭配content两种。</p>\n<h2 id=\"name\"><a href=\"#name\" class=\"headerlink\" title=\"name\"></a>name</h2><h3 id=\"name可用参数有这些：\"><a href=\"#name可用参数有这些：\" class=\"headerlink\" title=\"name可用参数有这些：\"></a><strong>name可用参数有这些：</strong></h3><h3 id=\"keywords-关键字\"><a href=\"#keywords-关键字\" class=\"headerlink\" title=\"keywords(关键字)\"></a>keywords(关键字)</h3><p>说明：用于告诉搜索引擎，你网页的关键字</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"keywords\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"前端,js,css\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"description-网站内容的描述\"><a href=\"#description-网站内容的描述\" class=\"headerlink\" title=\"description(网站内容的描述)\"></a>description(网站内容的描述)</h3><p>说明：用于告诉搜索引擎，你网站的主要内容  </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"description\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"一个前端网站\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"viewport-移动端的窗口\"><a href=\"#viewport-移动端的窗口\" class=\"headerlink\" title=\"viewport(移动端的窗口)\"></a>viewport(移动端的窗口)</h3><p>说明：在用bootstrap,AmazeUI等框架时候都有用过viewport。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"robots-定义搜索引擎爬虫的索引方式\"><a href=\"#robots-定义搜索引擎爬虫的索引方式\" class=\"headerlink\" title=\"robots(定义搜索引擎爬虫的索引方式)\"></a>robots(定义搜索引擎爬虫的索引方式)</h3><p>说明：robots用来告诉爬虫哪些页面需要索引，哪些页面不需要索引。content的参数有all,none,index,noindex,follow,nofollow。默认是all。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"robots\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"none\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>具体参数如下：</p>\n<ol>\n<li>none : 搜索引擎将忽略此网页，等价于noindex，nofollow。</li>\n<li>noindex : 搜索引擎不索引此网页。</li>\n<li>nofollow: 搜索引擎不继续通过此网页的链接索引搜索其它的网页。</li>\n<li>all : 搜索引擎将索引此网页与继续通过此网页的链接索引，等价于index，follow。</li>\n<li>index : 搜索引擎索引此网页。</li>\n<li>follow : 搜索引擎继续通过此网页的链接索引搜索其它的网页。</li>\n</ol>\n<h3 id=\"author-作者\"><a href=\"#author-作者\" class=\"headerlink\" title=\"author(作者)\"></a>author(作者)</h3><p>说明：用于标注网页作者</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"author\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"xxx\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"generator-网页制作软件\"><a href=\"#generator-网页制作软件\" class=\"headerlink\" title=\"generator(网页制作软件)\"></a>generator(网页制作软件)</h3><p>说明：用于标明网页是什么软件做的</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"generator\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"Sublime Text3\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"copyright-版权\"><a href=\"#copyright-版权\" class=\"headerlink\" title=\"copyright(版权)\"></a>copyright(版权)</h3><p>说明：用于标注版权信息</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"copyright\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"xxx\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"revisit-after-搜索引擎爬虫重访时间\"><a href=\"#revisit-after-搜索引擎爬虫重访时间\" class=\"headerlink\" title=\"revisit-after(搜索引擎爬虫重访时间)\"></a>revisit-after(搜索引擎爬虫重访时间)</h3><p>说明：如果页面不是经常更新，为了减轻搜索引擎爬虫对服务器带来的压力，可以设置一个爬虫的重访时间。如果重访时间过短，爬虫将按它们定义的默认时间来访问。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"revisit-after\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"7 days\"</span> &gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"renderer-双核浏览器渲染方式\"><a href=\"#renderer-双核浏览器渲染方式\" class=\"headerlink\" title=\"renderer(双核浏览器渲染方式)\"></a>renderer(双核浏览器渲染方式)</h3><p>说明：renderer是为双核浏览器准备的，用于指定双核浏览器默认以何种方式渲染页面。比如说360浏览器。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"renderer\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"webkit\"</span>&gt;</span> //默认webkit内核</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"renderer\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie-comp\"</span>&gt;</span> //默认IE兼容模式</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"renderer\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie-stand\"</span>&gt;</span> //默认IE标准模式</span><br></pre></td></tr></table></figure>\n<h2 id=\"http-equiv\"><a href=\"#http-equiv\" class=\"headerlink\" title=\"http-equiv\"></a>http-equiv</h2><h3 id=\"content-Type-设定网页字符集-推荐使用HTML5的方式\"><a href=\"#content-Type-设定网页字符集-推荐使用HTML5的方式\" class=\"headerlink\" title=\"content-Type(设定网页字符集)(推荐使用HTML5的方式)\"></a>content-Type(设定网页字符集)(推荐使用HTML5的方式)</h3><p>说明：用于设定网页字符集，便于浏览器解析与渲染页面举例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"content-Type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html;charset=utf-8\"</span>&gt;</span>  //旧的HTML，不推荐</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span> //HTML5设定网页字符集的方式，推荐使用UTF-8</span><br></pre></td></tr></table></figure>\n<h3 id=\"X-UA-Compatible-浏览器采取何种版本渲染当前页面\"><a href=\"#X-UA-Compatible-浏览器采取何种版本渲染当前页面\" class=\"headerlink\" title=\"X-UA-Compatible(浏览器采取何种版本渲染当前页面)\"></a>X-UA-Compatible(浏览器采取何种版本渲染当前页面)</h3><p>说明：用于告知浏览器以何种版本来渲染页面。（一般都设置为最新模式，在各大框架中这个设置也很常见。）举例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=edge,chrome=1\"</span>/&gt;</span> //指定IE和Chrome使用最新版本渲染当前页面</span><br></pre></td></tr></table></figure>\n<h3 id=\"cache-control-指定请求和响应遵循的缓存机制\"><a href=\"#cache-control-指定请求和响应遵循的缓存机制\" class=\"headerlink\" title=\"cache-control(指定请求和响应遵循的缓存机制)\"></a>cache-control(指定请求和响应遵循的缓存机制)</h3><p>说明：指导浏览器如何缓存某个响应以及缓存多长时间。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"cache-control\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"no-cache\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>共有以下几种用法：</p>\n<ol>\n<li><p>no-cache: 先发送请求，与服务器确认该资源是否被更改，如果未被更改，则使用缓存。</p>\n</li>\n<li><p>no-store: 不允许缓存，每次都要去服务器上，下载完整的响应。（安全措施）</p>\n</li>\n<li><p>public : 缓存所有响应，但并非必须。因为max-age也可以做到相同效果</p>\n</li>\n<li><p>private : 只为单个用户缓存，因此不允许任何中继进行缓存。（比如说CDN就不允许缓存private的响应）</p>\n</li>\n<li><p>maxage : 表示当前请求开始，该响应在多久内能被缓存和重用，而不去服务器重新请求。例如：max-age=60表示响应可以再缓存和重用 60 秒。<br>用法2.(禁止百度自动转码)<br>说明：用于禁止当前页面在移动端浏览时，被百度自动转码。虽然百度的本意是好的，但是转码效果很多时候却不尽人意。所以可以在head中加入例子中的那句话，就可以避免百度自动转码了。举例：</p>\n</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Cache-Control\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"no-siteapp\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"expires-网页到期时间\"><a href=\"#expires-网页到期时间\" class=\"headerlink\" title=\"expires(网页到期时间)\"></a>expires(网页到期时间)</h3><p>说明:用于设定网页的到期时间，过期后网页必须到服务器上重新传输。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"expires\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"Sunday 26 October 2016 01:00 GMT\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"refresh-自动刷新并指向某页面\"><a href=\"#refresh-自动刷新并指向某页面\" class=\"headerlink\" title=\"refresh(自动刷新并指向某页面)\"></a>refresh(自动刷新并指向某页面)</h3><p>说明：网页将在设定的时间内，自动刷新并调向设定的网址。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"refresh\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"2；URL=http://www.baidu.com/\"</span>&gt;</span> //意思是2秒后跳转向baidu</span><br></pre></td></tr></table></figure>\n<h3 id=\"Set-Cookie-cookie设定\"><a href=\"#Set-Cookie-cookie设定\" class=\"headerlink\" title=\"Set-Cookie(cookie设定)\"></a>Set-Cookie(cookie设定)</h3><p>说明：如果网页过期。那么这个网页存在本地的cookies也会被自动删除。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"set-cookie\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"runoobcookie=myContent;expires=Fri, 30 Dec 2015 12:00:00 GMT; path=http://www.runoob.com\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"Meta对象\"><a href=\"#Meta对象\" class=\"headerlink\" title=\"Meta对象\"></a>Meta对象</h2><p>Meta 对象代表 HTML 的 一个 <meta> 元素。</p>\n<meta> 元素可提供有关某个 HTML 元素的元信息 (meta-information)，比如描述、针对搜索引擎的关键词以及刷新频率。","more":"## meta对象的属性\n\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>content</td>\n<td>设置或返回 <meta> 元素的 content 属性的值。</td>\n</tr>\n<tr>\n<td>httpEquiv</td>\n<td>把 content 属性连接到一个 HTTP 头部。</td>\n</tr>\n<tr>\n<td>name</td>\n<td>把 content 属性连接到某个名称。</td>\n</tr>\n<tr>\n<td>scheme</td>\n<td>设置或返回用于解释 content 属性的值的格式。</td>\n</tr>\n</tbody></table>\n<p>常用的包括 http-equiv搭配content和name搭配content两种。</p>\n<h2 id=\"name\"><a href=\"#name\" class=\"headerlink\" title=\"name\"></a>name</h2><h3 id=\"name可用参数有这些：\"><a href=\"#name可用参数有这些：\" class=\"headerlink\" title=\"name可用参数有这些：\"></a><strong>name可用参数有这些：</strong></h3><h3 id=\"keywords-关键字\"><a href=\"#keywords-关键字\" class=\"headerlink\" title=\"keywords(关键字)\"></a>keywords(关键字)</h3><p>说明：用于告诉搜索引擎，你网页的关键字</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"keywords\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"前端,js,css\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"description-网站内容的描述\"><a href=\"#description-网站内容的描述\" class=\"headerlink\" title=\"description(网站内容的描述)\"></a>description(网站内容的描述)</h3><p>说明：用于告诉搜索引擎，你网站的主要内容  </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"description\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"一个前端网站\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"viewport-移动端的窗口\"><a href=\"#viewport-移动端的窗口\" class=\"headerlink\" title=\"viewport(移动端的窗口)\"></a>viewport(移动端的窗口)</h3><p>说明：在用bootstrap,AmazeUI等框架时候都有用过viewport。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"robots-定义搜索引擎爬虫的索引方式\"><a href=\"#robots-定义搜索引擎爬虫的索引方式\" class=\"headerlink\" title=\"robots(定义搜索引擎爬虫的索引方式)\"></a>robots(定义搜索引擎爬虫的索引方式)</h3><p>说明：robots用来告诉爬虫哪些页面需要索引，哪些页面不需要索引。content的参数有all,none,index,noindex,follow,nofollow。默认是all。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"robots\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"none\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>具体参数如下：</p>\n<ol>\n<li>none : 搜索引擎将忽略此网页，等价于noindex，nofollow。</li>\n<li>noindex : 搜索引擎不索引此网页。</li>\n<li>nofollow: 搜索引擎不继续通过此网页的链接索引搜索其它的网页。</li>\n<li>all : 搜索引擎将索引此网页与继续通过此网页的链接索引，等价于index，follow。</li>\n<li>index : 搜索引擎索引此网页。</li>\n<li>follow : 搜索引擎继续通过此网页的链接索引搜索其它的网页。</li>\n</ol>\n<h3 id=\"author-作者\"><a href=\"#author-作者\" class=\"headerlink\" title=\"author(作者)\"></a>author(作者)</h3><p>说明：用于标注网页作者</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"author\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"xxx\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"generator-网页制作软件\"><a href=\"#generator-网页制作软件\" class=\"headerlink\" title=\"generator(网页制作软件)\"></a>generator(网页制作软件)</h3><p>说明：用于标明网页是什么软件做的</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"generator\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"Sublime Text3\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"copyright-版权\"><a href=\"#copyright-版权\" class=\"headerlink\" title=\"copyright(版权)\"></a>copyright(版权)</h3><p>说明：用于标注版权信息</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"copyright\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"xxx\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"revisit-after-搜索引擎爬虫重访时间\"><a href=\"#revisit-after-搜索引擎爬虫重访时间\" class=\"headerlink\" title=\"revisit-after(搜索引擎爬虫重访时间)\"></a>revisit-after(搜索引擎爬虫重访时间)</h3><p>说明：如果页面不是经常更新，为了减轻搜索引擎爬虫对服务器带来的压力，可以设置一个爬虫的重访时间。如果重访时间过短，爬虫将按它们定义的默认时间来访问。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"revisit-after\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"7 days\"</span> &gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"renderer-双核浏览器渲染方式\"><a href=\"#renderer-双核浏览器渲染方式\" class=\"headerlink\" title=\"renderer(双核浏览器渲染方式)\"></a>renderer(双核浏览器渲染方式)</h3><p>说明：renderer是为双核浏览器准备的，用于指定双核浏览器默认以何种方式渲染页面。比如说360浏览器。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"renderer\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"webkit\"</span>&gt;</span> //默认webkit内核</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"renderer\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie-comp\"</span>&gt;</span> //默认IE兼容模式</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"renderer\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie-stand\"</span>&gt;</span> //默认IE标准模式</span><br></pre></td></tr></table></figure>\n<h2 id=\"http-equiv\"><a href=\"#http-equiv\" class=\"headerlink\" title=\"http-equiv\"></a>http-equiv</h2><h3 id=\"content-Type-设定网页字符集-推荐使用HTML5的方式\"><a href=\"#content-Type-设定网页字符集-推荐使用HTML5的方式\" class=\"headerlink\" title=\"content-Type(设定网页字符集)(推荐使用HTML5的方式)\"></a>content-Type(设定网页字符集)(推荐使用HTML5的方式)</h3><p>说明：用于设定网页字符集，便于浏览器解析与渲染页面举例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"content-Type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html;charset=utf-8\"</span>&gt;</span>  //旧的HTML，不推荐</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span> //HTML5设定网页字符集的方式，推荐使用UTF-8</span><br></pre></td></tr></table></figure>\n<h3 id=\"X-UA-Compatible-浏览器采取何种版本渲染当前页面\"><a href=\"#X-UA-Compatible-浏览器采取何种版本渲染当前页面\" class=\"headerlink\" title=\"X-UA-Compatible(浏览器采取何种版本渲染当前页面)\"></a>X-UA-Compatible(浏览器采取何种版本渲染当前页面)</h3><p>说明：用于告知浏览器以何种版本来渲染页面。（一般都设置为最新模式，在各大框架中这个设置也很常见。）举例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=edge,chrome=1\"</span>/&gt;</span> //指定IE和Chrome使用最新版本渲染当前页面</span><br></pre></td></tr></table></figure>\n<h3 id=\"cache-control-指定请求和响应遵循的缓存机制\"><a href=\"#cache-control-指定请求和响应遵循的缓存机制\" class=\"headerlink\" title=\"cache-control(指定请求和响应遵循的缓存机制)\"></a>cache-control(指定请求和响应遵循的缓存机制)</h3><p>说明：指导浏览器如何缓存某个响应以及缓存多长时间。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"cache-control\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"no-cache\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>共有以下几种用法：</p>\n<ol>\n<li><p>no-cache: 先发送请求，与服务器确认该资源是否被更改，如果未被更改，则使用缓存。</p>\n</li>\n<li><p>no-store: 不允许缓存，每次都要去服务器上，下载完整的响应。（安全措施）</p>\n</li>\n<li><p>public : 缓存所有响应，但并非必须。因为max-age也可以做到相同效果</p>\n</li>\n<li><p>private : 只为单个用户缓存，因此不允许任何中继进行缓存。（比如说CDN就不允许缓存private的响应）</p>\n</li>\n<li><p>maxage : 表示当前请求开始，该响应在多久内能被缓存和重用，而不去服务器重新请求。例如：max-age=60表示响应可以再缓存和重用 60 秒。<br>用法2.(禁止百度自动转码)<br>说明：用于禁止当前页面在移动端浏览时，被百度自动转码。虽然百度的本意是好的，但是转码效果很多时候却不尽人意。所以可以在head中加入例子中的那句话，就可以避免百度自动转码了。举例：</p>\n</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Cache-Control\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"no-siteapp\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"expires-网页到期时间\"><a href=\"#expires-网页到期时间\" class=\"headerlink\" title=\"expires(网页到期时间)\"></a>expires(网页到期时间)</h3><p>说明:用于设定网页的到期时间，过期后网页必须到服务器上重新传输。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"expires\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"Sunday 26 October 2016 01:00 GMT\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"refresh-自动刷新并指向某页面\"><a href=\"#refresh-自动刷新并指向某页面\" class=\"headerlink\" title=\"refresh(自动刷新并指向某页面)\"></a>refresh(自动刷新并指向某页面)</h3><p>说明：网页将在设定的时间内，自动刷新并调向设定的网址。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"refresh\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"2；URL=http://www.baidu.com/\"</span>&gt;</span> //意思是2秒后跳转向baidu</span><br></pre></td></tr></table></figure>\n<h3 id=\"Set-Cookie-cookie设定\"><a href=\"#Set-Cookie-cookie设定\" class=\"headerlink\" title=\"Set-Cookie(cookie设定)\"></a>Set-Cookie(cookie设定)</h3><p>说明：如果网页过期。那么这个网页存在本地的cookies也会被自动删除。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"set-cookie\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"runoobcookie=myContent;expires=Fri, 30 Dec 2015 12:00:00 GMT; path=http://www.runoob.com\"</span>&gt;</span></span><br></pre></td></tr></table></figure>"},{"layout":"[post]","title":"Promise原理和实现","date":"2019-02-05T01:57:01.000Z","_content":"### 什么是Promise\nPromise 对象用于表示一个异步操作的最终完成 (或失败), 及其结果值.\n<!-- more -->\n### Promise规范\n- ES6中使用[Promise/A+](https://juejin.im/post/5c4b0423e51d4525211c0fbc)规范。\n- Promise的标准理解\n  - promise对象有三种状态**pending**、**fulfilled**和**rejected**。\n  - promise对象的状态必须有并且只有上述三种当中的一种。\n  - 状态的改变只能是从pending到fulfilled或者pending到rejected。\n  - then方法返回一个promise。then 方法可以被同一个 promise 调用多次。\n```\npromise.then(onFulfilled, onRejected)\n```\n### Promise实现\n1. 构造函数\n```js\nfunction Promise(resolver) {}\n```\n2. 原型链\n```js\nPromise.prototype.then = function() {}\nPromise.prototype.catch = function() {}\n```\n3. 静态方法\n```js\nPromise.resolve = function() {}\nPromise.reject = function() {}\nPromise.all = function() {}\nPromise.race = function() {}\n```\n### Promise基本结构\n\n```js\nlet promise=new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve('FULFILLED')\n  }, 1000)\n})\npromise.then(a=> alert(a));\npromise.then(a => alert(a+1));\n```\n### Promise构造函数\n构造函数用法总结：\n1. 构造函数接收一个**executor**立即执行函数\n2. **executor**立即执行函数接收一个**resolve**函数\n3. **promise**对象的**then**方法绑定状态变为**fulfilled**时的回调\n4. **resolve**函数被调用时会触发**then**方法中的回调\n#### 构造函数的初步实现\n\n```js\nfunction Promise(executor) {\n    var self = this;\n    self.status = 'pending'; //promise当前的状态\n    self.data = undefined; //promise的值\n    self.onResolvedCallback = [];\n    //promise状态变为resolve时的回调函数集，可能有多个\n   function resolve(value) {\n       if(self.status === 'pending') {\n           self.status = 'resolved';\n           self.data = value;\n           for(var i = 0; i < self.onResolvedCallback.length; i++) {\n               self.onResolvedCallback[i](value);\n           }\n       }\n   }\n   executor(resolve);\n};\nPromise.prototype.then = function (resolve) {\n    this.onResolvedCallback.push(resolve);\n};\n```\n#### 添加reject结果\n\n```js\nfunction Promise(executor) {\n    var self = this;\n    self.status = 'pending'; //promise当前的状态\n    self.data = undefined; //promise的值\n    self.onResolvedCallback = [];\n    //promise状态变为resolve时的回调函数集，可能有多个\n    self.onRejectedCallback = [];\n    //promise状态变为reject时的回调函数集，可能有多个\n   function resolve(value) {\n       if(self.status === 'pending') {\n           self.status = 'resolved';\n           self.data = value;\n           for(var i = 0; i < self.onResolvedCallback.length; i++) {\n               self.onResolvedCallback[i](value);\n           }\n       }\n   }\n\n   function reject(reason) {\n        if(self.status === 'pending') {\n            self.status = 'rejected';\n            self.data = reason;\n            for(var i = 0; i < self.onRejectedCallback.length; i++) {\n                self.onRejectedCallback[i](reason);\n            }\n        }\n   }\n\n   try {\n       executor(resolve, reject);\n   } catch (e){\n       reject(e);\n   }\n};\nPromise.prototype.then = function (onResolve, onReject) {\n    this.onResolvedCallback.push(onResolve);\n    this.onRejectedCallback.push(onReject);\n};\n```\n小结：\n1. **executor**函数作为实参在创建**Promise**对象时传入**Promise**构造函数。\n2. **resolve**和**reject**函数作为实参传入**executor**函数。\n3. **value**作为实参传入**resolve**和**reject**函数。\n#### 如果executor自执行函数中的resolve函数立即触发时，发现Promise失效\n\n```js\nconst promise = new Promise((resolve) => {\n    resolve(1);\n});\npromise.then((a) => alert(a));\n\n```\n将promise的resolve和reject异步执行\n\n```js\nfunction resolve(value) {\n    setTimeout(function () {\n        if(self.status === 'pending') {\n            self.status = 'resolved';\n            self.data = value;\n            for(var i = 0; i < self.onResolvedCallback.length; i++) {\n                self.onResolvedCallback[i](value);\n            }\n        }\n    })\n}\n\nfunction reject(reason) {\n    setTimeout(function () {\n        if(self.status === 'pending') {\n            self.status = 'rejected';\n            self.data = reason;\n            for(var i = 0; i < self.onRejectedCallback.length; i++) {\n                self.onRejectedCallback[i](reason);\n            }\n        }\n    })\n}\n```\n### then方法\n\n```js\npromise.then(onFulfilled, onRejected)\n```\n1.  **then**方法返回一个新的**promise**对象。\n1.  **executor**自执行函数中的**resolve**参数调用时执行**then**方法的第一个回调函数**onResolved**。\n1.  **executor**自执行函数中的**reject**参数调用时执行**then**方法的第二个回调函数**onRejected**。\n\n```js\nPromise.prototype.then = function (onResolved, onRejected) {\n    var self = this;\n    var promise2;\n    onResolved = typeof onResolved === 'function' \n                ? onResolved \n                : function (value) {return value};\n    onRejected = typeof onRejected === 'function' \n                ? onRejected \n                : function (reason) {throw reason};\n    //promise对象当前状态为resolved\n    if(self.status === 'resolved') {\n        return promise2 = new Promise(function (resolve, reject) {\n            try {\n                //调用onResolve回调函数\n                var x = onResolved(self.data);\n                //如果onResolve回调函数返回值为一个promise对象\n                if(x instanceof  Promise) {\n                    //将它的结果作为promise2的结果\n                    x.then(resolve, reject);\n                } else {\n                    resolve(x);//执行promise2的onResolve回调\n           }        \n            } catch (e) {\n                reject(e); //执行promise2的onReject回调\n            }\n        })\n    }\n    //promise对象当前状态为rejected\n    if(self.status === 'rejected') {\n        return promise2 = new Promise(function (resolve, reject) {\n            try {\n                var x = onRejected(self.data);\n                if (x instanceof Promise) {\n                    x.then(resolve, reject)\n                } else {\n                    resolve(x)\n                }\n            } catch (e) {\n                reject(e)\n            }\n        })\n    }\n    //promise对象当前状态为pending\n    //此时并不能确定调用onResolved还是onRejected，需要等当前Promise状态确定。\n    //所以需要将callBack放入promise1的回调数组中\n    if(self.status === 'pending') {\n        return promise2 = new Promise(function (resolve, reject) {\n            self.onResolvedCallback.push(function (value) {\n                try {\n                    var x = onResolved(self.data);\n                    if (x instanceof Promise) {\n                        x.then(resolve, reject);\n                    } else {\n                        resolve(x);\n          }\n                } catch (e) {\n                    reject(e);\n                }\n            })\n            self.onRejectedCallback.push(function(reason) {\n                try {\n                    var x = onRejected(self.data);\n                    if (x instanceof Promise) {\n                        x.then(resolve, reject)\n                    } else {\n                        resolve(x);\n                    }\n                } catch (e) {\n                    reject(e)\n                }\n            })\n        })\n    }\n};\n```\n### 完整代码\n\n```js\nvar Promise = (function() {\n    function Promise(resolver) {\n        if (typeof resolver !== 'function') { //resolver必须是函数\n            throw new TypeError('Promise resolver ' + resolver + ' is not a function')\n        }\n        if (!(this instanceof Promise)) return new Promise(resolver)\n\n        var self = this //保存this\n        self.callbacks = [] //保存onResolve和onReject函数集合\n        self.status = 'pending' //当前状态\n\n        function resolve(value) {\n            setTimeout(function() { //异步调用\n                if (self.status !== 'pending') {\n                    return\n                }\n                self.status = 'resolved' //修改状态\n                self.data = value\n\n                for (var i = 0; i < self.callbacks.length; i++) {\n                    self.callbacks[i].onResolved(value)\n                }\n            })\n        }\n\n        function reject(reason) {\n            setTimeout(function(){ //异步调用\n                if (self.status !== 'pending') {\n                    return\n                }\n                self.status = 'rejected' //修改状态\n                self.data = reason\n\n                for (var i = 0; i < self.callbacks.length; i++) {\n                    self.callbacks[i].onRejected(reason)\n                }\n            })\n        }\n\n        try{\n            resolver(resolve, reject) //执行resolver函数\n        } catch(e) {\n            reject(e)\n        }\n    }\n\n    function resolvePromise(promise, x, resolve, reject) {\n        var then\n        var thenCalledOrThrow = false\n\n        if (promise === x) {\n            return reject(new TypeError('Chaining cycle detected for promise!'))\n        }\n\n        if ((x !== null) && ((typeof x === 'object') || (typeof x === 'function'))) {\n            try {\n                then = x.then\n                if (typeof then === 'function') {\n                    then.call(x, function rs(y) {\n                        if (thenCalledOrThrow) return\n                        thenCalledOrThrow = true\n                        return resolvePromise(promise, y, resolve, reject)\n                    }, function rj(r) {\n                        if (thenCalledOrThrow) return\n                        thenCalledOrThrow = true\n                        return reject(r)\n                    })\n                } else {\n                    return resolve(x)\n                }\n            } catch(e) {\n                if (thenCalledOrThrow) return\n                thenCalledOrThrow = true\n                return reject(e)\n            }\n        } else {\n            return resolve(x)\n        }\n    }\n\n    Promise.prototype.then = function(onResolved, onRejected) {\n        //健壮性处理，处理点击穿透\n        onResolved = typeof onResolved === 'function' ? onResolved : function(v){return v}\n        onRejected = typeof onRejected === 'function' ? onRejected : function(r){throw r}\n        var self = this\n        var promise2\n\n        //promise状态为resolved\n        if (self.status === 'resolved') {\n            return promise2 = new Promise(function(resolve, reject) {\n                setTimeout(function() {\n                    try {\n                        //调用then方法的onResolved回调\n                        var x = onResolved(self.data)\n                        //根据x的值修改promise2的状态\n                        resolvePromise(promise2, x, resolve, reject)\n                    } catch(e) {\n                        //promise2状态变为rejected\n                        return reject(e)\n                    }\n                })\n            })\n        }\n\n        //promise状态为rejected\n        if (self.status === 'rejected') {\n            return promise2 = new Promise(function(resolve, reject) {\n                setTimeout(function() {\n                    try {\n                        //调用then方法的onReject回调\n                        var x = onRejected(self.data)\n                        //根据x的值修改promise2的状态\n                        resolvePromise(promise2, x, resolve, reject)\n                    } catch(e) {\n                        //promise2状态变为rejected\n                        return reject(e)\n                    }\n                })\n            })\n        }\n\n        //promise状态为pending\n        //需要等待promise的状态改变\n        if (self.status === 'pending') {\n            return promise2 = new Promise(function(resolve, reject) {\n                self.callbacks.push({\n                    onResolved: function(value) {\n                        try {\n                            //调用then方法的onResolved回调\n                            var x = onResolved(value)\n                            //根据x的值修改promise2的状态\n                            resolvePromise(promise2, x, resolve, reject)\n                        } catch(e) {\n                            //promise2状态变为rejected\n                            return reject(e)\n                        }\n                    },\n                    onRejected: function(reason) {\n                        try {\n                            //调用then方法的onResolved回调\n                            var x = onRejected(reason)\n                            //根据x的值修改promise2的状态\n                            resolvePromise(promise2, x, resolve, reject)\n                        } catch(e) {\n                            //promise2状态变为rejected\n                            return reject(e)\n                        }\n                    }\n                })\n            })\n        }\n    }\n\n    //获取当前Promise传递的值\n    Promise.prototype.valueOf = function() {\n        return this.data\n    }\n\n    //由then方法实现catch方法\n    Promise.prototype.catch = function(onRejected) {\n        return this.then(null, onRejected)\n    }\n\n    //finally方法\n    Promise.prototype.finally = function(fn) {\n        return this.then(function(v){\n            setTimeout(fn)\n            return v\n        }, function(r){\n            setTimeout(fn)\n            throw r\n        })\n    }\n\n    Promise.prototype.spread = function(fn, onRejected) {\n        return this.then(function(values) {\n            return fn.apply(null, values)\n        }, onRejected)\n    }\n\n    Promise.prototype.inject = function(fn, onRejected) {\n        return this.then(function(v) {\n            return fn.apply(null, fn.toString().match(/\\((.*?)\\)/)[1].split(',').map(function(key){\n                return v[key];\n            }))\n        }, onRejected)\n    }\n\n    Promise.prototype.delay = function(duration) {\n        return this.then(function(value) {\n            return new Promise(function(resolve, reject) {\n                setTimeout(function() {\n                    resolve(value)\n                }, duration)\n            })\n        }, function(reason) {\n            return new Promise(function(resolve, reject) {\n                setTimeout(function() {\n                    reject(reason)\n                }, duration)\n            })\n        })\n    }\n\n    Promise.all = function(promises) {\n        return new Promise(function(resolve, reject) {\n            var resolvedCounter = 0\n            var promiseNum = promises.length\n            var resolvedValues = new Array(promiseNum)\n            for (var i = 0; i < promiseNum; i++) {\n                (function(i) {\n                    Promise.resolve(promises[i]).then(function(value) {\n                        resolvedCounter++\n                        resolvedValues[i] = value\n                        if (resolvedCounter == promiseNum) {\n                            return resolve(resolvedValues)\n                        }\n                    }, function(reason) {\n                        return reject(reason)\n                    })\n                })(i)\n            }\n        })\n    }\n\n    Promise.race = function(promises) {\n        return new Promise(function(resolve, reject) {\n            for (var i = 0; i < promises.length; i++) {\n                Promise.resolve(promises[i]).then(function(value) {\n                    return resolve(value)\n                }, function(reason) {\n                    return reject(reason)\n                })\n            }\n        })\n    }\n\n    Promise.resolve = function(value) {\n        var promise = new Promise(function(resolve, reject) {\n            resolvePromise(promise, value, resolve, reject)\n        })\n        return promise\n    }\n\n    Promise.reject = function(reason) {\n        return new Promise(function(resolve, reject) {\n            reject(reason)\n        })\n    }\n\n    Promise.fcall = function(fn){\n        // 虽然fn可以接收到上一层then里传来的参数，但是其实是undefined，所以跟没有是一样的，因为resolve没参数啊\n        return Promise.resolve().then(fn)\n    }\n\n    Promise.done = Promise.stop = function(){\n        return new Promise(function(){})\n    }\n\n    Promise.deferred = Promise.defer = function() {\n        var dfd = {}\n        dfd.promise = new Promise(function(resolve, reject) {\n            dfd.resolve = resolve\n            dfd.reject = reject\n        })\n        return dfd\n    }\n\n    try { // CommonJS compliance\n        module.exports = Promise\n    } catch(e) {}\n\n    return Promise\n})()\n```\n### 参考\n[Promise实现原理](https://www.jianshu.com/p/43de678e918a)  \n[Promise原理与实现](https://www.jianshu.com/p/b4f0425b22a1)\n\n\n\n\n\n\n\n","source":"_posts/promise原理和实现.md","raw":"---\nlayout: '[post]'\ntitle: Promise原理和实现\ndate: 2019-02-05 09:57:01\ntags: Promise\n---\n### 什么是Promise\nPromise 对象用于表示一个异步操作的最终完成 (或失败), 及其结果值.\n<!-- more -->\n### Promise规范\n- ES6中使用[Promise/A+](https://juejin.im/post/5c4b0423e51d4525211c0fbc)规范。\n- Promise的标准理解\n  - promise对象有三种状态**pending**、**fulfilled**和**rejected**。\n  - promise对象的状态必须有并且只有上述三种当中的一种。\n  - 状态的改变只能是从pending到fulfilled或者pending到rejected。\n  - then方法返回一个promise。then 方法可以被同一个 promise 调用多次。\n```\npromise.then(onFulfilled, onRejected)\n```\n### Promise实现\n1. 构造函数\n```js\nfunction Promise(resolver) {}\n```\n2. 原型链\n```js\nPromise.prototype.then = function() {}\nPromise.prototype.catch = function() {}\n```\n3. 静态方法\n```js\nPromise.resolve = function() {}\nPromise.reject = function() {}\nPromise.all = function() {}\nPromise.race = function() {}\n```\n### Promise基本结构\n\n```js\nlet promise=new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve('FULFILLED')\n  }, 1000)\n})\npromise.then(a=> alert(a));\npromise.then(a => alert(a+1));\n```\n### Promise构造函数\n构造函数用法总结：\n1. 构造函数接收一个**executor**立即执行函数\n2. **executor**立即执行函数接收一个**resolve**函数\n3. **promise**对象的**then**方法绑定状态变为**fulfilled**时的回调\n4. **resolve**函数被调用时会触发**then**方法中的回调\n#### 构造函数的初步实现\n\n```js\nfunction Promise(executor) {\n    var self = this;\n    self.status = 'pending'; //promise当前的状态\n    self.data = undefined; //promise的值\n    self.onResolvedCallback = [];\n    //promise状态变为resolve时的回调函数集，可能有多个\n   function resolve(value) {\n       if(self.status === 'pending') {\n           self.status = 'resolved';\n           self.data = value;\n           for(var i = 0; i < self.onResolvedCallback.length; i++) {\n               self.onResolvedCallback[i](value);\n           }\n       }\n   }\n   executor(resolve);\n};\nPromise.prototype.then = function (resolve) {\n    this.onResolvedCallback.push(resolve);\n};\n```\n#### 添加reject结果\n\n```js\nfunction Promise(executor) {\n    var self = this;\n    self.status = 'pending'; //promise当前的状态\n    self.data = undefined; //promise的值\n    self.onResolvedCallback = [];\n    //promise状态变为resolve时的回调函数集，可能有多个\n    self.onRejectedCallback = [];\n    //promise状态变为reject时的回调函数集，可能有多个\n   function resolve(value) {\n       if(self.status === 'pending') {\n           self.status = 'resolved';\n           self.data = value;\n           for(var i = 0; i < self.onResolvedCallback.length; i++) {\n               self.onResolvedCallback[i](value);\n           }\n       }\n   }\n\n   function reject(reason) {\n        if(self.status === 'pending') {\n            self.status = 'rejected';\n            self.data = reason;\n            for(var i = 0; i < self.onRejectedCallback.length; i++) {\n                self.onRejectedCallback[i](reason);\n            }\n        }\n   }\n\n   try {\n       executor(resolve, reject);\n   } catch (e){\n       reject(e);\n   }\n};\nPromise.prototype.then = function (onResolve, onReject) {\n    this.onResolvedCallback.push(onResolve);\n    this.onRejectedCallback.push(onReject);\n};\n```\n小结：\n1. **executor**函数作为实参在创建**Promise**对象时传入**Promise**构造函数。\n2. **resolve**和**reject**函数作为实参传入**executor**函数。\n3. **value**作为实参传入**resolve**和**reject**函数。\n#### 如果executor自执行函数中的resolve函数立即触发时，发现Promise失效\n\n```js\nconst promise = new Promise((resolve) => {\n    resolve(1);\n});\npromise.then((a) => alert(a));\n\n```\n将promise的resolve和reject异步执行\n\n```js\nfunction resolve(value) {\n    setTimeout(function () {\n        if(self.status === 'pending') {\n            self.status = 'resolved';\n            self.data = value;\n            for(var i = 0; i < self.onResolvedCallback.length; i++) {\n                self.onResolvedCallback[i](value);\n            }\n        }\n    })\n}\n\nfunction reject(reason) {\n    setTimeout(function () {\n        if(self.status === 'pending') {\n            self.status = 'rejected';\n            self.data = reason;\n            for(var i = 0; i < self.onRejectedCallback.length; i++) {\n                self.onRejectedCallback[i](reason);\n            }\n        }\n    })\n}\n```\n### then方法\n\n```js\npromise.then(onFulfilled, onRejected)\n```\n1.  **then**方法返回一个新的**promise**对象。\n1.  **executor**自执行函数中的**resolve**参数调用时执行**then**方法的第一个回调函数**onResolved**。\n1.  **executor**自执行函数中的**reject**参数调用时执行**then**方法的第二个回调函数**onRejected**。\n\n```js\nPromise.prototype.then = function (onResolved, onRejected) {\n    var self = this;\n    var promise2;\n    onResolved = typeof onResolved === 'function' \n                ? onResolved \n                : function (value) {return value};\n    onRejected = typeof onRejected === 'function' \n                ? onRejected \n                : function (reason) {throw reason};\n    //promise对象当前状态为resolved\n    if(self.status === 'resolved') {\n        return promise2 = new Promise(function (resolve, reject) {\n            try {\n                //调用onResolve回调函数\n                var x = onResolved(self.data);\n                //如果onResolve回调函数返回值为一个promise对象\n                if(x instanceof  Promise) {\n                    //将它的结果作为promise2的结果\n                    x.then(resolve, reject);\n                } else {\n                    resolve(x);//执行promise2的onResolve回调\n           }        \n            } catch (e) {\n                reject(e); //执行promise2的onReject回调\n            }\n        })\n    }\n    //promise对象当前状态为rejected\n    if(self.status === 'rejected') {\n        return promise2 = new Promise(function (resolve, reject) {\n            try {\n                var x = onRejected(self.data);\n                if (x instanceof Promise) {\n                    x.then(resolve, reject)\n                } else {\n                    resolve(x)\n                }\n            } catch (e) {\n                reject(e)\n            }\n        })\n    }\n    //promise对象当前状态为pending\n    //此时并不能确定调用onResolved还是onRejected，需要等当前Promise状态确定。\n    //所以需要将callBack放入promise1的回调数组中\n    if(self.status === 'pending') {\n        return promise2 = new Promise(function (resolve, reject) {\n            self.onResolvedCallback.push(function (value) {\n                try {\n                    var x = onResolved(self.data);\n                    if (x instanceof Promise) {\n                        x.then(resolve, reject);\n                    } else {\n                        resolve(x);\n          }\n                } catch (e) {\n                    reject(e);\n                }\n            })\n            self.onRejectedCallback.push(function(reason) {\n                try {\n                    var x = onRejected(self.data);\n                    if (x instanceof Promise) {\n                        x.then(resolve, reject)\n                    } else {\n                        resolve(x);\n                    }\n                } catch (e) {\n                    reject(e)\n                }\n            })\n        })\n    }\n};\n```\n### 完整代码\n\n```js\nvar Promise = (function() {\n    function Promise(resolver) {\n        if (typeof resolver !== 'function') { //resolver必须是函数\n            throw new TypeError('Promise resolver ' + resolver + ' is not a function')\n        }\n        if (!(this instanceof Promise)) return new Promise(resolver)\n\n        var self = this //保存this\n        self.callbacks = [] //保存onResolve和onReject函数集合\n        self.status = 'pending' //当前状态\n\n        function resolve(value) {\n            setTimeout(function() { //异步调用\n                if (self.status !== 'pending') {\n                    return\n                }\n                self.status = 'resolved' //修改状态\n                self.data = value\n\n                for (var i = 0; i < self.callbacks.length; i++) {\n                    self.callbacks[i].onResolved(value)\n                }\n            })\n        }\n\n        function reject(reason) {\n            setTimeout(function(){ //异步调用\n                if (self.status !== 'pending') {\n                    return\n                }\n                self.status = 'rejected' //修改状态\n                self.data = reason\n\n                for (var i = 0; i < self.callbacks.length; i++) {\n                    self.callbacks[i].onRejected(reason)\n                }\n            })\n        }\n\n        try{\n            resolver(resolve, reject) //执行resolver函数\n        } catch(e) {\n            reject(e)\n        }\n    }\n\n    function resolvePromise(promise, x, resolve, reject) {\n        var then\n        var thenCalledOrThrow = false\n\n        if (promise === x) {\n            return reject(new TypeError('Chaining cycle detected for promise!'))\n        }\n\n        if ((x !== null) && ((typeof x === 'object') || (typeof x === 'function'))) {\n            try {\n                then = x.then\n                if (typeof then === 'function') {\n                    then.call(x, function rs(y) {\n                        if (thenCalledOrThrow) return\n                        thenCalledOrThrow = true\n                        return resolvePromise(promise, y, resolve, reject)\n                    }, function rj(r) {\n                        if (thenCalledOrThrow) return\n                        thenCalledOrThrow = true\n                        return reject(r)\n                    })\n                } else {\n                    return resolve(x)\n                }\n            } catch(e) {\n                if (thenCalledOrThrow) return\n                thenCalledOrThrow = true\n                return reject(e)\n            }\n        } else {\n            return resolve(x)\n        }\n    }\n\n    Promise.prototype.then = function(onResolved, onRejected) {\n        //健壮性处理，处理点击穿透\n        onResolved = typeof onResolved === 'function' ? onResolved : function(v){return v}\n        onRejected = typeof onRejected === 'function' ? onRejected : function(r){throw r}\n        var self = this\n        var promise2\n\n        //promise状态为resolved\n        if (self.status === 'resolved') {\n            return promise2 = new Promise(function(resolve, reject) {\n                setTimeout(function() {\n                    try {\n                        //调用then方法的onResolved回调\n                        var x = onResolved(self.data)\n                        //根据x的值修改promise2的状态\n                        resolvePromise(promise2, x, resolve, reject)\n                    } catch(e) {\n                        //promise2状态变为rejected\n                        return reject(e)\n                    }\n                })\n            })\n        }\n\n        //promise状态为rejected\n        if (self.status === 'rejected') {\n            return promise2 = new Promise(function(resolve, reject) {\n                setTimeout(function() {\n                    try {\n                        //调用then方法的onReject回调\n                        var x = onRejected(self.data)\n                        //根据x的值修改promise2的状态\n                        resolvePromise(promise2, x, resolve, reject)\n                    } catch(e) {\n                        //promise2状态变为rejected\n                        return reject(e)\n                    }\n                })\n            })\n        }\n\n        //promise状态为pending\n        //需要等待promise的状态改变\n        if (self.status === 'pending') {\n            return promise2 = new Promise(function(resolve, reject) {\n                self.callbacks.push({\n                    onResolved: function(value) {\n                        try {\n                            //调用then方法的onResolved回调\n                            var x = onResolved(value)\n                            //根据x的值修改promise2的状态\n                            resolvePromise(promise2, x, resolve, reject)\n                        } catch(e) {\n                            //promise2状态变为rejected\n                            return reject(e)\n                        }\n                    },\n                    onRejected: function(reason) {\n                        try {\n                            //调用then方法的onResolved回调\n                            var x = onRejected(reason)\n                            //根据x的值修改promise2的状态\n                            resolvePromise(promise2, x, resolve, reject)\n                        } catch(e) {\n                            //promise2状态变为rejected\n                            return reject(e)\n                        }\n                    }\n                })\n            })\n        }\n    }\n\n    //获取当前Promise传递的值\n    Promise.prototype.valueOf = function() {\n        return this.data\n    }\n\n    //由then方法实现catch方法\n    Promise.prototype.catch = function(onRejected) {\n        return this.then(null, onRejected)\n    }\n\n    //finally方法\n    Promise.prototype.finally = function(fn) {\n        return this.then(function(v){\n            setTimeout(fn)\n            return v\n        }, function(r){\n            setTimeout(fn)\n            throw r\n        })\n    }\n\n    Promise.prototype.spread = function(fn, onRejected) {\n        return this.then(function(values) {\n            return fn.apply(null, values)\n        }, onRejected)\n    }\n\n    Promise.prototype.inject = function(fn, onRejected) {\n        return this.then(function(v) {\n            return fn.apply(null, fn.toString().match(/\\((.*?)\\)/)[1].split(',').map(function(key){\n                return v[key];\n            }))\n        }, onRejected)\n    }\n\n    Promise.prototype.delay = function(duration) {\n        return this.then(function(value) {\n            return new Promise(function(resolve, reject) {\n                setTimeout(function() {\n                    resolve(value)\n                }, duration)\n            })\n        }, function(reason) {\n            return new Promise(function(resolve, reject) {\n                setTimeout(function() {\n                    reject(reason)\n                }, duration)\n            })\n        })\n    }\n\n    Promise.all = function(promises) {\n        return new Promise(function(resolve, reject) {\n            var resolvedCounter = 0\n            var promiseNum = promises.length\n            var resolvedValues = new Array(promiseNum)\n            for (var i = 0; i < promiseNum; i++) {\n                (function(i) {\n                    Promise.resolve(promises[i]).then(function(value) {\n                        resolvedCounter++\n                        resolvedValues[i] = value\n                        if (resolvedCounter == promiseNum) {\n                            return resolve(resolvedValues)\n                        }\n                    }, function(reason) {\n                        return reject(reason)\n                    })\n                })(i)\n            }\n        })\n    }\n\n    Promise.race = function(promises) {\n        return new Promise(function(resolve, reject) {\n            for (var i = 0; i < promises.length; i++) {\n                Promise.resolve(promises[i]).then(function(value) {\n                    return resolve(value)\n                }, function(reason) {\n                    return reject(reason)\n                })\n            }\n        })\n    }\n\n    Promise.resolve = function(value) {\n        var promise = new Promise(function(resolve, reject) {\n            resolvePromise(promise, value, resolve, reject)\n        })\n        return promise\n    }\n\n    Promise.reject = function(reason) {\n        return new Promise(function(resolve, reject) {\n            reject(reason)\n        })\n    }\n\n    Promise.fcall = function(fn){\n        // 虽然fn可以接收到上一层then里传来的参数，但是其实是undefined，所以跟没有是一样的，因为resolve没参数啊\n        return Promise.resolve().then(fn)\n    }\n\n    Promise.done = Promise.stop = function(){\n        return new Promise(function(){})\n    }\n\n    Promise.deferred = Promise.defer = function() {\n        var dfd = {}\n        dfd.promise = new Promise(function(resolve, reject) {\n            dfd.resolve = resolve\n            dfd.reject = reject\n        })\n        return dfd\n    }\n\n    try { // CommonJS compliance\n        module.exports = Promise\n    } catch(e) {}\n\n    return Promise\n})()\n```\n### 参考\n[Promise实现原理](https://www.jianshu.com/p/43de678e918a)  \n[Promise原理与实现](https://www.jianshu.com/p/b4f0425b22a1)\n\n\n\n\n\n\n\n","slug":"promise原理和实现","published":1,"updated":"2020-01-24T14:55:13.000Z","comments":1,"photos":[],"link":"","_id":"ck9v62x7j000tqqs69kwb2mqj","content":"<h3 id=\"什么是Promise\"><a href=\"#什么是Promise\" class=\"headerlink\" title=\"什么是Promise\"></a>什么是Promise</h3><p>Promise 对象用于表示一个异步操作的最终完成 (或失败), 及其结果值.</p>\n<a id=\"more\"></a>\n<h3 id=\"Promise规范\"><a href=\"#Promise规范\" class=\"headerlink\" title=\"Promise规范\"></a>Promise规范</h3><ul>\n<li>ES6中使用<a href=\"https://juejin.im/post/5c4b0423e51d4525211c0fbc\" target=\"_blank\" rel=\"noopener\">Promise/A+</a>规范。</li>\n<li>Promise的标准理解<ul>\n<li>promise对象有三种状态<strong>pending</strong>、<strong>fulfilled</strong>和<strong>rejected</strong>。</li>\n<li>promise对象的状态必须有并且只有上述三种当中的一种。</li>\n<li>状态的改变只能是从pending到fulfilled或者pending到rejected。</li>\n<li>then方法返回一个promise。then 方法可以被同一个 promise 调用多次。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promise.then(onFulfilled, onRejected)</span><br></pre></td></tr></table></figure>\n<h3 id=\"Promise实现\"><a href=\"#Promise实现\" class=\"headerlink\" title=\"Promise实现\"></a>Promise实现</h3></li>\n</ul>\n</li>\n</ul>\n<ol>\n<li>构造函数<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Promise</span>(<span class=\"params\">resolver</span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure></li>\n<li>原型链<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.then = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.catch = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure></li>\n<li>静态方法<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.reject = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.all = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.race = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Promise基本结构\"><a href=\"#Promise基本结构\" class=\"headerlink\" title=\"Promise基本结构\"></a>Promise基本结构</h3></li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> promise=<span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    resolve(<span class=\"string\">'FULFILLED'</span>)</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">promise.then(<span class=\"function\"><span class=\"params\">a</span>=&gt;</span> alert(a));</span><br><span class=\"line\">promise.then(<span class=\"function\"><span class=\"params\">a</span> =&gt;</span> alert(a+<span class=\"number\">1</span>));</span><br></pre></td></tr></table></figure>\n<h3 id=\"Promise构造函数\"><a href=\"#Promise构造函数\" class=\"headerlink\" title=\"Promise构造函数\"></a>Promise构造函数</h3><p>构造函数用法总结：</p>\n<ol>\n<li>构造函数接收一个<strong>executor</strong>立即执行函数</li>\n<li><strong>executor</strong>立即执行函数接收一个<strong>resolve</strong>函数</li>\n<li><strong>promise</strong>对象的<strong>then</strong>方法绑定状态变为<strong>fulfilled</strong>时的回调</li>\n<li><strong>resolve</strong>函数被调用时会触发<strong>then</strong>方法中的回调<h4 id=\"构造函数的初步实现\"><a href=\"#构造函数的初步实现\" class=\"headerlink\" title=\"构造函数的初步实现\"></a>构造函数的初步实现</h4></li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Promise</span>(<span class=\"params\">executor</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    self.status = <span class=\"string\">'pending'</span>; <span class=\"comment\">//promise当前的状态</span></span><br><span class=\"line\">    self.data = <span class=\"literal\">undefined</span>; <span class=\"comment\">//promise的值</span></span><br><span class=\"line\">    self.onResolvedCallback = [];</span><br><span class=\"line\">    <span class=\"comment\">//promise状态变为resolve时的回调函数集，可能有多个</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolve</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(self.status === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">           self.status = <span class=\"string\">'resolved'</span>;</span><br><span class=\"line\">           self.data = value;</span><br><span class=\"line\">           <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; self.onResolvedCallback.length; i++) &#123;</span><br><span class=\"line\">               self.onResolvedCallback[i](value);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   executor(resolve);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.then = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onResolvedCallback.push(resolve);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"添加reject结果\"><a href=\"#添加reject结果\" class=\"headerlink\" title=\"添加reject结果\"></a>添加reject结果</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Promise</span>(<span class=\"params\">executor</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    self.status = <span class=\"string\">'pending'</span>; <span class=\"comment\">//promise当前的状态</span></span><br><span class=\"line\">    self.data = <span class=\"literal\">undefined</span>; <span class=\"comment\">//promise的值</span></span><br><span class=\"line\">    self.onResolvedCallback = [];</span><br><span class=\"line\">    <span class=\"comment\">//promise状态变为resolve时的回调函数集，可能有多个</span></span><br><span class=\"line\">    self.onRejectedCallback = [];</span><br><span class=\"line\">    <span class=\"comment\">//promise状态变为reject时的回调函数集，可能有多个</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolve</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(self.status === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">           self.status = <span class=\"string\">'resolved'</span>;</span><br><span class=\"line\">           self.data = value;</span><br><span class=\"line\">           <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; self.onResolvedCallback.length; i++) &#123;</span><br><span class=\"line\">               self.onResolvedCallback[i](value);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reject</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(self.status === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">            self.status = <span class=\"string\">'rejected'</span>;</span><br><span class=\"line\">            self.data = reason;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; self.onRejectedCallback.length; i++) &#123;</span><br><span class=\"line\">                self.onRejectedCallback[i](reason);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">       executor(resolve, reject);</span><br><span class=\"line\">   &#125; <span class=\"keyword\">catch</span> (e)&#123;</span><br><span class=\"line\">       reject(e);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.then = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">onResolve, onReject</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onResolvedCallback.push(onResolve);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onRejectedCallback.push(onReject);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>小结：</p>\n<ol>\n<li><strong>executor</strong>函数作为实参在创建<strong>Promise</strong>对象时传入<strong>Promise</strong>构造函数。</li>\n<li><strong>resolve</strong>和<strong>reject</strong>函数作为实参传入<strong>executor</strong>函数。</li>\n<li><strong>value</strong>作为实参传入<strong>resolve</strong>和<strong>reject</strong>函数。<h4 id=\"如果executor自执行函数中的resolve函数立即触发时，发现Promise失效\"><a href=\"#如果executor自执行函数中的resolve函数立即触发时，发现Promise失效\" class=\"headerlink\" title=\"如果executor自执行函数中的resolve函数立即触发时，发现Promise失效\"></a>如果executor自执行函数中的resolve函数立即触发时，发现Promise失效</h4></li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    resolve(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">promise.then(<span class=\"function\">(<span class=\"params\">a</span>) =&gt;</span> alert(a));</span><br></pre></td></tr></table></figure>\n<p>将promise的resolve和reject异步执行</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolve</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(self.status === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">            self.status = <span class=\"string\">'resolved'</span>;</span><br><span class=\"line\">            self.data = value;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; self.onResolvedCallback.length; i++) &#123;</span><br><span class=\"line\">                self.onResolvedCallback[i](value);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reject</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(self.status === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">            self.status = <span class=\"string\">'rejected'</span>;</span><br><span class=\"line\">            self.data = reason;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; self.onRejectedCallback.length; i++) &#123;</span><br><span class=\"line\">                self.onRejectedCallback[i](reason);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"then方法\"><a href=\"#then方法\" class=\"headerlink\" title=\"then方法\"></a>then方法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promise.then(onFulfilled, onRejected)</span><br></pre></td></tr></table></figure>\n<ol>\n<li><strong>then</strong>方法返回一个新的<strong>promise</strong>对象。</li>\n<li><strong>executor</strong>自执行函数中的<strong>resolve</strong>参数调用时执行<strong>then</strong>方法的第一个回调函数<strong>onResolved</strong>。</li>\n<li><strong>executor</strong>自执行函数中的<strong>reject</strong>参数调用时执行<strong>then</strong>方法的第二个回调函数<strong>onRejected</strong>。</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.then = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">onResolved, onRejected</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> promise2;</span><br><span class=\"line\">    onResolved = <span class=\"keyword\">typeof</span> onResolved === <span class=\"string\">'function'</span> </span><br><span class=\"line\">                ? onResolved </span><br><span class=\"line\">                : <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;<span class=\"keyword\">return</span> value&#125;;</span><br><span class=\"line\">    onRejected = <span class=\"keyword\">typeof</span> onRejected === <span class=\"string\">'function'</span> </span><br><span class=\"line\">                ? onRejected </span><br><span class=\"line\">                : <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">reason</span>) </span>&#123;<span class=\"keyword\">throw</span> reason&#125;;</span><br><span class=\"line\">    <span class=\"comment\">//promise对象当前状态为resolved</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(self.status === <span class=\"string\">'resolved'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> promise2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//调用onResolve回调函数</span></span><br><span class=\"line\">                <span class=\"keyword\">var</span> x = onResolved(self.data);</span><br><span class=\"line\">                <span class=\"comment\">//如果onResolve回调函数返回值为一个promise对象</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(x <span class=\"keyword\">instanceof</span>  <span class=\"built_in\">Promise</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//将它的结果作为promise2的结果</span></span><br><span class=\"line\">                    x.then(resolve, reject);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    resolve(x);<span class=\"comment\">//执行promise2的onResolve回调</span></span><br><span class=\"line\">           &#125;        </span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">                reject(e); <span class=\"comment\">//执行promise2的onReject回调</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//promise对象当前状态为rejected</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(self.status === <span class=\"string\">'rejected'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> promise2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> x = onRejected(self.data);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (x <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>) &#123;</span><br><span class=\"line\">                    x.then(resolve, reject)</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    resolve(x)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">                reject(e)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//promise对象当前状态为pending</span></span><br><span class=\"line\">    <span class=\"comment\">//此时并不能确定调用onResolved还是onRejected，需要等当前Promise状态确定。</span></span><br><span class=\"line\">    <span class=\"comment\">//所以需要将callBack放入promise1的回调数组中</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(self.status === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> promise2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">            self.onResolvedCallback.push(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> x = onResolved(self.data);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (x <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>) &#123;</span><br><span class=\"line\">                        x.then(resolve, reject);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        resolve(x);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">                    reject(e);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            self.onRejectedCallback.push(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> x = onRejected(self.data);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (x <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>) &#123;</span><br><span class=\"line\">                        x.then(resolve, reject)</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        resolve(x);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">                    reject(e)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">Promise</span> = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Promise</span>(<span class=\"params\">resolver</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> resolver !== <span class=\"string\">'function'</span>) &#123; <span class=\"comment\">//resolver必须是函数</span></span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'Promise resolver '</span> + resolver + <span class=\"string\">' is not a function'</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!(<span class=\"keyword\">this</span> <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>)) <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(resolver)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span> <span class=\"comment\">//保存this</span></span><br><span class=\"line\">        self.callbacks = [] <span class=\"comment\">//保存onResolve和onReject函数集合</span></span><br><span class=\"line\">        self.status = <span class=\"string\">'pending'</span> <span class=\"comment\">//当前状态</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolve</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">            setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">//异步调用</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (self.status !== <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                self.status = <span class=\"string\">'resolved'</span> <span class=\"comment\">//修改状态</span></span><br><span class=\"line\">                self.data = value</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; self.callbacks.length; i++) &#123;</span><br><span class=\"line\">                    self.callbacks[i].onResolved(value)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reject</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">            setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"comment\">//异步调用</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (self.status !== <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                self.status = <span class=\"string\">'rejected'</span> <span class=\"comment\">//修改状态</span></span><br><span class=\"line\">                self.data = reason</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; self.callbacks.length; i++) &#123;</span><br><span class=\"line\">                    self.callbacks[i].onRejected(reason)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            resolver(resolve, reject) <span class=\"comment\">//执行resolver函数</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">            reject(e)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolvePromise</span>(<span class=\"params\">promise, x, resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> then</span><br><span class=\"line\">        <span class=\"keyword\">var</span> thenCalledOrThrow = <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (promise === x) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> reject(<span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'Chaining cycle detected for promise!'</span>))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((x !== <span class=\"literal\">null</span>) &amp;&amp; ((<span class=\"keyword\">typeof</span> x === <span class=\"string\">'object'</span>) || (<span class=\"keyword\">typeof</span> x === <span class=\"string\">'function'</span>))) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                then = x.then</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> then === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">                    then.call(x, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">rs</span>(<span class=\"params\">y</span>) </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (thenCalledOrThrow) <span class=\"keyword\">return</span></span><br><span class=\"line\">                        thenCalledOrThrow = <span class=\"literal\">true</span></span><br><span class=\"line\">                        <span class=\"keyword\">return</span> resolvePromise(promise, y, resolve, reject)</span><br><span class=\"line\">                    &#125;, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">rj</span>(<span class=\"params\">r</span>) </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (thenCalledOrThrow) <span class=\"keyword\">return</span></span><br><span class=\"line\">                        thenCalledOrThrow = <span class=\"literal\">true</span></span><br><span class=\"line\">                        <span class=\"keyword\">return</span> reject(r)</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> resolve(x)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (thenCalledOrThrow) <span class=\"keyword\">return</span></span><br><span class=\"line\">                thenCalledOrThrow = <span class=\"literal\">true</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> reject(e)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> resolve(x)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.prototype.then = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">onResolved, onRejected</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//健壮性处理，处理点击穿透</span></span><br><span class=\"line\">        onResolved = <span class=\"keyword\">typeof</span> onResolved === <span class=\"string\">'function'</span> ? onResolved : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>)</span>&#123;<span class=\"keyword\">return</span> v&#125;</span><br><span class=\"line\">        onRejected = <span class=\"keyword\">typeof</span> onRejected === <span class=\"string\">'function'</span> ? onRejected : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">r</span>)</span>&#123;<span class=\"keyword\">throw</span> r&#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> promise2</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//promise状态为resolved</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (self.status === <span class=\"string\">'resolved'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> promise2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">                setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//调用then方法的onResolved回调</span></span><br><span class=\"line\">                        <span class=\"keyword\">var</span> x = onResolved(self.data)</span><br><span class=\"line\">                        <span class=\"comment\">//根据x的值修改promise2的状态</span></span><br><span class=\"line\">                        resolvePromise(promise2, x, resolve, reject)</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//promise2状态变为rejected</span></span><br><span class=\"line\">                        <span class=\"keyword\">return</span> reject(e)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//promise状态为rejected</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (self.status === <span class=\"string\">'rejected'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> promise2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">                setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//调用then方法的onReject回调</span></span><br><span class=\"line\">                        <span class=\"keyword\">var</span> x = onRejected(self.data)</span><br><span class=\"line\">                        <span class=\"comment\">//根据x的值修改promise2的状态</span></span><br><span class=\"line\">                        resolvePromise(promise2, x, resolve, reject)</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//promise2状态变为rejected</span></span><br><span class=\"line\">                        <span class=\"keyword\">return</span> reject(e)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//promise状态为pending</span></span><br><span class=\"line\">        <span class=\"comment\">//需要等待promise的状态改变</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (self.status === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> promise2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">                self.callbacks.push(&#123;</span><br><span class=\"line\">                    onResolved: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                            <span class=\"comment\">//调用then方法的onResolved回调</span></span><br><span class=\"line\">                            <span class=\"keyword\">var</span> x = onResolved(value)</span><br><span class=\"line\">                            <span class=\"comment\">//根据x的值修改promise2的状态</span></span><br><span class=\"line\">                            resolvePromise(promise2, x, resolve, reject)</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">                            <span class=\"comment\">//promise2状态变为rejected</span></span><br><span class=\"line\">                            <span class=\"keyword\">return</span> reject(e)</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    onRejected: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                            <span class=\"comment\">//调用then方法的onResolved回调</span></span><br><span class=\"line\">                            <span class=\"keyword\">var</span> x = onRejected(reason)</span><br><span class=\"line\">                            <span class=\"comment\">//根据x的值修改promise2的状态</span></span><br><span class=\"line\">                            resolvePromise(promise2, x, resolve, reject)</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">                            <span class=\"comment\">//promise2状态变为rejected</span></span><br><span class=\"line\">                            <span class=\"keyword\">return</span> reject(e)</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//获取当前Promise传递的值</span></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.prototype.valueOf = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.data</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//由then方法实现catch方法</span></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.prototype.catch = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">onRejected</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.then(<span class=\"literal\">null</span>, onRejected)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//finally方法</span></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.prototype.finally = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>)</span>&#123;</span><br><span class=\"line\">            setTimeout(fn)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> v</span><br><span class=\"line\">        &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">r</span>)</span>&#123;</span><br><span class=\"line\">            setTimeout(fn)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> r</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.prototype.spread = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn, onRejected</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">values</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> fn.apply(<span class=\"literal\">null</span>, values)</span><br><span class=\"line\">        &#125;, onRejected)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.prototype.inject = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn, onRejected</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> fn.apply(<span class=\"literal\">null</span>, fn.toString().match(<span class=\"regexp\">/\\((.*?)\\)/</span>)[<span class=\"number\">1</span>].split(<span class=\"string\">','</span>).map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>)</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> v[key];</span><br><span class=\"line\">            &#125;))</span><br><span class=\"line\">        &#125;, onRejected)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.prototype.delay = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">duration</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">                setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                    resolve(value)</span><br><span class=\"line\">                &#125;, duration)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">                setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                    reject(reason)</span><br><span class=\"line\">                &#125;, duration)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.all = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">promises</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> resolvedCounter = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> promiseNum = promises.length</span><br><span class=\"line\">            <span class=\"keyword\">var</span> resolvedValues = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(promiseNum)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; promiseNum; i++) &#123;</span><br><span class=\"line\">                (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">                    <span class=\"built_in\">Promise</span>.resolve(promises[i]).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">                        resolvedCounter++</span><br><span class=\"line\">                        resolvedValues[i] = value</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (resolvedCounter == promiseNum) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">return</span> resolve(resolvedValues)</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> reject(reason)</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                &#125;)(i)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.race = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">promises</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; promises.length; i++) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">Promise</span>.resolve(promises[i]).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> resolve(value)</span><br><span class=\"line\">                &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> reject(reason)</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.resolve = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">            resolvePromise(promise, value, resolve, reject)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> promise</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.reject = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">            reject(reason)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.fcall = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 虽然fn可以接收到上一层then里传来的参数，但是其实是undefined，所以跟没有是一样的，因为resolve没参数啊</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve().then(fn)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.done = <span class=\"built_in\">Promise</span>.stop = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.deferred = <span class=\"built_in\">Promise</span>.defer = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> dfd = &#123;&#125;</span><br><span class=\"line\">        dfd.promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">            dfd.resolve = resolve</span><br><span class=\"line\">            dfd.reject = reject</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dfd</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123; <span class=\"comment\">// CommonJS compliance</span></span><br><span class=\"line\">        <span class=\"built_in\">module</span>.exports = <span class=\"built_in\">Promise</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span>(e) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span></span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://www.jianshu.com/p/43de678e918a\" target=\"_blank\" rel=\"noopener\">Promise实现原理</a><br><a href=\"https://www.jianshu.com/p/b4f0425b22a1\" target=\"_blank\" rel=\"noopener\">Promise原理与实现</a></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"什么是Promise\"><a href=\"#什么是Promise\" class=\"headerlink\" title=\"什么是Promise\"></a>什么是Promise</h3><p>Promise 对象用于表示一个异步操作的最终完成 (或失败), 及其结果值.</p>","more":"<h3 id=\"Promise规范\"><a href=\"#Promise规范\" class=\"headerlink\" title=\"Promise规范\"></a>Promise规范</h3><ul>\n<li>ES6中使用<a href=\"https://juejin.im/post/5c4b0423e51d4525211c0fbc\" target=\"_blank\" rel=\"noopener\">Promise/A+</a>规范。</li>\n<li>Promise的标准理解<ul>\n<li>promise对象有三种状态<strong>pending</strong>、<strong>fulfilled</strong>和<strong>rejected</strong>。</li>\n<li>promise对象的状态必须有并且只有上述三种当中的一种。</li>\n<li>状态的改变只能是从pending到fulfilled或者pending到rejected。</li>\n<li>then方法返回一个promise。then 方法可以被同一个 promise 调用多次。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promise.then(onFulfilled, onRejected)</span><br></pre></td></tr></table></figure>\n<h3 id=\"Promise实现\"><a href=\"#Promise实现\" class=\"headerlink\" title=\"Promise实现\"></a>Promise实现</h3></li>\n</ul>\n</li>\n</ul>\n<ol>\n<li>构造函数<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Promise</span>(<span class=\"params\">resolver</span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure></li>\n<li>原型链<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.then = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.catch = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure></li>\n<li>静态方法<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.reject = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.all = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.race = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Promise基本结构\"><a href=\"#Promise基本结构\" class=\"headerlink\" title=\"Promise基本结构\"></a>Promise基本结构</h3></li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> promise=<span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    resolve(<span class=\"string\">'FULFILLED'</span>)</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">promise.then(<span class=\"function\"><span class=\"params\">a</span>=&gt;</span> alert(a));</span><br><span class=\"line\">promise.then(<span class=\"function\"><span class=\"params\">a</span> =&gt;</span> alert(a+<span class=\"number\">1</span>));</span><br></pre></td></tr></table></figure>\n<h3 id=\"Promise构造函数\"><a href=\"#Promise构造函数\" class=\"headerlink\" title=\"Promise构造函数\"></a>Promise构造函数</h3><p>构造函数用法总结：</p>\n<ol>\n<li>构造函数接收一个<strong>executor</strong>立即执行函数</li>\n<li><strong>executor</strong>立即执行函数接收一个<strong>resolve</strong>函数</li>\n<li><strong>promise</strong>对象的<strong>then</strong>方法绑定状态变为<strong>fulfilled</strong>时的回调</li>\n<li><strong>resolve</strong>函数被调用时会触发<strong>then</strong>方法中的回调<h4 id=\"构造函数的初步实现\"><a href=\"#构造函数的初步实现\" class=\"headerlink\" title=\"构造函数的初步实现\"></a>构造函数的初步实现</h4></li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Promise</span>(<span class=\"params\">executor</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    self.status = <span class=\"string\">'pending'</span>; <span class=\"comment\">//promise当前的状态</span></span><br><span class=\"line\">    self.data = <span class=\"literal\">undefined</span>; <span class=\"comment\">//promise的值</span></span><br><span class=\"line\">    self.onResolvedCallback = [];</span><br><span class=\"line\">    <span class=\"comment\">//promise状态变为resolve时的回调函数集，可能有多个</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolve</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(self.status === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">           self.status = <span class=\"string\">'resolved'</span>;</span><br><span class=\"line\">           self.data = value;</span><br><span class=\"line\">           <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; self.onResolvedCallback.length; i++) &#123;</span><br><span class=\"line\">               self.onResolvedCallback[i](value);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   executor(resolve);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.then = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onResolvedCallback.push(resolve);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"添加reject结果\"><a href=\"#添加reject结果\" class=\"headerlink\" title=\"添加reject结果\"></a>添加reject结果</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Promise</span>(<span class=\"params\">executor</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    self.status = <span class=\"string\">'pending'</span>; <span class=\"comment\">//promise当前的状态</span></span><br><span class=\"line\">    self.data = <span class=\"literal\">undefined</span>; <span class=\"comment\">//promise的值</span></span><br><span class=\"line\">    self.onResolvedCallback = [];</span><br><span class=\"line\">    <span class=\"comment\">//promise状态变为resolve时的回调函数集，可能有多个</span></span><br><span class=\"line\">    self.onRejectedCallback = [];</span><br><span class=\"line\">    <span class=\"comment\">//promise状态变为reject时的回调函数集，可能有多个</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolve</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(self.status === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">           self.status = <span class=\"string\">'resolved'</span>;</span><br><span class=\"line\">           self.data = value;</span><br><span class=\"line\">           <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; self.onResolvedCallback.length; i++) &#123;</span><br><span class=\"line\">               self.onResolvedCallback[i](value);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reject</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(self.status === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">            self.status = <span class=\"string\">'rejected'</span>;</span><br><span class=\"line\">            self.data = reason;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; self.onRejectedCallback.length; i++) &#123;</span><br><span class=\"line\">                self.onRejectedCallback[i](reason);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">       executor(resolve, reject);</span><br><span class=\"line\">   &#125; <span class=\"keyword\">catch</span> (e)&#123;</span><br><span class=\"line\">       reject(e);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.then = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">onResolve, onReject</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onResolvedCallback.push(onResolve);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onRejectedCallback.push(onReject);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>小结：</p>\n<ol>\n<li><strong>executor</strong>函数作为实参在创建<strong>Promise</strong>对象时传入<strong>Promise</strong>构造函数。</li>\n<li><strong>resolve</strong>和<strong>reject</strong>函数作为实参传入<strong>executor</strong>函数。</li>\n<li><strong>value</strong>作为实参传入<strong>resolve</strong>和<strong>reject</strong>函数。<h4 id=\"如果executor自执行函数中的resolve函数立即触发时，发现Promise失效\"><a href=\"#如果executor自执行函数中的resolve函数立即触发时，发现Promise失效\" class=\"headerlink\" title=\"如果executor自执行函数中的resolve函数立即触发时，发现Promise失效\"></a>如果executor自执行函数中的resolve函数立即触发时，发现Promise失效</h4></li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    resolve(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">promise.then(<span class=\"function\">(<span class=\"params\">a</span>) =&gt;</span> alert(a));</span><br></pre></td></tr></table></figure>\n<p>将promise的resolve和reject异步执行</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolve</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(self.status === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">            self.status = <span class=\"string\">'resolved'</span>;</span><br><span class=\"line\">            self.data = value;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; self.onResolvedCallback.length; i++) &#123;</span><br><span class=\"line\">                self.onResolvedCallback[i](value);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reject</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(self.status === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">            self.status = <span class=\"string\">'rejected'</span>;</span><br><span class=\"line\">            self.data = reason;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; self.onRejectedCallback.length; i++) &#123;</span><br><span class=\"line\">                self.onRejectedCallback[i](reason);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"then方法\"><a href=\"#then方法\" class=\"headerlink\" title=\"then方法\"></a>then方法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promise.then(onFulfilled, onRejected)</span><br></pre></td></tr></table></figure>\n<ol>\n<li><strong>then</strong>方法返回一个新的<strong>promise</strong>对象。</li>\n<li><strong>executor</strong>自执行函数中的<strong>resolve</strong>参数调用时执行<strong>then</strong>方法的第一个回调函数<strong>onResolved</strong>。</li>\n<li><strong>executor</strong>自执行函数中的<strong>reject</strong>参数调用时执行<strong>then</strong>方法的第二个回调函数<strong>onRejected</strong>。</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.then = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">onResolved, onRejected</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> promise2;</span><br><span class=\"line\">    onResolved = <span class=\"keyword\">typeof</span> onResolved === <span class=\"string\">'function'</span> </span><br><span class=\"line\">                ? onResolved </span><br><span class=\"line\">                : <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;<span class=\"keyword\">return</span> value&#125;;</span><br><span class=\"line\">    onRejected = <span class=\"keyword\">typeof</span> onRejected === <span class=\"string\">'function'</span> </span><br><span class=\"line\">                ? onRejected </span><br><span class=\"line\">                : <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">reason</span>) </span>&#123;<span class=\"keyword\">throw</span> reason&#125;;</span><br><span class=\"line\">    <span class=\"comment\">//promise对象当前状态为resolved</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(self.status === <span class=\"string\">'resolved'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> promise2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//调用onResolve回调函数</span></span><br><span class=\"line\">                <span class=\"keyword\">var</span> x = onResolved(self.data);</span><br><span class=\"line\">                <span class=\"comment\">//如果onResolve回调函数返回值为一个promise对象</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(x <span class=\"keyword\">instanceof</span>  <span class=\"built_in\">Promise</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//将它的结果作为promise2的结果</span></span><br><span class=\"line\">                    x.then(resolve, reject);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    resolve(x);<span class=\"comment\">//执行promise2的onResolve回调</span></span><br><span class=\"line\">           &#125;        </span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">                reject(e); <span class=\"comment\">//执行promise2的onReject回调</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//promise对象当前状态为rejected</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(self.status === <span class=\"string\">'rejected'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> promise2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> x = onRejected(self.data);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (x <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>) &#123;</span><br><span class=\"line\">                    x.then(resolve, reject)</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    resolve(x)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">                reject(e)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//promise对象当前状态为pending</span></span><br><span class=\"line\">    <span class=\"comment\">//此时并不能确定调用onResolved还是onRejected，需要等当前Promise状态确定。</span></span><br><span class=\"line\">    <span class=\"comment\">//所以需要将callBack放入promise1的回调数组中</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(self.status === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> promise2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">            self.onResolvedCallback.push(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> x = onResolved(self.data);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (x <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>) &#123;</span><br><span class=\"line\">                        x.then(resolve, reject);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        resolve(x);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">                    reject(e);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            self.onRejectedCallback.push(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> x = onRejected(self.data);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (x <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>) &#123;</span><br><span class=\"line\">                        x.then(resolve, reject)</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        resolve(x);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">                    reject(e)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">Promise</span> = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Promise</span>(<span class=\"params\">resolver</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> resolver !== <span class=\"string\">'function'</span>) &#123; <span class=\"comment\">//resolver必须是函数</span></span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'Promise resolver '</span> + resolver + <span class=\"string\">' is not a function'</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!(<span class=\"keyword\">this</span> <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>)) <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(resolver)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span> <span class=\"comment\">//保存this</span></span><br><span class=\"line\">        self.callbacks = [] <span class=\"comment\">//保存onResolve和onReject函数集合</span></span><br><span class=\"line\">        self.status = <span class=\"string\">'pending'</span> <span class=\"comment\">//当前状态</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolve</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">            setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">//异步调用</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (self.status !== <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                self.status = <span class=\"string\">'resolved'</span> <span class=\"comment\">//修改状态</span></span><br><span class=\"line\">                self.data = value</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; self.callbacks.length; i++) &#123;</span><br><span class=\"line\">                    self.callbacks[i].onResolved(value)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reject</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">            setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"comment\">//异步调用</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (self.status !== <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                self.status = <span class=\"string\">'rejected'</span> <span class=\"comment\">//修改状态</span></span><br><span class=\"line\">                self.data = reason</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; self.callbacks.length; i++) &#123;</span><br><span class=\"line\">                    self.callbacks[i].onRejected(reason)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            resolver(resolve, reject) <span class=\"comment\">//执行resolver函数</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">            reject(e)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolvePromise</span>(<span class=\"params\">promise, x, resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> then</span><br><span class=\"line\">        <span class=\"keyword\">var</span> thenCalledOrThrow = <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (promise === x) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> reject(<span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'Chaining cycle detected for promise!'</span>))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((x !== <span class=\"literal\">null</span>) &amp;&amp; ((<span class=\"keyword\">typeof</span> x === <span class=\"string\">'object'</span>) || (<span class=\"keyword\">typeof</span> x === <span class=\"string\">'function'</span>))) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                then = x.then</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> then === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">                    then.call(x, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">rs</span>(<span class=\"params\">y</span>) </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (thenCalledOrThrow) <span class=\"keyword\">return</span></span><br><span class=\"line\">                        thenCalledOrThrow = <span class=\"literal\">true</span></span><br><span class=\"line\">                        <span class=\"keyword\">return</span> resolvePromise(promise, y, resolve, reject)</span><br><span class=\"line\">                    &#125;, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">rj</span>(<span class=\"params\">r</span>) </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (thenCalledOrThrow) <span class=\"keyword\">return</span></span><br><span class=\"line\">                        thenCalledOrThrow = <span class=\"literal\">true</span></span><br><span class=\"line\">                        <span class=\"keyword\">return</span> reject(r)</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> resolve(x)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (thenCalledOrThrow) <span class=\"keyword\">return</span></span><br><span class=\"line\">                thenCalledOrThrow = <span class=\"literal\">true</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> reject(e)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> resolve(x)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.prototype.then = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">onResolved, onRejected</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//健壮性处理，处理点击穿透</span></span><br><span class=\"line\">        onResolved = <span class=\"keyword\">typeof</span> onResolved === <span class=\"string\">'function'</span> ? onResolved : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>)</span>&#123;<span class=\"keyword\">return</span> v&#125;</span><br><span class=\"line\">        onRejected = <span class=\"keyword\">typeof</span> onRejected === <span class=\"string\">'function'</span> ? onRejected : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">r</span>)</span>&#123;<span class=\"keyword\">throw</span> r&#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> promise2</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//promise状态为resolved</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (self.status === <span class=\"string\">'resolved'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> promise2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">                setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//调用then方法的onResolved回调</span></span><br><span class=\"line\">                        <span class=\"keyword\">var</span> x = onResolved(self.data)</span><br><span class=\"line\">                        <span class=\"comment\">//根据x的值修改promise2的状态</span></span><br><span class=\"line\">                        resolvePromise(promise2, x, resolve, reject)</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//promise2状态变为rejected</span></span><br><span class=\"line\">                        <span class=\"keyword\">return</span> reject(e)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//promise状态为rejected</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (self.status === <span class=\"string\">'rejected'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> promise2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">                setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//调用then方法的onReject回调</span></span><br><span class=\"line\">                        <span class=\"keyword\">var</span> x = onRejected(self.data)</span><br><span class=\"line\">                        <span class=\"comment\">//根据x的值修改promise2的状态</span></span><br><span class=\"line\">                        resolvePromise(promise2, x, resolve, reject)</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//promise2状态变为rejected</span></span><br><span class=\"line\">                        <span class=\"keyword\">return</span> reject(e)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//promise状态为pending</span></span><br><span class=\"line\">        <span class=\"comment\">//需要等待promise的状态改变</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (self.status === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> promise2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">                self.callbacks.push(&#123;</span><br><span class=\"line\">                    onResolved: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                            <span class=\"comment\">//调用then方法的onResolved回调</span></span><br><span class=\"line\">                            <span class=\"keyword\">var</span> x = onResolved(value)</span><br><span class=\"line\">                            <span class=\"comment\">//根据x的值修改promise2的状态</span></span><br><span class=\"line\">                            resolvePromise(promise2, x, resolve, reject)</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">                            <span class=\"comment\">//promise2状态变为rejected</span></span><br><span class=\"line\">                            <span class=\"keyword\">return</span> reject(e)</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    onRejected: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                            <span class=\"comment\">//调用then方法的onResolved回调</span></span><br><span class=\"line\">                            <span class=\"keyword\">var</span> x = onRejected(reason)</span><br><span class=\"line\">                            <span class=\"comment\">//根据x的值修改promise2的状态</span></span><br><span class=\"line\">                            resolvePromise(promise2, x, resolve, reject)</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">                            <span class=\"comment\">//promise2状态变为rejected</span></span><br><span class=\"line\">                            <span class=\"keyword\">return</span> reject(e)</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//获取当前Promise传递的值</span></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.prototype.valueOf = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.data</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//由then方法实现catch方法</span></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.prototype.catch = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">onRejected</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.then(<span class=\"literal\">null</span>, onRejected)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//finally方法</span></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.prototype.finally = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>)</span>&#123;</span><br><span class=\"line\">            setTimeout(fn)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> v</span><br><span class=\"line\">        &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">r</span>)</span>&#123;</span><br><span class=\"line\">            setTimeout(fn)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> r</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.prototype.spread = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn, onRejected</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">values</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> fn.apply(<span class=\"literal\">null</span>, values)</span><br><span class=\"line\">        &#125;, onRejected)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.prototype.inject = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn, onRejected</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> fn.apply(<span class=\"literal\">null</span>, fn.toString().match(<span class=\"regexp\">/\\((.*?)\\)/</span>)[<span class=\"number\">1</span>].split(<span class=\"string\">','</span>).map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>)</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> v[key];</span><br><span class=\"line\">            &#125;))</span><br><span class=\"line\">        &#125;, onRejected)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.prototype.delay = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">duration</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">                setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                    resolve(value)</span><br><span class=\"line\">                &#125;, duration)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">                setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                    reject(reason)</span><br><span class=\"line\">                &#125;, duration)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.all = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">promises</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> resolvedCounter = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> promiseNum = promises.length</span><br><span class=\"line\">            <span class=\"keyword\">var</span> resolvedValues = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(promiseNum)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; promiseNum; i++) &#123;</span><br><span class=\"line\">                (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">                    <span class=\"built_in\">Promise</span>.resolve(promises[i]).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">                        resolvedCounter++</span><br><span class=\"line\">                        resolvedValues[i] = value</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (resolvedCounter == promiseNum) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">return</span> resolve(resolvedValues)</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> reject(reason)</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                &#125;)(i)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.race = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">promises</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; promises.length; i++) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">Promise</span>.resolve(promises[i]).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> resolve(value)</span><br><span class=\"line\">                &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> reject(reason)</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.resolve = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">            resolvePromise(promise, value, resolve, reject)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> promise</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.reject = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">            reject(reason)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.fcall = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 虽然fn可以接收到上一层then里传来的参数，但是其实是undefined，所以跟没有是一样的，因为resolve没参数啊</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve().then(fn)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.done = <span class=\"built_in\">Promise</span>.stop = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.deferred = <span class=\"built_in\">Promise</span>.defer = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> dfd = &#123;&#125;</span><br><span class=\"line\">        dfd.promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">            dfd.resolve = resolve</span><br><span class=\"line\">            dfd.reject = reject</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dfd</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123; <span class=\"comment\">// CommonJS compliance</span></span><br><span class=\"line\">        <span class=\"built_in\">module</span>.exports = <span class=\"built_in\">Promise</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span>(e) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span></span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://www.jianshu.com/p/43de678e918a\" target=\"_blank\" rel=\"noopener\">Promise实现原理</a><br><a href=\"https://www.jianshu.com/p/b4f0425b22a1\" target=\"_blank\" rel=\"noopener\">Promise原理与实现</a></p>"},{"layout":"[post]","title":"vue生命周期以及nextTick应用","date":"2019-04-01T02:14:30.000Z","_content":"\n## vue 的生命周期\n\n<!-- more -->\n\n![yasuo](shengming.webp)  \n![yasuo](biaoge.webp)\n\n- **beforeCreate**:在实例初始化之后，数据观测 data observer(props、data、computed) 和 event/watcher 事件配置之前被调用。\n- **created**:实例已经创建完成之后被调用。在这一步，实例已完成以下的配置：数据观测(data observer)，属性和方法的运算， watch/event 事件回调。然而，挂载阶段还没开始，\\$el 属性目前不可见。\n- **beforeMount**:在挂载开始之前被调用：相关的 render 函数首次被调用。\n- **mounted**:el 被新创建的 vm.\\$el 替换，并挂载到实例上去之后调用该钩子。\n- **beforeUpdate**:数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。 你可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。\n- **updated**:无论是组件本身的数据变更，还是从父组件接收到的 props 或者从 vuex 里面拿到的数据有变更，都会触发虚拟 DOM 重新渲染和打补丁，并在之后调用 updated。\n- **beforeDestroy**:实例销毁之前调用。在这一步，实例仍然完全可用。\n- **destroyed**:Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。 该钩子在服务器端渲染期间不被调用。\n\n##### 注意\n\ncreated 阶段的 ajax 请求与 mounted 请求的区别：前者页面视图未出现，如果请求信息过多，页面会长时间处于白屏状态。\n\n## 单个组件的生命周期\n\n1. 初始化组件时，仅执行了`beforeCreate/Created/beforeMount/mounted`四个钩子函数\n2. 当改变 data 中定义的变量（响应式变量）时，会执行`beforeUpdate/updated`钩子函数\n3. 当切换组件（当前组件未缓存）时，会执行`beforeDestory/destroyed`钩子函数\n4. 初始化和销毁时的生命钩子函数均只会执行一次，`beforeUpdate/updated`可多次执行\n\n## Vue.nextTick()\n\n> 在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。\n\n获取更新后的 DOM 言外之意就是什么操作需要用到了更新后的 DOM 而不能使用之前的 DOM 或者使用更新前的 DOM 会出问题，所以就衍生出了这个获取更新后的 DOM 的 Vue 方法。\n\n> **Vue.nextTick()回调函数中的执行的应该是会对 DOM 进行操作的 js 代码**\n\n### 什么时候需要用 Vue.nextTick()?\n\n- 你在 Vue 生命周期的 created()钩子函数进行的 DOM 操作一定要放在 Vue.nextTick()的回调函数中。原因是什么呢，原因是在 created()钩子函数执行的时候 DOM 其实并未进行任何渲染，而此时进行 DOM 操作无异于徒劳，所以此处一定要将 DOM 操作的 js 代码放进 Vue.nextTick()的回调函数中。与之对应的就是 mounted 钩子函数，因为该钩子函数执行时所有的 DOM 挂载和渲染都已完成，此时在该钩子函数中进行任何 DOM 操作都不会有问题 。\n- 在数据变化后要执行的某个操作，当你设置 vm.someData = 'new value'，DOM 并不会马上更新，而是在异步队列被清除，也就是下一个事件循环开始时执行更新时才会进行必要的 DOM 更新。如果此时你想要根据更新的 DOM 状态去做某些事情，就会出现问题。。为了在数据变化之后等待 Vue 完成更新 DOM ，可以在数据变化之后立即使用 Vue.nextTick(callback) 。这样回调函数在 DOM 更新完成后就会调用。\n- mounted 不会承诺所有的子组件也都一起被挂载。如果你希望等到整个视图都渲染完毕，可以用 vm.\\$nextTick 替换掉 mounted.\n\n```js\nmounted: function () {\nthis.$nextTick(function () {\n\n// Code that will run only after the\n// entire view has been rendered\n})\n}\n```\n\n[原文地址](https://www.jianshu.com/p/46c9d777cab1)\n","source":"_posts/vue生命周期以及nextTick应用.md","raw":"---\nlayout: '[post]'\ntitle: vue生命周期以及nextTick应用\ndate: 2019-04-01 10:14:30\ntags: Vue\n---\n\n## vue 的生命周期\n\n<!-- more -->\n\n![yasuo](shengming.webp)  \n![yasuo](biaoge.webp)\n\n- **beforeCreate**:在实例初始化之后，数据观测 data observer(props、data、computed) 和 event/watcher 事件配置之前被调用。\n- **created**:实例已经创建完成之后被调用。在这一步，实例已完成以下的配置：数据观测(data observer)，属性和方法的运算， watch/event 事件回调。然而，挂载阶段还没开始，\\$el 属性目前不可见。\n- **beforeMount**:在挂载开始之前被调用：相关的 render 函数首次被调用。\n- **mounted**:el 被新创建的 vm.\\$el 替换，并挂载到实例上去之后调用该钩子。\n- **beforeUpdate**:数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。 你可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。\n- **updated**:无论是组件本身的数据变更，还是从父组件接收到的 props 或者从 vuex 里面拿到的数据有变更，都会触发虚拟 DOM 重新渲染和打补丁，并在之后调用 updated。\n- **beforeDestroy**:实例销毁之前调用。在这一步，实例仍然完全可用。\n- **destroyed**:Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。 该钩子在服务器端渲染期间不被调用。\n\n##### 注意\n\ncreated 阶段的 ajax 请求与 mounted 请求的区别：前者页面视图未出现，如果请求信息过多，页面会长时间处于白屏状态。\n\n## 单个组件的生命周期\n\n1. 初始化组件时，仅执行了`beforeCreate/Created/beforeMount/mounted`四个钩子函数\n2. 当改变 data 中定义的变量（响应式变量）时，会执行`beforeUpdate/updated`钩子函数\n3. 当切换组件（当前组件未缓存）时，会执行`beforeDestory/destroyed`钩子函数\n4. 初始化和销毁时的生命钩子函数均只会执行一次，`beforeUpdate/updated`可多次执行\n\n## Vue.nextTick()\n\n> 在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。\n\n获取更新后的 DOM 言外之意就是什么操作需要用到了更新后的 DOM 而不能使用之前的 DOM 或者使用更新前的 DOM 会出问题，所以就衍生出了这个获取更新后的 DOM 的 Vue 方法。\n\n> **Vue.nextTick()回调函数中的执行的应该是会对 DOM 进行操作的 js 代码**\n\n### 什么时候需要用 Vue.nextTick()?\n\n- 你在 Vue 生命周期的 created()钩子函数进行的 DOM 操作一定要放在 Vue.nextTick()的回调函数中。原因是什么呢，原因是在 created()钩子函数执行的时候 DOM 其实并未进行任何渲染，而此时进行 DOM 操作无异于徒劳，所以此处一定要将 DOM 操作的 js 代码放进 Vue.nextTick()的回调函数中。与之对应的就是 mounted 钩子函数，因为该钩子函数执行时所有的 DOM 挂载和渲染都已完成，此时在该钩子函数中进行任何 DOM 操作都不会有问题 。\n- 在数据变化后要执行的某个操作，当你设置 vm.someData = 'new value'，DOM 并不会马上更新，而是在异步队列被清除，也就是下一个事件循环开始时执行更新时才会进行必要的 DOM 更新。如果此时你想要根据更新的 DOM 状态去做某些事情，就会出现问题。。为了在数据变化之后等待 Vue 完成更新 DOM ，可以在数据变化之后立即使用 Vue.nextTick(callback) 。这样回调函数在 DOM 更新完成后就会调用。\n- mounted 不会承诺所有的子组件也都一起被挂载。如果你希望等到整个视图都渲染完毕，可以用 vm.\\$nextTick 替换掉 mounted.\n\n```js\nmounted: function () {\nthis.$nextTick(function () {\n\n// Code that will run only after the\n// entire view has been rendered\n})\n}\n```\n\n[原文地址](https://www.jianshu.com/p/46c9d777cab1)\n","slug":"vue生命周期以及nextTick应用","published":1,"updated":"2020-05-06T09:51:36.000Z","comments":1,"photos":[],"link":"","_id":"ck9v62x7l000wqqs6a4ex5v5h","content":"<h2 id=\"vue-的生命周期\"><a href=\"#vue-的生命周期\" class=\"headerlink\" title=\"vue 的生命周期\"></a>vue 的生命周期</h2><a id=\"more\"></a>\n\n<p><img src=\"/2019/04/01/vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E4%BB%A5%E5%8F%8AnextTick%E5%BA%94%E7%94%A8/shengming.webp\" alt=\"yasuo\"><br><img src=\"/2019/04/01/vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E4%BB%A5%E5%8F%8AnextTick%E5%BA%94%E7%94%A8/biaoge.webp\" alt=\"yasuo\"></p>\n<ul>\n<li><strong>beforeCreate</strong>:在实例初始化之后，数据观测 data observer(props、data、computed) 和 event/watcher 事件配置之前被调用。</li>\n<li><strong>created</strong>:实例已经创建完成之后被调用。在这一步，实例已完成以下的配置：数据观测(data observer)，属性和方法的运算， watch/event 事件回调。然而，挂载阶段还没开始，$el 属性目前不可见。</li>\n<li><strong>beforeMount</strong>:在挂载开始之前被调用：相关的 render 函数首次被调用。</li>\n<li><strong>mounted</strong>:el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子。</li>\n<li><strong>beforeUpdate</strong>:数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。 你可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。</li>\n<li><strong>updated</strong>:无论是组件本身的数据变更，还是从父组件接收到的 props 或者从 vuex 里面拿到的数据有变更，都会触发虚拟 DOM 重新渲染和打补丁，并在之后调用 updated。</li>\n<li><strong>beforeDestroy</strong>:实例销毁之前调用。在这一步，实例仍然完全可用。</li>\n<li><strong>destroyed</strong>:Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。 该钩子在服务器端渲染期间不被调用。</li>\n</ul>\n<h5 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h5><p>created 阶段的 ajax 请求与 mounted 请求的区别：前者页面视图未出现，如果请求信息过多，页面会长时间处于白屏状态。</p>\n<h2 id=\"单个组件的生命周期\"><a href=\"#单个组件的生命周期\" class=\"headerlink\" title=\"单个组件的生命周期\"></a>单个组件的生命周期</h2><ol>\n<li>初始化组件时，仅执行了<code>beforeCreate/Created/beforeMount/mounted</code>四个钩子函数</li>\n<li>当改变 data 中定义的变量（响应式变量）时，会执行<code>beforeUpdate/updated</code>钩子函数</li>\n<li>当切换组件（当前组件未缓存）时，会执行<code>beforeDestory/destroyed</code>钩子函数</li>\n<li>初始化和销毁时的生命钩子函数均只会执行一次，<code>beforeUpdate/updated</code>可多次执行</li>\n</ol>\n<h2 id=\"Vue-nextTick\"><a href=\"#Vue-nextTick\" class=\"headerlink\" title=\"Vue.nextTick()\"></a>Vue.nextTick()</h2><blockquote>\n<p>在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。</p>\n</blockquote>\n<p>获取更新后的 DOM 言外之意就是什么操作需要用到了更新后的 DOM 而不能使用之前的 DOM 或者使用更新前的 DOM 会出问题，所以就衍生出了这个获取更新后的 DOM 的 Vue 方法。</p>\n<blockquote>\n<p><strong>Vue.nextTick()回调函数中的执行的应该是会对 DOM 进行操作的 js 代码</strong></p>\n</blockquote>\n<h3 id=\"什么时候需要用-Vue-nextTick\"><a href=\"#什么时候需要用-Vue-nextTick\" class=\"headerlink\" title=\"什么时候需要用 Vue.nextTick()?\"></a>什么时候需要用 Vue.nextTick()?</h3><ul>\n<li>你在 Vue 生命周期的 created()钩子函数进行的 DOM 操作一定要放在 Vue.nextTick()的回调函数中。原因是什么呢，原因是在 created()钩子函数执行的时候 DOM 其实并未进行任何渲染，而此时进行 DOM 操作无异于徒劳，所以此处一定要将 DOM 操作的 js 代码放进 Vue.nextTick()的回调函数中。与之对应的就是 mounted 钩子函数，因为该钩子函数执行时所有的 DOM 挂载和渲染都已完成，此时在该钩子函数中进行任何 DOM 操作都不会有问题 。</li>\n<li>在数据变化后要执行的某个操作，当你设置 vm.someData = ‘new value’，DOM 并不会马上更新，而是在异步队列被清除，也就是下一个事件循环开始时执行更新时才会进行必要的 DOM 更新。如果此时你想要根据更新的 DOM 状态去做某些事情，就会出现问题。。为了在数据变化之后等待 Vue 完成更新 DOM ，可以在数据变化之后立即使用 Vue.nextTick(callback) 。这样回调函数在 DOM 更新完成后就会调用。</li>\n<li>mounted 不会承诺所有的子组件也都一起被挂载。如果你希望等到整个视图都渲染完毕，可以用 vm.$nextTick 替换掉 mounted.</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mounted: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">this</span>.$nextTick(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Code that will run only after the</span></span><br><span class=\"line\"><span class=\"comment\">// entire view has been rendered</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://www.jianshu.com/p/46c9d777cab1\" target=\"_blank\" rel=\"noopener\">原文地址</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"vue-的生命周期\"><a href=\"#vue-的生命周期\" class=\"headerlink\" title=\"vue 的生命周期\"></a>vue 的生命周期</h2>","more":"<p><img src=\"/2019/04/01/vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E4%BB%A5%E5%8F%8AnextTick%E5%BA%94%E7%94%A8/shengming.webp\" alt=\"yasuo\"><br><img src=\"/2019/04/01/vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E4%BB%A5%E5%8F%8AnextTick%E5%BA%94%E7%94%A8/biaoge.webp\" alt=\"yasuo\"></p>\n<ul>\n<li><strong>beforeCreate</strong>:在实例初始化之后，数据观测 data observer(props、data、computed) 和 event/watcher 事件配置之前被调用。</li>\n<li><strong>created</strong>:实例已经创建完成之后被调用。在这一步，实例已完成以下的配置：数据观测(data observer)，属性和方法的运算， watch/event 事件回调。然而，挂载阶段还没开始，$el 属性目前不可见。</li>\n<li><strong>beforeMount</strong>:在挂载开始之前被调用：相关的 render 函数首次被调用。</li>\n<li><strong>mounted</strong>:el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子。</li>\n<li><strong>beforeUpdate</strong>:数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。 你可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。</li>\n<li><strong>updated</strong>:无论是组件本身的数据变更，还是从父组件接收到的 props 或者从 vuex 里面拿到的数据有变更，都会触发虚拟 DOM 重新渲染和打补丁，并在之后调用 updated。</li>\n<li><strong>beforeDestroy</strong>:实例销毁之前调用。在这一步，实例仍然完全可用。</li>\n<li><strong>destroyed</strong>:Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。 该钩子在服务器端渲染期间不被调用。</li>\n</ul>\n<h5 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h5><p>created 阶段的 ajax 请求与 mounted 请求的区别：前者页面视图未出现，如果请求信息过多，页面会长时间处于白屏状态。</p>\n<h2 id=\"单个组件的生命周期\"><a href=\"#单个组件的生命周期\" class=\"headerlink\" title=\"单个组件的生命周期\"></a>单个组件的生命周期</h2><ol>\n<li>初始化组件时，仅执行了<code>beforeCreate/Created/beforeMount/mounted</code>四个钩子函数</li>\n<li>当改变 data 中定义的变量（响应式变量）时，会执行<code>beforeUpdate/updated</code>钩子函数</li>\n<li>当切换组件（当前组件未缓存）时，会执行<code>beforeDestory/destroyed</code>钩子函数</li>\n<li>初始化和销毁时的生命钩子函数均只会执行一次，<code>beforeUpdate/updated</code>可多次执行</li>\n</ol>\n<h2 id=\"Vue-nextTick\"><a href=\"#Vue-nextTick\" class=\"headerlink\" title=\"Vue.nextTick()\"></a>Vue.nextTick()</h2><blockquote>\n<p>在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。</p>\n</blockquote>\n<p>获取更新后的 DOM 言外之意就是什么操作需要用到了更新后的 DOM 而不能使用之前的 DOM 或者使用更新前的 DOM 会出问题，所以就衍生出了这个获取更新后的 DOM 的 Vue 方法。</p>\n<blockquote>\n<p><strong>Vue.nextTick()回调函数中的执行的应该是会对 DOM 进行操作的 js 代码</strong></p>\n</blockquote>\n<h3 id=\"什么时候需要用-Vue-nextTick\"><a href=\"#什么时候需要用-Vue-nextTick\" class=\"headerlink\" title=\"什么时候需要用 Vue.nextTick()?\"></a>什么时候需要用 Vue.nextTick()?</h3><ul>\n<li>你在 Vue 生命周期的 created()钩子函数进行的 DOM 操作一定要放在 Vue.nextTick()的回调函数中。原因是什么呢，原因是在 created()钩子函数执行的时候 DOM 其实并未进行任何渲染，而此时进行 DOM 操作无异于徒劳，所以此处一定要将 DOM 操作的 js 代码放进 Vue.nextTick()的回调函数中。与之对应的就是 mounted 钩子函数，因为该钩子函数执行时所有的 DOM 挂载和渲染都已完成，此时在该钩子函数中进行任何 DOM 操作都不会有问题 。</li>\n<li>在数据变化后要执行的某个操作，当你设置 vm.someData = ‘new value’，DOM 并不会马上更新，而是在异步队列被清除，也就是下一个事件循环开始时执行更新时才会进行必要的 DOM 更新。如果此时你想要根据更新的 DOM 状态去做某些事情，就会出现问题。。为了在数据变化之后等待 Vue 完成更新 DOM ，可以在数据变化之后立即使用 Vue.nextTick(callback) 。这样回调函数在 DOM 更新完成后就会调用。</li>\n<li>mounted 不会承诺所有的子组件也都一起被挂载。如果你希望等到整个视图都渲染完毕，可以用 vm.$nextTick 替换掉 mounted.</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mounted: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">this</span>.$nextTick(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Code that will run only after the</span></span><br><span class=\"line\"><span class=\"comment\">// entire view has been rendered</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://www.jianshu.com/p/46c9d777cab1\" target=\"_blank\" rel=\"noopener\">原文地址</a></p>"},{"layout":"[post]","title":"promise.all和promise.race","date":"2019-02-17T01:57:01.000Z","_content":"## Promise.all和Promise.race的功能\n### Promise.all\n**Promise.all可以将多个Promise实例包装成一个新的Promise实例。同时，成功和失败的返回值是不同的，成功的时候返回的是一个结果数组，而失败的时候则返回最先被reject失败状态的值。**\n<!-- more -->\n```js\nlet p1 = new Promise((resolve, reject) => {\n  resolve('p1完成')\n})\n\nlet p2 = new Promise((resolve, reject) => {\n  resolve('p2完成')\n})\n\nlet p3 = Promse.reject('p3失败')\n\nPromise.all([p1, p2]).then((result) => {\n  console.log(result)               //['p1完成', 'p2完成']\n}).catch((error) => {\n  console.log(error)\n})\n\nPromise.all([p1,p3,p2]).then((result) => {\n  console.log(result)\n}).catch((error) => {\n  console.log(error)      // 失败了，打出 ''p3失败'\n})\n```\n### Promise.race\n**Promise.race可以将多个Promise实例包装成一个新的Promise实例。同时，成功和失败的返回值是不同的，成功的时候返回的是第一个返回的resolve，而失败的时候则返回最先被reject失败状态的值。（换句话说就是返回最快的那个）**\n\n```js\nlet p1 = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve('success')\n  },1000)\n})\n\nlet p2 = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    reject('failed')\n  }, 500)\n})\n\nPromise.race([p1, p2]).then((result) => {\n  console.log(result)\n}).catch((error) => {\n  console.log(error)  // 打开的是 'failed'\n})\n```\n## 简易实现\n### Promise.all\n```js\nPromise.all = (arr) => {\n    let resultList = [];\n    return new Promise((resolve, reject) => {\n        let i = 0;\n        next();\n        next = () => {\n            arr[i].then((res, rej) => {\n                if (!rej) {\n                    resultList.push(res);\n                    i++;\n                } else {\n                    reject(rej);\n                }\n                if (i == arr.length) {\n                    resolve(resultList);\n                } else {\n                    next();\n                }\n            })\n        }\n    })\n};\n```\n### Promise.race\n```js\nPromise.race = (arr) => {\n    let resultList = [];\n    return new Promise((resolve, reject) => {\n        let i = 0;\n        next();\n        next = () => {\n            arr[i].then((res, rej) => {\n                if (!rej) {\n                    resultList.push(res);\n                    i++;\n                } else {\n                    reject(rej);\n                }\n                if (i == arr.length) {\n                    resolve(resultList);\n                } else {\n                    next();\n                }\n            })\n        }\n    })\n};\n```\n## Promise.all的问题\n**在上面的代码中，Promise.all使用的是循环调用的方式，也就算是链式调用（Promise链），事实上Promise.all是并发，同时进行所有的promise方法。**\n\n```js\nPromise.all = (arr) => {\n    let resultList = new Array(arr.length);\n    return new Promise((resolve, reject) => {\n        let temp = 0;\n        for (let i = 0, len = arr.length; i < len; i++) {\n            arr[i].then((res, rej) => {\n                if (!rej) {\n                    resultList[i] = (res);\n                    if (temp == arr.length) {\n                        resolve(resultList);\n                    }\n                    temp++;\n                } else {\n                    reject(rej);\n                }\n            })\n        }\n    })\n};\n```\n\n","source":"_posts/promose-all和promise-race.md","raw":"---\nlayout: '[post]'\ntitle: promise.all和promise.race\ndate: 2019-02-17 09:57:01\ntags: Promise\n---\n## Promise.all和Promise.race的功能\n### Promise.all\n**Promise.all可以将多个Promise实例包装成一个新的Promise实例。同时，成功和失败的返回值是不同的，成功的时候返回的是一个结果数组，而失败的时候则返回最先被reject失败状态的值。**\n<!-- more -->\n```js\nlet p1 = new Promise((resolve, reject) => {\n  resolve('p1完成')\n})\n\nlet p2 = new Promise((resolve, reject) => {\n  resolve('p2完成')\n})\n\nlet p3 = Promse.reject('p3失败')\n\nPromise.all([p1, p2]).then((result) => {\n  console.log(result)               //['p1完成', 'p2完成']\n}).catch((error) => {\n  console.log(error)\n})\n\nPromise.all([p1,p3,p2]).then((result) => {\n  console.log(result)\n}).catch((error) => {\n  console.log(error)      // 失败了，打出 ''p3失败'\n})\n```\n### Promise.race\n**Promise.race可以将多个Promise实例包装成一个新的Promise实例。同时，成功和失败的返回值是不同的，成功的时候返回的是第一个返回的resolve，而失败的时候则返回最先被reject失败状态的值。（换句话说就是返回最快的那个）**\n\n```js\nlet p1 = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve('success')\n  },1000)\n})\n\nlet p2 = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    reject('failed')\n  }, 500)\n})\n\nPromise.race([p1, p2]).then((result) => {\n  console.log(result)\n}).catch((error) => {\n  console.log(error)  // 打开的是 'failed'\n})\n```\n## 简易实现\n### Promise.all\n```js\nPromise.all = (arr) => {\n    let resultList = [];\n    return new Promise((resolve, reject) => {\n        let i = 0;\n        next();\n        next = () => {\n            arr[i].then((res, rej) => {\n                if (!rej) {\n                    resultList.push(res);\n                    i++;\n                } else {\n                    reject(rej);\n                }\n                if (i == arr.length) {\n                    resolve(resultList);\n                } else {\n                    next();\n                }\n            })\n        }\n    })\n};\n```\n### Promise.race\n```js\nPromise.race = (arr) => {\n    let resultList = [];\n    return new Promise((resolve, reject) => {\n        let i = 0;\n        next();\n        next = () => {\n            arr[i].then((res, rej) => {\n                if (!rej) {\n                    resultList.push(res);\n                    i++;\n                } else {\n                    reject(rej);\n                }\n                if (i == arr.length) {\n                    resolve(resultList);\n                } else {\n                    next();\n                }\n            })\n        }\n    })\n};\n```\n## Promise.all的问题\n**在上面的代码中，Promise.all使用的是循环调用的方式，也就算是链式调用（Promise链），事实上Promise.all是并发，同时进行所有的promise方法。**\n\n```js\nPromise.all = (arr) => {\n    let resultList = new Array(arr.length);\n    return new Promise((resolve, reject) => {\n        let temp = 0;\n        for (let i = 0, len = arr.length; i < len; i++) {\n            arr[i].then((res, rej) => {\n                if (!rej) {\n                    resultList[i] = (res);\n                    if (temp == arr.length) {\n                        resolve(resultList);\n                    }\n                    temp++;\n                } else {\n                    reject(rej);\n                }\n            })\n        }\n    })\n};\n```\n\n","slug":"promose-all和promise-race","published":1,"updated":"2020-01-24T14:55:10.000Z","comments":1,"photos":[],"link":"","_id":"ck9v62x7m000yqqs64elt0muj","content":"<h2 id=\"Promise-all和Promise-race的功能\"><a href=\"#Promise-all和Promise-race的功能\" class=\"headerlink\" title=\"Promise.all和Promise.race的功能\"></a>Promise.all和Promise.race的功能</h2><h3 id=\"Promise-all\"><a href=\"#Promise-all\" class=\"headerlink\" title=\"Promise.all\"></a>Promise.all</h3><p><strong>Promise.all可以将多个Promise实例包装成一个新的Promise实例。同时，成功和失败的返回值是不同的，成功的时候返回的是一个结果数组，而失败的时候则返回最先被reject失败状态的值。</strong></p>\n<a id=\"more\"></a>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  resolve(<span class=\"string\">'p1完成'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  resolve(<span class=\"string\">'p2完成'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p3 = Promse.reject(<span class=\"string\">'p3失败'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.all([p1, p2]).then(<span class=\"function\">(<span class=\"params\">result</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(result)               <span class=\"comment\">//['p1完成', 'p2完成']</span></span><br><span class=\"line\">&#125;).catch(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(error)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.all([p1,p3,p2]).then(<span class=\"function\">(<span class=\"params\">result</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(result)</span><br><span class=\"line\">&#125;).catch(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(error)      <span class=\"comment\">// 失败了，打出 ''p3失败'</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"Promise-race\"><a href=\"#Promise-race\" class=\"headerlink\" title=\"Promise.race\"></a>Promise.race</h3><p><strong>Promise.race可以将多个Promise实例包装成一个新的Promise实例。同时，成功和失败的返回值是不同的，成功的时候返回的是第一个返回的resolve，而失败的时候则返回最先被reject失败状态的值。（换句话说就是返回最快的那个）</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    resolve(<span class=\"string\">'success'</span>)</span><br><span class=\"line\">  &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    reject(<span class=\"string\">'failed'</span>)</span><br><span class=\"line\">  &#125;, <span class=\"number\">500</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.race([p1, p2]).then(<span class=\"function\">(<span class=\"params\">result</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(result)</span><br><span class=\"line\">&#125;).catch(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(error)  <span class=\"comment\">// 打开的是 'failed'</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"简易实现\"><a href=\"#简易实现\" class=\"headerlink\" title=\"简易实现\"></a>简易实现</h2><h3 id=\"Promise-all-1\"><a href=\"#Promise-all-1\" class=\"headerlink\" title=\"Promise.all\"></a>Promise.all</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.all = <span class=\"function\">(<span class=\"params\">arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> resultList = [];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">        next();</span><br><span class=\"line\">        next = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            arr[i].then(<span class=\"function\">(<span class=\"params\">res, rej</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!rej) &#123;</span><br><span class=\"line\">                    resultList.push(res);</span><br><span class=\"line\">                    i++;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    reject(rej);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (i == arr.length) &#123;</span><br><span class=\"line\">                    resolve(resultList);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    next();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Promise-race-1\"><a href=\"#Promise-race-1\" class=\"headerlink\" title=\"Promise.race\"></a>Promise.race</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.race = <span class=\"function\">(<span class=\"params\">arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> resultList = [];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">        next();</span><br><span class=\"line\">        next = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            arr[i].then(<span class=\"function\">(<span class=\"params\">res, rej</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!rej) &#123;</span><br><span class=\"line\">                    resultList.push(res);</span><br><span class=\"line\">                    i++;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    reject(rej);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (i == arr.length) &#123;</span><br><span class=\"line\">                    resolve(resultList);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    next();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Promise-all的问题\"><a href=\"#Promise-all的问题\" class=\"headerlink\" title=\"Promise.all的问题\"></a>Promise.all的问题</h2><p><strong>在上面的代码中，Promise.all使用的是循环调用的方式，也就算是链式调用（Promise链），事实上Promise.all是并发，同时进行所有的promise方法。</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.all = <span class=\"function\">(<span class=\"params\">arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> resultList = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(arr.length);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> temp = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, len = arr.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">            arr[i].then(<span class=\"function\">(<span class=\"params\">res, rej</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!rej) &#123;</span><br><span class=\"line\">                    resultList[i] = (res);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (temp == arr.length) &#123;</span><br><span class=\"line\">                        resolve(resultList);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    temp++;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    reject(rej);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<h2 id=\"Promise-all和Promise-race的功能\"><a href=\"#Promise-all和Promise-race的功能\" class=\"headerlink\" title=\"Promise.all和Promise.race的功能\"></a>Promise.all和Promise.race的功能</h2><h3 id=\"Promise-all\"><a href=\"#Promise-all\" class=\"headerlink\" title=\"Promise.all\"></a>Promise.all</h3><p><strong>Promise.all可以将多个Promise实例包装成一个新的Promise实例。同时，成功和失败的返回值是不同的，成功的时候返回的是一个结果数组，而失败的时候则返回最先被reject失败状态的值。</strong></p>","more":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  resolve(<span class=\"string\">'p1完成'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  resolve(<span class=\"string\">'p2完成'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p3 = Promse.reject(<span class=\"string\">'p3失败'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.all([p1, p2]).then(<span class=\"function\">(<span class=\"params\">result</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(result)               <span class=\"comment\">//['p1完成', 'p2完成']</span></span><br><span class=\"line\">&#125;).catch(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(error)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.all([p1,p3,p2]).then(<span class=\"function\">(<span class=\"params\">result</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(result)</span><br><span class=\"line\">&#125;).catch(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(error)      <span class=\"comment\">// 失败了，打出 ''p3失败'</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"Promise-race\"><a href=\"#Promise-race\" class=\"headerlink\" title=\"Promise.race\"></a>Promise.race</h3><p><strong>Promise.race可以将多个Promise实例包装成一个新的Promise实例。同时，成功和失败的返回值是不同的，成功的时候返回的是第一个返回的resolve，而失败的时候则返回最先被reject失败状态的值。（换句话说就是返回最快的那个）</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    resolve(<span class=\"string\">'success'</span>)</span><br><span class=\"line\">  &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    reject(<span class=\"string\">'failed'</span>)</span><br><span class=\"line\">  &#125;, <span class=\"number\">500</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.race([p1, p2]).then(<span class=\"function\">(<span class=\"params\">result</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(result)</span><br><span class=\"line\">&#125;).catch(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(error)  <span class=\"comment\">// 打开的是 'failed'</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"简易实现\"><a href=\"#简易实现\" class=\"headerlink\" title=\"简易实现\"></a>简易实现</h2><h3 id=\"Promise-all-1\"><a href=\"#Promise-all-1\" class=\"headerlink\" title=\"Promise.all\"></a>Promise.all</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.all = <span class=\"function\">(<span class=\"params\">arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> resultList = [];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">        next();</span><br><span class=\"line\">        next = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            arr[i].then(<span class=\"function\">(<span class=\"params\">res, rej</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!rej) &#123;</span><br><span class=\"line\">                    resultList.push(res);</span><br><span class=\"line\">                    i++;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    reject(rej);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (i == arr.length) &#123;</span><br><span class=\"line\">                    resolve(resultList);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    next();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Promise-race-1\"><a href=\"#Promise-race-1\" class=\"headerlink\" title=\"Promise.race\"></a>Promise.race</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.race = <span class=\"function\">(<span class=\"params\">arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> resultList = [];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">        next();</span><br><span class=\"line\">        next = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            arr[i].then(<span class=\"function\">(<span class=\"params\">res, rej</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!rej) &#123;</span><br><span class=\"line\">                    resultList.push(res);</span><br><span class=\"line\">                    i++;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    reject(rej);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (i == arr.length) &#123;</span><br><span class=\"line\">                    resolve(resultList);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    next();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Promise-all的问题\"><a href=\"#Promise-all的问题\" class=\"headerlink\" title=\"Promise.all的问题\"></a>Promise.all的问题</h2><p><strong>在上面的代码中，Promise.all使用的是循环调用的方式，也就算是链式调用（Promise链），事实上Promise.all是并发，同时进行所有的promise方法。</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.all = <span class=\"function\">(<span class=\"params\">arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> resultList = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(arr.length);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> temp = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, len = arr.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">            arr[i].then(<span class=\"function\">(<span class=\"params\">res, rej</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!rej) &#123;</span><br><span class=\"line\">                    resultList[i] = (res);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (temp == arr.length) &#123;</span><br><span class=\"line\">                        resolve(resultList);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    temp++;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    reject(rej);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"layout":"[post]","title":"webp在项目中的应用","date":"2019-03-22T03:11:26.000Z","_content":"## 什么是webp？\nWebP格式，谷歌开发的一种旨在加快图片加载速度的图片格式。图片压缩体积大约只有JPEG的2/3，并能节省大量的服务器宽带资源和数据空间。\n<!-- more -->\n\n## 为什么要用webp\n1. 减小图片加载资源的大小、节省用户流量资源\n2. 降低服务器流量资源  \n### 压缩率\n![yasuo](yasuo.webp)\n\n## webp兼容性情况\n![yasuo](jianrong.webp)  \n结果：谷歌全面支持、安卓浏览器从4.2开始支持。那么在页面中对于安卓用户中图片资源加载大小会有大幅度下降。\n\n## webp在各大网站的使用\n淘宝中大量使用webp。  \n![yasuo](taobao.webp)  \n各大cdn也是支持webp图片格式输出。\n\n## 项目中的实践\n![yasuo](liucheng.webp) \n### 技术实现\n#### webp兼容性如何检测？\n1. 通过js浏览器端判断是否支持webp\n```js\nfunction check_webp_feature(feature, callback) {\n    var kTestImages = {\n        lossy: \"UklGRiIAAABXRUJQVlA4IBYAAAAwAQCdASoBAAEADsD+JaQAA3AAAAAA\",\n        lossless: \"UklGRhoAAABXRUJQVlA4TA0AAAAvAAAAEAcQERGIiP4HAA==\",\n        alpha: \"UklGRkoAAABXRUJQVlA4WAoAAAAQAAAAAAAAAAAAQUxQSAwAAAARBxAR/Q9ERP8DAABWUDggGAAAABQBAJ0BKgEAAQAAAP4AAA3AAP7mtQAAAA==\",\n        animation: \"UklGRlIAAABXRUJQVlA4WAoAAAASAAAAAAAAAAAAQU5JTQYAAAD/////AABBTk1GJgAAAAAAAAAAAAAAAAAAAGQAAABWUDhMDQAAAC8AAAAQBxAREYiI/gcA\"\n    };\n    var img = new Image();\n    img.onload = function () {\n        var result = (img.width > 0) && (img.height > 0);\n        callback(feature, result);\n    };\n    img.onerror = function () {\n        callback(feature, false);\n    };\n    img.src = \"data:image/webp;base64,\" + kTestImages[feature];\n}\n```\n2. 浏览器向服务端发起请求的时候accept 会带上image/webp 信息，在服务端判断是否支持webp。\n\n```js\nmap $http_accept $webp_suffix {\n        default   \"\";\n        \"~*webp\"  \".webp\";\n}\n```\n通过nginx中map方法，查找是否有webp字段，如果有设置$webp_suffix 为.webp值。通过该值就可以来判断是否支持webp。如果支持写入cookie，前端通过检测cookie做判断，是否加载webp图片。\n\nnginx 中设置cookie代码\n\n```java\nlocation / {\n  if ($webp_suffix ~* webp) {\n    add_header Set-Cookie 'webpAvaile=true; path= /; expires=3153600';\n  }\n}\n```\n\n### 在开发中使用  \n#### sass中使用\n\n```scss\n@mixin webpbg($url) {\n    background-image: url($url);\n    @at-root .webpa & {\n        background-image: url($url+'.webp');\n    }\n}\n```\nscss文件使用  \n\n```scss\n@include webpbg('../image/header.jpg');\n```\n\n#### html中使用\n\n```html\n<picture class=\"img\" >\n    <source class=\"img\" srcset=\"images/banner.jpg.webp\" type=\"image/webp\">\n    <img class=\"img\" id=\"headImg\" src=\"images/banner.jpg\"/>\n</picture>\n```\n\n#### 生成webp资源\n使用webpack的loader\n\n```js\nvar imagemin = require('imagemin');\nvar imageminWebp = require('imagemin-webp');\nvar loaderUtils = require('loader-utils');\n \nmodule.exports = function (content) {\n    this.cacheable && this.cacheable();\n    if (!this.emitFile) throw new Error(\"emitFile is required from module system\");\n    var callback = this.async();\n    var options = loaderUtils.getOptions(this);\n \n    // 写入原文件\n    var url = loaderUtils.interpolateName(this, options.name || \"[hash].[ext]\", {\n        content: content,\n        regExp: options.regExp\n    });\n    this.emitFile(url, content);\n \n    // 如果源文件比较小，则没必要转换为webp格式的图片，直接使用callback传递给下一个loader处理\n    var limit;\n    if (options.limit) {\n        limit = parseInt(options.limit, 10);\n    }\n    if (limit <= 0 || content.length < limit) {\n        callback(null, { buffer: content, url })\n        return;\n    }\n \n    // 根据options内容生成webpOptions\n    var webpOptions = {\n        preset: options.preset || 'default',\n        quality: options.quality || 75,\n        alphaQuality: options.alphaQuality || 100,\n        method: options.method || 1,\n        sns: options.sns || 80,\n        autoFilter: options.autoFilter || false,\n        sharpness: options.sharpness || 0,\n        lossless: options.lossless || false,\n    };\n    if (options.size) {\n        webpOptions.size = options.size;\n    }\n    if (options.filter) {\n        webpOptions.filter = options.filter;\n    }\n \n    // 生成的webp图片的名称为原图片的名称后面追加.webp,\n    // 例如：xxx.jpg.webp, 方便在css预处理器中的使用\n    var webpUrl = url + '.webp';\n    // 原图片异步转换为webp的图片\n    imagemin.buffer(content, { plugins: [imageminWebp(webpOptions)] }).then(file => {\n        // 写入webp图片并调用callback\n        this.emitFile(webpUrl, file);\n        // 传递给svg-placrholder-loader，继续处理成placeholder\n        callback(null, { buffer: content, url, webpUrl });\n \n        /* 如果要单独使用的话，可以使用该注释部分的代码\n        const exportJson = 'module.exports = { ' +\n            '\"originSrc\": __webpack_public_path__ + \"' + url +\n            '\" , \"webpSrc\": __webpack_public_path__ + \"' + webpUrl +\n            '\"' +\n            ' };';\n        callback(null, exportJson);   \n        */  \n    }).catch(err => {\n        callback(err);\n    });\n \n};\n \n// 要求webpack传入原始的buffer，方便处理图片\nmodule.exports.raw = true;\n```\n\nnginx生成  \n实现过程，对支持webp的请求设置cookies。利用nginx检测图片请求是否存在，如果不存在通过lua调用imageMagic创建webp图片并返回。需要注意的是nginx需要安装lua支持的模块。\n\n\n```java\nuser  root; # nginx 用户权限 执行lua创建图片命令需要读写权限\n# ...\nhttp {\n    include       mime.types;\n    server {\n        listen       80;\n        server_name  webp.leewr.com;\n        root         /home/leewr/mono/app/public/december;\n        location / {\n            if ($webp_suffix ~* webp) {\n                add_header Set-Cookie 'webpAvaile=true; path= /;';\n            }\n        }\n        location ~* ^(.+\\.(jpg|png|jpeg|gif))(.webp)$ { # 正则匹配图片 paht/name.jpg.webp 格式的图片请求\n            if (!-f $request_filename) { # 如果图片不存在\n                access_log /usr/local/nginx/logs/december.log main; # 设置日志文件\n                set $request_filepath /home/leewr/mono/app/public/december/$1; # 图片真实路径变量\n                set $ext $3; # 设置图片扩展名$ext变量\n                content_by_lua_file lua/webp.lua; # 调用nginx/lua目录下的webp.lua文件\n            }\n        }\n    }\n}\n```\n\n下面看lua, lua 中代码非常简单。定义command命令，调用系统os.execute(command)执行convert图片转换命令。convert是ImageMagic的命令。.. lua 中字符串连接。ngx.var.ext是nginx中定义的变量。\n\n\n```nginx\nlocal command\ncommand = \"convert \" ..ngx.var.request_filepath.. \" \" ..ngx.var.request_filepath..ngx.var.ext\nos.execute(command)\nngx.exec(ngx.var.request_uri)\n```\n\n[原文地址](https://www.jianshu.com/p/73ca9e8b986a)\n","source":"_posts/webp在项目中的应用.md","raw":"---\nlayout: '[post]'\ntitle: webp在项目中的应用\ndate: 2019-03-22 11:11:26\ntags: html\n---\n## 什么是webp？\nWebP格式，谷歌开发的一种旨在加快图片加载速度的图片格式。图片压缩体积大约只有JPEG的2/3，并能节省大量的服务器宽带资源和数据空间。\n<!-- more -->\n\n## 为什么要用webp\n1. 减小图片加载资源的大小、节省用户流量资源\n2. 降低服务器流量资源  \n### 压缩率\n![yasuo](yasuo.webp)\n\n## webp兼容性情况\n![yasuo](jianrong.webp)  \n结果：谷歌全面支持、安卓浏览器从4.2开始支持。那么在页面中对于安卓用户中图片资源加载大小会有大幅度下降。\n\n## webp在各大网站的使用\n淘宝中大量使用webp。  \n![yasuo](taobao.webp)  \n各大cdn也是支持webp图片格式输出。\n\n## 项目中的实践\n![yasuo](liucheng.webp) \n### 技术实现\n#### webp兼容性如何检测？\n1. 通过js浏览器端判断是否支持webp\n```js\nfunction check_webp_feature(feature, callback) {\n    var kTestImages = {\n        lossy: \"UklGRiIAAABXRUJQVlA4IBYAAAAwAQCdASoBAAEADsD+JaQAA3AAAAAA\",\n        lossless: \"UklGRhoAAABXRUJQVlA4TA0AAAAvAAAAEAcQERGIiP4HAA==\",\n        alpha: \"UklGRkoAAABXRUJQVlA4WAoAAAAQAAAAAAAAAAAAQUxQSAwAAAARBxAR/Q9ERP8DAABWUDggGAAAABQBAJ0BKgEAAQAAAP4AAA3AAP7mtQAAAA==\",\n        animation: \"UklGRlIAAABXRUJQVlA4WAoAAAASAAAAAAAAAAAAQU5JTQYAAAD/////AABBTk1GJgAAAAAAAAAAAAAAAAAAAGQAAABWUDhMDQAAAC8AAAAQBxAREYiI/gcA\"\n    };\n    var img = new Image();\n    img.onload = function () {\n        var result = (img.width > 0) && (img.height > 0);\n        callback(feature, result);\n    };\n    img.onerror = function () {\n        callback(feature, false);\n    };\n    img.src = \"data:image/webp;base64,\" + kTestImages[feature];\n}\n```\n2. 浏览器向服务端发起请求的时候accept 会带上image/webp 信息，在服务端判断是否支持webp。\n\n```js\nmap $http_accept $webp_suffix {\n        default   \"\";\n        \"~*webp\"  \".webp\";\n}\n```\n通过nginx中map方法，查找是否有webp字段，如果有设置$webp_suffix 为.webp值。通过该值就可以来判断是否支持webp。如果支持写入cookie，前端通过检测cookie做判断，是否加载webp图片。\n\nnginx 中设置cookie代码\n\n```java\nlocation / {\n  if ($webp_suffix ~* webp) {\n    add_header Set-Cookie 'webpAvaile=true; path= /; expires=3153600';\n  }\n}\n```\n\n### 在开发中使用  \n#### sass中使用\n\n```scss\n@mixin webpbg($url) {\n    background-image: url($url);\n    @at-root .webpa & {\n        background-image: url($url+'.webp');\n    }\n}\n```\nscss文件使用  \n\n```scss\n@include webpbg('../image/header.jpg');\n```\n\n#### html中使用\n\n```html\n<picture class=\"img\" >\n    <source class=\"img\" srcset=\"images/banner.jpg.webp\" type=\"image/webp\">\n    <img class=\"img\" id=\"headImg\" src=\"images/banner.jpg\"/>\n</picture>\n```\n\n#### 生成webp资源\n使用webpack的loader\n\n```js\nvar imagemin = require('imagemin');\nvar imageminWebp = require('imagemin-webp');\nvar loaderUtils = require('loader-utils');\n \nmodule.exports = function (content) {\n    this.cacheable && this.cacheable();\n    if (!this.emitFile) throw new Error(\"emitFile is required from module system\");\n    var callback = this.async();\n    var options = loaderUtils.getOptions(this);\n \n    // 写入原文件\n    var url = loaderUtils.interpolateName(this, options.name || \"[hash].[ext]\", {\n        content: content,\n        regExp: options.regExp\n    });\n    this.emitFile(url, content);\n \n    // 如果源文件比较小，则没必要转换为webp格式的图片，直接使用callback传递给下一个loader处理\n    var limit;\n    if (options.limit) {\n        limit = parseInt(options.limit, 10);\n    }\n    if (limit <= 0 || content.length < limit) {\n        callback(null, { buffer: content, url })\n        return;\n    }\n \n    // 根据options内容生成webpOptions\n    var webpOptions = {\n        preset: options.preset || 'default',\n        quality: options.quality || 75,\n        alphaQuality: options.alphaQuality || 100,\n        method: options.method || 1,\n        sns: options.sns || 80,\n        autoFilter: options.autoFilter || false,\n        sharpness: options.sharpness || 0,\n        lossless: options.lossless || false,\n    };\n    if (options.size) {\n        webpOptions.size = options.size;\n    }\n    if (options.filter) {\n        webpOptions.filter = options.filter;\n    }\n \n    // 生成的webp图片的名称为原图片的名称后面追加.webp,\n    // 例如：xxx.jpg.webp, 方便在css预处理器中的使用\n    var webpUrl = url + '.webp';\n    // 原图片异步转换为webp的图片\n    imagemin.buffer(content, { plugins: [imageminWebp(webpOptions)] }).then(file => {\n        // 写入webp图片并调用callback\n        this.emitFile(webpUrl, file);\n        // 传递给svg-placrholder-loader，继续处理成placeholder\n        callback(null, { buffer: content, url, webpUrl });\n \n        /* 如果要单独使用的话，可以使用该注释部分的代码\n        const exportJson = 'module.exports = { ' +\n            '\"originSrc\": __webpack_public_path__ + \"' + url +\n            '\" , \"webpSrc\": __webpack_public_path__ + \"' + webpUrl +\n            '\"' +\n            ' };';\n        callback(null, exportJson);   \n        */  \n    }).catch(err => {\n        callback(err);\n    });\n \n};\n \n// 要求webpack传入原始的buffer，方便处理图片\nmodule.exports.raw = true;\n```\n\nnginx生成  \n实现过程，对支持webp的请求设置cookies。利用nginx检测图片请求是否存在，如果不存在通过lua调用imageMagic创建webp图片并返回。需要注意的是nginx需要安装lua支持的模块。\n\n\n```java\nuser  root; # nginx 用户权限 执行lua创建图片命令需要读写权限\n# ...\nhttp {\n    include       mime.types;\n    server {\n        listen       80;\n        server_name  webp.leewr.com;\n        root         /home/leewr/mono/app/public/december;\n        location / {\n            if ($webp_suffix ~* webp) {\n                add_header Set-Cookie 'webpAvaile=true; path= /;';\n            }\n        }\n        location ~* ^(.+\\.(jpg|png|jpeg|gif))(.webp)$ { # 正则匹配图片 paht/name.jpg.webp 格式的图片请求\n            if (!-f $request_filename) { # 如果图片不存在\n                access_log /usr/local/nginx/logs/december.log main; # 设置日志文件\n                set $request_filepath /home/leewr/mono/app/public/december/$1; # 图片真实路径变量\n                set $ext $3; # 设置图片扩展名$ext变量\n                content_by_lua_file lua/webp.lua; # 调用nginx/lua目录下的webp.lua文件\n            }\n        }\n    }\n}\n```\n\n下面看lua, lua 中代码非常简单。定义command命令，调用系统os.execute(command)执行convert图片转换命令。convert是ImageMagic的命令。.. lua 中字符串连接。ngx.var.ext是nginx中定义的变量。\n\n\n```nginx\nlocal command\ncommand = \"convert \" ..ngx.var.request_filepath.. \" \" ..ngx.var.request_filepath..ngx.var.ext\nos.execute(command)\nngx.exec(ngx.var.request_uri)\n```\n\n[原文地址](https://www.jianshu.com/p/73ca9e8b986a)\n","slug":"webp在项目中的应用","published":1,"updated":"2020-02-03T09:29:59.000Z","comments":1,"photos":[],"link":"","_id":"ck9v62x7o0011qqs6c6l91j0f","content":"<h2 id=\"什么是webp？\"><a href=\"#什么是webp？\" class=\"headerlink\" title=\"什么是webp？\"></a>什么是webp？</h2><p>WebP格式，谷歌开发的一种旨在加快图片加载速度的图片格式。图片压缩体积大约只有JPEG的2/3，并能节省大量的服务器宽带资源和数据空间。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"为什么要用webp\"><a href=\"#为什么要用webp\" class=\"headerlink\" title=\"为什么要用webp\"></a>为什么要用webp</h2><ol>\n<li>减小图片加载资源的大小、节省用户流量资源</li>\n<li>降低服务器流量资源  <h3 id=\"压缩率\"><a href=\"#压缩率\" class=\"headerlink\" title=\"压缩率\"></a>压缩率</h3><img src=\"/2019/03/22/webp%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/yasuo.webp\" alt=\"yasuo\"></li>\n</ol>\n<h2 id=\"webp兼容性情况\"><a href=\"#webp兼容性情况\" class=\"headerlink\" title=\"webp兼容性情况\"></a>webp兼容性情况</h2><p><img src=\"/2019/03/22/webp%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/jianrong.webp\" alt=\"yasuo\"><br>结果：谷歌全面支持、安卓浏览器从4.2开始支持。那么在页面中对于安卓用户中图片资源加载大小会有大幅度下降。</p>\n<h2 id=\"webp在各大网站的使用\"><a href=\"#webp在各大网站的使用\" class=\"headerlink\" title=\"webp在各大网站的使用\"></a>webp在各大网站的使用</h2><p>淘宝中大量使用webp。<br><img src=\"/2019/03/22/webp%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/taobao.webp\" alt=\"yasuo\"><br>各大cdn也是支持webp图片格式输出。</p>\n<h2 id=\"项目中的实践\"><a href=\"#项目中的实践\" class=\"headerlink\" title=\"项目中的实践\"></a>项目中的实践</h2><p><img src=\"/2019/03/22/webp%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/liucheng.webp\" alt=\"yasuo\"> </p>\n<h3 id=\"技术实现\"><a href=\"#技术实现\" class=\"headerlink\" title=\"技术实现\"></a>技术实现</h3><h4 id=\"webp兼容性如何检测？\"><a href=\"#webp兼容性如何检测？\" class=\"headerlink\" title=\"webp兼容性如何检测？\"></a>webp兼容性如何检测？</h4><ol>\n<li>通过js浏览器端判断是否支持webp<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">check_webp_feature</span>(<span class=\"params\">feature, callback</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> kTestImages = &#123;</span><br><span class=\"line\">        lossy: <span class=\"string\">\"UklGRiIAAABXRUJQVlA4IBYAAAAwAQCdASoBAAEADsD+JaQAA3AAAAAA\"</span>,</span><br><span class=\"line\">        lossless: <span class=\"string\">\"UklGRhoAAABXRUJQVlA4TA0AAAAvAAAAEAcQERGIiP4HAA==\"</span>,</span><br><span class=\"line\">        alpha: <span class=\"string\">\"UklGRkoAAABXRUJQVlA4WAoAAAAQAAAAAAAAAAAAQUxQSAwAAAARBxAR/Q9ERP8DAABWUDggGAAAABQBAJ0BKgEAAQAAAP4AAA3AAP7mtQAAAA==\"</span>,</span><br><span class=\"line\">        animation: <span class=\"string\">\"UklGRlIAAABXRUJQVlA4WAoAAAASAAAAAAAAAAAAQU5JTQYAAAD/////AABBTk1GJgAAAAAAAAAAAAAAAAAAAGQAAABWUDhMDQAAAC8AAAAQBxAREYiI/gcA\"</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\">    img.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> result = (img.width &gt; <span class=\"number\">0</span>) &amp;&amp; (img.height &gt; <span class=\"number\">0</span>);</span><br><span class=\"line\">        callback(feature, result);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    img.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        callback(feature, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    img.src = <span class=\"string\">\"data:image/webp;base64,\"</span> + kTestImages[feature];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>浏览器向服务端发起请求的时候accept 会带上image/webp 信息，在服务端判断是否支持webp。</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map $http_accept $webp_suffix &#123;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>   <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        <span class=\"string\">\"~*webp\"</span>  <span class=\"string\">\".webp\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过nginx中map方法，查找是否有webp字段，如果有设置$webp_suffix 为.webp值。通过该值就可以来判断是否支持webp。如果支持写入cookie，前端通过检测cookie做判断，是否加载webp图片。</p>\n<p>nginx 中设置cookie代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location / &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ($webp_suffix ~* webp) &#123;</span><br><span class=\"line\">    add_header Set-Cookie <span class=\"string\">'webpAvaile=true; path= /; expires=3153600'</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在开发中使用\"><a href=\"#在开发中使用\" class=\"headerlink\" title=\"在开发中使用\"></a>在开发中使用</h3><h4 id=\"sass中使用\"><a href=\"#sass中使用\" class=\"headerlink\" title=\"sass中使用\"></a>sass中使用</h4><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@mixin</span> webpbg(<span class=\"variable\">$url</span>) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-image</span>: url(<span class=\"variable\">$url</span>);</span><br><span class=\"line\">    <span class=\"keyword\">@at-root</span> .webpa &amp; &#123;</span><br><span class=\"line\">        <span class=\"attribute\">background-image</span>: url(<span class=\"variable\">$url</span>+<span class=\"string\">'.webp'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>scss文件使用  </p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@include</span> webpbg(<span class=\"string\">'../image/header.jpg'</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"html中使用\"><a href=\"#html中使用\" class=\"headerlink\" title=\"html中使用\"></a>html中使用</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">picture</span> <span class=\"attr\">class</span>=<span class=\"string\">\"img\"</span> &gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">class</span>=<span class=\"string\">\"img\"</span> <span class=\"attr\">srcset</span>=<span class=\"string\">\"images/banner.jpg.webp\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"image/webp\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">class</span>=<span class=\"string\">\"img\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"headImg\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"images/banner.jpg\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">picture</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"生成webp资源\"><a href=\"#生成webp资源\" class=\"headerlink\" title=\"生成webp资源\"></a>生成webp资源</h4><p>使用webpack的loader</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> imagemin = <span class=\"built_in\">require</span>(<span class=\"string\">'imagemin'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> imageminWebp = <span class=\"built_in\">require</span>(<span class=\"string\">'imagemin-webp'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> loaderUtils = <span class=\"built_in\">require</span>(<span class=\"string\">'loader-utils'</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">content</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.cacheable &amp;&amp; <span class=\"keyword\">this</span>.cacheable();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.emitFile) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"emitFile is required from module system\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> callback = <span class=\"keyword\">this</span>.async();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> options = loaderUtils.getOptions(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 写入原文件</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> url = loaderUtils.interpolateName(<span class=\"keyword\">this</span>, options.name || <span class=\"string\">\"[hash].[ext]\"</span>, &#123;</span><br><span class=\"line\">        content: content,</span><br><span class=\"line\">        regExp: options.regExp</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.emitFile(url, content);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 如果源文件比较小，则没必要转换为webp格式的图片，直接使用callback传递给下一个loader处理</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> limit;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (options.limit) &#123;</span><br><span class=\"line\">        limit = <span class=\"built_in\">parseInt</span>(options.limit, <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (limit &lt;= <span class=\"number\">0</span> || content.length &lt; limit) &#123;</span><br><span class=\"line\">        callback(<span class=\"literal\">null</span>, &#123; <span class=\"attr\">buffer</span>: content, url &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 根据options内容生成webpOptions</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> webpOptions = &#123;</span><br><span class=\"line\">        preset: options.preset || <span class=\"string\">'default'</span>,</span><br><span class=\"line\">        quality: options.quality || <span class=\"number\">75</span>,</span><br><span class=\"line\">        alphaQuality: options.alphaQuality || <span class=\"number\">100</span>,</span><br><span class=\"line\">        method: options.method || <span class=\"number\">1</span>,</span><br><span class=\"line\">        sns: options.sns || <span class=\"number\">80</span>,</span><br><span class=\"line\">        autoFilter: options.autoFilter || <span class=\"literal\">false</span>,</span><br><span class=\"line\">        sharpness: options.sharpness || <span class=\"number\">0</span>,</span><br><span class=\"line\">        lossless: options.lossless || <span class=\"literal\">false</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (options.size) &#123;</span><br><span class=\"line\">        webpOptions.size = options.size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (options.filter) &#123;</span><br><span class=\"line\">        webpOptions.filter = options.filter;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 生成的webp图片的名称为原图片的名称后面追加.webp,</span></span><br><span class=\"line\">    <span class=\"comment\">// 例如：xxx.jpg.webp, 方便在css预处理器中的使用</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> webpUrl = url + <span class=\"string\">'.webp'</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 原图片异步转换为webp的图片</span></span><br><span class=\"line\">    imagemin.buffer(content, &#123; <span class=\"attr\">plugins</span>: [imageminWebp(webpOptions)] &#125;).then(<span class=\"function\"><span class=\"params\">file</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 写入webp图片并调用callback</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.emitFile(webpUrl, file);</span><br><span class=\"line\">        <span class=\"comment\">// 传递给svg-placrholder-loader，继续处理成placeholder</span></span><br><span class=\"line\">        callback(<span class=\"literal\">null</span>, &#123; <span class=\"attr\">buffer</span>: content, url, webpUrl &#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">/* 如果要单独使用的话，可以使用该注释部分的代码</span></span><br><span class=\"line\"><span class=\"comment\">        const exportJson = 'module.exports = &#123; ' +</span></span><br><span class=\"line\"><span class=\"comment\">            '\"originSrc\": __webpack_public_path__ + \"' + url +</span></span><br><span class=\"line\"><span class=\"comment\">            '\" , \"webpSrc\": __webpack_public_path__ + \"' + webpUrl +</span></span><br><span class=\"line\"><span class=\"comment\">            '\"' +</span></span><br><span class=\"line\"><span class=\"comment\">            ' &#125;;';</span></span><br><span class=\"line\"><span class=\"comment\">        callback(null, exportJson);   </span></span><br><span class=\"line\"><span class=\"comment\">        */</span>  </span><br><span class=\"line\">    &#125;).catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">        callback(err);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 要求webpack传入原始的buffer，方便处理图片</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports.raw = <span class=\"literal\">true</span>;</span><br></pre></td></tr></table></figure>\n\n<p>nginx生成<br>实现过程，对支持webp的请求设置cookies。利用nginx检测图片请求是否存在，如果不存在通过lua调用imageMagic创建webp图片并返回。需要注意的是nginx需要安装lua支持的模块。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user  root; # nginx 用户权限 执行lua创建图片命令需要读写权限</span><br><span class=\"line\"># ...</span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen       <span class=\"number\">80</span>;</span><br><span class=\"line\">        server_name  webp.leewr.com;</span><br><span class=\"line\">        root         /home/leewr/mono/app/<span class=\"keyword\">public</span>/december;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ($webp_suffix ~* webp) &#123;</span><br><span class=\"line\">                add_header Set-Cookie <span class=\"string\">'webpAvaile=true; path= /;'</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        location ~* ^(.+\\.(jpg|png|jpeg|gif))(.webp)$ &#123; # 正则匹配图片 paht/name.jpg.webp 格式的图片请求</span><br><span class=\"line\">            if (!-f $request_filename) &#123; # 如果图片不存在</span><br><span class=\"line\">                access_log /usr/local/nginx/logs/december.log main; # 设置日志文件</span><br><span class=\"line\">                set $request_filepath /home/leewr/mono/app/public/december/$1; # 图片真实路径变量</span><br><span class=\"line\">                set $ext $3; # 设置图片扩展名$ext变量</span><br><span class=\"line\">                content_by_lua_file lua/webp.lua; # 调用nginx/lua目录下的webp.lua文件</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面看lua, lua 中代码非常简单。定义command命令，调用系统os.execute(command)执行convert图片转换命令。convert是ImageMagic的命令。.. lua 中字符串连接。ngx.var.ext是nginx中定义的变量。</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">local</span> command</span><br><span class=\"line\">command = <span class=\"string\">\"convert \"</span> ..ngx.var.request_filepath.. <span class=\"string\">\" \"</span> ..ngx.var.request_filepath..ngx.var.ext</span><br><span class=\"line\">os.execute(command)</span><br><span class=\"line\">ngx.exec(ngx.var.request_uri)</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://www.jianshu.com/p/73ca9e8b986a\" target=\"_blank\" rel=\"noopener\">原文地址</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"什么是webp？\"><a href=\"#什么是webp？\" class=\"headerlink\" title=\"什么是webp？\"></a>什么是webp？</h2><p>WebP格式，谷歌开发的一种旨在加快图片加载速度的图片格式。图片压缩体积大约只有JPEG的2/3，并能节省大量的服务器宽带资源和数据空间。</p>","more":"<h2 id=\"为什么要用webp\"><a href=\"#为什么要用webp\" class=\"headerlink\" title=\"为什么要用webp\"></a>为什么要用webp</h2><ol>\n<li>减小图片加载资源的大小、节省用户流量资源</li>\n<li>降低服务器流量资源  <h3 id=\"压缩率\"><a href=\"#压缩率\" class=\"headerlink\" title=\"压缩率\"></a>压缩率</h3><img src=\"/2019/03/22/webp%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/yasuo.webp\" alt=\"yasuo\"></li>\n</ol>\n<h2 id=\"webp兼容性情况\"><a href=\"#webp兼容性情况\" class=\"headerlink\" title=\"webp兼容性情况\"></a>webp兼容性情况</h2><p><img src=\"/2019/03/22/webp%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/jianrong.webp\" alt=\"yasuo\"><br>结果：谷歌全面支持、安卓浏览器从4.2开始支持。那么在页面中对于安卓用户中图片资源加载大小会有大幅度下降。</p>\n<h2 id=\"webp在各大网站的使用\"><a href=\"#webp在各大网站的使用\" class=\"headerlink\" title=\"webp在各大网站的使用\"></a>webp在各大网站的使用</h2><p>淘宝中大量使用webp。<br><img src=\"/2019/03/22/webp%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/taobao.webp\" alt=\"yasuo\"><br>各大cdn也是支持webp图片格式输出。</p>\n<h2 id=\"项目中的实践\"><a href=\"#项目中的实践\" class=\"headerlink\" title=\"项目中的实践\"></a>项目中的实践</h2><p><img src=\"/2019/03/22/webp%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/liucheng.webp\" alt=\"yasuo\"> </p>\n<h3 id=\"技术实现\"><a href=\"#技术实现\" class=\"headerlink\" title=\"技术实现\"></a>技术实现</h3><h4 id=\"webp兼容性如何检测？\"><a href=\"#webp兼容性如何检测？\" class=\"headerlink\" title=\"webp兼容性如何检测？\"></a>webp兼容性如何检测？</h4><ol>\n<li>通过js浏览器端判断是否支持webp<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">check_webp_feature</span>(<span class=\"params\">feature, callback</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> kTestImages = &#123;</span><br><span class=\"line\">        lossy: <span class=\"string\">\"UklGRiIAAABXRUJQVlA4IBYAAAAwAQCdASoBAAEADsD+JaQAA3AAAAAA\"</span>,</span><br><span class=\"line\">        lossless: <span class=\"string\">\"UklGRhoAAABXRUJQVlA4TA0AAAAvAAAAEAcQERGIiP4HAA==\"</span>,</span><br><span class=\"line\">        alpha: <span class=\"string\">\"UklGRkoAAABXRUJQVlA4WAoAAAAQAAAAAAAAAAAAQUxQSAwAAAARBxAR/Q9ERP8DAABWUDggGAAAABQBAJ0BKgEAAQAAAP4AAA3AAP7mtQAAAA==\"</span>,</span><br><span class=\"line\">        animation: <span class=\"string\">\"UklGRlIAAABXRUJQVlA4WAoAAAASAAAAAAAAAAAAQU5JTQYAAAD/////AABBTk1GJgAAAAAAAAAAAAAAAAAAAGQAAABWUDhMDQAAAC8AAAAQBxAREYiI/gcA\"</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\">    img.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> result = (img.width &gt; <span class=\"number\">0</span>) &amp;&amp; (img.height &gt; <span class=\"number\">0</span>);</span><br><span class=\"line\">        callback(feature, result);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    img.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        callback(feature, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    img.src = <span class=\"string\">\"data:image/webp;base64,\"</span> + kTestImages[feature];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>浏览器向服务端发起请求的时候accept 会带上image/webp 信息，在服务端判断是否支持webp。</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map $http_accept $webp_suffix &#123;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>   <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        <span class=\"string\">\"~*webp\"</span>  <span class=\"string\">\".webp\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过nginx中map方法，查找是否有webp字段，如果有设置$webp_suffix 为.webp值。通过该值就可以来判断是否支持webp。如果支持写入cookie，前端通过检测cookie做判断，是否加载webp图片。</p>\n<p>nginx 中设置cookie代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location / &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ($webp_suffix ~* webp) &#123;</span><br><span class=\"line\">    add_header Set-Cookie <span class=\"string\">'webpAvaile=true; path= /; expires=3153600'</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在开发中使用\"><a href=\"#在开发中使用\" class=\"headerlink\" title=\"在开发中使用\"></a>在开发中使用</h3><h4 id=\"sass中使用\"><a href=\"#sass中使用\" class=\"headerlink\" title=\"sass中使用\"></a>sass中使用</h4><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@mixin</span> webpbg(<span class=\"variable\">$url</span>) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-image</span>: url(<span class=\"variable\">$url</span>);</span><br><span class=\"line\">    <span class=\"keyword\">@at-root</span> .webpa &amp; &#123;</span><br><span class=\"line\">        <span class=\"attribute\">background-image</span>: url(<span class=\"variable\">$url</span>+<span class=\"string\">'.webp'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>scss文件使用  </p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@include</span> webpbg(<span class=\"string\">'../image/header.jpg'</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"html中使用\"><a href=\"#html中使用\" class=\"headerlink\" title=\"html中使用\"></a>html中使用</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">picture</span> <span class=\"attr\">class</span>=<span class=\"string\">\"img\"</span> &gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">class</span>=<span class=\"string\">\"img\"</span> <span class=\"attr\">srcset</span>=<span class=\"string\">\"images/banner.jpg.webp\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"image/webp\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">class</span>=<span class=\"string\">\"img\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"headImg\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"images/banner.jpg\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">picture</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"生成webp资源\"><a href=\"#生成webp资源\" class=\"headerlink\" title=\"生成webp资源\"></a>生成webp资源</h4><p>使用webpack的loader</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> imagemin = <span class=\"built_in\">require</span>(<span class=\"string\">'imagemin'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> imageminWebp = <span class=\"built_in\">require</span>(<span class=\"string\">'imagemin-webp'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> loaderUtils = <span class=\"built_in\">require</span>(<span class=\"string\">'loader-utils'</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">content</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.cacheable &amp;&amp; <span class=\"keyword\">this</span>.cacheable();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.emitFile) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"emitFile is required from module system\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> callback = <span class=\"keyword\">this</span>.async();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> options = loaderUtils.getOptions(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 写入原文件</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> url = loaderUtils.interpolateName(<span class=\"keyword\">this</span>, options.name || <span class=\"string\">\"[hash].[ext]\"</span>, &#123;</span><br><span class=\"line\">        content: content,</span><br><span class=\"line\">        regExp: options.regExp</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.emitFile(url, content);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 如果源文件比较小，则没必要转换为webp格式的图片，直接使用callback传递给下一个loader处理</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> limit;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (options.limit) &#123;</span><br><span class=\"line\">        limit = <span class=\"built_in\">parseInt</span>(options.limit, <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (limit &lt;= <span class=\"number\">0</span> || content.length &lt; limit) &#123;</span><br><span class=\"line\">        callback(<span class=\"literal\">null</span>, &#123; <span class=\"attr\">buffer</span>: content, url &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 根据options内容生成webpOptions</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> webpOptions = &#123;</span><br><span class=\"line\">        preset: options.preset || <span class=\"string\">'default'</span>,</span><br><span class=\"line\">        quality: options.quality || <span class=\"number\">75</span>,</span><br><span class=\"line\">        alphaQuality: options.alphaQuality || <span class=\"number\">100</span>,</span><br><span class=\"line\">        method: options.method || <span class=\"number\">1</span>,</span><br><span class=\"line\">        sns: options.sns || <span class=\"number\">80</span>,</span><br><span class=\"line\">        autoFilter: options.autoFilter || <span class=\"literal\">false</span>,</span><br><span class=\"line\">        sharpness: options.sharpness || <span class=\"number\">0</span>,</span><br><span class=\"line\">        lossless: options.lossless || <span class=\"literal\">false</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (options.size) &#123;</span><br><span class=\"line\">        webpOptions.size = options.size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (options.filter) &#123;</span><br><span class=\"line\">        webpOptions.filter = options.filter;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 生成的webp图片的名称为原图片的名称后面追加.webp,</span></span><br><span class=\"line\">    <span class=\"comment\">// 例如：xxx.jpg.webp, 方便在css预处理器中的使用</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> webpUrl = url + <span class=\"string\">'.webp'</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 原图片异步转换为webp的图片</span></span><br><span class=\"line\">    imagemin.buffer(content, &#123; <span class=\"attr\">plugins</span>: [imageminWebp(webpOptions)] &#125;).then(<span class=\"function\"><span class=\"params\">file</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 写入webp图片并调用callback</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.emitFile(webpUrl, file);</span><br><span class=\"line\">        <span class=\"comment\">// 传递给svg-placrholder-loader，继续处理成placeholder</span></span><br><span class=\"line\">        callback(<span class=\"literal\">null</span>, &#123; <span class=\"attr\">buffer</span>: content, url, webpUrl &#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">/* 如果要单独使用的话，可以使用该注释部分的代码</span></span><br><span class=\"line\"><span class=\"comment\">        const exportJson = 'module.exports = &#123; ' +</span></span><br><span class=\"line\"><span class=\"comment\">            '\"originSrc\": __webpack_public_path__ + \"' + url +</span></span><br><span class=\"line\"><span class=\"comment\">            '\" , \"webpSrc\": __webpack_public_path__ + \"' + webpUrl +</span></span><br><span class=\"line\"><span class=\"comment\">            '\"' +</span></span><br><span class=\"line\"><span class=\"comment\">            ' &#125;;';</span></span><br><span class=\"line\"><span class=\"comment\">        callback(null, exportJson);   </span></span><br><span class=\"line\"><span class=\"comment\">        */</span>  </span><br><span class=\"line\">    &#125;).catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">        callback(err);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 要求webpack传入原始的buffer，方便处理图片</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports.raw = <span class=\"literal\">true</span>;</span><br></pre></td></tr></table></figure>\n\n<p>nginx生成<br>实现过程，对支持webp的请求设置cookies。利用nginx检测图片请求是否存在，如果不存在通过lua调用imageMagic创建webp图片并返回。需要注意的是nginx需要安装lua支持的模块。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user  root; # nginx 用户权限 执行lua创建图片命令需要读写权限</span><br><span class=\"line\"># ...</span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen       <span class=\"number\">80</span>;</span><br><span class=\"line\">        server_name  webp.leewr.com;</span><br><span class=\"line\">        root         /home/leewr/mono/app/<span class=\"keyword\">public</span>/december;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ($webp_suffix ~* webp) &#123;</span><br><span class=\"line\">                add_header Set-Cookie <span class=\"string\">'webpAvaile=true; path= /;'</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        location ~* ^(.+\\.(jpg|png|jpeg|gif))(.webp)$ &#123; # 正则匹配图片 paht/name.jpg.webp 格式的图片请求</span><br><span class=\"line\">            if (!-f $request_filename) &#123; # 如果图片不存在</span><br><span class=\"line\">                access_log /usr/local/nginx/logs/december.log main; # 设置日志文件</span><br><span class=\"line\">                set $request_filepath /home/leewr/mono/app/public/december/$1; # 图片真实路径变量</span><br><span class=\"line\">                set $ext $3; # 设置图片扩展名$ext变量</span><br><span class=\"line\">                content_by_lua_file lua/webp.lua; # 调用nginx/lua目录下的webp.lua文件</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面看lua, lua 中代码非常简单。定义command命令，调用系统os.execute(command)执行convert图片转换命令。convert是ImageMagic的命令。.. lua 中字符串连接。ngx.var.ext是nginx中定义的变量。</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">local</span> command</span><br><span class=\"line\">command = <span class=\"string\">\"convert \"</span> ..ngx.var.request_filepath.. <span class=\"string\">\" \"</span> ..ngx.var.request_filepath..ngx.var.ext</span><br><span class=\"line\">os.execute(command)</span><br><span class=\"line\">ngx.exec(ngx.var.request_uri)</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://www.jianshu.com/p/73ca9e8b986a\" target=\"_blank\" rel=\"noopener\">原文地址</a></p>"},{"layout":"[post]","title":"事件循环EventLoop","date":"2019-10-07T03:27:31.000Z","_content":"## 什么是Event Loop\n**event loop是一个执行模型，在不同的地方有不同的实现。浏览器和NodeJS基于不同的技术实现了各自的Event Loop。**\n\n - 浏览器的Event Loop是在html5的规范中明确定义。\n - NodeJS的Event Loop是基于libuv实现的。可以参考Node的官方文档以及libuv的官方文档。\n - libuv已经对Event Loop做出了实现，而HTML5规范中只是定义了浏览器中Event Loop的模型，具体的实现留给了浏览器厂商。\n <!-- more -->\n##  宏队列和微队列\n### 宏队列\n**宏队列，macrotask，也叫tasks。**\n\n一些异步任务的回调会依次进入macro task queue，等待后续被调用，这些异步任务包括：\n- setTimeout\n- setInterval\n- setImmediate (Node独有)\n- requestAnimationFrame (浏览器独有)\n- I/O\n- UI rendering (浏览器独有)\n### 微队列\n**微队列，microtask，也叫jobs。**\n\n另一些异步任务的回调会依次进入micro task queue，等待后续被调用，这些异步任务包括：\n- process.nextTick (Node独有)\n- Promise\n- Object.observe\n- MutationObserver\n\n## 浏览器的Event Loop\n![image](eventloop1.png)\n这张图将浏览器的Event Loop完整的描述了出来，我来讲执行一个JavaScript代码的具体流程：\n\n1. 执行全局Script同步代码，这些同步代码有一些是同步语句，有一些是异步语句（比如setTimeout等）；\n2. 全局Script代码执行完毕后，调用栈Stack会清空；\n3. 从微队列microtask queue中取出位于队首的回调任务，放入调用栈Stack中执行，执行完后microtask queue长度减1；\n4. 继续取出位于队首的任务，放入调用栈Stack中执行，以此类推，直到直到把microtask queue中的所有任务都执行完毕。注意，如果在执行microtask的过程中，又产生了microtask，那么会加入到队列的末尾，也会在这个周期被调用执行；\n5. microtask queue中的所有任务都执行完毕，此时microtask queue为空队列，调用栈Stack也为空；\n6. 取出宏队列macrotask queue中位于队首的任务，放入Stack中执行；\n7. 执行完毕后，调用栈Stack为空；\n8. 重复第3-7个步骤；\n9. 重复第3-7个步骤；\n10. ...\n\n**可以看到，这就是浏览器的事件循环Event Loop**\n这里归纳3个重点：\n\n1. 宏队列macrotask一次只从队列中取一个任务执行，执行完后就去执行微任务队列中的任务；\n2. 微任务队列中所有的任务都会被依次取出来执行，知道microtask queue为空；\n3. 图中没有画UI rendering的节点，因为这个是由浏览器自行判断决定的，但是只要执行UI rendering，它的节点是在执行完所有的microtask之后，下一个macrotask之前，紧跟着执行UI render。\n\n### 例子\n#### 例1\n```js\nconsole.log(1);\n\nsetTimeout(() => {\n  console.log(2);\n  Promise.resolve().then(() => {\n    console.log(3)\n  });\n});\n\nnew Promise((resolve, reject) => {\n  console.log(4)\n  resolve(5)\n}).then((data) => {\n  console.log(data);\n})\n\nsetTimeout(() => {\n  console.log(6);\n})\n\nconsole.log(7);\n```\n#### 结果\n\n```js\n// 正确答案\n1\n4\n7\n5\n2\n3\n6\n```\n\n#### 例2\n\n```js\nconsole.log(1);\n\nsetTimeout(() => {\n  console.log(2);\n  Promise.resolve().then(() => {\n    console.log(3)\n  });\n});\n\nnew Promise((resolve, reject) => {\n  console.log(4)\n  resolve(5)\n}).then((data) => {\n  console.log(data);\n  \n  Promise.resolve().then(() => {\n    console.log(6)\n  }).then(() => {\n    console.log(7)\n    \n    setTimeout(() => {\n      console.log(8)\n    }, 0);\n  });\n})\n\nsetTimeout(() => {\n  console.log(9);\n})\n\nconsole.log(10);\n```\n#### 结果\n\n```js\n// 正确答案\n1\n4\n10\n5\n6\n7\n2\n3\n9\n8\n```\n**在执行微队列microtask queue中任务的时候，如果又产生了microtask，那么会继续添加到队列的末尾，也会在这个周期执行，直到microtask queue为空停止。\n**\n注：当然如果你在microtask中不断的产生microtask，那么其他宏任务macrotask就无法执行了，但是这个操作也不是无限的，拿NodeJS中的微任务process.nextTick()来说，它的上限是1000个，后面我们会讲到。\n\n浏览器的Event Loop就说到这里，下面我们看一下NodeJS中的Event Loop，它更复杂一些，机制也不太一样。\n\n## NodeJS中的Event Loop\nNodeJS的Event Loop中，执行宏队列的回调任务有6个阶段，如下图：\n\n![image](eventloop2.png)\n\n各个阶段执行的任务如下：\n - **timers阶段**：这个阶段执行setTimeout和setInterval预定的callback\n - **I/O callback阶段**：执行除了close事件的callbacks、被timers设定的callbacks、setImmediate()设定的callbacks这些之外的callbacks\n - **idle, prepare阶段**：仅node内部使用\n - **poll阶段**：获取新的I/O事件，适当的条件下node将阻塞在这里\n - **check阶段**：执行setImmediate()设定的callbacks\n - **close callbacks阶段**：执行socket.on('close', ....)这些callbacks\n\n#### NodeJS中宏队列主要有4个\n由上面的介绍可以看到，回调事件主要位于4个macrotask queue中：\n1. Timers Queue\n2. IO Callbacks Queue\n3. Check Queue\n4. Close Callbacks Queue\n\n这4个都属于宏队列，但是在浏览器中，可以认为只有一个宏队列，所有的macrotask都会被加到这一个宏队列中，但是在NodeJS中，不同的macrotask会被放置在不同的宏队列中。\n\n#### NodeJS中微队列主要有2个：\n1. Next Tick Queue：是放置process.nextTick(callback)的回调任务的\n2. Other Micro Queue：放置其他microtask，比如Promise等\n\n在浏览器中，也可以认为只有一个微队列，所有的microtask都会被加到这一个微队列中，但是在NodeJS中，不同的microtask会被放置在不同的微队列中。\n\n具体可以通过下图加深一下理解：\n\n![image](eventloop3.png)\n\n大体解释一下NodeJS的Event Loop过程：\n\n1. 执行全局Script的同步代码\n2. 执行microtask微任务，先执行所有Next Tick Queue中的所有任务，再执行Other Microtask Queue中的所有任务\n3. 开始执行macrotask宏任务，共6个阶段，从第1个阶段开始执行相应每一个阶段macrotask中的所有任务，注意，这里是所有每个阶段宏任务队列的所有任务，在浏览器的Event Loop中是只取宏队列的第一个任务出来执行，每一个阶段的macrotask任务执行完毕后，开始执行微任务，也就是步骤2\n4. Timers Queue -> 步骤2 -> I/O Queue -> 步骤2 -> Check Queue -> 步骤2 -> Close Callback Queue -> 步骤2 -> Timers Queue ......\n5. 这就是Node的Event Loop\n\n#### 关于NodeJS的macrotask queue和microtask queue\n![image](eventloop4.png)\n\n![image](eventloop5.png)\n#### 例子\n\n```js\nconsole.log('start');\n\nsetTimeout(() => {          // callback1\n  console.log(111);\n  setTimeout(() => {        // callback2\n    console.log(222);\n  }, 0);\n  setImmediate(() => {      // callback3\n    console.log(333);\n  })\n  process.nextTick(() => {  // callback4\n    console.log(444);  \n  })\n}, 0);\n\nsetImmediate(() => {        // callback5\n  console.log(555);\n  process.nextTick(() => {  // callback6\n    console.log(666);  \n  })\n})\n\nsetTimeout(() => {          // callback7              \n  console.log(777);\n  process.nextTick(() => {  // callback8\n    console.log(888);   \n  })\n}, 0);\n\nprocess.nextTick(() => {    // callback9\n  console.log(999);  \n})\n\nconsole.log('end');\n\n```\n#### 结果\n\n```js\n// 正确答案\nstart\nend\n999\n111\n777\n444\n888\n555\n333\n666\n222\n```\n### setTimeout 对比 setImmediate\n - setTimeout(fn, 0)在Timers阶段执行，并且是在poll阶段进行判断是否达到指定的timer时间才会执行\n - setImmediate(fn)在Check阶段执行\n\n两者的执行顺序要根据当前的执行环境才能确定：\n\n\n - 如果两者都在主模块(main module)调用，那么执行先后取决于进程性能，顺序随机\n - 如果两者都不在主模块调用，即在一个I/O Circle中调用，那么setImmediate的回调永远先执行，因为会先到Check阶段\n\n### setImmediate 对比 process.nextTick\n\n - setImmediate(fn)的回调任务会插入到宏队列Check Queue中\n - process.nextTick(fn)的回调任务会插入到微队列Next Tick Queue中\n - process.nextTick(fn)调用深度有限制，上限是1000，而setImmedaite则没有\n\n\n## 总结\n1. 浏览器的Event Loop和NodeJS的Event Loop是不同的，实现机制也不一样，不要混为一谈。\n2. 浏览器可以理解成只有1个宏任务队列和1个微任务队列，先执行全局Script代码，执行完同步代码调用栈清空后，从微任务队列中依次取出所有的任务放入调用栈执行，微任务队列清空后，从宏任务队列中只取位于队首的任务放入调用栈执行，注意这里和Node的区别，只取一个，然后继续执行微队列中的所有任务，再去宏队列取一个，以此构成事件循环。\n3. NodeJS可以理解成有4个宏任务队列和2个微任务队列，但是执行宏任务时有6个阶段。先执行全局Script代码，执行完同步代码调用栈清空后，先从微任务队列Next Tick Queue中依次取出所有的任务放入调用栈中执行，再从微任务队列Other Microtask Queue中依次取出所有的任务放入调用栈中执行。Node 在新版本中，也是每个 Macrotask 执行完后，就去执行 Microtask 了，和浏览器的模型一致。\n4. MacroTask包括： setTimeout、setInterval、 setImmediate(Node)、requestAnimation(浏览器)、IO、UI rendering\n5. Microtask包括： process.nextTick(Node)、Promise、Object.observe、MutationObserver\n","source":"_posts/事件循环EventLoop.md","raw":"---\nlayout: '[post]'\ntitle: 事件循环EventLoop\ndate: 2019-10-07 11:27:31\ntags: javascript\n---\n## 什么是Event Loop\n**event loop是一个执行模型，在不同的地方有不同的实现。浏览器和NodeJS基于不同的技术实现了各自的Event Loop。**\n\n - 浏览器的Event Loop是在html5的规范中明确定义。\n - NodeJS的Event Loop是基于libuv实现的。可以参考Node的官方文档以及libuv的官方文档。\n - libuv已经对Event Loop做出了实现，而HTML5规范中只是定义了浏览器中Event Loop的模型，具体的实现留给了浏览器厂商。\n <!-- more -->\n##  宏队列和微队列\n### 宏队列\n**宏队列，macrotask，也叫tasks。**\n\n一些异步任务的回调会依次进入macro task queue，等待后续被调用，这些异步任务包括：\n- setTimeout\n- setInterval\n- setImmediate (Node独有)\n- requestAnimationFrame (浏览器独有)\n- I/O\n- UI rendering (浏览器独有)\n### 微队列\n**微队列，microtask，也叫jobs。**\n\n另一些异步任务的回调会依次进入micro task queue，等待后续被调用，这些异步任务包括：\n- process.nextTick (Node独有)\n- Promise\n- Object.observe\n- MutationObserver\n\n## 浏览器的Event Loop\n![image](eventloop1.png)\n这张图将浏览器的Event Loop完整的描述了出来，我来讲执行一个JavaScript代码的具体流程：\n\n1. 执行全局Script同步代码，这些同步代码有一些是同步语句，有一些是异步语句（比如setTimeout等）；\n2. 全局Script代码执行完毕后，调用栈Stack会清空；\n3. 从微队列microtask queue中取出位于队首的回调任务，放入调用栈Stack中执行，执行完后microtask queue长度减1；\n4. 继续取出位于队首的任务，放入调用栈Stack中执行，以此类推，直到直到把microtask queue中的所有任务都执行完毕。注意，如果在执行microtask的过程中，又产生了microtask，那么会加入到队列的末尾，也会在这个周期被调用执行；\n5. microtask queue中的所有任务都执行完毕，此时microtask queue为空队列，调用栈Stack也为空；\n6. 取出宏队列macrotask queue中位于队首的任务，放入Stack中执行；\n7. 执行完毕后，调用栈Stack为空；\n8. 重复第3-7个步骤；\n9. 重复第3-7个步骤；\n10. ...\n\n**可以看到，这就是浏览器的事件循环Event Loop**\n这里归纳3个重点：\n\n1. 宏队列macrotask一次只从队列中取一个任务执行，执行完后就去执行微任务队列中的任务；\n2. 微任务队列中所有的任务都会被依次取出来执行，知道microtask queue为空；\n3. 图中没有画UI rendering的节点，因为这个是由浏览器自行判断决定的，但是只要执行UI rendering，它的节点是在执行完所有的microtask之后，下一个macrotask之前，紧跟着执行UI render。\n\n### 例子\n#### 例1\n```js\nconsole.log(1);\n\nsetTimeout(() => {\n  console.log(2);\n  Promise.resolve().then(() => {\n    console.log(3)\n  });\n});\n\nnew Promise((resolve, reject) => {\n  console.log(4)\n  resolve(5)\n}).then((data) => {\n  console.log(data);\n})\n\nsetTimeout(() => {\n  console.log(6);\n})\n\nconsole.log(7);\n```\n#### 结果\n\n```js\n// 正确答案\n1\n4\n7\n5\n2\n3\n6\n```\n\n#### 例2\n\n```js\nconsole.log(1);\n\nsetTimeout(() => {\n  console.log(2);\n  Promise.resolve().then(() => {\n    console.log(3)\n  });\n});\n\nnew Promise((resolve, reject) => {\n  console.log(4)\n  resolve(5)\n}).then((data) => {\n  console.log(data);\n  \n  Promise.resolve().then(() => {\n    console.log(6)\n  }).then(() => {\n    console.log(7)\n    \n    setTimeout(() => {\n      console.log(8)\n    }, 0);\n  });\n})\n\nsetTimeout(() => {\n  console.log(9);\n})\n\nconsole.log(10);\n```\n#### 结果\n\n```js\n// 正确答案\n1\n4\n10\n5\n6\n7\n2\n3\n9\n8\n```\n**在执行微队列microtask queue中任务的时候，如果又产生了microtask，那么会继续添加到队列的末尾，也会在这个周期执行，直到microtask queue为空停止。\n**\n注：当然如果你在microtask中不断的产生microtask，那么其他宏任务macrotask就无法执行了，但是这个操作也不是无限的，拿NodeJS中的微任务process.nextTick()来说，它的上限是1000个，后面我们会讲到。\n\n浏览器的Event Loop就说到这里，下面我们看一下NodeJS中的Event Loop，它更复杂一些，机制也不太一样。\n\n## NodeJS中的Event Loop\nNodeJS的Event Loop中，执行宏队列的回调任务有6个阶段，如下图：\n\n![image](eventloop2.png)\n\n各个阶段执行的任务如下：\n - **timers阶段**：这个阶段执行setTimeout和setInterval预定的callback\n - **I/O callback阶段**：执行除了close事件的callbacks、被timers设定的callbacks、setImmediate()设定的callbacks这些之外的callbacks\n - **idle, prepare阶段**：仅node内部使用\n - **poll阶段**：获取新的I/O事件，适当的条件下node将阻塞在这里\n - **check阶段**：执行setImmediate()设定的callbacks\n - **close callbacks阶段**：执行socket.on('close', ....)这些callbacks\n\n#### NodeJS中宏队列主要有4个\n由上面的介绍可以看到，回调事件主要位于4个macrotask queue中：\n1. Timers Queue\n2. IO Callbacks Queue\n3. Check Queue\n4. Close Callbacks Queue\n\n这4个都属于宏队列，但是在浏览器中，可以认为只有一个宏队列，所有的macrotask都会被加到这一个宏队列中，但是在NodeJS中，不同的macrotask会被放置在不同的宏队列中。\n\n#### NodeJS中微队列主要有2个：\n1. Next Tick Queue：是放置process.nextTick(callback)的回调任务的\n2. Other Micro Queue：放置其他microtask，比如Promise等\n\n在浏览器中，也可以认为只有一个微队列，所有的microtask都会被加到这一个微队列中，但是在NodeJS中，不同的microtask会被放置在不同的微队列中。\n\n具体可以通过下图加深一下理解：\n\n![image](eventloop3.png)\n\n大体解释一下NodeJS的Event Loop过程：\n\n1. 执行全局Script的同步代码\n2. 执行microtask微任务，先执行所有Next Tick Queue中的所有任务，再执行Other Microtask Queue中的所有任务\n3. 开始执行macrotask宏任务，共6个阶段，从第1个阶段开始执行相应每一个阶段macrotask中的所有任务，注意，这里是所有每个阶段宏任务队列的所有任务，在浏览器的Event Loop中是只取宏队列的第一个任务出来执行，每一个阶段的macrotask任务执行完毕后，开始执行微任务，也就是步骤2\n4. Timers Queue -> 步骤2 -> I/O Queue -> 步骤2 -> Check Queue -> 步骤2 -> Close Callback Queue -> 步骤2 -> Timers Queue ......\n5. 这就是Node的Event Loop\n\n#### 关于NodeJS的macrotask queue和microtask queue\n![image](eventloop4.png)\n\n![image](eventloop5.png)\n#### 例子\n\n```js\nconsole.log('start');\n\nsetTimeout(() => {          // callback1\n  console.log(111);\n  setTimeout(() => {        // callback2\n    console.log(222);\n  }, 0);\n  setImmediate(() => {      // callback3\n    console.log(333);\n  })\n  process.nextTick(() => {  // callback4\n    console.log(444);  \n  })\n}, 0);\n\nsetImmediate(() => {        // callback5\n  console.log(555);\n  process.nextTick(() => {  // callback6\n    console.log(666);  \n  })\n})\n\nsetTimeout(() => {          // callback7              \n  console.log(777);\n  process.nextTick(() => {  // callback8\n    console.log(888);   \n  })\n}, 0);\n\nprocess.nextTick(() => {    // callback9\n  console.log(999);  \n})\n\nconsole.log('end');\n\n```\n#### 结果\n\n```js\n// 正确答案\nstart\nend\n999\n111\n777\n444\n888\n555\n333\n666\n222\n```\n### setTimeout 对比 setImmediate\n - setTimeout(fn, 0)在Timers阶段执行，并且是在poll阶段进行判断是否达到指定的timer时间才会执行\n - setImmediate(fn)在Check阶段执行\n\n两者的执行顺序要根据当前的执行环境才能确定：\n\n\n - 如果两者都在主模块(main module)调用，那么执行先后取决于进程性能，顺序随机\n - 如果两者都不在主模块调用，即在一个I/O Circle中调用，那么setImmediate的回调永远先执行，因为会先到Check阶段\n\n### setImmediate 对比 process.nextTick\n\n - setImmediate(fn)的回调任务会插入到宏队列Check Queue中\n - process.nextTick(fn)的回调任务会插入到微队列Next Tick Queue中\n - process.nextTick(fn)调用深度有限制，上限是1000，而setImmedaite则没有\n\n\n## 总结\n1. 浏览器的Event Loop和NodeJS的Event Loop是不同的，实现机制也不一样，不要混为一谈。\n2. 浏览器可以理解成只有1个宏任务队列和1个微任务队列，先执行全局Script代码，执行完同步代码调用栈清空后，从微任务队列中依次取出所有的任务放入调用栈执行，微任务队列清空后，从宏任务队列中只取位于队首的任务放入调用栈执行，注意这里和Node的区别，只取一个，然后继续执行微队列中的所有任务，再去宏队列取一个，以此构成事件循环。\n3. NodeJS可以理解成有4个宏任务队列和2个微任务队列，但是执行宏任务时有6个阶段。先执行全局Script代码，执行完同步代码调用栈清空后，先从微任务队列Next Tick Queue中依次取出所有的任务放入调用栈中执行，再从微任务队列Other Microtask Queue中依次取出所有的任务放入调用栈中执行。Node 在新版本中，也是每个 Macrotask 执行完后，就去执行 Microtask 了，和浏览器的模型一致。\n4. MacroTask包括： setTimeout、setInterval、 setImmediate(Node)、requestAnimation(浏览器)、IO、UI rendering\n5. Microtask包括： process.nextTick(Node)、Promise、Object.observe、MutationObserver\n","slug":"事件循环EventLoop","published":1,"updated":"2020-04-30T03:28:58.000Z","comments":1,"photos":[],"link":"","_id":"ck9v62x7p0013qqs6hr9j4pb3","content":"<h2 id=\"什么是Event-Loop\"><a href=\"#什么是Event-Loop\" class=\"headerlink\" title=\"什么是Event Loop\"></a>什么是Event Loop</h2><p><strong>event loop是一个执行模型，在不同的地方有不同的实现。浏览器和NodeJS基于不同的技术实现了各自的Event Loop。</strong></p>\n<ul>\n<li>浏览器的Event Loop是在html5的规范中明确定义。</li>\n<li>NodeJS的Event Loop是基于libuv实现的。可以参考Node的官方文档以及libuv的官方文档。</li>\n<li>libuv已经对Event Loop做出了实现，而HTML5规范中只是定义了浏览器中Event Loop的模型，具体的实现留给了浏览器厂商。<a id=\"more\"></a>\n<h2 id=\"宏队列和微队列\"><a href=\"#宏队列和微队列\" class=\"headerlink\" title=\"宏队列和微队列\"></a>宏队列和微队列</h2><h3 id=\"宏队列\"><a href=\"#宏队列\" class=\"headerlink\" title=\"宏队列\"></a>宏队列</h3><strong>宏队列，macrotask，也叫tasks。</strong></li>\n</ul>\n<p>一些异步任务的回调会依次进入macro task queue，等待后续被调用，这些异步任务包括：</p>\n<ul>\n<li>setTimeout</li>\n<li>setInterval</li>\n<li>setImmediate (Node独有)</li>\n<li>requestAnimationFrame (浏览器独有)</li>\n<li>I/O</li>\n<li>UI rendering (浏览器独有)<h3 id=\"微队列\"><a href=\"#微队列\" class=\"headerlink\" title=\"微队列\"></a>微队列</h3></li>\n</ul>\n<p><strong>微队列，microtask，也叫jobs。</strong></p>\n<p>另一些异步任务的回调会依次进入micro task queue，等待后续被调用，这些异步任务包括：</p>\n<ul>\n<li>process.nextTick (Node独有)</li>\n<li>Promise</li>\n<li>Object.observe</li>\n<li>MutationObserver</li>\n</ul>\n<h2 id=\"浏览器的Event-Loop\"><a href=\"#浏览器的Event-Loop\" class=\"headerlink\" title=\"浏览器的Event Loop\"></a>浏览器的Event Loop</h2><p><img src=\"/2019/10/07/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AFEventLoop/eventloop1.png\" alt=\"image\"><br>这张图将浏览器的Event Loop完整的描述了出来，我来讲执行一个JavaScript代码的具体流程：</p>\n<ol>\n<li>执行全局Script同步代码，这些同步代码有一些是同步语句，有一些是异步语句（比如setTimeout等）；</li>\n<li>全局Script代码执行完毕后，调用栈Stack会清空；</li>\n<li>从微队列microtask queue中取出位于队首的回调任务，放入调用栈Stack中执行，执行完后microtask queue长度减1；</li>\n<li>继续取出位于队首的任务，放入调用栈Stack中执行，以此类推，直到直到把microtask queue中的所有任务都执行完毕。注意，如果在执行microtask的过程中，又产生了microtask，那么会加入到队列的末尾，也会在这个周期被调用执行；</li>\n<li>microtask queue中的所有任务都执行完毕，此时microtask queue为空队列，调用栈Stack也为空；</li>\n<li>取出宏队列macrotask queue中位于队首的任务，放入Stack中执行；</li>\n<li>执行完毕后，调用栈Stack为空；</li>\n<li>重复第3-7个步骤；</li>\n<li>重复第3-7个步骤；</li>\n<li>…</li>\n</ol>\n<p><strong>可以看到，这就是浏览器的事件循环Event Loop</strong><br>这里归纳3个重点：</p>\n<ol>\n<li>宏队列macrotask一次只从队列中取一个任务执行，执行完后就去执行微任务队列中的任务；</li>\n<li>微任务队列中所有的任务都会被依次取出来执行，知道microtask queue为空；</li>\n<li>图中没有画UI rendering的节点，因为这个是由浏览器自行判断决定的，但是只要执行UI rendering，它的节点是在执行完所有的microtask之后，下一个macrotask之前，紧跟着执行UI render。</li>\n</ol>\n<h3 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h3><h4 id=\"例1\"><a href=\"#例1\" class=\"headerlink\" title=\"例1\"></a>例1</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</span><br><span class=\"line\">  <span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>)</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>)</span><br><span class=\"line\">  resolve(<span class=\"number\">5</span>)</span><br><span class=\"line\">&#125;).then(<span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">6</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">7</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 正确答案</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">6</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"例2\"><a href=\"#例2\" class=\"headerlink\" title=\"例2\"></a>例2</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</span><br><span class=\"line\">  <span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>)</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>)</span><br><span class=\"line\">  resolve(<span class=\"number\">5</span>)</span><br><span class=\"line\">&#125;).then(<span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">6</span>)</span><br><span class=\"line\">  &#125;).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">7</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"number\">8</span>)</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">9</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"结果-1\"><a href=\"#结果-1\" class=\"headerlink\" title=\"结果\"></a>结果</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 正确答案</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">9</span></span><br><span class=\"line\"><span class=\"number\">8</span></span><br></pre></td></tr></table></figure>\n<p>*<em>在执行微队列microtask queue中任务的时候，如果又产生了microtask，那么会继续添加到队列的末尾，也会在这个周期执行，直到microtask queue为空停止。<br>*</em><br>注：当然如果你在microtask中不断的产生microtask，那么其他宏任务macrotask就无法执行了，但是这个操作也不是无限的，拿NodeJS中的微任务process.nextTick()来说，它的上限是1000个，后面我们会讲到。</p>\n<p>浏览器的Event Loop就说到这里，下面我们看一下NodeJS中的Event Loop，它更复杂一些，机制也不太一样。</p>\n<h2 id=\"NodeJS中的Event-Loop\"><a href=\"#NodeJS中的Event-Loop\" class=\"headerlink\" title=\"NodeJS中的Event Loop\"></a>NodeJS中的Event Loop</h2><p>NodeJS的Event Loop中，执行宏队列的回调任务有6个阶段，如下图：</p>\n<p><img src=\"/2019/10/07/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AFEventLoop/eventloop2.png\" alt=\"image\"></p>\n<p>各个阶段执行的任务如下：</p>\n<ul>\n<li><strong>timers阶段</strong>：这个阶段执行setTimeout和setInterval预定的callback</li>\n<li><strong>I/O callback阶段</strong>：执行除了close事件的callbacks、被timers设定的callbacks、setImmediate()设定的callbacks这些之外的callbacks</li>\n<li><strong>idle, prepare阶段</strong>：仅node内部使用</li>\n<li><strong>poll阶段</strong>：获取新的I/O事件，适当的条件下node将阻塞在这里</li>\n<li><strong>check阶段</strong>：执行setImmediate()设定的callbacks</li>\n<li><strong>close callbacks阶段</strong>：执行socket.on(‘close’, ….)这些callbacks</li>\n</ul>\n<h4 id=\"NodeJS中宏队列主要有4个\"><a href=\"#NodeJS中宏队列主要有4个\" class=\"headerlink\" title=\"NodeJS中宏队列主要有4个\"></a>NodeJS中宏队列主要有4个</h4><p>由上面的介绍可以看到，回调事件主要位于4个macrotask queue中：</p>\n<ol>\n<li>Timers Queue</li>\n<li>IO Callbacks Queue</li>\n<li>Check Queue</li>\n<li>Close Callbacks Queue</li>\n</ol>\n<p>这4个都属于宏队列，但是在浏览器中，可以认为只有一个宏队列，所有的macrotask都会被加到这一个宏队列中，但是在NodeJS中，不同的macrotask会被放置在不同的宏队列中。</p>\n<h4 id=\"NodeJS中微队列主要有2个：\"><a href=\"#NodeJS中微队列主要有2个：\" class=\"headerlink\" title=\"NodeJS中微队列主要有2个：\"></a>NodeJS中微队列主要有2个：</h4><ol>\n<li>Next Tick Queue：是放置process.nextTick(callback)的回调任务的</li>\n<li>Other Micro Queue：放置其他microtask，比如Promise等</li>\n</ol>\n<p>在浏览器中，也可以认为只有一个微队列，所有的microtask都会被加到这一个微队列中，但是在NodeJS中，不同的microtask会被放置在不同的微队列中。</p>\n<p>具体可以通过下图加深一下理解：</p>\n<p><img src=\"/2019/10/07/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AFEventLoop/eventloop3.png\" alt=\"image\"></p>\n<p>大体解释一下NodeJS的Event Loop过程：</p>\n<ol>\n<li>执行全局Script的同步代码</li>\n<li>执行microtask微任务，先执行所有Next Tick Queue中的所有任务，再执行Other Microtask Queue中的所有任务</li>\n<li>开始执行macrotask宏任务，共6个阶段，从第1个阶段开始执行相应每一个阶段macrotask中的所有任务，注意，这里是所有每个阶段宏任务队列的所有任务，在浏览器的Event Loop中是只取宏队列的第一个任务出来执行，每一个阶段的macrotask任务执行完毕后，开始执行微任务，也就是步骤2</li>\n<li>Timers Queue -&gt; 步骤2 -&gt; I/O Queue -&gt; 步骤2 -&gt; Check Queue -&gt; 步骤2 -&gt; Close Callback Queue -&gt; 步骤2 -&gt; Timers Queue ……</li>\n<li>这就是Node的Event Loop</li>\n</ol>\n<h4 id=\"关于NodeJS的macrotask-queue和microtask-queue\"><a href=\"#关于NodeJS的macrotask-queue和microtask-queue\" class=\"headerlink\" title=\"关于NodeJS的macrotask queue和microtask queue\"></a>关于NodeJS的macrotask queue和microtask queue</h4><p><img src=\"/2019/10/07/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AFEventLoop/eventloop4.png\" alt=\"image\"></p>\n<p><img src=\"/2019/10/07/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AFEventLoop/eventloop5.png\" alt=\"image\"></p>\n<h4 id=\"例子-1\"><a href=\"#例子-1\" class=\"headerlink\" title=\"例子\"></a>例子</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'start'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;          <span class=\"comment\">// callback1</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">111</span>);</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;        <span class=\"comment\">// callback2</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">222</span>);</span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">  setImmediate(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;      <span class=\"comment\">// callback3</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">333</span>);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  process.nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;  <span class=\"comment\">// callback4</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">444</span>);  </span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">setImmediate(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;        <span class=\"comment\">// callback5</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">555</span>);</span><br><span class=\"line\">  process.nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;  <span class=\"comment\">// callback6</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">666</span>);  </span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;          <span class=\"comment\">// callback7              </span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">777</span>);</span><br><span class=\"line\">  process.nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;  <span class=\"comment\">// callback8</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">888</span>);   </span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">process.nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;    <span class=\"comment\">// callback9</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">999</span>);  </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'end'</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"结果-2\"><a href=\"#结果-2\" class=\"headerlink\" title=\"结果\"></a>结果</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 正确答案</span></span><br><span class=\"line\">start</span><br><span class=\"line\">end</span><br><span class=\"line\"><span class=\"number\">999</span></span><br><span class=\"line\"><span class=\"number\">111</span></span><br><span class=\"line\"><span class=\"number\">777</span></span><br><span class=\"line\"><span class=\"number\">444</span></span><br><span class=\"line\"><span class=\"number\">888</span></span><br><span class=\"line\"><span class=\"number\">555</span></span><br><span class=\"line\"><span class=\"number\">333</span></span><br><span class=\"line\"><span class=\"number\">666</span></span><br><span class=\"line\"><span class=\"number\">222</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"setTimeout-对比-setImmediate\"><a href=\"#setTimeout-对比-setImmediate\" class=\"headerlink\" title=\"setTimeout 对比 setImmediate\"></a>setTimeout 对比 setImmediate</h3><ul>\n<li>setTimeout(fn, 0)在Timers阶段执行，并且是在poll阶段进行判断是否达到指定的timer时间才会执行</li>\n<li>setImmediate(fn)在Check阶段执行</li>\n</ul>\n<p>两者的执行顺序要根据当前的执行环境才能确定：</p>\n<ul>\n<li>如果两者都在主模块(main module)调用，那么执行先后取决于进程性能，顺序随机</li>\n<li>如果两者都不在主模块调用，即在一个I/O Circle中调用，那么setImmediate的回调永远先执行，因为会先到Check阶段</li>\n</ul>\n<h3 id=\"setImmediate-对比-process-nextTick\"><a href=\"#setImmediate-对比-process-nextTick\" class=\"headerlink\" title=\"setImmediate 对比 process.nextTick\"></a>setImmediate 对比 process.nextTick</h3><ul>\n<li>setImmediate(fn)的回调任务会插入到宏队列Check Queue中</li>\n<li>process.nextTick(fn)的回调任务会插入到微队列Next Tick Queue中</li>\n<li>process.nextTick(fn)调用深度有限制，上限是1000，而setImmedaite则没有</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ol>\n<li>浏览器的Event Loop和NodeJS的Event Loop是不同的，实现机制也不一样，不要混为一谈。</li>\n<li>浏览器可以理解成只有1个宏任务队列和1个微任务队列，先执行全局Script代码，执行完同步代码调用栈清空后，从微任务队列中依次取出所有的任务放入调用栈执行，微任务队列清空后，从宏任务队列中只取位于队首的任务放入调用栈执行，注意这里和Node的区别，只取一个，然后继续执行微队列中的所有任务，再去宏队列取一个，以此构成事件循环。</li>\n<li>NodeJS可以理解成有4个宏任务队列和2个微任务队列，但是执行宏任务时有6个阶段。先执行全局Script代码，执行完同步代码调用栈清空后，先从微任务队列Next Tick Queue中依次取出所有的任务放入调用栈中执行，再从微任务队列Other Microtask Queue中依次取出所有的任务放入调用栈中执行。Node 在新版本中，也是每个 Macrotask 执行完后，就去执行 Microtask 了，和浏览器的模型一致。</li>\n<li>MacroTask包括： setTimeout、setInterval、 setImmediate(Node)、requestAnimation(浏览器)、IO、UI rendering</li>\n<li>Microtask包括： process.nextTick(Node)、Promise、Object.observe、MutationObserver</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h2 id=\"什么是Event-Loop\"><a href=\"#什么是Event-Loop\" class=\"headerlink\" title=\"什么是Event Loop\"></a>什么是Event Loop</h2><p><strong>event loop是一个执行模型，在不同的地方有不同的实现。浏览器和NodeJS基于不同的技术实现了各自的Event Loop。</strong></p>\n<ul>\n<li>浏览器的Event Loop是在html5的规范中明确定义。</li>\n<li>NodeJS的Event Loop是基于libuv实现的。可以参考Node的官方文档以及libuv的官方文档。</li>\n<li>libuv已经对Event Loop做出了实现，而HTML5规范中只是定义了浏览器中Event Loop的模型，具体的实现留给了浏览器厂商。</li></ul>","more":"<h2 id=\"宏队列和微队列\"><a href=\"#宏队列和微队列\" class=\"headerlink\" title=\"宏队列和微队列\"></a>宏队列和微队列</h2><h3 id=\"宏队列\"><a href=\"#宏队列\" class=\"headerlink\" title=\"宏队列\"></a>宏队列</h3><strong>宏队列，macrotask，也叫tasks。</strong>\n\n<p>一些异步任务的回调会依次进入macro task queue，等待后续被调用，这些异步任务包括：</p>\n<ul>\n<li>setTimeout</li>\n<li>setInterval</li>\n<li>setImmediate (Node独有)</li>\n<li>requestAnimationFrame (浏览器独有)</li>\n<li>I/O</li>\n<li>UI rendering (浏览器独有)<h3 id=\"微队列\"><a href=\"#微队列\" class=\"headerlink\" title=\"微队列\"></a>微队列</h3></li>\n</ul>\n<p><strong>微队列，microtask，也叫jobs。</strong></p>\n<p>另一些异步任务的回调会依次进入micro task queue，等待后续被调用，这些异步任务包括：</p>\n<ul>\n<li>process.nextTick (Node独有)</li>\n<li>Promise</li>\n<li>Object.observe</li>\n<li>MutationObserver</li>\n</ul>\n<h2 id=\"浏览器的Event-Loop\"><a href=\"#浏览器的Event-Loop\" class=\"headerlink\" title=\"浏览器的Event Loop\"></a>浏览器的Event Loop</h2><p><img src=\"/2019/10/07/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AFEventLoop/eventloop1.png\" alt=\"image\"><br>这张图将浏览器的Event Loop完整的描述了出来，我来讲执行一个JavaScript代码的具体流程：</p>\n<ol>\n<li>执行全局Script同步代码，这些同步代码有一些是同步语句，有一些是异步语句（比如setTimeout等）；</li>\n<li>全局Script代码执行完毕后，调用栈Stack会清空；</li>\n<li>从微队列microtask queue中取出位于队首的回调任务，放入调用栈Stack中执行，执行完后microtask queue长度减1；</li>\n<li>继续取出位于队首的任务，放入调用栈Stack中执行，以此类推，直到直到把microtask queue中的所有任务都执行完毕。注意，如果在执行microtask的过程中，又产生了microtask，那么会加入到队列的末尾，也会在这个周期被调用执行；</li>\n<li>microtask queue中的所有任务都执行完毕，此时microtask queue为空队列，调用栈Stack也为空；</li>\n<li>取出宏队列macrotask queue中位于队首的任务，放入Stack中执行；</li>\n<li>执行完毕后，调用栈Stack为空；</li>\n<li>重复第3-7个步骤；</li>\n<li>重复第3-7个步骤；</li>\n<li>…</li>\n</ol>\n<p><strong>可以看到，这就是浏览器的事件循环Event Loop</strong><br>这里归纳3个重点：</p>\n<ol>\n<li>宏队列macrotask一次只从队列中取一个任务执行，执行完后就去执行微任务队列中的任务；</li>\n<li>微任务队列中所有的任务都会被依次取出来执行，知道microtask queue为空；</li>\n<li>图中没有画UI rendering的节点，因为这个是由浏览器自行判断决定的，但是只要执行UI rendering，它的节点是在执行完所有的microtask之后，下一个macrotask之前，紧跟着执行UI render。</li>\n</ol>\n<h3 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h3><h4 id=\"例1\"><a href=\"#例1\" class=\"headerlink\" title=\"例1\"></a>例1</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</span><br><span class=\"line\">  <span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>)</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>)</span><br><span class=\"line\">  resolve(<span class=\"number\">5</span>)</span><br><span class=\"line\">&#125;).then(<span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">6</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">7</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 正确答案</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">6</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"例2\"><a href=\"#例2\" class=\"headerlink\" title=\"例2\"></a>例2</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</span><br><span class=\"line\">  <span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>)</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>)</span><br><span class=\"line\">  resolve(<span class=\"number\">5</span>)</span><br><span class=\"line\">&#125;).then(<span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">6</span>)</span><br><span class=\"line\">  &#125;).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">7</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"number\">8</span>)</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">9</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"结果-1\"><a href=\"#结果-1\" class=\"headerlink\" title=\"结果\"></a>结果</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 正确答案</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">9</span></span><br><span class=\"line\"><span class=\"number\">8</span></span><br></pre></td></tr></table></figure>\n<p>*<em>在执行微队列microtask queue中任务的时候，如果又产生了microtask，那么会继续添加到队列的末尾，也会在这个周期执行，直到microtask queue为空停止。<br>*</em><br>注：当然如果你在microtask中不断的产生microtask，那么其他宏任务macrotask就无法执行了，但是这个操作也不是无限的，拿NodeJS中的微任务process.nextTick()来说，它的上限是1000个，后面我们会讲到。</p>\n<p>浏览器的Event Loop就说到这里，下面我们看一下NodeJS中的Event Loop，它更复杂一些，机制也不太一样。</p>\n<h2 id=\"NodeJS中的Event-Loop\"><a href=\"#NodeJS中的Event-Loop\" class=\"headerlink\" title=\"NodeJS中的Event Loop\"></a>NodeJS中的Event Loop</h2><p>NodeJS的Event Loop中，执行宏队列的回调任务有6个阶段，如下图：</p>\n<p><img src=\"/2019/10/07/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AFEventLoop/eventloop2.png\" alt=\"image\"></p>\n<p>各个阶段执行的任务如下：</p>\n<ul>\n<li><strong>timers阶段</strong>：这个阶段执行setTimeout和setInterval预定的callback</li>\n<li><strong>I/O callback阶段</strong>：执行除了close事件的callbacks、被timers设定的callbacks、setImmediate()设定的callbacks这些之外的callbacks</li>\n<li><strong>idle, prepare阶段</strong>：仅node内部使用</li>\n<li><strong>poll阶段</strong>：获取新的I/O事件，适当的条件下node将阻塞在这里</li>\n<li><strong>check阶段</strong>：执行setImmediate()设定的callbacks</li>\n<li><strong>close callbacks阶段</strong>：执行socket.on(‘close’, ….)这些callbacks</li>\n</ul>\n<h4 id=\"NodeJS中宏队列主要有4个\"><a href=\"#NodeJS中宏队列主要有4个\" class=\"headerlink\" title=\"NodeJS中宏队列主要有4个\"></a>NodeJS中宏队列主要有4个</h4><p>由上面的介绍可以看到，回调事件主要位于4个macrotask queue中：</p>\n<ol>\n<li>Timers Queue</li>\n<li>IO Callbacks Queue</li>\n<li>Check Queue</li>\n<li>Close Callbacks Queue</li>\n</ol>\n<p>这4个都属于宏队列，但是在浏览器中，可以认为只有一个宏队列，所有的macrotask都会被加到这一个宏队列中，但是在NodeJS中，不同的macrotask会被放置在不同的宏队列中。</p>\n<h4 id=\"NodeJS中微队列主要有2个：\"><a href=\"#NodeJS中微队列主要有2个：\" class=\"headerlink\" title=\"NodeJS中微队列主要有2个：\"></a>NodeJS中微队列主要有2个：</h4><ol>\n<li>Next Tick Queue：是放置process.nextTick(callback)的回调任务的</li>\n<li>Other Micro Queue：放置其他microtask，比如Promise等</li>\n</ol>\n<p>在浏览器中，也可以认为只有一个微队列，所有的microtask都会被加到这一个微队列中，但是在NodeJS中，不同的microtask会被放置在不同的微队列中。</p>\n<p>具体可以通过下图加深一下理解：</p>\n<p><img src=\"/2019/10/07/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AFEventLoop/eventloop3.png\" alt=\"image\"></p>\n<p>大体解释一下NodeJS的Event Loop过程：</p>\n<ol>\n<li>执行全局Script的同步代码</li>\n<li>执行microtask微任务，先执行所有Next Tick Queue中的所有任务，再执行Other Microtask Queue中的所有任务</li>\n<li>开始执行macrotask宏任务，共6个阶段，从第1个阶段开始执行相应每一个阶段macrotask中的所有任务，注意，这里是所有每个阶段宏任务队列的所有任务，在浏览器的Event Loop中是只取宏队列的第一个任务出来执行，每一个阶段的macrotask任务执行完毕后，开始执行微任务，也就是步骤2</li>\n<li>Timers Queue -&gt; 步骤2 -&gt; I/O Queue -&gt; 步骤2 -&gt; Check Queue -&gt; 步骤2 -&gt; Close Callback Queue -&gt; 步骤2 -&gt; Timers Queue ……</li>\n<li>这就是Node的Event Loop</li>\n</ol>\n<h4 id=\"关于NodeJS的macrotask-queue和microtask-queue\"><a href=\"#关于NodeJS的macrotask-queue和microtask-queue\" class=\"headerlink\" title=\"关于NodeJS的macrotask queue和microtask queue\"></a>关于NodeJS的macrotask queue和microtask queue</h4><p><img src=\"/2019/10/07/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AFEventLoop/eventloop4.png\" alt=\"image\"></p>\n<p><img src=\"/2019/10/07/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AFEventLoop/eventloop5.png\" alt=\"image\"></p>\n<h4 id=\"例子-1\"><a href=\"#例子-1\" class=\"headerlink\" title=\"例子\"></a>例子</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'start'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;          <span class=\"comment\">// callback1</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">111</span>);</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;        <span class=\"comment\">// callback2</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">222</span>);</span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">  setImmediate(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;      <span class=\"comment\">// callback3</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">333</span>);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  process.nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;  <span class=\"comment\">// callback4</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">444</span>);  </span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">setImmediate(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;        <span class=\"comment\">// callback5</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">555</span>);</span><br><span class=\"line\">  process.nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;  <span class=\"comment\">// callback6</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">666</span>);  </span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;          <span class=\"comment\">// callback7              </span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">777</span>);</span><br><span class=\"line\">  process.nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;  <span class=\"comment\">// callback8</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">888</span>);   </span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">process.nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;    <span class=\"comment\">// callback9</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">999</span>);  </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'end'</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"结果-2\"><a href=\"#结果-2\" class=\"headerlink\" title=\"结果\"></a>结果</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 正确答案</span></span><br><span class=\"line\">start</span><br><span class=\"line\">end</span><br><span class=\"line\"><span class=\"number\">999</span></span><br><span class=\"line\"><span class=\"number\">111</span></span><br><span class=\"line\"><span class=\"number\">777</span></span><br><span class=\"line\"><span class=\"number\">444</span></span><br><span class=\"line\"><span class=\"number\">888</span></span><br><span class=\"line\"><span class=\"number\">555</span></span><br><span class=\"line\"><span class=\"number\">333</span></span><br><span class=\"line\"><span class=\"number\">666</span></span><br><span class=\"line\"><span class=\"number\">222</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"setTimeout-对比-setImmediate\"><a href=\"#setTimeout-对比-setImmediate\" class=\"headerlink\" title=\"setTimeout 对比 setImmediate\"></a>setTimeout 对比 setImmediate</h3><ul>\n<li>setTimeout(fn, 0)在Timers阶段执行，并且是在poll阶段进行判断是否达到指定的timer时间才会执行</li>\n<li>setImmediate(fn)在Check阶段执行</li>\n</ul>\n<p>两者的执行顺序要根据当前的执行环境才能确定：</p>\n<ul>\n<li>如果两者都在主模块(main module)调用，那么执行先后取决于进程性能，顺序随机</li>\n<li>如果两者都不在主模块调用，即在一个I/O Circle中调用，那么setImmediate的回调永远先执行，因为会先到Check阶段</li>\n</ul>\n<h3 id=\"setImmediate-对比-process-nextTick\"><a href=\"#setImmediate-对比-process-nextTick\" class=\"headerlink\" title=\"setImmediate 对比 process.nextTick\"></a>setImmediate 对比 process.nextTick</h3><ul>\n<li>setImmediate(fn)的回调任务会插入到宏队列Check Queue中</li>\n<li>process.nextTick(fn)的回调任务会插入到微队列Next Tick Queue中</li>\n<li>process.nextTick(fn)调用深度有限制，上限是1000，而setImmedaite则没有</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ol>\n<li>浏览器的Event Loop和NodeJS的Event Loop是不同的，实现机制也不一样，不要混为一谈。</li>\n<li>浏览器可以理解成只有1个宏任务队列和1个微任务队列，先执行全局Script代码，执行完同步代码调用栈清空后，从微任务队列中依次取出所有的任务放入调用栈执行，微任务队列清空后，从宏任务队列中只取位于队首的任务放入调用栈执行，注意这里和Node的区别，只取一个，然后继续执行微队列中的所有任务，再去宏队列取一个，以此构成事件循环。</li>\n<li>NodeJS可以理解成有4个宏任务队列和2个微任务队列，但是执行宏任务时有6个阶段。先执行全局Script代码，执行完同步代码调用栈清空后，先从微任务队列Next Tick Queue中依次取出所有的任务放入调用栈中执行，再从微任务队列Other Microtask Queue中依次取出所有的任务放入调用栈中执行。Node 在新版本中，也是每个 Macrotask 执行完后，就去执行 Microtask 了，和浏览器的模型一致。</li>\n<li>MacroTask包括： setTimeout、setInterval、 setImmediate(Node)、requestAnimation(浏览器)、IO、UI rendering</li>\n<li>Microtask包括： process.nextTick(Node)、Promise、Object.observe、MutationObserver</li>\n</ol>"},{"layout":"[post]","title":"函数的防抖和节流","date":"2019-04-07T07:13:43.000Z","_content":"## 什么是防抖？什么是节流？\n### 防抖（debounce）\n> **当持续触发事件时，一定时间段内没有再触发事件，事件处理函数才会执行一次，如果设定的时间到来之前，又一次触发了事件，就重新开始延时。**\n\n### 节流（throttle）\n> **当持续触发事件时，保证一定时间段内只调用一次事件处理函数。**\n\n<!-- more -->\n## 防抖和节流的应用场景\n在前端开发的过程中，我们经常会需要绑定一些持续触发的事件，如 resize、scroll、mousemove 等等，但有些时候我们并不希望在事件持续触发的过程中那么频繁地去执行函数。\n\n### 防抖\n\n**所谓防抖，就是指触发事件后在 n 秒（或毫秒）内函数只能执行一次，如果在 n 秒（或毫秒）内又触发了事件，则会重新计算函数执行时间。**\n\n比如我们进行实时的搜索功能、对用户输入框进行监测，对用户的滚动条进行监测等等。\n\n### 节流\n**所谓节流，就是指连续触发事件但是在 n 秒中只执行一次函数。**\n\n比如我们在做搜索输入时，用户连续点击多次搜索按钮，我们使用节流的方式。\n\n## 防抖和节流的实现\n### 防抖\n防抖可以分为两种，一种是延时、一种是立即执行。\n\n#### 延时版\n\n```js\nfunction debounce(func, wait) {\n    let timeout;\n    return function () {\n        let context = this;\n        let args = arguments;\n\n        if (timeout) clearTimeout(timeout);\n        \n        timeout = setTimeout(() => {\n            func.apply(context, args)\n        }, wait);\n    }\n}\n```\n#### 立即执行版\n\n```js\nfunction debounce(func,wait) {\n    let timeout;\n    return function () {\n        let context = this;\n        let args = arguments;\n\n        if (timeout) clearTimeout(timeout);\n\n        let callNow = !timeout;\n        timeout = setTimeout(() => {\n            timeout = null;\n        }, wait)\n\n        if (callNow) func.apply(context, args)\n    }\n}\n```\n\n\n**二者的区别在于，前者在延时n秒后执行，后者是立即执行，但是在n秒后才能再次执行。**\n\n#### 延时版和立即执行版结合\n\n```js\n/**\n * @desc 函数防抖\n * @param func 函数\n * @param wait 延迟执行毫秒数\n * @param immediate true 表立即执行，false 表非立即执行\n */\n\nfunction debounce(func,wait,immediate) {\n    let timeout;\n\n    return function () {\n        let context = this;\n        let args = arguments;\n\n        if (timeout) clearTimeout(timeout);\n        if (immediate) {\n            var callNow = !timeout;\n            timeout = setTimeout(() => {\n                timeout = null;\n            }, wait)\n            if (callNow) func.apply(context, args)\n        }\n        else {\n            timeout = setTimeout(function(){\n                func.apply(context, args)\n            }, wait);\n        }\n    }\n}\n```\n**这个方法可以作为公用的服务实现防抖。**\n\n### 节流\n节流也可以分为两种，一种是时间戳版，一种是定时器版。\n#### 时间戳\n\n```js\nfunction throttle(func, wait) {\n    let previous = 0;\n    return function() {\n        let now = Date.now();\n        let context = this;\n        let args = arguments;\n        if (now - previous > wait) {\n            func.apply(context, args);\n            previous = now;\n        }\n    }\n}\n```\n#### 定时器\n\n```js\nfunction throttle(func, wait) {\n    let timeout;\n    return function() {\n        let context = this;\n        let args = arguments;\n        if (!timeout) {\n            timeout = setTimeout(() => {\n                timeout = null;\n                func.apply(context, args)\n            }, wait)\n        }\n\n    }\n}\n```\n\n\n**时间戳版和定时器版的节流函数的区别就是，时间戳版的函数触发是在时间段内开始的时候，而定时器版的函数触发是在时间段内结束的时候。**\n\n#### 结合版本\n\n```js\n/**\n * @desc 函数节流\n * @param func 函数\n * @param wait 延迟执行毫秒数\n * @param type 1 表时间戳版，2 表定时器版\n */\nfunction throttle(func, wait ,type) {\n    if(type===1){\n        let previous = 0;\n    }else if(type===2){\n        let timeout;\n    }\n    return function() {\n        let context = this;\n        let args = arguments;\n        if(type===1){\n            let now = Date.now();\n\n            if (now - previous > wait) {\n                func.apply(context, args);\n                previous = now;\n            }\n        }else if(type===2){\n            if (!timeout) {\n                timeout = setTimeout(() => {\n                    timeout = null;\n                    func.apply(context, args)\n                }, wait)\n            }\n        }\n    }\n}\n```\n","source":"_posts/函数的防抖和节流.md","raw":"---\nlayout: '[post]'\ntitle: 函数的防抖和节流\ndate: 2019-04-07 15:13:43\ntags: javascript\n---\n## 什么是防抖？什么是节流？\n### 防抖（debounce）\n> **当持续触发事件时，一定时间段内没有再触发事件，事件处理函数才会执行一次，如果设定的时间到来之前，又一次触发了事件，就重新开始延时。**\n\n### 节流（throttle）\n> **当持续触发事件时，保证一定时间段内只调用一次事件处理函数。**\n\n<!-- more -->\n## 防抖和节流的应用场景\n在前端开发的过程中，我们经常会需要绑定一些持续触发的事件，如 resize、scroll、mousemove 等等，但有些时候我们并不希望在事件持续触发的过程中那么频繁地去执行函数。\n\n### 防抖\n\n**所谓防抖，就是指触发事件后在 n 秒（或毫秒）内函数只能执行一次，如果在 n 秒（或毫秒）内又触发了事件，则会重新计算函数执行时间。**\n\n比如我们进行实时的搜索功能、对用户输入框进行监测，对用户的滚动条进行监测等等。\n\n### 节流\n**所谓节流，就是指连续触发事件但是在 n 秒中只执行一次函数。**\n\n比如我们在做搜索输入时，用户连续点击多次搜索按钮，我们使用节流的方式。\n\n## 防抖和节流的实现\n### 防抖\n防抖可以分为两种，一种是延时、一种是立即执行。\n\n#### 延时版\n\n```js\nfunction debounce(func, wait) {\n    let timeout;\n    return function () {\n        let context = this;\n        let args = arguments;\n\n        if (timeout) clearTimeout(timeout);\n        \n        timeout = setTimeout(() => {\n            func.apply(context, args)\n        }, wait);\n    }\n}\n```\n#### 立即执行版\n\n```js\nfunction debounce(func,wait) {\n    let timeout;\n    return function () {\n        let context = this;\n        let args = arguments;\n\n        if (timeout) clearTimeout(timeout);\n\n        let callNow = !timeout;\n        timeout = setTimeout(() => {\n            timeout = null;\n        }, wait)\n\n        if (callNow) func.apply(context, args)\n    }\n}\n```\n\n\n**二者的区别在于，前者在延时n秒后执行，后者是立即执行，但是在n秒后才能再次执行。**\n\n#### 延时版和立即执行版结合\n\n```js\n/**\n * @desc 函数防抖\n * @param func 函数\n * @param wait 延迟执行毫秒数\n * @param immediate true 表立即执行，false 表非立即执行\n */\n\nfunction debounce(func,wait,immediate) {\n    let timeout;\n\n    return function () {\n        let context = this;\n        let args = arguments;\n\n        if (timeout) clearTimeout(timeout);\n        if (immediate) {\n            var callNow = !timeout;\n            timeout = setTimeout(() => {\n                timeout = null;\n            }, wait)\n            if (callNow) func.apply(context, args)\n        }\n        else {\n            timeout = setTimeout(function(){\n                func.apply(context, args)\n            }, wait);\n        }\n    }\n}\n```\n**这个方法可以作为公用的服务实现防抖。**\n\n### 节流\n节流也可以分为两种，一种是时间戳版，一种是定时器版。\n#### 时间戳\n\n```js\nfunction throttle(func, wait) {\n    let previous = 0;\n    return function() {\n        let now = Date.now();\n        let context = this;\n        let args = arguments;\n        if (now - previous > wait) {\n            func.apply(context, args);\n            previous = now;\n        }\n    }\n}\n```\n#### 定时器\n\n```js\nfunction throttle(func, wait) {\n    let timeout;\n    return function() {\n        let context = this;\n        let args = arguments;\n        if (!timeout) {\n            timeout = setTimeout(() => {\n                timeout = null;\n                func.apply(context, args)\n            }, wait)\n        }\n\n    }\n}\n```\n\n\n**时间戳版和定时器版的节流函数的区别就是，时间戳版的函数触发是在时间段内开始的时候，而定时器版的函数触发是在时间段内结束的时候。**\n\n#### 结合版本\n\n```js\n/**\n * @desc 函数节流\n * @param func 函数\n * @param wait 延迟执行毫秒数\n * @param type 1 表时间戳版，2 表定时器版\n */\nfunction throttle(func, wait ,type) {\n    if(type===1){\n        let previous = 0;\n    }else if(type===2){\n        let timeout;\n    }\n    return function() {\n        let context = this;\n        let args = arguments;\n        if(type===1){\n            let now = Date.now();\n\n            if (now - previous > wait) {\n                func.apply(context, args);\n                previous = now;\n            }\n        }else if(type===2){\n            if (!timeout) {\n                timeout = setTimeout(() => {\n                    timeout = null;\n                    func.apply(context, args)\n                }, wait)\n            }\n        }\n    }\n}\n```\n","slug":"函数的防抖和节流","published":1,"updated":"2020-02-05T07:42:37.000Z","comments":1,"photos":[],"link":"","_id":"ck9v62x7q0016qqs6bzdf2vgw","content":"<h2 id=\"什么是防抖？什么是节流？\"><a href=\"#什么是防抖？什么是节流？\" class=\"headerlink\" title=\"什么是防抖？什么是节流？\"></a>什么是防抖？什么是节流？</h2><h3 id=\"防抖（debounce）\"><a href=\"#防抖（debounce）\" class=\"headerlink\" title=\"防抖（debounce）\"></a>防抖（debounce）</h3><blockquote>\n<p><strong>当持续触发事件时，一定时间段内没有再触发事件，事件处理函数才会执行一次，如果设定的时间到来之前，又一次触发了事件，就重新开始延时。</strong></p>\n</blockquote>\n<h3 id=\"节流（throttle）\"><a href=\"#节流（throttle）\" class=\"headerlink\" title=\"节流（throttle）\"></a>节流（throttle）</h3><blockquote>\n<p><strong>当持续触发事件时，保证一定时间段内只调用一次事件处理函数。</strong></p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"防抖和节流的应用场景\"><a href=\"#防抖和节流的应用场景\" class=\"headerlink\" title=\"防抖和节流的应用场景\"></a>防抖和节流的应用场景</h2><p>在前端开发的过程中，我们经常会需要绑定一些持续触发的事件，如 resize、scroll、mousemove 等等，但有些时候我们并不希望在事件持续触发的过程中那么频繁地去执行函数。</p>\n<h3 id=\"防抖\"><a href=\"#防抖\" class=\"headerlink\" title=\"防抖\"></a>防抖</h3><p><strong>所谓防抖，就是指触发事件后在 n 秒（或毫秒）内函数只能执行一次，如果在 n 秒（或毫秒）内又触发了事件，则会重新计算函数执行时间。</strong></p>\n<p>比如我们进行实时的搜索功能、对用户输入框进行监测，对用户的滚动条进行监测等等。</p>\n<h3 id=\"节流\"><a href=\"#节流\" class=\"headerlink\" title=\"节流\"></a>节流</h3><p><strong>所谓节流，就是指连续触发事件但是在 n 秒中只执行一次函数。</strong></p>\n<p>比如我们在做搜索输入时，用户连续点击多次搜索按钮，我们使用节流的方式。</p>\n<h2 id=\"防抖和节流的实现\"><a href=\"#防抖和节流的实现\" class=\"headerlink\" title=\"防抖和节流的实现\"></a>防抖和节流的实现</h2><h3 id=\"防抖-1\"><a href=\"#防抖-1\" class=\"headerlink\" title=\"防抖\"></a>防抖</h3><p>防抖可以分为两种，一种是延时、一种是立即执行。</p>\n<h4 id=\"延时版\"><a href=\"#延时版\" class=\"headerlink\" title=\"延时版\"></a>延时版</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">func, wait</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timeout;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> context = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timeout) clearTimeout(timeout);</span><br><span class=\"line\">        </span><br><span class=\"line\">        timeout = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            func.apply(context, args)</span><br><span class=\"line\">        &#125;, wait);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"立即执行版\"><a href=\"#立即执行版\" class=\"headerlink\" title=\"立即执行版\"></a>立即执行版</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">func,wait</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timeout;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> context = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timeout) clearTimeout(timeout);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> callNow = !timeout;</span><br><span class=\"line\">        timeout = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;, wait)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (callNow) func.apply(context, args)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p><strong>二者的区别在于，前者在延时n秒后执行，后者是立即执行，但是在n秒后才能再次执行。</strong></p>\n<h4 id=\"延时版和立即执行版结合\"><a href=\"#延时版和立即执行版结合\" class=\"headerlink\" title=\"延时版和立即执行版结合\"></a>延时版和立即执行版结合</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@desc </span>函数防抖</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param </span>func 函数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param </span>wait 延迟执行毫秒数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param </span>immediate true 表立即执行，false 表非立即执行</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">func,wait,immediate</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timeout;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> context = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timeout) clearTimeout(timeout);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (immediate) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> callNow = !timeout;</span><br><span class=\"line\">            timeout = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">                timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">            &#125;, wait)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (callNow) func.apply(context, args)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            timeout = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">                func.apply(context, args)</span><br><span class=\"line\">            &#125;, wait);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>这个方法可以作为公用的服务实现防抖。</strong></p>\n<h3 id=\"节流-1\"><a href=\"#节流-1\" class=\"headerlink\" title=\"节流\"></a>节流</h3><p>节流也可以分为两种，一种是时间戳版，一种是定时器版。</p>\n<h4 id=\"时间戳\"><a href=\"#时间戳\" class=\"headerlink\" title=\"时间戳\"></a>时间戳</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">throttle</span>(<span class=\"params\">func, wait</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> previous = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> now = <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\">        <span class=\"keyword\">let</span> context = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (now - previous &gt; wait) &#123;</span><br><span class=\"line\">            func.apply(context, args);</span><br><span class=\"line\">            previous = now;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"定时器\"><a href=\"#定时器\" class=\"headerlink\" title=\"定时器\"></a>定时器</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">throttle</span>(<span class=\"params\">func, wait</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timeout;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> context = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!timeout) &#123;</span><br><span class=\"line\">            timeout = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">                timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                func.apply(context, args)</span><br><span class=\"line\">            &#125;, wait)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p><strong>时间戳版和定时器版的节流函数的区别就是，时间戳版的函数触发是在时间段内开始的时候，而定时器版的函数触发是在时间段内结束的时候。</strong></p>\n<h4 id=\"结合版本\"><a href=\"#结合版本\" class=\"headerlink\" title=\"结合版本\"></a>结合版本</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@desc </span>函数节流</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param </span>func 函数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param </span>wait 延迟执行毫秒数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param </span>type 1 表时间戳版，2 表定时器版</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">throttle</span>(<span class=\"params\">func, wait ,type</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(type===<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> previous = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(type===<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> timeout;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> context = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(type===<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> now = <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (now - previous &gt; wait) &#123;</span><br><span class=\"line\">                func.apply(context, args);</span><br><span class=\"line\">                previous = now;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(type===<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!timeout) &#123;</span><br><span class=\"line\">                timeout = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">                    timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                    func.apply(context, args)</span><br><span class=\"line\">                &#125;, wait)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"什么是防抖？什么是节流？\"><a href=\"#什么是防抖？什么是节流？\" class=\"headerlink\" title=\"什么是防抖？什么是节流？\"></a>什么是防抖？什么是节流？</h2><h3 id=\"防抖（debounce）\"><a href=\"#防抖（debounce）\" class=\"headerlink\" title=\"防抖（debounce）\"></a>防抖（debounce）</h3><blockquote>\n<p><strong>当持续触发事件时，一定时间段内没有再触发事件，事件处理函数才会执行一次，如果设定的时间到来之前，又一次触发了事件，就重新开始延时。</strong></p>\n</blockquote>\n<h3 id=\"节流（throttle）\"><a href=\"#节流（throttle）\" class=\"headerlink\" title=\"节流（throttle）\"></a>节流（throttle）</h3><blockquote>\n<p><strong>当持续触发事件时，保证一定时间段内只调用一次事件处理函数。</strong></p>\n</blockquote>","more":"<h2 id=\"防抖和节流的应用场景\"><a href=\"#防抖和节流的应用场景\" class=\"headerlink\" title=\"防抖和节流的应用场景\"></a>防抖和节流的应用场景</h2><p>在前端开发的过程中，我们经常会需要绑定一些持续触发的事件，如 resize、scroll、mousemove 等等，但有些时候我们并不希望在事件持续触发的过程中那么频繁地去执行函数。</p>\n<h3 id=\"防抖\"><a href=\"#防抖\" class=\"headerlink\" title=\"防抖\"></a>防抖</h3><p><strong>所谓防抖，就是指触发事件后在 n 秒（或毫秒）内函数只能执行一次，如果在 n 秒（或毫秒）内又触发了事件，则会重新计算函数执行时间。</strong></p>\n<p>比如我们进行实时的搜索功能、对用户输入框进行监测，对用户的滚动条进行监测等等。</p>\n<h3 id=\"节流\"><a href=\"#节流\" class=\"headerlink\" title=\"节流\"></a>节流</h3><p><strong>所谓节流，就是指连续触发事件但是在 n 秒中只执行一次函数。</strong></p>\n<p>比如我们在做搜索输入时，用户连续点击多次搜索按钮，我们使用节流的方式。</p>\n<h2 id=\"防抖和节流的实现\"><a href=\"#防抖和节流的实现\" class=\"headerlink\" title=\"防抖和节流的实现\"></a>防抖和节流的实现</h2><h3 id=\"防抖-1\"><a href=\"#防抖-1\" class=\"headerlink\" title=\"防抖\"></a>防抖</h3><p>防抖可以分为两种，一种是延时、一种是立即执行。</p>\n<h4 id=\"延时版\"><a href=\"#延时版\" class=\"headerlink\" title=\"延时版\"></a>延时版</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">func, wait</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timeout;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> context = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timeout) clearTimeout(timeout);</span><br><span class=\"line\">        </span><br><span class=\"line\">        timeout = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            func.apply(context, args)</span><br><span class=\"line\">        &#125;, wait);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"立即执行版\"><a href=\"#立即执行版\" class=\"headerlink\" title=\"立即执行版\"></a>立即执行版</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">func,wait</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timeout;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> context = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timeout) clearTimeout(timeout);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> callNow = !timeout;</span><br><span class=\"line\">        timeout = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;, wait)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (callNow) func.apply(context, args)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p><strong>二者的区别在于，前者在延时n秒后执行，后者是立即执行，但是在n秒后才能再次执行。</strong></p>\n<h4 id=\"延时版和立即执行版结合\"><a href=\"#延时版和立即执行版结合\" class=\"headerlink\" title=\"延时版和立即执行版结合\"></a>延时版和立即执行版结合</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@desc </span>函数防抖</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param </span>func 函数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param </span>wait 延迟执行毫秒数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param </span>immediate true 表立即执行，false 表非立即执行</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">func,wait,immediate</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timeout;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> context = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timeout) clearTimeout(timeout);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (immediate) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> callNow = !timeout;</span><br><span class=\"line\">            timeout = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">                timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">            &#125;, wait)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (callNow) func.apply(context, args)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            timeout = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">                func.apply(context, args)</span><br><span class=\"line\">            &#125;, wait);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>这个方法可以作为公用的服务实现防抖。</strong></p>\n<h3 id=\"节流-1\"><a href=\"#节流-1\" class=\"headerlink\" title=\"节流\"></a>节流</h3><p>节流也可以分为两种，一种是时间戳版，一种是定时器版。</p>\n<h4 id=\"时间戳\"><a href=\"#时间戳\" class=\"headerlink\" title=\"时间戳\"></a>时间戳</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">throttle</span>(<span class=\"params\">func, wait</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> previous = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> now = <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\">        <span class=\"keyword\">let</span> context = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (now - previous &gt; wait) &#123;</span><br><span class=\"line\">            func.apply(context, args);</span><br><span class=\"line\">            previous = now;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"定时器\"><a href=\"#定时器\" class=\"headerlink\" title=\"定时器\"></a>定时器</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">throttle</span>(<span class=\"params\">func, wait</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timeout;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> context = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!timeout) &#123;</span><br><span class=\"line\">            timeout = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">                timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                func.apply(context, args)</span><br><span class=\"line\">            &#125;, wait)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p><strong>时间戳版和定时器版的节流函数的区别就是，时间戳版的函数触发是在时间段内开始的时候，而定时器版的函数触发是在时间段内结束的时候。</strong></p>\n<h4 id=\"结合版本\"><a href=\"#结合版本\" class=\"headerlink\" title=\"结合版本\"></a>结合版本</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@desc </span>函数节流</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param </span>func 函数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param </span>wait 延迟执行毫秒数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param </span>type 1 表时间戳版，2 表定时器版</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">throttle</span>(<span class=\"params\">func, wait ,type</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(type===<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> previous = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(type===<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> timeout;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> context = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(type===<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> now = <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (now - previous &gt; wait) &#123;</span><br><span class=\"line\">                func.apply(context, args);</span><br><span class=\"line\">                previous = now;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(type===<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!timeout) &#123;</span><br><span class=\"line\">                timeout = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">                    timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                    func.apply(context, args)</span><br><span class=\"line\">                &#125;, wait)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"layout":"[post]","title":"初次使用hexo","date":"2019-01-14T01:57:01.000Z","_content":"\n偶然间发现了hexo这个博客搭建工具，于是决定将使用多年的云笔记的内容搬迁至这个博客上，分享我的搬迁经历以及踩过的坑吧~。\n<!-- more -->\n\n## 我们开始吧\n\n### 新建仓库\n\n在github新建仓库，如果想要部署在github上，要仓库名为 ==<user-name>.github.io== 而不是user-name ，其中 ==<user-name>== 是你 ==github== 的昵称，要是问为什么，都是眼泪的教训。\n### 安装hexo\n\n```\nnpm install -g hexo-cli\n```\n或者\n```linux\nnpm install hexo\n```\n### 初始化项目\n初始化命令\n```\nhexo init\n```\n运行\n```\nhexo server\n```\n大功告成，访问 ==localhost:4000== 我们就能看到建的博客的效果了！\n### 将Hexo部署到GitHub Pages上\n1. 将[Travis CI](https://github.com/marketplace/travis-ci) 添加到你的 GitHub 账户中。\n2. 前往 GitHub 的 [Applications settings](https://github.com/settings/installations)，配置 Travis CI 权限，使其能够访问你的 repository。\n3. 你应该会被重定向到 Travis CI 的页面。如果没有，请 [手动前往](https://travis-ci.com/)。\n4. 在浏览器新建一个标签页，前往 GitHub [新建 Personal Access Token](https://github.com/settings/tokens) ，只勾选 repo 的权限并生成一个新的 Token。Token 生成后请复制并保存好。\n5. 回到 Travis CI，前往你的 repository 的设置页面，在 **Environment Variables** 下新建一个环境变量，**Name** 为 GH_TOKEN，**Value** 为刚才你在 GitHub 生成的 Token。确保 **DISPLAY VALUE IN BUILD LOG** 保持 **不被勾选** 避免你的 Token 泄漏。点击 Add 保存。\n6. 在你的 Hexo 站点文件夹中新建一个 ==.travis.yml== 文件：\n\n```\nsudo: false\nlanguage: node_js\nnode_js:\n  - 10 # use nodejs v10 LTS\ncache: npm\nbranches:\n  only:\n    - master # build master branch only\nscript:\n  - hexo generate # generate static files\ndeploy:\n  provider: pages\n  skip-cleanup: true\n  github-token: $GH_TOKEN\n  keep-history: true\n  on:\n    branch: master\n  local-dir: public\n```\n\n7. 将.travis.yml 推送到 repository 中。Travis CI 应该会自动开始运行，并将生成的文件推送到同一 repository 下的 gh-pages 分支下\n\n8. 在GitHub中前往你的repository 的设置页面，修改 GitHub Pages 的部署分支为 gh-pages。\n9.  完成以上步骤，我们就能在<user-name>.github.io上看到自己建设的博客了。\n### 其他配置项\n请参考[hexo文档](https://hexo.io/zh-cn/docs)。\n\n\n","source":"_posts/初尝hexo.md","raw":"---\nlayout: '[post]'\ntitle: 初次使用hexo\ndate: 2019-01-14 09:57:01\ntags: hexo\n---\n\n偶然间发现了hexo这个博客搭建工具，于是决定将使用多年的云笔记的内容搬迁至这个博客上，分享我的搬迁经历以及踩过的坑吧~。\n<!-- more -->\n\n## 我们开始吧\n\n### 新建仓库\n\n在github新建仓库，如果想要部署在github上，要仓库名为 ==<user-name>.github.io== 而不是user-name ，其中 ==<user-name>== 是你 ==github== 的昵称，要是问为什么，都是眼泪的教训。\n### 安装hexo\n\n```\nnpm install -g hexo-cli\n```\n或者\n```linux\nnpm install hexo\n```\n### 初始化项目\n初始化命令\n```\nhexo init\n```\n运行\n```\nhexo server\n```\n大功告成，访问 ==localhost:4000== 我们就能看到建的博客的效果了！\n### 将Hexo部署到GitHub Pages上\n1. 将[Travis CI](https://github.com/marketplace/travis-ci) 添加到你的 GitHub 账户中。\n2. 前往 GitHub 的 [Applications settings](https://github.com/settings/installations)，配置 Travis CI 权限，使其能够访问你的 repository。\n3. 你应该会被重定向到 Travis CI 的页面。如果没有，请 [手动前往](https://travis-ci.com/)。\n4. 在浏览器新建一个标签页，前往 GitHub [新建 Personal Access Token](https://github.com/settings/tokens) ，只勾选 repo 的权限并生成一个新的 Token。Token 生成后请复制并保存好。\n5. 回到 Travis CI，前往你的 repository 的设置页面，在 **Environment Variables** 下新建一个环境变量，**Name** 为 GH_TOKEN，**Value** 为刚才你在 GitHub 生成的 Token。确保 **DISPLAY VALUE IN BUILD LOG** 保持 **不被勾选** 避免你的 Token 泄漏。点击 Add 保存。\n6. 在你的 Hexo 站点文件夹中新建一个 ==.travis.yml== 文件：\n\n```\nsudo: false\nlanguage: node_js\nnode_js:\n  - 10 # use nodejs v10 LTS\ncache: npm\nbranches:\n  only:\n    - master # build master branch only\nscript:\n  - hexo generate # generate static files\ndeploy:\n  provider: pages\n  skip-cleanup: true\n  github-token: $GH_TOKEN\n  keep-history: true\n  on:\n    branch: master\n  local-dir: public\n```\n\n7. 将.travis.yml 推送到 repository 中。Travis CI 应该会自动开始运行，并将生成的文件推送到同一 repository 下的 gh-pages 分支下\n\n8. 在GitHub中前往你的repository 的设置页面，修改 GitHub Pages 的部署分支为 gh-pages。\n9.  完成以上步骤，我们就能在<user-name>.github.io上看到自己建设的博客了。\n### 其他配置项\n请参考[hexo文档](https://hexo.io/zh-cn/docs)。\n\n\n","slug":"初尝hexo","published":1,"updated":"2020-01-24T14:58:06.000Z","comments":1,"photos":[],"link":"","_id":"ck9v62x7u0018qqs64dojeqkh","content":"<p>偶然间发现了hexo这个博客搭建工具，于是决定将使用多年的云笔记的内容搬迁至这个博客上，分享我的搬迁经历以及踩过的坑吧~。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"我们开始吧\"><a href=\"#我们开始吧\" class=\"headerlink\" title=\"我们开始吧\"></a>我们开始吧</h2><h3 id=\"新建仓库\"><a href=\"#新建仓库\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3><p>在github新建仓库，如果想要部署在github上，要仓库名为 ==<user-name>.github.io== 而不是user-name ，其中 ==<user-name>== 是你 ==github== 的昵称，要是问为什么，都是眼泪的教训。</user-name></user-name></p>\n<h3 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo</span><br></pre></td></tr></table></figure>\n<h3 id=\"初始化项目\"><a href=\"#初始化项目\" class=\"headerlink\" title=\"初始化项目\"></a>初始化项目</h3><p>初始化命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init</span><br></pre></td></tr></table></figure>\n<p>运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure>\n<p>大功告成，访问 ==localhost:4000== 我们就能看到建的博客的效果了！</p>\n<h3 id=\"将Hexo部署到GitHub-Pages上\"><a href=\"#将Hexo部署到GitHub-Pages上\" class=\"headerlink\" title=\"将Hexo部署到GitHub Pages上\"></a>将Hexo部署到GitHub Pages上</h3><ol>\n<li>将<a href=\"https://github.com/marketplace/travis-ci\" target=\"_blank\" rel=\"noopener\">Travis CI</a> 添加到你的 GitHub 账户中。</li>\n<li>前往 GitHub 的 <a href=\"https://github.com/settings/installations\" target=\"_blank\" rel=\"noopener\">Applications settings</a>，配置 Travis CI 权限，使其能够访问你的 repository。</li>\n<li>你应该会被重定向到 Travis CI 的页面。如果没有，请 <a href=\"https://travis-ci.com/\" target=\"_blank\" rel=\"noopener\">手动前往</a>。</li>\n<li>在浏览器新建一个标签页，前往 GitHub <a href=\"https://github.com/settings/tokens\" target=\"_blank\" rel=\"noopener\">新建 Personal Access Token</a> ，只勾选 repo 的权限并生成一个新的 Token。Token 生成后请复制并保存好。</li>\n<li>回到 Travis CI，前往你的 repository 的设置页面，在 <strong>Environment Variables</strong> 下新建一个环境变量，<strong>Name</strong> 为 GH_TOKEN，<strong>Value</strong> 为刚才你在 GitHub 生成的 Token。确保 <strong>DISPLAY VALUE IN BUILD LOG</strong> 保持 <strong>不被勾选</strong> 避免你的 Token 泄漏。点击 Add 保存。</li>\n<li>在你的 Hexo 站点文件夹中新建一个 ==.travis.yml== 文件：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo: false</span><br><span class=\"line\">language: node_js</span><br><span class=\"line\">node_js:</span><br><span class=\"line\">  - 10 # use nodejs v10 LTS</span><br><span class=\"line\">cache: npm</span><br><span class=\"line\">branches:</span><br><span class=\"line\">  only:</span><br><span class=\"line\">    - master # build master branch only</span><br><span class=\"line\">script:</span><br><span class=\"line\">  - hexo generate # generate static files</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  provider: pages</span><br><span class=\"line\">  skip-cleanup: true</span><br><span class=\"line\">  github-token: $GH_TOKEN</span><br><span class=\"line\">  keep-history: true</span><br><span class=\"line\">  on:</span><br><span class=\"line\">    branch: master</span><br><span class=\"line\">  local-dir: public</span><br></pre></td></tr></table></figure>\n\n<ol start=\"7\">\n<li><p>将.travis.yml 推送到 repository 中。Travis CI 应该会自动开始运行，并将生成的文件推送到同一 repository 下的 gh-pages 分支下</p>\n</li>\n<li><p>在GitHub中前往你的repository 的设置页面，修改 GitHub Pages 的部署分支为 gh-pages。</p>\n</li>\n<li><p>完成以上步骤，我们就能在<user-name>.github.io上看到自己建设的博客了。</user-name></p>\n<h3 id=\"其他配置项\"><a href=\"#其他配置项\" class=\"headerlink\" title=\"其他配置项\"></a>其他配置项</h3><p>请参考<a href=\"https://hexo.io/zh-cn/docs\" target=\"_blank\" rel=\"noopener\">hexo文档</a>。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>偶然间发现了hexo这个博客搭建工具，于是决定将使用多年的云笔记的内容搬迁至这个博客上，分享我的搬迁经历以及踩过的坑吧~。</p>","more":"<h2 id=\"我们开始吧\"><a href=\"#我们开始吧\" class=\"headerlink\" title=\"我们开始吧\"></a>我们开始吧</h2><h3 id=\"新建仓库\"><a href=\"#新建仓库\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3><p>在github新建仓库，如果想要部署在github上，要仓库名为 ==<user-name>.github.io== 而不是user-name ，其中 ==<user-name>== 是你 ==github== 的昵称，要是问为什么，都是眼泪的教训。</user-name></user-name></p>\n<h3 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo</span><br></pre></td></tr></table></figure>\n<h3 id=\"初始化项目\"><a href=\"#初始化项目\" class=\"headerlink\" title=\"初始化项目\"></a>初始化项目</h3><p>初始化命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init</span><br></pre></td></tr></table></figure>\n<p>运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure>\n<p>大功告成，访问 ==localhost:4000== 我们就能看到建的博客的效果了！</p>\n<h3 id=\"将Hexo部署到GitHub-Pages上\"><a href=\"#将Hexo部署到GitHub-Pages上\" class=\"headerlink\" title=\"将Hexo部署到GitHub Pages上\"></a>将Hexo部署到GitHub Pages上</h3><ol>\n<li>将<a href=\"https://github.com/marketplace/travis-ci\" target=\"_blank\" rel=\"noopener\">Travis CI</a> 添加到你的 GitHub 账户中。</li>\n<li>前往 GitHub 的 <a href=\"https://github.com/settings/installations\" target=\"_blank\" rel=\"noopener\">Applications settings</a>，配置 Travis CI 权限，使其能够访问你的 repository。</li>\n<li>你应该会被重定向到 Travis CI 的页面。如果没有，请 <a href=\"https://travis-ci.com/\" target=\"_blank\" rel=\"noopener\">手动前往</a>。</li>\n<li>在浏览器新建一个标签页，前往 GitHub <a href=\"https://github.com/settings/tokens\" target=\"_blank\" rel=\"noopener\">新建 Personal Access Token</a> ，只勾选 repo 的权限并生成一个新的 Token。Token 生成后请复制并保存好。</li>\n<li>回到 Travis CI，前往你的 repository 的设置页面，在 <strong>Environment Variables</strong> 下新建一个环境变量，<strong>Name</strong> 为 GH_TOKEN，<strong>Value</strong> 为刚才你在 GitHub 生成的 Token。确保 <strong>DISPLAY VALUE IN BUILD LOG</strong> 保持 <strong>不被勾选</strong> 避免你的 Token 泄漏。点击 Add 保存。</li>\n<li>在你的 Hexo 站点文件夹中新建一个 ==.travis.yml== 文件：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo: false</span><br><span class=\"line\">language: node_js</span><br><span class=\"line\">node_js:</span><br><span class=\"line\">  - 10 # use nodejs v10 LTS</span><br><span class=\"line\">cache: npm</span><br><span class=\"line\">branches:</span><br><span class=\"line\">  only:</span><br><span class=\"line\">    - master # build master branch only</span><br><span class=\"line\">script:</span><br><span class=\"line\">  - hexo generate # generate static files</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  provider: pages</span><br><span class=\"line\">  skip-cleanup: true</span><br><span class=\"line\">  github-token: $GH_TOKEN</span><br><span class=\"line\">  keep-history: true</span><br><span class=\"line\">  on:</span><br><span class=\"line\">    branch: master</span><br><span class=\"line\">  local-dir: public</span><br></pre></td></tr></table></figure>\n\n<ol start=\"7\">\n<li><p>将.travis.yml 推送到 repository 中。Travis CI 应该会自动开始运行，并将生成的文件推送到同一 repository 下的 gh-pages 分支下</p>\n</li>\n<li><p>在GitHub中前往你的repository 的设置页面，修改 GitHub Pages 的部署分支为 gh-pages。</p>\n</li>\n<li><p>完成以上步骤，我们就能在<user-name>.github.io上看到自己建设的博客了。</user-name></p>\n<h3 id=\"其他配置项\"><a href=\"#其他配置项\" class=\"headerlink\" title=\"其他配置项\"></a>其他配置项</h3><p>请参考<a href=\"https://hexo.io/zh-cn/docs\" target=\"_blank\" rel=\"noopener\">hexo文档</a>。</p>\n</li>\n</ol>"},{"layout":"[post]","title":"前端性能优化——DNS预解析","date":"2019-02-21T08:39:49.000Z","_content":"## 什么是DNS预解析？\n我们在进行前端性能优化时，涉及到DNS方面的优化一般有两点： 一个是减少DNS的请求次数，另一个就是进行DNS预解析 。\n\nDNS 实现域名到IP的映射。通过域名访问站点，每次请求都要做DNS解析。目前每次DNS解析，通常在200ms以下。针对DNS解析耗时问题，一些浏览器通过DNS Prefetch 来提高访问的流畅性。  \n\n**DNS Prefetch** 是一种DNS 预解析技术，当浏览网页时，浏览器会在加载网页时对网页中的域名进行解析缓存，这样在单击当前网页中的连接时就无需进行DNS的解析，减少用户等待时间，提高用户体验。\n#### **DNS Prefetch，即DNS预解析。**  \n<!-- more -->\n\n## 为什么使用DNS预解析？\nDNS 作为互联网的基础协议，其解析的速度似乎很容易被网站优化人员忽视。现在大多数新浏览器已经针对DNS解析进行了优化，典型的一次DNS解析需要耗费 20-120 毫秒，减少DNS解析时间和次数是个很好的优化方式。DNS预解析 是让具有此属性的域名不需要用户点击链接就在后台解析，而域名解析和内容载入是串行的网络操作，所以这个方式能 减少用户的等待时间，提升用户体验 。\n#### DNS解析的运行顺序\n浏览器对网站第一次的域名DNS解析查找流程依次为：  \n**浏览器缓存-系统缓存-路由器缓存-ISP DNS缓存-递归搜索**  \n## 支持DNS Prefetch的浏览器\n- Chrome\n- IE:9+\n- Firefox:3.5+\n- Safari:5+\n- Edge  \n\n## 如何在网站中使用DNS预解析\n因为浏览器的html解析是顺序的，所以DNS Prefetch 应该尽量的放在网页的前面，推荐放在 <meta charset=\"UTF-8\"> 后面：  \n```html\n<meta http-equiv=\"x-dns-prefetch-control\" content=\"on\">\n<!--打开和关闭DNS预预解析-->\n<link rel=\"dns-prefetch\" href=\"//www.baidu.com\">\n<!--解析的DNS的地址-->\n```\n注：dns-prefetch需慎用，多页面重复DNS预解析会增加重复DNS查询次数。\n","source":"_posts/前端性能优化——DNS预解析.md","raw":"---\nlayout: '[post]'\ntitle: 前端性能优化——DNS预解析\ndate: 2019-02-21 16:39:49\ntags: 前端性能优化\n---\n## 什么是DNS预解析？\n我们在进行前端性能优化时，涉及到DNS方面的优化一般有两点： 一个是减少DNS的请求次数，另一个就是进行DNS预解析 。\n\nDNS 实现域名到IP的映射。通过域名访问站点，每次请求都要做DNS解析。目前每次DNS解析，通常在200ms以下。针对DNS解析耗时问题，一些浏览器通过DNS Prefetch 来提高访问的流畅性。  \n\n**DNS Prefetch** 是一种DNS 预解析技术，当浏览网页时，浏览器会在加载网页时对网页中的域名进行解析缓存，这样在单击当前网页中的连接时就无需进行DNS的解析，减少用户等待时间，提高用户体验。\n#### **DNS Prefetch，即DNS预解析。**  \n<!-- more -->\n\n## 为什么使用DNS预解析？\nDNS 作为互联网的基础协议，其解析的速度似乎很容易被网站优化人员忽视。现在大多数新浏览器已经针对DNS解析进行了优化，典型的一次DNS解析需要耗费 20-120 毫秒，减少DNS解析时间和次数是个很好的优化方式。DNS预解析 是让具有此属性的域名不需要用户点击链接就在后台解析，而域名解析和内容载入是串行的网络操作，所以这个方式能 减少用户的等待时间，提升用户体验 。\n#### DNS解析的运行顺序\n浏览器对网站第一次的域名DNS解析查找流程依次为：  \n**浏览器缓存-系统缓存-路由器缓存-ISP DNS缓存-递归搜索**  \n## 支持DNS Prefetch的浏览器\n- Chrome\n- IE:9+\n- Firefox:3.5+\n- Safari:5+\n- Edge  \n\n## 如何在网站中使用DNS预解析\n因为浏览器的html解析是顺序的，所以DNS Prefetch 应该尽量的放在网页的前面，推荐放在 <meta charset=\"UTF-8\"> 后面：  \n```html\n<meta http-equiv=\"x-dns-prefetch-control\" content=\"on\">\n<!--打开和关闭DNS预预解析-->\n<link rel=\"dns-prefetch\" href=\"//www.baidu.com\">\n<!--解析的DNS的地址-->\n```\n注：dns-prefetch需慎用，多页面重复DNS预解析会增加重复DNS查询次数。\n","slug":"前端性能优化——DNS预解析","published":1,"updated":"2020-02-05T02:21:53.000Z","comments":1,"photos":[],"link":"","_id":"ck9v62x7w001aqqs6dpn106yh","content":"<h2 id=\"什么是DNS预解析？\"><a href=\"#什么是DNS预解析？\" class=\"headerlink\" title=\"什么是DNS预解析？\"></a>什么是DNS预解析？</h2><p>我们在进行前端性能优化时，涉及到DNS方面的优化一般有两点： 一个是减少DNS的请求次数，另一个就是进行DNS预解析 。</p>\n<p>DNS 实现域名到IP的映射。通过域名访问站点，每次请求都要做DNS解析。目前每次DNS解析，通常在200ms以下。针对DNS解析耗时问题，一些浏览器通过DNS Prefetch 来提高访问的流畅性。  </p>\n<p><strong>DNS Prefetch</strong> 是一种DNS 预解析技术，当浏览网页时，浏览器会在加载网页时对网页中的域名进行解析缓存，这样在单击当前网页中的连接时就无需进行DNS的解析，减少用户等待时间，提高用户体验。</p>\n<h4 id=\"DNS-Prefetch，即DNS预解析。\"><a href=\"#DNS-Prefetch，即DNS预解析。\" class=\"headerlink\" title=\"DNS Prefetch，即DNS预解析。\"></a><strong>DNS Prefetch，即DNS预解析。</strong></h4><a id=\"more\"></a>\n\n<h2 id=\"为什么使用DNS预解析？\"><a href=\"#为什么使用DNS预解析？\" class=\"headerlink\" title=\"为什么使用DNS预解析？\"></a>为什么使用DNS预解析？</h2><p>DNS 作为互联网的基础协议，其解析的速度似乎很容易被网站优化人员忽视。现在大多数新浏览器已经针对DNS解析进行了优化，典型的一次DNS解析需要耗费 20-120 毫秒，减少DNS解析时间和次数是个很好的优化方式。DNS预解析 是让具有此属性的域名不需要用户点击链接就在后台解析，而域名解析和内容载入是串行的网络操作，所以这个方式能 减少用户的等待时间，提升用户体验 。</p>\n<h4 id=\"DNS解析的运行顺序\"><a href=\"#DNS解析的运行顺序\" class=\"headerlink\" title=\"DNS解析的运行顺序\"></a>DNS解析的运行顺序</h4><p>浏览器对网站第一次的域名DNS解析查找流程依次为：<br><strong>浏览器缓存-系统缓存-路由器缓存-ISP DNS缓存-递归搜索</strong>  </p>\n<h2 id=\"支持DNS-Prefetch的浏览器\"><a href=\"#支持DNS-Prefetch的浏览器\" class=\"headerlink\" title=\"支持DNS Prefetch的浏览器\"></a>支持DNS Prefetch的浏览器</h2><ul>\n<li>Chrome</li>\n<li>IE:9+</li>\n<li>Firefox:3.5+</li>\n<li>Safari:5+</li>\n<li>Edge  </li>\n</ul>\n<h2 id=\"如何在网站中使用DNS预解析\"><a href=\"#如何在网站中使用DNS预解析\" class=\"headerlink\" title=\"如何在网站中使用DNS预解析\"></a>如何在网站中使用DNS预解析</h2><p>因为浏览器的html解析是顺序的，所以DNS Prefetch 应该尽量的放在网页的前面，推荐放在 <meta charset=\"UTF-8\"> 后面：  </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"x-dns-prefetch-control\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"on\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--打开和关闭DNS预预解析--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"dns-prefetch\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"//www.baidu.com\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--解析的DNS的地址--&gt;</span></span><br></pre></td></tr></table></figure>\n<p>注：dns-prefetch需慎用，多页面重复DNS预解析会增加重复DNS查询次数。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"什么是DNS预解析？\"><a href=\"#什么是DNS预解析？\" class=\"headerlink\" title=\"什么是DNS预解析？\"></a>什么是DNS预解析？</h2><p>我们在进行前端性能优化时，涉及到DNS方面的优化一般有两点： 一个是减少DNS的请求次数，另一个就是进行DNS预解析 。</p>\n<p>DNS 实现域名到IP的映射。通过域名访问站点，每次请求都要做DNS解析。目前每次DNS解析，通常在200ms以下。针对DNS解析耗时问题，一些浏览器通过DNS Prefetch 来提高访问的流畅性。  </p>\n<p><strong>DNS Prefetch</strong> 是一种DNS 预解析技术，当浏览网页时，浏览器会在加载网页时对网页中的域名进行解析缓存，这样在单击当前网页中的连接时就无需进行DNS的解析，减少用户等待时间，提高用户体验。</p>\n<h4 id=\"DNS-Prefetch，即DNS预解析。\"><a href=\"#DNS-Prefetch，即DNS预解析。\" class=\"headerlink\" title=\"DNS Prefetch，即DNS预解析。\"></a><strong>DNS Prefetch，即DNS预解析。</strong></h4>","more":"<h2 id=\"为什么使用DNS预解析？\"><a href=\"#为什么使用DNS预解析？\" class=\"headerlink\" title=\"为什么使用DNS预解析？\"></a>为什么使用DNS预解析？</h2><p>DNS 作为互联网的基础协议，其解析的速度似乎很容易被网站优化人员忽视。现在大多数新浏览器已经针对DNS解析进行了优化，典型的一次DNS解析需要耗费 20-120 毫秒，减少DNS解析时间和次数是个很好的优化方式。DNS预解析 是让具有此属性的域名不需要用户点击链接就在后台解析，而域名解析和内容载入是串行的网络操作，所以这个方式能 减少用户的等待时间，提升用户体验 。</p>\n<h4 id=\"DNS解析的运行顺序\"><a href=\"#DNS解析的运行顺序\" class=\"headerlink\" title=\"DNS解析的运行顺序\"></a>DNS解析的运行顺序</h4><p>浏览器对网站第一次的域名DNS解析查找流程依次为：<br><strong>浏览器缓存-系统缓存-路由器缓存-ISP DNS缓存-递归搜索</strong>  </p>\n<h2 id=\"支持DNS-Prefetch的浏览器\"><a href=\"#支持DNS-Prefetch的浏览器\" class=\"headerlink\" title=\"支持DNS Prefetch的浏览器\"></a>支持DNS Prefetch的浏览器</h2><ul>\n<li>Chrome</li>\n<li>IE:9+</li>\n<li>Firefox:3.5+</li>\n<li>Safari:5+</li>\n<li>Edge  </li>\n</ul>\n<h2 id=\"如何在网站中使用DNS预解析\"><a href=\"#如何在网站中使用DNS预解析\" class=\"headerlink\" title=\"如何在网站中使用DNS预解析\"></a>如何在网站中使用DNS预解析</h2><p>因为浏览器的html解析是顺序的，所以DNS Prefetch 应该尽量的放在网页的前面，推荐放在 <meta charset=\"UTF-8\"> 后面：  </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"x-dns-prefetch-control\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"on\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--打开和关闭DNS预预解析--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"dns-prefetch\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"//www.baidu.com\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--解析的DNS的地址--&gt;</span></span><br></pre></td></tr></table></figure>\n<p>注：dns-prefetch需慎用，多页面重复DNS预解析会增加重复DNS查询次数。</p>"},{"layout":"[post]","title":"前端错误监控","date":"2019-10-21T15:53:43.000Z","_content":"## 前端错误的分类\n一般来说前端错误分为两类\n1. 即时运行错误\n2. 资源加载错误\n\n<!-- more -->\n## 错误捕获方式\n### 即时运行错误\n1. try catch\n2. window.onerror\n\n### 资源加载错误\n\n**资源加载错误不会冒泡，所以window.onerror捕获不到**\n1. object.onerror\n2. performance.getEntries()（获取所有加载资源）\n3. Error事件捕获\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <title>错误监控</title>\n    <script type=\"text/javascript\">\n      window.addEventListener('error', function (e) {\n          console.log('捕获', e);\n      }, false);\n    </script>\n  </head>\n  <body>\n    <script src=\"//badu.com/test.js\" charset=\"utf-8\"></script>\n  </body>\n</html>\n\n```\n\n#### 跨域js的运行错误\n**所有跨域js的运行错误都会显示为Script error**  \n解决方法：\n1. 在script标签上增加crossorigin属性(客户端)\n2. 设置资源响应头Access-Control-Allow-Origin:*（服务端）\n\n## 上报错误\n### 用ajax通信上报\n不建议这么来做\n### 利用Image对象进行上报\n\n```html\n <script type=\"text/javascript\">\n      (new Image()).src = 'http://baidu.com/tesjk?r=tksjk';\n    </script>\n```\n很容易实现请求，比ajax方便的多\n\n","source":"_posts/前端错误监控.md","raw":"---\nlayout: '[post]'\ntitle: 前端错误监控\ndate: 2019-10-21 23:53:43\ntags: 前端性能优化\n---\n## 前端错误的分类\n一般来说前端错误分为两类\n1. 即时运行错误\n2. 资源加载错误\n\n<!-- more -->\n## 错误捕获方式\n### 即时运行错误\n1. try catch\n2. window.onerror\n\n### 资源加载错误\n\n**资源加载错误不会冒泡，所以window.onerror捕获不到**\n1. object.onerror\n2. performance.getEntries()（获取所有加载资源）\n3. Error事件捕获\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <title>错误监控</title>\n    <script type=\"text/javascript\">\n      window.addEventListener('error', function (e) {\n          console.log('捕获', e);\n      }, false);\n    </script>\n  </head>\n  <body>\n    <script src=\"//badu.com/test.js\" charset=\"utf-8\"></script>\n  </body>\n</html>\n\n```\n\n#### 跨域js的运行错误\n**所有跨域js的运行错误都会显示为Script error**  \n解决方法：\n1. 在script标签上增加crossorigin属性(客户端)\n2. 设置资源响应头Access-Control-Allow-Origin:*（服务端）\n\n## 上报错误\n### 用ajax通信上报\n不建议这么来做\n### 利用Image对象进行上报\n\n```html\n <script type=\"text/javascript\">\n      (new Image()).src = 'http://baidu.com/tesjk?r=tksjk';\n    </script>\n```\n很容易实现请求，比ajax方便的多\n\n","slug":"前端错误监控","published":1,"updated":"2020-05-04T15:54:55.000Z","comments":1,"photos":[],"link":"","_id":"ck9v62x7x001cqqs6elv8clke","content":"<h2 id=\"前端错误的分类\"><a href=\"#前端错误的分类\" class=\"headerlink\" title=\"前端错误的分类\"></a>前端错误的分类</h2><p>一般来说前端错误分为两类</p>\n<ol>\n<li>即时运行错误</li>\n<li>资源加载错误</li>\n</ol>\n<a id=\"more\"></a>\n<h2 id=\"错误捕获方式\"><a href=\"#错误捕获方式\" class=\"headerlink\" title=\"错误捕获方式\"></a>错误捕获方式</h2><h3 id=\"即时运行错误\"><a href=\"#即时运行错误\" class=\"headerlink\" title=\"即时运行错误\"></a>即时运行错误</h3><ol>\n<li>try catch</li>\n<li>window.onerror</li>\n</ol>\n<h3 id=\"资源加载错误\"><a href=\"#资源加载错误\" class=\"headerlink\" title=\"资源加载错误\"></a>资源加载错误</h3><p><strong>资源加载错误不会冒泡，所以window.onerror捕获不到</strong></p>\n<ol>\n<li>object.onerror</li>\n<li>performance.getEntries()（获取所有加载资源）</li>\n<li>Error事件捕获<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>错误监控<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'error'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">'捕获'</span>, e);</span></span><br><span class=\"line\"><span class=\"actionscript\">      &#125;, <span class=\"literal\">false</span>);</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"//badu.com/test.js\"</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h4 id=\"跨域js的运行错误\"><a href=\"#跨域js的运行错误\" class=\"headerlink\" title=\"跨域js的运行错误\"></a>跨域js的运行错误</h4><p><strong>所有跨域js的运行错误都会显示为Script error</strong><br>解决方法：</p>\n<ol>\n<li>在script标签上增加crossorigin属性(客户端)</li>\n<li>设置资源响应头Access-Control-Allow-Origin:*（服务端）</li>\n</ol>\n<h2 id=\"上报错误\"><a href=\"#上报错误\" class=\"headerlink\" title=\"上报错误\"></a>上报错误</h2><h3 id=\"用ajax通信上报\"><a href=\"#用ajax通信上报\" class=\"headerlink\" title=\"用ajax通信上报\"></a>用ajax通信上报</h3><p>不建议这么来做</p>\n<h3 id=\"利用Image对象进行上报\"><a href=\"#利用Image对象进行上报\" class=\"headerlink\" title=\"利用Image对象进行上报\"></a>利用Image对象进行上报</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">     (<span class=\"keyword\">new</span> Image()).src = <span class=\"string\">'http://baidu.com/tesjk?r=tksjk'</span>;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>很容易实现请求，比ajax方便的多</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"前端错误的分类\"><a href=\"#前端错误的分类\" class=\"headerlink\" title=\"前端错误的分类\"></a>前端错误的分类</h2><p>一般来说前端错误分为两类</p>\n<ol>\n<li>即时运行错误</li>\n<li>资源加载错误</li>\n</ol>","more":"<h2 id=\"错误捕获方式\"><a href=\"#错误捕获方式\" class=\"headerlink\" title=\"错误捕获方式\"></a>错误捕获方式</h2><h3 id=\"即时运行错误\"><a href=\"#即时运行错误\" class=\"headerlink\" title=\"即时运行错误\"></a>即时运行错误</h3><ol>\n<li>try catch</li>\n<li>window.onerror</li>\n</ol>\n<h3 id=\"资源加载错误\"><a href=\"#资源加载错误\" class=\"headerlink\" title=\"资源加载错误\"></a>资源加载错误</h3><p><strong>资源加载错误不会冒泡，所以window.onerror捕获不到</strong></p>\n<ol>\n<li>object.onerror</li>\n<li>performance.getEntries()（获取所有加载资源）</li>\n<li>Error事件捕获<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>错误监控<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'error'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">'捕获'</span>, e);</span></span><br><span class=\"line\"><span class=\"actionscript\">      &#125;, <span class=\"literal\">false</span>);</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"//badu.com/test.js\"</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h4 id=\"跨域js的运行错误\"><a href=\"#跨域js的运行错误\" class=\"headerlink\" title=\"跨域js的运行错误\"></a>跨域js的运行错误</h4><p><strong>所有跨域js的运行错误都会显示为Script error</strong><br>解决方法：</p>\n<ol>\n<li>在script标签上增加crossorigin属性(客户端)</li>\n<li>设置资源响应头Access-Control-Allow-Origin:*（服务端）</li>\n</ol>\n<h2 id=\"上报错误\"><a href=\"#上报错误\" class=\"headerlink\" title=\"上报错误\"></a>上报错误</h2><h3 id=\"用ajax通信上报\"><a href=\"#用ajax通信上报\" class=\"headerlink\" title=\"用ajax通信上报\"></a>用ajax通信上报</h3><p>不建议这么来做</p>\n<h3 id=\"利用Image对象进行上报\"><a href=\"#利用Image对象进行上报\" class=\"headerlink\" title=\"利用Image对象进行上报\"></a>利用Image对象进行上报</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">     (<span class=\"keyword\">new</span> Image()).src = <span class=\"string\">'http://baidu.com/tesjk?r=tksjk'</span>;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>很容易实现请求，比ajax方便的多</p>"},{"layout":"[post]","title":"原型链","date":"2019-07-24T08:19:43.000Z","_content":"## 原型链的介绍\n### 什么是原型？\njs中，任何对象都有一个原型对象，这个原型对象由对象的内置属性_proto_指向它的构造函数的prototype指向的对象，即任何对象都是由一个构造函数创建的，但是不是每一个对象都有prototype，只有方法才有prototype。\n### 什么是原型链？\n  原型链的核心就是依赖对象的_proto_的指向，当自身不存在的属性时，就一层层的扒出创建对象的构造函数，直至到Object时，就没有_proto_指向了。\n\n<!-- more -->\n## 创建对象的方法\n1. 字面量\n```js\nvar a = { name: 'demo' };\n```\n2. 字面量（使用了Object的构造方法）\n```js\nvar b = new Object({ name: 'demo' });\n```\n3. 构造函数\n```js\nvar func = function () {\n    this.name = 'demo';\n}\nvar c = new func();\n```\n4. Object.create\n```js\nvar demo = { name: 'demo' };\nvar d = Object.create(demo);\n```\n\n### 创建对象的过程\n\n**首先，当我们声明一个function关键字的方法时，会为这个方法添加一个prototype属性，指向默认的原型对象，并且此prototype的constructor属性也指向方法对象。此二个属性会在创建对象时被对象的属性引用。**\n\n```js\nfunction Hello() {\n\t}\n\tconsole.log(Hello.prototype); // Object {} -- > 内部的constructor 指向Hello方法\n\tconsole.log(Hello.prototype.constructor); // function Hello(){}\n```\n**我们如果用Hello创建一个对象h，看这个对象有什么属性。**\n\n```js\n    console.log(h.constructor); // function Hello(){}\n\tconsole.log(Object.getPrototypeOf(h)==Hello.prototype); // true  备注：getPrototypeOf是获取_proto_\n```\n 我们惊喜的发现，new出来的对象，它的constructor指向了方法对象，它的_proto_和prototype相等。\n\n  即new一个对象，它的_proto_属性指向了方法的prototype属性，并且constructor指向了prototype的constructor属性。\n\n### 创建对象的过程\n\n```js\nfunction Hehe(name) {\n\t\tthis.name = name;\n\t}\n\tvar h = new Hehe(\"笑你妹\");\n\t//伪代码:\n\tfunction newObj(name){\n\t\t var obj = {};\n\t\t obj.__proto__ = Hehe.prototype; \n\t\t obj.constructor = Hehe.prototype.constructor;\n\t\t var result = Hehe.call(obj, name);\n\t\t return typeof result==='object'&& result!=null ? result : obj;  //当无返回对象或默认时返回obj。\n\t}\n\tvar hh = newObj(\"笑你妹\");\n\tconsole.log(hh);\n\tconsole.log(h);\n\t//虽然hh!=h,但是可以看到这个hh就和h的结构一样了。\n\n```\n**过程：先创建一个空对象，设置一个_proto_指向方法的原型，设置constructor，用新对象做this指向方法，返回新对象。**\n\n## 原型以及原型链关系\n\n![image](yuanxing.png)\n\n![image](gouzao.png)\n\n### 原型\n> 任何对象都有一个原型对象，这个原型对象由对象的内置属性_proto_指向它的构造函数的prototype指向的对象，即任何对象都是由一个构造函数创建的，但是不是每一个对象都有prototype，只有方法才有prototype。\n\n```js\nfunction Person() {\n\t}\n\tvar p = new Person();\n\t//方法才有prototype,普通对象无prototype\n\tconsole.log(Person.prototype); // Object{} \n\tconsole.log(p.prototype); // undifined\n\t\n\t//任何对象都是有构造函数的,Person这种方法的构造函数是Function。\n\t//备注:constructor很容易被改变，一般不用它，此处只是打印下列对象的构造函数是什么。\n\tconsole.log(p.constructor); //function Person(){}  \n\tconsole.log(Person.constructor); //function Function(){} \n\tconsole.log({}.constructor); // function Object(){}\n\tconsole.log(Object.constructor); // function Function() {}\n\tconsole.log([].constructor);  //function Array(){}\n```\n\n### 构造函数\n>  用function声明的都是函数，而如果直接调用的话，那么Person()就是一个普通函数，只有用函数new产生对象时，这个函数才是new出来对象的构造函数。\n\n### 原型链\n> 原型链的核心就是依赖对象的_proto_的指向，当自身不存在的属性时，就一层层的扒出创建对象的构造函数，直至到Object时，就没有_proto_指向了。\n\n属性搜索原则：\n\n1. 当访问一个对象的成员的时候，会现在自身找有没有,如果找到直接使用。\n2. 如果没有找到，则去原型链指向的对象的构造函数的prototype中找，找到直接使用，没找到就返回undifined或报错。\n```js\n function Person(name){\n            this.name = name;\n     }\n     var p = new Person();\n     //p ---> Person.prototype --->Object.prototype---->null\n```\n### 原型继承\n\n```js\n//原型继承的基本案例\nfunction Person(name, age) {\n\tthis.name = name;\n\tthis.age = age;\n}\n//1.直接替换原型对象 \nvar parent = {\n\tsayHello : function() {\n\t\tconsole.log(\"方式1：替换原型对象\");\n\t}\n}\nPerson.prototype = parent;\nvar p = new Person(\"张三\", 50);\np.sayHello();\n//2.混入式原型继承\nconsole.log(\".............混入式原型继承..............\");\nfunction Student(name, age) {\n\tthis.name = name;\n\tthis.age = age;\n}\nvar parent2 = {\n\tsayHello : function() {\n\t\tconsole.log(\"方式2：原型继承之混入式加载成员\");\n\t}\n}\nfor ( var k in parent2) {\n\tStudent.prototype[k] = parent2[k];\n}\nvar p = new Student(\"张三\", 50);\np.sayHello();\n```\n### instanceof\n**instanceof运算符用来判断一个构造函数的prototype属性所指向的对象是否存在另外一个要检测对象的原型链上**\n\n```js\n\tc; // function {name: \"demo\"}\n\tc instanceof Object; // true\n```\n为什么会是true呢？？\n\n```js\n    c; // function {name: \"demo\"}\n\tc instanceof func; // true\n\tc.__proto__ === func.prototype; // true\n\tfunc.prototype.__proto__ === Object.prototype; // true\n\tc instanceof Object; // true\n```\n**所以，instanceof不能用来判断对象的类型！！！**  \n\n那么我们用什么来判断对象的类型呢？\n\n### constructor\n\n```js\n    c.__proto__.constructor===func // true\n\tc.__proto__.constructor===Object // false\n```\n## new 运算符\n当我们用new运算符new一个构造函数产生一个实例时，比如说： var obj = new Func 时，其背后的步骤是这样的：\n\n1. 创建一个继承自 Func.prototype 的新对象；\n2. 执行构造函数 Func ，执行的时候，相应的传参会被传入，同时上下文(this)会被指定为第一步创建的新实例；\n3. 如果构造函数返回了一个“对象”,那么这个对象会取代步骤1中new出来的实例被返回。如果构造函数没有返回对象,那么new出来的结果为步骤1创建的对象。\n\n**注意：new Func 等同于new Func()，只能用在不传递任何参数的情况。**\n### new的模拟实现\n\n```js\n//new运算符原理实现\nvar new1 = function(fun){\n    var newObj = Object.create(fun.prototype);\n    var returnObj = fun.call(newObj);\n    if(typeof returnObj === 'object'){\n        return returnObj\n    }else{\n        return newObj\n    }\n}\n```\n其中  var newObj  = Object.create(fun.prototype)  的意思是：创建一个新对象newObj，并让``` newObj.__proto__  ```指向 fun，即  ```newObj.__proto__=== fun ```返回true。\n**方法的使用**\n\n```js\nvar strObj = new1(String);\nalert(strObj instanceof String); //true\nalert(strObj.__proto__.constructor === String); //true\n```\n**可以看到，new1函数的运行效果和new运算符是一样的。我们继续给String的原型上添加一个方法，看看new1函数得到的strObj能否继承到这个方法：**\n\n\n```js\nString.prototype.defineByN = function(){\n    alert(\"我是自定义方法\");\n}\nstrObj.defineByN();  //弹出“我是自定义方法”\n```\n可以看到new1函数得到的strObj继承了到这个方法。\n\n## 问题：为什么Object.create创建的对象和其他几种不一样呢？\n因为使用原型链进行的创造对象。\n\n```\n\td.__proto__===demo; // true\n```\n","source":"_posts/原型链.md","raw":"---\nlayout: '[post]'\ntitle: 原型链\ndate: 2019-07-24 16:19:43\ntags: javascript\n---\n## 原型链的介绍\n### 什么是原型？\njs中，任何对象都有一个原型对象，这个原型对象由对象的内置属性_proto_指向它的构造函数的prototype指向的对象，即任何对象都是由一个构造函数创建的，但是不是每一个对象都有prototype，只有方法才有prototype。\n### 什么是原型链？\n  原型链的核心就是依赖对象的_proto_的指向，当自身不存在的属性时，就一层层的扒出创建对象的构造函数，直至到Object时，就没有_proto_指向了。\n\n<!-- more -->\n## 创建对象的方法\n1. 字面量\n```js\nvar a = { name: 'demo' };\n```\n2. 字面量（使用了Object的构造方法）\n```js\nvar b = new Object({ name: 'demo' });\n```\n3. 构造函数\n```js\nvar func = function () {\n    this.name = 'demo';\n}\nvar c = new func();\n```\n4. Object.create\n```js\nvar demo = { name: 'demo' };\nvar d = Object.create(demo);\n```\n\n### 创建对象的过程\n\n**首先，当我们声明一个function关键字的方法时，会为这个方法添加一个prototype属性，指向默认的原型对象，并且此prototype的constructor属性也指向方法对象。此二个属性会在创建对象时被对象的属性引用。**\n\n```js\nfunction Hello() {\n\t}\n\tconsole.log(Hello.prototype); // Object {} -- > 内部的constructor 指向Hello方法\n\tconsole.log(Hello.prototype.constructor); // function Hello(){}\n```\n**我们如果用Hello创建一个对象h，看这个对象有什么属性。**\n\n```js\n    console.log(h.constructor); // function Hello(){}\n\tconsole.log(Object.getPrototypeOf(h)==Hello.prototype); // true  备注：getPrototypeOf是获取_proto_\n```\n 我们惊喜的发现，new出来的对象，它的constructor指向了方法对象，它的_proto_和prototype相等。\n\n  即new一个对象，它的_proto_属性指向了方法的prototype属性，并且constructor指向了prototype的constructor属性。\n\n### 创建对象的过程\n\n```js\nfunction Hehe(name) {\n\t\tthis.name = name;\n\t}\n\tvar h = new Hehe(\"笑你妹\");\n\t//伪代码:\n\tfunction newObj(name){\n\t\t var obj = {};\n\t\t obj.__proto__ = Hehe.prototype; \n\t\t obj.constructor = Hehe.prototype.constructor;\n\t\t var result = Hehe.call(obj, name);\n\t\t return typeof result==='object'&& result!=null ? result : obj;  //当无返回对象或默认时返回obj。\n\t}\n\tvar hh = newObj(\"笑你妹\");\n\tconsole.log(hh);\n\tconsole.log(h);\n\t//虽然hh!=h,但是可以看到这个hh就和h的结构一样了。\n\n```\n**过程：先创建一个空对象，设置一个_proto_指向方法的原型，设置constructor，用新对象做this指向方法，返回新对象。**\n\n## 原型以及原型链关系\n\n![image](yuanxing.png)\n\n![image](gouzao.png)\n\n### 原型\n> 任何对象都有一个原型对象，这个原型对象由对象的内置属性_proto_指向它的构造函数的prototype指向的对象，即任何对象都是由一个构造函数创建的，但是不是每一个对象都有prototype，只有方法才有prototype。\n\n```js\nfunction Person() {\n\t}\n\tvar p = new Person();\n\t//方法才有prototype,普通对象无prototype\n\tconsole.log(Person.prototype); // Object{} \n\tconsole.log(p.prototype); // undifined\n\t\n\t//任何对象都是有构造函数的,Person这种方法的构造函数是Function。\n\t//备注:constructor很容易被改变，一般不用它，此处只是打印下列对象的构造函数是什么。\n\tconsole.log(p.constructor); //function Person(){}  \n\tconsole.log(Person.constructor); //function Function(){} \n\tconsole.log({}.constructor); // function Object(){}\n\tconsole.log(Object.constructor); // function Function() {}\n\tconsole.log([].constructor);  //function Array(){}\n```\n\n### 构造函数\n>  用function声明的都是函数，而如果直接调用的话，那么Person()就是一个普通函数，只有用函数new产生对象时，这个函数才是new出来对象的构造函数。\n\n### 原型链\n> 原型链的核心就是依赖对象的_proto_的指向，当自身不存在的属性时，就一层层的扒出创建对象的构造函数，直至到Object时，就没有_proto_指向了。\n\n属性搜索原则：\n\n1. 当访问一个对象的成员的时候，会现在自身找有没有,如果找到直接使用。\n2. 如果没有找到，则去原型链指向的对象的构造函数的prototype中找，找到直接使用，没找到就返回undifined或报错。\n```js\n function Person(name){\n            this.name = name;\n     }\n     var p = new Person();\n     //p ---> Person.prototype --->Object.prototype---->null\n```\n### 原型继承\n\n```js\n//原型继承的基本案例\nfunction Person(name, age) {\n\tthis.name = name;\n\tthis.age = age;\n}\n//1.直接替换原型对象 \nvar parent = {\n\tsayHello : function() {\n\t\tconsole.log(\"方式1：替换原型对象\");\n\t}\n}\nPerson.prototype = parent;\nvar p = new Person(\"张三\", 50);\np.sayHello();\n//2.混入式原型继承\nconsole.log(\".............混入式原型继承..............\");\nfunction Student(name, age) {\n\tthis.name = name;\n\tthis.age = age;\n}\nvar parent2 = {\n\tsayHello : function() {\n\t\tconsole.log(\"方式2：原型继承之混入式加载成员\");\n\t}\n}\nfor ( var k in parent2) {\n\tStudent.prototype[k] = parent2[k];\n}\nvar p = new Student(\"张三\", 50);\np.sayHello();\n```\n### instanceof\n**instanceof运算符用来判断一个构造函数的prototype属性所指向的对象是否存在另外一个要检测对象的原型链上**\n\n```js\n\tc; // function {name: \"demo\"}\n\tc instanceof Object; // true\n```\n为什么会是true呢？？\n\n```js\n    c; // function {name: \"demo\"}\n\tc instanceof func; // true\n\tc.__proto__ === func.prototype; // true\n\tfunc.prototype.__proto__ === Object.prototype; // true\n\tc instanceof Object; // true\n```\n**所以，instanceof不能用来判断对象的类型！！！**  \n\n那么我们用什么来判断对象的类型呢？\n\n### constructor\n\n```js\n    c.__proto__.constructor===func // true\n\tc.__proto__.constructor===Object // false\n```\n## new 运算符\n当我们用new运算符new一个构造函数产生一个实例时，比如说： var obj = new Func 时，其背后的步骤是这样的：\n\n1. 创建一个继承自 Func.prototype 的新对象；\n2. 执行构造函数 Func ，执行的时候，相应的传参会被传入，同时上下文(this)会被指定为第一步创建的新实例；\n3. 如果构造函数返回了一个“对象”,那么这个对象会取代步骤1中new出来的实例被返回。如果构造函数没有返回对象,那么new出来的结果为步骤1创建的对象。\n\n**注意：new Func 等同于new Func()，只能用在不传递任何参数的情况。**\n### new的模拟实现\n\n```js\n//new运算符原理实现\nvar new1 = function(fun){\n    var newObj = Object.create(fun.prototype);\n    var returnObj = fun.call(newObj);\n    if(typeof returnObj === 'object'){\n        return returnObj\n    }else{\n        return newObj\n    }\n}\n```\n其中  var newObj  = Object.create(fun.prototype)  的意思是：创建一个新对象newObj，并让``` newObj.__proto__  ```指向 fun，即  ```newObj.__proto__=== fun ```返回true。\n**方法的使用**\n\n```js\nvar strObj = new1(String);\nalert(strObj instanceof String); //true\nalert(strObj.__proto__.constructor === String); //true\n```\n**可以看到，new1函数的运行效果和new运算符是一样的。我们继续给String的原型上添加一个方法，看看new1函数得到的strObj能否继承到这个方法：**\n\n\n```js\nString.prototype.defineByN = function(){\n    alert(\"我是自定义方法\");\n}\nstrObj.defineByN();  //弹出“我是自定义方法”\n```\n可以看到new1函数得到的strObj继承了到这个方法。\n\n## 问题：为什么Object.create创建的对象和其他几种不一样呢？\n因为使用原型链进行的创造对象。\n\n```\n\td.__proto__===demo; // true\n```\n","slug":"原型链","published":1,"updated":"2020-03-13T10:38:45.000Z","comments":1,"photos":[],"link":"","_id":"ck9v62x7y001dqqs68n2x82jo","content":"<h2 id=\"原型链的介绍\"><a href=\"#原型链的介绍\" class=\"headerlink\" title=\"原型链的介绍\"></a>原型链的介绍</h2><h3 id=\"什么是原型？\"><a href=\"#什么是原型？\" class=\"headerlink\" title=\"什么是原型？\"></a>什么是原型？</h3><p>js中，任何对象都有一个原型对象，这个原型对象由对象的内置属性_proto_指向它的构造函数的prototype指向的对象，即任何对象都是由一个构造函数创建的，但是不是每一个对象都有prototype，只有方法才有prototype。</p>\n<h3 id=\"什么是原型链？\"><a href=\"#什么是原型链？\" class=\"headerlink\" title=\"什么是原型链？\"></a>什么是原型链？</h3><p>  原型链的核心就是依赖对象的_proto_的指向，当自身不存在的属性时，就一层层的扒出创建对象的构造函数，直至到Object时，就没有_proto_指向了。</p>\n<a id=\"more\"></a>\n<h2 id=\"创建对象的方法\"><a href=\"#创建对象的方法\" class=\"headerlink\" title=\"创建对象的方法\"></a>创建对象的方法</h2><ol>\n<li>字面量<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123; <span class=\"attr\">name</span>: <span class=\"string\">'demo'</span> &#125;;</span><br></pre></td></tr></table></figure></li>\n<li>字面量（使用了Object的构造方法）<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>(&#123; <span class=\"attr\">name</span>: <span class=\"string\">'demo'</span> &#125;);</span><br></pre></td></tr></table></figure></li>\n<li>构造函数<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> func = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'demo'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"keyword\">new</span> func();</span><br></pre></td></tr></table></figure></li>\n<li>Object.create<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> demo = &#123; <span class=\"attr\">name</span>: <span class=\"string\">'demo'</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> d = <span class=\"built_in\">Object</span>.create(demo);</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"创建对象的过程\"><a href=\"#创建对象的过程\" class=\"headerlink\" title=\"创建对象的过程\"></a>创建对象的过程</h3><p><strong>首先，当我们声明一个function关键字的方法时，会为这个方法添加一个prototype属性，指向默认的原型对象，并且此prototype的constructor属性也指向方法对象。此二个属性会在创建对象时被对象的属性引用。</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Hello</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(Hello.prototype); <span class=\"comment\">// Object &#123;&#125; -- &gt; 内部的constructor 指向Hello方法</span></span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(Hello.prototype.constructor); <span class=\"comment\">// function Hello()&#123;&#125;</span></span><br></pre></td></tr></table></figure>\n<p><strong>我们如果用Hello创建一个对象h，看这个对象有什么属性。</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"built_in\">console</span>.log(h.constructor); <span class=\"comment\">// function Hello()&#123;&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.getPrototypeOf(h)==Hello.prototype); <span class=\"comment\">// true  备注：getPrototypeOf是获取_proto_</span></span><br></pre></td></tr></table></figure>\n<p> 我们惊喜的发现，new出来的对象，它的constructor指向了方法对象，它的_proto_和prototype相等。</p>\n<p>  即new一个对象，它的_proto_属性指向了方法的prototype属性，并且constructor指向了prototype的constructor属性。</p>\n<h3 id=\"创建对象的过程-1\"><a href=\"#创建对象的过程-1\" class=\"headerlink\" title=\"创建对象的过程\"></a>创建对象的过程</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Hehe</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> h = <span class=\"keyword\">new</span> Hehe(<span class=\"string\">\"笑你妹\"</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//伪代码:</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">newObj</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">\t\t <span class=\"keyword\">var</span> obj = &#123;&#125;;</span><br><span class=\"line\">\t\t obj.__proto__ = Hehe.prototype; </span><br><span class=\"line\">\t\t obj.constructor = Hehe.prototype.constructor;</span><br><span class=\"line\">\t\t <span class=\"keyword\">var</span> result = Hehe.call(obj, name);</span><br><span class=\"line\">\t\t <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> result===<span class=\"string\">'object'</span>&amp;&amp; result!=<span class=\"literal\">null</span> ? result : obj;  <span class=\"comment\">//当无返回对象或默认时返回obj。</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> hh = newObj(<span class=\"string\">\"笑你妹\"</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(hh);</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(h);</span><br><span class=\"line\">\t<span class=\"comment\">//虽然hh!=h,但是可以看到这个hh就和h的结构一样了。</span></span><br></pre></td></tr></table></figure>\n<p><strong>过程：先创建一个空对象，设置一个_proto_指向方法的原型，设置constructor，用新对象做this指向方法，返回新对象。</strong></p>\n<h2 id=\"原型以及原型链关系\"><a href=\"#原型以及原型链关系\" class=\"headerlink\" title=\"原型以及原型链关系\"></a>原型以及原型链关系</h2><p><img src=\"/2019/07/24/%E5%8E%9F%E5%9E%8B%E9%93%BE/yuanxing.png\" alt=\"image\"></p>\n<p><img src=\"/2019/07/24/%E5%8E%9F%E5%9E%8B%E9%93%BE/gouzao.png\" alt=\"image\"></p>\n<h3 id=\"原型\"><a href=\"#原型\" class=\"headerlink\" title=\"原型\"></a>原型</h3><blockquote>\n<p>任何对象都有一个原型对象，这个原型对象由对象的内置属性_proto_指向它的构造函数的prototype指向的对象，即任何对象都是由一个构造函数创建的，但是不是每一个对象都有prototype，只有方法才有prototype。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">\t<span class=\"comment\">//方法才有prototype,普通对象无prototype</span></span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(Person.prototype); <span class=\"comment\">// Object&#123;&#125; </span></span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(p.prototype); <span class=\"comment\">// undifined</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//任何对象都是有构造函数的,Person这种方法的构造函数是Function。</span></span><br><span class=\"line\">\t<span class=\"comment\">//备注:constructor很容易被改变，一般不用它，此处只是打印下列对象的构造函数是什么。</span></span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(p.constructor); <span class=\"comment\">//function Person()&#123;&#125;  </span></span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(Person.constructor); <span class=\"comment\">//function Function()&#123;&#125; </span></span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(&#123;&#125;.constructor); <span class=\"comment\">// function Object()&#123;&#125;</span></span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.constructor); <span class=\"comment\">// function Function() &#123;&#125;</span></span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log([].constructor);  <span class=\"comment\">//function Array()&#123;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h3><blockquote>\n<p> 用function声明的都是函数，而如果直接调用的话，那么Person()就是一个普通函数，只有用函数new产生对象时，这个函数才是new出来对象的构造函数。</p>\n</blockquote>\n<h3 id=\"原型链\"><a href=\"#原型链\" class=\"headerlink\" title=\"原型链\"></a>原型链</h3><blockquote>\n<p>原型链的核心就是依赖对象的_proto_的指向，当自身不存在的属性时，就一层层的扒出创建对象的构造函数，直至到Object时，就没有_proto_指向了。</p>\n</blockquote>\n<p>属性搜索原则：</p>\n<ol>\n<li>当访问一个对象的成员的时候，会现在自身找有没有,如果找到直接使用。</li>\n<li>如果没有找到，则去原型链指向的对象的构造函数的prototype中找，找到直接使用，没找到就返回undifined或报错。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">    <span class=\"comment\">//p ---&gt; Person.prototype ---&gt;Object.prototype----&gt;null</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"原型继承\"><a href=\"#原型继承\" class=\"headerlink\" title=\"原型继承\"></a>原型继承</h3></li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//原型继承的基本案例</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//1.直接替换原型对象 </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> parent = &#123;</span><br><span class=\"line\">\tsayHello : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"方式1：替换原型对象\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Person.prototype = parent;</span><br><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"张三\"</span>, <span class=\"number\">50</span>);</span><br><span class=\"line\">p.sayHello();</span><br><span class=\"line\"><span class=\"comment\">//2.混入式原型继承</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\".............混入式原型继承..............\"</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Student</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> parent2 = &#123;</span><br><span class=\"line\">\tsayHello : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"方式2：原型继承之混入式加载成员\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> ( <span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> parent2) &#123;</span><br><span class=\"line\">\tStudent.prototype[k] = parent2[k];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Student(<span class=\"string\">\"张三\"</span>, <span class=\"number\">50</span>);</span><br><span class=\"line\">p.sayHello();</span><br></pre></td></tr></table></figure>\n<h3 id=\"instanceof\"><a href=\"#instanceof\" class=\"headerlink\" title=\"instanceof\"></a>instanceof</h3><p><strong>instanceof运算符用来判断一个构造函数的prototype属性所指向的对象是否存在另外一个要检测对象的原型链上</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c; <span class=\"comment\">// function &#123;name: \"demo\"&#125;</span></span><br><span class=\"line\">c <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>; <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>为什么会是true呢？？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   c; <span class=\"comment\">// function &#123;name: \"demo\"&#125;</span></span><br><span class=\"line\">c <span class=\"keyword\">instanceof</span> func; <span class=\"comment\">// true</span></span><br><span class=\"line\">c.__proto__ === func.prototype; <span class=\"comment\">// true</span></span><br><span class=\"line\">func.prototype.__proto__ === <span class=\"built_in\">Object</span>.prototype; <span class=\"comment\">// true</span></span><br><span class=\"line\">c <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>; <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p><strong>所以，instanceof不能用来判断对象的类型！！！</strong>  </p>\n<p>那么我们用什么来判断对象的类型呢？</p>\n<h3 id=\"constructor-NaN\"><a href=\"#constructor-NaN\" class=\"headerlink\" title=\"constructor\"></a>constructor</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   c.__proto__.constructor===func <span class=\"comment\">// true</span></span><br><span class=\"line\">c.__proto__.constructor===<span class=\"built_in\">Object</span> <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"new-运算符\"><a href=\"#new-运算符\" class=\"headerlink\" title=\"new 运算符\"></a>new 运算符</h2><p>当我们用new运算符new一个构造函数产生一个实例时，比如说： var obj = new Func 时，其背后的步骤是这样的：</p>\n<ol>\n<li>创建一个继承自 Func.prototype 的新对象；</li>\n<li>执行构造函数 Func ，执行的时候，相应的传参会被传入，同时上下文(this)会被指定为第一步创建的新实例；</li>\n<li>如果构造函数返回了一个“对象”,那么这个对象会取代步骤1中new出来的实例被返回。如果构造函数没有返回对象,那么new出来的结果为步骤1创建的对象。</li>\n</ol>\n<p><strong>注意：new Func 等同于new Func()，只能用在不传递任何参数的情况。</strong></p>\n<h3 id=\"new的模拟实现\"><a href=\"#new的模拟实现\" class=\"headerlink\" title=\"new的模拟实现\"></a>new的模拟实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//new运算符原理实现</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> new1 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fun</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> newObj = <span class=\"built_in\">Object</span>.create(fun.prototype);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> returnObj = fun.call(newObj);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> returnObj === <span class=\"string\">'object'</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> returnObj</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> newObj</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中  var newObj  = Object.create(fun.prototype)  的意思是：创建一个新对象newObj，并让<code>newObj.__proto__</code>指向 fun，即  <code>newObj.__proto__=== fun</code>返回true。<br><strong>方法的使用</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> strObj = new1(<span class=\"built_in\">String</span>);</span><br><span class=\"line\">alert(strObj <span class=\"keyword\">instanceof</span> <span class=\"built_in\">String</span>); <span class=\"comment\">//true</span></span><br><span class=\"line\">alert(strObj.__proto__.constructor === <span class=\"built_in\">String</span>); <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<p><strong>可以看到，new1函数的运行效果和new运算符是一样的。我们继续给String的原型上添加一个方法，看看new1函数得到的strObj能否继承到这个方法：</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span>.prototype.defineByN = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">\"我是自定义方法\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">strObj.defineByN();  <span class=\"comment\">//弹出“我是自定义方法”</span></span><br></pre></td></tr></table></figure>\n<p>可以看到new1函数得到的strObj继承了到这个方法。</p>\n<h2 id=\"问题：为什么Object-create创建的对象和其他几种不一样呢？\"><a href=\"#问题：为什么Object-create创建的对象和其他几种不一样呢？\" class=\"headerlink\" title=\"问题：为什么Object.create创建的对象和其他几种不一样呢？\"></a>问题：为什么Object.create创建的对象和其他几种不一样呢？</h2><p>因为使用原型链进行的创造对象。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d.__proto__&#x3D;&#x3D;&#x3D;demo; &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"原型链的介绍\"><a href=\"#原型链的介绍\" class=\"headerlink\" title=\"原型链的介绍\"></a>原型链的介绍</h2><h3 id=\"什么是原型？\"><a href=\"#什么是原型？\" class=\"headerlink\" title=\"什么是原型？\"></a>什么是原型？</h3><p>js中，任何对象都有一个原型对象，这个原型对象由对象的内置属性_proto_指向它的构造函数的prototype指向的对象，即任何对象都是由一个构造函数创建的，但是不是每一个对象都有prototype，只有方法才有prototype。</p>\n<h3 id=\"什么是原型链？\"><a href=\"#什么是原型链？\" class=\"headerlink\" title=\"什么是原型链？\"></a>什么是原型链？</h3><p>  原型链的核心就是依赖对象的_proto_的指向，当自身不存在的属性时，就一层层的扒出创建对象的构造函数，直至到Object时，就没有_proto_指向了。</p>","more":"<h2 id=\"创建对象的方法\"><a href=\"#创建对象的方法\" class=\"headerlink\" title=\"创建对象的方法\"></a>创建对象的方法</h2><ol>\n<li>字面量<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123; <span class=\"attr\">name</span>: <span class=\"string\">'demo'</span> &#125;;</span><br></pre></td></tr></table></figure></li>\n<li>字面量（使用了Object的构造方法）<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>(&#123; <span class=\"attr\">name</span>: <span class=\"string\">'demo'</span> &#125;);</span><br></pre></td></tr></table></figure></li>\n<li>构造函数<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> func = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'demo'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"keyword\">new</span> func();</span><br></pre></td></tr></table></figure></li>\n<li>Object.create<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> demo = &#123; <span class=\"attr\">name</span>: <span class=\"string\">'demo'</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> d = <span class=\"built_in\">Object</span>.create(demo);</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"创建对象的过程\"><a href=\"#创建对象的过程\" class=\"headerlink\" title=\"创建对象的过程\"></a>创建对象的过程</h3><p><strong>首先，当我们声明一个function关键字的方法时，会为这个方法添加一个prototype属性，指向默认的原型对象，并且此prototype的constructor属性也指向方法对象。此二个属性会在创建对象时被对象的属性引用。</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Hello</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(Hello.prototype); <span class=\"comment\">// Object &#123;&#125; -- &gt; 内部的constructor 指向Hello方法</span></span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(Hello.prototype.constructor); <span class=\"comment\">// function Hello()&#123;&#125;</span></span><br></pre></td></tr></table></figure>\n<p><strong>我们如果用Hello创建一个对象h，看这个对象有什么属性。</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"built_in\">console</span>.log(h.constructor); <span class=\"comment\">// function Hello()&#123;&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.getPrototypeOf(h)==Hello.prototype); <span class=\"comment\">// true  备注：getPrototypeOf是获取_proto_</span></span><br></pre></td></tr></table></figure>\n<p> 我们惊喜的发现，new出来的对象，它的constructor指向了方法对象，它的_proto_和prototype相等。</p>\n<p>  即new一个对象，它的_proto_属性指向了方法的prototype属性，并且constructor指向了prototype的constructor属性。</p>\n<h3 id=\"创建对象的过程-1\"><a href=\"#创建对象的过程-1\" class=\"headerlink\" title=\"创建对象的过程\"></a>创建对象的过程</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Hehe</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> h = <span class=\"keyword\">new</span> Hehe(<span class=\"string\">\"笑你妹\"</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//伪代码:</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">newObj</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">\t\t <span class=\"keyword\">var</span> obj = &#123;&#125;;</span><br><span class=\"line\">\t\t obj.__proto__ = Hehe.prototype; </span><br><span class=\"line\">\t\t obj.constructor = Hehe.prototype.constructor;</span><br><span class=\"line\">\t\t <span class=\"keyword\">var</span> result = Hehe.call(obj, name);</span><br><span class=\"line\">\t\t <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> result===<span class=\"string\">'object'</span>&amp;&amp; result!=<span class=\"literal\">null</span> ? result : obj;  <span class=\"comment\">//当无返回对象或默认时返回obj。</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> hh = newObj(<span class=\"string\">\"笑你妹\"</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(hh);</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(h);</span><br><span class=\"line\">\t<span class=\"comment\">//虽然hh!=h,但是可以看到这个hh就和h的结构一样了。</span></span><br></pre></td></tr></table></figure>\n<p><strong>过程：先创建一个空对象，设置一个_proto_指向方法的原型，设置constructor，用新对象做this指向方法，返回新对象。</strong></p>\n<h2 id=\"原型以及原型链关系\"><a href=\"#原型以及原型链关系\" class=\"headerlink\" title=\"原型以及原型链关系\"></a>原型以及原型链关系</h2><p><img src=\"/2019/07/24/%E5%8E%9F%E5%9E%8B%E9%93%BE/yuanxing.png\" alt=\"image\"></p>\n<p><img src=\"/2019/07/24/%E5%8E%9F%E5%9E%8B%E9%93%BE/gouzao.png\" alt=\"image\"></p>\n<h3 id=\"原型\"><a href=\"#原型\" class=\"headerlink\" title=\"原型\"></a>原型</h3><blockquote>\n<p>任何对象都有一个原型对象，这个原型对象由对象的内置属性_proto_指向它的构造函数的prototype指向的对象，即任何对象都是由一个构造函数创建的，但是不是每一个对象都有prototype，只有方法才有prototype。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">\t<span class=\"comment\">//方法才有prototype,普通对象无prototype</span></span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(Person.prototype); <span class=\"comment\">// Object&#123;&#125; </span></span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(p.prototype); <span class=\"comment\">// undifined</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//任何对象都是有构造函数的,Person这种方法的构造函数是Function。</span></span><br><span class=\"line\">\t<span class=\"comment\">//备注:constructor很容易被改变，一般不用它，此处只是打印下列对象的构造函数是什么。</span></span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(p.constructor); <span class=\"comment\">//function Person()&#123;&#125;  </span></span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(Person.constructor); <span class=\"comment\">//function Function()&#123;&#125; </span></span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(&#123;&#125;.constructor); <span class=\"comment\">// function Object()&#123;&#125;</span></span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.constructor); <span class=\"comment\">// function Function() &#123;&#125;</span></span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log([].constructor);  <span class=\"comment\">//function Array()&#123;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h3><blockquote>\n<p> 用function声明的都是函数，而如果直接调用的话，那么Person()就是一个普通函数，只有用函数new产生对象时，这个函数才是new出来对象的构造函数。</p>\n</blockquote>\n<h3 id=\"原型链\"><a href=\"#原型链\" class=\"headerlink\" title=\"原型链\"></a>原型链</h3><blockquote>\n<p>原型链的核心就是依赖对象的_proto_的指向，当自身不存在的属性时，就一层层的扒出创建对象的构造函数，直至到Object时，就没有_proto_指向了。</p>\n</blockquote>\n<p>属性搜索原则：</p>\n<ol>\n<li>当访问一个对象的成员的时候，会现在自身找有没有,如果找到直接使用。</li>\n<li>如果没有找到，则去原型链指向的对象的构造函数的prototype中找，找到直接使用，没找到就返回undifined或报错。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">    <span class=\"comment\">//p ---&gt; Person.prototype ---&gt;Object.prototype----&gt;null</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"原型继承\"><a href=\"#原型继承\" class=\"headerlink\" title=\"原型继承\"></a>原型继承</h3></li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//原型继承的基本案例</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//1.直接替换原型对象 </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> parent = &#123;</span><br><span class=\"line\">\tsayHello : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"方式1：替换原型对象\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Person.prototype = parent;</span><br><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"张三\"</span>, <span class=\"number\">50</span>);</span><br><span class=\"line\">p.sayHello();</span><br><span class=\"line\"><span class=\"comment\">//2.混入式原型继承</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\".............混入式原型继承..............\"</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Student</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> parent2 = &#123;</span><br><span class=\"line\">\tsayHello : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"方式2：原型继承之混入式加载成员\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> ( <span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> parent2) &#123;</span><br><span class=\"line\">\tStudent.prototype[k] = parent2[k];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Student(<span class=\"string\">\"张三\"</span>, <span class=\"number\">50</span>);</span><br><span class=\"line\">p.sayHello();</span><br></pre></td></tr></table></figure>\n<h3 id=\"instanceof\"><a href=\"#instanceof\" class=\"headerlink\" title=\"instanceof\"></a>instanceof</h3><p><strong>instanceof运算符用来判断一个构造函数的prototype属性所指向的对象是否存在另外一个要检测对象的原型链上</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c; <span class=\"comment\">// function &#123;name: \"demo\"&#125;</span></span><br><span class=\"line\">c <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>; <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>为什么会是true呢？？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   c; <span class=\"comment\">// function &#123;name: \"demo\"&#125;</span></span><br><span class=\"line\">c <span class=\"keyword\">instanceof</span> func; <span class=\"comment\">// true</span></span><br><span class=\"line\">c.__proto__ === func.prototype; <span class=\"comment\">// true</span></span><br><span class=\"line\">func.prototype.__proto__ === <span class=\"built_in\">Object</span>.prototype; <span class=\"comment\">// true</span></span><br><span class=\"line\">c <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>; <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p><strong>所以，instanceof不能用来判断对象的类型！！！</strong>  </p>\n<p>那么我们用什么来判断对象的类型呢？</p>\n<h3 id=\"constructor-NaN\"><a href=\"#constructor-NaN\" class=\"headerlink\" title=\"constructor\"></a>constructor</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   c.__proto__.constructor===func <span class=\"comment\">// true</span></span><br><span class=\"line\">c.__proto__.constructor===<span class=\"built_in\">Object</span> <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"new-运算符\"><a href=\"#new-运算符\" class=\"headerlink\" title=\"new 运算符\"></a>new 运算符</h2><p>当我们用new运算符new一个构造函数产生一个实例时，比如说： var obj = new Func 时，其背后的步骤是这样的：</p>\n<ol>\n<li>创建一个继承自 Func.prototype 的新对象；</li>\n<li>执行构造函数 Func ，执行的时候，相应的传参会被传入，同时上下文(this)会被指定为第一步创建的新实例；</li>\n<li>如果构造函数返回了一个“对象”,那么这个对象会取代步骤1中new出来的实例被返回。如果构造函数没有返回对象,那么new出来的结果为步骤1创建的对象。</li>\n</ol>\n<p><strong>注意：new Func 等同于new Func()，只能用在不传递任何参数的情况。</strong></p>\n<h3 id=\"new的模拟实现\"><a href=\"#new的模拟实现\" class=\"headerlink\" title=\"new的模拟实现\"></a>new的模拟实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//new运算符原理实现</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> new1 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fun</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> newObj = <span class=\"built_in\">Object</span>.create(fun.prototype);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> returnObj = fun.call(newObj);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> returnObj === <span class=\"string\">'object'</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> returnObj</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> newObj</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中  var newObj  = Object.create(fun.prototype)  的意思是：创建一个新对象newObj，并让<code>newObj.__proto__</code>指向 fun，即  <code>newObj.__proto__=== fun</code>返回true。<br><strong>方法的使用</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> strObj = new1(<span class=\"built_in\">String</span>);</span><br><span class=\"line\">alert(strObj <span class=\"keyword\">instanceof</span> <span class=\"built_in\">String</span>); <span class=\"comment\">//true</span></span><br><span class=\"line\">alert(strObj.__proto__.constructor === <span class=\"built_in\">String</span>); <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<p><strong>可以看到，new1函数的运行效果和new运算符是一样的。我们继续给String的原型上添加一个方法，看看new1函数得到的strObj能否继承到这个方法：</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span>.prototype.defineByN = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">\"我是自定义方法\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">strObj.defineByN();  <span class=\"comment\">//弹出“我是自定义方法”</span></span><br></pre></td></tr></table></figure>\n<p>可以看到new1函数得到的strObj继承了到这个方法。</p>\n<h2 id=\"问题：为什么Object-create创建的对象和其他几种不一样呢？\"><a href=\"#问题：为什么Object-create创建的对象和其他几种不一样呢？\" class=\"headerlink\" title=\"问题：为什么Object.create创建的对象和其他几种不一样呢？\"></a>问题：为什么Object.create创建的对象和其他几种不一样呢？</h2><p>因为使用原型链进行的创造对象。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d.__proto__&#x3D;&#x3D;&#x3D;demo; &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure>"},{"layout":"[post]","title":"浏览器渲染原理与过程","date":"2019-09-27T07:45:31.000Z","_content":"## 浏览器如何渲染网页\n### 什么是DOCTYPE\n在w3school上是这么解释的：<!DOCTYPE>声明不是HTML标签，指示web浏览器关于页面使用哪个HTML版本进行编写的指令；在 HTML 4.01 中，```<!DOCTYPE>``` 声明引用 DTD，因为 HTML 4.01 基于 SGML。DTD 规定了标记语言的规则，这样浏览器才能正确地呈现内容。HTML5 不基于 SGML，所以不需要引用 DTD\n<!-- more -->\n\n**简而言之，<!DOCTYPE>规定了浏览器文档使用哪种html或者xhtml规范**\n\n#### h5中使用\n```\n<!DOCTYPE html>\n```\n#### HTML 4.01 Strict（严格模式）\n\n该 DTD 包含所有 HTML 元素和属性，但不包括展示性的和弃用的元素（比如 font）。不允许框架集（Framesets）。\n\n```\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\n```\n#### HTML 4.01 Transitional（宽松模式）\n\n该 DTD 包含所有 HTML 元素和属性，包括展示性的和弃用的元素（比如 font）。不允许框架集（Framesets）。\n\n```\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \n\"http://www.w3.org/TR/html4/loose.dtd\">\n```\n#### HTML 4.01 Frameset\n该 DTD 等同于 HTML 4.01 Transitional，但允许框架集内容。\n\n```\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Frameset//EN\" \n\"http://www.w3.org/TR/html4/frameset.dtd\">\n```\n#### 名词解释\n##### DTD\nDocument Type Definition，中文翻译为：文档类型定义。DTD可定义合法的XML文档构建模块。它使用一系列合法的元素来定义文档的结构。因为早期的版本基于SGML，所以需要套用SGML的解析规则。DTD的作用在于定义SGML文档的文档类型以便于浏览器解析。\n\n##### SGML\nStandard Generalized Markup language。标准通用标记语言（以下简称“通用标言”），是一种定义电子文档结构和描述其内容的国际标准语言。\n\n\n如果没有<!DOCTYPE>声明，那么不同的浏览器将会以自己不同的怪异的模式去解析渲染页面，这样页面在不同的浏览器上呈现出来的效果也就不一样，人们把这称之为“怪异模式”。\n\n### 浏览器渲染网页过程\n\n要了解浏览器渲染页面的过程，首先得知道一个名词——关键渲染路径。关键渲染路径是指浏览器从最初接收请求来的HTML、CSS、javascript等资源，然后解析、构建树、渲染布局、绘制，最后呈现给客户能看到的界面这整个过程。\n用户看到页面实际上可以分为两个阶段：页面内容加载完成和页面资源加载完成，分别对应于**DOMContentLoaded**和**Load**。\n\n- **DOMContentLoaded**事件触发时，仅当DOM加载完成，不包括样式表，图片等\n - **load**事件触发时，页面上所有的DOM，样式表，脚本，图片都已加载完成\n \n#### 浏览器渲染的过程主要包括以下五步\n1. 浏览器将获取的HTML文档解析成DOM树。\n2. 处理CSS标记，构成层叠样式表模型CSSOM(CSS Object Model)。\n3. 将DOM和CSSOM合并为渲染树(rendering tree)将会被创建，代表一系列将被渲染的对象。\n4. 渲染树的每个元素包含的内容都是计算过的，它被称之为布局layout。浏览器使用一种流式处理的方法，只需要一次绘制操作就可以布局所有的元素。\n5. 将渲染树的各个节点绘制到屏幕上，这一步被称为绘制painting。\n\n\n需要注意的是，**以上五个步骤并不一定一次性顺序完成**，比如DOM或CSSOM被修改时，亦或是哪个过程会重复执行，这样才能计算出哪些像素需要在屏幕上进行重新渲染。而在实际情况中，JavaScript和CSS的某些操作往往会多次修改DOM或者CSSOM。\n![image](liulanqi1.webp)\n\n### 浏览器渲染网页的具体流程\n\n#### 构建DOM树\n当浏览器接收到服务器响应来的HTML文档后，会遍历文档节点，生成DOM树。\n\n需要注意以下几点：\n1. DOM树在构建的过程中可能会被CSS和JS的加载而执行阻塞\n2. display:none的元素也会在DOM树中\n3. 注释也会在DOM树中\n4. script标签会在DOM树中\n\n无论是DOM还是CSSOM，都是要经过```Bytes→characters→tokens→nodes→objectmodel```这个过程。\n\n![image](liulanqi2.webp)\n当前节点的所有子节点都构建好后才会去构建当前节点的下一个兄弟节点。\n\n#### 构建CSSOM规则树\n浏览器解析CSS文件并生成CSSOM，每个CSS文件都被分析成一个StyleSheet对象，每个对象都包含CSS规则。CSS规则对象包含对应于CSS语法的选择器和声明对象以及其他对象。\n\n在这个过程需要注意的是：\n1. CSS解析可以与DOM解析同时进行。\n2. CSS解析与script的执行互斥 。\n3. 在Webkit内核中进行了script执行优化，只有在JS访问CSS时才会发生互斥。\n\n#### 构建渲染树（Render Tree）\n\n通过DOM树和CSS规则树，浏览器就可以通过它两构建渲染树了。浏览器会先从DOM树的根节点开始遍历每个可见节点，然后对每个可见节点找到适配的CSS样式规则并应用。\n\n有以下几点需要注意：\n1. Render Tree和DOM Tree不完全对应\n2. display: none的元素不在Render Tree中\n3. visibility: hidden的元素在Render Tree中\n\n![image](liulanqi3.webp)\n\n渲染树生成后，还是没有办法渲染到屏幕上，渲染到屏幕需要得到各个节点的位置信息，这就需要布局（Layout）的处理了。\n#### 渲染树布局(layout of the render tree)\n\n布局阶段会从渲染树的根节点开始遍历，由于渲染树的每个节点都是一个Render Object对象，包含宽高，位置，背景色等样式信息。所以浏览器就可以通过这些样式信息来确定每个节点对象在页面上的确切大小和位置，布局阶段的输出就是我们常说的盒子模型，它会精确地捕获每个元素在屏幕内的确切位置与大小。需要注意的是：\n\n1. float元素，absoulte元素，fixed元素会发生位置偏移。\n2. 我们常说的脱离文档流，其实就是脱离Render Tree。\n\n#### 渲染树绘制（Painting the render tree）\n\n在绘制阶段，浏览器会遍历渲染树，调用渲染器的paint()方法在屏幕上显示其内容。渲染树的绘制工作是由浏览器的UI后端组件完成的。\n\n### 浏览器渲染网页的那些事儿\n\n#### 浏览器主要组件结构\n![image](liulanqi4.webp)\n渲染引擎主要有两个：webkit和Gecko\n\nFirefox使用Geoko，Mozilla自主研发的渲染引擎。Safari和Chrome都使用webkit。Webkit是一款开源渲染引擎，它本来是为linux平台研发的，后来由Apple移植到Mac及Windows上。\n\n虽然主流浏览器渲染过程叫法有区别，但是主要流程还是相同的。\n\n#### 渲染阻塞\nJS可以操作DOM来修改DOM结构，可以操作CSSOM来修改节点样式，这就导致了浏览器在遇到```<script>```标签时，DOM构建将暂停，直至脚本完成执行，然后继续构建DOM。如果脚本是外部的，会等待脚本下载完毕，再继续解析文档。现在可以在script标签上增加属性defer或者async。脚本解析会将脚本中改变DOM和CSS的地方分别解析出来，追加到DOM树和CSSOM规则树上。\n\n每次去执行JavaScript脚本都会严重地阻塞DOM树的构建，如果JavaScript脚本还操作了CSSOM，而正好这个CSSOM还没有下载和构建，浏览器甚至会延迟脚本执行和构建DOM，直至完成其CSSOM的下载和构建。所以，script标签的位置很重要。\n\nJS阻塞了构建DOM树，也阻塞了其后的构建CSSOM规则树，整个解析进程必须等待JS的执行完成才能够继续，这就是所谓的JS阻塞页面。\n\n由于CSSOM负责存储渲染信息，浏览器就必须保证在合成渲染树之前，CSSOM是完备的，这种完备是指所有的CSS（内联、内部和外部）都已经下载完，并解析完，只有CSSOM和DOM的解析完全结束，浏览器才会进入下一步的渲染，这就是CSS阻塞渲染。\n\nCSS阻塞渲染意味着，在CSSOM完备前，页面将一直处理白屏状态，这就是为什么样式放在head中，仅仅是为了更快的解析CSS，保证更快的首次渲染。\n\n需要注意的是，即便你没有给页面任何的样式声明，CSSOM依然会生成，默认生成的CSSOM自带浏览器默认样式。\n\n当解析HTML的时候，会把新来的元素插入DOM树里面，同时去查找CSS，然后把对应的样式规则应用到元素上，查找样式表是按照从右到左的顺序去匹配的。\n\n例如：div p {font-size: 16px}，会先寻找所有p标签并判断它的父标签是否为div之后才会决定要不要采用这个样式进行渲染）。\n所以，我们平时写CSS时，尽量用id和class，千万不要过渡层叠。\n\n### 回流和重绘（reflow和repaint）\n我们都知道HTML默认是流式布局的，但CSS和JS会打破这种布局，改变DOM的外观样式以及大小和位置。因此我们就需要知道两个概念：replaint和reflow。\n#### reflow（回流）\n当浏览器发现布局发生了变化，这个时候就需要倒回去重新渲染，大家称这个回退的过程叫```reflow```。```reflow```会从```html```这个```root frame```开始递归往下，依次计算所有的结点几何尺寸和位置，以确认是渲染树的一部分发生变化还是整个渲染树。reflow几乎是无法避免的，因为只要用户进行交互操作，就势必会发生页面的一部分的重新渲染，且通常我们也无法预估浏览器到底会```reflow```哪一部分的代码，因为他们会相互影响。\n\n#### repaint（重绘）\n```repaint``` 则是当我们改变某个元素的背景色、文字颜色、边框颜色等等不影响它周围或内部布局的属性时，屏幕的一部分要重画，但是元素的几何尺寸和位置没有发生改变。\n\n需要注意的是，```display:none会触发reflow，而visibility: hidden```属性则并不算是不可见属性，它的语义是隐藏元素，但元素仍然占据着布局空间，它会被渲染成一个空框。所以visibility:hidden只会触发repaint，因为没有发生位置变化。\n\n另外有些情况下，比如修改了元素的样式，浏览器并不会立刻```reflow```或```repaint```一次，而是会把这样的操作积攒一批，然后做一次```reflow```，这又叫异步```reflow```或增量异步```reflow```。但是在有些情况下，比如```resize```窗口，改变了页面默认的字体等。对于这些操作，浏览器会马上进行```reflow```。\n\n#### 引起reflow\n现代浏览器会对回流做优化，它会等到足够数量的变化发生，再做一次批处理回流。\n\n1. 页面第一次渲染（初始化）\n2. DOM树变化（如：增删节点）\n3. Render树变化（如：padding改变）\n4. 浏览器窗口resize\n5. 获取元素的某些属性\n\n浏览器为了获得正确的值也会提前触发回流，这样就使得浏览器的优化失效了，这些属性包括```offsetLeft、offsetTop、offsetWidth、offsetHeight、 scrollTop/Left/Width/Height、clientTop/Left/Width/Height、```调用了```getComputedStyle()```。\n\n#### 引起repaint\n```reflow``` 回流必定引起```repaint```重绘，重绘可以单独触发。\n\n背景色、颜色、字体改变（注意：字体大小发生变化时，会触发回流）\n\n#### 减少reflow、repaint触发次数\n1. 用transform做形变和位移可以减少reflow\n2. 避免逐个修改节点样式，尽量一次性修改\n3. 使用DocumentFragment将需要多次修改的DOM元素缓存，最后一次性append到真实DOM中渲染\n4. 可以将需要多次修改的DOM元素设置display:none，操作完再显示。（因为隐藏元素不在render树内，因此修改隐藏元素不会触发回流重绘）\n5. 避免多次读取某些属性\n6. 通过绝对位移将复杂的节点元素脱离文档流，形成新的Render Layer，降低回流成本\n\n### 几条关于优化渲染效率的建议\n结合上文有以下几点可以优化渲染效率。\n\n - 合法地去书写HTML和CSS ，且不要忘了文档编码类型。\n - 样式文件应当在head标签中，而脚本文件在body结束前，这样可以防止阻塞的方式。\n - 简化并优化CSS选择器，尽量将嵌套层减少到最小。\n - DOM 的多个读操作（或多个写操作），应该放在一起。不要两个读操作之间，加入一个写操作。\n - 如果某个样式是通过重排得到的，那么最好缓存结果。避免下一次用到的时候，浏览器又要重排。\n - 不要一条条地改变样式，而要通过改变class，或者csstext属性，一次性地改变样式。\n - 尽量用transform来做形变和位移\n - 尽量使用离线DOM，而不是真实的网面DOM，来改变元素样式。比如，操作Document Fragment对象，完成后再把这个对象加入DOM。再比如，使用cloneNode()方法，在克隆的节点上进行操作，然后再用克隆的节点替换原始节点。\n - 先将元素设为display: none（需要1次重排和重绘），然后对这个节点进行100次操作，最后再恢复显示（需要1次重排和重绘）。这样一来，你就用两次重新渲染，取代了可能高达100次的重新渲染。\n - position属性为absolute或fixed的元素，重排的开销会比较小，因为不用考虑它对其他元素的影响。\n - 只在必要的时候，才将元素的display属性为可见，因为不可见的元素不影响重排和重绘。另外，visibility : hidden的元素只对重绘有影响，不影响重排。\n - 使用window.requestAnimationFrame()、window.requestIdleCallback()这两个方法调节重新渲染。\n\n[原文地址](https://www.jianshu.com/p/e6252dc9be32)\n\n","source":"_posts/浏览器渲染原理与过程.md","raw":"---\nlayout: '[post]'\ntitle: 浏览器渲染原理与过程\ndate: 2019-09-27 15:45:31\ntags: 浏览器\n---\n## 浏览器如何渲染网页\n### 什么是DOCTYPE\n在w3school上是这么解释的：<!DOCTYPE>声明不是HTML标签，指示web浏览器关于页面使用哪个HTML版本进行编写的指令；在 HTML 4.01 中，```<!DOCTYPE>``` 声明引用 DTD，因为 HTML 4.01 基于 SGML。DTD 规定了标记语言的规则，这样浏览器才能正确地呈现内容。HTML5 不基于 SGML，所以不需要引用 DTD\n<!-- more -->\n\n**简而言之，<!DOCTYPE>规定了浏览器文档使用哪种html或者xhtml规范**\n\n#### h5中使用\n```\n<!DOCTYPE html>\n```\n#### HTML 4.01 Strict（严格模式）\n\n该 DTD 包含所有 HTML 元素和属性，但不包括展示性的和弃用的元素（比如 font）。不允许框架集（Framesets）。\n\n```\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\n```\n#### HTML 4.01 Transitional（宽松模式）\n\n该 DTD 包含所有 HTML 元素和属性，包括展示性的和弃用的元素（比如 font）。不允许框架集（Framesets）。\n\n```\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \n\"http://www.w3.org/TR/html4/loose.dtd\">\n```\n#### HTML 4.01 Frameset\n该 DTD 等同于 HTML 4.01 Transitional，但允许框架集内容。\n\n```\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Frameset//EN\" \n\"http://www.w3.org/TR/html4/frameset.dtd\">\n```\n#### 名词解释\n##### DTD\nDocument Type Definition，中文翻译为：文档类型定义。DTD可定义合法的XML文档构建模块。它使用一系列合法的元素来定义文档的结构。因为早期的版本基于SGML，所以需要套用SGML的解析规则。DTD的作用在于定义SGML文档的文档类型以便于浏览器解析。\n\n##### SGML\nStandard Generalized Markup language。标准通用标记语言（以下简称“通用标言”），是一种定义电子文档结构和描述其内容的国际标准语言。\n\n\n如果没有<!DOCTYPE>声明，那么不同的浏览器将会以自己不同的怪异的模式去解析渲染页面，这样页面在不同的浏览器上呈现出来的效果也就不一样，人们把这称之为“怪异模式”。\n\n### 浏览器渲染网页过程\n\n要了解浏览器渲染页面的过程，首先得知道一个名词——关键渲染路径。关键渲染路径是指浏览器从最初接收请求来的HTML、CSS、javascript等资源，然后解析、构建树、渲染布局、绘制，最后呈现给客户能看到的界面这整个过程。\n用户看到页面实际上可以分为两个阶段：页面内容加载完成和页面资源加载完成，分别对应于**DOMContentLoaded**和**Load**。\n\n- **DOMContentLoaded**事件触发时，仅当DOM加载完成，不包括样式表，图片等\n - **load**事件触发时，页面上所有的DOM，样式表，脚本，图片都已加载完成\n \n#### 浏览器渲染的过程主要包括以下五步\n1. 浏览器将获取的HTML文档解析成DOM树。\n2. 处理CSS标记，构成层叠样式表模型CSSOM(CSS Object Model)。\n3. 将DOM和CSSOM合并为渲染树(rendering tree)将会被创建，代表一系列将被渲染的对象。\n4. 渲染树的每个元素包含的内容都是计算过的，它被称之为布局layout。浏览器使用一种流式处理的方法，只需要一次绘制操作就可以布局所有的元素。\n5. 将渲染树的各个节点绘制到屏幕上，这一步被称为绘制painting。\n\n\n需要注意的是，**以上五个步骤并不一定一次性顺序完成**，比如DOM或CSSOM被修改时，亦或是哪个过程会重复执行，这样才能计算出哪些像素需要在屏幕上进行重新渲染。而在实际情况中，JavaScript和CSS的某些操作往往会多次修改DOM或者CSSOM。\n![image](liulanqi1.webp)\n\n### 浏览器渲染网页的具体流程\n\n#### 构建DOM树\n当浏览器接收到服务器响应来的HTML文档后，会遍历文档节点，生成DOM树。\n\n需要注意以下几点：\n1. DOM树在构建的过程中可能会被CSS和JS的加载而执行阻塞\n2. display:none的元素也会在DOM树中\n3. 注释也会在DOM树中\n4. script标签会在DOM树中\n\n无论是DOM还是CSSOM，都是要经过```Bytes→characters→tokens→nodes→objectmodel```这个过程。\n\n![image](liulanqi2.webp)\n当前节点的所有子节点都构建好后才会去构建当前节点的下一个兄弟节点。\n\n#### 构建CSSOM规则树\n浏览器解析CSS文件并生成CSSOM，每个CSS文件都被分析成一个StyleSheet对象，每个对象都包含CSS规则。CSS规则对象包含对应于CSS语法的选择器和声明对象以及其他对象。\n\n在这个过程需要注意的是：\n1. CSS解析可以与DOM解析同时进行。\n2. CSS解析与script的执行互斥 。\n3. 在Webkit内核中进行了script执行优化，只有在JS访问CSS时才会发生互斥。\n\n#### 构建渲染树（Render Tree）\n\n通过DOM树和CSS规则树，浏览器就可以通过它两构建渲染树了。浏览器会先从DOM树的根节点开始遍历每个可见节点，然后对每个可见节点找到适配的CSS样式规则并应用。\n\n有以下几点需要注意：\n1. Render Tree和DOM Tree不完全对应\n2. display: none的元素不在Render Tree中\n3. visibility: hidden的元素在Render Tree中\n\n![image](liulanqi3.webp)\n\n渲染树生成后，还是没有办法渲染到屏幕上，渲染到屏幕需要得到各个节点的位置信息，这就需要布局（Layout）的处理了。\n#### 渲染树布局(layout of the render tree)\n\n布局阶段会从渲染树的根节点开始遍历，由于渲染树的每个节点都是一个Render Object对象，包含宽高，位置，背景色等样式信息。所以浏览器就可以通过这些样式信息来确定每个节点对象在页面上的确切大小和位置，布局阶段的输出就是我们常说的盒子模型，它会精确地捕获每个元素在屏幕内的确切位置与大小。需要注意的是：\n\n1. float元素，absoulte元素，fixed元素会发生位置偏移。\n2. 我们常说的脱离文档流，其实就是脱离Render Tree。\n\n#### 渲染树绘制（Painting the render tree）\n\n在绘制阶段，浏览器会遍历渲染树，调用渲染器的paint()方法在屏幕上显示其内容。渲染树的绘制工作是由浏览器的UI后端组件完成的。\n\n### 浏览器渲染网页的那些事儿\n\n#### 浏览器主要组件结构\n![image](liulanqi4.webp)\n渲染引擎主要有两个：webkit和Gecko\n\nFirefox使用Geoko，Mozilla自主研发的渲染引擎。Safari和Chrome都使用webkit。Webkit是一款开源渲染引擎，它本来是为linux平台研发的，后来由Apple移植到Mac及Windows上。\n\n虽然主流浏览器渲染过程叫法有区别，但是主要流程还是相同的。\n\n#### 渲染阻塞\nJS可以操作DOM来修改DOM结构，可以操作CSSOM来修改节点样式，这就导致了浏览器在遇到```<script>```标签时，DOM构建将暂停，直至脚本完成执行，然后继续构建DOM。如果脚本是外部的，会等待脚本下载完毕，再继续解析文档。现在可以在script标签上增加属性defer或者async。脚本解析会将脚本中改变DOM和CSS的地方分别解析出来，追加到DOM树和CSSOM规则树上。\n\n每次去执行JavaScript脚本都会严重地阻塞DOM树的构建，如果JavaScript脚本还操作了CSSOM，而正好这个CSSOM还没有下载和构建，浏览器甚至会延迟脚本执行和构建DOM，直至完成其CSSOM的下载和构建。所以，script标签的位置很重要。\n\nJS阻塞了构建DOM树，也阻塞了其后的构建CSSOM规则树，整个解析进程必须等待JS的执行完成才能够继续，这就是所谓的JS阻塞页面。\n\n由于CSSOM负责存储渲染信息，浏览器就必须保证在合成渲染树之前，CSSOM是完备的，这种完备是指所有的CSS（内联、内部和外部）都已经下载完，并解析完，只有CSSOM和DOM的解析完全结束，浏览器才会进入下一步的渲染，这就是CSS阻塞渲染。\n\nCSS阻塞渲染意味着，在CSSOM完备前，页面将一直处理白屏状态，这就是为什么样式放在head中，仅仅是为了更快的解析CSS，保证更快的首次渲染。\n\n需要注意的是，即便你没有给页面任何的样式声明，CSSOM依然会生成，默认生成的CSSOM自带浏览器默认样式。\n\n当解析HTML的时候，会把新来的元素插入DOM树里面，同时去查找CSS，然后把对应的样式规则应用到元素上，查找样式表是按照从右到左的顺序去匹配的。\n\n例如：div p {font-size: 16px}，会先寻找所有p标签并判断它的父标签是否为div之后才会决定要不要采用这个样式进行渲染）。\n所以，我们平时写CSS时，尽量用id和class，千万不要过渡层叠。\n\n### 回流和重绘（reflow和repaint）\n我们都知道HTML默认是流式布局的，但CSS和JS会打破这种布局，改变DOM的外观样式以及大小和位置。因此我们就需要知道两个概念：replaint和reflow。\n#### reflow（回流）\n当浏览器发现布局发生了变化，这个时候就需要倒回去重新渲染，大家称这个回退的过程叫```reflow```。```reflow```会从```html```这个```root frame```开始递归往下，依次计算所有的结点几何尺寸和位置，以确认是渲染树的一部分发生变化还是整个渲染树。reflow几乎是无法避免的，因为只要用户进行交互操作，就势必会发生页面的一部分的重新渲染，且通常我们也无法预估浏览器到底会```reflow```哪一部分的代码，因为他们会相互影响。\n\n#### repaint（重绘）\n```repaint``` 则是当我们改变某个元素的背景色、文字颜色、边框颜色等等不影响它周围或内部布局的属性时，屏幕的一部分要重画，但是元素的几何尺寸和位置没有发生改变。\n\n需要注意的是，```display:none会触发reflow，而visibility: hidden```属性则并不算是不可见属性，它的语义是隐藏元素，但元素仍然占据着布局空间，它会被渲染成一个空框。所以visibility:hidden只会触发repaint，因为没有发生位置变化。\n\n另外有些情况下，比如修改了元素的样式，浏览器并不会立刻```reflow```或```repaint```一次，而是会把这样的操作积攒一批，然后做一次```reflow```，这又叫异步```reflow```或增量异步```reflow```。但是在有些情况下，比如```resize```窗口，改变了页面默认的字体等。对于这些操作，浏览器会马上进行```reflow```。\n\n#### 引起reflow\n现代浏览器会对回流做优化，它会等到足够数量的变化发生，再做一次批处理回流。\n\n1. 页面第一次渲染（初始化）\n2. DOM树变化（如：增删节点）\n3. Render树变化（如：padding改变）\n4. 浏览器窗口resize\n5. 获取元素的某些属性\n\n浏览器为了获得正确的值也会提前触发回流，这样就使得浏览器的优化失效了，这些属性包括```offsetLeft、offsetTop、offsetWidth、offsetHeight、 scrollTop/Left/Width/Height、clientTop/Left/Width/Height、```调用了```getComputedStyle()```。\n\n#### 引起repaint\n```reflow``` 回流必定引起```repaint```重绘，重绘可以单独触发。\n\n背景色、颜色、字体改变（注意：字体大小发生变化时，会触发回流）\n\n#### 减少reflow、repaint触发次数\n1. 用transform做形变和位移可以减少reflow\n2. 避免逐个修改节点样式，尽量一次性修改\n3. 使用DocumentFragment将需要多次修改的DOM元素缓存，最后一次性append到真实DOM中渲染\n4. 可以将需要多次修改的DOM元素设置display:none，操作完再显示。（因为隐藏元素不在render树内，因此修改隐藏元素不会触发回流重绘）\n5. 避免多次读取某些属性\n6. 通过绝对位移将复杂的节点元素脱离文档流，形成新的Render Layer，降低回流成本\n\n### 几条关于优化渲染效率的建议\n结合上文有以下几点可以优化渲染效率。\n\n - 合法地去书写HTML和CSS ，且不要忘了文档编码类型。\n - 样式文件应当在head标签中，而脚本文件在body结束前，这样可以防止阻塞的方式。\n - 简化并优化CSS选择器，尽量将嵌套层减少到最小。\n - DOM 的多个读操作（或多个写操作），应该放在一起。不要两个读操作之间，加入一个写操作。\n - 如果某个样式是通过重排得到的，那么最好缓存结果。避免下一次用到的时候，浏览器又要重排。\n - 不要一条条地改变样式，而要通过改变class，或者csstext属性，一次性地改变样式。\n - 尽量用transform来做形变和位移\n - 尽量使用离线DOM，而不是真实的网面DOM，来改变元素样式。比如，操作Document Fragment对象，完成后再把这个对象加入DOM。再比如，使用cloneNode()方法，在克隆的节点上进行操作，然后再用克隆的节点替换原始节点。\n - 先将元素设为display: none（需要1次重排和重绘），然后对这个节点进行100次操作，最后再恢复显示（需要1次重排和重绘）。这样一来，你就用两次重新渲染，取代了可能高达100次的重新渲染。\n - position属性为absolute或fixed的元素，重排的开销会比较小，因为不用考虑它对其他元素的影响。\n - 只在必要的时候，才将元素的display属性为可见，因为不可见的元素不影响重排和重绘。另外，visibility : hidden的元素只对重绘有影响，不影响重排。\n - 使用window.requestAnimationFrame()、window.requestIdleCallback()这两个方法调节重新渲染。\n\n[原文地址](https://www.jianshu.com/p/e6252dc9be32)\n\n","slug":"浏览器渲染原理与过程","published":1,"updated":"2020-04-27T07:48:50.000Z","comments":1,"photos":[],"link":"","_id":"ck9v62x80001gqqs62a8169rx","content":"<h2 id=\"浏览器如何渲染网页\"><a href=\"#浏览器如何渲染网页\" class=\"headerlink\" title=\"浏览器如何渲染网页\"></a>浏览器如何渲染网页</h2><h3 id=\"什么是DOCTYPE\"><a href=\"#什么是DOCTYPE\" class=\"headerlink\" title=\"什么是DOCTYPE\"></a>什么是DOCTYPE</h3><p>在w3school上是这么解释的：&lt;!DOCTYPE&gt;声明不是HTML标签，指示web浏览器关于页面使用哪个HTML版本进行编写的指令；在 HTML 4.01 中，<code>&lt;!DOCTYPE&gt;</code> 声明引用 DTD，因为 HTML 4.01 基于 SGML。DTD 规定了标记语言的规则，这样浏览器才能正确地呈现内容。HTML5 不基于 SGML，所以不需要引用 DTD</p>\n<a id=\"more\"></a>\n\n<p><strong>简而言之，&lt;!DOCTYPE&gt;规定了浏览器文档使用哪种html或者xhtml规范</strong></p>\n<h4 id=\"h5中使用\"><a href=\"#h5中使用\" class=\"headerlink\" title=\"h5中使用\"></a>h5中使用</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"HTML-4-01-Strict（严格模式）\"><a href=\"#HTML-4-01-Strict（严格模式）\" class=\"headerlink\" title=\"HTML 4.01 Strict（严格模式）\"></a>HTML 4.01 Strict（严格模式）</h4><p>该 DTD 包含所有 HTML 元素和属性，但不包括展示性的和弃用的元素（比如 font）。不允许框架集（Framesets）。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE HTML PUBLIC &quot;-&#x2F;&#x2F;W3C&#x2F;&#x2F;DTD HTML 4.01&#x2F;&#x2F;EN&quot; &quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;html4&#x2F;strict.dtd&quot;&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"HTML-4-01-Transitional（宽松模式）\"><a href=\"#HTML-4-01-Transitional（宽松模式）\" class=\"headerlink\" title=\"HTML 4.01 Transitional（宽松模式）\"></a>HTML 4.01 Transitional（宽松模式）</h4><p>该 DTD 包含所有 HTML 元素和属性，包括展示性的和弃用的元素（比如 font）。不允许框架集（Framesets）。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE HTML PUBLIC &quot;-&#x2F;&#x2F;W3C&#x2F;&#x2F;DTD HTML 4.01 Transitional&#x2F;&#x2F;EN&quot; </span><br><span class=\"line\">&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;html4&#x2F;loose.dtd&quot;&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"HTML-4-01-Frameset\"><a href=\"#HTML-4-01-Frameset\" class=\"headerlink\" title=\"HTML 4.01 Frameset\"></a>HTML 4.01 Frameset</h4><p>该 DTD 等同于 HTML 4.01 Transitional，但允许框架集内容。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE HTML PUBLIC &quot;-&#x2F;&#x2F;W3C&#x2F;&#x2F;DTD HTML 4.01 Frameset&#x2F;&#x2F;EN&quot; </span><br><span class=\"line\">&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;html4&#x2F;frameset.dtd&quot;&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"名词解释\"><a href=\"#名词解释\" class=\"headerlink\" title=\"名词解释\"></a>名词解释</h4><h5 id=\"DTD\"><a href=\"#DTD\" class=\"headerlink\" title=\"DTD\"></a>DTD</h5><p>Document Type Definition，中文翻译为：文档类型定义。DTD可定义合法的XML文档构建模块。它使用一系列合法的元素来定义文档的结构。因为早期的版本基于SGML，所以需要套用SGML的解析规则。DTD的作用在于定义SGML文档的文档类型以便于浏览器解析。</p>\n<h5 id=\"SGML\"><a href=\"#SGML\" class=\"headerlink\" title=\"SGML\"></a>SGML</h5><p>Standard Generalized Markup language。标准通用标记语言（以下简称“通用标言”），是一种定义电子文档结构和描述其内容的国际标准语言。</p>\n<p>如果没有&lt;!DOCTYPE&gt;声明，那么不同的浏览器将会以自己不同的怪异的模式去解析渲染页面，这样页面在不同的浏览器上呈现出来的效果也就不一样，人们把这称之为“怪异模式”。</p>\n<h3 id=\"浏览器渲染网页过程\"><a href=\"#浏览器渲染网页过程\" class=\"headerlink\" title=\"浏览器渲染网页过程\"></a>浏览器渲染网页过程</h3><p>要了解浏览器渲染页面的过程，首先得知道一个名词——关键渲染路径。关键渲染路径是指浏览器从最初接收请求来的HTML、CSS、javascript等资源，然后解析、构建树、渲染布局、绘制，最后呈现给客户能看到的界面这整个过程。<br>用户看到页面实际上可以分为两个阶段：页面内容加载完成和页面资源加载完成，分别对应于<strong>DOMContentLoaded</strong>和<strong>Load</strong>。</p>\n<ul>\n<li><strong>DOMContentLoaded</strong>事件触发时，仅当DOM加载完成，不包括样式表，图片等<ul>\n<li><strong>load</strong>事件触发时，页面上所有的DOM，样式表，脚本，图片都已加载完成</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"浏览器渲染的过程主要包括以下五步\"><a href=\"#浏览器渲染的过程主要包括以下五步\" class=\"headerlink\" title=\"浏览器渲染的过程主要包括以下五步\"></a>浏览器渲染的过程主要包括以下五步</h4><ol>\n<li>浏览器将获取的HTML文档解析成DOM树。</li>\n<li>处理CSS标记，构成层叠样式表模型CSSOM(CSS Object Model)。</li>\n<li>将DOM和CSSOM合并为渲染树(rendering tree)将会被创建，代表一系列将被渲染的对象。</li>\n<li>渲染树的每个元素包含的内容都是计算过的，它被称之为布局layout。浏览器使用一种流式处理的方法，只需要一次绘制操作就可以布局所有的元素。</li>\n<li>将渲染树的各个节点绘制到屏幕上，这一步被称为绘制painting。</li>\n</ol>\n<p>需要注意的是，<strong>以上五个步骤并不一定一次性顺序完成</strong>，比如DOM或CSSOM被修改时，亦或是哪个过程会重复执行，这样才能计算出哪些像素需要在屏幕上进行重新渲染。而在实际情况中，JavaScript和CSS的某些操作往往会多次修改DOM或者CSSOM。<br><img src=\"/2019/09/27/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86%E4%B8%8E%E8%BF%87%E7%A8%8B/liulanqi1.webp\" alt=\"image\"></p>\n<h3 id=\"浏览器渲染网页的具体流程\"><a href=\"#浏览器渲染网页的具体流程\" class=\"headerlink\" title=\"浏览器渲染网页的具体流程\"></a>浏览器渲染网页的具体流程</h3><h4 id=\"构建DOM树\"><a href=\"#构建DOM树\" class=\"headerlink\" title=\"构建DOM树\"></a>构建DOM树</h4><p>当浏览器接收到服务器响应来的HTML文档后，会遍历文档节点，生成DOM树。</p>\n<p>需要注意以下几点：</p>\n<ol>\n<li>DOM树在构建的过程中可能会被CSS和JS的加载而执行阻塞</li>\n<li>display:none的元素也会在DOM树中</li>\n<li>注释也会在DOM树中</li>\n<li>script标签会在DOM树中</li>\n</ol>\n<p>无论是DOM还是CSSOM，都是要经过<code>Bytes→characters→tokens→nodes→objectmodel</code>这个过程。</p>\n<p><img src=\"/2019/09/27/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86%E4%B8%8E%E8%BF%87%E7%A8%8B/liulanqi2.webp\" alt=\"image\"><br>当前节点的所有子节点都构建好后才会去构建当前节点的下一个兄弟节点。</p>\n<h4 id=\"构建CSSOM规则树\"><a href=\"#构建CSSOM规则树\" class=\"headerlink\" title=\"构建CSSOM规则树\"></a>构建CSSOM规则树</h4><p>浏览器解析CSS文件并生成CSSOM，每个CSS文件都被分析成一个StyleSheet对象，每个对象都包含CSS规则。CSS规则对象包含对应于CSS语法的选择器和声明对象以及其他对象。</p>\n<p>在这个过程需要注意的是：</p>\n<ol>\n<li>CSS解析可以与DOM解析同时进行。</li>\n<li>CSS解析与script的执行互斥 。</li>\n<li>在Webkit内核中进行了script执行优化，只有在JS访问CSS时才会发生互斥。</li>\n</ol>\n<h4 id=\"构建渲染树（Render-Tree）\"><a href=\"#构建渲染树（Render-Tree）\" class=\"headerlink\" title=\"构建渲染树（Render Tree）\"></a>构建渲染树（Render Tree）</h4><p>通过DOM树和CSS规则树，浏览器就可以通过它两构建渲染树了。浏览器会先从DOM树的根节点开始遍历每个可见节点，然后对每个可见节点找到适配的CSS样式规则并应用。</p>\n<p>有以下几点需要注意：</p>\n<ol>\n<li>Render Tree和DOM Tree不完全对应</li>\n<li>display: none的元素不在Render Tree中</li>\n<li>visibility: hidden的元素在Render Tree中</li>\n</ol>\n<p><img src=\"/2019/09/27/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86%E4%B8%8E%E8%BF%87%E7%A8%8B/liulanqi3.webp\" alt=\"image\"></p>\n<p>渲染树生成后，还是没有办法渲染到屏幕上，渲染到屏幕需要得到各个节点的位置信息，这就需要布局（Layout）的处理了。</p>\n<h4 id=\"渲染树布局-layout-of-the-render-tree\"><a href=\"#渲染树布局-layout-of-the-render-tree\" class=\"headerlink\" title=\"渲染树布局(layout of the render tree)\"></a>渲染树布局(layout of the render tree)</h4><p>布局阶段会从渲染树的根节点开始遍历，由于渲染树的每个节点都是一个Render Object对象，包含宽高，位置，背景色等样式信息。所以浏览器就可以通过这些样式信息来确定每个节点对象在页面上的确切大小和位置，布局阶段的输出就是我们常说的盒子模型，它会精确地捕获每个元素在屏幕内的确切位置与大小。需要注意的是：</p>\n<ol>\n<li>float元素，absoulte元素，fixed元素会发生位置偏移。</li>\n<li>我们常说的脱离文档流，其实就是脱离Render Tree。</li>\n</ol>\n<h4 id=\"渲染树绘制（Painting-the-render-tree）\"><a href=\"#渲染树绘制（Painting-the-render-tree）\" class=\"headerlink\" title=\"渲染树绘制（Painting the render tree）\"></a>渲染树绘制（Painting the render tree）</h4><p>在绘制阶段，浏览器会遍历渲染树，调用渲染器的paint()方法在屏幕上显示其内容。渲染树的绘制工作是由浏览器的UI后端组件完成的。</p>\n<h3 id=\"浏览器渲染网页的那些事儿\"><a href=\"#浏览器渲染网页的那些事儿\" class=\"headerlink\" title=\"浏览器渲染网页的那些事儿\"></a>浏览器渲染网页的那些事儿</h3><h4 id=\"浏览器主要组件结构\"><a href=\"#浏览器主要组件结构\" class=\"headerlink\" title=\"浏览器主要组件结构\"></a>浏览器主要组件结构</h4><p><img src=\"/2019/09/27/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86%E4%B8%8E%E8%BF%87%E7%A8%8B/liulanqi4.webp\" alt=\"image\"><br>渲染引擎主要有两个：webkit和Gecko</p>\n<p>Firefox使用Geoko，Mozilla自主研发的渲染引擎。Safari和Chrome都使用webkit。Webkit是一款开源渲染引擎，它本来是为linux平台研发的，后来由Apple移植到Mac及Windows上。</p>\n<p>虽然主流浏览器渲染过程叫法有区别，但是主要流程还是相同的。</p>\n<h4 id=\"渲染阻塞\"><a href=\"#渲染阻塞\" class=\"headerlink\" title=\"渲染阻塞\"></a>渲染阻塞</h4><p>JS可以操作DOM来修改DOM结构，可以操作CSSOM来修改节点样式，这就导致了浏览器在遇到<code>&lt;script&gt;</code>标签时，DOM构建将暂停，直至脚本完成执行，然后继续构建DOM。如果脚本是外部的，会等待脚本下载完毕，再继续解析文档。现在可以在script标签上增加属性defer或者async。脚本解析会将脚本中改变DOM和CSS的地方分别解析出来，追加到DOM树和CSSOM规则树上。</p>\n<p>每次去执行JavaScript脚本都会严重地阻塞DOM树的构建，如果JavaScript脚本还操作了CSSOM，而正好这个CSSOM还没有下载和构建，浏览器甚至会延迟脚本执行和构建DOM，直至完成其CSSOM的下载和构建。所以，script标签的位置很重要。</p>\n<p>JS阻塞了构建DOM树，也阻塞了其后的构建CSSOM规则树，整个解析进程必须等待JS的执行完成才能够继续，这就是所谓的JS阻塞页面。</p>\n<p>由于CSSOM负责存储渲染信息，浏览器就必须保证在合成渲染树之前，CSSOM是完备的，这种完备是指所有的CSS（内联、内部和外部）都已经下载完，并解析完，只有CSSOM和DOM的解析完全结束，浏览器才会进入下一步的渲染，这就是CSS阻塞渲染。</p>\n<p>CSS阻塞渲染意味着，在CSSOM完备前，页面将一直处理白屏状态，这就是为什么样式放在head中，仅仅是为了更快的解析CSS，保证更快的首次渲染。</p>\n<p>需要注意的是，即便你没有给页面任何的样式声明，CSSOM依然会生成，默认生成的CSSOM自带浏览器默认样式。</p>\n<p>当解析HTML的时候，会把新来的元素插入DOM树里面，同时去查找CSS，然后把对应的样式规则应用到元素上，查找样式表是按照从右到左的顺序去匹配的。</p>\n<p>例如：div p {font-size: 16px}，会先寻找所有p标签并判断它的父标签是否为div之后才会决定要不要采用这个样式进行渲染）。<br>所以，我们平时写CSS时，尽量用id和class，千万不要过渡层叠。</p>\n<h3 id=\"回流和重绘（reflow和repaint）\"><a href=\"#回流和重绘（reflow和repaint）\" class=\"headerlink\" title=\"回流和重绘（reflow和repaint）\"></a>回流和重绘（reflow和repaint）</h3><p>我们都知道HTML默认是流式布局的，但CSS和JS会打破这种布局，改变DOM的外观样式以及大小和位置。因此我们就需要知道两个概念：replaint和reflow。</p>\n<h4 id=\"reflow（回流）\"><a href=\"#reflow（回流）\" class=\"headerlink\" title=\"reflow（回流）\"></a>reflow（回流）</h4><p>当浏览器发现布局发生了变化，这个时候就需要倒回去重新渲染，大家称这个回退的过程叫<code>reflow</code>。<code>reflow</code>会从<code>html</code>这个<code>root frame</code>开始递归往下，依次计算所有的结点几何尺寸和位置，以确认是渲染树的一部分发生变化还是整个渲染树。reflow几乎是无法避免的，因为只要用户进行交互操作，就势必会发生页面的一部分的重新渲染，且通常我们也无法预估浏览器到底会<code>reflow</code>哪一部分的代码，因为他们会相互影响。</p>\n<h4 id=\"repaint（重绘）\"><a href=\"#repaint（重绘）\" class=\"headerlink\" title=\"repaint（重绘）\"></a>repaint（重绘）</h4><p><code>repaint</code> 则是当我们改变某个元素的背景色、文字颜色、边框颜色等等不影响它周围或内部布局的属性时，屏幕的一部分要重画，但是元素的几何尺寸和位置没有发生改变。</p>\n<p>需要注意的是，<code>display:none会触发reflow，而visibility: hidden</code>属性则并不算是不可见属性，它的语义是隐藏元素，但元素仍然占据着布局空间，它会被渲染成一个空框。所以visibility:hidden只会触发repaint，因为没有发生位置变化。</p>\n<p>另外有些情况下，比如修改了元素的样式，浏览器并不会立刻<code>reflow</code>或<code>repaint</code>一次，而是会把这样的操作积攒一批，然后做一次<code>reflow</code>，这又叫异步<code>reflow</code>或增量异步<code>reflow</code>。但是在有些情况下，比如<code>resize</code>窗口，改变了页面默认的字体等。对于这些操作，浏览器会马上进行<code>reflow</code>。</p>\n<h4 id=\"引起reflow\"><a href=\"#引起reflow\" class=\"headerlink\" title=\"引起reflow\"></a>引起reflow</h4><p>现代浏览器会对回流做优化，它会等到足够数量的变化发生，再做一次批处理回流。</p>\n<ol>\n<li>页面第一次渲染（初始化）</li>\n<li>DOM树变化（如：增删节点）</li>\n<li>Render树变化（如：padding改变）</li>\n<li>浏览器窗口resize</li>\n<li>获取元素的某些属性</li>\n</ol>\n<p>浏览器为了获得正确的值也会提前触发回流，这样就使得浏览器的优化失效了，这些属性包括<code>offsetLeft、offsetTop、offsetWidth、offsetHeight、 scrollTop/Left/Width/Height、clientTop/Left/Width/Height、</code>调用了<code>getComputedStyle()</code>。</p>\n<h4 id=\"引起repaint\"><a href=\"#引起repaint\" class=\"headerlink\" title=\"引起repaint\"></a>引起repaint</h4><p><code>reflow</code> 回流必定引起<code>repaint</code>重绘，重绘可以单独触发。</p>\n<p>背景色、颜色、字体改变（注意：字体大小发生变化时，会触发回流）</p>\n<h4 id=\"减少reflow、repaint触发次数\"><a href=\"#减少reflow、repaint触发次数\" class=\"headerlink\" title=\"减少reflow、repaint触发次数\"></a>减少reflow、repaint触发次数</h4><ol>\n<li>用transform做形变和位移可以减少reflow</li>\n<li>避免逐个修改节点样式，尽量一次性修改</li>\n<li>使用DocumentFragment将需要多次修改的DOM元素缓存，最后一次性append到真实DOM中渲染</li>\n<li>可以将需要多次修改的DOM元素设置display:none，操作完再显示。（因为隐藏元素不在render树内，因此修改隐藏元素不会触发回流重绘）</li>\n<li>避免多次读取某些属性</li>\n<li>通过绝对位移将复杂的节点元素脱离文档流，形成新的Render Layer，降低回流成本</li>\n</ol>\n<h3 id=\"几条关于优化渲染效率的建议\"><a href=\"#几条关于优化渲染效率的建议\" class=\"headerlink\" title=\"几条关于优化渲染效率的建议\"></a>几条关于优化渲染效率的建议</h3><p>结合上文有以下几点可以优化渲染效率。</p>\n<ul>\n<li>合法地去书写HTML和CSS ，且不要忘了文档编码类型。</li>\n<li>样式文件应当在head标签中，而脚本文件在body结束前，这样可以防止阻塞的方式。</li>\n<li>简化并优化CSS选择器，尽量将嵌套层减少到最小。</li>\n<li>DOM 的多个读操作（或多个写操作），应该放在一起。不要两个读操作之间，加入一个写操作。</li>\n<li>如果某个样式是通过重排得到的，那么最好缓存结果。避免下一次用到的时候，浏览器又要重排。</li>\n<li>不要一条条地改变样式，而要通过改变class，或者csstext属性，一次性地改变样式。</li>\n<li>尽量用transform来做形变和位移</li>\n<li>尽量使用离线DOM，而不是真实的网面DOM，来改变元素样式。比如，操作Document Fragment对象，完成后再把这个对象加入DOM。再比如，使用cloneNode()方法，在克隆的节点上进行操作，然后再用克隆的节点替换原始节点。</li>\n<li>先将元素设为display: none（需要1次重排和重绘），然后对这个节点进行100次操作，最后再恢复显示（需要1次重排和重绘）。这样一来，你就用两次重新渲染，取代了可能高达100次的重新渲染。</li>\n<li>position属性为absolute或fixed的元素，重排的开销会比较小，因为不用考虑它对其他元素的影响。</li>\n<li>只在必要的时候，才将元素的display属性为可见，因为不可见的元素不影响重排和重绘。另外，visibility : hidden的元素只对重绘有影响，不影响重排。</li>\n<li>使用window.requestAnimationFrame()、window.requestIdleCallback()这两个方法调节重新渲染。</li>\n</ul>\n<p><a href=\"https://www.jianshu.com/p/e6252dc9be32\" target=\"_blank\" rel=\"noopener\">原文地址</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"浏览器如何渲染网页\"><a href=\"#浏览器如何渲染网页\" class=\"headerlink\" title=\"浏览器如何渲染网页\"></a>浏览器如何渲染网页</h2><h3 id=\"什么是DOCTYPE\"><a href=\"#什么是DOCTYPE\" class=\"headerlink\" title=\"什么是DOCTYPE\"></a>什么是DOCTYPE</h3><p>在w3school上是这么解释的：&lt;!DOCTYPE&gt;声明不是HTML标签，指示web浏览器关于页面使用哪个HTML版本进行编写的指令；在 HTML 4.01 中，<code>&lt;!DOCTYPE&gt;</code> 声明引用 DTD，因为 HTML 4.01 基于 SGML。DTD 规定了标记语言的规则，这样浏览器才能正确地呈现内容。HTML5 不基于 SGML，所以不需要引用 DTD</p>","more":"<p><strong>简而言之，&lt;!DOCTYPE&gt;规定了浏览器文档使用哪种html或者xhtml规范</strong></p>\n<h4 id=\"h5中使用\"><a href=\"#h5中使用\" class=\"headerlink\" title=\"h5中使用\"></a>h5中使用</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"HTML-4-01-Strict（严格模式）\"><a href=\"#HTML-4-01-Strict（严格模式）\" class=\"headerlink\" title=\"HTML 4.01 Strict（严格模式）\"></a>HTML 4.01 Strict（严格模式）</h4><p>该 DTD 包含所有 HTML 元素和属性，但不包括展示性的和弃用的元素（比如 font）。不允许框架集（Framesets）。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE HTML PUBLIC &quot;-&#x2F;&#x2F;W3C&#x2F;&#x2F;DTD HTML 4.01&#x2F;&#x2F;EN&quot; &quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;html4&#x2F;strict.dtd&quot;&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"HTML-4-01-Transitional（宽松模式）\"><a href=\"#HTML-4-01-Transitional（宽松模式）\" class=\"headerlink\" title=\"HTML 4.01 Transitional（宽松模式）\"></a>HTML 4.01 Transitional（宽松模式）</h4><p>该 DTD 包含所有 HTML 元素和属性，包括展示性的和弃用的元素（比如 font）。不允许框架集（Framesets）。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE HTML PUBLIC &quot;-&#x2F;&#x2F;W3C&#x2F;&#x2F;DTD HTML 4.01 Transitional&#x2F;&#x2F;EN&quot; </span><br><span class=\"line\">&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;html4&#x2F;loose.dtd&quot;&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"HTML-4-01-Frameset\"><a href=\"#HTML-4-01-Frameset\" class=\"headerlink\" title=\"HTML 4.01 Frameset\"></a>HTML 4.01 Frameset</h4><p>该 DTD 等同于 HTML 4.01 Transitional，但允许框架集内容。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE HTML PUBLIC &quot;-&#x2F;&#x2F;W3C&#x2F;&#x2F;DTD HTML 4.01 Frameset&#x2F;&#x2F;EN&quot; </span><br><span class=\"line\">&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;html4&#x2F;frameset.dtd&quot;&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"名词解释\"><a href=\"#名词解释\" class=\"headerlink\" title=\"名词解释\"></a>名词解释</h4><h5 id=\"DTD\"><a href=\"#DTD\" class=\"headerlink\" title=\"DTD\"></a>DTD</h5><p>Document Type Definition，中文翻译为：文档类型定义。DTD可定义合法的XML文档构建模块。它使用一系列合法的元素来定义文档的结构。因为早期的版本基于SGML，所以需要套用SGML的解析规则。DTD的作用在于定义SGML文档的文档类型以便于浏览器解析。</p>\n<h5 id=\"SGML\"><a href=\"#SGML\" class=\"headerlink\" title=\"SGML\"></a>SGML</h5><p>Standard Generalized Markup language。标准通用标记语言（以下简称“通用标言”），是一种定义电子文档结构和描述其内容的国际标准语言。</p>\n<p>如果没有&lt;!DOCTYPE&gt;声明，那么不同的浏览器将会以自己不同的怪异的模式去解析渲染页面，这样页面在不同的浏览器上呈现出来的效果也就不一样，人们把这称之为“怪异模式”。</p>\n<h3 id=\"浏览器渲染网页过程\"><a href=\"#浏览器渲染网页过程\" class=\"headerlink\" title=\"浏览器渲染网页过程\"></a>浏览器渲染网页过程</h3><p>要了解浏览器渲染页面的过程，首先得知道一个名词——关键渲染路径。关键渲染路径是指浏览器从最初接收请求来的HTML、CSS、javascript等资源，然后解析、构建树、渲染布局、绘制，最后呈现给客户能看到的界面这整个过程。<br>用户看到页面实际上可以分为两个阶段：页面内容加载完成和页面资源加载完成，分别对应于<strong>DOMContentLoaded</strong>和<strong>Load</strong>。</p>\n<ul>\n<li><strong>DOMContentLoaded</strong>事件触发时，仅当DOM加载完成，不包括样式表，图片等<ul>\n<li><strong>load</strong>事件触发时，页面上所有的DOM，样式表，脚本，图片都已加载完成</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"浏览器渲染的过程主要包括以下五步\"><a href=\"#浏览器渲染的过程主要包括以下五步\" class=\"headerlink\" title=\"浏览器渲染的过程主要包括以下五步\"></a>浏览器渲染的过程主要包括以下五步</h4><ol>\n<li>浏览器将获取的HTML文档解析成DOM树。</li>\n<li>处理CSS标记，构成层叠样式表模型CSSOM(CSS Object Model)。</li>\n<li>将DOM和CSSOM合并为渲染树(rendering tree)将会被创建，代表一系列将被渲染的对象。</li>\n<li>渲染树的每个元素包含的内容都是计算过的，它被称之为布局layout。浏览器使用一种流式处理的方法，只需要一次绘制操作就可以布局所有的元素。</li>\n<li>将渲染树的各个节点绘制到屏幕上，这一步被称为绘制painting。</li>\n</ol>\n<p>需要注意的是，<strong>以上五个步骤并不一定一次性顺序完成</strong>，比如DOM或CSSOM被修改时，亦或是哪个过程会重复执行，这样才能计算出哪些像素需要在屏幕上进行重新渲染。而在实际情况中，JavaScript和CSS的某些操作往往会多次修改DOM或者CSSOM。<br><img src=\"/2019/09/27/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86%E4%B8%8E%E8%BF%87%E7%A8%8B/liulanqi1.webp\" alt=\"image\"></p>\n<h3 id=\"浏览器渲染网页的具体流程\"><a href=\"#浏览器渲染网页的具体流程\" class=\"headerlink\" title=\"浏览器渲染网页的具体流程\"></a>浏览器渲染网页的具体流程</h3><h4 id=\"构建DOM树\"><a href=\"#构建DOM树\" class=\"headerlink\" title=\"构建DOM树\"></a>构建DOM树</h4><p>当浏览器接收到服务器响应来的HTML文档后，会遍历文档节点，生成DOM树。</p>\n<p>需要注意以下几点：</p>\n<ol>\n<li>DOM树在构建的过程中可能会被CSS和JS的加载而执行阻塞</li>\n<li>display:none的元素也会在DOM树中</li>\n<li>注释也会在DOM树中</li>\n<li>script标签会在DOM树中</li>\n</ol>\n<p>无论是DOM还是CSSOM，都是要经过<code>Bytes→characters→tokens→nodes→objectmodel</code>这个过程。</p>\n<p><img src=\"/2019/09/27/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86%E4%B8%8E%E8%BF%87%E7%A8%8B/liulanqi2.webp\" alt=\"image\"><br>当前节点的所有子节点都构建好后才会去构建当前节点的下一个兄弟节点。</p>\n<h4 id=\"构建CSSOM规则树\"><a href=\"#构建CSSOM规则树\" class=\"headerlink\" title=\"构建CSSOM规则树\"></a>构建CSSOM规则树</h4><p>浏览器解析CSS文件并生成CSSOM，每个CSS文件都被分析成一个StyleSheet对象，每个对象都包含CSS规则。CSS规则对象包含对应于CSS语法的选择器和声明对象以及其他对象。</p>\n<p>在这个过程需要注意的是：</p>\n<ol>\n<li>CSS解析可以与DOM解析同时进行。</li>\n<li>CSS解析与script的执行互斥 。</li>\n<li>在Webkit内核中进行了script执行优化，只有在JS访问CSS时才会发生互斥。</li>\n</ol>\n<h4 id=\"构建渲染树（Render-Tree）\"><a href=\"#构建渲染树（Render-Tree）\" class=\"headerlink\" title=\"构建渲染树（Render Tree）\"></a>构建渲染树（Render Tree）</h4><p>通过DOM树和CSS规则树，浏览器就可以通过它两构建渲染树了。浏览器会先从DOM树的根节点开始遍历每个可见节点，然后对每个可见节点找到适配的CSS样式规则并应用。</p>\n<p>有以下几点需要注意：</p>\n<ol>\n<li>Render Tree和DOM Tree不完全对应</li>\n<li>display: none的元素不在Render Tree中</li>\n<li>visibility: hidden的元素在Render Tree中</li>\n</ol>\n<p><img src=\"/2019/09/27/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86%E4%B8%8E%E8%BF%87%E7%A8%8B/liulanqi3.webp\" alt=\"image\"></p>\n<p>渲染树生成后，还是没有办法渲染到屏幕上，渲染到屏幕需要得到各个节点的位置信息，这就需要布局（Layout）的处理了。</p>\n<h4 id=\"渲染树布局-layout-of-the-render-tree\"><a href=\"#渲染树布局-layout-of-the-render-tree\" class=\"headerlink\" title=\"渲染树布局(layout of the render tree)\"></a>渲染树布局(layout of the render tree)</h4><p>布局阶段会从渲染树的根节点开始遍历，由于渲染树的每个节点都是一个Render Object对象，包含宽高，位置，背景色等样式信息。所以浏览器就可以通过这些样式信息来确定每个节点对象在页面上的确切大小和位置，布局阶段的输出就是我们常说的盒子模型，它会精确地捕获每个元素在屏幕内的确切位置与大小。需要注意的是：</p>\n<ol>\n<li>float元素，absoulte元素，fixed元素会发生位置偏移。</li>\n<li>我们常说的脱离文档流，其实就是脱离Render Tree。</li>\n</ol>\n<h4 id=\"渲染树绘制（Painting-the-render-tree）\"><a href=\"#渲染树绘制（Painting-the-render-tree）\" class=\"headerlink\" title=\"渲染树绘制（Painting the render tree）\"></a>渲染树绘制（Painting the render tree）</h4><p>在绘制阶段，浏览器会遍历渲染树，调用渲染器的paint()方法在屏幕上显示其内容。渲染树的绘制工作是由浏览器的UI后端组件完成的。</p>\n<h3 id=\"浏览器渲染网页的那些事儿\"><a href=\"#浏览器渲染网页的那些事儿\" class=\"headerlink\" title=\"浏览器渲染网页的那些事儿\"></a>浏览器渲染网页的那些事儿</h3><h4 id=\"浏览器主要组件结构\"><a href=\"#浏览器主要组件结构\" class=\"headerlink\" title=\"浏览器主要组件结构\"></a>浏览器主要组件结构</h4><p><img src=\"/2019/09/27/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86%E4%B8%8E%E8%BF%87%E7%A8%8B/liulanqi4.webp\" alt=\"image\"><br>渲染引擎主要有两个：webkit和Gecko</p>\n<p>Firefox使用Geoko，Mozilla自主研发的渲染引擎。Safari和Chrome都使用webkit。Webkit是一款开源渲染引擎，它本来是为linux平台研发的，后来由Apple移植到Mac及Windows上。</p>\n<p>虽然主流浏览器渲染过程叫法有区别，但是主要流程还是相同的。</p>\n<h4 id=\"渲染阻塞\"><a href=\"#渲染阻塞\" class=\"headerlink\" title=\"渲染阻塞\"></a>渲染阻塞</h4><p>JS可以操作DOM来修改DOM结构，可以操作CSSOM来修改节点样式，这就导致了浏览器在遇到<code>&lt;script&gt;</code>标签时，DOM构建将暂停，直至脚本完成执行，然后继续构建DOM。如果脚本是外部的，会等待脚本下载完毕，再继续解析文档。现在可以在script标签上增加属性defer或者async。脚本解析会将脚本中改变DOM和CSS的地方分别解析出来，追加到DOM树和CSSOM规则树上。</p>\n<p>每次去执行JavaScript脚本都会严重地阻塞DOM树的构建，如果JavaScript脚本还操作了CSSOM，而正好这个CSSOM还没有下载和构建，浏览器甚至会延迟脚本执行和构建DOM，直至完成其CSSOM的下载和构建。所以，script标签的位置很重要。</p>\n<p>JS阻塞了构建DOM树，也阻塞了其后的构建CSSOM规则树，整个解析进程必须等待JS的执行完成才能够继续，这就是所谓的JS阻塞页面。</p>\n<p>由于CSSOM负责存储渲染信息，浏览器就必须保证在合成渲染树之前，CSSOM是完备的，这种完备是指所有的CSS（内联、内部和外部）都已经下载完，并解析完，只有CSSOM和DOM的解析完全结束，浏览器才会进入下一步的渲染，这就是CSS阻塞渲染。</p>\n<p>CSS阻塞渲染意味着，在CSSOM完备前，页面将一直处理白屏状态，这就是为什么样式放在head中，仅仅是为了更快的解析CSS，保证更快的首次渲染。</p>\n<p>需要注意的是，即便你没有给页面任何的样式声明，CSSOM依然会生成，默认生成的CSSOM自带浏览器默认样式。</p>\n<p>当解析HTML的时候，会把新来的元素插入DOM树里面，同时去查找CSS，然后把对应的样式规则应用到元素上，查找样式表是按照从右到左的顺序去匹配的。</p>\n<p>例如：div p {font-size: 16px}，会先寻找所有p标签并判断它的父标签是否为div之后才会决定要不要采用这个样式进行渲染）。<br>所以，我们平时写CSS时，尽量用id和class，千万不要过渡层叠。</p>\n<h3 id=\"回流和重绘（reflow和repaint）\"><a href=\"#回流和重绘（reflow和repaint）\" class=\"headerlink\" title=\"回流和重绘（reflow和repaint）\"></a>回流和重绘（reflow和repaint）</h3><p>我们都知道HTML默认是流式布局的，但CSS和JS会打破这种布局，改变DOM的外观样式以及大小和位置。因此我们就需要知道两个概念：replaint和reflow。</p>\n<h4 id=\"reflow（回流）\"><a href=\"#reflow（回流）\" class=\"headerlink\" title=\"reflow（回流）\"></a>reflow（回流）</h4><p>当浏览器发现布局发生了变化，这个时候就需要倒回去重新渲染，大家称这个回退的过程叫<code>reflow</code>。<code>reflow</code>会从<code>html</code>这个<code>root frame</code>开始递归往下，依次计算所有的结点几何尺寸和位置，以确认是渲染树的一部分发生变化还是整个渲染树。reflow几乎是无法避免的，因为只要用户进行交互操作，就势必会发生页面的一部分的重新渲染，且通常我们也无法预估浏览器到底会<code>reflow</code>哪一部分的代码，因为他们会相互影响。</p>\n<h4 id=\"repaint（重绘）\"><a href=\"#repaint（重绘）\" class=\"headerlink\" title=\"repaint（重绘）\"></a>repaint（重绘）</h4><p><code>repaint</code> 则是当我们改变某个元素的背景色、文字颜色、边框颜色等等不影响它周围或内部布局的属性时，屏幕的一部分要重画，但是元素的几何尺寸和位置没有发生改变。</p>\n<p>需要注意的是，<code>display:none会触发reflow，而visibility: hidden</code>属性则并不算是不可见属性，它的语义是隐藏元素，但元素仍然占据着布局空间，它会被渲染成一个空框。所以visibility:hidden只会触发repaint，因为没有发生位置变化。</p>\n<p>另外有些情况下，比如修改了元素的样式，浏览器并不会立刻<code>reflow</code>或<code>repaint</code>一次，而是会把这样的操作积攒一批，然后做一次<code>reflow</code>，这又叫异步<code>reflow</code>或增量异步<code>reflow</code>。但是在有些情况下，比如<code>resize</code>窗口，改变了页面默认的字体等。对于这些操作，浏览器会马上进行<code>reflow</code>。</p>\n<h4 id=\"引起reflow\"><a href=\"#引起reflow\" class=\"headerlink\" title=\"引起reflow\"></a>引起reflow</h4><p>现代浏览器会对回流做优化，它会等到足够数量的变化发生，再做一次批处理回流。</p>\n<ol>\n<li>页面第一次渲染（初始化）</li>\n<li>DOM树变化（如：增删节点）</li>\n<li>Render树变化（如：padding改变）</li>\n<li>浏览器窗口resize</li>\n<li>获取元素的某些属性</li>\n</ol>\n<p>浏览器为了获得正确的值也会提前触发回流，这样就使得浏览器的优化失效了，这些属性包括<code>offsetLeft、offsetTop、offsetWidth、offsetHeight、 scrollTop/Left/Width/Height、clientTop/Left/Width/Height、</code>调用了<code>getComputedStyle()</code>。</p>\n<h4 id=\"引起repaint\"><a href=\"#引起repaint\" class=\"headerlink\" title=\"引起repaint\"></a>引起repaint</h4><p><code>reflow</code> 回流必定引起<code>repaint</code>重绘，重绘可以单独触发。</p>\n<p>背景色、颜色、字体改变（注意：字体大小发生变化时，会触发回流）</p>\n<h4 id=\"减少reflow、repaint触发次数\"><a href=\"#减少reflow、repaint触发次数\" class=\"headerlink\" title=\"减少reflow、repaint触发次数\"></a>减少reflow、repaint触发次数</h4><ol>\n<li>用transform做形变和位移可以减少reflow</li>\n<li>避免逐个修改节点样式，尽量一次性修改</li>\n<li>使用DocumentFragment将需要多次修改的DOM元素缓存，最后一次性append到真实DOM中渲染</li>\n<li>可以将需要多次修改的DOM元素设置display:none，操作完再显示。（因为隐藏元素不在render树内，因此修改隐藏元素不会触发回流重绘）</li>\n<li>避免多次读取某些属性</li>\n<li>通过绝对位移将复杂的节点元素脱离文档流，形成新的Render Layer，降低回流成本</li>\n</ol>\n<h3 id=\"几条关于优化渲染效率的建议\"><a href=\"#几条关于优化渲染效率的建议\" class=\"headerlink\" title=\"几条关于优化渲染效率的建议\"></a>几条关于优化渲染效率的建议</h3><p>结合上文有以下几点可以优化渲染效率。</p>\n<ul>\n<li>合法地去书写HTML和CSS ，且不要忘了文档编码类型。</li>\n<li>样式文件应当在head标签中，而脚本文件在body结束前，这样可以防止阻塞的方式。</li>\n<li>简化并优化CSS选择器，尽量将嵌套层减少到最小。</li>\n<li>DOM 的多个读操作（或多个写操作），应该放在一起。不要两个读操作之间，加入一个写操作。</li>\n<li>如果某个样式是通过重排得到的，那么最好缓存结果。避免下一次用到的时候，浏览器又要重排。</li>\n<li>不要一条条地改变样式，而要通过改变class，或者csstext属性，一次性地改变样式。</li>\n<li>尽量用transform来做形变和位移</li>\n<li>尽量使用离线DOM，而不是真实的网面DOM，来改变元素样式。比如，操作Document Fragment对象，完成后再把这个对象加入DOM。再比如，使用cloneNode()方法，在克隆的节点上进行操作，然后再用克隆的节点替换原始节点。</li>\n<li>先将元素设为display: none（需要1次重排和重绘），然后对这个节点进行100次操作，最后再恢复显示（需要1次重排和重绘）。这样一来，你就用两次重新渲染，取代了可能高达100次的重新渲染。</li>\n<li>position属性为absolute或fixed的元素，重排的开销会比较小，因为不用考虑它对其他元素的影响。</li>\n<li>只在必要的时候，才将元素的display属性为可见，因为不可见的元素不影响重排和重绘。另外，visibility : hidden的元素只对重绘有影响，不影响重排。</li>\n<li>使用window.requestAnimationFrame()、window.requestIdleCallback()这两个方法调节重新渲染。</li>\n</ul>\n<p><a href=\"https://www.jianshu.com/p/e6252dc9be32\" target=\"_blank\" rel=\"noopener\">原文地址</a></p>"},{"layout":"[post]","title":"通信相关问题","date":"2019-08-22T08:11:16.000Z","_content":"## 同源策略以及限制\n<!-- more -->\n### 同源策略的含义\n1. 协议相同\n2. 域名相同\n3. 端口相同 举例来说，```\nhttp://www.example.com/dir/page.html ```这个网址，协议是http://，域名是www.example.com，端口是80（默认端口可以省略）。\n4. ```http://www.example.com/dir2/other.html```  ：同源\n5. ```http://example.com/dir/other.html```：不同源（域名不同）\n6. ```http://v2.www.example.com/dir/other.html```：不同源（域名不同）\n7. ```http://www.example.com:81/dir/other.html```：不同源（端口不同）\n\n### 同源的目的以及限制\n\n举个例子：  \n比如一个恶意网站的页面通过iframe嵌入了银行的登录页面（二者不同源），如果没有同源限制，恶意网页上的javascript脚本就可以在用户登录银行的时候获取用户名和密码。\n\n在浏览器中，script，img、iframe、link等标签都可以加载跨域资源，而不受同源限制，但浏览器限制了JavaScript的权限使其不能读、写加载的内容。\n\n### 同源策略的作用范围\n同源策略限制了客户端javascript代码的部分行为\n1. Cookie、LocalStorage 和 IndexDB 无法读取。\n2. DOM 无法获得。\n3. AJAX 请求不能发送。\n\n## 前后端通信方式\n1. ajax\n2. Websocket\n3. CORS\n\n### AJAX实现\n\n```js\n/**\n * [json 实现ajax的json]\n * @param  {[type]} options [description]\n * @return {[type]}         [description]\n */\n util.json = function (options) {\n     var opt = {\n         url: '',\n         type: 'get',\n         data: {},\n         success: function () {},\n         error: function () {},\n     };\n     util.extend(opt, options);\n     if (opt.url) {\n         var xhr = XMLHttpRequest\n            ? new XMLHttpRequest()\n            : new ActiveXObject('Microsoft.XMLHTTP');\n         var data = opt.data,\n             url = opt.url,\n             type = opt.type.toUpperCase(),\n             dataArr = [];\n         for (var k in data) {\n             dataArr.push(k + '=' + data[k]);\n         }\n         if (type === 'GET') {\n             url = url + '?' + dataArr.join('&');\n             xhr.open(type, url.replace(/\\?$/g, ''), true);\n             xhr.send();\n         }\n         if (type === 'POST') {\n             xhr.open(type, url, true);\n             xmlhttp.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\n             xhr.send(dataArr.join('&'));\n         }\n         xhr.onload = function () {\n             if (xhr.status === 200 || xhr.status === 304) {\n                 var res;\n                 if (opt.success && opt.success instanceof Function) {\n                     res = xhr.responseText;\n                     if (typeof res ==== 'string') {\n                         res = JSON.parse(res);\n                         opt.success.call(xhr, res);\n                     }\n                 }\n             } else {\n                 if (opt.error && opt.error instanceof Function) {\n                     opt.error.call(xhr, res);\n                 }\n             }\n         };\n     }\n };\n\n```\n**在封装ajax请求时，要注意是否兼容IE浏览器。**\n\n## 跨域通信的方式\n\n1. JSONP\n2. Hash\n3. postMessage\n4. WebSocket\n5. CORS\n\n### JSONP\n\n```js\n /**\n  * [function jsonp]\n  * @param  {[type]} url      [description]\n  * @param  {[type]} onsucess [description]\n  * @param  {[type]} onerror  [description]\n  * @param  {[type]} charset  [description]\n  * @return {[type]}          [description]\n  */\n util.jsonp = function (url, onsuccess, onerror, charset) {\n     var callbackName = util.getName('tt_player');\n     window[callbackName] = function () {\n         if (onsuccess && util.isFunction(onsuccess)) {\n             onsuccess(arguments[0]);\n         }\n     };\n     var script = util.createScript(url + '&callback=' + callbackName, charset);\n     script.onload = script.onreadystatechange = function () {\n         if (!script.readyState || /loaded|complete/.test(script.readyState)) {\n             script.onload = script.onreadystatechange = null;\n             // 移除该script的 DOM 对象\n             if (script.parentNode) {\n                 script.parentNode.removeChild(script);\n             }\n             // 删除函数或变量\n             window[callbackName] = null;\n         }\n     };\n     script.onerror = function () {\n         if (onerror && util.isFunction(onerror)) {\n             onerror();\n         }\n     };\n    //添加标签获取js\n     document.getElementsByTagName('head')[0].appendChild(script);\n };\n\n```\n我的理解就是伪装成script标签的请求，获取内容，实现跨域请求。\n\n```html\n <script src=\"http://www.abc.com/?data=name&callback=jsonp\" charset=\"utf-8\"></script>\n\n```\n请求时需要在后面添加callback的返回，```callback=jsonp```,这个是作为函数名返回，本地必须有个同名的函数才能使用。\n\n该函数应该注册在window对象上。 \n\n### Hash\n\n```js\n      // 利用hash，场景是当前页面 A 通过iframe或frame嵌入了跨域的页面 B\n      // 在A中伪代码如下：\n      var B = document.getElementsByTagName('iframe');\n      B.src = B.src + '#' + 'data';\n      // 在B中的伪代码如下\n      window.onhashchange = function () {\n          var data = window.location.hash;\n      };\n```\n### postMessage\n\n```js\n      // postMessage\n      // 窗口A(http:A.com)向跨域的窗口B(http:B.com)发送信息\n      Bwindow.postMessage('data', 'http://B.com');\n      // 在窗口B中监听\n      Awindow.addEventListener('message', function (event) {\n          console.log(event.origin);\n          console.log(event.source);\n          console.log(event.data);\n      }, false);\n\n```\n### WebSocket\n\n```js\n     \n      var ws = new WebSocket('wss://echo.websocket.org');\n\n      ws.onopen = function (evt) {\n          console.log('Connection open ...');\n          ws.send('Hello WebSockets!');\n      };\n\n      ws.onmessage = function (evt) {\n          console.log('Received Message: ', evt.data);\n          ws.close();\n      };\n\n      ws.onclose = function (evt) {\n          console.log('Connection closed.');\n      };\n\n```\n[Websocket【参考资料】](http://www.ruanyifeng.com/blog/2017/05/websocket.html)\n\nws和wss，前者未加密后者加密\n### CORS\n\n```js\n      \n      // url（必选），options（可选）\n      fetch('/some/url/', {\n          method: 'get',\n      }).then(function (response) {\n\n      }).catch(function (err) {\n        // 出错了，等价于 then 的第二个参数，但这样更好用更直观\n      });\n```\n请求头中添加这个\n```Access-Control-Allow-Origin: http://api.bob.com```\n\n [CORS【参考资料】](http://www.ruanyifeng.com/blog/2016/04/cors.html)\n","source":"_posts/通信相关问题.md","raw":"---\nlayout: '[post]'\ntitle: 通信相关问题\ndate: 2019-08-22 16:11:16\ntags: 通信\n---\n## 同源策略以及限制\n<!-- more -->\n### 同源策略的含义\n1. 协议相同\n2. 域名相同\n3. 端口相同 举例来说，```\nhttp://www.example.com/dir/page.html ```这个网址，协议是http://，域名是www.example.com，端口是80（默认端口可以省略）。\n4. ```http://www.example.com/dir2/other.html```  ：同源\n5. ```http://example.com/dir/other.html```：不同源（域名不同）\n6. ```http://v2.www.example.com/dir/other.html```：不同源（域名不同）\n7. ```http://www.example.com:81/dir/other.html```：不同源（端口不同）\n\n### 同源的目的以及限制\n\n举个例子：  \n比如一个恶意网站的页面通过iframe嵌入了银行的登录页面（二者不同源），如果没有同源限制，恶意网页上的javascript脚本就可以在用户登录银行的时候获取用户名和密码。\n\n在浏览器中，script，img、iframe、link等标签都可以加载跨域资源，而不受同源限制，但浏览器限制了JavaScript的权限使其不能读、写加载的内容。\n\n### 同源策略的作用范围\n同源策略限制了客户端javascript代码的部分行为\n1. Cookie、LocalStorage 和 IndexDB 无法读取。\n2. DOM 无法获得。\n3. AJAX 请求不能发送。\n\n## 前后端通信方式\n1. ajax\n2. Websocket\n3. CORS\n\n### AJAX实现\n\n```js\n/**\n * [json 实现ajax的json]\n * @param  {[type]} options [description]\n * @return {[type]}         [description]\n */\n util.json = function (options) {\n     var opt = {\n         url: '',\n         type: 'get',\n         data: {},\n         success: function () {},\n         error: function () {},\n     };\n     util.extend(opt, options);\n     if (opt.url) {\n         var xhr = XMLHttpRequest\n            ? new XMLHttpRequest()\n            : new ActiveXObject('Microsoft.XMLHTTP');\n         var data = opt.data,\n             url = opt.url,\n             type = opt.type.toUpperCase(),\n             dataArr = [];\n         for (var k in data) {\n             dataArr.push(k + '=' + data[k]);\n         }\n         if (type === 'GET') {\n             url = url + '?' + dataArr.join('&');\n             xhr.open(type, url.replace(/\\?$/g, ''), true);\n             xhr.send();\n         }\n         if (type === 'POST') {\n             xhr.open(type, url, true);\n             xmlhttp.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\n             xhr.send(dataArr.join('&'));\n         }\n         xhr.onload = function () {\n             if (xhr.status === 200 || xhr.status === 304) {\n                 var res;\n                 if (opt.success && opt.success instanceof Function) {\n                     res = xhr.responseText;\n                     if (typeof res ==== 'string') {\n                         res = JSON.parse(res);\n                         opt.success.call(xhr, res);\n                     }\n                 }\n             } else {\n                 if (opt.error && opt.error instanceof Function) {\n                     opt.error.call(xhr, res);\n                 }\n             }\n         };\n     }\n };\n\n```\n**在封装ajax请求时，要注意是否兼容IE浏览器。**\n\n## 跨域通信的方式\n\n1. JSONP\n2. Hash\n3. postMessage\n4. WebSocket\n5. CORS\n\n### JSONP\n\n```js\n /**\n  * [function jsonp]\n  * @param  {[type]} url      [description]\n  * @param  {[type]} onsucess [description]\n  * @param  {[type]} onerror  [description]\n  * @param  {[type]} charset  [description]\n  * @return {[type]}          [description]\n  */\n util.jsonp = function (url, onsuccess, onerror, charset) {\n     var callbackName = util.getName('tt_player');\n     window[callbackName] = function () {\n         if (onsuccess && util.isFunction(onsuccess)) {\n             onsuccess(arguments[0]);\n         }\n     };\n     var script = util.createScript(url + '&callback=' + callbackName, charset);\n     script.onload = script.onreadystatechange = function () {\n         if (!script.readyState || /loaded|complete/.test(script.readyState)) {\n             script.onload = script.onreadystatechange = null;\n             // 移除该script的 DOM 对象\n             if (script.parentNode) {\n                 script.parentNode.removeChild(script);\n             }\n             // 删除函数或变量\n             window[callbackName] = null;\n         }\n     };\n     script.onerror = function () {\n         if (onerror && util.isFunction(onerror)) {\n             onerror();\n         }\n     };\n    //添加标签获取js\n     document.getElementsByTagName('head')[0].appendChild(script);\n };\n\n```\n我的理解就是伪装成script标签的请求，获取内容，实现跨域请求。\n\n```html\n <script src=\"http://www.abc.com/?data=name&callback=jsonp\" charset=\"utf-8\"></script>\n\n```\n请求时需要在后面添加callback的返回，```callback=jsonp```,这个是作为函数名返回，本地必须有个同名的函数才能使用。\n\n该函数应该注册在window对象上。 \n\n### Hash\n\n```js\n      // 利用hash，场景是当前页面 A 通过iframe或frame嵌入了跨域的页面 B\n      // 在A中伪代码如下：\n      var B = document.getElementsByTagName('iframe');\n      B.src = B.src + '#' + 'data';\n      // 在B中的伪代码如下\n      window.onhashchange = function () {\n          var data = window.location.hash;\n      };\n```\n### postMessage\n\n```js\n      // postMessage\n      // 窗口A(http:A.com)向跨域的窗口B(http:B.com)发送信息\n      Bwindow.postMessage('data', 'http://B.com');\n      // 在窗口B中监听\n      Awindow.addEventListener('message', function (event) {\n          console.log(event.origin);\n          console.log(event.source);\n          console.log(event.data);\n      }, false);\n\n```\n### WebSocket\n\n```js\n     \n      var ws = new WebSocket('wss://echo.websocket.org');\n\n      ws.onopen = function (evt) {\n          console.log('Connection open ...');\n          ws.send('Hello WebSockets!');\n      };\n\n      ws.onmessage = function (evt) {\n          console.log('Received Message: ', evt.data);\n          ws.close();\n      };\n\n      ws.onclose = function (evt) {\n          console.log('Connection closed.');\n      };\n\n```\n[Websocket【参考资料】](http://www.ruanyifeng.com/blog/2017/05/websocket.html)\n\nws和wss，前者未加密后者加密\n### CORS\n\n```js\n      \n      // url（必选），options（可选）\n      fetch('/some/url/', {\n          method: 'get',\n      }).then(function (response) {\n\n      }).catch(function (err) {\n        // 出错了，等价于 then 的第二个参数，但这样更好用更直观\n      });\n```\n请求头中添加这个\n```Access-Control-Allow-Origin: http://api.bob.com```\n\n [CORS【参考资料】](http://www.ruanyifeng.com/blog/2016/04/cors.html)\n","slug":"通信相关问题","published":1,"updated":"2020-04-16T08:14:46.000Z","comments":1,"photos":[],"link":"","_id":"ck9v62x81001hqqs6eqma8lvr","content":"<h2 id=\"同源策略以及限制\"><a href=\"#同源策略以及限制\" class=\"headerlink\" title=\"同源策略以及限制\"></a>同源策略以及限制</h2><a id=\"more\"></a>\n<h3 id=\"同源策略的含义\"><a href=\"#同源策略的含义\" class=\"headerlink\" title=\"同源策略的含义\"></a>同源策略的含义</h3><ol>\n<li>协议相同</li>\n<li>域名相同</li>\n<li>端口相同 举例来说，<code>http://www.example.com/dir/page.html</code>这个网址，协议是http://，域名是<a href=\"http://www.example.com，端口是80（默认端口可以省略）。\" target=\"_blank\" rel=\"noopener\">www.example.com，端口是80（默认端口可以省略）。</a></li>\n<li><code>http://www.example.com/dir2/other.html</code>  ：同源</li>\n<li><code>http://example.com/dir/other.html</code>：不同源（域名不同）</li>\n<li><code>http://v2.www.example.com/dir/other.html</code>：不同源（域名不同）</li>\n<li><code>http://www.example.com:81/dir/other.html</code>：不同源（端口不同）</li>\n</ol>\n<h3 id=\"同源的目的以及限制\"><a href=\"#同源的目的以及限制\" class=\"headerlink\" title=\"同源的目的以及限制\"></a>同源的目的以及限制</h3><p>举个例子：<br>比如一个恶意网站的页面通过iframe嵌入了银行的登录页面（二者不同源），如果没有同源限制，恶意网页上的javascript脚本就可以在用户登录银行的时候获取用户名和密码。</p>\n<p>在浏览器中，script，img、iframe、link等标签都可以加载跨域资源，而不受同源限制，但浏览器限制了JavaScript的权限使其不能读、写加载的内容。</p>\n<h3 id=\"同源策略的作用范围\"><a href=\"#同源策略的作用范围\" class=\"headerlink\" title=\"同源策略的作用范围\"></a>同源策略的作用范围</h3><p>同源策略限制了客户端javascript代码的部分行为</p>\n<ol>\n<li>Cookie、LocalStorage 和 IndexDB 无法读取。</li>\n<li>DOM 无法获得。</li>\n<li>AJAX 请求不能发送。</li>\n</ol>\n<h2 id=\"前后端通信方式\"><a href=\"#前后端通信方式\" class=\"headerlink\" title=\"前后端通信方式\"></a>前后端通信方式</h2><ol>\n<li>ajax</li>\n<li>Websocket</li>\n<li>CORS</li>\n</ol>\n<h3 id=\"AJAX实现\"><a href=\"#AJAX实现\" class=\"headerlink\" title=\"AJAX实现\"></a>AJAX实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * [json 实现ajax的json]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[type]&#125;</span> </span>options [description]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;[type]&#125;</span>         </span>[description]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> util.json = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">options</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">var</span> opt = &#123;</span><br><span class=\"line\">         url: <span class=\"string\">''</span>,</span><br><span class=\"line\">         type: <span class=\"string\">'get'</span>,</span><br><span class=\"line\">         data: &#123;&#125;,</span><br><span class=\"line\">         success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;,</span><br><span class=\"line\">         error: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;,</span><br><span class=\"line\">     &#125;;</span><br><span class=\"line\">     util.extend(opt, options);</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (opt.url) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">var</span> xhr = XMLHttpRequest</span><br><span class=\"line\">            ? <span class=\"keyword\">new</span> XMLHttpRequest()</span><br><span class=\"line\">            : <span class=\"keyword\">new</span> ActiveXObject(<span class=\"string\">'Microsoft.XMLHTTP'</span>);</span><br><span class=\"line\">         <span class=\"keyword\">var</span> data = opt.data,</span><br><span class=\"line\">             url = opt.url,</span><br><span class=\"line\">             type = opt.type.toUpperCase(),</span><br><span class=\"line\">             dataArr = [];</span><br><span class=\"line\">         <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> data) &#123;</span><br><span class=\"line\">             dataArr.push(k + <span class=\"string\">'='</span> + data[k]);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (type === <span class=\"string\">'GET'</span>) &#123;</span><br><span class=\"line\">             url = url + <span class=\"string\">'?'</span> + dataArr.join(<span class=\"string\">'&amp;'</span>);</span><br><span class=\"line\">             xhr.open(type, url.replace(<span class=\"regexp\">/\\?$/g</span>, <span class=\"string\">''</span>), <span class=\"literal\">true</span>);</span><br><span class=\"line\">             xhr.send();</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (type === <span class=\"string\">'POST'</span>) &#123;</span><br><span class=\"line\">             xhr.open(type, url, <span class=\"literal\">true</span>);</span><br><span class=\"line\">             xmlhttp.setRequestHeader(<span class=\"string\">'Content-type'</span>, <span class=\"string\">'application/x-www-form-urlencoded'</span>);</span><br><span class=\"line\">             xhr.send(dataArr.join(<span class=\"string\">'&amp;'</span>));</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         xhr.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">             <span class=\"keyword\">if</span> (xhr.status === <span class=\"number\">200</span> || xhr.status === <span class=\"number\">304</span>) &#123;</span><br><span class=\"line\">                 <span class=\"keyword\">var</span> res;</span><br><span class=\"line\">                 <span class=\"keyword\">if</span> (opt.success &amp;&amp; opt.success <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Function</span>) &#123;</span><br><span class=\"line\">                     res = xhr.responseText;</span><br><span class=\"line\">                     <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> res ==== <span class=\"string\">'string'</span>) &#123;</span><br><span class=\"line\">                         res = <span class=\"built_in\">JSON</span>.parse(res);</span><br><span class=\"line\">                         opt.success.call(xhr, res);</span><br><span class=\"line\">                     &#125;</span><br><span class=\"line\">                 &#125;</span><br><span class=\"line\">             &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                 <span class=\"keyword\">if</span> (opt.error &amp;&amp; opt.error <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Function</span>) &#123;</span><br><span class=\"line\">                     opt.error.call(xhr, res);</span><br><span class=\"line\">                 &#125;</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">         &#125;;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;;</span><br></pre></td></tr></table></figure>\n<p><strong>在封装ajax请求时，要注意是否兼容IE浏览器。</strong></p>\n<h2 id=\"跨域通信的方式\"><a href=\"#跨域通信的方式\" class=\"headerlink\" title=\"跨域通信的方式\"></a>跨域通信的方式</h2><ol>\n<li>JSONP</li>\n<li>Hash</li>\n<li>postMessage</li>\n<li>WebSocket</li>\n<li>CORS</li>\n</ol>\n<h3 id=\"JSONP\"><a href=\"#JSONP\" class=\"headerlink\" title=\"JSONP\"></a>JSONP</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * [function jsonp]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[type]&#125;</span> </span>url      [description]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[type]&#125;</span> </span>onsucess [description]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[type]&#125;</span> </span>onerror  [description]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[type]&#125;</span> </span>charset  [description]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;[type]&#125;</span>          </span>[description]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">util.jsonp = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">url, onsuccess, onerror, charset</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> callbackName = util.getName(<span class=\"string\">'tt_player'</span>);</span><br><span class=\"line\">    <span class=\"built_in\">window</span>[callbackName] = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (onsuccess &amp;&amp; util.isFunction(onsuccess)) &#123;</span><br><span class=\"line\">            onsuccess(<span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> script = util.createScript(url + <span class=\"string\">'&amp;callback='</span> + callbackName, charset);</span><br><span class=\"line\">    script.onload = script.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!script.readyState || <span class=\"regexp\">/loaded|complete/</span>.test(script.readyState)) &#123;</span><br><span class=\"line\">            script.onload = script.onreadystatechange = <span class=\"literal\">null</span>;</span><br><span class=\"line\">            <span class=\"comment\">// 移除该script的 DOM 对象</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (script.parentNode) &#123;</span><br><span class=\"line\">                script.parentNode.removeChild(script);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 删除函数或变量</span></span><br><span class=\"line\">            <span class=\"built_in\">window</span>[callbackName] = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    script.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (onerror &amp;&amp; util.isFunction(onerror)) &#123;</span><br><span class=\"line\">            onerror();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">   <span class=\"comment\">//添加标签获取js</span></span><br><span class=\"line\">    <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'head'</span>)[<span class=\"number\">0</span>].appendChild(script);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>我的理解就是伪装成script标签的请求，获取内容，实现跨域请求。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://www.abc.com/?data=name&amp;callback=jsonp\"</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>请求时需要在后面添加callback的返回，<code>callback=jsonp</code>,这个是作为函数名返回，本地必须有个同名的函数才能使用。</p>\n<p>该函数应该注册在window对象上。 </p>\n<h3 id=\"Hash\"><a href=\"#Hash\" class=\"headerlink\" title=\"Hash\"></a>Hash</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 利用hash，场景是当前页面 A 通过iframe或frame嵌入了跨域的页面 B</span></span><br><span class=\"line\"><span class=\"comment\">// 在A中伪代码如下：</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> B = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'iframe'</span>);</span><br><span class=\"line\">B.src = B.src + <span class=\"string\">'#'</span> + <span class=\"string\">'data'</span>;</span><br><span class=\"line\"><span class=\"comment\">// 在B中的伪代码如下</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.onhashchange = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> data = <span class=\"built_in\">window</span>.location.hash;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"postMessage\"><a href=\"#postMessage\" class=\"headerlink\" title=\"postMessage\"></a>postMessage</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// postMessage</span></span><br><span class=\"line\"><span class=\"comment\">// 窗口A(http:A.com)向跨域的窗口B(http:B.com)发送信息</span></span><br><span class=\"line\">Bwindow.postMessage(<span class=\"string\">'data'</span>, <span class=\"string\">'http://B.com'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 在窗口B中监听</span></span><br><span class=\"line\">Awindow.addEventListener(<span class=\"string\">'message'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(event.origin);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(event.source);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(event.data);</span><br><span class=\"line\">&#125;, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"WebSocket\"><a href=\"#WebSocket\" class=\"headerlink\" title=\"WebSocket\"></a>WebSocket</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     </span><br><span class=\"line\"><span class=\"keyword\">var</span> ws = <span class=\"keyword\">new</span> WebSocket(<span class=\"string\">'wss://echo.websocket.org'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">ws.onopen = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">evt</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Connection open ...'</span>);</span><br><span class=\"line\">    ws.send(<span class=\"string\">'Hello WebSockets!'</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">ws.onmessage = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">evt</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Received Message: '</span>, evt.data);</span><br><span class=\"line\">    ws.close();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">ws.onclose = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">evt</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Connection closed.'</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://www.ruanyifeng.com/blog/2017/05/websocket.html\" target=\"_blank\" rel=\"noopener\">Websocket【参考资料】</a></p>\n<p>ws和wss，前者未加密后者加密</p>\n<h3 id=\"CORS\"><a href=\"#CORS\" class=\"headerlink\" title=\"CORS\"></a>CORS</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// url（必选），options（可选）</span></span><br><span class=\"line\">fetch(<span class=\"string\">'/some/url/'</span>, &#123;</span><br><span class=\"line\">    method: <span class=\"string\">'get'</span>,</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">response</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 出错了，等价于 then 的第二个参数，但这样更好用更直观</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>请求头中添加这个<br><code>Access-Control-Allow-Origin: http://api.bob.com</code></p>\n<p> <a href=\"http://www.ruanyifeng.com/blog/2016/04/cors.html\" target=\"_blank\" rel=\"noopener\">CORS【参考资料】</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"同源策略以及限制\"><a href=\"#同源策略以及限制\" class=\"headerlink\" title=\"同源策略以及限制\"></a>同源策略以及限制</h2>","more":"<h3 id=\"同源策略的含义\"><a href=\"#同源策略的含义\" class=\"headerlink\" title=\"同源策略的含义\"></a>同源策略的含义</h3><ol>\n<li>协议相同</li>\n<li>域名相同</li>\n<li>端口相同 举例来说，<code>http://www.example.com/dir/page.html</code>这个网址，协议是http://，域名是<a href=\"http://www.example.com，端口是80（默认端口可以省略）。\" target=\"_blank\" rel=\"noopener\">www.example.com，端口是80（默认端口可以省略）。</a></li>\n<li><code>http://www.example.com/dir2/other.html</code>  ：同源</li>\n<li><code>http://example.com/dir/other.html</code>：不同源（域名不同）</li>\n<li><code>http://v2.www.example.com/dir/other.html</code>：不同源（域名不同）</li>\n<li><code>http://www.example.com:81/dir/other.html</code>：不同源（端口不同）</li>\n</ol>\n<h3 id=\"同源的目的以及限制\"><a href=\"#同源的目的以及限制\" class=\"headerlink\" title=\"同源的目的以及限制\"></a>同源的目的以及限制</h3><p>举个例子：<br>比如一个恶意网站的页面通过iframe嵌入了银行的登录页面（二者不同源），如果没有同源限制，恶意网页上的javascript脚本就可以在用户登录银行的时候获取用户名和密码。</p>\n<p>在浏览器中，script，img、iframe、link等标签都可以加载跨域资源，而不受同源限制，但浏览器限制了JavaScript的权限使其不能读、写加载的内容。</p>\n<h3 id=\"同源策略的作用范围\"><a href=\"#同源策略的作用范围\" class=\"headerlink\" title=\"同源策略的作用范围\"></a>同源策略的作用范围</h3><p>同源策略限制了客户端javascript代码的部分行为</p>\n<ol>\n<li>Cookie、LocalStorage 和 IndexDB 无法读取。</li>\n<li>DOM 无法获得。</li>\n<li>AJAX 请求不能发送。</li>\n</ol>\n<h2 id=\"前后端通信方式\"><a href=\"#前后端通信方式\" class=\"headerlink\" title=\"前后端通信方式\"></a>前后端通信方式</h2><ol>\n<li>ajax</li>\n<li>Websocket</li>\n<li>CORS</li>\n</ol>\n<h3 id=\"AJAX实现\"><a href=\"#AJAX实现\" class=\"headerlink\" title=\"AJAX实现\"></a>AJAX实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * [json 实现ajax的json]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[type]&#125;</span> </span>options [description]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;[type]&#125;</span>         </span>[description]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> util.json = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">options</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">var</span> opt = &#123;</span><br><span class=\"line\">         url: <span class=\"string\">''</span>,</span><br><span class=\"line\">         type: <span class=\"string\">'get'</span>,</span><br><span class=\"line\">         data: &#123;&#125;,</span><br><span class=\"line\">         success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;,</span><br><span class=\"line\">         error: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;,</span><br><span class=\"line\">     &#125;;</span><br><span class=\"line\">     util.extend(opt, options);</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (opt.url) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">var</span> xhr = XMLHttpRequest</span><br><span class=\"line\">            ? <span class=\"keyword\">new</span> XMLHttpRequest()</span><br><span class=\"line\">            : <span class=\"keyword\">new</span> ActiveXObject(<span class=\"string\">'Microsoft.XMLHTTP'</span>);</span><br><span class=\"line\">         <span class=\"keyword\">var</span> data = opt.data,</span><br><span class=\"line\">             url = opt.url,</span><br><span class=\"line\">             type = opt.type.toUpperCase(),</span><br><span class=\"line\">             dataArr = [];</span><br><span class=\"line\">         <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> data) &#123;</span><br><span class=\"line\">             dataArr.push(k + <span class=\"string\">'='</span> + data[k]);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (type === <span class=\"string\">'GET'</span>) &#123;</span><br><span class=\"line\">             url = url + <span class=\"string\">'?'</span> + dataArr.join(<span class=\"string\">'&amp;'</span>);</span><br><span class=\"line\">             xhr.open(type, url.replace(<span class=\"regexp\">/\\?$/g</span>, <span class=\"string\">''</span>), <span class=\"literal\">true</span>);</span><br><span class=\"line\">             xhr.send();</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (type === <span class=\"string\">'POST'</span>) &#123;</span><br><span class=\"line\">             xhr.open(type, url, <span class=\"literal\">true</span>);</span><br><span class=\"line\">             xmlhttp.setRequestHeader(<span class=\"string\">'Content-type'</span>, <span class=\"string\">'application/x-www-form-urlencoded'</span>);</span><br><span class=\"line\">             xhr.send(dataArr.join(<span class=\"string\">'&amp;'</span>));</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         xhr.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">             <span class=\"keyword\">if</span> (xhr.status === <span class=\"number\">200</span> || xhr.status === <span class=\"number\">304</span>) &#123;</span><br><span class=\"line\">                 <span class=\"keyword\">var</span> res;</span><br><span class=\"line\">                 <span class=\"keyword\">if</span> (opt.success &amp;&amp; opt.success <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Function</span>) &#123;</span><br><span class=\"line\">                     res = xhr.responseText;</span><br><span class=\"line\">                     <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> res ==== <span class=\"string\">'string'</span>) &#123;</span><br><span class=\"line\">                         res = <span class=\"built_in\">JSON</span>.parse(res);</span><br><span class=\"line\">                         opt.success.call(xhr, res);</span><br><span class=\"line\">                     &#125;</span><br><span class=\"line\">                 &#125;</span><br><span class=\"line\">             &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                 <span class=\"keyword\">if</span> (opt.error &amp;&amp; opt.error <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Function</span>) &#123;</span><br><span class=\"line\">                     opt.error.call(xhr, res);</span><br><span class=\"line\">                 &#125;</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">         &#125;;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;;</span><br></pre></td></tr></table></figure>\n<p><strong>在封装ajax请求时，要注意是否兼容IE浏览器。</strong></p>\n<h2 id=\"跨域通信的方式\"><a href=\"#跨域通信的方式\" class=\"headerlink\" title=\"跨域通信的方式\"></a>跨域通信的方式</h2><ol>\n<li>JSONP</li>\n<li>Hash</li>\n<li>postMessage</li>\n<li>WebSocket</li>\n<li>CORS</li>\n</ol>\n<h3 id=\"JSONP\"><a href=\"#JSONP\" class=\"headerlink\" title=\"JSONP\"></a>JSONP</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * [function jsonp]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[type]&#125;</span> </span>url      [description]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[type]&#125;</span> </span>onsucess [description]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[type]&#125;</span> </span>onerror  [description]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[type]&#125;</span> </span>charset  [description]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;[type]&#125;</span>          </span>[description]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">util.jsonp = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">url, onsuccess, onerror, charset</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> callbackName = util.getName(<span class=\"string\">'tt_player'</span>);</span><br><span class=\"line\">    <span class=\"built_in\">window</span>[callbackName] = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (onsuccess &amp;&amp; util.isFunction(onsuccess)) &#123;</span><br><span class=\"line\">            onsuccess(<span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> script = util.createScript(url + <span class=\"string\">'&amp;callback='</span> + callbackName, charset);</span><br><span class=\"line\">    script.onload = script.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!script.readyState || <span class=\"regexp\">/loaded|complete/</span>.test(script.readyState)) &#123;</span><br><span class=\"line\">            script.onload = script.onreadystatechange = <span class=\"literal\">null</span>;</span><br><span class=\"line\">            <span class=\"comment\">// 移除该script的 DOM 对象</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (script.parentNode) &#123;</span><br><span class=\"line\">                script.parentNode.removeChild(script);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 删除函数或变量</span></span><br><span class=\"line\">            <span class=\"built_in\">window</span>[callbackName] = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    script.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (onerror &amp;&amp; util.isFunction(onerror)) &#123;</span><br><span class=\"line\">            onerror();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">   <span class=\"comment\">//添加标签获取js</span></span><br><span class=\"line\">    <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'head'</span>)[<span class=\"number\">0</span>].appendChild(script);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>我的理解就是伪装成script标签的请求，获取内容，实现跨域请求。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://www.abc.com/?data=name&amp;callback=jsonp\"</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>请求时需要在后面添加callback的返回，<code>callback=jsonp</code>,这个是作为函数名返回，本地必须有个同名的函数才能使用。</p>\n<p>该函数应该注册在window对象上。 </p>\n<h3 id=\"Hash\"><a href=\"#Hash\" class=\"headerlink\" title=\"Hash\"></a>Hash</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 利用hash，场景是当前页面 A 通过iframe或frame嵌入了跨域的页面 B</span></span><br><span class=\"line\"><span class=\"comment\">// 在A中伪代码如下：</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> B = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'iframe'</span>);</span><br><span class=\"line\">B.src = B.src + <span class=\"string\">'#'</span> + <span class=\"string\">'data'</span>;</span><br><span class=\"line\"><span class=\"comment\">// 在B中的伪代码如下</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.onhashchange = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> data = <span class=\"built_in\">window</span>.location.hash;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"postMessage\"><a href=\"#postMessage\" class=\"headerlink\" title=\"postMessage\"></a>postMessage</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// postMessage</span></span><br><span class=\"line\"><span class=\"comment\">// 窗口A(http:A.com)向跨域的窗口B(http:B.com)发送信息</span></span><br><span class=\"line\">Bwindow.postMessage(<span class=\"string\">'data'</span>, <span class=\"string\">'http://B.com'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 在窗口B中监听</span></span><br><span class=\"line\">Awindow.addEventListener(<span class=\"string\">'message'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(event.origin);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(event.source);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(event.data);</span><br><span class=\"line\">&#125;, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"WebSocket\"><a href=\"#WebSocket\" class=\"headerlink\" title=\"WebSocket\"></a>WebSocket</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     </span><br><span class=\"line\"><span class=\"keyword\">var</span> ws = <span class=\"keyword\">new</span> WebSocket(<span class=\"string\">'wss://echo.websocket.org'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">ws.onopen = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">evt</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Connection open ...'</span>);</span><br><span class=\"line\">    ws.send(<span class=\"string\">'Hello WebSockets!'</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">ws.onmessage = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">evt</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Received Message: '</span>, evt.data);</span><br><span class=\"line\">    ws.close();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">ws.onclose = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">evt</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Connection closed.'</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://www.ruanyifeng.com/blog/2017/05/websocket.html\" target=\"_blank\" rel=\"noopener\">Websocket【参考资料】</a></p>\n<p>ws和wss，前者未加密后者加密</p>\n<h3 id=\"CORS\"><a href=\"#CORS\" class=\"headerlink\" title=\"CORS\"></a>CORS</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// url（必选），options（可选）</span></span><br><span class=\"line\">fetch(<span class=\"string\">'/some/url/'</span>, &#123;</span><br><span class=\"line\">    method: <span class=\"string\">'get'</span>,</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">response</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 出错了，等价于 then 的第二个参数，但这样更好用更直观</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>请求头中添加这个<br><code>Access-Control-Allow-Origin: http://api.bob.com</code></p>\n<p> <a href=\"http://www.ruanyifeng.com/blog/2016/04/cors.html\" target=\"_blank\" rel=\"noopener\">CORS【参考资料】</a></p>"},{"layout":"[post]","title":"页面布局","date":"2019-04-19T07:13:43.000Z","_content":"## 页面布局\n页面布局是作为前端开发的必备技能，能够让页面适应多种规格大小的屏幕，才是一个合格的开发，那么我们有多少种形式呢？  \n<!-- more -->\n**我们使用最基本的三格式布局来做这个尝试**\n### float方式\n\n```css\n        .area {\n            min-height: 200px;\n            \n        }\n\n        .box-one {\n            width: 300px;\n            background: red;\n            float: left;\n        }\n\n        .box-two {\n            background: blue;\n            color: #ffffff;\n            text-align: center;\n        }\n\n        .box-three {\n            width: 300px;\n            background: orange;\n            float: right;\n        }\n```\n\n```html\n    <article class=\"area\">\n        <div class=\"box-one\">box1</div>\n        <div class=\"box-three\">box3</div>\n        <div class=\"box-two\">\n            <h2>页面布局</h2>\n            <p>我是第一行</p>\n            <p>我是第二行</p>\n            <p>我是第三行</p>\n        </div>\n    </article>\n```\n**需要注意box-two是放在最后位置的，因为float的关系，放到最后会将三号挤下去**\n### 使用绝对定位\n**过于low，不必了解了。**\n### flex布局\n\n```css\n.area {\n            min-height: 200px;\n            display: grid;\n            width: 100%;\n        }\n\n        .box-one {\n            width: 300px;\n            background: red;\n        }\n\n        .box-two {\n            background: blue;\n            color: #ffffff;\n            text-align: center;\n            flex-grow: 1;\n        }\n\n        .box-three {\n            width: 300px;\n            background: orange;\n        }\n```\n\n```html\n <article class=\"area\">\n        <div class=\"box-one\">box1</div>\n        <div class=\"box-two\">\n            <h2>页面布局</h2>\n            <p>我是第一行</p>\n            <p>我是第二行</p>\n            <p>我是第三行</p>\n        </div>\n        <div class=\"box-three\">box3</div>\n\n    </article>\n```\n### grid布局\n\n```css\n.area {\n            min-height: 200px;\n            display: grid;\n            width: 100%;\n            grid-template-columns: 33% 34% 33%;\n        }\n\n        .box-one {\n            background: red;\n        }\n\n        .box-two {\n            background: blue;\n            color: #ffffff;\n            text-align: center;\n        }\n\n        .box-three {\n            background: orange;\n        }\n```\n```html\n <article class=\"area\">\n        <div class=\"box-one\">box1</div>\n        <div class=\"box-two\">\n            <h2>页面布局</h2>\n            <p>我是第一行</p>\n            <p>我是第二行</p>\n            <p>我是第三行</p>\n        </div>\n        <div class=\"box-three\">box3</div>\n\n    </article>\n```\n### table布局\n\n```css\n        .area {\n            min-height: 200px;\n            display: table;\n            width: 100%;\n\n        }\n\n        .area div {\n            display: table-cell;\n            height: 200px;\n        }\n\n        .box-one {\n            background: red;\n        }\n\n        .box-two {\n            background: blue;\n            color: #ffffff;\n            text-align: center;\n        }\n\n        .box-three {\n            background: orange;\n        }\n```\n```html\n <article class=\"area\">\n        <div class=\"box-one\">box1</div>\n        <div class=\"box-two\">\n            <h2>页面布局</h2>\n            <p>我是第一行</p>\n            <p>我是第二行</p>\n            <p>我是第三行</p>\n        </div>\n        <div class=\"box-three\">box3</div>\n\n    </article>\n```\n各方案优缺点：\n\n1.浮动和绝对定位都脱离了文档流，浮动如果周边处理得当，兼容性就会比较好，绝对定位使用较方便。\n\n2.flex布局是CSS3中新增，就是为了解决浮动和绝对顶对带来的不足，是一种比较完美的解决方案。\n\n3.网格布局是最新特性，就像是栅格系统。代码量少。\n\n4.表格布局一旦有一部分高度发生变化，如当表格中内容较多，超出设定高度后，其余部分都会发生变化，这样会不符合开发要求，用户体检也不好。\n\n5.上述题目，当高度未知时，只有flex布局和table布局通用。\n\n\n\n","source":"_posts/页面布局.md","raw":"---\nlayout: '[post]'\ntitle: 页面布局\ndate: 2019-04-19 15:13:43\ntags: html\n---\n## 页面布局\n页面布局是作为前端开发的必备技能，能够让页面适应多种规格大小的屏幕，才是一个合格的开发，那么我们有多少种形式呢？  \n<!-- more -->\n**我们使用最基本的三格式布局来做这个尝试**\n### float方式\n\n```css\n        .area {\n            min-height: 200px;\n            \n        }\n\n        .box-one {\n            width: 300px;\n            background: red;\n            float: left;\n        }\n\n        .box-two {\n            background: blue;\n            color: #ffffff;\n            text-align: center;\n        }\n\n        .box-three {\n            width: 300px;\n            background: orange;\n            float: right;\n        }\n```\n\n```html\n    <article class=\"area\">\n        <div class=\"box-one\">box1</div>\n        <div class=\"box-three\">box3</div>\n        <div class=\"box-two\">\n            <h2>页面布局</h2>\n            <p>我是第一行</p>\n            <p>我是第二行</p>\n            <p>我是第三行</p>\n        </div>\n    </article>\n```\n**需要注意box-two是放在最后位置的，因为float的关系，放到最后会将三号挤下去**\n### 使用绝对定位\n**过于low，不必了解了。**\n### flex布局\n\n```css\n.area {\n            min-height: 200px;\n            display: grid;\n            width: 100%;\n        }\n\n        .box-one {\n            width: 300px;\n            background: red;\n        }\n\n        .box-two {\n            background: blue;\n            color: #ffffff;\n            text-align: center;\n            flex-grow: 1;\n        }\n\n        .box-three {\n            width: 300px;\n            background: orange;\n        }\n```\n\n```html\n <article class=\"area\">\n        <div class=\"box-one\">box1</div>\n        <div class=\"box-two\">\n            <h2>页面布局</h2>\n            <p>我是第一行</p>\n            <p>我是第二行</p>\n            <p>我是第三行</p>\n        </div>\n        <div class=\"box-three\">box3</div>\n\n    </article>\n```\n### grid布局\n\n```css\n.area {\n            min-height: 200px;\n            display: grid;\n            width: 100%;\n            grid-template-columns: 33% 34% 33%;\n        }\n\n        .box-one {\n            background: red;\n        }\n\n        .box-two {\n            background: blue;\n            color: #ffffff;\n            text-align: center;\n        }\n\n        .box-three {\n            background: orange;\n        }\n```\n```html\n <article class=\"area\">\n        <div class=\"box-one\">box1</div>\n        <div class=\"box-two\">\n            <h2>页面布局</h2>\n            <p>我是第一行</p>\n            <p>我是第二行</p>\n            <p>我是第三行</p>\n        </div>\n        <div class=\"box-three\">box3</div>\n\n    </article>\n```\n### table布局\n\n```css\n        .area {\n            min-height: 200px;\n            display: table;\n            width: 100%;\n\n        }\n\n        .area div {\n            display: table-cell;\n            height: 200px;\n        }\n\n        .box-one {\n            background: red;\n        }\n\n        .box-two {\n            background: blue;\n            color: #ffffff;\n            text-align: center;\n        }\n\n        .box-three {\n            background: orange;\n        }\n```\n```html\n <article class=\"area\">\n        <div class=\"box-one\">box1</div>\n        <div class=\"box-two\">\n            <h2>页面布局</h2>\n            <p>我是第一行</p>\n            <p>我是第二行</p>\n            <p>我是第三行</p>\n        </div>\n        <div class=\"box-three\">box3</div>\n\n    </article>\n```\n各方案优缺点：\n\n1.浮动和绝对定位都脱离了文档流，浮动如果周边处理得当，兼容性就会比较好，绝对定位使用较方便。\n\n2.flex布局是CSS3中新增，就是为了解决浮动和绝对顶对带来的不足，是一种比较完美的解决方案。\n\n3.网格布局是最新特性，就像是栅格系统。代码量少。\n\n4.表格布局一旦有一部分高度发生变化，如当表格中内容较多，超出设定高度后，其余部分都会发生变化，这样会不符合开发要求，用户体检也不好。\n\n5.上述题目，当高度未知时，只有flex布局和table布局通用。\n\n\n\n","slug":"页面布局","published":1,"updated":"2020-02-12T10:03:14.000Z","comments":1,"photos":[],"link":"","_id":"ck9v62x83001kqqs6dcuj8hrb","content":"<h2 id=\"页面布局\"><a href=\"#页面布局\" class=\"headerlink\" title=\"页面布局\"></a>页面布局</h2><p>页面布局是作为前端开发的必备技能，能够让页面适应多种规格大小的屏幕，才是一个合格的开发，那么我们有多少种形式呢？  </p>\n<a id=\"more\"></a>\n<p><strong>我们使用最基本的三格式布局来做这个尝试</strong></p>\n<h3 id=\"float方式\"><a href=\"#float方式\" class=\"headerlink\" title=\"float方式\"></a>float方式</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.area</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">min-height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box-one</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box-two</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: blue;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#ffffff</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box-three</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: orange;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: right;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">article</span> <span class=\"attr\">class</span>=<span class=\"string\">\"area\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box-one\"</span>&gt;</span>box1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box-three\"</span>&gt;</span>box3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box-two\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>页面布局<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是第一行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是第二行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是第三行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>需要注意box-two是放在最后位置的，因为float的关系，放到最后会将三号挤下去</strong></p>\n<h3 id=\"使用绝对定位\"><a href=\"#使用绝对定位\" class=\"headerlink\" title=\"使用绝对定位\"></a>使用绝对定位</h3><p><strong>过于low，不必了解了。</strong></p>\n<h3 id=\"flex布局\"><a href=\"#flex布局\" class=\"headerlink\" title=\"flex布局\"></a>flex布局</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.area</span> &#123;</span><br><span class=\"line\">            <span class=\"attribute\">min-height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">            <span class=\"attribute\">display</span>: grid;</span><br><span class=\"line\">            <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"selector-class\">.box-one</span> &#123;</span><br><span class=\"line\">            <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">            <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"selector-class\">.box-two</span> &#123;</span><br><span class=\"line\">            <span class=\"attribute\">background</span>: blue;</span><br><span class=\"line\">            <span class=\"attribute\">color</span>: <span class=\"number\">#ffffff</span>;</span><br><span class=\"line\">            <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">            <span class=\"attribute\">flex-grow</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"selector-class\">.box-three</span> &#123;</span><br><span class=\"line\">            <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">            <span class=\"attribute\">background</span>: orange;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">article</span> <span class=\"attr\">class</span>=<span class=\"string\">\"area\"</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box-one\"</span>&gt;</span>box1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box-two\"</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>页面布局<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是第一行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是第二行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是第三行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box-three\"</span>&gt;</span>box3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"grid布局\"><a href=\"#grid布局\" class=\"headerlink\" title=\"grid布局\"></a>grid布局</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.area</span> &#123;</span><br><span class=\"line\">            <span class=\"attribute\">min-height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">            <span class=\"attribute\">display</span>: grid;</span><br><span class=\"line\">            <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">            <span class=\"attribute\">grid-template-columns</span>: <span class=\"number\">33%</span> <span class=\"number\">34%</span> <span class=\"number\">33%</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"selector-class\">.box-one</span> &#123;</span><br><span class=\"line\">            <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"selector-class\">.box-two</span> &#123;</span><br><span class=\"line\">            <span class=\"attribute\">background</span>: blue;</span><br><span class=\"line\">            <span class=\"attribute\">color</span>: <span class=\"number\">#ffffff</span>;</span><br><span class=\"line\">            <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"selector-class\">.box-three</span> &#123;</span><br><span class=\"line\">            <span class=\"attribute\">background</span>: orange;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">article</span> <span class=\"attr\">class</span>=<span class=\"string\">\"area\"</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box-one\"</span>&gt;</span>box1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box-two\"</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>页面布局<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是第一行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是第二行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是第三行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box-three\"</span>&gt;</span>box3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"table布局\"><a href=\"#table布局\" class=\"headerlink\" title=\"table布局\"></a>table布局</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.area</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">min-height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: table;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.area</span> <span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: table-cell;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box-one</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box-two</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: blue;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#ffffff</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box-three</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: orange;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">article</span> <span class=\"attr\">class</span>=<span class=\"string\">\"area\"</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box-one\"</span>&gt;</span>box1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box-two\"</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>页面布局<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是第一行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是第二行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是第三行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box-three\"</span>&gt;</span>box3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>各方案优缺点：</p>\n<p>1.浮动和绝对定位都脱离了文档流，浮动如果周边处理得当，兼容性就会比较好，绝对定位使用较方便。</p>\n<p>2.flex布局是CSS3中新增，就是为了解决浮动和绝对顶对带来的不足，是一种比较完美的解决方案。</p>\n<p>3.网格布局是最新特性，就像是栅格系统。代码量少。</p>\n<p>4.表格布局一旦有一部分高度发生变化，如当表格中内容较多，超出设定高度后，其余部分都会发生变化，这样会不符合开发要求，用户体检也不好。</p>\n<p>5.上述题目，当高度未知时，只有flex布局和table布局通用。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"页面布局\"><a href=\"#页面布局\" class=\"headerlink\" title=\"页面布局\"></a>页面布局</h2><p>页面布局是作为前端开发的必备技能，能够让页面适应多种规格大小的屏幕，才是一个合格的开发，那么我们有多少种形式呢？  </p>","more":"<p><strong>我们使用最基本的三格式布局来做这个尝试</strong></p>\n<h3 id=\"float方式\"><a href=\"#float方式\" class=\"headerlink\" title=\"float方式\"></a>float方式</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.area</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">min-height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box-one</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box-two</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: blue;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#ffffff</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box-three</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: orange;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: right;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">article</span> <span class=\"attr\">class</span>=<span class=\"string\">\"area\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box-one\"</span>&gt;</span>box1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box-three\"</span>&gt;</span>box3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box-two\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>页面布局<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是第一行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是第二行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是第三行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>需要注意box-two是放在最后位置的，因为float的关系，放到最后会将三号挤下去</strong></p>\n<h3 id=\"使用绝对定位\"><a href=\"#使用绝对定位\" class=\"headerlink\" title=\"使用绝对定位\"></a>使用绝对定位</h3><p><strong>过于low，不必了解了。</strong></p>\n<h3 id=\"flex布局\"><a href=\"#flex布局\" class=\"headerlink\" title=\"flex布局\"></a>flex布局</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.area</span> &#123;</span><br><span class=\"line\">            <span class=\"attribute\">min-height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">            <span class=\"attribute\">display</span>: grid;</span><br><span class=\"line\">            <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"selector-class\">.box-one</span> &#123;</span><br><span class=\"line\">            <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">            <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"selector-class\">.box-two</span> &#123;</span><br><span class=\"line\">            <span class=\"attribute\">background</span>: blue;</span><br><span class=\"line\">            <span class=\"attribute\">color</span>: <span class=\"number\">#ffffff</span>;</span><br><span class=\"line\">            <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">            <span class=\"attribute\">flex-grow</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"selector-class\">.box-three</span> &#123;</span><br><span class=\"line\">            <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">            <span class=\"attribute\">background</span>: orange;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">article</span> <span class=\"attr\">class</span>=<span class=\"string\">\"area\"</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box-one\"</span>&gt;</span>box1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box-two\"</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>页面布局<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是第一行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是第二行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是第三行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box-three\"</span>&gt;</span>box3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"grid布局\"><a href=\"#grid布局\" class=\"headerlink\" title=\"grid布局\"></a>grid布局</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.area</span> &#123;</span><br><span class=\"line\">            <span class=\"attribute\">min-height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">            <span class=\"attribute\">display</span>: grid;</span><br><span class=\"line\">            <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">            <span class=\"attribute\">grid-template-columns</span>: <span class=\"number\">33%</span> <span class=\"number\">34%</span> <span class=\"number\">33%</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"selector-class\">.box-one</span> &#123;</span><br><span class=\"line\">            <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"selector-class\">.box-two</span> &#123;</span><br><span class=\"line\">            <span class=\"attribute\">background</span>: blue;</span><br><span class=\"line\">            <span class=\"attribute\">color</span>: <span class=\"number\">#ffffff</span>;</span><br><span class=\"line\">            <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"selector-class\">.box-three</span> &#123;</span><br><span class=\"line\">            <span class=\"attribute\">background</span>: orange;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">article</span> <span class=\"attr\">class</span>=<span class=\"string\">\"area\"</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box-one\"</span>&gt;</span>box1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box-two\"</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>页面布局<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是第一行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是第二行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是第三行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box-three\"</span>&gt;</span>box3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"table布局\"><a href=\"#table布局\" class=\"headerlink\" title=\"table布局\"></a>table布局</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.area</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">min-height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: table;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.area</span> <span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: table-cell;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box-one</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box-two</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: blue;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#ffffff</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box-three</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: orange;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">article</span> <span class=\"attr\">class</span>=<span class=\"string\">\"area\"</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box-one\"</span>&gt;</span>box1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box-two\"</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>页面布局<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是第一行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是第二行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是第三行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box-three\"</span>&gt;</span>box3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>各方案优缺点：</p>\n<p>1.浮动和绝对定位都脱离了文档流，浮动如果周边处理得当，兼容性就会比较好，绝对定位使用较方便。</p>\n<p>2.flex布局是CSS3中新增，就是为了解决浮动和绝对顶对带来的不足，是一种比较完美的解决方案。</p>\n<p>3.网格布局是最新特性，就像是栅格系统。代码量少。</p>\n<p>4.表格布局一旦有一部分高度发生变化，如当表格中内容较多，超出设定高度后，其余部分都会发生变化，这样会不符合开发要求，用户体检也不好。</p>\n<p>5.上述题目，当高度未知时，只有flex布局和table布局通用。</p>"},{"layout":"[post]","title":"页面性能优化","date":"2019-10-11T14:00:05.000Z","_content":"## 页面提升性能的方法有哪些？\n1. 资源压缩合并，减少HTTP请求\n2. 非核心代码异步加载-->异步加载的方式-->异步加载的区别\n3. 利用浏览器缓存-->缓存的分类-->缓存的原理\n4. 使用CDN\n5. 预解析DNS\n<!-- more -->\n## 异步加载\n### 异步加载的方式\n#### 动态脚本加载\n\n```html\n<script src=\"script.js\"></script>\n```\n没有 defer 或 async，浏览器会立即加载并执行指定的脚本，“立即”指的是在渲染该 script 标签之下的文档元素之前，也就是说不等待后续载入的文档元素，读到就加载并执行。\n#### async\n\n```html\n<script async src=\"script.js\"></script>\n```\n有 async，加载和渲染后续文档元素的过程将和 script.js 的加载与执行并行进行（异步）。\n####  defer\n\n```\n<script defer src=\"myscript.js\"></script>\n```\n有 defer，加载后续文档元素的过程将和 script.js 的加载并行进行（异步），但是 script.js 的执行要在所有元素解析完成之后，DOMContentLoaded 事件触发之前完成。\n\n![image](youhua1.png)\n\n### 异步加载的区别\n1. defer 和 async 在网络读取（下载）这块儿是一样的，都是异步的（相较于 HTML 解析）\n2. 它俩的差别在于脚本下载完之后何时执行，显然 defer 是最接近我们对于应用脚本加载和执行的要求的\n3. 关于 defer，此图未尽之处在于它是按照加载顺序执行脚本的，这一点要善加利用\n4. async 则是一个乱序执行的主，反正对它来说脚本的加载和执行是紧紧挨着的，所以不管你声明的顺序如何，只要它加载完了就会立刻执行\n5. 仔细想想，async 对于应用脚本的用处不大，因为它完全不考虑依赖（哪怕是最低级的顺序执行），不过它对于那些可以不依赖任何脚本或不被任何脚本依赖的脚本来说却是非常合适的，最典型的例子：Google Analytics\n\n## 浏览器缓存\n\n### 缓存的分类\n浏览器的缓存分类有两个：\n1. 强缓存\n2. 协商缓存\n\n### 强缓存\n什么是强缓存？强在哪？其实强是强制的意思。当浏览器去请求某个文件的时候，服务端就在respone header里面对该文件做了缓存配置。缓存的时间、缓存类型都由服务端控制。\n#### Expires\nExpires: Thu, 01 Dec 1994 16:00:00 GMT \n使用的是本地时间和服务器时间做对比\n#### Cache-Control\n1. cache-control: max-age=xxxx，public\n客户端和代理服务器都可以缓存该资源；\n客户端在xxx秒的有效期内，如果有请求该资源的需求的话就直接读取缓存,statu code:200 ，如果用户做了刷新操作，就向服务器发起http请求\n\n2. cache-control: max-age=xxxx，private\n只让客户端可以缓存该资源；代理服务器不缓存\n客户端在xxx秒内直接读取缓存,statu code:200\n\n3. cache-control: max-age=xxxx，immutable\n客户端在xxx秒的有效期内，如果有请求该资源的需求的话就直接读取缓存,statu code:200 ，即使用户做了刷新操作，也不向服务器发起http请求\n\n4. cache-control: no-cache\n跳过设置强缓存，但是不妨碍设置协商缓存；一般如果你做了强缓存，只有在强缓存失效了才走协商缓存的，设置了no-cache就不会走强缓存了，每次请求都回询问服务端。\n\n5. cache-control: no-store\n不缓存，这个会让客户端、服务器都不缓存，也就没有所谓的强缓存、协商缓存了。\n\n**Cache-Control优先于Expires**\n### 协商缓存\n上面说到的强缓存就是给资源设置个过期时间，客户端每次请求资源时都会看是否过期；只有在过期才会去询问服务器。所以，强缓存就是为了给客户端自给自足用的。而当某天，客户端请求该资源时发现其过期了，这是就会去请求服务器了，而这时候去请求服务器的这过程就可以设置协商缓存。这时候，协商缓存就是需要客户端和服务器两端进行交互的。\n\n#### Last-Modified（服务器下发值） If-Modified-Since（浏览器请求头）\nLast-Modified：上次修改时间\n每次请求加上上次返回的修改时间，服务器进行对比，如果资源正确，返回304，使用缓存。\n#### Etag（Hash值） If-None-Match\n每次请求加上之前返回的hash值，如果正确，则返回304，使用缓存。\n","source":"_posts/页面性能优化.md","raw":"---\nlayout: '[post]'\ntitle: 页面性能优化\ndate: 2019-10-11 22:00:05\ntags: 前端性能优化\n---\n## 页面提升性能的方法有哪些？\n1. 资源压缩合并，减少HTTP请求\n2. 非核心代码异步加载-->异步加载的方式-->异步加载的区别\n3. 利用浏览器缓存-->缓存的分类-->缓存的原理\n4. 使用CDN\n5. 预解析DNS\n<!-- more -->\n## 异步加载\n### 异步加载的方式\n#### 动态脚本加载\n\n```html\n<script src=\"script.js\"></script>\n```\n没有 defer 或 async，浏览器会立即加载并执行指定的脚本，“立即”指的是在渲染该 script 标签之下的文档元素之前，也就是说不等待后续载入的文档元素，读到就加载并执行。\n#### async\n\n```html\n<script async src=\"script.js\"></script>\n```\n有 async，加载和渲染后续文档元素的过程将和 script.js 的加载与执行并行进行（异步）。\n####  defer\n\n```\n<script defer src=\"myscript.js\"></script>\n```\n有 defer，加载后续文档元素的过程将和 script.js 的加载并行进行（异步），但是 script.js 的执行要在所有元素解析完成之后，DOMContentLoaded 事件触发之前完成。\n\n![image](youhua1.png)\n\n### 异步加载的区别\n1. defer 和 async 在网络读取（下载）这块儿是一样的，都是异步的（相较于 HTML 解析）\n2. 它俩的差别在于脚本下载完之后何时执行，显然 defer 是最接近我们对于应用脚本加载和执行的要求的\n3. 关于 defer，此图未尽之处在于它是按照加载顺序执行脚本的，这一点要善加利用\n4. async 则是一个乱序执行的主，反正对它来说脚本的加载和执行是紧紧挨着的，所以不管你声明的顺序如何，只要它加载完了就会立刻执行\n5. 仔细想想，async 对于应用脚本的用处不大，因为它完全不考虑依赖（哪怕是最低级的顺序执行），不过它对于那些可以不依赖任何脚本或不被任何脚本依赖的脚本来说却是非常合适的，最典型的例子：Google Analytics\n\n## 浏览器缓存\n\n### 缓存的分类\n浏览器的缓存分类有两个：\n1. 强缓存\n2. 协商缓存\n\n### 强缓存\n什么是强缓存？强在哪？其实强是强制的意思。当浏览器去请求某个文件的时候，服务端就在respone header里面对该文件做了缓存配置。缓存的时间、缓存类型都由服务端控制。\n#### Expires\nExpires: Thu, 01 Dec 1994 16:00:00 GMT \n使用的是本地时间和服务器时间做对比\n#### Cache-Control\n1. cache-control: max-age=xxxx，public\n客户端和代理服务器都可以缓存该资源；\n客户端在xxx秒的有效期内，如果有请求该资源的需求的话就直接读取缓存,statu code:200 ，如果用户做了刷新操作，就向服务器发起http请求\n\n2. cache-control: max-age=xxxx，private\n只让客户端可以缓存该资源；代理服务器不缓存\n客户端在xxx秒内直接读取缓存,statu code:200\n\n3. cache-control: max-age=xxxx，immutable\n客户端在xxx秒的有效期内，如果有请求该资源的需求的话就直接读取缓存,statu code:200 ，即使用户做了刷新操作，也不向服务器发起http请求\n\n4. cache-control: no-cache\n跳过设置强缓存，但是不妨碍设置协商缓存；一般如果你做了强缓存，只有在强缓存失效了才走协商缓存的，设置了no-cache就不会走强缓存了，每次请求都回询问服务端。\n\n5. cache-control: no-store\n不缓存，这个会让客户端、服务器都不缓存，也就没有所谓的强缓存、协商缓存了。\n\n**Cache-Control优先于Expires**\n### 协商缓存\n上面说到的强缓存就是给资源设置个过期时间，客户端每次请求资源时都会看是否过期；只有在过期才会去询问服务器。所以，强缓存就是为了给客户端自给自足用的。而当某天，客户端请求该资源时发现其过期了，这是就会去请求服务器了，而这时候去请求服务器的这过程就可以设置协商缓存。这时候，协商缓存就是需要客户端和服务器两端进行交互的。\n\n#### Last-Modified（服务器下发值） If-Modified-Since（浏览器请求头）\nLast-Modified：上次修改时间\n每次请求加上上次返回的修改时间，服务器进行对比，如果资源正确，返回304，使用缓存。\n#### Etag（Hash值） If-None-Match\n每次请求加上之前返回的hash值，如果正确，则返回304，使用缓存。\n","slug":"页面性能优化","published":1,"updated":"2020-05-04T14:03:05.000Z","comments":1,"photos":[],"link":"","_id":"ck9v62x84001lqqs6c1godub5","content":"<h2 id=\"页面提升性能的方法有哪些？\"><a href=\"#页面提升性能的方法有哪些？\" class=\"headerlink\" title=\"页面提升性能的方法有哪些？\"></a>页面提升性能的方法有哪些？</h2><ol>\n<li>资源压缩合并，减少HTTP请求</li>\n<li>非核心代码异步加载–&gt;异步加载的方式–&gt;异步加载的区别</li>\n<li>利用浏览器缓存–&gt;缓存的分类–&gt;缓存的原理</li>\n<li>使用CDN</li>\n<li>预解析DNS<a id=\"more\"></a>\n<h2 id=\"异步加载\"><a href=\"#异步加载\" class=\"headerlink\" title=\"异步加载\"></a>异步加载</h2><h3 id=\"异步加载的方式\"><a href=\"#异步加载的方式\" class=\"headerlink\" title=\"异步加载的方式\"></a>异步加载的方式</h3><h4 id=\"动态脚本加载\"><a href=\"#动态脚本加载\" class=\"headerlink\" title=\"动态脚本加载\"></a>动态脚本加载</h4></li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"script.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>没有 defer 或 async，浏览器会立即加载并执行指定的脚本，“立即”指的是在渲染该 script 标签之下的文档元素之前，也就是说不等待后续载入的文档元素，读到就加载并执行。</p>\n<h4 id=\"async\"><a href=\"#async\" class=\"headerlink\" title=\"async\"></a>async</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">async</span> <span class=\"attr\">src</span>=<span class=\"string\">\"script.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>有 async，加载和渲染后续文档元素的过程将和 script.js 的加载与执行并行进行（异步）。</p>\n<h4 id=\"defer\"><a href=\"#defer\" class=\"headerlink\" title=\"defer\"></a>defer</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script defer src&#x3D;&quot;myscript.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n<p>有 defer，加载后续文档元素的过程将和 script.js 的加载并行进行（异步），但是 script.js 的执行要在所有元素解析完成之后，DOMContentLoaded 事件触发之前完成。</p>\n<p><img src=\"/2019/10/11/%E9%A1%B5%E9%9D%A2%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/youhua1.png\" alt=\"image\"></p>\n<h3 id=\"异步加载的区别\"><a href=\"#异步加载的区别\" class=\"headerlink\" title=\"异步加载的区别\"></a>异步加载的区别</h3><ol>\n<li>defer 和 async 在网络读取（下载）这块儿是一样的，都是异步的（相较于 HTML 解析）</li>\n<li>它俩的差别在于脚本下载完之后何时执行，显然 defer 是最接近我们对于应用脚本加载和执行的要求的</li>\n<li>关于 defer，此图未尽之处在于它是按照加载顺序执行脚本的，这一点要善加利用</li>\n<li>async 则是一个乱序执行的主，反正对它来说脚本的加载和执行是紧紧挨着的，所以不管你声明的顺序如何，只要它加载完了就会立刻执行</li>\n<li>仔细想想，async 对于应用脚本的用处不大，因为它完全不考虑依赖（哪怕是最低级的顺序执行），不过它对于那些可以不依赖任何脚本或不被任何脚本依赖的脚本来说却是非常合适的，最典型的例子：Google Analytics</li>\n</ol>\n<h2 id=\"浏览器缓存\"><a href=\"#浏览器缓存\" class=\"headerlink\" title=\"浏览器缓存\"></a>浏览器缓存</h2><h3 id=\"缓存的分类\"><a href=\"#缓存的分类\" class=\"headerlink\" title=\"缓存的分类\"></a>缓存的分类</h3><p>浏览器的缓存分类有两个：</p>\n<ol>\n<li>强缓存</li>\n<li>协商缓存</li>\n</ol>\n<h3 id=\"强缓存\"><a href=\"#强缓存\" class=\"headerlink\" title=\"强缓存\"></a>强缓存</h3><p>什么是强缓存？强在哪？其实强是强制的意思。当浏览器去请求某个文件的时候，服务端就在respone header里面对该文件做了缓存配置。缓存的时间、缓存类型都由服务端控制。</p>\n<h4 id=\"Expires\"><a href=\"#Expires\" class=\"headerlink\" title=\"Expires\"></a>Expires</h4><p>Expires: Thu, 01 Dec 1994 16:00:00 GMT<br>使用的是本地时间和服务器时间做对比</p>\n<h4 id=\"Cache-Control\"><a href=\"#Cache-Control\" class=\"headerlink\" title=\"Cache-Control\"></a>Cache-Control</h4><ol>\n<li><p>cache-control: max-age=xxxx，public<br>客户端和代理服务器都可以缓存该资源；<br>客户端在xxx秒的有效期内，如果有请求该资源的需求的话就直接读取缓存,statu code:200 ，如果用户做了刷新操作，就向服务器发起http请求</p>\n</li>\n<li><p>cache-control: max-age=xxxx，private<br>只让客户端可以缓存该资源；代理服务器不缓存<br>客户端在xxx秒内直接读取缓存,statu code:200</p>\n</li>\n<li><p>cache-control: max-age=xxxx，immutable<br>客户端在xxx秒的有效期内，如果有请求该资源的需求的话就直接读取缓存,statu code:200 ，即使用户做了刷新操作，也不向服务器发起http请求</p>\n</li>\n<li><p>cache-control: no-cache<br>跳过设置强缓存，但是不妨碍设置协商缓存；一般如果你做了强缓存，只有在强缓存失效了才走协商缓存的，设置了no-cache就不会走强缓存了，每次请求都回询问服务端。</p>\n</li>\n<li><p>cache-control: no-store<br>不缓存，这个会让客户端、服务器都不缓存，也就没有所谓的强缓存、协商缓存了。</p>\n</li>\n</ol>\n<p><strong>Cache-Control优先于Expires</strong></p>\n<h3 id=\"协商缓存\"><a href=\"#协商缓存\" class=\"headerlink\" title=\"协商缓存\"></a>协商缓存</h3><p>上面说到的强缓存就是给资源设置个过期时间，客户端每次请求资源时都会看是否过期；只有在过期才会去询问服务器。所以，强缓存就是为了给客户端自给自足用的。而当某天，客户端请求该资源时发现其过期了，这是就会去请求服务器了，而这时候去请求服务器的这过程就可以设置协商缓存。这时候，协商缓存就是需要客户端和服务器两端进行交互的。</p>\n<h4 id=\"Last-Modified（服务器下发值）-If-Modified-Since（浏览器请求头）\"><a href=\"#Last-Modified（服务器下发值）-If-Modified-Since（浏览器请求头）\" class=\"headerlink\" title=\"Last-Modified（服务器下发值） If-Modified-Since（浏览器请求头）\"></a>Last-Modified（服务器下发值） If-Modified-Since（浏览器请求头）</h4><p>Last-Modified：上次修改时间<br>每次请求加上上次返回的修改时间，服务器进行对比，如果资源正确，返回304，使用缓存。</p>\n<h4 id=\"Etag（Hash值）-If-None-Match\"><a href=\"#Etag（Hash值）-If-None-Match\" class=\"headerlink\" title=\"Etag（Hash值） If-None-Match\"></a>Etag（Hash值） If-None-Match</h4><p>每次请求加上之前返回的hash值，如果正确，则返回304，使用缓存。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"页面提升性能的方法有哪些？\"><a href=\"#页面提升性能的方法有哪些？\" class=\"headerlink\" title=\"页面提升性能的方法有哪些？\"></a>页面提升性能的方法有哪些？</h2><ol>\n<li>资源压缩合并，减少HTTP请求</li>\n<li>非核心代码异步加载–&gt;异步加载的方式–&gt;异步加载的区别</li>\n<li>利用浏览器缓存–&gt;缓存的分类–&gt;缓存的原理</li>\n<li>使用CDN</li>\n<li>预解析DNS</li></ol>","more":"<h2 id=\"异步加载\"><a href=\"#异步加载\" class=\"headerlink\" title=\"异步加载\"></a>异步加载</h2><h3 id=\"异步加载的方式\"><a href=\"#异步加载的方式\" class=\"headerlink\" title=\"异步加载的方式\"></a>异步加载的方式</h3><h4 id=\"动态脚本加载\"><a href=\"#动态脚本加载\" class=\"headerlink\" title=\"动态脚本加载\"></a>动态脚本加载</h4>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"script.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>没有 defer 或 async，浏览器会立即加载并执行指定的脚本，“立即”指的是在渲染该 script 标签之下的文档元素之前，也就是说不等待后续载入的文档元素，读到就加载并执行。</p>\n<h4 id=\"async\"><a href=\"#async\" class=\"headerlink\" title=\"async\"></a>async</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">async</span> <span class=\"attr\">src</span>=<span class=\"string\">\"script.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>有 async，加载和渲染后续文档元素的过程将和 script.js 的加载与执行并行进行（异步）。</p>\n<h4 id=\"defer\"><a href=\"#defer\" class=\"headerlink\" title=\"defer\"></a>defer</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script defer src&#x3D;&quot;myscript.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n<p>有 defer，加载后续文档元素的过程将和 script.js 的加载并行进行（异步），但是 script.js 的执行要在所有元素解析完成之后，DOMContentLoaded 事件触发之前完成。</p>\n<p><img src=\"/2019/10/11/%E9%A1%B5%E9%9D%A2%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/youhua1.png\" alt=\"image\"></p>\n<h3 id=\"异步加载的区别\"><a href=\"#异步加载的区别\" class=\"headerlink\" title=\"异步加载的区别\"></a>异步加载的区别</h3><ol>\n<li>defer 和 async 在网络读取（下载）这块儿是一样的，都是异步的（相较于 HTML 解析）</li>\n<li>它俩的差别在于脚本下载完之后何时执行，显然 defer 是最接近我们对于应用脚本加载和执行的要求的</li>\n<li>关于 defer，此图未尽之处在于它是按照加载顺序执行脚本的，这一点要善加利用</li>\n<li>async 则是一个乱序执行的主，反正对它来说脚本的加载和执行是紧紧挨着的，所以不管你声明的顺序如何，只要它加载完了就会立刻执行</li>\n<li>仔细想想，async 对于应用脚本的用处不大，因为它完全不考虑依赖（哪怕是最低级的顺序执行），不过它对于那些可以不依赖任何脚本或不被任何脚本依赖的脚本来说却是非常合适的，最典型的例子：Google Analytics</li>\n</ol>\n<h2 id=\"浏览器缓存\"><a href=\"#浏览器缓存\" class=\"headerlink\" title=\"浏览器缓存\"></a>浏览器缓存</h2><h3 id=\"缓存的分类\"><a href=\"#缓存的分类\" class=\"headerlink\" title=\"缓存的分类\"></a>缓存的分类</h3><p>浏览器的缓存分类有两个：</p>\n<ol>\n<li>强缓存</li>\n<li>协商缓存</li>\n</ol>\n<h3 id=\"强缓存\"><a href=\"#强缓存\" class=\"headerlink\" title=\"强缓存\"></a>强缓存</h3><p>什么是强缓存？强在哪？其实强是强制的意思。当浏览器去请求某个文件的时候，服务端就在respone header里面对该文件做了缓存配置。缓存的时间、缓存类型都由服务端控制。</p>\n<h4 id=\"Expires\"><a href=\"#Expires\" class=\"headerlink\" title=\"Expires\"></a>Expires</h4><p>Expires: Thu, 01 Dec 1994 16:00:00 GMT<br>使用的是本地时间和服务器时间做对比</p>\n<h4 id=\"Cache-Control\"><a href=\"#Cache-Control\" class=\"headerlink\" title=\"Cache-Control\"></a>Cache-Control</h4><ol>\n<li><p>cache-control: max-age=xxxx，public<br>客户端和代理服务器都可以缓存该资源；<br>客户端在xxx秒的有效期内，如果有请求该资源的需求的话就直接读取缓存,statu code:200 ，如果用户做了刷新操作，就向服务器发起http请求</p>\n</li>\n<li><p>cache-control: max-age=xxxx，private<br>只让客户端可以缓存该资源；代理服务器不缓存<br>客户端在xxx秒内直接读取缓存,statu code:200</p>\n</li>\n<li><p>cache-control: max-age=xxxx，immutable<br>客户端在xxx秒的有效期内，如果有请求该资源的需求的话就直接读取缓存,statu code:200 ，即使用户做了刷新操作，也不向服务器发起http请求</p>\n</li>\n<li><p>cache-control: no-cache<br>跳过设置强缓存，但是不妨碍设置协商缓存；一般如果你做了强缓存，只有在强缓存失效了才走协商缓存的，设置了no-cache就不会走强缓存了，每次请求都回询问服务端。</p>\n</li>\n<li><p>cache-control: no-store<br>不缓存，这个会让客户端、服务器都不缓存，也就没有所谓的强缓存、协商缓存了。</p>\n</li>\n</ol>\n<p><strong>Cache-Control优先于Expires</strong></p>\n<h3 id=\"协商缓存\"><a href=\"#协商缓存\" class=\"headerlink\" title=\"协商缓存\"></a>协商缓存</h3><p>上面说到的强缓存就是给资源设置个过期时间，客户端每次请求资源时都会看是否过期；只有在过期才会去询问服务器。所以，强缓存就是为了给客户端自给自足用的。而当某天，客户端请求该资源时发现其过期了，这是就会去请求服务器了，而这时候去请求服务器的这过程就可以设置协商缓存。这时候，协商缓存就是需要客户端和服务器两端进行交互的。</p>\n<h4 id=\"Last-Modified（服务器下发值）-If-Modified-Since（浏览器请求头）\"><a href=\"#Last-Modified（服务器下发值）-If-Modified-Since（浏览器请求头）\" class=\"headerlink\" title=\"Last-Modified（服务器下发值） If-Modified-Since（浏览器请求头）\"></a>Last-Modified（服务器下发值） If-Modified-Since（浏览器请求头）</h4><p>Last-Modified：上次修改时间<br>每次请求加上上次返回的修改时间，服务器进行对比，如果资源正确，返回304，使用缓存。</p>\n<h4 id=\"Etag（Hash值）-If-None-Match\"><a href=\"#Etag（Hash值）-If-None-Match\" class=\"headerlink\" title=\"Etag（Hash值） If-None-Match\"></a>Etag（Hash值） If-None-Match</h4><p>每次请求加上之前返回的hash值，如果正确，则返回304，使用缓存。</p>"},{"layout":"[post]","title":"VueRouter","date":"2020-01-01T13:30:12.000Z","_content":"## 路由模式\n- hash\n- history\n<!-- more -->\n\n### hash\n带＃\n### history\n需要server支持\n\n## 动态路由\n\n```js\nconst User = {\n    template:'<div>{{$route.params.id}}</div>'\n}\nconst router = new VueRouter({\n    routes:[\n        // 动态路径参数 以冒号开头。命中/user/10等格式路由\n        {path:'/user/:id',component:User}\n    ]\n})\n```\n## 懒加载\n\n```js\nimport Vue from 'vue'\nimport VueRouter from 'vue-router'\nVue.use(VueRouter)\nexport default new VueRouter({\n routes: [\n {\n path: '/',\n name: 'Navigator',\n component: () => import(/* webpackChunkName: \"navigator\" */ './../components/Navigator')\n },\n {\n path: '/tucao',\n name: 'Tucao',\n component: () => import(/* webpackChunkName: \"tucao\" */ './../components/Tucao')\n }\n ]\n```\n## 路由守卫\n路由钩子函数有三种：\n1. 全局钩子： beforeEach、 afterEach\n\n2. 单个路由里面的钩子： beforeEnter、 beforeLeave\n\n3. 组件路由：beforeRouteEnter、 beforeRouteUpdate、 beforeRouteLeave\n\n### 全局守卫\n无论访问哪一个路径，都会触发全局的钩子函数，位置是调用router的方法\n\n**router.beforeEach() 进入之前触发**\n\n**router.afterEach() 进入之后触发**\n\n#### beforeEach（全局前置守卫）\n使用 router.beforeEach 注册一个全局前置守卫\n\n```js\nconst router = new VueRouter({\n    。。。\n})\nrouter.beforeEach((to,from,next)=>{\n    ...\n})\n```\n每个守卫方法接收三个参数：\n- to: Route: 即将要进入的目标路由对象（to是一个对象，是将要进入的路由对象，可以用to.path调用路由对象中的属性）\n- from: Route: 当前导航正要离开的路由\n- next: Function: 这是一个必须需要调用的方法，执行效果依赖 next 方法的调用参数。\n\n##### next参数\n - next(): 进行管道中的下一个钩子。如果全部钩子执行完了，则导航的状态就是confirmed (确认的)。\n - next(false): 中断当前的导航。如果浏览器的 URL 改变了 (可能是用户手动或者浏览器后退按 钮)，那么 URL 地址会重置到 from 路由对应的地址。\n - next('/') 或者 next({ path: '/' }): 跳转到一个不同的地址。当前的导航被中断，然后进行一个新的导航。你可以向 next 传递任意位置对象，且允许设置诸如 replace: true、name: 'home' 之类的选项以及任何用在router-link 的 to prop或router.push中的选项。\n - next(error): (2.4.0+) 如果传入 next 的参数是一个 Error 实例，则导航会被终止且该错误会被传递给router.onError()注册过的回调。\n\n> 确保要调用 next 方法，否则钩子就不会被 resolved。\n\n#### afterEach（全局后置钩子）\n\n```js\nconst router = new VueRouter({\n    。。。\n})\nrouter.afterEach((to,from)=>{\n    ...\n})\n```\n和守卫不同的是，这些钩子不会接受 next 函数也不会改变导航本身\n#### 路由独享的守卫(单个路由独享的)\n\n```js\nexport default new VueRouter({\n routes: [\n {\n path: '/',\n name: 'Navigator',\n router.beforeEnter((to,from,next)=>{\n    ...\n }),\n component: () => import(/* webpackChunkName: \"navigator\" */ './../components/Navigator')\n }\n ]\n```\n#### 组件级路由钩子\n\n```js\n{\n\ndata,\n\nmethods\n\nbeforeRouteEnter(){\n\n   // this 不指向实例 组件还没创建\n\n    next((vm) =>{\n\n        // vm就是实例\n\n    })\n\n}\n\nbeforeRouteUpdate(){}\n\nbeforeRouteLeave(){}\n\n}\n\n```\n\n![image](luyou1.png)\nbeforeRouteEnter 守卫 不能 访问 this，因为守卫在导航确认前被调用,因此即将登场的新组件还没被创建。不过，你可以通过传一个回调给 next来访问组件实例。在导航被确认的时候执行回调，并且把组件实例作为回调方法的参数。\n\n![image](luyou2.png)\n\n注意~ ： beforeRouteEnter 是支持给 next 传递回调的唯一守卫。对于 beforeRouteUpdate 和 beforeRouteLeave 来说，this 已经可用了，所以不支持传递回调，因为没有必要了。\n\n这个离开守卫beforeRouteLeave()通常用来禁止用户在还未保存修改前突然离开。该导航可以通过 next(false) 来取消。\n\n![image](luyou3.png)\n\n#### 完整的导航解析流程：\n\n1. 导航被触发。\n\n2. 在失活的组件里调用离开守卫。\n\n3. 调用全局的 beforeEach 守卫。\n\n4. 在重用的组件里调用 beforeRouteUpdate 守卫 (2.2+)。\n\n5. 在路由配置里调用 beforeEnter。\n\n6. 解析异步路由组件。\n\n7. 在被激活的组件里调用 beforeRouteEnter。\n\n8. 调用全局的 beforeResolve 守卫 (2.5+)。\n\n9. 导航被确认。\n\n10. 调用全局的 afterEach 钩子。\n\n11. 触发 DOM 更新。\n\n12. 用创建好的实例调用 beforeRouteEnter 守卫中传给 next 的回调函数。\n\n\n","source":"_posts/VueRouter.md","raw":"---\nlayout: '[post]'\ntitle: VueRouter\ndate: 2020-01-01 21:30:12\ntags: Vue\n---\n## 路由模式\n- hash\n- history\n<!-- more -->\n\n### hash\n带＃\n### history\n需要server支持\n\n## 动态路由\n\n```js\nconst User = {\n    template:'<div>{{$route.params.id}}</div>'\n}\nconst router = new VueRouter({\n    routes:[\n        // 动态路径参数 以冒号开头。命中/user/10等格式路由\n        {path:'/user/:id',component:User}\n    ]\n})\n```\n## 懒加载\n\n```js\nimport Vue from 'vue'\nimport VueRouter from 'vue-router'\nVue.use(VueRouter)\nexport default new VueRouter({\n routes: [\n {\n path: '/',\n name: 'Navigator',\n component: () => import(/* webpackChunkName: \"navigator\" */ './../components/Navigator')\n },\n {\n path: '/tucao',\n name: 'Tucao',\n component: () => import(/* webpackChunkName: \"tucao\" */ './../components/Tucao')\n }\n ]\n```\n## 路由守卫\n路由钩子函数有三种：\n1. 全局钩子： beforeEach、 afterEach\n\n2. 单个路由里面的钩子： beforeEnter、 beforeLeave\n\n3. 组件路由：beforeRouteEnter、 beforeRouteUpdate、 beforeRouteLeave\n\n### 全局守卫\n无论访问哪一个路径，都会触发全局的钩子函数，位置是调用router的方法\n\n**router.beforeEach() 进入之前触发**\n\n**router.afterEach() 进入之后触发**\n\n#### beforeEach（全局前置守卫）\n使用 router.beforeEach 注册一个全局前置守卫\n\n```js\nconst router = new VueRouter({\n    。。。\n})\nrouter.beforeEach((to,from,next)=>{\n    ...\n})\n```\n每个守卫方法接收三个参数：\n- to: Route: 即将要进入的目标路由对象（to是一个对象，是将要进入的路由对象，可以用to.path调用路由对象中的属性）\n- from: Route: 当前导航正要离开的路由\n- next: Function: 这是一个必须需要调用的方法，执行效果依赖 next 方法的调用参数。\n\n##### next参数\n - next(): 进行管道中的下一个钩子。如果全部钩子执行完了，则导航的状态就是confirmed (确认的)。\n - next(false): 中断当前的导航。如果浏览器的 URL 改变了 (可能是用户手动或者浏览器后退按 钮)，那么 URL 地址会重置到 from 路由对应的地址。\n - next('/') 或者 next({ path: '/' }): 跳转到一个不同的地址。当前的导航被中断，然后进行一个新的导航。你可以向 next 传递任意位置对象，且允许设置诸如 replace: true、name: 'home' 之类的选项以及任何用在router-link 的 to prop或router.push中的选项。\n - next(error): (2.4.0+) 如果传入 next 的参数是一个 Error 实例，则导航会被终止且该错误会被传递给router.onError()注册过的回调。\n\n> 确保要调用 next 方法，否则钩子就不会被 resolved。\n\n#### afterEach（全局后置钩子）\n\n```js\nconst router = new VueRouter({\n    。。。\n})\nrouter.afterEach((to,from)=>{\n    ...\n})\n```\n和守卫不同的是，这些钩子不会接受 next 函数也不会改变导航本身\n#### 路由独享的守卫(单个路由独享的)\n\n```js\nexport default new VueRouter({\n routes: [\n {\n path: '/',\n name: 'Navigator',\n router.beforeEnter((to,from,next)=>{\n    ...\n }),\n component: () => import(/* webpackChunkName: \"navigator\" */ './../components/Navigator')\n }\n ]\n```\n#### 组件级路由钩子\n\n```js\n{\n\ndata,\n\nmethods\n\nbeforeRouteEnter(){\n\n   // this 不指向实例 组件还没创建\n\n    next((vm) =>{\n\n        // vm就是实例\n\n    })\n\n}\n\nbeforeRouteUpdate(){}\n\nbeforeRouteLeave(){}\n\n}\n\n```\n\n![image](luyou1.png)\nbeforeRouteEnter 守卫 不能 访问 this，因为守卫在导航确认前被调用,因此即将登场的新组件还没被创建。不过，你可以通过传一个回调给 next来访问组件实例。在导航被确认的时候执行回调，并且把组件实例作为回调方法的参数。\n\n![image](luyou2.png)\n\n注意~ ： beforeRouteEnter 是支持给 next 传递回调的唯一守卫。对于 beforeRouteUpdate 和 beforeRouteLeave 来说，this 已经可用了，所以不支持传递回调，因为没有必要了。\n\n这个离开守卫beforeRouteLeave()通常用来禁止用户在还未保存修改前突然离开。该导航可以通过 next(false) 来取消。\n\n![image](luyou3.png)\n\n#### 完整的导航解析流程：\n\n1. 导航被触发。\n\n2. 在失活的组件里调用离开守卫。\n\n3. 调用全局的 beforeEach 守卫。\n\n4. 在重用的组件里调用 beforeRouteUpdate 守卫 (2.2+)。\n\n5. 在路由配置里调用 beforeEnter。\n\n6. 解析异步路由组件。\n\n7. 在被激活的组件里调用 beforeRouteEnter。\n\n8. 调用全局的 beforeResolve 守卫 (2.5+)。\n\n9. 导航被确认。\n\n10. 调用全局的 afterEach 钩子。\n\n11. 触发 DOM 更新。\n\n12. 用创建好的实例调用 beforeRouteEnter 守卫中传给 next 的回调函数。\n\n\n","slug":"VueRouter","published":1,"updated":"2020-05-06T13:34:06.000Z","comments":1,"photos":[],"link":"","_id":"ck9vdv98i0000fgs619510aud","content":"<h2 id=\"路由模式\"><a href=\"#路由模式\" class=\"headerlink\" title=\"路由模式\"></a>路由模式</h2><ul>\n<li>hash</li>\n<li>history<a id=\"more\"></a>\n\n</li>\n</ul>\n<h3 id=\"hash\"><a href=\"#hash\" class=\"headerlink\" title=\"hash\"></a>hash</h3><p>带＃</p>\n<h3 id=\"history\"><a href=\"#history\" class=\"headerlink\" title=\"history\"></a>history</h3><p>需要server支持</p>\n<h2 id=\"动态路由\"><a href=\"#动态路由\" class=\"headerlink\" title=\"动态路由\"></a>动态路由</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> User = &#123;</span><br><span class=\"line\">    template:<span class=\"string\">'&lt;div&gt;&#123;&#123;$route.params.id&#125;&#125;&lt;/div&gt;'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> VueRouter(&#123;</span><br><span class=\"line\">    routes:[</span><br><span class=\"line\">        <span class=\"comment\">// 动态路径参数 以冒号开头。命中/user/10等格式路由</span></span><br><span class=\"line\">        &#123;<span class=\"attr\">path</span>:<span class=\"string\">'/user/:id'</span>,<span class=\"attr\">component</span>:User&#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"懒加载\"><a href=\"#懒加载\" class=\"headerlink\" title=\"懒加载\"></a>懒加载</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> VueRouter <span class=\"keyword\">from</span> <span class=\"string\">'vue-router'</span></span><br><span class=\"line\">Vue.use(VueRouter)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> VueRouter(&#123;</span><br><span class=\"line\"> routes: [</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\"> path: <span class=\"string\">'/'</span>,</span><br><span class=\"line\"> name: <span class=\"string\">'Navigator'</span>,</span><br><span class=\"line\"> component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"comment\">/* webpackChunkName: \"navigator\" */</span> <span class=\"string\">'./../components/Navigator'</span>)</span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\"> path: <span class=\"string\">'/tucao'</span>,</span><br><span class=\"line\"> name: <span class=\"string\">'Tucao'</span>,</span><br><span class=\"line\"> component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"comment\">/* webpackChunkName: \"tucao\" */</span> <span class=\"string\">'./../components/Tucao'</span>)</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> ]</span><br></pre></td></tr></table></figure>\n<h2 id=\"路由守卫\"><a href=\"#路由守卫\" class=\"headerlink\" title=\"路由守卫\"></a>路由守卫</h2><p>路由钩子函数有三种：</p>\n<ol>\n<li><p>全局钩子： beforeEach、 afterEach</p>\n</li>\n<li><p>单个路由里面的钩子： beforeEnter、 beforeLeave</p>\n</li>\n<li><p>组件路由：beforeRouteEnter、 beforeRouteUpdate、 beforeRouteLeave</p>\n</li>\n</ol>\n<h3 id=\"全局守卫\"><a href=\"#全局守卫\" class=\"headerlink\" title=\"全局守卫\"></a>全局守卫</h3><p>无论访问哪一个路径，都会触发全局的钩子函数，位置是调用router的方法</p>\n<p><strong>router.beforeEach() 进入之前触发</strong></p>\n<p><strong>router.afterEach() 进入之后触发</strong></p>\n<h4 id=\"beforeEach（全局前置守卫）\"><a href=\"#beforeEach（全局前置守卫）\" class=\"headerlink\" title=\"beforeEach（全局前置守卫）\"></a>beforeEach（全局前置守卫）</h4><p>使用 router.beforeEach 注册一个全局前置守卫</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> VueRouter(&#123;</span><br><span class=\"line\">    。。。</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">router.beforeEach(<span class=\"function\">(<span class=\"params\">to,<span class=\"keyword\">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>每个守卫方法接收三个参数：</p>\n<ul>\n<li>to: Route: 即将要进入的目标路由对象（to是一个对象，是将要进入的路由对象，可以用to.path调用路由对象中的属性）</li>\n<li>from: Route: 当前导航正要离开的路由</li>\n<li>next: Function: 这是一个必须需要调用的方法，执行效果依赖 next 方法的调用参数。</li>\n</ul>\n<h5 id=\"next参数\"><a href=\"#next参数\" class=\"headerlink\" title=\"next参数\"></a>next参数</h5><ul>\n<li>next(): 进行管道中的下一个钩子。如果全部钩子执行完了，则导航的状态就是confirmed (确认的)。</li>\n<li>next(false): 中断当前的导航。如果浏览器的 URL 改变了 (可能是用户手动或者浏览器后退按 钮)，那么 URL 地址会重置到 from 路由对应的地址。</li>\n<li>next(‘/‘) 或者 next({ path: ‘/‘ }): 跳转到一个不同的地址。当前的导航被中断，然后进行一个新的导航。你可以向 next 传递任意位置对象，且允许设置诸如 replace: true、name: ‘home’ 之类的选项以及任何用在router-link 的 to prop或router.push中的选项。</li>\n<li>next(error): (2.4.0+) 如果传入 next 的参数是一个 Error 实例，则导航会被终止且该错误会被传递给router.onError()注册过的回调。</li>\n</ul>\n<blockquote>\n<p>确保要调用 next 方法，否则钩子就不会被 resolved。</p>\n</blockquote>\n<h4 id=\"afterEach（全局后置钩子）\"><a href=\"#afterEach（全局后置钩子）\" class=\"headerlink\" title=\"afterEach（全局后置钩子）\"></a>afterEach（全局后置钩子）</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> VueRouter(&#123;</span><br><span class=\"line\">    。。。</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">router.afterEach(<span class=\"function\">(<span class=\"params\">to,<span class=\"keyword\">from</span></span>)=&gt;</span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>和守卫不同的是，这些钩子不会接受 next 函数也不会改变导航本身</p>\n<h4 id=\"路由独享的守卫-单个路由独享的\"><a href=\"#路由独享的守卫-单个路由独享的\" class=\"headerlink\" title=\"路由独享的守卫(单个路由独享的)\"></a>路由独享的守卫(单个路由独享的)</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> VueRouter(&#123;</span><br><span class=\"line\"> routes: [</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\"> path: <span class=\"string\">'/'</span>,</span><br><span class=\"line\"> name: <span class=\"string\">'Navigator'</span>,</span><br><span class=\"line\"> router.beforeEnter(<span class=\"function\">(<span class=\"params\">to,<span class=\"keyword\">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\"> &#125;),</span><br><span class=\"line\"> component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"comment\">/* webpackChunkName: \"navigator\" */</span> <span class=\"string\">'./../components/Navigator'</span>)</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> ]</span><br></pre></td></tr></table></figure>\n<h4 id=\"组件级路由钩子\"><a href=\"#组件级路由钩子\" class=\"headerlink\" title=\"组件级路由钩子\"></a>组件级路由钩子</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">data,</span><br><span class=\"line\"></span><br><span class=\"line\">methods</span><br><span class=\"line\"></span><br><span class=\"line\">beforeRouteEnter()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// this 不指向实例 组件还没创建</span></span><br><span class=\"line\"></span><br><span class=\"line\">    next(<span class=\"function\">(<span class=\"params\">vm</span>) =&gt;</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// vm就是实例</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">beforeRouteUpdate()&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">beforeRouteLeave()&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2020/01/01/VueRouter/luyou1.png\" alt=\"image\"><br>beforeRouteEnter 守卫 不能 访问 this，因为守卫在导航确认前被调用,因此即将登场的新组件还没被创建。不过，你可以通过传一个回调给 next来访问组件实例。在导航被确认的时候执行回调，并且把组件实例作为回调方法的参数。</p>\n<p><img src=\"/2020/01/01/VueRouter/luyou2.png\" alt=\"image\"></p>\n<p>注意~ ： beforeRouteEnter 是支持给 next 传递回调的唯一守卫。对于 beforeRouteUpdate 和 beforeRouteLeave 来说，this 已经可用了，所以不支持传递回调，因为没有必要了。</p>\n<p>这个离开守卫beforeRouteLeave()通常用来禁止用户在还未保存修改前突然离开。该导航可以通过 next(false) 来取消。</p>\n<p><img src=\"/2020/01/01/VueRouter/luyou3.png\" alt=\"image\"></p>\n<h4 id=\"完整的导航解析流程：\"><a href=\"#完整的导航解析流程：\" class=\"headerlink\" title=\"完整的导航解析流程：\"></a>完整的导航解析流程：</h4><ol>\n<li><p>导航被触发。</p>\n</li>\n<li><p>在失活的组件里调用离开守卫。</p>\n</li>\n<li><p>调用全局的 beforeEach 守卫。</p>\n</li>\n<li><p>在重用的组件里调用 beforeRouteUpdate 守卫 (2.2+)。</p>\n</li>\n<li><p>在路由配置里调用 beforeEnter。</p>\n</li>\n<li><p>解析异步路由组件。</p>\n</li>\n<li><p>在被激活的组件里调用 beforeRouteEnter。</p>\n</li>\n<li><p>调用全局的 beforeResolve 守卫 (2.5+)。</p>\n</li>\n<li><p>导航被确认。</p>\n</li>\n<li><p>调用全局的 afterEach 钩子。</p>\n</li>\n<li><p>触发 DOM 更新。</p>\n</li>\n<li><p>用创建好的实例调用 beforeRouteEnter 守卫中传给 next 的回调函数。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h2 id=\"路由模式\"><a href=\"#路由模式\" class=\"headerlink\" title=\"路由模式\"></a>路由模式</h2><ul>\n<li>hash</li>\n<li>history</li></ul>","more":"\n\n<h3 id=\"hash\"><a href=\"#hash\" class=\"headerlink\" title=\"hash\"></a>hash</h3><p>带＃</p>\n<h3 id=\"history\"><a href=\"#history\" class=\"headerlink\" title=\"history\"></a>history</h3><p>需要server支持</p>\n<h2 id=\"动态路由\"><a href=\"#动态路由\" class=\"headerlink\" title=\"动态路由\"></a>动态路由</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> User = &#123;</span><br><span class=\"line\">    template:<span class=\"string\">'&lt;div&gt;&#123;&#123;$route.params.id&#125;&#125;&lt;/div&gt;'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> VueRouter(&#123;</span><br><span class=\"line\">    routes:[</span><br><span class=\"line\">        <span class=\"comment\">// 动态路径参数 以冒号开头。命中/user/10等格式路由</span></span><br><span class=\"line\">        &#123;<span class=\"attr\">path</span>:<span class=\"string\">'/user/:id'</span>,<span class=\"attr\">component</span>:User&#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"懒加载\"><a href=\"#懒加载\" class=\"headerlink\" title=\"懒加载\"></a>懒加载</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> VueRouter <span class=\"keyword\">from</span> <span class=\"string\">'vue-router'</span></span><br><span class=\"line\">Vue.use(VueRouter)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> VueRouter(&#123;</span><br><span class=\"line\"> routes: [</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\"> path: <span class=\"string\">'/'</span>,</span><br><span class=\"line\"> name: <span class=\"string\">'Navigator'</span>,</span><br><span class=\"line\"> component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"comment\">/* webpackChunkName: \"navigator\" */</span> <span class=\"string\">'./../components/Navigator'</span>)</span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\"> path: <span class=\"string\">'/tucao'</span>,</span><br><span class=\"line\"> name: <span class=\"string\">'Tucao'</span>,</span><br><span class=\"line\"> component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"comment\">/* webpackChunkName: \"tucao\" */</span> <span class=\"string\">'./../components/Tucao'</span>)</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> ]</span><br></pre></td></tr></table></figure>\n<h2 id=\"路由守卫\"><a href=\"#路由守卫\" class=\"headerlink\" title=\"路由守卫\"></a>路由守卫</h2><p>路由钩子函数有三种：</p>\n<ol>\n<li><p>全局钩子： beforeEach、 afterEach</p>\n</li>\n<li><p>单个路由里面的钩子： beforeEnter、 beforeLeave</p>\n</li>\n<li><p>组件路由：beforeRouteEnter、 beforeRouteUpdate、 beforeRouteLeave</p>\n</li>\n</ol>\n<h3 id=\"全局守卫\"><a href=\"#全局守卫\" class=\"headerlink\" title=\"全局守卫\"></a>全局守卫</h3><p>无论访问哪一个路径，都会触发全局的钩子函数，位置是调用router的方法</p>\n<p><strong>router.beforeEach() 进入之前触发</strong></p>\n<p><strong>router.afterEach() 进入之后触发</strong></p>\n<h4 id=\"beforeEach（全局前置守卫）\"><a href=\"#beforeEach（全局前置守卫）\" class=\"headerlink\" title=\"beforeEach（全局前置守卫）\"></a>beforeEach（全局前置守卫）</h4><p>使用 router.beforeEach 注册一个全局前置守卫</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> VueRouter(&#123;</span><br><span class=\"line\">    。。。</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">router.beforeEach(<span class=\"function\">(<span class=\"params\">to,<span class=\"keyword\">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>每个守卫方法接收三个参数：</p>\n<ul>\n<li>to: Route: 即将要进入的目标路由对象（to是一个对象，是将要进入的路由对象，可以用to.path调用路由对象中的属性）</li>\n<li>from: Route: 当前导航正要离开的路由</li>\n<li>next: Function: 这是一个必须需要调用的方法，执行效果依赖 next 方法的调用参数。</li>\n</ul>\n<h5 id=\"next参数\"><a href=\"#next参数\" class=\"headerlink\" title=\"next参数\"></a>next参数</h5><ul>\n<li>next(): 进行管道中的下一个钩子。如果全部钩子执行完了，则导航的状态就是confirmed (确认的)。</li>\n<li>next(false): 中断当前的导航。如果浏览器的 URL 改变了 (可能是用户手动或者浏览器后退按 钮)，那么 URL 地址会重置到 from 路由对应的地址。</li>\n<li>next(‘/‘) 或者 next({ path: ‘/‘ }): 跳转到一个不同的地址。当前的导航被中断，然后进行一个新的导航。你可以向 next 传递任意位置对象，且允许设置诸如 replace: true、name: ‘home’ 之类的选项以及任何用在router-link 的 to prop或router.push中的选项。</li>\n<li>next(error): (2.4.0+) 如果传入 next 的参数是一个 Error 实例，则导航会被终止且该错误会被传递给router.onError()注册过的回调。</li>\n</ul>\n<blockquote>\n<p>确保要调用 next 方法，否则钩子就不会被 resolved。</p>\n</blockquote>\n<h4 id=\"afterEach（全局后置钩子）\"><a href=\"#afterEach（全局后置钩子）\" class=\"headerlink\" title=\"afterEach（全局后置钩子）\"></a>afterEach（全局后置钩子）</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> VueRouter(&#123;</span><br><span class=\"line\">    。。。</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">router.afterEach(<span class=\"function\">(<span class=\"params\">to,<span class=\"keyword\">from</span></span>)=&gt;</span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>和守卫不同的是，这些钩子不会接受 next 函数也不会改变导航本身</p>\n<h4 id=\"路由独享的守卫-单个路由独享的\"><a href=\"#路由独享的守卫-单个路由独享的\" class=\"headerlink\" title=\"路由独享的守卫(单个路由独享的)\"></a>路由独享的守卫(单个路由独享的)</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> VueRouter(&#123;</span><br><span class=\"line\"> routes: [</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\"> path: <span class=\"string\">'/'</span>,</span><br><span class=\"line\"> name: <span class=\"string\">'Navigator'</span>,</span><br><span class=\"line\"> router.beforeEnter(<span class=\"function\">(<span class=\"params\">to,<span class=\"keyword\">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\"> &#125;),</span><br><span class=\"line\"> component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"comment\">/* webpackChunkName: \"navigator\" */</span> <span class=\"string\">'./../components/Navigator'</span>)</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> ]</span><br></pre></td></tr></table></figure>\n<h4 id=\"组件级路由钩子\"><a href=\"#组件级路由钩子\" class=\"headerlink\" title=\"组件级路由钩子\"></a>组件级路由钩子</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">data,</span><br><span class=\"line\"></span><br><span class=\"line\">methods</span><br><span class=\"line\"></span><br><span class=\"line\">beforeRouteEnter()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// this 不指向实例 组件还没创建</span></span><br><span class=\"line\"></span><br><span class=\"line\">    next(<span class=\"function\">(<span class=\"params\">vm</span>) =&gt;</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// vm就是实例</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">beforeRouteUpdate()&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">beforeRouteLeave()&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2020/01/01/VueRouter/luyou1.png\" alt=\"image\"><br>beforeRouteEnter 守卫 不能 访问 this，因为守卫在导航确认前被调用,因此即将登场的新组件还没被创建。不过，你可以通过传一个回调给 next来访问组件实例。在导航被确认的时候执行回调，并且把组件实例作为回调方法的参数。</p>\n<p><img src=\"/2020/01/01/VueRouter/luyou2.png\" alt=\"image\"></p>\n<p>注意~ ： beforeRouteEnter 是支持给 next 传递回调的唯一守卫。对于 beforeRouteUpdate 和 beforeRouteLeave 来说，this 已经可用了，所以不支持传递回调，因为没有必要了。</p>\n<p>这个离开守卫beforeRouteLeave()通常用来禁止用户在还未保存修改前突然离开。该导航可以通过 next(false) 来取消。</p>\n<p><img src=\"/2020/01/01/VueRouter/luyou3.png\" alt=\"image\"></p>\n<h4 id=\"完整的导航解析流程：\"><a href=\"#完整的导航解析流程：\" class=\"headerlink\" title=\"完整的导航解析流程：\"></a>完整的导航解析流程：</h4><ol>\n<li><p>导航被触发。</p>\n</li>\n<li><p>在失活的组件里调用离开守卫。</p>\n</li>\n<li><p>调用全局的 beforeEach 守卫。</p>\n</li>\n<li><p>在重用的组件里调用 beforeRouteUpdate 守卫 (2.2+)。</p>\n</li>\n<li><p>在路由配置里调用 beforeEnter。</p>\n</li>\n<li><p>解析异步路由组件。</p>\n</li>\n<li><p>在被激活的组件里调用 beforeRouteEnter。</p>\n</li>\n<li><p>调用全局的 beforeResolve 守卫 (2.5+)。</p>\n</li>\n<li><p>导航被确认。</p>\n</li>\n<li><p>调用全局的 afterEach 钩子。</p>\n</li>\n<li><p>触发 DOM 更新。</p>\n</li>\n<li><p>用创建好的实例调用 beforeRouteEnter 守卫中传给 next 的回调函数。</p>\n</li>\n</ol>"},{"layout":"[post]","title":"Vuex","date":"2019-12-06T13:29:06.000Z","_content":"## Vuex是什么？\nVueX 是一个专门为 Vue.js 应用设计的状态管理架构，统一管理和维护各个vue组件的可变化状态(你可以理解成 vue 组件里的某些 data )。\n\nVue有五个核心概念：\n - state：基本数据\n - getters：从基本数据派生的数据 \n - mutations：提交更改数据的方法，同步！ \n - actions：像一个装饰器，包裹mutations，使之可以异步。 \n - modules：模块化Vuex\n<!-- more -->\n\n## State\nstate即Vuex中的基本数据\n### 单一状态树\nVuex使用单一状态树，即用一个对象就包含了全部的状态数据。state作为构造器选项，定义了所有我们需要的基本状态参数。\n### 在Vue组件中获得Vuex属性\n我们可以通过Vue的Computed获得Vuex的state，如下：\n\n```js\nconst store = new Vuex.Store({\n    state: {\n        count:0\n    }\n})\nconst app = new Vue({\n    //..\n    store,\n    computed: {\n        count: function(){\n            return this.$store.state.count\n        }\n    },\n    //..\n})\n\n```\n每当 store.state.count 变化的时候, 都会重新求取计算属性，并且触发更新相关联的 DOM。\n### mapState辅助函数\n当一个组件需要获取多个状态时候，将这些状态都声明为计算属性会有些重复和冗余。为了解决这个问题，我们可以使用 mapState 辅助函数帮助我们生成计算属性，让你少按几次键。\n\n```js\n// 在单独构建的版本中辅助函数为 Vuex.mapState\nimport { mapState } from 'vuex'\n\nexport default {\n  // ...\n  computed: mapState({\n    // 箭头函数可使代码更简练\n    count: state => state.count,\n\n    // 传字符串参数 'count' 等同于 `state => state.count`\n    countAlias: 'count',\n\n    // 为了能够使用 `this` 获取局部状态，必须使用常规函数\n    countPlusLocalState (state) {\n      return state.count + this.localCount\n    }\n  })\n}\n```\n当映射的计算属性的名称与 state 的子节点名称相同时，我们也可以给 mapState 传一个字符串数组。\n\n```js\ncomputed: mapState([\n  // 映射 this.count 为 store.state.count\n  'count'\n])\n```\n### 对象展开运算符\nmapState 函数返回的是一个对象。我们如何将它与局部计算属性混合使用呢？通常，我们需要使用一个工具函数将多个对象合并为一个，以使我们可以将最终对象传给 computed 属性。但是自从有了对象展开运算符，我们可以极大地简化写法：\n\n```js\ncomputed: {\n  localComputed () //本地计算属性\n  //使用对象展开运算符将此对象混入到外部对象中\n  ...mapState({\n    //..\n  })\n}\n```\n... 展开运算符（spread operator）允许一个表达式在某处展开。展开运算符在多个参数（用于函数调用）或多个元素（用于数组字面量）或者多个变量（用于解构赋值）的地方可以使用。\n\n展开运算符不能用在对象当中，因为目前展开运算符只能在可遍历对象（iterables）可用。iterables的实现是依靠[Symbol.iterator]函数，而目前只有Array,Set,String内置[Symbol.iterator]方法，而Object尚未内置该方法，因此无法使用展开运算符。不过ES7草案当中已经加入了对象展开运算符特性。\n## getters\n即从store的state中派生出的状态。\n\ngetters接收state作为其第一个参数，接受其他 getters 作为第二个参数，如不需要，第二个参数可以省略如下例子：\n\n```js\nconst store = new Vuex.Store({\n    state: {\n        count:0\n    }，\n    getters: {\n        // 单个参数\n        countDouble: function(state){\n            return state.count * 2\n        },\n        // 两个参数\n        countDoubleAndDouble: function(state, getters) {\n            return getters.countDouble * 2\n        }\n    }\n})\n\n```\n与state一样，我们也可以通过Vue的Computed获得Vuex的getters。\n\n```js\nconst app = new Vue({\n    //..\n    store,\n    computed: {\n        count: function(){\n            return this.$store.state.count\n        },\n        countDouble: function(){\n            return this.$store.getters.countDouble\n        },\n        countDoubleAndDouble: function(){\n            return this.$store.getters.countDoubleAndDouble\n        }\n    },\n    //..\n})\n```\n### mapGetters 辅助函数\nmapGetters 辅助函数仅仅是将 store 中的 getters 映射到局部计算属性，与state类似\n\n```js\nimport { mapGetters } from 'vuex'\n\nexport default {\n  // ...\n  computed: {\n  // 使用对象展开运算符将 getters 混入 computed 对象中\n    ...mapGetters([\n      'countDouble',\n      'CountDoubleAndDouble',\n      //..\n    ])\n  }\n}\n\n```\n如果你想将一个 getter 属性另取一个名字，使用对象形式：\n\n```js\nmapGetters({\n  // 映射 this.double 为 store.getters.countDouble\n  double: 'countDouble'\n})\n```\n## mutations\n提交mutation是更改Vuex中的store中的状态的唯一方法。\n\nmutation必须是同步的，如果要异步需要使用action。\n\n每个 mutation 都有一个字符串的 事件类型 (type) 和 一个 回调函数 (handler)。这个回调函数就是我们实际进行状态更改的地方，并且它会接受 state 作为第一个参数，提交载荷作为第二个参数。（提交荷载在大多数情况下应该是一个对象）,提交荷载也可以省略的。\n\n```js\nconst store = new Vuex.Store({\n  state: {\n    count: 1\n  },\n  mutations: {\n    //无提交荷载\n    increment(state) {\n        state.count++\n    }\n    //提交荷载\n    incrementN(state, obj) {\n      state.count += obj.n\n    }\n  }\n})\n```\n你不能直接调用一个 mutation handler。这个选项更像是事件注册：“当触发一个类型为 increment 的 mutation 时，调用此函数。”要唤醒一个 mutation handler，你需要以相应的 type 调用 store.commit 方法：\n\n```js\n//无提交荷载\nstore.commit('increment')\n//提交荷载\nstore.commit('incrementN', {\n    n: 100\n    })\n```\n我们也可以使用这样包含 type 属性的对象的提交方式。\n```js\nstore.commit({\n  type: 'incrementN',\n  n: 10\n})\n```\n### Mutations 需遵守 Vue 的响应规则\n - 最好提前在你的 store 中初始化好所有所需属性。\n - 当需要在对象上添加新属性时，你应该 \n使用 Vue.set(obj, 'newProp', 123), 或者\n以新对象替换老对象。例如，利用对象展开运算符我们可以这样写state.obj = {...state.obj, newProp: 123 }\n\n### mapMutations 辅助函数\n与其他辅助函数类似，你可以在组件中使用 this.$store.commit(‘xxx’) 提交 mutation，或者使用 mapMutations 辅助函数将组件中的 methods 映射为 store.commit 调用（需要在根节点注入 store）。\n\n```js\nimport { mapMutations } from 'vuex'\n\nexport default {\n  //..\n  methods: {\n    ...mapMutations([\n      'increment' // 映射 this.increment() 为 this.$store.commit('increment')\n    ]),\n    ...mapMutations({\n      add: 'increment' // 映射 this.add() 为 this.$store.commit('increment')\n    })\n  }\n}\n```\n## actions\nAction 类似于 mutation，不同在于：\n\n - Action 提交的是 mutation，而不是直接变更状态。\n - Action 可以包含任意异步操作。\n\n\n```js\nconst store = new Vuex.Store({\n  state: {\n    count: 0\n  },\n  mutations: {\n    increment (state) {\n      state.count++\n    }\n  },\n  actions: {\n    increment (context) {\n      setInterval(function(){\n        context.commit('increment')\n      }, 1000)\n    }\n  }\n})\n```\n注意：Action 函数接受一个与 store 实例具有相同方法和属性的 context 对象，因此你可以调用 context.commit 提交一个 mutation，或者通过 context.state 和 context.getters 来获取 state 和 getters。\n### 分发actions\nAction 通过 store.dispatch 方法触发：\n\n```js\nstore.dispatch('increment')\n```\n### 其他与mutations类似的地方\nActions 支持同样的载荷方式和对象方式进行分发：\n\n```js\n// 以载荷形式分发\nstore.dispatch('incrementN', {\n  n: 10\n})\n\n// 以对象形式分发\nstore.dispatch({\n  type: 'incrementN',\n  n: 10\n})\n```\n### mapActions辅助函数\n你在组件中使用 this.$store.dispatch('xxx') 分发 action，或者使用 mapActions 辅助函数将组件的 methods 映射为 store.dispatch 调用（需要先在根节点注入 store）:\n\n```js\nimport { mapActions } from 'vuex'\n\nexport default {\n  //..\n  methods: {\n    ...mapActions([\n      'incrementN' //映射 this.incrementN() 为 this.$store.dispatch('incrementN')\n    ]),\n    ...mapActions({\n      add: 'incrementN' //映射 this.add() 为 this.$store.dispatch('incrementN')\n    })\n  }\n}\n\n```\n## Modules\n使用单一状态树，导致应用的所有状态集中到一个很大的对象。但是，当应用变得很大时，store 对象会变得臃肿不堪。\n\n为了解决以上问题，Vuex 允许我们将 store 分割到模块（module）。每个模块拥有自己的 state、mutation、action、getters、甚至是嵌套子模块——从上至下进行类似的分割：\n\n```js\nconst moduleA = {\n  state: { ... },\n  mutations: { ... },\n  actions: { ... },\n  getters: { ... }\n}\n\nconst moduleB = {\n  state: { ... },\n  mutations: { ... },\n  actions: { ... }\n}\n\nconst store = new Vuex.Store({\n  modules: {\n    a: moduleA,\n    b: moduleB\n  }\n})\n\nstore.state.a // -> moduleA 的状态\nstore.state.b // -> moduleB 的状态\n```\n### 模块的局部状态\n对于模块内部的 mutation 和 getter，接收的第一个参数是模块的局部状态,对于模块内部的 getter，根节点状态会作为第三个参数:\n\n```\nconst moduleA = {\n  state: { count: 0 },\n  mutations: {\n    increment (state) {\n      // state 模块的局部状态\n      state.count++\n    }\n  },\n\n  getters: {\n    doubleCount (state) {\n      return state.count * 2\n    },\n    sumWithRootCount (state, getters, rootState) {\n      return state.count + rootState.count\n    }\n  }\n}\n\n```\n同样，对于模块内部的 action，context.state 是局部状态，根节点的状态是 context.rootState:\n\n```js\nconst moduleA = {\n  // ...\n  actions: {\n    incrementIfOddOnRootSum (context) {\n      if ((context.state.count + context.rootState.count) % 2 === 1) {\n        commit('increment')\n      }\n    }\n  }\n}\n\n```\n[原文链接](https://blog.csdn.net/weixin_35955795/article/details/57412181)\n\n","source":"_posts/Vuex.md","raw":"---\nlayout: '[post]'\ntitle: Vuex\ndate: 2019-12-06 21:29:06\ntags: Vue\n---\n## Vuex是什么？\nVueX 是一个专门为 Vue.js 应用设计的状态管理架构，统一管理和维护各个vue组件的可变化状态(你可以理解成 vue 组件里的某些 data )。\n\nVue有五个核心概念：\n - state：基本数据\n - getters：从基本数据派生的数据 \n - mutations：提交更改数据的方法，同步！ \n - actions：像一个装饰器，包裹mutations，使之可以异步。 \n - modules：模块化Vuex\n<!-- more -->\n\n## State\nstate即Vuex中的基本数据\n### 单一状态树\nVuex使用单一状态树，即用一个对象就包含了全部的状态数据。state作为构造器选项，定义了所有我们需要的基本状态参数。\n### 在Vue组件中获得Vuex属性\n我们可以通过Vue的Computed获得Vuex的state，如下：\n\n```js\nconst store = new Vuex.Store({\n    state: {\n        count:0\n    }\n})\nconst app = new Vue({\n    //..\n    store,\n    computed: {\n        count: function(){\n            return this.$store.state.count\n        }\n    },\n    //..\n})\n\n```\n每当 store.state.count 变化的时候, 都会重新求取计算属性，并且触发更新相关联的 DOM。\n### mapState辅助函数\n当一个组件需要获取多个状态时候，将这些状态都声明为计算属性会有些重复和冗余。为了解决这个问题，我们可以使用 mapState 辅助函数帮助我们生成计算属性，让你少按几次键。\n\n```js\n// 在单独构建的版本中辅助函数为 Vuex.mapState\nimport { mapState } from 'vuex'\n\nexport default {\n  // ...\n  computed: mapState({\n    // 箭头函数可使代码更简练\n    count: state => state.count,\n\n    // 传字符串参数 'count' 等同于 `state => state.count`\n    countAlias: 'count',\n\n    // 为了能够使用 `this` 获取局部状态，必须使用常规函数\n    countPlusLocalState (state) {\n      return state.count + this.localCount\n    }\n  })\n}\n```\n当映射的计算属性的名称与 state 的子节点名称相同时，我们也可以给 mapState 传一个字符串数组。\n\n```js\ncomputed: mapState([\n  // 映射 this.count 为 store.state.count\n  'count'\n])\n```\n### 对象展开运算符\nmapState 函数返回的是一个对象。我们如何将它与局部计算属性混合使用呢？通常，我们需要使用一个工具函数将多个对象合并为一个，以使我们可以将最终对象传给 computed 属性。但是自从有了对象展开运算符，我们可以极大地简化写法：\n\n```js\ncomputed: {\n  localComputed () //本地计算属性\n  //使用对象展开运算符将此对象混入到外部对象中\n  ...mapState({\n    //..\n  })\n}\n```\n... 展开运算符（spread operator）允许一个表达式在某处展开。展开运算符在多个参数（用于函数调用）或多个元素（用于数组字面量）或者多个变量（用于解构赋值）的地方可以使用。\n\n展开运算符不能用在对象当中，因为目前展开运算符只能在可遍历对象（iterables）可用。iterables的实现是依靠[Symbol.iterator]函数，而目前只有Array,Set,String内置[Symbol.iterator]方法，而Object尚未内置该方法，因此无法使用展开运算符。不过ES7草案当中已经加入了对象展开运算符特性。\n## getters\n即从store的state中派生出的状态。\n\ngetters接收state作为其第一个参数，接受其他 getters 作为第二个参数，如不需要，第二个参数可以省略如下例子：\n\n```js\nconst store = new Vuex.Store({\n    state: {\n        count:0\n    }，\n    getters: {\n        // 单个参数\n        countDouble: function(state){\n            return state.count * 2\n        },\n        // 两个参数\n        countDoubleAndDouble: function(state, getters) {\n            return getters.countDouble * 2\n        }\n    }\n})\n\n```\n与state一样，我们也可以通过Vue的Computed获得Vuex的getters。\n\n```js\nconst app = new Vue({\n    //..\n    store,\n    computed: {\n        count: function(){\n            return this.$store.state.count\n        },\n        countDouble: function(){\n            return this.$store.getters.countDouble\n        },\n        countDoubleAndDouble: function(){\n            return this.$store.getters.countDoubleAndDouble\n        }\n    },\n    //..\n})\n```\n### mapGetters 辅助函数\nmapGetters 辅助函数仅仅是将 store 中的 getters 映射到局部计算属性，与state类似\n\n```js\nimport { mapGetters } from 'vuex'\n\nexport default {\n  // ...\n  computed: {\n  // 使用对象展开运算符将 getters 混入 computed 对象中\n    ...mapGetters([\n      'countDouble',\n      'CountDoubleAndDouble',\n      //..\n    ])\n  }\n}\n\n```\n如果你想将一个 getter 属性另取一个名字，使用对象形式：\n\n```js\nmapGetters({\n  // 映射 this.double 为 store.getters.countDouble\n  double: 'countDouble'\n})\n```\n## mutations\n提交mutation是更改Vuex中的store中的状态的唯一方法。\n\nmutation必须是同步的，如果要异步需要使用action。\n\n每个 mutation 都有一个字符串的 事件类型 (type) 和 一个 回调函数 (handler)。这个回调函数就是我们实际进行状态更改的地方，并且它会接受 state 作为第一个参数，提交载荷作为第二个参数。（提交荷载在大多数情况下应该是一个对象）,提交荷载也可以省略的。\n\n```js\nconst store = new Vuex.Store({\n  state: {\n    count: 1\n  },\n  mutations: {\n    //无提交荷载\n    increment(state) {\n        state.count++\n    }\n    //提交荷载\n    incrementN(state, obj) {\n      state.count += obj.n\n    }\n  }\n})\n```\n你不能直接调用一个 mutation handler。这个选项更像是事件注册：“当触发一个类型为 increment 的 mutation 时，调用此函数。”要唤醒一个 mutation handler，你需要以相应的 type 调用 store.commit 方法：\n\n```js\n//无提交荷载\nstore.commit('increment')\n//提交荷载\nstore.commit('incrementN', {\n    n: 100\n    })\n```\n我们也可以使用这样包含 type 属性的对象的提交方式。\n```js\nstore.commit({\n  type: 'incrementN',\n  n: 10\n})\n```\n### Mutations 需遵守 Vue 的响应规则\n - 最好提前在你的 store 中初始化好所有所需属性。\n - 当需要在对象上添加新属性时，你应该 \n使用 Vue.set(obj, 'newProp', 123), 或者\n以新对象替换老对象。例如，利用对象展开运算符我们可以这样写state.obj = {...state.obj, newProp: 123 }\n\n### mapMutations 辅助函数\n与其他辅助函数类似，你可以在组件中使用 this.$store.commit(‘xxx’) 提交 mutation，或者使用 mapMutations 辅助函数将组件中的 methods 映射为 store.commit 调用（需要在根节点注入 store）。\n\n```js\nimport { mapMutations } from 'vuex'\n\nexport default {\n  //..\n  methods: {\n    ...mapMutations([\n      'increment' // 映射 this.increment() 为 this.$store.commit('increment')\n    ]),\n    ...mapMutations({\n      add: 'increment' // 映射 this.add() 为 this.$store.commit('increment')\n    })\n  }\n}\n```\n## actions\nAction 类似于 mutation，不同在于：\n\n - Action 提交的是 mutation，而不是直接变更状态。\n - Action 可以包含任意异步操作。\n\n\n```js\nconst store = new Vuex.Store({\n  state: {\n    count: 0\n  },\n  mutations: {\n    increment (state) {\n      state.count++\n    }\n  },\n  actions: {\n    increment (context) {\n      setInterval(function(){\n        context.commit('increment')\n      }, 1000)\n    }\n  }\n})\n```\n注意：Action 函数接受一个与 store 实例具有相同方法和属性的 context 对象，因此你可以调用 context.commit 提交一个 mutation，或者通过 context.state 和 context.getters 来获取 state 和 getters。\n### 分发actions\nAction 通过 store.dispatch 方法触发：\n\n```js\nstore.dispatch('increment')\n```\n### 其他与mutations类似的地方\nActions 支持同样的载荷方式和对象方式进行分发：\n\n```js\n// 以载荷形式分发\nstore.dispatch('incrementN', {\n  n: 10\n})\n\n// 以对象形式分发\nstore.dispatch({\n  type: 'incrementN',\n  n: 10\n})\n```\n### mapActions辅助函数\n你在组件中使用 this.$store.dispatch('xxx') 分发 action，或者使用 mapActions 辅助函数将组件的 methods 映射为 store.dispatch 调用（需要先在根节点注入 store）:\n\n```js\nimport { mapActions } from 'vuex'\n\nexport default {\n  //..\n  methods: {\n    ...mapActions([\n      'incrementN' //映射 this.incrementN() 为 this.$store.dispatch('incrementN')\n    ]),\n    ...mapActions({\n      add: 'incrementN' //映射 this.add() 为 this.$store.dispatch('incrementN')\n    })\n  }\n}\n\n```\n## Modules\n使用单一状态树，导致应用的所有状态集中到一个很大的对象。但是，当应用变得很大时，store 对象会变得臃肿不堪。\n\n为了解决以上问题，Vuex 允许我们将 store 分割到模块（module）。每个模块拥有自己的 state、mutation、action、getters、甚至是嵌套子模块——从上至下进行类似的分割：\n\n```js\nconst moduleA = {\n  state: { ... },\n  mutations: { ... },\n  actions: { ... },\n  getters: { ... }\n}\n\nconst moduleB = {\n  state: { ... },\n  mutations: { ... },\n  actions: { ... }\n}\n\nconst store = new Vuex.Store({\n  modules: {\n    a: moduleA,\n    b: moduleB\n  }\n})\n\nstore.state.a // -> moduleA 的状态\nstore.state.b // -> moduleB 的状态\n```\n### 模块的局部状态\n对于模块内部的 mutation 和 getter，接收的第一个参数是模块的局部状态,对于模块内部的 getter，根节点状态会作为第三个参数:\n\n```\nconst moduleA = {\n  state: { count: 0 },\n  mutations: {\n    increment (state) {\n      // state 模块的局部状态\n      state.count++\n    }\n  },\n\n  getters: {\n    doubleCount (state) {\n      return state.count * 2\n    },\n    sumWithRootCount (state, getters, rootState) {\n      return state.count + rootState.count\n    }\n  }\n}\n\n```\n同样，对于模块内部的 action，context.state 是局部状态，根节点的状态是 context.rootState:\n\n```js\nconst moduleA = {\n  // ...\n  actions: {\n    incrementIfOddOnRootSum (context) {\n      if ((context.state.count + context.rootState.count) % 2 === 1) {\n        commit('increment')\n      }\n    }\n  }\n}\n\n```\n[原文链接](https://blog.csdn.net/weixin_35955795/article/details/57412181)\n\n","slug":"Vuex","published":1,"updated":"2020-05-06T13:33:12.000Z","comments":1,"photos":[],"link":"","_id":"ck9vdv98l0001fgs60v8rev73","content":"<h2 id=\"Vuex是什么？\"><a href=\"#Vuex是什么？\" class=\"headerlink\" title=\"Vuex是什么？\"></a>Vuex是什么？</h2><p>VueX 是一个专门为 Vue.js 应用设计的状态管理架构，统一管理和维护各个vue组件的可变化状态(你可以理解成 vue 组件里的某些 data )。</p>\n<p>Vue有五个核心概念：</p>\n<ul>\n<li>state：基本数据</li>\n<li>getters：从基本数据派生的数据 </li>\n<li>mutations：提交更改数据的方法，同步！ </li>\n<li>actions：像一个装饰器，包裹mutations，使之可以异步。 </li>\n<li>modules：模块化Vuex<a id=\"more\"></a>\n\n</li>\n</ul>\n<h2 id=\"State\"><a href=\"#State\" class=\"headerlink\" title=\"State\"></a>State</h2><p>state即Vuex中的基本数据</p>\n<h3 id=\"单一状态树\"><a href=\"#单一状态树\" class=\"headerlink\" title=\"单一状态树\"></a>单一状态树</h3><p>Vuex使用单一状态树，即用一个对象就包含了全部的状态数据。state作为构造器选项，定义了所有我们需要的基本状态参数。</p>\n<h3 id=\"在Vue组件中获得Vuex属性\"><a href=\"#在Vue组件中获得Vuex属性\" class=\"headerlink\" title=\"在Vue组件中获得Vuex属性\"></a>在Vue组件中获得Vuex属性</h3><p>我们可以通过Vue的Computed获得Vuex的state，如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">    state: &#123;</span><br><span class=\"line\">        count:<span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    <span class=\"comment\">//..</span></span><br><span class=\"line\">    store,</span><br><span class=\"line\">    computed: &#123;</span><br><span class=\"line\">        count: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$store.state.count</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">//..</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>每当 store.state.count 变化的时候, 都会重新求取计算属性，并且触发更新相关联的 DOM。</p>\n<h3 id=\"mapState辅助函数\"><a href=\"#mapState辅助函数\" class=\"headerlink\" title=\"mapState辅助函数\"></a>mapState辅助函数</h3><p>当一个组件需要获取多个状态时候，将这些状态都声明为计算属性会有些重复和冗余。为了解决这个问题，我们可以使用 mapState 辅助函数帮助我们生成计算属性，让你少按几次键。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在单独构建的版本中辅助函数为 Vuex.mapState</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapState &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  computed: mapState(&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 箭头函数可使代码更简练</span></span><br><span class=\"line\">    count: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.count,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 传字符串参数 'count' 等同于 `state =&gt; state.count`</span></span><br><span class=\"line\">    countAlias: <span class=\"string\">'count'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 为了能够使用 `this` 获取局部状态，必须使用常规函数</span></span><br><span class=\"line\">    countPlusLocalState (state) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state.count + <span class=\"keyword\">this</span>.localCount</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当映射的计算属性的名称与 state 的子节点名称相同时，我们也可以给 mapState 传一个字符串数组。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: mapState([</span><br><span class=\"line\">  <span class=\"comment\">// 映射 this.count 为 store.state.count</span></span><br><span class=\"line\">  <span class=\"string\">'count'</span></span><br><span class=\"line\">])</span><br></pre></td></tr></table></figure>\n<h3 id=\"对象展开运算符\"><a href=\"#对象展开运算符\" class=\"headerlink\" title=\"对象展开运算符\"></a>对象展开运算符</h3><p>mapState 函数返回的是一个对象。我们如何将它与局部计算属性混合使用呢？通常，我们需要使用一个工具函数将多个对象合并为一个，以使我们可以将最终对象传给 computed 属性。但是自从有了对象展开运算符，我们可以极大地简化写法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  localComputed () <span class=\"comment\">//本地计算属性</span></span><br><span class=\"line\">  <span class=\"comment\">//使用对象展开运算符将此对象混入到外部对象中</span></span><br><span class=\"line\">  ...mapState(&#123;</span><br><span class=\"line\">    <span class=\"comment\">//..</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>… 展开运算符（spread operator）允许一个表达式在某处展开。展开运算符在多个参数（用于函数调用）或多个元素（用于数组字面量）或者多个变量（用于解构赋值）的地方可以使用。</p>\n<p>展开运算符不能用在对象当中，因为目前展开运算符只能在可遍历对象（iterables）可用。iterables的实现是依靠[Symbol.iterator]函数，而目前只有Array,Set,String内置[Symbol.iterator]方法，而Object尚未内置该方法，因此无法使用展开运算符。不过ES7草案当中已经加入了对象展开运算符特性。</p>\n<h2 id=\"getters\"><a href=\"#getters\" class=\"headerlink\" title=\"getters\"></a>getters</h2><p>即从store的state中派生出的状态。</p>\n<p>getters接收state作为其第一个参数，接受其他 getters 作为第二个参数，如不需要，第二个参数可以省略如下例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">    state: &#123;</span><br><span class=\"line\">        count:<span class=\"number\">0</span></span><br><span class=\"line\">    &#125;，</span><br><span class=\"line\">    getters: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 单个参数</span></span><br><span class=\"line\">        countDouble: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">state</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> state.count * <span class=\"number\">2</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">// 两个参数</span></span><br><span class=\"line\">        countDoubleAndDouble: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">state, getters</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> getters.countDouble * <span class=\"number\">2</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>与state一样，我们也可以通过Vue的Computed获得Vuex的getters。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    <span class=\"comment\">//..</span></span><br><span class=\"line\">    store,</span><br><span class=\"line\">    computed: &#123;</span><br><span class=\"line\">        count: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$store.state.count</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        countDouble: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$store.getters.countDouble</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        countDoubleAndDouble: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$store.getters.countDoubleAndDouble</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">//..</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"mapGetters-辅助函数\"><a href=\"#mapGetters-辅助函数\" class=\"headerlink\" title=\"mapGetters 辅助函数\"></a>mapGetters 辅助函数</h3><p>mapGetters 辅助函数仅仅是将 store 中的 getters 映射到局部计算属性，与state类似</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapGetters &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  computed: &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 使用对象展开运算符将 getters 混入 computed 对象中</span></span><br><span class=\"line\">    ...mapGetters([</span><br><span class=\"line\">      <span class=\"string\">'countDouble'</span>,</span><br><span class=\"line\">      <span class=\"string\">'CountDoubleAndDouble'</span>,</span><br><span class=\"line\">      <span class=\"comment\">//..</span></span><br><span class=\"line\">    ])</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果你想将一个 getter 属性另取一个名字，使用对象形式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mapGetters(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 映射 this.double 为 store.getters.countDouble</span></span><br><span class=\"line\">  double: <span class=\"string\">'countDouble'</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"mutations\"><a href=\"#mutations\" class=\"headerlink\" title=\"mutations\"></a>mutations</h2><p>提交mutation是更改Vuex中的store中的状态的唯一方法。</p>\n<p>mutation必须是同步的，如果要异步需要使用action。</p>\n<p>每个 mutation 都有一个字符串的 事件类型 (type) 和 一个 回调函数 (handler)。这个回调函数就是我们实际进行状态更改的地方，并且它会接受 state 作为第一个参数，提交载荷作为第二个参数。（提交荷载在大多数情况下应该是一个对象）,提交荷载也可以省略的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  state: &#123;</span><br><span class=\"line\">    count: <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mutations: &#123;</span><br><span class=\"line\">    <span class=\"comment\">//无提交荷载</span></span><br><span class=\"line\">    increment(state) &#123;</span><br><span class=\"line\">        state.count++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//提交荷载</span></span><br><span class=\"line\">    incrementN(state, obj) &#123;</span><br><span class=\"line\">      state.count += obj.n</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>你不能直接调用一个 mutation handler。这个选项更像是事件注册：“当触发一个类型为 increment 的 mutation 时，调用此函数。”要唤醒一个 mutation handler，你需要以相应的 type 调用 store.commit 方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//无提交荷载</span></span><br><span class=\"line\">store.commit(<span class=\"string\">'increment'</span>)</span><br><span class=\"line\"><span class=\"comment\">//提交荷载</span></span><br><span class=\"line\">store.commit(<span class=\"string\">'incrementN'</span>, &#123;</span><br><span class=\"line\">    n: <span class=\"number\">100</span></span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n<p>我们也可以使用这样包含 type 属性的对象的提交方式。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">store.commit(&#123;</span><br><span class=\"line\">  type: <span class=\"string\">'incrementN'</span>,</span><br><span class=\"line\">  n: <span class=\"number\">10</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"Mutations-需遵守-Vue-的响应规则\"><a href=\"#Mutations-需遵守-Vue-的响应规则\" class=\"headerlink\" title=\"Mutations 需遵守 Vue 的响应规则\"></a>Mutations 需遵守 Vue 的响应规则</h3><ul>\n<li>最好提前在你的 store 中初始化好所有所需属性。</li>\n<li>当需要在对象上添加新属性时，你应该<br>使用 Vue.set(obj, ‘newProp’, 123), 或者<br>以新对象替换老对象。例如，利用对象展开运算符我们可以这样写state.obj = {…state.obj, newProp: 123 }</li>\n</ul>\n<h3 id=\"mapMutations-辅助函数\"><a href=\"#mapMutations-辅助函数\" class=\"headerlink\" title=\"mapMutations 辅助函数\"></a>mapMutations 辅助函数</h3><p>与其他辅助函数类似，你可以在组件中使用 this.$store.commit(‘xxx’) 提交 mutation，或者使用 mapMutations 辅助函数将组件中的 methods 映射为 store.commit 调用（需要在根节点注入 store）。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapMutations &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//..</span></span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    ...mapMutations([</span><br><span class=\"line\">      <span class=\"string\">'increment'</span> <span class=\"comment\">// 映射 this.increment() 为 this.$store.commit('increment')</span></span><br><span class=\"line\">    ]),</span><br><span class=\"line\">    ...mapMutations(&#123;</span><br><span class=\"line\">      add: <span class=\"string\">'increment'</span> <span class=\"comment\">// 映射 this.add() 为 this.$store.commit('increment')</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"actions\"><a href=\"#actions\" class=\"headerlink\" title=\"actions\"></a>actions</h2><p>Action 类似于 mutation，不同在于：</p>\n<ul>\n<li>Action 提交的是 mutation，而不是直接变更状态。</li>\n<li>Action 可以包含任意异步操作。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  state: &#123;</span><br><span class=\"line\">    count: <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mutations: &#123;</span><br><span class=\"line\">    increment (state) &#123;</span><br><span class=\"line\">      state.count++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  actions: &#123;</span><br><span class=\"line\">    increment (context) &#123;</span><br><span class=\"line\">      setInterval(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        context.commit(<span class=\"string\">'increment'</span>)</span><br><span class=\"line\">      &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>注意：Action 函数接受一个与 store 实例具有相同方法和属性的 context 对象，因此你可以调用 context.commit 提交一个 mutation，或者通过 context.state 和 context.getters 来获取 state 和 getters。</p>\n<h3 id=\"分发actions\"><a href=\"#分发actions\" class=\"headerlink\" title=\"分发actions\"></a>分发actions</h3><p>Action 通过 store.dispatch 方法触发：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">store.dispatch(<span class=\"string\">'increment'</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"其他与mutations类似的地方\"><a href=\"#其他与mutations类似的地方\" class=\"headerlink\" title=\"其他与mutations类似的地方\"></a>其他与mutations类似的地方</h3><p>Actions 支持同样的载荷方式和对象方式进行分发：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 以载荷形式分发</span></span><br><span class=\"line\">store.dispatch(<span class=\"string\">'incrementN'</span>, &#123;</span><br><span class=\"line\">  n: <span class=\"number\">10</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 以对象形式分发</span></span><br><span class=\"line\">store.dispatch(&#123;</span><br><span class=\"line\">  type: <span class=\"string\">'incrementN'</span>,</span><br><span class=\"line\">  n: <span class=\"number\">10</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"mapActions辅助函数\"><a href=\"#mapActions辅助函数\" class=\"headerlink\" title=\"mapActions辅助函数\"></a>mapActions辅助函数</h3><p>你在组件中使用 this.$store.dispatch(‘xxx’) 分发 action，或者使用 mapActions 辅助函数将组件的 methods 映射为 store.dispatch 调用（需要先在根节点注入 store）:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapActions &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//..</span></span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    ...mapActions([</span><br><span class=\"line\">      <span class=\"string\">'incrementN'</span> <span class=\"comment\">//映射 this.incrementN() 为 this.$store.dispatch('incrementN')</span></span><br><span class=\"line\">    ]),</span><br><span class=\"line\">    ...mapActions(&#123;</span><br><span class=\"line\">      add: <span class=\"string\">'incrementN'</span> <span class=\"comment\">//映射 this.add() 为 this.$store.dispatch('incrementN')</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Modules\"><a href=\"#Modules\" class=\"headerlink\" title=\"Modules\"></a>Modules</h2><p>使用单一状态树，导致应用的所有状态集中到一个很大的对象。但是，当应用变得很大时，store 对象会变得臃肿不堪。</p>\n<p>为了解决以上问题，Vuex 允许我们将 store 分割到模块（module）。每个模块拥有自己的 state、mutation、action、getters、甚至是嵌套子模块——从上至下进行类似的分割：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> moduleA = &#123;</span><br><span class=\"line\">  state: &#123; ... &#125;,</span><br><span class=\"line\">  mutations: &#123; ... &#125;,</span><br><span class=\"line\">  actions: &#123; ... &#125;,</span><br><span class=\"line\">  getters: &#123; ... &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> moduleB = &#123;</span><br><span class=\"line\">  state: &#123; ... &#125;,</span><br><span class=\"line\">  mutations: &#123; ... &#125;,</span><br><span class=\"line\">  actions: &#123; ... &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  modules: &#123;</span><br><span class=\"line\">    a: moduleA,</span><br><span class=\"line\">    b: moduleB</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">store.state.a <span class=\"comment\">// -&gt; moduleA 的状态</span></span><br><span class=\"line\">store.state.b <span class=\"comment\">// -&gt; moduleB 的状态</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"模块的局部状态\"><a href=\"#模块的局部状态\" class=\"headerlink\" title=\"模块的局部状态\"></a>模块的局部状态</h3><p>对于模块内部的 mutation 和 getter，接收的第一个参数是模块的局部状态,对于模块内部的 getter，根节点状态会作为第三个参数:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const moduleA &#x3D; &#123;</span><br><span class=\"line\">  state: &#123; count: 0 &#125;,</span><br><span class=\"line\">  mutations: &#123;</span><br><span class=\"line\">    increment (state) &#123;</span><br><span class=\"line\">      &#x2F;&#x2F; state 模块的局部状态</span><br><span class=\"line\">      state.count++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  getters: &#123;</span><br><span class=\"line\">    doubleCount (state) &#123;</span><br><span class=\"line\">      return state.count * 2</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    sumWithRootCount (state, getters, rootState) &#123;</span><br><span class=\"line\">      return state.count + rootState.count</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同样，对于模块内部的 action，context.state 是局部状态，根节点的状态是 context.rootState:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> moduleA = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  actions: &#123;</span><br><span class=\"line\">    incrementIfOddOnRootSum (context) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ((context.state.count + context.rootState.count) % <span class=\"number\">2</span> === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        commit(<span class=\"string\">'increment'</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://blog.csdn.net/weixin_35955795/article/details/57412181\" target=\"_blank\" rel=\"noopener\">原文链接</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"Vuex是什么？\"><a href=\"#Vuex是什么？\" class=\"headerlink\" title=\"Vuex是什么？\"></a>Vuex是什么？</h2><p>VueX 是一个专门为 Vue.js 应用设计的状态管理架构，统一管理和维护各个vue组件的可变化状态(你可以理解成 vue 组件里的某些 data )。</p>\n<p>Vue有五个核心概念：</p>\n<ul>\n<li>state：基本数据</li>\n<li>getters：从基本数据派生的数据 </li>\n<li>mutations：提交更改数据的方法，同步！ </li>\n<li>actions：像一个装饰器，包裹mutations，使之可以异步。 </li>\n<li>modules：模块化Vuex</li></ul>","more":"\n\n<h2 id=\"State\"><a href=\"#State\" class=\"headerlink\" title=\"State\"></a>State</h2><p>state即Vuex中的基本数据</p>\n<h3 id=\"单一状态树\"><a href=\"#单一状态树\" class=\"headerlink\" title=\"单一状态树\"></a>单一状态树</h3><p>Vuex使用单一状态树，即用一个对象就包含了全部的状态数据。state作为构造器选项，定义了所有我们需要的基本状态参数。</p>\n<h3 id=\"在Vue组件中获得Vuex属性\"><a href=\"#在Vue组件中获得Vuex属性\" class=\"headerlink\" title=\"在Vue组件中获得Vuex属性\"></a>在Vue组件中获得Vuex属性</h3><p>我们可以通过Vue的Computed获得Vuex的state，如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">    state: &#123;</span><br><span class=\"line\">        count:<span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    <span class=\"comment\">//..</span></span><br><span class=\"line\">    store,</span><br><span class=\"line\">    computed: &#123;</span><br><span class=\"line\">        count: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$store.state.count</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">//..</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>每当 store.state.count 变化的时候, 都会重新求取计算属性，并且触发更新相关联的 DOM。</p>\n<h3 id=\"mapState辅助函数\"><a href=\"#mapState辅助函数\" class=\"headerlink\" title=\"mapState辅助函数\"></a>mapState辅助函数</h3><p>当一个组件需要获取多个状态时候，将这些状态都声明为计算属性会有些重复和冗余。为了解决这个问题，我们可以使用 mapState 辅助函数帮助我们生成计算属性，让你少按几次键。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在单独构建的版本中辅助函数为 Vuex.mapState</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapState &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  computed: mapState(&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 箭头函数可使代码更简练</span></span><br><span class=\"line\">    count: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.count,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 传字符串参数 'count' 等同于 `state =&gt; state.count`</span></span><br><span class=\"line\">    countAlias: <span class=\"string\">'count'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 为了能够使用 `this` 获取局部状态，必须使用常规函数</span></span><br><span class=\"line\">    countPlusLocalState (state) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state.count + <span class=\"keyword\">this</span>.localCount</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当映射的计算属性的名称与 state 的子节点名称相同时，我们也可以给 mapState 传一个字符串数组。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: mapState([</span><br><span class=\"line\">  <span class=\"comment\">// 映射 this.count 为 store.state.count</span></span><br><span class=\"line\">  <span class=\"string\">'count'</span></span><br><span class=\"line\">])</span><br></pre></td></tr></table></figure>\n<h3 id=\"对象展开运算符\"><a href=\"#对象展开运算符\" class=\"headerlink\" title=\"对象展开运算符\"></a>对象展开运算符</h3><p>mapState 函数返回的是一个对象。我们如何将它与局部计算属性混合使用呢？通常，我们需要使用一个工具函数将多个对象合并为一个，以使我们可以将最终对象传给 computed 属性。但是自从有了对象展开运算符，我们可以极大地简化写法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  localComputed () <span class=\"comment\">//本地计算属性</span></span><br><span class=\"line\">  <span class=\"comment\">//使用对象展开运算符将此对象混入到外部对象中</span></span><br><span class=\"line\">  ...mapState(&#123;</span><br><span class=\"line\">    <span class=\"comment\">//..</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>… 展开运算符（spread operator）允许一个表达式在某处展开。展开运算符在多个参数（用于函数调用）或多个元素（用于数组字面量）或者多个变量（用于解构赋值）的地方可以使用。</p>\n<p>展开运算符不能用在对象当中，因为目前展开运算符只能在可遍历对象（iterables）可用。iterables的实现是依靠[Symbol.iterator]函数，而目前只有Array,Set,String内置[Symbol.iterator]方法，而Object尚未内置该方法，因此无法使用展开运算符。不过ES7草案当中已经加入了对象展开运算符特性。</p>\n<h2 id=\"getters\"><a href=\"#getters\" class=\"headerlink\" title=\"getters\"></a>getters</h2><p>即从store的state中派生出的状态。</p>\n<p>getters接收state作为其第一个参数，接受其他 getters 作为第二个参数，如不需要，第二个参数可以省略如下例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">    state: &#123;</span><br><span class=\"line\">        count:<span class=\"number\">0</span></span><br><span class=\"line\">    &#125;，</span><br><span class=\"line\">    getters: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 单个参数</span></span><br><span class=\"line\">        countDouble: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">state</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> state.count * <span class=\"number\">2</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">// 两个参数</span></span><br><span class=\"line\">        countDoubleAndDouble: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">state, getters</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> getters.countDouble * <span class=\"number\">2</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>与state一样，我们也可以通过Vue的Computed获得Vuex的getters。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    <span class=\"comment\">//..</span></span><br><span class=\"line\">    store,</span><br><span class=\"line\">    computed: &#123;</span><br><span class=\"line\">        count: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$store.state.count</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        countDouble: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$store.getters.countDouble</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        countDoubleAndDouble: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$store.getters.countDoubleAndDouble</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">//..</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"mapGetters-辅助函数\"><a href=\"#mapGetters-辅助函数\" class=\"headerlink\" title=\"mapGetters 辅助函数\"></a>mapGetters 辅助函数</h3><p>mapGetters 辅助函数仅仅是将 store 中的 getters 映射到局部计算属性，与state类似</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapGetters &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  computed: &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 使用对象展开运算符将 getters 混入 computed 对象中</span></span><br><span class=\"line\">    ...mapGetters([</span><br><span class=\"line\">      <span class=\"string\">'countDouble'</span>,</span><br><span class=\"line\">      <span class=\"string\">'CountDoubleAndDouble'</span>,</span><br><span class=\"line\">      <span class=\"comment\">//..</span></span><br><span class=\"line\">    ])</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果你想将一个 getter 属性另取一个名字，使用对象形式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mapGetters(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 映射 this.double 为 store.getters.countDouble</span></span><br><span class=\"line\">  double: <span class=\"string\">'countDouble'</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"mutations\"><a href=\"#mutations\" class=\"headerlink\" title=\"mutations\"></a>mutations</h2><p>提交mutation是更改Vuex中的store中的状态的唯一方法。</p>\n<p>mutation必须是同步的，如果要异步需要使用action。</p>\n<p>每个 mutation 都有一个字符串的 事件类型 (type) 和 一个 回调函数 (handler)。这个回调函数就是我们实际进行状态更改的地方，并且它会接受 state 作为第一个参数，提交载荷作为第二个参数。（提交荷载在大多数情况下应该是一个对象）,提交荷载也可以省略的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  state: &#123;</span><br><span class=\"line\">    count: <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mutations: &#123;</span><br><span class=\"line\">    <span class=\"comment\">//无提交荷载</span></span><br><span class=\"line\">    increment(state) &#123;</span><br><span class=\"line\">        state.count++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//提交荷载</span></span><br><span class=\"line\">    incrementN(state, obj) &#123;</span><br><span class=\"line\">      state.count += obj.n</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>你不能直接调用一个 mutation handler。这个选项更像是事件注册：“当触发一个类型为 increment 的 mutation 时，调用此函数。”要唤醒一个 mutation handler，你需要以相应的 type 调用 store.commit 方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//无提交荷载</span></span><br><span class=\"line\">store.commit(<span class=\"string\">'increment'</span>)</span><br><span class=\"line\"><span class=\"comment\">//提交荷载</span></span><br><span class=\"line\">store.commit(<span class=\"string\">'incrementN'</span>, &#123;</span><br><span class=\"line\">    n: <span class=\"number\">100</span></span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n<p>我们也可以使用这样包含 type 属性的对象的提交方式。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">store.commit(&#123;</span><br><span class=\"line\">  type: <span class=\"string\">'incrementN'</span>,</span><br><span class=\"line\">  n: <span class=\"number\">10</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"Mutations-需遵守-Vue-的响应规则\"><a href=\"#Mutations-需遵守-Vue-的响应规则\" class=\"headerlink\" title=\"Mutations 需遵守 Vue 的响应规则\"></a>Mutations 需遵守 Vue 的响应规则</h3><ul>\n<li>最好提前在你的 store 中初始化好所有所需属性。</li>\n<li>当需要在对象上添加新属性时，你应该<br>使用 Vue.set(obj, ‘newProp’, 123), 或者<br>以新对象替换老对象。例如，利用对象展开运算符我们可以这样写state.obj = {…state.obj, newProp: 123 }</li>\n</ul>\n<h3 id=\"mapMutations-辅助函数\"><a href=\"#mapMutations-辅助函数\" class=\"headerlink\" title=\"mapMutations 辅助函数\"></a>mapMutations 辅助函数</h3><p>与其他辅助函数类似，你可以在组件中使用 this.$store.commit(‘xxx’) 提交 mutation，或者使用 mapMutations 辅助函数将组件中的 methods 映射为 store.commit 调用（需要在根节点注入 store）。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapMutations &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//..</span></span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    ...mapMutations([</span><br><span class=\"line\">      <span class=\"string\">'increment'</span> <span class=\"comment\">// 映射 this.increment() 为 this.$store.commit('increment')</span></span><br><span class=\"line\">    ]),</span><br><span class=\"line\">    ...mapMutations(&#123;</span><br><span class=\"line\">      add: <span class=\"string\">'increment'</span> <span class=\"comment\">// 映射 this.add() 为 this.$store.commit('increment')</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"actions\"><a href=\"#actions\" class=\"headerlink\" title=\"actions\"></a>actions</h2><p>Action 类似于 mutation，不同在于：</p>\n<ul>\n<li>Action 提交的是 mutation，而不是直接变更状态。</li>\n<li>Action 可以包含任意异步操作。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  state: &#123;</span><br><span class=\"line\">    count: <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mutations: &#123;</span><br><span class=\"line\">    increment (state) &#123;</span><br><span class=\"line\">      state.count++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  actions: &#123;</span><br><span class=\"line\">    increment (context) &#123;</span><br><span class=\"line\">      setInterval(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        context.commit(<span class=\"string\">'increment'</span>)</span><br><span class=\"line\">      &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>注意：Action 函数接受一个与 store 实例具有相同方法和属性的 context 对象，因此你可以调用 context.commit 提交一个 mutation，或者通过 context.state 和 context.getters 来获取 state 和 getters。</p>\n<h3 id=\"分发actions\"><a href=\"#分发actions\" class=\"headerlink\" title=\"分发actions\"></a>分发actions</h3><p>Action 通过 store.dispatch 方法触发：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">store.dispatch(<span class=\"string\">'increment'</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"其他与mutations类似的地方\"><a href=\"#其他与mutations类似的地方\" class=\"headerlink\" title=\"其他与mutations类似的地方\"></a>其他与mutations类似的地方</h3><p>Actions 支持同样的载荷方式和对象方式进行分发：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 以载荷形式分发</span></span><br><span class=\"line\">store.dispatch(<span class=\"string\">'incrementN'</span>, &#123;</span><br><span class=\"line\">  n: <span class=\"number\">10</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 以对象形式分发</span></span><br><span class=\"line\">store.dispatch(&#123;</span><br><span class=\"line\">  type: <span class=\"string\">'incrementN'</span>,</span><br><span class=\"line\">  n: <span class=\"number\">10</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"mapActions辅助函数\"><a href=\"#mapActions辅助函数\" class=\"headerlink\" title=\"mapActions辅助函数\"></a>mapActions辅助函数</h3><p>你在组件中使用 this.$store.dispatch(‘xxx’) 分发 action，或者使用 mapActions 辅助函数将组件的 methods 映射为 store.dispatch 调用（需要先在根节点注入 store）:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapActions &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//..</span></span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    ...mapActions([</span><br><span class=\"line\">      <span class=\"string\">'incrementN'</span> <span class=\"comment\">//映射 this.incrementN() 为 this.$store.dispatch('incrementN')</span></span><br><span class=\"line\">    ]),</span><br><span class=\"line\">    ...mapActions(&#123;</span><br><span class=\"line\">      add: <span class=\"string\">'incrementN'</span> <span class=\"comment\">//映射 this.add() 为 this.$store.dispatch('incrementN')</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Modules\"><a href=\"#Modules\" class=\"headerlink\" title=\"Modules\"></a>Modules</h2><p>使用单一状态树，导致应用的所有状态集中到一个很大的对象。但是，当应用变得很大时，store 对象会变得臃肿不堪。</p>\n<p>为了解决以上问题，Vuex 允许我们将 store 分割到模块（module）。每个模块拥有自己的 state、mutation、action、getters、甚至是嵌套子模块——从上至下进行类似的分割：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> moduleA = &#123;</span><br><span class=\"line\">  state: &#123; ... &#125;,</span><br><span class=\"line\">  mutations: &#123; ... &#125;,</span><br><span class=\"line\">  actions: &#123; ... &#125;,</span><br><span class=\"line\">  getters: &#123; ... &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> moduleB = &#123;</span><br><span class=\"line\">  state: &#123; ... &#125;,</span><br><span class=\"line\">  mutations: &#123; ... &#125;,</span><br><span class=\"line\">  actions: &#123; ... &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  modules: &#123;</span><br><span class=\"line\">    a: moduleA,</span><br><span class=\"line\">    b: moduleB</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">store.state.a <span class=\"comment\">// -&gt; moduleA 的状态</span></span><br><span class=\"line\">store.state.b <span class=\"comment\">// -&gt; moduleB 的状态</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"模块的局部状态\"><a href=\"#模块的局部状态\" class=\"headerlink\" title=\"模块的局部状态\"></a>模块的局部状态</h3><p>对于模块内部的 mutation 和 getter，接收的第一个参数是模块的局部状态,对于模块内部的 getter，根节点状态会作为第三个参数:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const moduleA &#x3D; &#123;</span><br><span class=\"line\">  state: &#123; count: 0 &#125;,</span><br><span class=\"line\">  mutations: &#123;</span><br><span class=\"line\">    increment (state) &#123;</span><br><span class=\"line\">      &#x2F;&#x2F; state 模块的局部状态</span><br><span class=\"line\">      state.count++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  getters: &#123;</span><br><span class=\"line\">    doubleCount (state) &#123;</span><br><span class=\"line\">      return state.count * 2</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    sumWithRootCount (state, getters, rootState) &#123;</span><br><span class=\"line\">      return state.count + rootState.count</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同样，对于模块内部的 action，context.state 是局部状态，根节点的状态是 context.rootState:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> moduleA = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  actions: &#123;</span><br><span class=\"line\">    incrementIfOddOnRootSum (context) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ((context.state.count + context.rootState.count) % <span class=\"number\">2</span> === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        commit(<span class=\"string\">'increment'</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://blog.csdn.net/weixin_35955795/article/details/57412181\" target=\"_blank\" rel=\"noopener\">原文链接</a></p>"}],"PostAsset":[{"_id":"source/_posts/CSRF和XSS/csrf.png","slug":"csrf.png","post":"ck9v62x6g0003qqs6h4qxerrp","modified":0,"renderable":0},{"_id":"source/_posts/页面性能优化/youhua1.png","slug":"youhua1.png","post":"ck9v62x84001lqqs6c1godub5","modified":0,"renderable":0},{"_id":"source/_posts/vue生命周期以及nextTick应用/shengming.webp","slug":"shengming.webp","post":"ck9v62x7l000wqqs6a4ex5v5h","modified":0,"renderable":0},{"_id":"source/_posts/js栈/duizhan1.webp","slug":"duizhan1.webp","post":"ck9v62x7d000nqqs65ywrd6d0","modified":0,"renderable":0},{"_id":"source/_posts/css盒子模型/biaozhun.jpg","slug":"biaozhun.jpg","post":"ck9v62x7b000lqqs6bsmw2929","modified":0,"renderable":0},{"_id":"source/_posts/css盒子模型/ie.jpg","slug":"ie.jpg","post":"ck9v62x7b000lqqs6bsmw2929","modified":0,"renderable":0},{"_id":"source/_posts/vue生命周期以及nextTick应用/biaoge.webp","slug":"biaoge.webp","post":"ck9v62x7l000wqqs6a4ex5v5h","modified":0,"renderable":0},{"_id":"source/_posts/HTTP协议/qingqiudemo.jpg","slug":"qingqiudemo.jpg","post":"ck9v62x6s0009qqs6h07wa3xd","modified":0,"renderable":0},{"_id":"source/_posts/HTTP协议/qingqiuti.png","slug":"qingqiuti.png","post":"ck9v62x6s0009qqs6h07wa3xd","modified":0,"renderable":0},{"_id":"source/_posts/HTTP协议/xiangying.jpg","slug":"xiangying.jpg","post":"ck9v62x6s0009qqs6h07wa3xd","modified":0,"renderable":0},{"_id":"source/_posts/原型链/gouzao.png","slug":"gouzao.png","post":"ck9v62x7y001dqqs68n2x82jo","modified":0,"renderable":0},{"_id":"source/_posts/原型链/yuanxing.png","slug":"yuanxing.png","post":"ck9v62x7y001dqqs68n2x82jo","modified":0,"renderable":0},{"_id":"source/_posts/原型链/yuanxing1.png","slug":"yuanxing1.png","post":"ck9v62x7y001dqqs68n2x82jo","modified":0,"renderable":0},{"_id":"source/_posts/css之BFC/bfc.png","slug":"bfc.png","post":"ck9v62x7a000jqqs63fhfasra","modified":0,"renderable":0},{"_id":"source/_posts/css之BFC/float.png","slug":"float.png","post":"ck9v62x7a000jqqs63fhfasra","modified":0,"renderable":0},{"_id":"source/_posts/css之BFC/margin.png","slug":"margin.png","post":"ck9v62x7a000jqqs63fhfasra","modified":0,"renderable":0},{"_id":"source/_posts/css之BFC/wubfc.png","slug":"wubfc.png","post":"ck9v62x7a000jqqs63fhfasra","modified":0,"renderable":0},{"_id":"source/_posts/webp在项目中的应用/jianrong.webp","slug":"jianrong.webp","post":"ck9v62x7o0011qqs6c6l91j0f","modified":0,"renderable":0},{"_id":"source/_posts/webp在项目中的应用/liucheng.webp","slug":"liucheng.webp","post":"ck9v62x7o0011qqs6c6l91j0f","modified":0,"renderable":0},{"_id":"source/_posts/webp在项目中的应用/taobao.webp","slug":"taobao.webp","post":"ck9v62x7o0011qqs6c6l91j0f","modified":0,"renderable":0},{"_id":"source/_posts/webp在项目中的应用/yasuo.webp","slug":"yasuo.webp","post":"ck9v62x7o0011qqs6c6l91j0f","modified":0,"renderable":0},{"_id":"source/_posts/浏览器渲染原理与过程/liulanqi1.webp","slug":"liulanqi1.webp","post":"ck9v62x80001gqqs62a8169rx","modified":0,"renderable":0},{"_id":"source/_posts/浏览器渲染原理与过程/liulanqi2.webp","slug":"liulanqi2.webp","post":"ck9v62x80001gqqs62a8169rx","modified":0,"renderable":0},{"_id":"source/_posts/浏览器渲染原理与过程/liulanqi3.webp","slug":"liulanqi3.webp","post":"ck9v62x80001gqqs62a8169rx","modified":0,"renderable":0},{"_id":"source/_posts/浏览器渲染原理与过程/liulanqi4.webp","slug":"liulanqi4.webp","post":"ck9v62x80001gqqs62a8169rx","modified":0,"renderable":0},{"_id":"source/_posts/事件循环EventLoop/eventloop1.png","slug":"eventloop1.png","post":"ck9v62x7p0013qqs6hr9j4pb3","modified":0,"renderable":0},{"_id":"source/_posts/事件循环EventLoop/eventloop2.png","slug":"eventloop2.png","post":"ck9v62x7p0013qqs6hr9j4pb3","modified":0,"renderable":0},{"_id":"source/_posts/事件循环EventLoop/eventloop3.png","slug":"eventloop3.png","post":"ck9v62x7p0013qqs6hr9j4pb3","modified":0,"renderable":0},{"_id":"source/_posts/事件循环EventLoop/eventloop4.png","slug":"eventloop4.png","post":"ck9v62x7p0013qqs6hr9j4pb3","modified":0,"renderable":0},{"_id":"source/_posts/事件循环EventLoop/eventloop5.png","slug":"eventloop5.png","post":"ck9v62x7p0013qqs6hr9j4pb3","modified":0,"renderable":0},{"_id":"source/_posts/VueRouter/luyou1.png","post":"ck9vdv98i0000fgs619510aud","slug":"luyou1.png","modified":1,"renderable":1},{"_id":"source/_posts/VueRouter/luyou2.png","post":"ck9vdv98i0000fgs619510aud","slug":"luyou2.png","modified":1,"renderable":1},{"_id":"source/_posts/VueRouter/luyou3.png","post":"ck9vdv98i0000fgs619510aud","slug":"luyou3.png","modified":1,"renderable":1}],"PostCategory":[],"PostTag":[{"post_id":"ck9v62x6g0003qqs6h4qxerrp","tag_id":"ck9v62x6n0006qqs63tlo3ub4","_id":"ck9v62x70000bqqs6293qhps3"},{"post_id":"ck9v62x6l0005qqs6huy6hdue","tag_id":"ck9v62x6z000aqqs6a94dan0t","_id":"ck9v62x77000gqqs6bsd8em2k"},{"post_id":"ck9v62x6p0007qqs6ebw79i17","tag_id":"ck9v62x6z000aqqs6a94dan0t","_id":"ck9v62x7a000kqqs66zqbbx10"},{"post_id":"ck9v62x6r0008qqs6emacfkbr","tag_id":"ck9v62x6z000aqqs6a94dan0t","_id":"ck9v62x7e000oqqs6gwm4g6xo"},{"post_id":"ck9v62x6s0009qqs6h07wa3xd","tag_id":"ck9v62x7d000mqqs6a0la7znr","_id":"ck9v62x7j000sqqs64xaz1uhn"},{"post_id":"ck9v62x7i000rqqs6205uhpbr","tag_id":"ck9v62x6z000aqqs6a94dan0t","_id":"ck9v62x7k000uqqs6c4m0etbl"},{"post_id":"ck9v62x70000cqqs61md994fv","tag_id":"ck9v62x7h000qqqs6ft0500tr","_id":"ck9v62x7m000xqqs6fdtr2o2c"},{"post_id":"ck9v62x7l000wqqs6a4ex5v5h","tag_id":"ck9v62x7h000qqqs6ft0500tr","_id":"ck9v62x7n000zqqs62kw45vtz"},{"post_id":"ck9v62x72000dqqs666d4bbrj","tag_id":"ck9v62x7h000qqqs6ft0500tr","_id":"ck9v62x7p0012qqs60l5x6he0"},{"post_id":"ck9v62x7o0011qqs6c6l91j0f","tag_id":"ck9v62x6z000aqqs6a94dan0t","_id":"ck9v62x7q0014qqs6acolg7fk"},{"post_id":"ck9v62x76000fqqs66k7x787y","tag_id":"ck9v62x7h000qqqs6ft0500tr","_id":"ck9v62x7t0017qqs6b5anbwil"},{"post_id":"ck9v62x77000hqqs6efd02dqh","tag_id":"ck9v62x7h000qqqs6ft0500tr","_id":"ck9v62x7x001bqqs64aewhv25"},{"post_id":"ck9v62x7a000jqqs63fhfasra","tag_id":"ck9v62x7w0019qqs61gi4fasr","_id":"ck9v62x7z001fqqs69c3n7ijb"},{"post_id":"ck9v62x7b000lqqs6bsmw2929","tag_id":"ck9v62x7w0019qqs61gi4fasr","_id":"ck9v62x83001jqqs6cdx3h5po"},{"post_id":"ck9v62x83001kqqs6dcuj8hrb","tag_id":"ck9v62x6z000aqqs6a94dan0t","_id":"ck9v62x86001nqqs6f6xr0e5f"},{"post_id":"ck9v62x7d000nqqs65ywrd6d0","tag_id":"ck9v62x82001iqqs63sg7g2cx","_id":"ck9v62x86001oqqs6hwal2mmu"},{"post_id":"ck9v62x7g000pqqs67boh5q8d","tag_id":"ck9v62x82001iqqs63sg7g2cx","_id":"ck9v62x87001qqqs6eswk1b8i"},{"post_id":"ck9v62x7j000tqqs69kwb2mqj","tag_id":"ck9v62x86001pqqs6647kg2an","_id":"ck9v62x87001sqqs6fnjr50dv"},{"post_id":"ck9v62x7m000yqqs64elt0muj","tag_id":"ck9v62x86001pqqs6647kg2an","_id":"ck9v62x88001uqqs6bmse7zm9"},{"post_id":"ck9v62x7p0013qqs6hr9j4pb3","tag_id":"ck9v62x82001iqqs63sg7g2cx","_id":"ck9v62x88001wqqs6c0p84nya"},{"post_id":"ck9v62x7q0016qqs6bzdf2vgw","tag_id":"ck9v62x82001iqqs63sg7g2cx","_id":"ck9v62x89001yqqs623li2vnj"},{"post_id":"ck9v62x7u0018qqs64dojeqkh","tag_id":"ck9v62x88001xqqs603vo897r","_id":"ck9v62x890020qqs66vg86qsc"},{"post_id":"ck9v62x7w001aqqs6dpn106yh","tag_id":"ck9v62x89001zqqs68nfvhl9o","_id":"ck9v62x890022qqs684q7ht1h"},{"post_id":"ck9v62x7x001cqqs6elv8clke","tag_id":"ck9v62x89001zqqs68nfvhl9o","_id":"ck9v62x8a0024qqs61g635w4j"},{"post_id":"ck9v62x7y001dqqs68n2x82jo","tag_id":"ck9v62x82001iqqs63sg7g2cx","_id":"ck9v62x8a0026qqs6a0lugrm4"},{"post_id":"ck9v62x80001gqqs62a8169rx","tag_id":"ck9v62x8a0025qqs68d36fv16","_id":"ck9v62x8b0028qqs6328dgoqq"},{"post_id":"ck9v62x81001hqqs6eqma8lvr","tag_id":"ck9v62x8b0027qqs6cs86fd0x","_id":"ck9v62x8b002aqqs66esz3s48"},{"post_id":"ck9v62x84001lqqs6c1godub5","tag_id":"ck9v62x89001zqqs68nfvhl9o","_id":"ck9v62x8b002bqqs66q3xbtm8"},{"post_id":"ck9vdv98i0000fgs619510aud","tag_id":"ck9v62x7h000qqqs6ft0500tr","_id":"ck9vdv98n0002fgs69x4c49v1"},{"post_id":"ck9vdv98l0001fgs60v8rev73","tag_id":"ck9v62x7h000qqqs6ft0500tr","_id":"ck9vdv98n0003fgs6gx3ccb4k"}],"Tag":[{"name":"网络安全","_id":"ck9v62x6n0006qqs63tlo3ub4"},{"name":"html","_id":"ck9v62x6z000aqqs6a94dan0t"},{"name":"http","_id":"ck9v62x7d000mqqs6a0la7znr"},{"name":"Vue","_id":"ck9v62x7h000qqqs6ft0500tr"},{"name":"css","_id":"ck9v62x7w0019qqs61gi4fasr"},{"name":"javascript","_id":"ck9v62x82001iqqs63sg7g2cx"},{"name":"Promise","_id":"ck9v62x86001pqqs6647kg2an"},{"name":"hexo","_id":"ck9v62x88001xqqs603vo897r"},{"name":"前端性能优化","_id":"ck9v62x89001zqqs68nfvhl9o"},{"name":"浏览器","_id":"ck9v62x8a0025qqs68d36fv16"},{"name":"通信","_id":"ck9v62x8b0027qqs6cs86fd0x"}]}}