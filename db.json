{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"themes/archer/source/404.md","path":"404.md","modified":1,"renderable":1},{"_id":"themes/archer/source/assets/algolia_logo.svg","path":"assets/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/archer/source/assets/example_qr.png","path":"assets/example_qr.png","modified":1,"renderable":1},{"_id":"themes/archer/source/assets/favicon.ico","path":"assets/favicon.ico","modified":1,"renderable":1},{"_id":"themes/archer/source/assets/loading.svg","path":"assets/loading.svg","modified":1,"renderable":1},{"_id":"themes/archer/source/avatar/Misaka.jpg","path":"avatar/Misaka.jpg","modified":1,"renderable":1},{"_id":"themes/archer/source/css/mobile.css","path":"css/mobile.css","modified":1,"renderable":1},{"_id":"themes/archer/source/font/Source Sans Pro.woff2","path":"font/Source Sans Pro.woff2","modified":1,"renderable":1},{"_id":"themes/archer/source/css/style.css","path":"css/style.css","modified":1,"renderable":1},{"_id":"themes/archer/source/font/Source Sans Pro.woff","path":"font/Source Sans Pro.woff","modified":1,"renderable":1},{"_id":"themes/archer/source/lib/webfontloader.min.js","path":"lib/webfontloader.min.js","modified":1,"renderable":1},{"_id":"themes/archer/source/scripts/share.js","path":"scripts/share.js","modified":1,"renderable":1},{"_id":"themes/archer/source/scripts/search.js","path":"scripts/search.js","modified":1,"renderable":1},{"_id":"themes/archer/source/scripts/main.js","path":"scripts/main.js","modified":1,"renderable":1},{"_id":"themes/archer/source/avatar/mine.jpeg","path":"avatar/mine.jpeg","modified":1,"renderable":1},{"_id":"themes/archer/source/font/Oswald-Regular.ttf","path":"font/Oswald-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff","path":"font/SourceCodePro-Regular.ttf.woff","modified":1,"renderable":1},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff2","path":"font/SourceCodePro-Regular.ttf.woff2","modified":1,"renderable":1},{"_id":"themes/archer/source/intro/404-bg.jpg","path":"intro/404-bg.jpg","modified":1,"renderable":1},{"_id":"themes/archer/source/lib/jquery.min.js","path":"lib/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/archer/source/intro/post-bg.jpg","path":"intro/post-bg.jpg","modified":1,"renderable":1},{"_id":"themes/archer/source/intro/index-bg.jpg","path":"intro/index-bg.jpg","modified":1,"renderable":1},{"_id":"themes/archer/source/intro/about-bg.jpg","path":"intro/about-bg.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"source/404.md","hash":"3fb58e3ebd8e0961a3af837ff8e7395ef9092cb4","modified":1578906418000},{"_id":"themes/archer/.DS_Store","hash":"2c3f2d0cc71171fc8d22b7f9468bdb8cce95eb24","modified":1578964906000},{"_id":"themes/archer/.eslintrc.json","hash":"35eeca97fa5a2d0c6d78ef1257c58f03c42d43df","modified":1553725894000},{"_id":"themes/archer/.gitattributes","hash":"82c1a621642d5b620275ae1ed59845c3f7015a64","modified":1553725894000},{"_id":"themes/archer/.prettierignore","hash":"58caf761f07e5df9cdc21f7f19f0670fde41089b","modified":1553725894000},{"_id":"themes/archer/.gitignore","hash":"e2d7fa953bade3b94ed1cab25ffcf442c7540433","modified":1553725894000},{"_id":"themes/archer/.prettierrc.js","hash":"875b0b95f6eb24a23e4ea83a75709b97897135e0","modified":1553725894000},{"_id":"themes/archer/LICENSE","hash":"0da0c361bf299375739c6b668a44af0f5faf37bb","modified":1553725894000},{"_id":"themes/archer/gulpfile.js","hash":"46dfe693b00ac4dea4d1b1af56f5ced4ee095c10","modified":1553725894000},{"_id":"themes/archer/README.md","hash":"97edb54cb7aecff714f132110ed4ba8215da7136","modified":1553725894000},{"_id":"themes/archer/_config.yml","hash":"20ab8e412cfa390d57db895a09041fb7aed8c7c5","modified":1578986269000},{"_id":"themes/archer/package.json","hash":"531fe40833ca63493f62adfa249b6434310a2d0a","modified":1553725894000},{"_id":"themes/archer/webpack.prod.js","hash":"48de76cfa6274895801d3afc89ecbf04ee182a1c","modified":1553725894000},{"_id":"themes/archer/webpack.config.js","hash":"d20b6350c50e2981484cb9356a3e21a2124bcd72","modified":1553725894000},{"_id":"source/_posts/promise原理和实现.md","hash":"dffe8da303b970b80259740e31410f31636b028f","modified":1578996015000},{"_id":"source/_posts/初尝hexo.md","hash":"778788713ce617d20ffdac557c586a72ee90ebed","modified":1578972755000},{"_id":"source/about/index.md","hash":"45e21d80f01cd72b3393602ae556828d2f78e7e9","modified":1578986204000},{"_id":"themes/archer/dev/archer.sh","hash":"4065c4e55462d5ecf016464adea0d1db967ef4b4","modified":1578905288000},{"_id":"themes/archer/docs/README-en.md","hash":"f325565c0bb94501fd046268659c7752709895d1","modified":1578905288000},{"_id":"themes/archer/docs/develop-guide-en.md","hash":"0bb09c3c9d5f56820cb84e3316f60352b731d70c","modified":1578905288000},{"_id":"themes/archer/docs/develop-guide-zh.md","hash":"effc2bc9e0cecfd228b19283337ff29649ea5985","modified":1578905288000},{"_id":"themes/archer/languages/default.yml","hash":"d56b6923c70efdef09cd1f0270d7adc9cc338f6b","modified":1578905288000},{"_id":"themes/archer/layout/404.ejs","hash":"879641b1b5e49c43f2e096cad281f7d74df05127","modified":1578905288000},{"_id":"themes/archer/languages/en.yml","hash":"ad75d3e5f7f5f0463d3077e1b5a26f40938a1faa","modified":1578905288000},{"_id":"themes/archer/layout/about.ejs","hash":"06019d835c0a51fed8aa086d1dfcf368f9921b42","modified":1578905288000},{"_id":"themes/archer/layout/index.ejs","hash":"716ba4a30860e36077dfdfffa02c1cd60301d8a3","modified":1578905288000},{"_id":"themes/archer/layout/layout.ejs","hash":"08ebd10c1b2bfc11be8f5115a836a98e6c6ba13c","modified":1578905288000},{"_id":"themes/archer/layout/post.ejs","hash":"b61156aff41641a14d5e4e45d9fd776309f2801a","modified":1578905288000},{"_id":"themes/archer/layout/site-meta.ejs","hash":"d866aa1a892d4bfe3368f6dbd0f1baa8c5831947","modified":1578905288000},{"_id":"themes/archer/source/.DS_Store","hash":"7c7eb3a712f76ac51e7786fc218f5bcdeb11424d","modified":1578964878000},{"_id":"themes/archer/source/404.md","hash":"3fb58e3ebd8e0961a3af837ff8e7395ef9092cb4","modified":1578906418000},{"_id":"themes/archer/src/.DS_Store","hash":"72720482c4291a6e91510301a6ae4b67b0b062c8","modified":1578964878000},{"_id":"themes/archer/.github/ISSUE_TEMPLATE/-----------bug--help-wanted-or-bug-report-.md","hash":"012bd3afea5565204f75d8c89048ad33b9c2f948","modified":1553725894000},{"_id":"themes/archer/.github/ISSUE_TEMPLATE/-----feature-request-.md","hash":"886fb1252702d46c89536b579d35ce49e53ec54d","modified":1553725894000},{"_id":"themes/archer/.github/ISSUE_TEMPLATE/-----other-issue-.md","hash":"4bf3c8ebef14a81bb55e8e0468d816e83c4133ac","modified":1553725894000},{"_id":"themes/archer/layout/_partial/algolia.ejs","hash":"2f5f9073378f628a9124792b5301c1540bc5a264","modified":1578905288000},{"_id":"themes/archer/layout/_partial/base-background-image.ejs","hash":"82203d9a1c6e16ef2d37b8b587f56bf6d16edaf2","modified":1578905288000},{"_id":"themes/archer/layout/_partial/base-footer.ejs","hash":"a9f0f831a7c48553b109dbada60c797aa03b43d8","modified":1578905939000},{"_id":"themes/archer/layout/_partial/base-head.ejs","hash":"f2e8d4dfd11d879491a4b10f74f8c886cd392240","modified":1578905288000},{"_id":"themes/archer/layout/_partial/base-header.ejs","hash":"12e28693dc53cab5f6fd389f15ea0f811c9c37e9","modified":1578905288000},{"_id":"themes/archer/layout/_partial/base-preload-polyfill.ejs","hash":"2aea84cb43f4479131620b3c3dfd7cebe9be36ba","modified":1578905288000},{"_id":"themes/archer/layout/_partial/base-social.ejs","hash":"2d068432031b3bebf9438c775370a2d1b4492d6b","modified":1578905288000},{"_id":"themes/archer/layout/_partial/base-profile.ejs","hash":"743d97452d4ac358e631c43c9c2120aafdfd3e24","modified":1578905288000},{"_id":"themes/archer/layout/_partial/base-title-tags.ejs","hash":"418559ab11726f69621c3a58cd21903adff1e48e","modified":1578905288000},{"_id":"themes/archer/layout/_partial/intro-height.ejs","hash":"cd0d34a811dc4666980d57c00d70dd82bd5450eb","modified":1578905288000},{"_id":"themes/archer/source/assets/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1578905288000},{"_id":"themes/archer/source/assets/example_qr.png","hash":"cce20432c34875f4d9c6df927ede0fc0f00bb194","modified":1578905288000},{"_id":"themes/archer/source/assets/favicon.ico","hash":"25d327edb1a95957606731ca725ad7a41aa86832","modified":1578908703000},{"_id":"themes/archer/source/assets/loading.svg","hash":"45be17d07697d604d8981890eb21e308530c7a38","modified":1578905288000},{"_id":"themes/archer/source/avatar/Misaka.jpg","hash":"74a0372523f98dfbba992bf80642e160d04dc9b1","modified":1578905288000},{"_id":"themes/archer/source/css/mobile.css","hash":"51d7b5cf26c8f82a3daad4bc55518673fdf281f5","modified":1578905288000},{"_id":"themes/archer/source/font/Source Sans Pro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1578905288000},{"_id":"themes/archer/source/css/style.css","hash":"5d5e869db0c62957d59c6865baaecd1428c51804","modified":1578905288000},{"_id":"themes/archer/source/font/Source Sans Pro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1578905288000},{"_id":"themes/archer/source/lib/webfontloader.min.js","hash":"bc6ffe9c0d8b3285564619a445c6ca575eb9d0f5","modified":1578905288000},{"_id":"themes/archer/source/scripts/share.js","hash":"bb5bb37ce7f47f8c084b232df3e5fe2378d7ca01","modified":1578905288000},{"_id":"themes/archer/source/scripts/search.js","hash":"d5f739e261e8ce74f993c6157b248663bda122bf","modified":1578905288000},{"_id":"themes/archer/source/scripts/main.js","hash":"e89a9651131684204118fa74bd19cb781d76a372","modified":1578905288000},{"_id":"themes/archer/src/js/browser.js","hash":"ce061db99db5b880db0ddb768246352ca885b13c","modified":1578905288000},{"_id":"themes/archer/src/js/fancybox.js","hash":"0daf0e83deca055102268e3bd95cb1962acc2264","modified":1578905288000},{"_id":"themes/archer/src/js/init.js","hash":"346c6ef75ae85e4350c1b0811985172fdaa0d3a5","modified":1578905288000},{"_id":"themes/archer/src/js/initSidebar.js","hash":"b25615ff254913db83e2a20263d445f35083843b","modified":1578905288000},{"_id":"themes/archer/src/js/main.js","hash":"e1a48d5822326792e38d44efee86e01473549eba","modified":1578905288000},{"_id":"themes/archer/src/js/scroll.js","hash":"aa2315a80daaa183a7e462c7e879ff9d2f050933","modified":1578905288000},{"_id":"themes/archer/src/js/mobile.js","hash":"228a68d851517b5e47d2132f1d499cb812a64171","modified":1578905288000},{"_id":"themes/archer/src/js/search.js","hash":"2e59ac745da7c22801d9029cf9904a4fc3c384f1","modified":1578905288000},{"_id":"themes/archer/src/js/sidebar.js","hash":"68d5fe0ee5e86df810d304e5efe11e5e1fddc46d","modified":1578905288000},{"_id":"themes/archer/src/js/share.js","hash":"1314b19a852e291e35d6809f7f58652d3e7c524c","modified":1578905288000},{"_id":"themes/archer/src/js/tag.js","hash":"e0f0a914c02922e42977d78dc4993b3855167cd8","modified":1578905288000},{"_id":"themes/archer/src/js/toc.js","hash":"b3482031e4c8728535d480bfaec76229469e3aba","modified":1578905288000},{"_id":"themes/archer/src/js/util.js","hash":"27de6446892bcf399430dd5776df0b8759ca0eea","modified":1578905288000},{"_id":"themes/archer/src/scss/_common.scss","hash":"dedc313b082e0a16daf87213badd21b13be11af8","modified":1578905288000},{"_id":"themes/archer/src/scss/_mixin.scss","hash":"e7deb20a16868ae9d3e35ba3c5693de71fdf6999","modified":1578905288000},{"_id":"themes/archer/src/scss/_normalize.scss","hash":"a2dbeb38ad08bb8975856d75954cc697bf8e5ff7","modified":1578905288000},{"_id":"themes/archer/src/scss/_variables.scss","hash":"136e5d990c4f8eadf6cabdfa5a053941e90bcd20","modified":1578905288000},{"_id":"themes/archer/src/scss/mobile.scss","hash":"aadc2fbf37fefc2ad391d8172d5b61817f9db0c5","modified":1578905288000},{"_id":"themes/archer/src/scss/style.scss","hash":"78e31370d45089b97fa91929345f1a29f2e6a0a2","modified":1578905288000},{"_id":"themes/archer/layout/_partial/comment/custom.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1578905288000},{"_id":"themes/archer/source/avatar/mine.jpeg","hash":"1b4eccdbeb9a87e66ddad3569b16e0b3b9bbbd5d","modified":1578908374000},{"_id":"themes/archer/source/font/Oswald-Regular.ttf","hash":"965d729546a43a8490ad4cf33c25ac475682100c","modified":1578905288000},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff","hash":"12eef75e1ad3eca9dae42b65505010ce4464a315","modified":1578905288000},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff2","hash":"f5991289ec17884cb641da0646d278d36702a190","modified":1578905288000},{"_id":"themes/archer/source/intro/404-bg.jpg","hash":"3afb5bb26f4ff0bd0e0a28df955c8aa7d746d3c5","modified":1578905288000},{"_id":"themes/archer/source/lib/jquery.min.js","hash":"0dc32db4aa9c5f03f3b38c47d883dbd4fed13aae","modified":1578905288000},{"_id":"themes/archer/layout/_partial/comment/changyan.ejs","hash":"7691642fb9375607e0ac988a7420999e242cb2c9","modified":1578905288000},{"_id":"themes/archer/layout/_partial/comment/disqus.ejs","hash":"cadd97820a23d01d8b7e2f19a86e5290cef5a8a6","modified":1578905288000},{"_id":"themes/archer/layout/_partial/comment/livere.ejs","hash":"b27469f19f35ec2037c7bce736a12e9dfb5e360b","modified":1578905288000},{"_id":"themes/archer/layout/_partial/comment/youyan.ejs","hash":"790d76f2667377db78a7d04bad8d629e47e7aab0","modified":1578905288000},{"_id":"themes/archer/layout/_partial/comment/gitment.ejs","hash":"794647a8a4ac9e1d01d74c07717175a141b1e01c","modified":1578905288000},{"_id":"themes/archer/layout/_partial/comment/valine.ejs","hash":"2154360e330dab94540e168e9d301c7b7091968e","modified":1578905288000},{"_id":"themes/archer/layout/_partial/sidebar/base-sidebar.ejs","hash":"2d38af7cb5aabc0af99de239bd180c516ec4c56c","modified":1578905288000},{"_id":"themes/archer/layout/_partial/sidebar/sidebar-archives.ejs","hash":"daa78b17a773bca569f1c8ca2c916495ca138da6","modified":1578905288000},{"_id":"themes/archer/layout/_partial/script/font-loader.ejs","hash":"291cc0a4a444a93b93c32e2c39383c70e36e46de","modified":1578905288000},{"_id":"themes/archer/layout/_partial/critical-css/critical-style.ejs","hash":"c03e16a7741908c207bf58363dcd1349cb639ef8","modified":1578905288000},{"_id":"themes/archer/layout/_partial/sidebar/sidebar-categories.ejs","hash":"147214469c4909eb94943599883f9fa0f3cc090d","modified":1578905288000},{"_id":"themes/archer/layout/_partial/sidebar/sidebar-tags.ejs","hash":"d6e1a192cac5dcf365ce1a52df4f23feafeeb849","modified":1578905288000},{"_id":"themes/archer/package-lock.json","hash":"89a3b67d32f6916cdc21d590d87e43d8a44be8c3","modified":1553725894000},{"_id":"themes/archer/src/scss/_partial/_algolia.scss","hash":"c679578d2feb0bd7d3f80c2f693ba58cbca4428b","modified":1578905288000},{"_id":"themes/archer/src/scss/_partial/_404.scss","hash":"a2b56f441a9a44d7f5b9b41eaa8136321328d7e9","modified":1578905288000},{"_id":"themes/archer/src/scss/_partial/_index-page.scss","hash":"fa993cf0bbe0086cd8ec3d9a639b2d5b28ccfa8e","modified":1578905288000},{"_id":"themes/archer/src/scss/_partial/_post-page.scss","hash":"7c557844850d53cc4fc36aaf6d59847d8f238947","modified":1578905288000},{"_id":"themes/archer/docs/snap.png","hash":"0b2a8bf016f6eed576abfdcdb7dcf8de51c12562","modified":1578905288000},{"_id":"themes/archer/source/intro/post-bg.jpg","hash":"525fafb2238c27754d8fa751f143ff1de9b8482d","modified":1578905288000},{"_id":"themes/archer/src/scss/_partial/_partial/_footer.scss","hash":"726c543ee066e0b3222b236d9b4ef0109c0bdddf","modified":1578905288000},{"_id":"themes/archer/src/scss/_partial/_partial/_header.scss","hash":"77003ff22b1a10fae2d2768938277959b3f93a72","modified":1578905288000},{"_id":"themes/archer/src/scss/_partial/_partial/_intro.scss","hash":"a1569f39eccd64a12425d81b794c53df126a4d87","modified":1578905288000},{"_id":"themes/archer/src/scss/_partial/_partial/_paginator.scss","hash":"67c2e697a5fbb3b8006cf358ea45eb7f75b496f8","modified":1578905288000},{"_id":"themes/archer/src/scss/_partial/_partial/_profile.scss","hash":"0c986b52ce9083f08c37c5c9b5de045ac5e1d2fa","modified":1578905288000},{"_id":"themes/archer/src/scss/_partial/_partial/_scrollbar.scss","hash":"f2514031f9d7e4ed4a126694e78618ce6ff3a574","modified":1578905288000},{"_id":"themes/archer/src/scss/_partial/_post/_code.scss","hash":"9c9a4e470da8732c9a3be3d5ce0d2f80f53714fe","modified":1578905288000},{"_id":"themes/archer/src/scss/_partial/_sidebar/_sidebar-tags.scss","hash":"9ab6f96d0df0c4ad4c72e2515fa2599d487d8f1a","modified":1578905288000},{"_id":"themes/archer/src/scss/_partial/_sidebar/_sidebar-archive.scss","hash":"14bc42292873880c61b5fa9f47ee9d2e08d46871","modified":1578905288000},{"_id":"themes/archer/src/scss/_partial/_sidebar/_sidebar.scss","hash":"981a94978535769cb51c29e12b627f83c6fcedc5","modified":1578905288000},{"_id":"themes/archer/source/intro/index-bg.jpg","hash":"96b52e177b8bc53e64ec6ee1e10b2b6a4e13083b","modified":1578905288000},{"_id":"themes/archer/source/intro/about-bg.jpg","hash":"ab388276822417cc4e703312c14e20280ec783b3","modified":1578905288000},{"_id":"public/content.json","hash":"d34ef9cf31aa2db4b1c53918d53c75f9a09fd5f2","modified":1578996040052},{"_id":"public/404.html","hash":"d1264d50556e112a16a96c776910f251c67d2e08","modified":1578996040052},{"_id":"public/about/index.html","hash":"46a79287b3a4b71b8fc0a6ec06c8a08cf52e55ef","modified":1578996040052},{"_id":"public/archives/2019/01/index.html","hash":"bd88438a68d8468e5c1ad8e7c4b113aa37087ec6","modified":1578996040052},{"_id":"public/tags/hexo/index.html","hash":"bd88438a68d8468e5c1ad8e7c4b113aa37087ec6","modified":1578996040052},{"_id":"public/2019/02/05/promise原理和实现/index.html","hash":"40b461f0e122f22760794b7c7e04f41f0c803a4f","modified":1578996040052},{"_id":"public/2019/01/14/初尝hexo/index.html","hash":"8b096539c2039f3fab5c203b7ee7827c8ea0a810","modified":1578996040052},{"_id":"public/archives/index.html","hash":"45dbf5e3274df72b94dece9c12c3505bbaae5bb6","modified":1578996040052},{"_id":"public/archives/2019/index.html","hash":"45dbf5e3274df72b94dece9c12c3505bbaae5bb6","modified":1578996040052},{"_id":"public/archives/2019/02/index.html","hash":"6d7170427ed87985168be6d64c5184cf7f1dcfd5","modified":1578996040052},{"_id":"public/index.html","hash":"c71789f88b879e9f93b9a0e187e6425bf4e55d39","modified":1578996040052},{"_id":"public/tags/Promise/index.html","hash":"6d7170427ed87985168be6d64c5184cf7f1dcfd5","modified":1578996040052},{"_id":"public/assets/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1578996040052},{"_id":"public/assets/example_qr.png","hash":"cce20432c34875f4d9c6df927ede0fc0f00bb194","modified":1578996040052},{"_id":"public/assets/favicon.ico","hash":"25d327edb1a95957606731ca725ad7a41aa86832","modified":1578996040052},{"_id":"public/assets/loading.svg","hash":"45be17d07697d604d8981890eb21e308530c7a38","modified":1578996040052},{"_id":"public/avatar/Misaka.jpg","hash":"74a0372523f98dfbba992bf80642e160d04dc9b1","modified":1578996040052},{"_id":"public/font/Source Sans Pro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1578996040052},{"_id":"public/font/Source Sans Pro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1578996040052},{"_id":"public/avatar/mine.jpeg","hash":"1b4eccdbeb9a87e66ddad3569b16e0b3b9bbbd5d","modified":1578996040052},{"_id":"public/font/Oswald-Regular.ttf","hash":"965d729546a43a8490ad4cf33c25ac475682100c","modified":1578996040052},{"_id":"public/font/SourceCodePro-Regular.ttf.woff","hash":"12eef75e1ad3eca9dae42b65505010ce4464a315","modified":1578996040052},{"_id":"public/font/SourceCodePro-Regular.ttf.woff2","hash":"f5991289ec17884cb641da0646d278d36702a190","modified":1578996040052},{"_id":"public/intro/404-bg.jpg","hash":"3afb5bb26f4ff0bd0e0a28df955c8aa7d746d3c5","modified":1578996040052},{"_id":"public/css/mobile.css","hash":"51d7b5cf26c8f82a3daad4bc55518673fdf281f5","modified":1578996040052},{"_id":"public/lib/webfontloader.min.js","hash":"bc6ffe9c0d8b3285564619a445c6ca575eb9d0f5","modified":1578996040052},{"_id":"public/scripts/search.js","hash":"d5f739e261e8ce74f993c6157b248663bda122bf","modified":1578996040052},{"_id":"public/css/style.css","hash":"5d5e869db0c62957d59c6865baaecd1428c51804","modified":1578996040052},{"_id":"public/scripts/share.js","hash":"bb5bb37ce7f47f8c084b232df3e5fe2378d7ca01","modified":1578996040052},{"_id":"public/scripts/main.js","hash":"e89a9651131684204118fa74bd19cb781d76a372","modified":1578996040052},{"_id":"public/lib/jquery.min.js","hash":"0dc32db4aa9c5f03f3b38c47d883dbd4fed13aae","modified":1578996040052},{"_id":"public/intro/post-bg.jpg","hash":"525fafb2238c27754d8fa751f143ff1de9b8482d","modified":1578996040052},{"_id":"public/intro/about-bg.jpg","hash":"ab388276822417cc4e703312c14e20280ec783b3","modified":1578996040052},{"_id":"public/intro/index-bg.jpg","hash":"96b52e177b8bc53e64ec6ee1e10b2b6a4e13083b","modified":1578996040052}],"Category":[],"Data":[],"Page":[{"layout":"404","title":"[404]","description":"May the Force be with you :&#41;","_content":"","source":"404.md","raw":"---\nlayout: 404\ntitle: \"[404]\"\ndescription: \"May the Force be with you :&#41;\"\n---\n","date":"2020-01-14T07:12:06.000Z","updated":"2020-01-13T09:06:58.000Z","path":"404.html","comments":1,"_id":"ck5dph2lf0000fh2p9ie17kic","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"个人分享自己的学习经历的blog","layout":"about","_content":"前端攻城狮一枚，工作多年后将自己的笔记总结为博客，总结自己。\n","source":"about/index.md","raw":"---\ntitle: 个人分享自己的学习经历的blog\nlayout: about\n---\n前端攻城狮一枚，工作多年后将自己的笔记总结为博客，总结自己。\n","date":"2020-01-14T07:16:44.000Z","updated":"2020-01-14T07:16:44.000Z","path":"about/index.html","comments":1,"_id":"ck5dph2n30002fh2p4xrb48zg","content":"<p>前端攻城狮一枚，工作多年后将自己的笔记总结为博客，总结自己。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>前端攻城狮一枚，工作多年后将自己的笔记总结为博客，总结自己。</p>\n"}],"Post":[{"layout":"[post]","title":"Promise原理和实现","date":"2019-02-05T01:57:01.000Z","_content":"### 什么是Promise\nPromise 对象用于表示一个异步操作的最终完成 (或失败), 及其结果值.\n### Promise规范\n- ES6中使用[Promise/A+](https://juejin.im/post/5c4b0423e51d4525211c0fbc)规范。\n- Promise的标准理解\n  - promise对象有三种状态==pending==、==fulfilled==和==rejected==。\n  - promise对象的状态必须有并且只有上述三种当中的一种。\n  - 状态的改变只能是从pending到fulfilled或者pending到rejected。\n  - then方法返回一个promise。then 方法可以被同一个 promise 调用多次。\n```\npromise.then(onFulfilled, onRejected)\n```\n### Promise实现\n1. 构造函数\n```\nfunction Promise(resolver) {}\n```\n2. 原型链\n```\nPromise.prototype.then = function() {}\nPromise.prototype.catch = function() {}\n```\n3. 静态方法\n```\nPromise.resolve = function() {}\nPromise.reject = function() {}\nPromise.all = function() {}\nPromise.race = function() {}\n```\n### Promise基本结构\n\n```\nlet promise=new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve('FULFILLED')\n  }, 1000)\n})\npromise.then(a=> alert(a));\npromise.then(a => alert(a+1));\n```\n### Promise构造函数\n构造函数用法总结：\n1. 构造函数接收一个==executor==立即执行函数\n2. ==executor==立即执行函数接收一个==resolve==函数\n3. ==promise==对象的==then==方法绑定状态变为==fulfilled==时的回调\n4. ==resolve==函数被调用时会触发==then==方法中的回调\n#### 构造函数的初步实现\n\n```\nfunction Promise(executor) {\n    var self = this;\n    self.status = 'pending'; //promise当前的状态\n    self.data = undefined; //promise的值\n    self.onResolvedCallback = [];\n    //promise状态变为resolve时的回调函数集，可能有多个\n   function resolve(value) {\n       if(self.status === 'pending') {\n           self.status = 'resolved';\n           self.data = value;\n           for(var i = 0; i < self.onResolvedCallback.length; i++) {\n               self.onResolvedCallback[i](value);\n           }\n       }\n   }\n   executor(resolve);\n};\nPromise.prototype.then = function (resolve) {\n    this.onResolvedCallback.push(resolve);\n};\n```\n#### 添加reject结果\n\n```\nfunction Promise(executor) {\n    var self = this;\n    self.status = 'pending'; //promise当前的状态\n    self.data = undefined; //promise的值\n    self.onResolvedCallback = [];\n    //promise状态变为resolve时的回调函数集，可能有多个\n    self.onRejectedCallback = [];\n    //promise状态变为reject时的回调函数集，可能有多个\n   function resolve(value) {\n       if(self.status === 'pending') {\n           self.status = 'resolved';\n           self.data = value;\n           for(var i = 0; i < self.onResolvedCallback.length; i++) {\n               self.onResolvedCallback[i](value);\n           }\n       }\n   }\n\n   function reject(reason) {\n        if(self.status === 'pending') {\n            self.status = 'rejected';\n            self.data = reason;\n            for(var i = 0; i < self.onRejectedCallback.length; i++) {\n                self.onRejectedCallback[i](reason);\n            }\n        }\n   }\n\n   try {\n       executor(resolve, reject);\n   } catch (e){\n       reject(e);\n   }\n};\nPromise.prototype.then = function (onResolve, onReject) {\n    this.onResolvedCallback.push(onResolve);\n    this.onRejectedCallback.push(onReject);\n};\n```\n小结：\n1. ==executor==函数作为实参在创建==Promise==对象时传入==Promise==构造函数。\n2. ==resolve==和==reject==函数作为实参传入==executor==函数。\n3. ==value==作为实参传入==resolve==和==reject==函数。\n#### 如果executor自执行函数中的resolve函数立即触发时，发现Promise失效\n\n```\nconst promise = new Promise((resolve) => {\n    resolve(1);\n});\npromise.then((a) => alert(a));\n\n```\n将promise的resolve和reject异步执行\n\n```\nfunction resolve(value) {\n    setTimeout(function () {\n        if(self.status === 'pending') {\n            self.status = 'resolved';\n            self.data = value;\n            for(var i = 0; i < self.onResolvedCallback.length; i++) {\n                self.onResolvedCallback[i](value);\n            }\n        }\n    })\n}\n\nfunction reject(reason) {\n    setTimeout(function () {\n        if(self.status === 'pending') {\n            self.status = 'rejected';\n            self.data = reason;\n            for(var i = 0; i < self.onRejectedCallback.length; i++) {\n                self.onRejectedCallback[i](reason);\n            }\n        }\n    })\n}\n```\n### then方法\n\n```\npromise.then(onFulfilled, onRejected)\n```\n1.  ==then==方法返回一个新的==promise==对象。\n1.  ==executor==自执行函数中的==resolve==参数调用时执行==then==方法的第一个回调函数==onResolved==。\n1.  ==executor==自执行函数中的==reject==参数调用时执行==then==方法的第二个回调函数==onRejected==。\n\n```\nPromise.prototype.then = function (onResolved, onRejected) {\n    var self = this;\n    var promise2;\n    onResolved = typeof onResolved === 'function' \n                ? onResolved \n                : function (value) {return value};\n    onRejected = typeof onRejected === 'function' \n                ? onRejected \n                : function (reason) {throw reason};\n    //promise对象当前状态为resolved\n    if(self.status === 'resolved') {\n        return promise2 = new Promise(function (resolve, reject) {\n            try {\n                //调用onResolve回调函数\n                var x = onResolved(self.data);\n                //如果onResolve回调函数返回值为一个promise对象\n                if(x instanceof  Promise) {\n                    //将它的结果作为promise2的结果\n                    x.then(resolve, reject);\n                } else {\n                    resolve(x);//执行promise2的onResolve回调\n           }        \n            } catch (e) {\n                reject(e); //执行promise2的onReject回调\n            }\n        })\n    }\n    //promise对象当前状态为rejected\n    if(self.status === 'rejected') {\n        return promise2 = new Promise(function (resolve, reject) {\n            try {\n                var x = onRejected(self.data);\n                if (x instanceof Promise) {\n                    x.then(resolve, reject)\n                } else {\n                    resolve(x)\n                }\n            } catch (e) {\n                reject(e)\n            }\n        })\n    }\n    //promise对象当前状态为pending\n    //此时并不能确定调用onResolved还是onRejected，需要等当前Promise状态确定。\n    //所以需要将callBack放入promise1的回调数组中\n    if(self.status === 'pending') {\n        return promise2 = new Promise(function (resolve, reject) {\n            self.onResolvedCallback.push(function (value) {\n                try {\n                    var x = onResolved(self.data);\n                    if (x instanceof Promise) {\n                        x.then(resolve, reject);\n                    } else {\n                        resolve(x);\n          }\n                } catch (e) {\n                    reject(e);\n                }\n            })\n            self.onRejectedCallback.push(function(reason) {\n                try {\n                    var x = onRejected(self.data);\n                    if (x instanceof Promise) {\n                        x.then(resolve, reject)\n                    } else {\n                        resolve(x);\n                    }\n                } catch (e) {\n                    reject(e)\n                }\n            })\n        })\n    }\n};\n```\n### 完整代码\n\n```\nvar Promise = (function() {\n    function Promise(resolver) {\n        if (typeof resolver !== 'function') { //resolver必须是函数\n            throw new TypeError('Promise resolver ' + resolver + ' is not a function')\n        }\n        if (!(this instanceof Promise)) return new Promise(resolver)\n\n        var self = this //保存this\n        self.callbacks = [] //保存onResolve和onReject函数集合\n        self.status = 'pending' //当前状态\n\n        function resolve(value) {\n            setTimeout(function() { //异步调用\n                if (self.status !== 'pending') {\n                    return\n                }\n                self.status = 'resolved' //修改状态\n                self.data = value\n\n                for (var i = 0; i < self.callbacks.length; i++) {\n                    self.callbacks[i].onResolved(value)\n                }\n            })\n        }\n\n        function reject(reason) {\n            setTimeout(function(){ //异步调用\n                if (self.status !== 'pending') {\n                    return\n                }\n                self.status = 'rejected' //修改状态\n                self.data = reason\n\n                for (var i = 0; i < self.callbacks.length; i++) {\n                    self.callbacks[i].onRejected(reason)\n                }\n            })\n        }\n\n        try{\n            resolver(resolve, reject) //执行resolver函数\n        } catch(e) {\n            reject(e)\n        }\n    }\n\n    function resolvePromise(promise, x, resolve, reject) {\n        var then\n        var thenCalledOrThrow = false\n\n        if (promise === x) {\n            return reject(new TypeError('Chaining cycle detected for promise!'))\n        }\n\n        if ((x !== null) && ((typeof x === 'object') || (typeof x === 'function'))) {\n            try {\n                then = x.then\n                if (typeof then === 'function') {\n                    then.call(x, function rs(y) {\n                        if (thenCalledOrThrow) return\n                        thenCalledOrThrow = true\n                        return resolvePromise(promise, y, resolve, reject)\n                    }, function rj(r) {\n                        if (thenCalledOrThrow) return\n                        thenCalledOrThrow = true\n                        return reject(r)\n                    })\n                } else {\n                    return resolve(x)\n                }\n            } catch(e) {\n                if (thenCalledOrThrow) return\n                thenCalledOrThrow = true\n                return reject(e)\n            }\n        } else {\n            return resolve(x)\n        }\n    }\n\n    Promise.prototype.then = function(onResolved, onRejected) {\n        //健壮性处理，处理点击穿透\n        onResolved = typeof onResolved === 'function' ? onResolved : function(v){return v}\n        onRejected = typeof onRejected === 'function' ? onRejected : function(r){throw r}\n        var self = this\n        var promise2\n\n        //promise状态为resolved\n        if (self.status === 'resolved') {\n            return promise2 = new Promise(function(resolve, reject) {\n                setTimeout(function() {\n                    try {\n                        //调用then方法的onResolved回调\n                        var x = onResolved(self.data)\n                        //根据x的值修改promise2的状态\n                        resolvePromise(promise2, x, resolve, reject)\n                    } catch(e) {\n                        //promise2状态变为rejected\n                        return reject(e)\n                    }\n                })\n            })\n        }\n\n        //promise状态为rejected\n        if (self.status === 'rejected') {\n            return promise2 = new Promise(function(resolve, reject) {\n                setTimeout(function() {\n                    try {\n                        //调用then方法的onReject回调\n                        var x = onRejected(self.data)\n                        //根据x的值修改promise2的状态\n                        resolvePromise(promise2, x, resolve, reject)\n                    } catch(e) {\n                        //promise2状态变为rejected\n                        return reject(e)\n                    }\n                })\n            })\n        }\n\n        //promise状态为pending\n        //需要等待promise的状态改变\n        if (self.status === 'pending') {\n            return promise2 = new Promise(function(resolve, reject) {\n                self.callbacks.push({\n                    onResolved: function(value) {\n                        try {\n                            //调用then方法的onResolved回调\n                            var x = onResolved(value)\n                            //根据x的值修改promise2的状态\n                            resolvePromise(promise2, x, resolve, reject)\n                        } catch(e) {\n                            //promise2状态变为rejected\n                            return reject(e)\n                        }\n                    },\n                    onRejected: function(reason) {\n                        try {\n                            //调用then方法的onResolved回调\n                            var x = onRejected(reason)\n                            //根据x的值修改promise2的状态\n                            resolvePromise(promise2, x, resolve, reject)\n                        } catch(e) {\n                            //promise2状态变为rejected\n                            return reject(e)\n                        }\n                    }\n                })\n            })\n        }\n    }\n\n    //获取当前Promise传递的值\n    Promise.prototype.valueOf = function() {\n        return this.data\n    }\n\n    //由then方法实现catch方法\n    Promise.prototype.catch = function(onRejected) {\n        return this.then(null, onRejected)\n    }\n\n    //finally方法\n    Promise.prototype.finally = function(fn) {\n        return this.then(function(v){\n            setTimeout(fn)\n            return v\n        }, function(r){\n            setTimeout(fn)\n            throw r\n        })\n    }\n\n    Promise.prototype.spread = function(fn, onRejected) {\n        return this.then(function(values) {\n            return fn.apply(null, values)\n        }, onRejected)\n    }\n\n    Promise.prototype.inject = function(fn, onRejected) {\n        return this.then(function(v) {\n            return fn.apply(null, fn.toString().match(/\\((.*?)\\)/)[1].split(',').map(function(key){\n                return v[key];\n            }))\n        }, onRejected)\n    }\n\n    Promise.prototype.delay = function(duration) {\n        return this.then(function(value) {\n            return new Promise(function(resolve, reject) {\n                setTimeout(function() {\n                    resolve(value)\n                }, duration)\n            })\n        }, function(reason) {\n            return new Promise(function(resolve, reject) {\n                setTimeout(function() {\n                    reject(reason)\n                }, duration)\n            })\n        })\n    }\n\n    Promise.all = function(promises) {\n        return new Promise(function(resolve, reject) {\n            var resolvedCounter = 0\n            var promiseNum = promises.length\n            var resolvedValues = new Array(promiseNum)\n            for (var i = 0; i < promiseNum; i++) {\n                (function(i) {\n                    Promise.resolve(promises[i]).then(function(value) {\n                        resolvedCounter++\n                        resolvedValues[i] = value\n                        if (resolvedCounter == promiseNum) {\n                            return resolve(resolvedValues)\n                        }\n                    }, function(reason) {\n                        return reject(reason)\n                    })\n                })(i)\n            }\n        })\n    }\n\n    Promise.race = function(promises) {\n        return new Promise(function(resolve, reject) {\n            for (var i = 0; i < promises.length; i++) {\n                Promise.resolve(promises[i]).then(function(value) {\n                    return resolve(value)\n                }, function(reason) {\n                    return reject(reason)\n                })\n            }\n        })\n    }\n\n    Promise.resolve = function(value) {\n        var promise = new Promise(function(resolve, reject) {\n            resolvePromise(promise, value, resolve, reject)\n        })\n        return promise\n    }\n\n    Promise.reject = function(reason) {\n        return new Promise(function(resolve, reject) {\n            reject(reason)\n        })\n    }\n\n    Promise.fcall = function(fn){\n        // 虽然fn可以接收到上一层then里传来的参数，但是其实是undefined，所以跟没有是一样的，因为resolve没参数啊\n        return Promise.resolve().then(fn)\n    }\n\n    Promise.done = Promise.stop = function(){\n        return new Promise(function(){})\n    }\n\n    Promise.deferred = Promise.defer = function() {\n        var dfd = {}\n        dfd.promise = new Promise(function(resolve, reject) {\n            dfd.resolve = resolve\n            dfd.reject = reject\n        })\n        return dfd\n    }\n\n    try { // CommonJS compliance\n        module.exports = Promise\n    } catch(e) {}\n\n    return Promise\n})()\n```\n### 参考\n[Promise实现原理](https://www.jianshu.com/p/43de678e918a)  \n[Promise原理与实现](https://www.jianshu.com/p/b4f0425b22a1)\n\n\n\n\n\n\n\n","source":"_posts/promise原理和实现.md","raw":"---\nlayout: '[post]'\ntitle: Promise原理和实现\ndate: 2019-02-05 09:57:01\ntags: Promise\n---\n### 什么是Promise\nPromise 对象用于表示一个异步操作的最终完成 (或失败), 及其结果值.\n### Promise规范\n- ES6中使用[Promise/A+](https://juejin.im/post/5c4b0423e51d4525211c0fbc)规范。\n- Promise的标准理解\n  - promise对象有三种状态==pending==、==fulfilled==和==rejected==。\n  - promise对象的状态必须有并且只有上述三种当中的一种。\n  - 状态的改变只能是从pending到fulfilled或者pending到rejected。\n  - then方法返回一个promise。then 方法可以被同一个 promise 调用多次。\n```\npromise.then(onFulfilled, onRejected)\n```\n### Promise实现\n1. 构造函数\n```\nfunction Promise(resolver) {}\n```\n2. 原型链\n```\nPromise.prototype.then = function() {}\nPromise.prototype.catch = function() {}\n```\n3. 静态方法\n```\nPromise.resolve = function() {}\nPromise.reject = function() {}\nPromise.all = function() {}\nPromise.race = function() {}\n```\n### Promise基本结构\n\n```\nlet promise=new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve('FULFILLED')\n  }, 1000)\n})\npromise.then(a=> alert(a));\npromise.then(a => alert(a+1));\n```\n### Promise构造函数\n构造函数用法总结：\n1. 构造函数接收一个==executor==立即执行函数\n2. ==executor==立即执行函数接收一个==resolve==函数\n3. ==promise==对象的==then==方法绑定状态变为==fulfilled==时的回调\n4. ==resolve==函数被调用时会触发==then==方法中的回调\n#### 构造函数的初步实现\n\n```\nfunction Promise(executor) {\n    var self = this;\n    self.status = 'pending'; //promise当前的状态\n    self.data = undefined; //promise的值\n    self.onResolvedCallback = [];\n    //promise状态变为resolve时的回调函数集，可能有多个\n   function resolve(value) {\n       if(self.status === 'pending') {\n           self.status = 'resolved';\n           self.data = value;\n           for(var i = 0; i < self.onResolvedCallback.length; i++) {\n               self.onResolvedCallback[i](value);\n           }\n       }\n   }\n   executor(resolve);\n};\nPromise.prototype.then = function (resolve) {\n    this.onResolvedCallback.push(resolve);\n};\n```\n#### 添加reject结果\n\n```\nfunction Promise(executor) {\n    var self = this;\n    self.status = 'pending'; //promise当前的状态\n    self.data = undefined; //promise的值\n    self.onResolvedCallback = [];\n    //promise状态变为resolve时的回调函数集，可能有多个\n    self.onRejectedCallback = [];\n    //promise状态变为reject时的回调函数集，可能有多个\n   function resolve(value) {\n       if(self.status === 'pending') {\n           self.status = 'resolved';\n           self.data = value;\n           for(var i = 0; i < self.onResolvedCallback.length; i++) {\n               self.onResolvedCallback[i](value);\n           }\n       }\n   }\n\n   function reject(reason) {\n        if(self.status === 'pending') {\n            self.status = 'rejected';\n            self.data = reason;\n            for(var i = 0; i < self.onRejectedCallback.length; i++) {\n                self.onRejectedCallback[i](reason);\n            }\n        }\n   }\n\n   try {\n       executor(resolve, reject);\n   } catch (e){\n       reject(e);\n   }\n};\nPromise.prototype.then = function (onResolve, onReject) {\n    this.onResolvedCallback.push(onResolve);\n    this.onRejectedCallback.push(onReject);\n};\n```\n小结：\n1. ==executor==函数作为实参在创建==Promise==对象时传入==Promise==构造函数。\n2. ==resolve==和==reject==函数作为实参传入==executor==函数。\n3. ==value==作为实参传入==resolve==和==reject==函数。\n#### 如果executor自执行函数中的resolve函数立即触发时，发现Promise失效\n\n```\nconst promise = new Promise((resolve) => {\n    resolve(1);\n});\npromise.then((a) => alert(a));\n\n```\n将promise的resolve和reject异步执行\n\n```\nfunction resolve(value) {\n    setTimeout(function () {\n        if(self.status === 'pending') {\n            self.status = 'resolved';\n            self.data = value;\n            for(var i = 0; i < self.onResolvedCallback.length; i++) {\n                self.onResolvedCallback[i](value);\n            }\n        }\n    })\n}\n\nfunction reject(reason) {\n    setTimeout(function () {\n        if(self.status === 'pending') {\n            self.status = 'rejected';\n            self.data = reason;\n            for(var i = 0; i < self.onRejectedCallback.length; i++) {\n                self.onRejectedCallback[i](reason);\n            }\n        }\n    })\n}\n```\n### then方法\n\n```\npromise.then(onFulfilled, onRejected)\n```\n1.  ==then==方法返回一个新的==promise==对象。\n1.  ==executor==自执行函数中的==resolve==参数调用时执行==then==方法的第一个回调函数==onResolved==。\n1.  ==executor==自执行函数中的==reject==参数调用时执行==then==方法的第二个回调函数==onRejected==。\n\n```\nPromise.prototype.then = function (onResolved, onRejected) {\n    var self = this;\n    var promise2;\n    onResolved = typeof onResolved === 'function' \n                ? onResolved \n                : function (value) {return value};\n    onRejected = typeof onRejected === 'function' \n                ? onRejected \n                : function (reason) {throw reason};\n    //promise对象当前状态为resolved\n    if(self.status === 'resolved') {\n        return promise2 = new Promise(function (resolve, reject) {\n            try {\n                //调用onResolve回调函数\n                var x = onResolved(self.data);\n                //如果onResolve回调函数返回值为一个promise对象\n                if(x instanceof  Promise) {\n                    //将它的结果作为promise2的结果\n                    x.then(resolve, reject);\n                } else {\n                    resolve(x);//执行promise2的onResolve回调\n           }        \n            } catch (e) {\n                reject(e); //执行promise2的onReject回调\n            }\n        })\n    }\n    //promise对象当前状态为rejected\n    if(self.status === 'rejected') {\n        return promise2 = new Promise(function (resolve, reject) {\n            try {\n                var x = onRejected(self.data);\n                if (x instanceof Promise) {\n                    x.then(resolve, reject)\n                } else {\n                    resolve(x)\n                }\n            } catch (e) {\n                reject(e)\n            }\n        })\n    }\n    //promise对象当前状态为pending\n    //此时并不能确定调用onResolved还是onRejected，需要等当前Promise状态确定。\n    //所以需要将callBack放入promise1的回调数组中\n    if(self.status === 'pending') {\n        return promise2 = new Promise(function (resolve, reject) {\n            self.onResolvedCallback.push(function (value) {\n                try {\n                    var x = onResolved(self.data);\n                    if (x instanceof Promise) {\n                        x.then(resolve, reject);\n                    } else {\n                        resolve(x);\n          }\n                } catch (e) {\n                    reject(e);\n                }\n            })\n            self.onRejectedCallback.push(function(reason) {\n                try {\n                    var x = onRejected(self.data);\n                    if (x instanceof Promise) {\n                        x.then(resolve, reject)\n                    } else {\n                        resolve(x);\n                    }\n                } catch (e) {\n                    reject(e)\n                }\n            })\n        })\n    }\n};\n```\n### 完整代码\n\n```\nvar Promise = (function() {\n    function Promise(resolver) {\n        if (typeof resolver !== 'function') { //resolver必须是函数\n            throw new TypeError('Promise resolver ' + resolver + ' is not a function')\n        }\n        if (!(this instanceof Promise)) return new Promise(resolver)\n\n        var self = this //保存this\n        self.callbacks = [] //保存onResolve和onReject函数集合\n        self.status = 'pending' //当前状态\n\n        function resolve(value) {\n            setTimeout(function() { //异步调用\n                if (self.status !== 'pending') {\n                    return\n                }\n                self.status = 'resolved' //修改状态\n                self.data = value\n\n                for (var i = 0; i < self.callbacks.length; i++) {\n                    self.callbacks[i].onResolved(value)\n                }\n            })\n        }\n\n        function reject(reason) {\n            setTimeout(function(){ //异步调用\n                if (self.status !== 'pending') {\n                    return\n                }\n                self.status = 'rejected' //修改状态\n                self.data = reason\n\n                for (var i = 0; i < self.callbacks.length; i++) {\n                    self.callbacks[i].onRejected(reason)\n                }\n            })\n        }\n\n        try{\n            resolver(resolve, reject) //执行resolver函数\n        } catch(e) {\n            reject(e)\n        }\n    }\n\n    function resolvePromise(promise, x, resolve, reject) {\n        var then\n        var thenCalledOrThrow = false\n\n        if (promise === x) {\n            return reject(new TypeError('Chaining cycle detected for promise!'))\n        }\n\n        if ((x !== null) && ((typeof x === 'object') || (typeof x === 'function'))) {\n            try {\n                then = x.then\n                if (typeof then === 'function') {\n                    then.call(x, function rs(y) {\n                        if (thenCalledOrThrow) return\n                        thenCalledOrThrow = true\n                        return resolvePromise(promise, y, resolve, reject)\n                    }, function rj(r) {\n                        if (thenCalledOrThrow) return\n                        thenCalledOrThrow = true\n                        return reject(r)\n                    })\n                } else {\n                    return resolve(x)\n                }\n            } catch(e) {\n                if (thenCalledOrThrow) return\n                thenCalledOrThrow = true\n                return reject(e)\n            }\n        } else {\n            return resolve(x)\n        }\n    }\n\n    Promise.prototype.then = function(onResolved, onRejected) {\n        //健壮性处理，处理点击穿透\n        onResolved = typeof onResolved === 'function' ? onResolved : function(v){return v}\n        onRejected = typeof onRejected === 'function' ? onRejected : function(r){throw r}\n        var self = this\n        var promise2\n\n        //promise状态为resolved\n        if (self.status === 'resolved') {\n            return promise2 = new Promise(function(resolve, reject) {\n                setTimeout(function() {\n                    try {\n                        //调用then方法的onResolved回调\n                        var x = onResolved(self.data)\n                        //根据x的值修改promise2的状态\n                        resolvePromise(promise2, x, resolve, reject)\n                    } catch(e) {\n                        //promise2状态变为rejected\n                        return reject(e)\n                    }\n                })\n            })\n        }\n\n        //promise状态为rejected\n        if (self.status === 'rejected') {\n            return promise2 = new Promise(function(resolve, reject) {\n                setTimeout(function() {\n                    try {\n                        //调用then方法的onReject回调\n                        var x = onRejected(self.data)\n                        //根据x的值修改promise2的状态\n                        resolvePromise(promise2, x, resolve, reject)\n                    } catch(e) {\n                        //promise2状态变为rejected\n                        return reject(e)\n                    }\n                })\n            })\n        }\n\n        //promise状态为pending\n        //需要等待promise的状态改变\n        if (self.status === 'pending') {\n            return promise2 = new Promise(function(resolve, reject) {\n                self.callbacks.push({\n                    onResolved: function(value) {\n                        try {\n                            //调用then方法的onResolved回调\n                            var x = onResolved(value)\n                            //根据x的值修改promise2的状态\n                            resolvePromise(promise2, x, resolve, reject)\n                        } catch(e) {\n                            //promise2状态变为rejected\n                            return reject(e)\n                        }\n                    },\n                    onRejected: function(reason) {\n                        try {\n                            //调用then方法的onResolved回调\n                            var x = onRejected(reason)\n                            //根据x的值修改promise2的状态\n                            resolvePromise(promise2, x, resolve, reject)\n                        } catch(e) {\n                            //promise2状态变为rejected\n                            return reject(e)\n                        }\n                    }\n                })\n            })\n        }\n    }\n\n    //获取当前Promise传递的值\n    Promise.prototype.valueOf = function() {\n        return this.data\n    }\n\n    //由then方法实现catch方法\n    Promise.prototype.catch = function(onRejected) {\n        return this.then(null, onRejected)\n    }\n\n    //finally方法\n    Promise.prototype.finally = function(fn) {\n        return this.then(function(v){\n            setTimeout(fn)\n            return v\n        }, function(r){\n            setTimeout(fn)\n            throw r\n        })\n    }\n\n    Promise.prototype.spread = function(fn, onRejected) {\n        return this.then(function(values) {\n            return fn.apply(null, values)\n        }, onRejected)\n    }\n\n    Promise.prototype.inject = function(fn, onRejected) {\n        return this.then(function(v) {\n            return fn.apply(null, fn.toString().match(/\\((.*?)\\)/)[1].split(',').map(function(key){\n                return v[key];\n            }))\n        }, onRejected)\n    }\n\n    Promise.prototype.delay = function(duration) {\n        return this.then(function(value) {\n            return new Promise(function(resolve, reject) {\n                setTimeout(function() {\n                    resolve(value)\n                }, duration)\n            })\n        }, function(reason) {\n            return new Promise(function(resolve, reject) {\n                setTimeout(function() {\n                    reject(reason)\n                }, duration)\n            })\n        })\n    }\n\n    Promise.all = function(promises) {\n        return new Promise(function(resolve, reject) {\n            var resolvedCounter = 0\n            var promiseNum = promises.length\n            var resolvedValues = new Array(promiseNum)\n            for (var i = 0; i < promiseNum; i++) {\n                (function(i) {\n                    Promise.resolve(promises[i]).then(function(value) {\n                        resolvedCounter++\n                        resolvedValues[i] = value\n                        if (resolvedCounter == promiseNum) {\n                            return resolve(resolvedValues)\n                        }\n                    }, function(reason) {\n                        return reject(reason)\n                    })\n                })(i)\n            }\n        })\n    }\n\n    Promise.race = function(promises) {\n        return new Promise(function(resolve, reject) {\n            for (var i = 0; i < promises.length; i++) {\n                Promise.resolve(promises[i]).then(function(value) {\n                    return resolve(value)\n                }, function(reason) {\n                    return reject(reason)\n                })\n            }\n        })\n    }\n\n    Promise.resolve = function(value) {\n        var promise = new Promise(function(resolve, reject) {\n            resolvePromise(promise, value, resolve, reject)\n        })\n        return promise\n    }\n\n    Promise.reject = function(reason) {\n        return new Promise(function(resolve, reject) {\n            reject(reason)\n        })\n    }\n\n    Promise.fcall = function(fn){\n        // 虽然fn可以接收到上一层then里传来的参数，但是其实是undefined，所以跟没有是一样的，因为resolve没参数啊\n        return Promise.resolve().then(fn)\n    }\n\n    Promise.done = Promise.stop = function(){\n        return new Promise(function(){})\n    }\n\n    Promise.deferred = Promise.defer = function() {\n        var dfd = {}\n        dfd.promise = new Promise(function(resolve, reject) {\n            dfd.resolve = resolve\n            dfd.reject = reject\n        })\n        return dfd\n    }\n\n    try { // CommonJS compliance\n        module.exports = Promise\n    } catch(e) {}\n\n    return Promise\n})()\n```\n### 参考\n[Promise实现原理](https://www.jianshu.com/p/43de678e918a)  \n[Promise原理与实现](https://www.jianshu.com/p/b4f0425b22a1)\n\n\n\n\n\n\n\n","slug":"promise原理和实现","published":1,"updated":"2020-01-14T10:00:15.000Z","comments":1,"photos":[],"link":"","_id":"ck5dph2mv0001fh2pelpo5zis","content":"<h3 id=\"什么是Promise\"><a href=\"#什么是Promise\" class=\"headerlink\" title=\"什么是Promise\"></a>什么是Promise</h3><p>Promise 对象用于表示一个异步操作的最终完成 (或失败), 及其结果值.</p>\n<h3 id=\"Promise规范\"><a href=\"#Promise规范\" class=\"headerlink\" title=\"Promise规范\"></a>Promise规范</h3><ul>\n<li>ES6中使用<a href=\"https://juejin.im/post/5c4b0423e51d4525211c0fbc\" target=\"_blank\" rel=\"noopener\">Promise/A+</a>规范。</li>\n<li>Promise的标准理解<ul>\n<li>promise对象有三种状态==pending==、==fulfilled==和==rejected==。</li>\n<li>promise对象的状态必须有并且只有上述三种当中的一种。</li>\n<li>状态的改变只能是从pending到fulfilled或者pending到rejected。</li>\n<li>then方法返回一个promise。then 方法可以被同一个 promise 调用多次。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promise.then(onFulfilled, onRejected)</span><br></pre></td></tr></table></figure>\n<h3 id=\"Promise实现\"><a href=\"#Promise实现\" class=\"headerlink\" title=\"Promise实现\"></a>Promise实现</h3></li>\n</ul>\n</li>\n</ul>\n<ol>\n<li>构造函数<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Promise(resolver) &#123;&#125;</span><br></pre></td></tr></table></figure></li>\n<li>原型链<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Promise.prototype.then &#x3D; function() &#123;&#125;</span><br><span class=\"line\">Promise.prototype.catch &#x3D; function() &#123;&#125;</span><br></pre></td></tr></table></figure></li>\n<li>静态方法<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Promise.resolve &#x3D; function() &#123;&#125;</span><br><span class=\"line\">Promise.reject &#x3D; function() &#123;&#125;</span><br><span class=\"line\">Promise.all &#x3D; function() &#123;&#125;</span><br><span class=\"line\">Promise.race &#x3D; function() &#123;&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Promise基本结构\"><a href=\"#Promise基本结构\" class=\"headerlink\" title=\"Promise基本结构\"></a>Promise基本结构</h3></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let promise&#x3D;new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class=\"line\">  setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">    resolve(&#39;FULFILLED&#39;)</span><br><span class=\"line\">  &#125;, 1000)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">promise.then(a&#x3D;&gt; alert(a));</span><br><span class=\"line\">promise.then(a &#x3D;&gt; alert(a+1));</span><br></pre></td></tr></table></figure>\n<h3 id=\"Promise构造函数\"><a href=\"#Promise构造函数\" class=\"headerlink\" title=\"Promise构造函数\"></a>Promise构造函数</h3><p>构造函数用法总结：</p>\n<ol>\n<li>构造函数接收一个==executor==立即执行函数</li>\n<li>==executor==立即执行函数接收一个==resolve==函数</li>\n<li>==promise==对象的==then==方法绑定状态变为==fulfilled==时的回调</li>\n<li>==resolve==函数被调用时会触发==then==方法中的回调<h4 id=\"构造函数的初步实现\"><a href=\"#构造函数的初步实现\" class=\"headerlink\" title=\"构造函数的初步实现\"></a>构造函数的初步实现</h4></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Promise(executor) &#123;</span><br><span class=\"line\">    var self &#x3D; this;</span><br><span class=\"line\">    self.status &#x3D; &#39;pending&#39;; &#x2F;&#x2F;promise当前的状态</span><br><span class=\"line\">    self.data &#x3D; undefined; &#x2F;&#x2F;promise的值</span><br><span class=\"line\">    self.onResolvedCallback &#x3D; [];</span><br><span class=\"line\">    &#x2F;&#x2F;promise状态变为resolve时的回调函数集，可能有多个</span><br><span class=\"line\">   function resolve(value) &#123;</span><br><span class=\"line\">       if(self.status &#x3D;&#x3D;&#x3D; &#39;pending&#39;) &#123;</span><br><span class=\"line\">           self.status &#x3D; &#39;resolved&#39;;</span><br><span class=\"line\">           self.data &#x3D; value;</span><br><span class=\"line\">           for(var i &#x3D; 0; i &lt; self.onResolvedCallback.length; i++) &#123;</span><br><span class=\"line\">               self.onResolvedCallback[i](value);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   executor(resolve);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Promise.prototype.then &#x3D; function (resolve) &#123;</span><br><span class=\"line\">    this.onResolvedCallback.push(resolve);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"添加reject结果\"><a href=\"#添加reject结果\" class=\"headerlink\" title=\"添加reject结果\"></a>添加reject结果</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Promise(executor) &#123;</span><br><span class=\"line\">    var self &#x3D; this;</span><br><span class=\"line\">    self.status &#x3D; &#39;pending&#39;; &#x2F;&#x2F;promise当前的状态</span><br><span class=\"line\">    self.data &#x3D; undefined; &#x2F;&#x2F;promise的值</span><br><span class=\"line\">    self.onResolvedCallback &#x3D; [];</span><br><span class=\"line\">    &#x2F;&#x2F;promise状态变为resolve时的回调函数集，可能有多个</span><br><span class=\"line\">    self.onRejectedCallback &#x3D; [];</span><br><span class=\"line\">    &#x2F;&#x2F;promise状态变为reject时的回调函数集，可能有多个</span><br><span class=\"line\">   function resolve(value) &#123;</span><br><span class=\"line\">       if(self.status &#x3D;&#x3D;&#x3D; &#39;pending&#39;) &#123;</span><br><span class=\"line\">           self.status &#x3D; &#39;resolved&#39;;</span><br><span class=\"line\">           self.data &#x3D; value;</span><br><span class=\"line\">           for(var i &#x3D; 0; i &lt; self.onResolvedCallback.length; i++) &#123;</span><br><span class=\"line\">               self.onResolvedCallback[i](value);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   function reject(reason) &#123;</span><br><span class=\"line\">        if(self.status &#x3D;&#x3D;&#x3D; &#39;pending&#39;) &#123;</span><br><span class=\"line\">            self.status &#x3D; &#39;rejected&#39;;</span><br><span class=\"line\">            self.data &#x3D; reason;</span><br><span class=\"line\">            for(var i &#x3D; 0; i &lt; self.onRejectedCallback.length; i++) &#123;</span><br><span class=\"line\">                self.onRejectedCallback[i](reason);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   try &#123;</span><br><span class=\"line\">       executor(resolve, reject);</span><br><span class=\"line\">   &#125; catch (e)&#123;</span><br><span class=\"line\">       reject(e);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Promise.prototype.then &#x3D; function (onResolve, onReject) &#123;</span><br><span class=\"line\">    this.onResolvedCallback.push(onResolve);</span><br><span class=\"line\">    this.onRejectedCallback.push(onReject);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>小结：</p>\n<ol>\n<li>==executor==函数作为实参在创建==Promise==对象时传入==Promise==构造函数。</li>\n<li>==resolve==和==reject==函数作为实参传入==executor==函数。</li>\n<li>==value==作为实参传入==resolve==和==reject==函数。<h4 id=\"如果executor自执行函数中的resolve函数立即触发时，发现Promise失效\"><a href=\"#如果executor自执行函数中的resolve函数立即触发时，发现Promise失效\" class=\"headerlink\" title=\"如果executor自执行函数中的resolve函数立即触发时，发现Promise失效\"></a>如果executor自执行函数中的resolve函数立即触发时，发现Promise失效</h4></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const promise &#x3D; new Promise((resolve) &#x3D;&gt; &#123;</span><br><span class=\"line\">    resolve(1);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">promise.then((a) &#x3D;&gt; alert(a));</span><br></pre></td></tr></table></figure>\n<p>将promise的resolve和reject异步执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function resolve(value) &#123;</span><br><span class=\"line\">    setTimeout(function () &#123;</span><br><span class=\"line\">        if(self.status &#x3D;&#x3D;&#x3D; &#39;pending&#39;) &#123;</span><br><span class=\"line\">            self.status &#x3D; &#39;resolved&#39;;</span><br><span class=\"line\">            self.data &#x3D; value;</span><br><span class=\"line\">            for(var i &#x3D; 0; i &lt; self.onResolvedCallback.length; i++) &#123;</span><br><span class=\"line\">                self.onResolvedCallback[i](value);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function reject(reason) &#123;</span><br><span class=\"line\">    setTimeout(function () &#123;</span><br><span class=\"line\">        if(self.status &#x3D;&#x3D;&#x3D; &#39;pending&#39;) &#123;</span><br><span class=\"line\">            self.status &#x3D; &#39;rejected&#39;;</span><br><span class=\"line\">            self.data &#x3D; reason;</span><br><span class=\"line\">            for(var i &#x3D; 0; i &lt; self.onRejectedCallback.length; i++) &#123;</span><br><span class=\"line\">                self.onRejectedCallback[i](reason);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"then方法\"><a href=\"#then方法\" class=\"headerlink\" title=\"then方法\"></a>then方法</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promise.then(onFulfilled, onRejected)</span><br></pre></td></tr></table></figure>\n<ol>\n<li>==then==方法返回一个新的==promise==对象。</li>\n<li>==executor==自执行函数中的==resolve==参数调用时执行==then==方法的第一个回调函数==onResolved==。</li>\n<li>==executor==自执行函数中的==reject==参数调用时执行==then==方法的第二个回调函数==onRejected==。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Promise.prototype.then &#x3D; function (onResolved, onRejected) &#123;</span><br><span class=\"line\">    var self &#x3D; this;</span><br><span class=\"line\">    var promise2;</span><br><span class=\"line\">    onResolved &#x3D; typeof onResolved &#x3D;&#x3D;&#x3D; &#39;function&#39; </span><br><span class=\"line\">                ? onResolved </span><br><span class=\"line\">                : function (value) &#123;return value&#125;;</span><br><span class=\"line\">    onRejected &#x3D; typeof onRejected &#x3D;&#x3D;&#x3D; &#39;function&#39; </span><br><span class=\"line\">                ? onRejected </span><br><span class=\"line\">                : function (reason) &#123;throw reason&#125;;</span><br><span class=\"line\">    &#x2F;&#x2F;promise对象当前状态为resolved</span><br><span class=\"line\">    if(self.status &#x3D;&#x3D;&#x3D; &#39;resolved&#39;) &#123;</span><br><span class=\"line\">        return promise2 &#x3D; new Promise(function (resolve, reject) &#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                &#x2F;&#x2F;调用onResolve回调函数</span><br><span class=\"line\">                var x &#x3D; onResolved(self.data);</span><br><span class=\"line\">                &#x2F;&#x2F;如果onResolve回调函数返回值为一个promise对象</span><br><span class=\"line\">                if(x instanceof  Promise) &#123;</span><br><span class=\"line\">                    &#x2F;&#x2F;将它的结果作为promise2的结果</span><br><span class=\"line\">                    x.then(resolve, reject);</span><br><span class=\"line\">                &#125; else &#123;</span><br><span class=\"line\">                    resolve(x);&#x2F;&#x2F;执行promise2的onResolve回调</span><br><span class=\"line\">           &#125;        </span><br><span class=\"line\">            &#125; catch (e) &#123;</span><br><span class=\"line\">                reject(e); &#x2F;&#x2F;执行promise2的onReject回调</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#x2F;&#x2F;promise对象当前状态为rejected</span><br><span class=\"line\">    if(self.status &#x3D;&#x3D;&#x3D; &#39;rejected&#39;) &#123;</span><br><span class=\"line\">        return promise2 &#x3D; new Promise(function (resolve, reject) &#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                var x &#x3D; onRejected(self.data);</span><br><span class=\"line\">                if (x instanceof Promise) &#123;</span><br><span class=\"line\">                    x.then(resolve, reject)</span><br><span class=\"line\">                &#125; else &#123;</span><br><span class=\"line\">                    resolve(x)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; catch (e) &#123;</span><br><span class=\"line\">                reject(e)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#x2F;&#x2F;promise对象当前状态为pending</span><br><span class=\"line\">    &#x2F;&#x2F;此时并不能确定调用onResolved还是onRejected，需要等当前Promise状态确定。</span><br><span class=\"line\">    &#x2F;&#x2F;所以需要将callBack放入promise1的回调数组中</span><br><span class=\"line\">    if(self.status &#x3D;&#x3D;&#x3D; &#39;pending&#39;) &#123;</span><br><span class=\"line\">        return promise2 &#x3D; new Promise(function (resolve, reject) &#123;</span><br><span class=\"line\">            self.onResolvedCallback.push(function (value) &#123;</span><br><span class=\"line\">                try &#123;</span><br><span class=\"line\">                    var x &#x3D; onResolved(self.data);</span><br><span class=\"line\">                    if (x instanceof Promise) &#123;</span><br><span class=\"line\">                        x.then(resolve, reject);</span><br><span class=\"line\">                    &#125; else &#123;</span><br><span class=\"line\">                        resolve(x);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">                &#125; catch (e) &#123;</span><br><span class=\"line\">                    reject(e);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            self.onRejectedCallback.push(function(reason) &#123;</span><br><span class=\"line\">                try &#123;</span><br><span class=\"line\">                    var x &#x3D; onRejected(self.data);</span><br><span class=\"line\">                    if (x instanceof Promise) &#123;</span><br><span class=\"line\">                        x.then(resolve, reject)</span><br><span class=\"line\">                    &#125; else &#123;</span><br><span class=\"line\">                        resolve(x);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; catch (e) &#123;</span><br><span class=\"line\">                    reject(e)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var Promise &#x3D; (function() &#123;</span><br><span class=\"line\">    function Promise(resolver) &#123;</span><br><span class=\"line\">        if (typeof resolver !&#x3D;&#x3D; &#39;function&#39;) &#123; &#x2F;&#x2F;resolver必须是函数</span><br><span class=\"line\">            throw new TypeError(&#39;Promise resolver &#39; + resolver + &#39; is not a function&#39;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (!(this instanceof Promise)) return new Promise(resolver)</span><br><span class=\"line\"></span><br><span class=\"line\">        var self &#x3D; this &#x2F;&#x2F;保存this</span><br><span class=\"line\">        self.callbacks &#x3D; [] &#x2F;&#x2F;保存onResolve和onReject函数集合</span><br><span class=\"line\">        self.status &#x3D; &#39;pending&#39; &#x2F;&#x2F;当前状态</span><br><span class=\"line\"></span><br><span class=\"line\">        function resolve(value) &#123;</span><br><span class=\"line\">            setTimeout(function() &#123; &#x2F;&#x2F;异步调用</span><br><span class=\"line\">                if (self.status !&#x3D;&#x3D; &#39;pending&#39;) &#123;</span><br><span class=\"line\">                    return</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                self.status &#x3D; &#39;resolved&#39; &#x2F;&#x2F;修改状态</span><br><span class=\"line\">                self.data &#x3D; value</span><br><span class=\"line\"></span><br><span class=\"line\">                for (var i &#x3D; 0; i &lt; self.callbacks.length; i++) &#123;</span><br><span class=\"line\">                    self.callbacks[i].onResolved(value)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        function reject(reason) &#123;</span><br><span class=\"line\">            setTimeout(function()&#123; &#x2F;&#x2F;异步调用</span><br><span class=\"line\">                if (self.status !&#x3D;&#x3D; &#39;pending&#39;) &#123;</span><br><span class=\"line\">                    return</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                self.status &#x3D; &#39;rejected&#39; &#x2F;&#x2F;修改状态</span><br><span class=\"line\">                self.data &#x3D; reason</span><br><span class=\"line\"></span><br><span class=\"line\">                for (var i &#x3D; 0; i &lt; self.callbacks.length; i++) &#123;</span><br><span class=\"line\">                    self.callbacks[i].onRejected(reason)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        try&#123;</span><br><span class=\"line\">            resolver(resolve, reject) &#x2F;&#x2F;执行resolver函数</span><br><span class=\"line\">        &#125; catch(e) &#123;</span><br><span class=\"line\">            reject(e)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function resolvePromise(promise, x, resolve, reject) &#123;</span><br><span class=\"line\">        var then</span><br><span class=\"line\">        var thenCalledOrThrow &#x3D; false</span><br><span class=\"line\"></span><br><span class=\"line\">        if (promise &#x3D;&#x3D;&#x3D; x) &#123;</span><br><span class=\"line\">            return reject(new TypeError(&#39;Chaining cycle detected for promise!&#39;))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        if ((x !&#x3D;&#x3D; null) &amp;&amp; ((typeof x &#x3D;&#x3D;&#x3D; &#39;object&#39;) || (typeof x &#x3D;&#x3D;&#x3D; &#39;function&#39;))) &#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                then &#x3D; x.then</span><br><span class=\"line\">                if (typeof then &#x3D;&#x3D;&#x3D; &#39;function&#39;) &#123;</span><br><span class=\"line\">                    then.call(x, function rs(y) &#123;</span><br><span class=\"line\">                        if (thenCalledOrThrow) return</span><br><span class=\"line\">                        thenCalledOrThrow &#x3D; true</span><br><span class=\"line\">                        return resolvePromise(promise, y, resolve, reject)</span><br><span class=\"line\">                    &#125;, function rj(r) &#123;</span><br><span class=\"line\">                        if (thenCalledOrThrow) return</span><br><span class=\"line\">                        thenCalledOrThrow &#x3D; true</span><br><span class=\"line\">                        return reject(r)</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                &#125; else &#123;</span><br><span class=\"line\">                    return resolve(x)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; catch(e) &#123;</span><br><span class=\"line\">                if (thenCalledOrThrow) return</span><br><span class=\"line\">                thenCalledOrThrow &#x3D; true</span><br><span class=\"line\">                return reject(e)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            return resolve(x)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Promise.prototype.then &#x3D; function(onResolved, onRejected) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;健壮性处理，处理点击穿透</span><br><span class=\"line\">        onResolved &#x3D; typeof onResolved &#x3D;&#x3D;&#x3D; &#39;function&#39; ? onResolved : function(v)&#123;return v&#125;</span><br><span class=\"line\">        onRejected &#x3D; typeof onRejected &#x3D;&#x3D;&#x3D; &#39;function&#39; ? onRejected : function(r)&#123;throw r&#125;</span><br><span class=\"line\">        var self &#x3D; this</span><br><span class=\"line\">        var promise2</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;promise状态为resolved</span><br><span class=\"line\">        if (self.status &#x3D;&#x3D;&#x3D; &#39;resolved&#39;) &#123;</span><br><span class=\"line\">            return promise2 &#x3D; new Promise(function(resolve, reject) &#123;</span><br><span class=\"line\">                setTimeout(function() &#123;</span><br><span class=\"line\">                    try &#123;</span><br><span class=\"line\">                        &#x2F;&#x2F;调用then方法的onResolved回调</span><br><span class=\"line\">                        var x &#x3D; onResolved(self.data)</span><br><span class=\"line\">                        &#x2F;&#x2F;根据x的值修改promise2的状态</span><br><span class=\"line\">                        resolvePromise(promise2, x, resolve, reject)</span><br><span class=\"line\">                    &#125; catch(e) &#123;</span><br><span class=\"line\">                        &#x2F;&#x2F;promise2状态变为rejected</span><br><span class=\"line\">                        return reject(e)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;promise状态为rejected</span><br><span class=\"line\">        if (self.status &#x3D;&#x3D;&#x3D; &#39;rejected&#39;) &#123;</span><br><span class=\"line\">            return promise2 &#x3D; new Promise(function(resolve, reject) &#123;</span><br><span class=\"line\">                setTimeout(function() &#123;</span><br><span class=\"line\">                    try &#123;</span><br><span class=\"line\">                        &#x2F;&#x2F;调用then方法的onReject回调</span><br><span class=\"line\">                        var x &#x3D; onRejected(self.data)</span><br><span class=\"line\">                        &#x2F;&#x2F;根据x的值修改promise2的状态</span><br><span class=\"line\">                        resolvePromise(promise2, x, resolve, reject)</span><br><span class=\"line\">                    &#125; catch(e) &#123;</span><br><span class=\"line\">                        &#x2F;&#x2F;promise2状态变为rejected</span><br><span class=\"line\">                        return reject(e)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;promise状态为pending</span><br><span class=\"line\">        &#x2F;&#x2F;需要等待promise的状态改变</span><br><span class=\"line\">        if (self.status &#x3D;&#x3D;&#x3D; &#39;pending&#39;) &#123;</span><br><span class=\"line\">            return promise2 &#x3D; new Promise(function(resolve, reject) &#123;</span><br><span class=\"line\">                self.callbacks.push(&#123;</span><br><span class=\"line\">                    onResolved: function(value) &#123;</span><br><span class=\"line\">                        try &#123;</span><br><span class=\"line\">                            &#x2F;&#x2F;调用then方法的onResolved回调</span><br><span class=\"line\">                            var x &#x3D; onResolved(value)</span><br><span class=\"line\">                            &#x2F;&#x2F;根据x的值修改promise2的状态</span><br><span class=\"line\">                            resolvePromise(promise2, x, resolve, reject)</span><br><span class=\"line\">                        &#125; catch(e) &#123;</span><br><span class=\"line\">                            &#x2F;&#x2F;promise2状态变为rejected</span><br><span class=\"line\">                            return reject(e)</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    onRejected: function(reason) &#123;</span><br><span class=\"line\">                        try &#123;</span><br><span class=\"line\">                            &#x2F;&#x2F;调用then方法的onResolved回调</span><br><span class=\"line\">                            var x &#x3D; onRejected(reason)</span><br><span class=\"line\">                            &#x2F;&#x2F;根据x的值修改promise2的状态</span><br><span class=\"line\">                            resolvePromise(promise2, x, resolve, reject)</span><br><span class=\"line\">                        &#125; catch(e) &#123;</span><br><span class=\"line\">                            &#x2F;&#x2F;promise2状态变为rejected</span><br><span class=\"line\">                            return reject(e)</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;获取当前Promise传递的值</span><br><span class=\"line\">    Promise.prototype.valueOf &#x3D; function() &#123;</span><br><span class=\"line\">        return this.data</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;由then方法实现catch方法</span><br><span class=\"line\">    Promise.prototype.catch &#x3D; function(onRejected) &#123;</span><br><span class=\"line\">        return this.then(null, onRejected)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;finally方法</span><br><span class=\"line\">    Promise.prototype.finally &#x3D; function(fn) &#123;</span><br><span class=\"line\">        return this.then(function(v)&#123;</span><br><span class=\"line\">            setTimeout(fn)</span><br><span class=\"line\">            return v</span><br><span class=\"line\">        &#125;, function(r)&#123;</span><br><span class=\"line\">            setTimeout(fn)</span><br><span class=\"line\">            throw r</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Promise.prototype.spread &#x3D; function(fn, onRejected) &#123;</span><br><span class=\"line\">        return this.then(function(values) &#123;</span><br><span class=\"line\">            return fn.apply(null, values)</span><br><span class=\"line\">        &#125;, onRejected)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Promise.prototype.inject &#x3D; function(fn, onRejected) &#123;</span><br><span class=\"line\">        return this.then(function(v) &#123;</span><br><span class=\"line\">            return fn.apply(null, fn.toString().match(&#x2F;\\((.*?)\\)&#x2F;)[1].split(&#39;,&#39;).map(function(key)&#123;</span><br><span class=\"line\">                return v[key];</span><br><span class=\"line\">            &#125;))</span><br><span class=\"line\">        &#125;, onRejected)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Promise.prototype.delay &#x3D; function(duration) &#123;</span><br><span class=\"line\">        return this.then(function(value) &#123;</span><br><span class=\"line\">            return new Promise(function(resolve, reject) &#123;</span><br><span class=\"line\">                setTimeout(function() &#123;</span><br><span class=\"line\">                    resolve(value)</span><br><span class=\"line\">                &#125;, duration)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;, function(reason) &#123;</span><br><span class=\"line\">            return new Promise(function(resolve, reject) &#123;</span><br><span class=\"line\">                setTimeout(function() &#123;</span><br><span class=\"line\">                    reject(reason)</span><br><span class=\"line\">                &#125;, duration)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Promise.all &#x3D; function(promises) &#123;</span><br><span class=\"line\">        return new Promise(function(resolve, reject) &#123;</span><br><span class=\"line\">            var resolvedCounter &#x3D; 0</span><br><span class=\"line\">            var promiseNum &#x3D; promises.length</span><br><span class=\"line\">            var resolvedValues &#x3D; new Array(promiseNum)</span><br><span class=\"line\">            for (var i &#x3D; 0; i &lt; promiseNum; i++) &#123;</span><br><span class=\"line\">                (function(i) &#123;</span><br><span class=\"line\">                    Promise.resolve(promises[i]).then(function(value) &#123;</span><br><span class=\"line\">                        resolvedCounter++</span><br><span class=\"line\">                        resolvedValues[i] &#x3D; value</span><br><span class=\"line\">                        if (resolvedCounter &#x3D;&#x3D; promiseNum) &#123;</span><br><span class=\"line\">                            return resolve(resolvedValues)</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;, function(reason) &#123;</span><br><span class=\"line\">                        return reject(reason)</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                &#125;)(i)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Promise.race &#x3D; function(promises) &#123;</span><br><span class=\"line\">        return new Promise(function(resolve, reject) &#123;</span><br><span class=\"line\">            for (var i &#x3D; 0; i &lt; promises.length; i++) &#123;</span><br><span class=\"line\">                Promise.resolve(promises[i]).then(function(value) &#123;</span><br><span class=\"line\">                    return resolve(value)</span><br><span class=\"line\">                &#125;, function(reason) &#123;</span><br><span class=\"line\">                    return reject(reason)</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Promise.resolve &#x3D; function(value) &#123;</span><br><span class=\"line\">        var promise &#x3D; new Promise(function(resolve, reject) &#123;</span><br><span class=\"line\">            resolvePromise(promise, value, resolve, reject)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        return promise</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Promise.reject &#x3D; function(reason) &#123;</span><br><span class=\"line\">        return new Promise(function(resolve, reject) &#123;</span><br><span class=\"line\">            reject(reason)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Promise.fcall &#x3D; function(fn)&#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 虽然fn可以接收到上一层then里传来的参数，但是其实是undefined，所以跟没有是一样的，因为resolve没参数啊</span><br><span class=\"line\">        return Promise.resolve().then(fn)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Promise.done &#x3D; Promise.stop &#x3D; function()&#123;</span><br><span class=\"line\">        return new Promise(function()&#123;&#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Promise.deferred &#x3D; Promise.defer &#x3D; function() &#123;</span><br><span class=\"line\">        var dfd &#x3D; &#123;&#125;</span><br><span class=\"line\">        dfd.promise &#x3D; new Promise(function(resolve, reject) &#123;</span><br><span class=\"line\">            dfd.resolve &#x3D; resolve</span><br><span class=\"line\">            dfd.reject &#x3D; reject</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        return dfd</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    try &#123; &#x2F;&#x2F; CommonJS compliance</span><br><span class=\"line\">        module.exports &#x3D; Promise</span><br><span class=\"line\">    &#125; catch(e) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return Promise</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://www.jianshu.com/p/43de678e918a\" target=\"_blank\" rel=\"noopener\">Promise实现原理</a><br><a href=\"https://www.jianshu.com/p/b4f0425b22a1\" target=\"_blank\" rel=\"noopener\">Promise原理与实现</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"什么是Promise\"><a href=\"#什么是Promise\" class=\"headerlink\" title=\"什么是Promise\"></a>什么是Promise</h3><p>Promise 对象用于表示一个异步操作的最终完成 (或失败), 及其结果值.</p>\n<h3 id=\"Promise规范\"><a href=\"#Promise规范\" class=\"headerlink\" title=\"Promise规范\"></a>Promise规范</h3><ul>\n<li>ES6中使用<a href=\"https://juejin.im/post/5c4b0423e51d4525211c0fbc\" target=\"_blank\" rel=\"noopener\">Promise/A+</a>规范。</li>\n<li>Promise的标准理解<ul>\n<li>promise对象有三种状态==pending==、==fulfilled==和==rejected==。</li>\n<li>promise对象的状态必须有并且只有上述三种当中的一种。</li>\n<li>状态的改变只能是从pending到fulfilled或者pending到rejected。</li>\n<li>then方法返回一个promise。then 方法可以被同一个 promise 调用多次。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promise.then(onFulfilled, onRejected)</span><br></pre></td></tr></table></figure>\n<h3 id=\"Promise实现\"><a href=\"#Promise实现\" class=\"headerlink\" title=\"Promise实现\"></a>Promise实现</h3></li>\n</ul>\n</li>\n</ul>\n<ol>\n<li>构造函数<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Promise(resolver) &#123;&#125;</span><br></pre></td></tr></table></figure></li>\n<li>原型链<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Promise.prototype.then &#x3D; function() &#123;&#125;</span><br><span class=\"line\">Promise.prototype.catch &#x3D; function() &#123;&#125;</span><br></pre></td></tr></table></figure></li>\n<li>静态方法<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Promise.resolve &#x3D; function() &#123;&#125;</span><br><span class=\"line\">Promise.reject &#x3D; function() &#123;&#125;</span><br><span class=\"line\">Promise.all &#x3D; function() &#123;&#125;</span><br><span class=\"line\">Promise.race &#x3D; function() &#123;&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Promise基本结构\"><a href=\"#Promise基本结构\" class=\"headerlink\" title=\"Promise基本结构\"></a>Promise基本结构</h3></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let promise&#x3D;new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class=\"line\">  setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">    resolve(&#39;FULFILLED&#39;)</span><br><span class=\"line\">  &#125;, 1000)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">promise.then(a&#x3D;&gt; alert(a));</span><br><span class=\"line\">promise.then(a &#x3D;&gt; alert(a+1));</span><br></pre></td></tr></table></figure>\n<h3 id=\"Promise构造函数\"><a href=\"#Promise构造函数\" class=\"headerlink\" title=\"Promise构造函数\"></a>Promise构造函数</h3><p>构造函数用法总结：</p>\n<ol>\n<li>构造函数接收一个==executor==立即执行函数</li>\n<li>==executor==立即执行函数接收一个==resolve==函数</li>\n<li>==promise==对象的==then==方法绑定状态变为==fulfilled==时的回调</li>\n<li>==resolve==函数被调用时会触发==then==方法中的回调<h4 id=\"构造函数的初步实现\"><a href=\"#构造函数的初步实现\" class=\"headerlink\" title=\"构造函数的初步实现\"></a>构造函数的初步实现</h4></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Promise(executor) &#123;</span><br><span class=\"line\">    var self &#x3D; this;</span><br><span class=\"line\">    self.status &#x3D; &#39;pending&#39;; &#x2F;&#x2F;promise当前的状态</span><br><span class=\"line\">    self.data &#x3D; undefined; &#x2F;&#x2F;promise的值</span><br><span class=\"line\">    self.onResolvedCallback &#x3D; [];</span><br><span class=\"line\">    &#x2F;&#x2F;promise状态变为resolve时的回调函数集，可能有多个</span><br><span class=\"line\">   function resolve(value) &#123;</span><br><span class=\"line\">       if(self.status &#x3D;&#x3D;&#x3D; &#39;pending&#39;) &#123;</span><br><span class=\"line\">           self.status &#x3D; &#39;resolved&#39;;</span><br><span class=\"line\">           self.data &#x3D; value;</span><br><span class=\"line\">           for(var i &#x3D; 0; i &lt; self.onResolvedCallback.length; i++) &#123;</span><br><span class=\"line\">               self.onResolvedCallback[i](value);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   executor(resolve);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Promise.prototype.then &#x3D; function (resolve) &#123;</span><br><span class=\"line\">    this.onResolvedCallback.push(resolve);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"添加reject结果\"><a href=\"#添加reject结果\" class=\"headerlink\" title=\"添加reject结果\"></a>添加reject结果</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Promise(executor) &#123;</span><br><span class=\"line\">    var self &#x3D; this;</span><br><span class=\"line\">    self.status &#x3D; &#39;pending&#39;; &#x2F;&#x2F;promise当前的状态</span><br><span class=\"line\">    self.data &#x3D; undefined; &#x2F;&#x2F;promise的值</span><br><span class=\"line\">    self.onResolvedCallback &#x3D; [];</span><br><span class=\"line\">    &#x2F;&#x2F;promise状态变为resolve时的回调函数集，可能有多个</span><br><span class=\"line\">    self.onRejectedCallback &#x3D; [];</span><br><span class=\"line\">    &#x2F;&#x2F;promise状态变为reject时的回调函数集，可能有多个</span><br><span class=\"line\">   function resolve(value) &#123;</span><br><span class=\"line\">       if(self.status &#x3D;&#x3D;&#x3D; &#39;pending&#39;) &#123;</span><br><span class=\"line\">           self.status &#x3D; &#39;resolved&#39;;</span><br><span class=\"line\">           self.data &#x3D; value;</span><br><span class=\"line\">           for(var i &#x3D; 0; i &lt; self.onResolvedCallback.length; i++) &#123;</span><br><span class=\"line\">               self.onResolvedCallback[i](value);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   function reject(reason) &#123;</span><br><span class=\"line\">        if(self.status &#x3D;&#x3D;&#x3D; &#39;pending&#39;) &#123;</span><br><span class=\"line\">            self.status &#x3D; &#39;rejected&#39;;</span><br><span class=\"line\">            self.data &#x3D; reason;</span><br><span class=\"line\">            for(var i &#x3D; 0; i &lt; self.onRejectedCallback.length; i++) &#123;</span><br><span class=\"line\">                self.onRejectedCallback[i](reason);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   try &#123;</span><br><span class=\"line\">       executor(resolve, reject);</span><br><span class=\"line\">   &#125; catch (e)&#123;</span><br><span class=\"line\">       reject(e);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Promise.prototype.then &#x3D; function (onResolve, onReject) &#123;</span><br><span class=\"line\">    this.onResolvedCallback.push(onResolve);</span><br><span class=\"line\">    this.onRejectedCallback.push(onReject);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>小结：</p>\n<ol>\n<li>==executor==函数作为实参在创建==Promise==对象时传入==Promise==构造函数。</li>\n<li>==resolve==和==reject==函数作为实参传入==executor==函数。</li>\n<li>==value==作为实参传入==resolve==和==reject==函数。<h4 id=\"如果executor自执行函数中的resolve函数立即触发时，发现Promise失效\"><a href=\"#如果executor自执行函数中的resolve函数立即触发时，发现Promise失效\" class=\"headerlink\" title=\"如果executor自执行函数中的resolve函数立即触发时，发现Promise失效\"></a>如果executor自执行函数中的resolve函数立即触发时，发现Promise失效</h4></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const promise &#x3D; new Promise((resolve) &#x3D;&gt; &#123;</span><br><span class=\"line\">    resolve(1);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">promise.then((a) &#x3D;&gt; alert(a));</span><br></pre></td></tr></table></figure>\n<p>将promise的resolve和reject异步执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function resolve(value) &#123;</span><br><span class=\"line\">    setTimeout(function () &#123;</span><br><span class=\"line\">        if(self.status &#x3D;&#x3D;&#x3D; &#39;pending&#39;) &#123;</span><br><span class=\"line\">            self.status &#x3D; &#39;resolved&#39;;</span><br><span class=\"line\">            self.data &#x3D; value;</span><br><span class=\"line\">            for(var i &#x3D; 0; i &lt; self.onResolvedCallback.length; i++) &#123;</span><br><span class=\"line\">                self.onResolvedCallback[i](value);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function reject(reason) &#123;</span><br><span class=\"line\">    setTimeout(function () &#123;</span><br><span class=\"line\">        if(self.status &#x3D;&#x3D;&#x3D; &#39;pending&#39;) &#123;</span><br><span class=\"line\">            self.status &#x3D; &#39;rejected&#39;;</span><br><span class=\"line\">            self.data &#x3D; reason;</span><br><span class=\"line\">            for(var i &#x3D; 0; i &lt; self.onRejectedCallback.length; i++) &#123;</span><br><span class=\"line\">                self.onRejectedCallback[i](reason);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"then方法\"><a href=\"#then方法\" class=\"headerlink\" title=\"then方法\"></a>then方法</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promise.then(onFulfilled, onRejected)</span><br></pre></td></tr></table></figure>\n<ol>\n<li>==then==方法返回一个新的==promise==对象。</li>\n<li>==executor==自执行函数中的==resolve==参数调用时执行==then==方法的第一个回调函数==onResolved==。</li>\n<li>==executor==自执行函数中的==reject==参数调用时执行==then==方法的第二个回调函数==onRejected==。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Promise.prototype.then &#x3D; function (onResolved, onRejected) &#123;</span><br><span class=\"line\">    var self &#x3D; this;</span><br><span class=\"line\">    var promise2;</span><br><span class=\"line\">    onResolved &#x3D; typeof onResolved &#x3D;&#x3D;&#x3D; &#39;function&#39; </span><br><span class=\"line\">                ? onResolved </span><br><span class=\"line\">                : function (value) &#123;return value&#125;;</span><br><span class=\"line\">    onRejected &#x3D; typeof onRejected &#x3D;&#x3D;&#x3D; &#39;function&#39; </span><br><span class=\"line\">                ? onRejected </span><br><span class=\"line\">                : function (reason) &#123;throw reason&#125;;</span><br><span class=\"line\">    &#x2F;&#x2F;promise对象当前状态为resolved</span><br><span class=\"line\">    if(self.status &#x3D;&#x3D;&#x3D; &#39;resolved&#39;) &#123;</span><br><span class=\"line\">        return promise2 &#x3D; new Promise(function (resolve, reject) &#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                &#x2F;&#x2F;调用onResolve回调函数</span><br><span class=\"line\">                var x &#x3D; onResolved(self.data);</span><br><span class=\"line\">                &#x2F;&#x2F;如果onResolve回调函数返回值为一个promise对象</span><br><span class=\"line\">                if(x instanceof  Promise) &#123;</span><br><span class=\"line\">                    &#x2F;&#x2F;将它的结果作为promise2的结果</span><br><span class=\"line\">                    x.then(resolve, reject);</span><br><span class=\"line\">                &#125; else &#123;</span><br><span class=\"line\">                    resolve(x);&#x2F;&#x2F;执行promise2的onResolve回调</span><br><span class=\"line\">           &#125;        </span><br><span class=\"line\">            &#125; catch (e) &#123;</span><br><span class=\"line\">                reject(e); &#x2F;&#x2F;执行promise2的onReject回调</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#x2F;&#x2F;promise对象当前状态为rejected</span><br><span class=\"line\">    if(self.status &#x3D;&#x3D;&#x3D; &#39;rejected&#39;) &#123;</span><br><span class=\"line\">        return promise2 &#x3D; new Promise(function (resolve, reject) &#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                var x &#x3D; onRejected(self.data);</span><br><span class=\"line\">                if (x instanceof Promise) &#123;</span><br><span class=\"line\">                    x.then(resolve, reject)</span><br><span class=\"line\">                &#125; else &#123;</span><br><span class=\"line\">                    resolve(x)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; catch (e) &#123;</span><br><span class=\"line\">                reject(e)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#x2F;&#x2F;promise对象当前状态为pending</span><br><span class=\"line\">    &#x2F;&#x2F;此时并不能确定调用onResolved还是onRejected，需要等当前Promise状态确定。</span><br><span class=\"line\">    &#x2F;&#x2F;所以需要将callBack放入promise1的回调数组中</span><br><span class=\"line\">    if(self.status &#x3D;&#x3D;&#x3D; &#39;pending&#39;) &#123;</span><br><span class=\"line\">        return promise2 &#x3D; new Promise(function (resolve, reject) &#123;</span><br><span class=\"line\">            self.onResolvedCallback.push(function (value) &#123;</span><br><span class=\"line\">                try &#123;</span><br><span class=\"line\">                    var x &#x3D; onResolved(self.data);</span><br><span class=\"line\">                    if (x instanceof Promise) &#123;</span><br><span class=\"line\">                        x.then(resolve, reject);</span><br><span class=\"line\">                    &#125; else &#123;</span><br><span class=\"line\">                        resolve(x);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">                &#125; catch (e) &#123;</span><br><span class=\"line\">                    reject(e);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            self.onRejectedCallback.push(function(reason) &#123;</span><br><span class=\"line\">                try &#123;</span><br><span class=\"line\">                    var x &#x3D; onRejected(self.data);</span><br><span class=\"line\">                    if (x instanceof Promise) &#123;</span><br><span class=\"line\">                        x.then(resolve, reject)</span><br><span class=\"line\">                    &#125; else &#123;</span><br><span class=\"line\">                        resolve(x);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; catch (e) &#123;</span><br><span class=\"line\">                    reject(e)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var Promise &#x3D; (function() &#123;</span><br><span class=\"line\">    function Promise(resolver) &#123;</span><br><span class=\"line\">        if (typeof resolver !&#x3D;&#x3D; &#39;function&#39;) &#123; &#x2F;&#x2F;resolver必须是函数</span><br><span class=\"line\">            throw new TypeError(&#39;Promise resolver &#39; + resolver + &#39; is not a function&#39;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (!(this instanceof Promise)) return new Promise(resolver)</span><br><span class=\"line\"></span><br><span class=\"line\">        var self &#x3D; this &#x2F;&#x2F;保存this</span><br><span class=\"line\">        self.callbacks &#x3D; [] &#x2F;&#x2F;保存onResolve和onReject函数集合</span><br><span class=\"line\">        self.status &#x3D; &#39;pending&#39; &#x2F;&#x2F;当前状态</span><br><span class=\"line\"></span><br><span class=\"line\">        function resolve(value) &#123;</span><br><span class=\"line\">            setTimeout(function() &#123; &#x2F;&#x2F;异步调用</span><br><span class=\"line\">                if (self.status !&#x3D;&#x3D; &#39;pending&#39;) &#123;</span><br><span class=\"line\">                    return</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                self.status &#x3D; &#39;resolved&#39; &#x2F;&#x2F;修改状态</span><br><span class=\"line\">                self.data &#x3D; value</span><br><span class=\"line\"></span><br><span class=\"line\">                for (var i &#x3D; 0; i &lt; self.callbacks.length; i++) &#123;</span><br><span class=\"line\">                    self.callbacks[i].onResolved(value)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        function reject(reason) &#123;</span><br><span class=\"line\">            setTimeout(function()&#123; &#x2F;&#x2F;异步调用</span><br><span class=\"line\">                if (self.status !&#x3D;&#x3D; &#39;pending&#39;) &#123;</span><br><span class=\"line\">                    return</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                self.status &#x3D; &#39;rejected&#39; &#x2F;&#x2F;修改状态</span><br><span class=\"line\">                self.data &#x3D; reason</span><br><span class=\"line\"></span><br><span class=\"line\">                for (var i &#x3D; 0; i &lt; self.callbacks.length; i++) &#123;</span><br><span class=\"line\">                    self.callbacks[i].onRejected(reason)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        try&#123;</span><br><span class=\"line\">            resolver(resolve, reject) &#x2F;&#x2F;执行resolver函数</span><br><span class=\"line\">        &#125; catch(e) &#123;</span><br><span class=\"line\">            reject(e)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function resolvePromise(promise, x, resolve, reject) &#123;</span><br><span class=\"line\">        var then</span><br><span class=\"line\">        var thenCalledOrThrow &#x3D; false</span><br><span class=\"line\"></span><br><span class=\"line\">        if (promise &#x3D;&#x3D;&#x3D; x) &#123;</span><br><span class=\"line\">            return reject(new TypeError(&#39;Chaining cycle detected for promise!&#39;))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        if ((x !&#x3D;&#x3D; null) &amp;&amp; ((typeof x &#x3D;&#x3D;&#x3D; &#39;object&#39;) || (typeof x &#x3D;&#x3D;&#x3D; &#39;function&#39;))) &#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                then &#x3D; x.then</span><br><span class=\"line\">                if (typeof then &#x3D;&#x3D;&#x3D; &#39;function&#39;) &#123;</span><br><span class=\"line\">                    then.call(x, function rs(y) &#123;</span><br><span class=\"line\">                        if (thenCalledOrThrow) return</span><br><span class=\"line\">                        thenCalledOrThrow &#x3D; true</span><br><span class=\"line\">                        return resolvePromise(promise, y, resolve, reject)</span><br><span class=\"line\">                    &#125;, function rj(r) &#123;</span><br><span class=\"line\">                        if (thenCalledOrThrow) return</span><br><span class=\"line\">                        thenCalledOrThrow &#x3D; true</span><br><span class=\"line\">                        return reject(r)</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                &#125; else &#123;</span><br><span class=\"line\">                    return resolve(x)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; catch(e) &#123;</span><br><span class=\"line\">                if (thenCalledOrThrow) return</span><br><span class=\"line\">                thenCalledOrThrow &#x3D; true</span><br><span class=\"line\">                return reject(e)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            return resolve(x)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Promise.prototype.then &#x3D; function(onResolved, onRejected) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;健壮性处理，处理点击穿透</span><br><span class=\"line\">        onResolved &#x3D; typeof onResolved &#x3D;&#x3D;&#x3D; &#39;function&#39; ? onResolved : function(v)&#123;return v&#125;</span><br><span class=\"line\">        onRejected &#x3D; typeof onRejected &#x3D;&#x3D;&#x3D; &#39;function&#39; ? onRejected : function(r)&#123;throw r&#125;</span><br><span class=\"line\">        var self &#x3D; this</span><br><span class=\"line\">        var promise2</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;promise状态为resolved</span><br><span class=\"line\">        if (self.status &#x3D;&#x3D;&#x3D; &#39;resolved&#39;) &#123;</span><br><span class=\"line\">            return promise2 &#x3D; new Promise(function(resolve, reject) &#123;</span><br><span class=\"line\">                setTimeout(function() &#123;</span><br><span class=\"line\">                    try &#123;</span><br><span class=\"line\">                        &#x2F;&#x2F;调用then方法的onResolved回调</span><br><span class=\"line\">                        var x &#x3D; onResolved(self.data)</span><br><span class=\"line\">                        &#x2F;&#x2F;根据x的值修改promise2的状态</span><br><span class=\"line\">                        resolvePromise(promise2, x, resolve, reject)</span><br><span class=\"line\">                    &#125; catch(e) &#123;</span><br><span class=\"line\">                        &#x2F;&#x2F;promise2状态变为rejected</span><br><span class=\"line\">                        return reject(e)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;promise状态为rejected</span><br><span class=\"line\">        if (self.status &#x3D;&#x3D;&#x3D; &#39;rejected&#39;) &#123;</span><br><span class=\"line\">            return promise2 &#x3D; new Promise(function(resolve, reject) &#123;</span><br><span class=\"line\">                setTimeout(function() &#123;</span><br><span class=\"line\">                    try &#123;</span><br><span class=\"line\">                        &#x2F;&#x2F;调用then方法的onReject回调</span><br><span class=\"line\">                        var x &#x3D; onRejected(self.data)</span><br><span class=\"line\">                        &#x2F;&#x2F;根据x的值修改promise2的状态</span><br><span class=\"line\">                        resolvePromise(promise2, x, resolve, reject)</span><br><span class=\"line\">                    &#125; catch(e) &#123;</span><br><span class=\"line\">                        &#x2F;&#x2F;promise2状态变为rejected</span><br><span class=\"line\">                        return reject(e)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;promise状态为pending</span><br><span class=\"line\">        &#x2F;&#x2F;需要等待promise的状态改变</span><br><span class=\"line\">        if (self.status &#x3D;&#x3D;&#x3D; &#39;pending&#39;) &#123;</span><br><span class=\"line\">            return promise2 &#x3D; new Promise(function(resolve, reject) &#123;</span><br><span class=\"line\">                self.callbacks.push(&#123;</span><br><span class=\"line\">                    onResolved: function(value) &#123;</span><br><span class=\"line\">                        try &#123;</span><br><span class=\"line\">                            &#x2F;&#x2F;调用then方法的onResolved回调</span><br><span class=\"line\">                            var x &#x3D; onResolved(value)</span><br><span class=\"line\">                            &#x2F;&#x2F;根据x的值修改promise2的状态</span><br><span class=\"line\">                            resolvePromise(promise2, x, resolve, reject)</span><br><span class=\"line\">                        &#125; catch(e) &#123;</span><br><span class=\"line\">                            &#x2F;&#x2F;promise2状态变为rejected</span><br><span class=\"line\">                            return reject(e)</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    onRejected: function(reason) &#123;</span><br><span class=\"line\">                        try &#123;</span><br><span class=\"line\">                            &#x2F;&#x2F;调用then方法的onResolved回调</span><br><span class=\"line\">                            var x &#x3D; onRejected(reason)</span><br><span class=\"line\">                            &#x2F;&#x2F;根据x的值修改promise2的状态</span><br><span class=\"line\">                            resolvePromise(promise2, x, resolve, reject)</span><br><span class=\"line\">                        &#125; catch(e) &#123;</span><br><span class=\"line\">                            &#x2F;&#x2F;promise2状态变为rejected</span><br><span class=\"line\">                            return reject(e)</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;获取当前Promise传递的值</span><br><span class=\"line\">    Promise.prototype.valueOf &#x3D; function() &#123;</span><br><span class=\"line\">        return this.data</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;由then方法实现catch方法</span><br><span class=\"line\">    Promise.prototype.catch &#x3D; function(onRejected) &#123;</span><br><span class=\"line\">        return this.then(null, onRejected)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;finally方法</span><br><span class=\"line\">    Promise.prototype.finally &#x3D; function(fn) &#123;</span><br><span class=\"line\">        return this.then(function(v)&#123;</span><br><span class=\"line\">            setTimeout(fn)</span><br><span class=\"line\">            return v</span><br><span class=\"line\">        &#125;, function(r)&#123;</span><br><span class=\"line\">            setTimeout(fn)</span><br><span class=\"line\">            throw r</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Promise.prototype.spread &#x3D; function(fn, onRejected) &#123;</span><br><span class=\"line\">        return this.then(function(values) &#123;</span><br><span class=\"line\">            return fn.apply(null, values)</span><br><span class=\"line\">        &#125;, onRejected)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Promise.prototype.inject &#x3D; function(fn, onRejected) &#123;</span><br><span class=\"line\">        return this.then(function(v) &#123;</span><br><span class=\"line\">            return fn.apply(null, fn.toString().match(&#x2F;\\((.*?)\\)&#x2F;)[1].split(&#39;,&#39;).map(function(key)&#123;</span><br><span class=\"line\">                return v[key];</span><br><span class=\"line\">            &#125;))</span><br><span class=\"line\">        &#125;, onRejected)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Promise.prototype.delay &#x3D; function(duration) &#123;</span><br><span class=\"line\">        return this.then(function(value) &#123;</span><br><span class=\"line\">            return new Promise(function(resolve, reject) &#123;</span><br><span class=\"line\">                setTimeout(function() &#123;</span><br><span class=\"line\">                    resolve(value)</span><br><span class=\"line\">                &#125;, duration)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;, function(reason) &#123;</span><br><span class=\"line\">            return new Promise(function(resolve, reject) &#123;</span><br><span class=\"line\">                setTimeout(function() &#123;</span><br><span class=\"line\">                    reject(reason)</span><br><span class=\"line\">                &#125;, duration)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Promise.all &#x3D; function(promises) &#123;</span><br><span class=\"line\">        return new Promise(function(resolve, reject) &#123;</span><br><span class=\"line\">            var resolvedCounter &#x3D; 0</span><br><span class=\"line\">            var promiseNum &#x3D; promises.length</span><br><span class=\"line\">            var resolvedValues &#x3D; new Array(promiseNum)</span><br><span class=\"line\">            for (var i &#x3D; 0; i &lt; promiseNum; i++) &#123;</span><br><span class=\"line\">                (function(i) &#123;</span><br><span class=\"line\">                    Promise.resolve(promises[i]).then(function(value) &#123;</span><br><span class=\"line\">                        resolvedCounter++</span><br><span class=\"line\">                        resolvedValues[i] &#x3D; value</span><br><span class=\"line\">                        if (resolvedCounter &#x3D;&#x3D; promiseNum) &#123;</span><br><span class=\"line\">                            return resolve(resolvedValues)</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;, function(reason) &#123;</span><br><span class=\"line\">                        return reject(reason)</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                &#125;)(i)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Promise.race &#x3D; function(promises) &#123;</span><br><span class=\"line\">        return new Promise(function(resolve, reject) &#123;</span><br><span class=\"line\">            for (var i &#x3D; 0; i &lt; promises.length; i++) &#123;</span><br><span class=\"line\">                Promise.resolve(promises[i]).then(function(value) &#123;</span><br><span class=\"line\">                    return resolve(value)</span><br><span class=\"line\">                &#125;, function(reason) &#123;</span><br><span class=\"line\">                    return reject(reason)</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Promise.resolve &#x3D; function(value) &#123;</span><br><span class=\"line\">        var promise &#x3D; new Promise(function(resolve, reject) &#123;</span><br><span class=\"line\">            resolvePromise(promise, value, resolve, reject)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        return promise</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Promise.reject &#x3D; function(reason) &#123;</span><br><span class=\"line\">        return new Promise(function(resolve, reject) &#123;</span><br><span class=\"line\">            reject(reason)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Promise.fcall &#x3D; function(fn)&#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 虽然fn可以接收到上一层then里传来的参数，但是其实是undefined，所以跟没有是一样的，因为resolve没参数啊</span><br><span class=\"line\">        return Promise.resolve().then(fn)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Promise.done &#x3D; Promise.stop &#x3D; function()&#123;</span><br><span class=\"line\">        return new Promise(function()&#123;&#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Promise.deferred &#x3D; Promise.defer &#x3D; function() &#123;</span><br><span class=\"line\">        var dfd &#x3D; &#123;&#125;</span><br><span class=\"line\">        dfd.promise &#x3D; new Promise(function(resolve, reject) &#123;</span><br><span class=\"line\">            dfd.resolve &#x3D; resolve</span><br><span class=\"line\">            dfd.reject &#x3D; reject</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        return dfd</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    try &#123; &#x2F;&#x2F; CommonJS compliance</span><br><span class=\"line\">        module.exports &#x3D; Promise</span><br><span class=\"line\">    &#125; catch(e) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return Promise</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://www.jianshu.com/p/43de678e918a\" target=\"_blank\" rel=\"noopener\">Promise实现原理</a><br><a href=\"https://www.jianshu.com/p/b4f0425b22a1\" target=\"_blank\" rel=\"noopener\">Promise原理与实现</a></p>\n"},{"layout":"[post]","title":"初次使用hexo","date":"2019-01-14T01:57:01.000Z","_content":"\n偶然间发现了hexo这个博客搭建工具，于是决定将使用多年的云笔记的内容搬迁至这个博客上，分享我的搬迁经历以及踩过的坑吧~。\n<!-- more -->\n\n## 我们开始吧\n\n### 新建仓库\n\n在github新建仓库，如果想要部署在github上，要仓库名为 ==<user-name>.github.io== 而不是user-name ，其中 ==<user-name>== 是你 ==github== 的昵称，要是问为什么，都是眼泪的教训。\n### 安装hexo\n\n```\nnpm install -g hexo-cli\n```\n或者\n```\nnpm install hexo\n```\n### 初始化项目\n初始化命令\n```\nhexo init\n```\n运行\n```\nhexo server\n```\n大功告成，访问 ==localhost:4000== 我们就能看到建的博客的效果了！\n### 将Hexo部署到GitHub Pages上\n1. 将[Travis CI](https://github.com/marketplace/travis-ci) 添加到你的 GitHub 账户中。\n2. 前往 GitHub 的 [Applications settings](https://github.com/settings/installations)，配置 Travis CI 权限，使其能够访问你的 repository。\n3. 你应该会被重定向到 Travis CI 的页面。如果没有，请 [手动前往](https://travis-ci.com/)。\n4. 在浏览器新建一个标签页，前往 GitHub [新建 Personal Access Token](https://github.com/settings/tokens) ，只勾选 repo 的权限并生成一个新的 Token。Token 生成后请复制并保存好。\n5. 回到 Travis CI，前往你的 repository 的设置页面，在 **Environment Variables** 下新建一个环境变量，**Name** 为 GH_TOKEN，**Value** 为刚才你在 GitHub 生成的 Token。确保 **DISPLAY VALUE IN BUILD LOG** 保持 **不被勾选** 避免你的 Token 泄漏。点击 Add 保存。\n6. 在你的 Hexo 站点文件夹中新建一个 ==.travis.yml== 文件：\n\n```\nsudo: false\nlanguage: node_js\nnode_js:\n  - 10 # use nodejs v10 LTS\ncache: npm\nbranches:\n  only:\n    - master # build master branch only\nscript:\n  - hexo generate # generate static files\ndeploy:\n  provider: pages\n  skip-cleanup: true\n  github-token: $GH_TOKEN\n  keep-history: true\n  on:\n    branch: master\n  local-dir: public\n```\n\n7. 将.travis.yml 推送到 repository 中。Travis CI 应该会自动开始运行，并将生成的文件推送到同一 repository 下的 gh-pages 分支下\n\n8. 在GitHub中前往你的repository 的设置页面，修改 GitHub Pages 的部署分支为 gh-pages。\n9.  完成以上步骤，我们就能在<user-name>.github.io上看到自己建设的博客了。\n### 其他配置项\n请参考[hexo文档](https://hexo.io/zh-cn/docs)。\n\n\n","source":"_posts/初尝hexo.md","raw":"---\nlayout: '[post]'\ntitle: 初次使用hexo\ndate: 2019-01-14 09:57:01\ntags: hexo\n---\n\n偶然间发现了hexo这个博客搭建工具，于是决定将使用多年的云笔记的内容搬迁至这个博客上，分享我的搬迁经历以及踩过的坑吧~。\n<!-- more -->\n\n## 我们开始吧\n\n### 新建仓库\n\n在github新建仓库，如果想要部署在github上，要仓库名为 ==<user-name>.github.io== 而不是user-name ，其中 ==<user-name>== 是你 ==github== 的昵称，要是问为什么，都是眼泪的教训。\n### 安装hexo\n\n```\nnpm install -g hexo-cli\n```\n或者\n```\nnpm install hexo\n```\n### 初始化项目\n初始化命令\n```\nhexo init\n```\n运行\n```\nhexo server\n```\n大功告成，访问 ==localhost:4000== 我们就能看到建的博客的效果了！\n### 将Hexo部署到GitHub Pages上\n1. 将[Travis CI](https://github.com/marketplace/travis-ci) 添加到你的 GitHub 账户中。\n2. 前往 GitHub 的 [Applications settings](https://github.com/settings/installations)，配置 Travis CI 权限，使其能够访问你的 repository。\n3. 你应该会被重定向到 Travis CI 的页面。如果没有，请 [手动前往](https://travis-ci.com/)。\n4. 在浏览器新建一个标签页，前往 GitHub [新建 Personal Access Token](https://github.com/settings/tokens) ，只勾选 repo 的权限并生成一个新的 Token。Token 生成后请复制并保存好。\n5. 回到 Travis CI，前往你的 repository 的设置页面，在 **Environment Variables** 下新建一个环境变量，**Name** 为 GH_TOKEN，**Value** 为刚才你在 GitHub 生成的 Token。确保 **DISPLAY VALUE IN BUILD LOG** 保持 **不被勾选** 避免你的 Token 泄漏。点击 Add 保存。\n6. 在你的 Hexo 站点文件夹中新建一个 ==.travis.yml== 文件：\n\n```\nsudo: false\nlanguage: node_js\nnode_js:\n  - 10 # use nodejs v10 LTS\ncache: npm\nbranches:\n  only:\n    - master # build master branch only\nscript:\n  - hexo generate # generate static files\ndeploy:\n  provider: pages\n  skip-cleanup: true\n  github-token: $GH_TOKEN\n  keep-history: true\n  on:\n    branch: master\n  local-dir: public\n```\n\n7. 将.travis.yml 推送到 repository 中。Travis CI 应该会自动开始运行，并将生成的文件推送到同一 repository 下的 gh-pages 分支下\n\n8. 在GitHub中前往你的repository 的设置页面，修改 GitHub Pages 的部署分支为 gh-pages。\n9.  完成以上步骤，我们就能在<user-name>.github.io上看到自己建设的博客了。\n### 其他配置项\n请参考[hexo文档](https://hexo.io/zh-cn/docs)。\n\n\n","slug":"初尝hexo","published":1,"updated":"2020-01-14T03:32:35.000Z","comments":1,"photos":[],"link":"","_id":"ck5dph2n60003fh2p8tsv2rqb","content":"<p>偶然间发现了hexo这个博客搭建工具，于是决定将使用多年的云笔记的内容搬迁至这个博客上，分享我的搬迁经历以及踩过的坑吧~。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"我们开始吧\"><a href=\"#我们开始吧\" class=\"headerlink\" title=\"我们开始吧\"></a>我们开始吧</h2><h3 id=\"新建仓库\"><a href=\"#新建仓库\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3><p>在github新建仓库，如果想要部署在github上，要仓库名为 ==<user-name>.github.io== 而不是user-name ，其中 ==<user-name>== 是你 ==github== 的昵称，要是问为什么，都是眼泪的教训。</p>\n<h3 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo</span><br></pre></td></tr></table></figure>\n<h3 id=\"初始化项目\"><a href=\"#初始化项目\" class=\"headerlink\" title=\"初始化项目\"></a>初始化项目</h3><p>初始化命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init</span><br></pre></td></tr></table></figure>\n<p>运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure>\n<p>大功告成，访问 ==localhost:4000== 我们就能看到建的博客的效果了！</p>\n<h3 id=\"将Hexo部署到GitHub-Pages上\"><a href=\"#将Hexo部署到GitHub-Pages上\" class=\"headerlink\" title=\"将Hexo部署到GitHub Pages上\"></a>将Hexo部署到GitHub Pages上</h3><ol>\n<li>将<a href=\"https://github.com/marketplace/travis-ci\" target=\"_blank\" rel=\"noopener\">Travis CI</a> 添加到你的 GitHub 账户中。</li>\n<li>前往 GitHub 的 <a href=\"https://github.com/settings/installations\" target=\"_blank\" rel=\"noopener\">Applications settings</a>，配置 Travis CI 权限，使其能够访问你的 repository。</li>\n<li>你应该会被重定向到 Travis CI 的页面。如果没有，请 <a href=\"https://travis-ci.com/\" target=\"_blank\" rel=\"noopener\">手动前往</a>。</li>\n<li>在浏览器新建一个标签页，前往 GitHub <a href=\"https://github.com/settings/tokens\" target=\"_blank\" rel=\"noopener\">新建 Personal Access Token</a> ，只勾选 repo 的权限并生成一个新的 Token。Token 生成后请复制并保存好。</li>\n<li>回到 Travis CI，前往你的 repository 的设置页面，在 <strong>Environment Variables</strong> 下新建一个环境变量，<strong>Name</strong> 为 GH_TOKEN，<strong>Value</strong> 为刚才你在 GitHub 生成的 Token。确保 <strong>DISPLAY VALUE IN BUILD LOG</strong> 保持 <strong>不被勾选</strong> 避免你的 Token 泄漏。点击 Add 保存。</li>\n<li>在你的 Hexo 站点文件夹中新建一个 ==.travis.yml== 文件：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo: false</span><br><span class=\"line\">language: node_js</span><br><span class=\"line\">node_js:</span><br><span class=\"line\">  - 10 # use nodejs v10 LTS</span><br><span class=\"line\">cache: npm</span><br><span class=\"line\">branches:</span><br><span class=\"line\">  only:</span><br><span class=\"line\">    - master # build master branch only</span><br><span class=\"line\">script:</span><br><span class=\"line\">  - hexo generate # generate static files</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  provider: pages</span><br><span class=\"line\">  skip-cleanup: true</span><br><span class=\"line\">  github-token: $GH_TOKEN</span><br><span class=\"line\">  keep-history: true</span><br><span class=\"line\">  on:</span><br><span class=\"line\">    branch: master</span><br><span class=\"line\">  local-dir: public</span><br></pre></td></tr></table></figure>\n\n<ol start=\"7\">\n<li><p>将.travis.yml 推送到 repository 中。Travis CI 应该会自动开始运行，并将生成的文件推送到同一 repository 下的 gh-pages 分支下</p>\n</li>\n<li><p>在GitHub中前往你的repository 的设置页面，修改 GitHub Pages 的部署分支为 gh-pages。</p>\n</li>\n<li><p>完成以上步骤，我们就能在<user-name>.github.io上看到自己建设的博客了。</p>\n<h3 id=\"其他配置项\"><a href=\"#其他配置项\" class=\"headerlink\" title=\"其他配置项\"></a>其他配置项</h3><p>请参考<a href=\"https://hexo.io/zh-cn/docs\" target=\"_blank\" rel=\"noopener\">hexo文档</a>。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>偶然间发现了hexo这个博客搭建工具，于是决定将使用多年的云笔记的内容搬迁至这个博客上，分享我的搬迁经历以及踩过的坑吧~。</p>","more":"<h2 id=\"我们开始吧\"><a href=\"#我们开始吧\" class=\"headerlink\" title=\"我们开始吧\"></a>我们开始吧</h2><h3 id=\"新建仓库\"><a href=\"#新建仓库\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3><p>在github新建仓库，如果想要部署在github上，要仓库名为 ==<user-name>.github.io== 而不是user-name ，其中 ==<user-name>== 是你 ==github== 的昵称，要是问为什么，都是眼泪的教训。</p>\n<h3 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo</span><br></pre></td></tr></table></figure>\n<h3 id=\"初始化项目\"><a href=\"#初始化项目\" class=\"headerlink\" title=\"初始化项目\"></a>初始化项目</h3><p>初始化命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init</span><br></pre></td></tr></table></figure>\n<p>运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure>\n<p>大功告成，访问 ==localhost:4000== 我们就能看到建的博客的效果了！</p>\n<h3 id=\"将Hexo部署到GitHub-Pages上\"><a href=\"#将Hexo部署到GitHub-Pages上\" class=\"headerlink\" title=\"将Hexo部署到GitHub Pages上\"></a>将Hexo部署到GitHub Pages上</h3><ol>\n<li>将<a href=\"https://github.com/marketplace/travis-ci\" target=\"_blank\" rel=\"noopener\">Travis CI</a> 添加到你的 GitHub 账户中。</li>\n<li>前往 GitHub 的 <a href=\"https://github.com/settings/installations\" target=\"_blank\" rel=\"noopener\">Applications settings</a>，配置 Travis CI 权限，使其能够访问你的 repository。</li>\n<li>你应该会被重定向到 Travis CI 的页面。如果没有，请 <a href=\"https://travis-ci.com/\" target=\"_blank\" rel=\"noopener\">手动前往</a>。</li>\n<li>在浏览器新建一个标签页，前往 GitHub <a href=\"https://github.com/settings/tokens\" target=\"_blank\" rel=\"noopener\">新建 Personal Access Token</a> ，只勾选 repo 的权限并生成一个新的 Token。Token 生成后请复制并保存好。</li>\n<li>回到 Travis CI，前往你的 repository 的设置页面，在 <strong>Environment Variables</strong> 下新建一个环境变量，<strong>Name</strong> 为 GH_TOKEN，<strong>Value</strong> 为刚才你在 GitHub 生成的 Token。确保 <strong>DISPLAY VALUE IN BUILD LOG</strong> 保持 <strong>不被勾选</strong> 避免你的 Token 泄漏。点击 Add 保存。</li>\n<li>在你的 Hexo 站点文件夹中新建一个 ==.travis.yml== 文件：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo: false</span><br><span class=\"line\">language: node_js</span><br><span class=\"line\">node_js:</span><br><span class=\"line\">  - 10 # use nodejs v10 LTS</span><br><span class=\"line\">cache: npm</span><br><span class=\"line\">branches:</span><br><span class=\"line\">  only:</span><br><span class=\"line\">    - master # build master branch only</span><br><span class=\"line\">script:</span><br><span class=\"line\">  - hexo generate # generate static files</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  provider: pages</span><br><span class=\"line\">  skip-cleanup: true</span><br><span class=\"line\">  github-token: $GH_TOKEN</span><br><span class=\"line\">  keep-history: true</span><br><span class=\"line\">  on:</span><br><span class=\"line\">    branch: master</span><br><span class=\"line\">  local-dir: public</span><br></pre></td></tr></table></figure>\n\n<ol start=\"7\">\n<li><p>将.travis.yml 推送到 repository 中。Travis CI 应该会自动开始运行，并将生成的文件推送到同一 repository 下的 gh-pages 分支下</p>\n</li>\n<li><p>在GitHub中前往你的repository 的设置页面，修改 GitHub Pages 的部署分支为 gh-pages。</p>\n</li>\n<li><p>完成以上步骤，我们就能在<user-name>.github.io上看到自己建设的博客了。</p>\n<h3 id=\"其他配置项\"><a href=\"#其他配置项\" class=\"headerlink\" title=\"其他配置项\"></a>其他配置项</h3><p>请参考<a href=\"https://hexo.io/zh-cn/docs\" target=\"_blank\" rel=\"noopener\">hexo文档</a>。</p>\n</li>\n</ol>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ck5dph2mv0001fh2pelpo5zis","tag_id":"ck5dph2nb0004fh2p9s33351z","_id":"ck5dph2ng0006fh2p1jz1alab"},{"post_id":"ck5dph2n60003fh2p8tsv2rqb","tag_id":"ck5dph2nf0005fh2p5h8148rj","_id":"ck5dph2nh0007fh2p2td46yw0"}],"Tag":[{"name":"Promise","_id":"ck5dph2nb0004fh2p9s33351z"},{"name":"hexo","_id":"ck5dph2nf0005fh2p5h8148rj"}]}}