{"meta":{"version":1,"warehouse":"3.0.1"},"models":{"Asset":[{"_id":"themes/archer/source/404.md","path":"404.md","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/algolia_logo.svg","path":"assets/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/example_qr.png","path":"assets/example_qr.png","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/favicon.ico","path":"assets/favicon.ico","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/loading.svg","path":"assets/loading.svg","modified":0,"renderable":1},{"_id":"themes/archer/source/avatar/Misaka.jpg","path":"avatar/Misaka.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/css/mobile.css","path":"css/mobile.css","modified":0,"renderable":1},{"_id":"themes/archer/source/css/style.css","path":"css/style.css","modified":0,"renderable":1},{"_id":"themes/archer/source/font/Source Sans Pro.woff","path":"font/Source Sans Pro.woff","modified":0,"renderable":1},{"_id":"themes/archer/source/font/Source Sans Pro.woff2","path":"font/Source Sans Pro.woff2","modified":0,"renderable":1},{"_id":"themes/archer/source/scripts/search.js","path":"scripts/search.js","modified":0,"renderable":1},{"_id":"themes/archer/source/lib/webfontloader.min.js","path":"lib/webfontloader.min.js","modified":0,"renderable":1},{"_id":"themes/archer/source/scripts/main.js","path":"scripts/main.js","modified":0,"renderable":1},{"_id":"themes/archer/source/scripts/share.js","path":"scripts/share.js","modified":0,"renderable":1},{"_id":"themes/archer/source/avatar/mine.jpeg","path":"avatar/mine.jpeg","modified":0,"renderable":1},{"_id":"themes/archer/source/font/Oswald-Regular.ttf","path":"font/Oswald-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff2","path":"font/SourceCodePro-Regular.ttf.woff2","modified":0,"renderable":1},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff","path":"font/SourceCodePro-Regular.ttf.woff","modified":0,"renderable":1},{"_id":"themes/archer/source/intro/404-bg.jpg","path":"intro/404-bg.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/lib/jquery.min.js","path":"lib/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/archer/source/intro/post-bg.jpg","path":"intro/post-bg.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/intro/about-bg.jpg","path":"intro/about-bg.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/intro/index-bg.jpg","path":"intro/index-bg.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/404.md","hash":"3fb58e3ebd8e0961a3af837ff8e7395ef9092cb4","modified":1578906418000},{"_id":"source/test.js","hash":"19fbd26403e9da287b55fae007f4c37823df4633","modified":1579151978000},{"_id":"themes/archer/.DS_Store","hash":"2c3f2d0cc71171fc8d22b7f9468bdb8cce95eb24","modified":1578964906000},{"_id":"themes/archer/.eslintrc.json","hash":"35eeca97fa5a2d0c6d78ef1257c58f03c42d43df","modified":1553725894000},{"_id":"themes/archer/.gitattributes","hash":"82c1a621642d5b620275ae1ed59845c3f7015a64","modified":1553725894000},{"_id":"themes/archer/.gitignore","hash":"e2d7fa953bade3b94ed1cab25ffcf442c7540433","modified":1553725894000},{"_id":"themes/archer/.prettierignore","hash":"58caf761f07e5df9cdc21f7f19f0670fde41089b","modified":1553725894000},{"_id":"themes/archer/.prettierrc.js","hash":"875b0b95f6eb24a23e4ea83a75709b97897135e0","modified":1553725894000},{"_id":"themes/archer/LICENSE","hash":"0da0c361bf299375739c6b668a44af0f5faf37bb","modified":1553725894000},{"_id":"themes/archer/README.md","hash":"97edb54cb7aecff714f132110ed4ba8215da7136","modified":1553725894000},{"_id":"themes/archer/_config.yml","hash":"d174522f3f24d25673695bad1fec3ead7f9377e9","modified":1579072074000},{"_id":"themes/archer/gulpfile.js","hash":"46dfe693b00ac4dea4d1b1af56f5ced4ee095c10","modified":1553725894000},{"_id":"themes/archer/package.json","hash":"67872d7647b43cc341b0ad9744b4b89819c07834","modified":1579877231000},{"_id":"themes/archer/webpack.config.js","hash":"d20b6350c50e2981484cb9356a3e21a2124bcd72","modified":1553725894000},{"_id":"themes/archer/webpack.prod.js","hash":"48de76cfa6274895801d3afc89ecbf04ee182a1c","modified":1553725894000},{"_id":"source/_posts/meta标签使用总结.md","hash":"a6f056b3da4a3e78dd1fb22a4253dfa3765ba20f","modified":1551485255000},{"_id":"source/_posts/promise原理和实现.md","hash":"06773cf1e5b945b25c2f649178edd95c4f1efcf7","modified":1579877713000},{"_id":"source/_posts/promose-all和promise-race.md","hash":"f810014fb28698f31afa663a5ab808cd9573e5ee","modified":1579877710000},{"_id":"source/_posts/webp在项目中的应用.md","hash":"4e3e36bb8b09e9442da6764a29d6ae85753be3d6","modified":1580722199000},{"_id":"source/_posts/初尝hexo.md","hash":"82fc2da8e88fd595378a3695a3b1803eefb9ce11","modified":1579877886000},{"_id":"source/_posts/前端性能优化——DNS预解析.md","hash":"9c7e670203b672166b7c3c0701e4cc2400148e6d","modified":1580869313000},{"_id":"source/about/index.md","hash":"45e21d80f01cd72b3393602ae556828d2f78e7e9","modified":1578986204000},{"_id":"themes/archer/dev/archer.sh","hash":"4065c4e55462d5ecf016464adea0d1db967ef4b4","modified":1578905288000},{"_id":"themes/archer/docs/README-en.md","hash":"f325565c0bb94501fd046268659c7752709895d1","modified":1578905288000},{"_id":"themes/archer/docs/develop-guide-en.md","hash":"0bb09c3c9d5f56820cb84e3316f60352b731d70c","modified":1578905288000},{"_id":"themes/archer/docs/develop-guide-zh.md","hash":"effc2bc9e0cecfd228b19283337ff29649ea5985","modified":1578905288000},{"_id":"themes/archer/languages/default.yml","hash":"d56b6923c70efdef09cd1f0270d7adc9cc338f6b","modified":1578905288000},{"_id":"themes/archer/languages/en.yml","hash":"ad75d3e5f7f5f0463d3077e1b5a26f40938a1faa","modified":1578905288000},{"_id":"themes/archer/layout/404.ejs","hash":"879641b1b5e49c43f2e096cad281f7d74df05127","modified":1578905288000},{"_id":"themes/archer/layout/about.ejs","hash":"06019d835c0a51fed8aa086d1dfcf368f9921b42","modified":1578905288000},{"_id":"themes/archer/layout/index.ejs","hash":"716ba4a30860e36077dfdfffa02c1cd60301d8a3","modified":1578905288000},{"_id":"themes/archer/layout/layout.ejs","hash":"08ebd10c1b2bfc11be8f5115a836a98e6c6ba13c","modified":1578905288000},{"_id":"themes/archer/layout/post.ejs","hash":"b61156aff41641a14d5e4e45d9fd776309f2801a","modified":1578905288000},{"_id":"themes/archer/layout/site-meta.ejs","hash":"d866aa1a892d4bfe3368f6dbd0f1baa8c5831947","modified":1578905288000},{"_id":"themes/archer/source/.DS_Store","hash":"7c7eb3a712f76ac51e7786fc218f5bcdeb11424d","modified":1578964878000},{"_id":"themes/archer/source/404.md","hash":"3fb58e3ebd8e0961a3af837ff8e7395ef9092cb4","modified":1578906418000},{"_id":"themes/archer/src/.DS_Store","hash":"72720482c4291a6e91510301a6ae4b67b0b062c8","modified":1578964878000},{"_id":"source/_posts/webp在项目中的应用/jianrong.webp","hash":"9fd19fedb37fe15ab8e79ee5968b0489653c0a7b","modified":1580700082000},{"_id":"source/_posts/webp在项目中的应用/liucheng.webp","hash":"29fb994c83bb701f895f149177e04c6f7ea4f450","modified":1580700319000},{"_id":"source/_posts/webp在项目中的应用/taobao.webp","hash":"bbfa44c19551573a9d915babea32a5ac024d4a03","modified":1580700203000},{"_id":"source/_posts/webp在项目中的应用/yasuo.webp","hash":"6919a10f5c95993e136b21c6ff2e990029413a4b","modified":1580699903000},{"_id":"themes/archer/.github/ISSUE_TEMPLATE/-----------bug--help-wanted-or-bug-report-.md","hash":"012bd3afea5565204f75d8c89048ad33b9c2f948","modified":1553725894000},{"_id":"themes/archer/.github/ISSUE_TEMPLATE/-----feature-request-.md","hash":"886fb1252702d46c89536b579d35ce49e53ec54d","modified":1553725894000},{"_id":"themes/archer/.github/ISSUE_TEMPLATE/-----other-issue-.md","hash":"4bf3c8ebef14a81bb55e8e0468d816e83c4133ac","modified":1553725894000},{"_id":"themes/archer/layout/_partial/algolia.ejs","hash":"2f5f9073378f628a9124792b5301c1540bc5a264","modified":1578905288000},{"_id":"themes/archer/layout/_partial/base-background-image.ejs","hash":"82203d9a1c6e16ef2d37b8b587f56bf6d16edaf2","modified":1578905288000},{"_id":"themes/archer/layout/_partial/base-footer.ejs","hash":"a9f0f831a7c48553b109dbada60c797aa03b43d8","modified":1578905939000},{"_id":"themes/archer/layout/_partial/base-head.ejs","hash":"f2e8d4dfd11d879491a4b10f74f8c886cd392240","modified":1578905288000},{"_id":"themes/archer/layout/_partial/base-header.ejs","hash":"12e28693dc53cab5f6fd389f15ea0f811c9c37e9","modified":1578905288000},{"_id":"themes/archer/layout/_partial/base-preload-polyfill.ejs","hash":"2aea84cb43f4479131620b3c3dfd7cebe9be36ba","modified":1578905288000},{"_id":"themes/archer/layout/_partial/base-profile.ejs","hash":"743d97452d4ac358e631c43c9c2120aafdfd3e24","modified":1578905288000},{"_id":"themes/archer/layout/_partial/base-social.ejs","hash":"2d068432031b3bebf9438c775370a2d1b4492d6b","modified":1578905288000},{"_id":"themes/archer/layout/_partial/base-title-tags.ejs","hash":"418559ab11726f69621c3a58cd21903adff1e48e","modified":1578905288000},{"_id":"themes/archer/layout/_partial/intro-height.ejs","hash":"cd0d34a811dc4666980d57c00d70dd82bd5450eb","modified":1578905288000},{"_id":"themes/archer/source/assets/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1578905288000},{"_id":"themes/archer/source/assets/example_qr.png","hash":"cce20432c34875f4d9c6df927ede0fc0f00bb194","modified":1578905288000},{"_id":"themes/archer/source/assets/favicon.ico","hash":"25d327edb1a95957606731ca725ad7a41aa86832","modified":1578908703000},{"_id":"themes/archer/source/assets/loading.svg","hash":"45be17d07697d604d8981890eb21e308530c7a38","modified":1578905288000},{"_id":"themes/archer/source/avatar/Misaka.jpg","hash":"74a0372523f98dfbba992bf80642e160d04dc9b1","modified":1578905288000},{"_id":"themes/archer/source/css/mobile.css","hash":"51d7b5cf26c8f82a3daad4bc55518673fdf281f5","modified":1578905288000},{"_id":"themes/archer/source/css/style.css","hash":"5d5e869db0c62957d59c6865baaecd1428c51804","modified":1578905288000},{"_id":"themes/archer/source/font/Source Sans Pro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1578905288000},{"_id":"themes/archer/source/font/Source Sans Pro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1578905288000},{"_id":"themes/archer/source/scripts/search.js","hash":"d5f739e261e8ce74f993c6157b248663bda122bf","modified":1578905288000},{"_id":"themes/archer/source/lib/webfontloader.min.js","hash":"bc6ffe9c0d8b3285564619a445c6ca575eb9d0f5","modified":1578905288000},{"_id":"themes/archer/source/scripts/main.js","hash":"e89a9651131684204118fa74bd19cb781d76a372","modified":1578905288000},{"_id":"themes/archer/source/scripts/share.js","hash":"bb5bb37ce7f47f8c084b232df3e5fe2378d7ca01","modified":1578905288000},{"_id":"themes/archer/src/js/browser.js","hash":"ce061db99db5b880db0ddb768246352ca885b13c","modified":1578905288000},{"_id":"themes/archer/src/js/fancybox.js","hash":"0daf0e83deca055102268e3bd95cb1962acc2264","modified":1578905288000},{"_id":"themes/archer/src/js/init.js","hash":"346c6ef75ae85e4350c1b0811985172fdaa0d3a5","modified":1578905288000},{"_id":"themes/archer/src/js/initSidebar.js","hash":"b25615ff254913db83e2a20263d445f35083843b","modified":1578905288000},{"_id":"themes/archer/src/js/main.js","hash":"e1a48d5822326792e38d44efee86e01473549eba","modified":1578905288000},{"_id":"themes/archer/src/js/mobile.js","hash":"228a68d851517b5e47d2132f1d499cb812a64171","modified":1578905288000},{"_id":"themes/archer/src/js/scroll.js","hash":"aa2315a80daaa183a7e462c7e879ff9d2f050933","modified":1578905288000},{"_id":"themes/archer/src/js/search.js","hash":"2e59ac745da7c22801d9029cf9904a4fc3c384f1","modified":1578905288000},{"_id":"themes/archer/src/js/share.js","hash":"1314b19a852e291e35d6809f7f58652d3e7c524c","modified":1578905288000},{"_id":"themes/archer/src/js/sidebar.js","hash":"68d5fe0ee5e86df810d304e5efe11e5e1fddc46d","modified":1578905288000},{"_id":"themes/archer/src/js/tag.js","hash":"e0f0a914c02922e42977d78dc4993b3855167cd8","modified":1578905288000},{"_id":"themes/archer/src/js/toc.js","hash":"b3482031e4c8728535d480bfaec76229469e3aba","modified":1578905288000},{"_id":"themes/archer/src/js/util.js","hash":"27de6446892bcf399430dd5776df0b8759ca0eea","modified":1578905288000},{"_id":"themes/archer/src/scss/_common.scss","hash":"dedc313b082e0a16daf87213badd21b13be11af8","modified":1578905288000},{"_id":"themes/archer/src/scss/_mixin.scss","hash":"e7deb20a16868ae9d3e35ba3c5693de71fdf6999","modified":1578905288000},{"_id":"themes/archer/src/scss/_normalize.scss","hash":"a2dbeb38ad08bb8975856d75954cc697bf8e5ff7","modified":1578905288000},{"_id":"themes/archer/src/scss/_variables.scss","hash":"136e5d990c4f8eadf6cabdfa5a053941e90bcd20","modified":1579071861000},{"_id":"themes/archer/src/scss/mobile.scss","hash":"aadc2fbf37fefc2ad391d8172d5b61817f9db0c5","modified":1578905288000},{"_id":"themes/archer/src/scss/style.scss","hash":"78e31370d45089b97fa91929345f1a29f2e6a0a2","modified":1578905288000},{"_id":"themes/archer/layout/_partial/comment/custom.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1578905288000},{"_id":"themes/archer/source/avatar/mine.jpeg","hash":"1b4eccdbeb9a87e66ddad3569b16e0b3b9bbbd5d","modified":1578908374000},{"_id":"themes/archer/source/font/Oswald-Regular.ttf","hash":"965d729546a43a8490ad4cf33c25ac475682100c","modified":1578905288000},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff2","hash":"f5991289ec17884cb641da0646d278d36702a190","modified":1578905288000},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff","hash":"12eef75e1ad3eca9dae42b65505010ce4464a315","modified":1578905288000},{"_id":"themes/archer/source/intro/404-bg.jpg","hash":"3afb5bb26f4ff0bd0e0a28df955c8aa7d746d3c5","modified":1578905288000},{"_id":"themes/archer/source/lib/jquery.min.js","hash":"0dc32db4aa9c5f03f3b38c47d883dbd4fed13aae","modified":1578905288000},{"_id":"themes/archer/layout/_partial/comment/changyan.ejs","hash":"7691642fb9375607e0ac988a7420999e242cb2c9","modified":1578905288000},{"_id":"themes/archer/layout/_partial/comment/disqus.ejs","hash":"cadd97820a23d01d8b7e2f19a86e5290cef5a8a6","modified":1578905288000},{"_id":"themes/archer/layout/_partial/comment/gitment.ejs","hash":"794647a8a4ac9e1d01d74c07717175a141b1e01c","modified":1578905288000},{"_id":"themes/archer/layout/_partial/comment/livere.ejs","hash":"b27469f19f35ec2037c7bce736a12e9dfb5e360b","modified":1578905288000},{"_id":"themes/archer/layout/_partial/comment/valine.ejs","hash":"2154360e330dab94540e168e9d301c7b7091968e","modified":1578905288000},{"_id":"themes/archer/layout/_partial/comment/youyan.ejs","hash":"790d76f2667377db78a7d04bad8d629e47e7aab0","modified":1578905288000},{"_id":"themes/archer/layout/_partial/critical-css/critical-style.ejs","hash":"c03e16a7741908c207bf58363dcd1349cb639ef8","modified":1578905288000},{"_id":"themes/archer/layout/_partial/script/font-loader.ejs","hash":"291cc0a4a444a93b93c32e2c39383c70e36e46de","modified":1578905288000},{"_id":"themes/archer/layout/_partial/sidebar/base-sidebar.ejs","hash":"2d38af7cb5aabc0af99de239bd180c516ec4c56c","modified":1578905288000},{"_id":"themes/archer/layout/_partial/sidebar/sidebar-archives.ejs","hash":"daa78b17a773bca569f1c8ca2c916495ca138da6","modified":1578905288000},{"_id":"themes/archer/layout/_partial/sidebar/sidebar-categories.ejs","hash":"147214469c4909eb94943599883f9fa0f3cc090d","modified":1578905288000},{"_id":"themes/archer/layout/_partial/sidebar/sidebar-tags.ejs","hash":"d6e1a192cac5dcf365ce1a52df4f23feafeeb849","modified":1578905288000},{"_id":"themes/archer/package-lock.json","hash":"89a3b67d32f6916cdc21d590d87e43d8a44be8c3","modified":1553725894000},{"_id":"themes/archer/src/scss/_partial/_404.scss","hash":"a2b56f441a9a44d7f5b9b41eaa8136321328d7e9","modified":1578905288000},{"_id":"themes/archer/src/scss/_partial/_algolia.scss","hash":"c679578d2feb0bd7d3f80c2f693ba58cbca4428b","modified":1578905288000},{"_id":"themes/archer/src/scss/_partial/_index-page.scss","hash":"fa993cf0bbe0086cd8ec3d9a639b2d5b28ccfa8e","modified":1578905288000},{"_id":"themes/archer/src/scss/_partial/_post-page.scss","hash":"7c557844850d53cc4fc36aaf6d59847d8f238947","modified":1578905288000},{"_id":"themes/archer/docs/snap.png","hash":"0b2a8bf016f6eed576abfdcdb7dcf8de51c12562","modified":1578905288000},{"_id":"themes/archer/source/intro/post-bg.jpg","hash":"525fafb2238c27754d8fa751f143ff1de9b8482d","modified":1578905288000},{"_id":"themes/archer/src/scss/_partial/_partial/_footer.scss","hash":"726c543ee066e0b3222b236d9b4ef0109c0bdddf","modified":1578905288000},{"_id":"themes/archer/src/scss/_partial/_partial/_header.scss","hash":"77003ff22b1a10fae2d2768938277959b3f93a72","modified":1578905288000},{"_id":"themes/archer/src/scss/_partial/_partial/_intro.scss","hash":"a1569f39eccd64a12425d81b794c53df126a4d87","modified":1578905288000},{"_id":"themes/archer/src/scss/_partial/_partial/_paginator.scss","hash":"67c2e697a5fbb3b8006cf358ea45eb7f75b496f8","modified":1578905288000},{"_id":"themes/archer/src/scss/_partial/_partial/_profile.scss","hash":"0c986b52ce9083f08c37c5c9b5de045ac5e1d2fa","modified":1578905288000},{"_id":"themes/archer/src/scss/_partial/_partial/_scrollbar.scss","hash":"f2514031f9d7e4ed4a126694e78618ce6ff3a574","modified":1578905288000},{"_id":"themes/archer/src/scss/_partial/_post/_code.scss","hash":"9c9a4e470da8732c9a3be3d5ce0d2f80f53714fe","modified":1578905288000},{"_id":"themes/archer/src/scss/_partial/_sidebar/_sidebar-archive.scss","hash":"14bc42292873880c61b5fa9f47ee9d2e08d46871","modified":1578905288000},{"_id":"themes/archer/src/scss/_partial/_sidebar/_sidebar-tags.scss","hash":"9ab6f96d0df0c4ad4c72e2515fa2599d487d8f1a","modified":1578905288000},{"_id":"themes/archer/src/scss/_partial/_sidebar/_sidebar.scss","hash":"981a94978535769cb51c29e12b627f83c6fcedc5","modified":1578905288000},{"_id":"themes/archer/source/intro/about-bg.jpg","hash":"ab388276822417cc4e703312c14e20280ec783b3","modified":1578905288000},{"_id":"themes/archer/source/intro/index-bg.jpg","hash":"96b52e177b8bc53e64ec6ee1e10b2b6a4e13083b","modified":1578905288000},{"_id":"public/content.json","hash":"994f8f0d4b7024493775395cd4cbcc626f49f6fa","modified":1580883729637},{"_id":"public/test.js","hash":"19fbd26403e9da287b55fae007f4c37823df4633","modified":1580702891625},{"_id":"public/404.html","hash":"6a45897063219fca88d17c13ca249f47d2bc2616","modified":1580883729637},{"_id":"public/about/index.html","hash":"65fe2c1868d45b1aba25d59b1aa2e4477a2ff192","modified":1580883729637},{"_id":"public/2020/03/22/webp在项目中的应用/index.html","hash":"cbfc608a549de178658522c23c01d4813cfa33b0","modified":1580702994794},{"_id":"public/2019/03/02/meta标签使用总结/index.html","hash":"6f2cbb2c9158f49edb7939fbf8ee5e1bd567c4a4","modified":1580883729637},{"_id":"public/2019/02/17/promose-all和promise-race/index.html","hash":"0e3e24f24fd099566291237427f5484eb8058183","modified":1580883729637},{"_id":"public/2019/02/05/promise原理和实现/index.html","hash":"e6390b159c468666181bc0a6536e781ab62f9189","modified":1580883729637},{"_id":"public/2019/01/14/初尝hexo/index.html","hash":"5ba203e1f9e3444010a458dcde0adc750d0b603c","modified":1580883729637},{"_id":"public/2019/02/21/前端性能优化——DNS预解析/index.html","hash":"fa843cb59ac0f7cc822c5166483fc9e7fe26e6a3","modified":1580883729637},{"_id":"public/archives/2019/index.html","hash":"e97fd68af3ee2d7a53f8c2116cdc101a637c7024","modified":1580883729637},{"_id":"public/archives/2019/01/index.html","hash":"9d0e117300f52a6bc78e0fc24652c80ed25ed1f8","modified":1580883729637},{"_id":"public/archives/2019/02/index.html","hash":"e908108faed4a487a02f19ac2d18baaab1082521","modified":1580883729637},{"_id":"public/archives/2019/03/index.html","hash":"497235efafd31ca54cd7fc56ba87cca8986d2dda","modified":1580883729637},{"_id":"public/archives/2020/index.html","hash":"efe4aed225bd5577c997dd2cd5c41178751892b1","modified":1580702891625},{"_id":"public/archives/2020/03/index.html","hash":"efe4aed225bd5577c997dd2cd5c41178751892b1","modified":1580702891625},{"_id":"public/index.html","hash":"0817acd188beb60ad7f88b6b03ef83a5add1f1b3","modified":1580883729637},{"_id":"public/tags/html/index.html","hash":"497235efafd31ca54cd7fc56ba87cca8986d2dda","modified":1580883729637},{"_id":"public/tags/Promise/index.html","hash":"26ab028dc6304932c50409f2ced2281cce5fbc43","modified":1580883729637},{"_id":"public/tags/hexo/index.html","hash":"9d0e117300f52a6bc78e0fc24652c80ed25ed1f8","modified":1580883729637},{"_id":"public/tags/前端性能优化/index.html","hash":"af12219656fc920b0f288452ece2a646e652d856","modified":1580883729637},{"_id":"public/archives/index.html","hash":"e97fd68af3ee2d7a53f8c2116cdc101a637c7024","modified":1580883729637},{"_id":"public/assets/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1580702891625},{"_id":"public/assets/example_qr.png","hash":"cce20432c34875f4d9c6df927ede0fc0f00bb194","modified":1580702891625},{"_id":"public/assets/favicon.ico","hash":"25d327edb1a95957606731ca725ad7a41aa86832","modified":1580702891625},{"_id":"public/assets/loading.svg","hash":"45be17d07697d604d8981890eb21e308530c7a38","modified":1580702891625},{"_id":"public/avatar/Misaka.jpg","hash":"74a0372523f98dfbba992bf80642e160d04dc9b1","modified":1580702891625},{"_id":"public/font/Source Sans Pro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1580702891625},{"_id":"public/font/Source Sans Pro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1580702891625},{"_id":"public/2020/03/22/webp在项目中的应用/jianrong.webp","hash":"9fd19fedb37fe15ab8e79ee5968b0489653c0a7b","modified":1580702891625},{"_id":"public/2020/03/22/webp在项目中的应用/liucheng.webp","hash":"29fb994c83bb701f895f149177e04c6f7ea4f450","modified":1580702891625},{"_id":"public/2020/03/22/webp在项目中的应用/yasuo.webp","hash":"6919a10f5c95993e136b21c6ff2e990029413a4b","modified":1580702891625},{"_id":"public/2020/03/22/webp在项目中的应用/taobao.webp","hash":"bbfa44c19551573a9d915babea32a5ac024d4a03","modified":1580702891625},{"_id":"public/css/mobile.css","hash":"51d7b5cf26c8f82a3daad4bc55518673fdf281f5","modified":1580702891625},{"_id":"public/css/style.css","hash":"5d5e869db0c62957d59c6865baaecd1428c51804","modified":1580702891625},{"_id":"public/avatar/mine.jpeg","hash":"1b4eccdbeb9a87e66ddad3569b16e0b3b9bbbd5d","modified":1580702891625},{"_id":"public/font/Oswald-Regular.ttf","hash":"965d729546a43a8490ad4cf33c25ac475682100c","modified":1580702891625},{"_id":"public/font/SourceCodePro-Regular.ttf.woff","hash":"12eef75e1ad3eca9dae42b65505010ce4464a315","modified":1580702891625},{"_id":"public/intro/404-bg.jpg","hash":"3afb5bb26f4ff0bd0e0a28df955c8aa7d746d3c5","modified":1580702891625},{"_id":"public/font/SourceCodePro-Regular.ttf.woff2","hash":"f5991289ec17884cb641da0646d278d36702a190","modified":1580702891625},{"_id":"public/scripts/search.js","hash":"d5f739e261e8ce74f993c6157b248663bda122bf","modified":1580702891625},{"_id":"public/lib/webfontloader.min.js","hash":"bc6ffe9c0d8b3285564619a445c6ca575eb9d0f5","modified":1580702891625},{"_id":"public/scripts/main.js","hash":"e89a9651131684204118fa74bd19cb781d76a372","modified":1580702891625},{"_id":"public/scripts/share.js","hash":"bb5bb37ce7f47f8c084b232df3e5fe2378d7ca01","modified":1580702891625},{"_id":"public/lib/jquery.min.js","hash":"0dc32db4aa9c5f03f3b38c47d883dbd4fed13aae","modified":1580702891625},{"_id":"public/intro/post-bg.jpg","hash":"525fafb2238c27754d8fa751f143ff1de9b8482d","modified":1580702891625},{"_id":"public/intro/about-bg.jpg","hash":"ab388276822417cc4e703312c14e20280ec783b3","modified":1580702891625},{"_id":"public/intro/index-bg.jpg","hash":"96b52e177b8bc53e64ec6ee1e10b2b6a4e13083b","modified":1580702891625},{"_id":"public/2019/03/22/webp在项目中的应用/index.html","hash":"33f3d1b92e2231147ed7d19219c45e937bdced8a","modified":1580883729637},{"_id":"public/2019/03/22/webp在项目中的应用/yasuo.webp","hash":"6919a10f5c95993e136b21c6ff2e990029413a4b","modified":1580722221825},{"_id":"public/2019/03/22/webp在项目中的应用/taobao.webp","hash":"bbfa44c19551573a9d915babea32a5ac024d4a03","modified":1580722221825},{"_id":"public/2019/03/22/webp在项目中的应用/liucheng.webp","hash":"29fb994c83bb701f895f149177e04c6f7ea4f450","modified":1580722221825},{"_id":"public/2019/03/22/webp在项目中的应用/jianrong.webp","hash":"9fd19fedb37fe15ab8e79ee5968b0489653c0a7b","modified":1580722221825},{"_id":"source/_posts/vue生命周期以及nextTick应用.md","hash":"2884cd6462a7616a7205d3a137ae6f0d9abb40a6","modified":1580883723000},{"_id":"source/_posts/vue生命周期以及nextTick应用/biaoge.webp","hash":"88aa25471288da771d62ab51ee7c9fd1305c6b46","modified":1580869395000},{"_id":"source/_posts/vue生命周期以及nextTick应用/shengming.webp","hash":"ceb669b5a12f77fdb6207e0382a3d629def72680","modified":1580869026000},{"_id":"public/2019/04/01/vue生命周期以及nextTick应用/index.html","hash":"ddfb78fbdfa1f6aa1cea341b27242b418d52facf","modified":1580883729637},{"_id":"public/archives/2019/04/index.html","hash":"d95a04263160c90156bad22a40ab76e0866d459a","modified":1580883729637},{"_id":"public/tags/vue/index.html","hash":"d95a04263160c90156bad22a40ab76e0866d459a","modified":1580883729637},{"_id":"public/2019/04/01/vue生命周期以及nextTick应用/biaoge.webp","hash":"88aa25471288da771d62ab51ee7c9fd1305c6b46","modified":1580883729637},{"_id":"public/2019/04/01/vue生命周期以及nextTick应用/shengming.webp","hash":"ceb669b5a12f77fdb6207e0382a3d629def72680","modified":1580883729637}],"Category":[],"Data":[],"Page":[{"layout":"404","title":"[404]","description":"May the Force be with you :&#41;","_content":"","source":"404.md","raw":"---\nlayout: 404\ntitle: \"[404]\"\ndescription: \"May the Force be with you :&#41;\"\n---\n","date":"2020-01-14T07:12:06.000Z","updated":"2020-01-13T09:06:58.000Z","path":"404.html","comments":1,"_id":"ck65xotfq0000d4s61134g957","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"Promise.all = (arr) => {\n    let resultList = new Array(arr.length);\n    return new Promise((resolve, reject) => {\n        let temp = 0;\n        for (let i = 0, len = arr.length; i < len; i++) {\n            arr[i].then((res, rej) => {\n                if (!rej) {\n                    resultList[i] = (res);\n                    if (temp == arr.length) {\n                        resolve(resultList);\n                    }\n                    temp++;\n                } else {\n                    reject(rej);\n                }\n            })\n        }\n    })\n};","source":"test.js","raw":"Promise.all = (arr) => {\n    let resultList = new Array(arr.length);\n    return new Promise((resolve, reject) => {\n        let temp = 0;\n        for (let i = 0, len = arr.length; i < len; i++) {\n            arr[i].then((res, rej) => {\n                if (!rej) {\n                    resultList[i] = (res);\n                    if (temp == arr.length) {\n                        resolve(resultList);\n                    }\n                    temp++;\n                } else {\n                    reject(rej);\n                }\n            })\n        }\n    })\n};","date":"2020-01-16T05:19:38.000Z","updated":"2020-01-16T05:19:38.000Z","path":"test.js","layout":"false","title":"","comments":1,"_id":"ck65xotfv0001d4s6cr070e59","content":"Promise.all = (arr) => {\n    let resultList = new Array(arr.length);\n    return new Promise((resolve, reject) => {\n        let temp = 0;\n        for (let i = 0, len = arr.length; i < len; i++) {\n            arr[i].then((res, rej) => {\n                if (!rej) {\n                    resultList[i] = (res);\n                    if (temp == arr.length) {\n                        resolve(resultList);\n                    }\n                    temp++;\n                } else {\n                    reject(rej);\n                }\n            })\n        }\n    })\n};","site":{"data":{}},"excerpt":"","more":"Promise.all = (arr) => {\n    let resultList = new Array(arr.length);\n    return new Promise((resolve, reject) => {\n        let temp = 0;\n        for (let i = 0, len = arr.length; i < len; i++) {\n            arr[i].then((res, rej) => {\n                if (!rej) {\n                    resultList[i] = (res);\n                    if (temp == arr.length) {\n                        resolve(resultList);\n                    }\n                    temp++;\n                } else {\n                    reject(rej);\n                }\n            })\n        }\n    })\n};"},{"title":"个人分享自己的学习经历的blog","layout":"about","_content":"前端攻城狮一枚，工作多年后将自己的笔记总结为博客，总结自己。\n","source":"about/index.md","raw":"---\ntitle: 个人分享自己的学习经历的blog\nlayout: about\n---\n前端攻城狮一枚，工作多年后将自己的笔记总结为博客，总结自己。\n","date":"2020-01-14T07:16:44.000Z","updated":"2020-01-14T07:16:44.000Z","path":"about/index.html","comments":1,"_id":"ck65xoth00003d4s61rhve36r","content":"<p>前端攻城狮一枚，工作多年后将自己的笔记总结为博客，总结自己。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>前端攻城狮一枚，工作多年后将自己的笔记总结为博客，总结自己。</p>\n"}],"Post":[{"layout":"[post]","title":"meta标签使用总结","date":"2019-03-02T00:06:54.000Z","_content":"## Meta对象\nMeta 对象代表 HTML 的 一个 <meta> 元素。\n\n<meta> 元素可提供有关某个 HTML 元素的元信息 (meta-information)，比如描述、针对搜索引擎的关键词以及刷新频率。\n<!-- more -->\n## meta对象的属性\n\n属性 | 描述\n---|---\ncontent |设置或返回 <meta> 元素的 content 属性的值。\nhttpEquiv| 把 content 属性连接到一个 HTTP 头部。\nname|把 content 属性连接到某个名称。\nscheme|设置或返回用于解释 content 属性的值的格式。\n\n常用的包括 http-equiv搭配content和name搭配content两种。\n\n## name\n### **name可用参数有这些：**\n###  keywords(关键字)\n说明：用于告诉搜索引擎，你网页的关键字\n```html\n<meta name=\"keywords\" content=\"前端,js,css\">\n```\n### description(网站内容的描述)\n说明：用于告诉搜索引擎，你网站的主要内容  \n```html\n<meta name=\"description\" content=\"一个前端网站\">\n```\n\n### viewport(移动端的窗口)\n说明：在用bootstrap,AmazeUI等框架时候都有用过viewport。\n\n```html\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n```\n### robots(定义搜索引擎爬虫的索引方式)\n说明：robots用来告诉爬虫哪些页面需要索引，哪些页面不需要索引。content的参数有all,none,index,noindex,follow,nofollow。默认是all。\n\n```html\n<meta name=\"robots\" content=\"none\">\n```\n具体参数如下：\n\n1. none : 搜索引擎将忽略此网页，等价于noindex，nofollow。\n2. noindex : 搜索引擎不索引此网页。\n3. nofollow: 搜索引擎不继续通过此网页的链接索引搜索其它的网页。\n4. all : 搜索引擎将索引此网页与继续通过此网页的链接索引，等价于index，follow。\n5. index : 搜索引擎索引此网页。\n6. follow : 搜索引擎继续通过此网页的链接索引搜索其它的网页。\n\n### author(作者)\n说明：用于标注网页作者\n\n```html\n<meta name=\"author\" content=\"xxx\">\n```\n### generator(网页制作软件)\n说明：用于标明网页是什么软件做的\n\n```html\n<meta name=\"generator\" content=\"Sublime Text3\">\n```\n### copyright(版权)\n说明：用于标注版权信息\n\n```html\n<meta name=\"copyright\" content=\"xxx\">\n```\n### revisit-after(搜索引擎爬虫重访时间)\n说明：如果页面不是经常更新，为了减轻搜索引擎爬虫对服务器带来的压力，可以设置一个爬虫的重访时间。如果重访时间过短，爬虫将按它们定义的默认时间来访问。\n\n```html\n<meta name=\"revisit-after\" content=\"7 days\" >\n```\n### renderer(双核浏览器渲染方式)\n说明：renderer是为双核浏览器准备的，用于指定双核浏览器默认以何种方式渲染页面。比如说360浏览器。\n\n```html\n<meta name=\"renderer\" content=\"webkit\"> //默认webkit内核\n<meta name=\"renderer\" content=\"ie-comp\"> //默认IE兼容模式\n<meta name=\"renderer\" content=\"ie-stand\"> //默认IE标准模式\n```\n## http-equiv\n### content-Type(设定网页字符集)(推荐使用HTML5的方式)\n说明：用于设定网页字符集，便于浏览器解析与渲染页面举例：\n```html\n<meta http-equiv=\"content-Type\" content=\"text/html;charset=utf-8\">  //旧的HTML，不推荐\n\n<meta charset=\"utf-8\"> //HTML5设定网页字符集的方式，推荐使用UTF-8\n```\n### X-UA-Compatible(浏览器采取何种版本渲染当前页面)\n说明：用于告知浏览器以何种版本来渲染页面。（一般都设置为最新模式，在各大框架中这个设置也很常见。）举例：\n```html\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\"/> //指定IE和Chrome使用最新版本渲染当前页面\n```\n### cache-control(指定请求和响应遵循的缓存机制)\n说明：指导浏览器如何缓存某个响应以及缓存多长时间。\n\n```html\n<meta http-equiv=\"cache-control\" content=\"no-cache\">\n```\n共有以下几种用法：\n\n1. no-cache: 先发送请求，与服务器确认该资源是否被更改，如果未被更改，则使用缓存。\n\n2. no-store: 不允许缓存，每次都要去服务器上，下载完整的响应。（安全措施）\n\n3. public : 缓存所有响应，但并非必须。因为max-age也可以做到相同效果\n\n4. private : 只为单个用户缓存，因此不允许任何中继进行缓存。（比如说CDN就不允许缓存private的响应）\n\n5. maxage : 表示当前请求开始，该响应在多久内能被缓存和重用，而不去服务器重新请求。例如：max-age=60表示响应可以再缓存和重用 60 秒。\n用法2.(禁止百度自动转码)\n说明：用于禁止当前页面在移动端浏览时，被百度自动转码。虽然百度的本意是好的，但是转码效果很多时候却不尽人意。所以可以在head中加入例子中的那句话，就可以避免百度自动转码了。举例：\n\n\n```html\n<meta http-equiv=\"Cache-Control\" content=\"no-siteapp\" />\n```\n### expires(网页到期时间)\n说明:用于设定网页的到期时间，过期后网页必须到服务器上重新传输。\n\n```html\n<meta http-equiv=\"expires\" content=\"Sunday 26 October 2016 01:00 GMT\" />\n```\n### refresh(自动刷新并指向某页面)\n说明：网页将在设定的时间内，自动刷新并调向设定的网址。\n\n```html\n<meta http-equiv=\"refresh\" content=\"2；URL=http://www.baidu.com/\"> //意思是2秒后跳转向baidu\n```\n### Set-Cookie(cookie设定)\n说明：如果网页过期。那么这个网页存在本地的cookies也会被自动删除。\n\n```html\n<meta http-equiv=\"set-cookie\" content=\"runoobcookie=myContent;expires=Fri, 30 Dec 2015 12:00:00 GMT; path=http://www.runoob.com\">\n```\n","source":"_posts/meta标签使用总结.md","raw":"---\nlayout: '[post]'\ntitle: meta标签使用总结\ndate: 2019-03-02 08:06:54\ntags: html\n---\n## Meta对象\nMeta 对象代表 HTML 的 一个 <meta> 元素。\n\n<meta> 元素可提供有关某个 HTML 元素的元信息 (meta-information)，比如描述、针对搜索引擎的关键词以及刷新频率。\n<!-- more -->\n## meta对象的属性\n\n属性 | 描述\n---|---\ncontent |设置或返回 <meta> 元素的 content 属性的值。\nhttpEquiv| 把 content 属性连接到一个 HTTP 头部。\nname|把 content 属性连接到某个名称。\nscheme|设置或返回用于解释 content 属性的值的格式。\n\n常用的包括 http-equiv搭配content和name搭配content两种。\n\n## name\n### **name可用参数有这些：**\n###  keywords(关键字)\n说明：用于告诉搜索引擎，你网页的关键字\n```html\n<meta name=\"keywords\" content=\"前端,js,css\">\n```\n### description(网站内容的描述)\n说明：用于告诉搜索引擎，你网站的主要内容  \n```html\n<meta name=\"description\" content=\"一个前端网站\">\n```\n\n### viewport(移动端的窗口)\n说明：在用bootstrap,AmazeUI等框架时候都有用过viewport。\n\n```html\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n```\n### robots(定义搜索引擎爬虫的索引方式)\n说明：robots用来告诉爬虫哪些页面需要索引，哪些页面不需要索引。content的参数有all,none,index,noindex,follow,nofollow。默认是all。\n\n```html\n<meta name=\"robots\" content=\"none\">\n```\n具体参数如下：\n\n1. none : 搜索引擎将忽略此网页，等价于noindex，nofollow。\n2. noindex : 搜索引擎不索引此网页。\n3. nofollow: 搜索引擎不继续通过此网页的链接索引搜索其它的网页。\n4. all : 搜索引擎将索引此网页与继续通过此网页的链接索引，等价于index，follow。\n5. index : 搜索引擎索引此网页。\n6. follow : 搜索引擎继续通过此网页的链接索引搜索其它的网页。\n\n### author(作者)\n说明：用于标注网页作者\n\n```html\n<meta name=\"author\" content=\"xxx\">\n```\n### generator(网页制作软件)\n说明：用于标明网页是什么软件做的\n\n```html\n<meta name=\"generator\" content=\"Sublime Text3\">\n```\n### copyright(版权)\n说明：用于标注版权信息\n\n```html\n<meta name=\"copyright\" content=\"xxx\">\n```\n### revisit-after(搜索引擎爬虫重访时间)\n说明：如果页面不是经常更新，为了减轻搜索引擎爬虫对服务器带来的压力，可以设置一个爬虫的重访时间。如果重访时间过短，爬虫将按它们定义的默认时间来访问。\n\n```html\n<meta name=\"revisit-after\" content=\"7 days\" >\n```\n### renderer(双核浏览器渲染方式)\n说明：renderer是为双核浏览器准备的，用于指定双核浏览器默认以何种方式渲染页面。比如说360浏览器。\n\n```html\n<meta name=\"renderer\" content=\"webkit\"> //默认webkit内核\n<meta name=\"renderer\" content=\"ie-comp\"> //默认IE兼容模式\n<meta name=\"renderer\" content=\"ie-stand\"> //默认IE标准模式\n```\n## http-equiv\n### content-Type(设定网页字符集)(推荐使用HTML5的方式)\n说明：用于设定网页字符集，便于浏览器解析与渲染页面举例：\n```html\n<meta http-equiv=\"content-Type\" content=\"text/html;charset=utf-8\">  //旧的HTML，不推荐\n\n<meta charset=\"utf-8\"> //HTML5设定网页字符集的方式，推荐使用UTF-8\n```\n### X-UA-Compatible(浏览器采取何种版本渲染当前页面)\n说明：用于告知浏览器以何种版本来渲染页面。（一般都设置为最新模式，在各大框架中这个设置也很常见。）举例：\n```html\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\"/> //指定IE和Chrome使用最新版本渲染当前页面\n```\n### cache-control(指定请求和响应遵循的缓存机制)\n说明：指导浏览器如何缓存某个响应以及缓存多长时间。\n\n```html\n<meta http-equiv=\"cache-control\" content=\"no-cache\">\n```\n共有以下几种用法：\n\n1. no-cache: 先发送请求，与服务器确认该资源是否被更改，如果未被更改，则使用缓存。\n\n2. no-store: 不允许缓存，每次都要去服务器上，下载完整的响应。（安全措施）\n\n3. public : 缓存所有响应，但并非必须。因为max-age也可以做到相同效果\n\n4. private : 只为单个用户缓存，因此不允许任何中继进行缓存。（比如说CDN就不允许缓存private的响应）\n\n5. maxage : 表示当前请求开始，该响应在多久内能被缓存和重用，而不去服务器重新请求。例如：max-age=60表示响应可以再缓存和重用 60 秒。\n用法2.(禁止百度自动转码)\n说明：用于禁止当前页面在移动端浏览时，被百度自动转码。虽然百度的本意是好的，但是转码效果很多时候却不尽人意。所以可以在head中加入例子中的那句话，就可以避免百度自动转码了。举例：\n\n\n```html\n<meta http-equiv=\"Cache-Control\" content=\"no-siteapp\" />\n```\n### expires(网页到期时间)\n说明:用于设定网页的到期时间，过期后网页必须到服务器上重新传输。\n\n```html\n<meta http-equiv=\"expires\" content=\"Sunday 26 October 2016 01:00 GMT\" />\n```\n### refresh(自动刷新并指向某页面)\n说明：网页将在设定的时间内，自动刷新并调向设定的网址。\n\n```html\n<meta http-equiv=\"refresh\" content=\"2；URL=http://www.baidu.com/\"> //意思是2秒后跳转向baidu\n```\n### Set-Cookie(cookie设定)\n说明：如果网页过期。那么这个网页存在本地的cookies也会被自动删除。\n\n```html\n<meta http-equiv=\"set-cookie\" content=\"runoobcookie=myContent;expires=Fri, 30 Dec 2015 12:00:00 GMT; path=http://www.runoob.com\">\n```\n","slug":"meta标签使用总结","published":1,"updated":"2019-03-02T00:07:35.000Z","comments":1,"photos":[],"link":"","_id":"ck65xotgx0002d4s6h6n7cs8c","content":"<h2 id=\"Meta对象\"><a href=\"#Meta对象\" class=\"headerlink\" title=\"Meta对象\"></a>Meta对象</h2><p>Meta 对象代表 HTML 的 一个 <meta> 元素。</p>\n<meta> 元素可提供有关某个 HTML 元素的元信息 (meta-information)，比如描述、针对搜索引擎的关键词以及刷新频率。\n<a id=\"more\"></a>\n## meta对象的属性\n\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>content</td>\n<td>设置或返回 <meta> 元素的 content 属性的值。</td>\n</tr>\n<tr>\n<td>httpEquiv</td>\n<td>把 content 属性连接到一个 HTTP 头部。</td>\n</tr>\n<tr>\n<td>name</td>\n<td>把 content 属性连接到某个名称。</td>\n</tr>\n<tr>\n<td>scheme</td>\n<td>设置或返回用于解释 content 属性的值的格式。</td>\n</tr>\n</tbody></table>\n<p>常用的包括 http-equiv搭配content和name搭配content两种。</p>\n<h2 id=\"name\"><a href=\"#name\" class=\"headerlink\" title=\"name\"></a>name</h2><h3 id=\"name可用参数有这些：\"><a href=\"#name可用参数有这些：\" class=\"headerlink\" title=\"name可用参数有这些：\"></a><strong>name可用参数有这些：</strong></h3><h3 id=\"keywords-关键字\"><a href=\"#keywords-关键字\" class=\"headerlink\" title=\"keywords(关键字)\"></a>keywords(关键字)</h3><p>说明：用于告诉搜索引擎，你网页的关键字</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"keywords\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"前端,js,css\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"description-网站内容的描述\"><a href=\"#description-网站内容的描述\" class=\"headerlink\" title=\"description(网站内容的描述)\"></a>description(网站内容的描述)</h3><p>说明：用于告诉搜索引擎，你网站的主要内容  </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"description\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"一个前端网站\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"viewport-移动端的窗口\"><a href=\"#viewport-移动端的窗口\" class=\"headerlink\" title=\"viewport(移动端的窗口)\"></a>viewport(移动端的窗口)</h3><p>说明：在用bootstrap,AmazeUI等框架时候都有用过viewport。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"robots-定义搜索引擎爬虫的索引方式\"><a href=\"#robots-定义搜索引擎爬虫的索引方式\" class=\"headerlink\" title=\"robots(定义搜索引擎爬虫的索引方式)\"></a>robots(定义搜索引擎爬虫的索引方式)</h3><p>说明：robots用来告诉爬虫哪些页面需要索引，哪些页面不需要索引。content的参数有all,none,index,noindex,follow,nofollow。默认是all。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"robots\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"none\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>具体参数如下：</p>\n<ol>\n<li>none : 搜索引擎将忽略此网页，等价于noindex，nofollow。</li>\n<li>noindex : 搜索引擎不索引此网页。</li>\n<li>nofollow: 搜索引擎不继续通过此网页的链接索引搜索其它的网页。</li>\n<li>all : 搜索引擎将索引此网页与继续通过此网页的链接索引，等价于index，follow。</li>\n<li>index : 搜索引擎索引此网页。</li>\n<li>follow : 搜索引擎继续通过此网页的链接索引搜索其它的网页。</li>\n</ol>\n<h3 id=\"author-作者\"><a href=\"#author-作者\" class=\"headerlink\" title=\"author(作者)\"></a>author(作者)</h3><p>说明：用于标注网页作者</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"author\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"xxx\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"generator-网页制作软件\"><a href=\"#generator-网页制作软件\" class=\"headerlink\" title=\"generator(网页制作软件)\"></a>generator(网页制作软件)</h3><p>说明：用于标明网页是什么软件做的</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"generator\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"Sublime Text3\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"copyright-版权\"><a href=\"#copyright-版权\" class=\"headerlink\" title=\"copyright(版权)\"></a>copyright(版权)</h3><p>说明：用于标注版权信息</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"copyright\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"xxx\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"revisit-after-搜索引擎爬虫重访时间\"><a href=\"#revisit-after-搜索引擎爬虫重访时间\" class=\"headerlink\" title=\"revisit-after(搜索引擎爬虫重访时间)\"></a>revisit-after(搜索引擎爬虫重访时间)</h3><p>说明：如果页面不是经常更新，为了减轻搜索引擎爬虫对服务器带来的压力，可以设置一个爬虫的重访时间。如果重访时间过短，爬虫将按它们定义的默认时间来访问。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"revisit-after\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"7 days\"</span> &gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"renderer-双核浏览器渲染方式\"><a href=\"#renderer-双核浏览器渲染方式\" class=\"headerlink\" title=\"renderer(双核浏览器渲染方式)\"></a>renderer(双核浏览器渲染方式)</h3><p>说明：renderer是为双核浏览器准备的，用于指定双核浏览器默认以何种方式渲染页面。比如说360浏览器。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"renderer\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"webkit\"</span>&gt;</span> //默认webkit内核</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"renderer\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie-comp\"</span>&gt;</span> //默认IE兼容模式</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"renderer\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie-stand\"</span>&gt;</span> //默认IE标准模式</span><br></pre></td></tr></table></figure>\n<h2 id=\"http-equiv\"><a href=\"#http-equiv\" class=\"headerlink\" title=\"http-equiv\"></a>http-equiv</h2><h3 id=\"content-Type-设定网页字符集-推荐使用HTML5的方式\"><a href=\"#content-Type-设定网页字符集-推荐使用HTML5的方式\" class=\"headerlink\" title=\"content-Type(设定网页字符集)(推荐使用HTML5的方式)\"></a>content-Type(设定网页字符集)(推荐使用HTML5的方式)</h3><p>说明：用于设定网页字符集，便于浏览器解析与渲染页面举例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"content-Type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html;charset=utf-8\"</span>&gt;</span>  //旧的HTML，不推荐</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span> //HTML5设定网页字符集的方式，推荐使用UTF-8</span><br></pre></td></tr></table></figure>\n<h3 id=\"X-UA-Compatible-浏览器采取何种版本渲染当前页面\"><a href=\"#X-UA-Compatible-浏览器采取何种版本渲染当前页面\" class=\"headerlink\" title=\"X-UA-Compatible(浏览器采取何种版本渲染当前页面)\"></a>X-UA-Compatible(浏览器采取何种版本渲染当前页面)</h3><p>说明：用于告知浏览器以何种版本来渲染页面。（一般都设置为最新模式，在各大框架中这个设置也很常见。）举例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=edge,chrome=1\"</span>/&gt;</span> //指定IE和Chrome使用最新版本渲染当前页面</span><br></pre></td></tr></table></figure>\n<h3 id=\"cache-control-指定请求和响应遵循的缓存机制\"><a href=\"#cache-control-指定请求和响应遵循的缓存机制\" class=\"headerlink\" title=\"cache-control(指定请求和响应遵循的缓存机制)\"></a>cache-control(指定请求和响应遵循的缓存机制)</h3><p>说明：指导浏览器如何缓存某个响应以及缓存多长时间。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"cache-control\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"no-cache\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>共有以下几种用法：</p>\n<ol>\n<li><p>no-cache: 先发送请求，与服务器确认该资源是否被更改，如果未被更改，则使用缓存。</p>\n</li>\n<li><p>no-store: 不允许缓存，每次都要去服务器上，下载完整的响应。（安全措施）</p>\n</li>\n<li><p>public : 缓存所有响应，但并非必须。因为max-age也可以做到相同效果</p>\n</li>\n<li><p>private : 只为单个用户缓存，因此不允许任何中继进行缓存。（比如说CDN就不允许缓存private的响应）</p>\n</li>\n<li><p>maxage : 表示当前请求开始，该响应在多久内能被缓存和重用，而不去服务器重新请求。例如：max-age=60表示响应可以再缓存和重用 60 秒。<br>用法2.(禁止百度自动转码)<br>说明：用于禁止当前页面在移动端浏览时，被百度自动转码。虽然百度的本意是好的，但是转码效果很多时候却不尽人意。所以可以在head中加入例子中的那句话，就可以避免百度自动转码了。举例：</p>\n</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Cache-Control\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"no-siteapp\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"expires-网页到期时间\"><a href=\"#expires-网页到期时间\" class=\"headerlink\" title=\"expires(网页到期时间)\"></a>expires(网页到期时间)</h3><p>说明:用于设定网页的到期时间，过期后网页必须到服务器上重新传输。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"expires\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"Sunday 26 October 2016 01:00 GMT\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"refresh-自动刷新并指向某页面\"><a href=\"#refresh-自动刷新并指向某页面\" class=\"headerlink\" title=\"refresh(自动刷新并指向某页面)\"></a>refresh(自动刷新并指向某页面)</h3><p>说明：网页将在设定的时间内，自动刷新并调向设定的网址。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"refresh\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"2；URL=http://www.baidu.com/\"</span>&gt;</span> //意思是2秒后跳转向baidu</span><br></pre></td></tr></table></figure>\n<h3 id=\"Set-Cookie-cookie设定\"><a href=\"#Set-Cookie-cookie设定\" class=\"headerlink\" title=\"Set-Cookie(cookie设定)\"></a>Set-Cookie(cookie设定)</h3><p>说明：如果网页过期。那么这个网页存在本地的cookies也会被自动删除。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"set-cookie\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"runoobcookie=myContent;expires=Fri, 30 Dec 2015 12:00:00 GMT; path=http://www.runoob.com\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"Meta对象\"><a href=\"#Meta对象\" class=\"headerlink\" title=\"Meta对象\"></a>Meta对象</h2><p>Meta 对象代表 HTML 的 一个 <meta> 元素。</p>\n<meta> 元素可提供有关某个 HTML 元素的元信息 (meta-information)，比如描述、针对搜索引擎的关键词以及刷新频率。","more":"## meta对象的属性\n\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>content</td>\n<td>设置或返回 <meta> 元素的 content 属性的值。</td>\n</tr>\n<tr>\n<td>httpEquiv</td>\n<td>把 content 属性连接到一个 HTTP 头部。</td>\n</tr>\n<tr>\n<td>name</td>\n<td>把 content 属性连接到某个名称。</td>\n</tr>\n<tr>\n<td>scheme</td>\n<td>设置或返回用于解释 content 属性的值的格式。</td>\n</tr>\n</tbody></table>\n<p>常用的包括 http-equiv搭配content和name搭配content两种。</p>\n<h2 id=\"name\"><a href=\"#name\" class=\"headerlink\" title=\"name\"></a>name</h2><h3 id=\"name可用参数有这些：\"><a href=\"#name可用参数有这些：\" class=\"headerlink\" title=\"name可用参数有这些：\"></a><strong>name可用参数有这些：</strong></h3><h3 id=\"keywords-关键字\"><a href=\"#keywords-关键字\" class=\"headerlink\" title=\"keywords(关键字)\"></a>keywords(关键字)</h3><p>说明：用于告诉搜索引擎，你网页的关键字</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"keywords\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"前端,js,css\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"description-网站内容的描述\"><a href=\"#description-网站内容的描述\" class=\"headerlink\" title=\"description(网站内容的描述)\"></a>description(网站内容的描述)</h3><p>说明：用于告诉搜索引擎，你网站的主要内容  </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"description\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"一个前端网站\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"viewport-移动端的窗口\"><a href=\"#viewport-移动端的窗口\" class=\"headerlink\" title=\"viewport(移动端的窗口)\"></a>viewport(移动端的窗口)</h3><p>说明：在用bootstrap,AmazeUI等框架时候都有用过viewport。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"robots-定义搜索引擎爬虫的索引方式\"><a href=\"#robots-定义搜索引擎爬虫的索引方式\" class=\"headerlink\" title=\"robots(定义搜索引擎爬虫的索引方式)\"></a>robots(定义搜索引擎爬虫的索引方式)</h3><p>说明：robots用来告诉爬虫哪些页面需要索引，哪些页面不需要索引。content的参数有all,none,index,noindex,follow,nofollow。默认是all。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"robots\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"none\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>具体参数如下：</p>\n<ol>\n<li>none : 搜索引擎将忽略此网页，等价于noindex，nofollow。</li>\n<li>noindex : 搜索引擎不索引此网页。</li>\n<li>nofollow: 搜索引擎不继续通过此网页的链接索引搜索其它的网页。</li>\n<li>all : 搜索引擎将索引此网页与继续通过此网页的链接索引，等价于index，follow。</li>\n<li>index : 搜索引擎索引此网页。</li>\n<li>follow : 搜索引擎继续通过此网页的链接索引搜索其它的网页。</li>\n</ol>\n<h3 id=\"author-作者\"><a href=\"#author-作者\" class=\"headerlink\" title=\"author(作者)\"></a>author(作者)</h3><p>说明：用于标注网页作者</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"author\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"xxx\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"generator-网页制作软件\"><a href=\"#generator-网页制作软件\" class=\"headerlink\" title=\"generator(网页制作软件)\"></a>generator(网页制作软件)</h3><p>说明：用于标明网页是什么软件做的</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"generator\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"Sublime Text3\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"copyright-版权\"><a href=\"#copyright-版权\" class=\"headerlink\" title=\"copyright(版权)\"></a>copyright(版权)</h3><p>说明：用于标注版权信息</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"copyright\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"xxx\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"revisit-after-搜索引擎爬虫重访时间\"><a href=\"#revisit-after-搜索引擎爬虫重访时间\" class=\"headerlink\" title=\"revisit-after(搜索引擎爬虫重访时间)\"></a>revisit-after(搜索引擎爬虫重访时间)</h3><p>说明：如果页面不是经常更新，为了减轻搜索引擎爬虫对服务器带来的压力，可以设置一个爬虫的重访时间。如果重访时间过短，爬虫将按它们定义的默认时间来访问。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"revisit-after\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"7 days\"</span> &gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"renderer-双核浏览器渲染方式\"><a href=\"#renderer-双核浏览器渲染方式\" class=\"headerlink\" title=\"renderer(双核浏览器渲染方式)\"></a>renderer(双核浏览器渲染方式)</h3><p>说明：renderer是为双核浏览器准备的，用于指定双核浏览器默认以何种方式渲染页面。比如说360浏览器。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"renderer\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"webkit\"</span>&gt;</span> //默认webkit内核</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"renderer\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie-comp\"</span>&gt;</span> //默认IE兼容模式</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"renderer\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie-stand\"</span>&gt;</span> //默认IE标准模式</span><br></pre></td></tr></table></figure>\n<h2 id=\"http-equiv\"><a href=\"#http-equiv\" class=\"headerlink\" title=\"http-equiv\"></a>http-equiv</h2><h3 id=\"content-Type-设定网页字符集-推荐使用HTML5的方式\"><a href=\"#content-Type-设定网页字符集-推荐使用HTML5的方式\" class=\"headerlink\" title=\"content-Type(设定网页字符集)(推荐使用HTML5的方式)\"></a>content-Type(设定网页字符集)(推荐使用HTML5的方式)</h3><p>说明：用于设定网页字符集，便于浏览器解析与渲染页面举例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"content-Type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html;charset=utf-8\"</span>&gt;</span>  //旧的HTML，不推荐</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span> //HTML5设定网页字符集的方式，推荐使用UTF-8</span><br></pre></td></tr></table></figure>\n<h3 id=\"X-UA-Compatible-浏览器采取何种版本渲染当前页面\"><a href=\"#X-UA-Compatible-浏览器采取何种版本渲染当前页面\" class=\"headerlink\" title=\"X-UA-Compatible(浏览器采取何种版本渲染当前页面)\"></a>X-UA-Compatible(浏览器采取何种版本渲染当前页面)</h3><p>说明：用于告知浏览器以何种版本来渲染页面。（一般都设置为最新模式，在各大框架中这个设置也很常见。）举例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=edge,chrome=1\"</span>/&gt;</span> //指定IE和Chrome使用最新版本渲染当前页面</span><br></pre></td></tr></table></figure>\n<h3 id=\"cache-control-指定请求和响应遵循的缓存机制\"><a href=\"#cache-control-指定请求和响应遵循的缓存机制\" class=\"headerlink\" title=\"cache-control(指定请求和响应遵循的缓存机制)\"></a>cache-control(指定请求和响应遵循的缓存机制)</h3><p>说明：指导浏览器如何缓存某个响应以及缓存多长时间。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"cache-control\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"no-cache\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>共有以下几种用法：</p>\n<ol>\n<li><p>no-cache: 先发送请求，与服务器确认该资源是否被更改，如果未被更改，则使用缓存。</p>\n</li>\n<li><p>no-store: 不允许缓存，每次都要去服务器上，下载完整的响应。（安全措施）</p>\n</li>\n<li><p>public : 缓存所有响应，但并非必须。因为max-age也可以做到相同效果</p>\n</li>\n<li><p>private : 只为单个用户缓存，因此不允许任何中继进行缓存。（比如说CDN就不允许缓存private的响应）</p>\n</li>\n<li><p>maxage : 表示当前请求开始，该响应在多久内能被缓存和重用，而不去服务器重新请求。例如：max-age=60表示响应可以再缓存和重用 60 秒。<br>用法2.(禁止百度自动转码)<br>说明：用于禁止当前页面在移动端浏览时，被百度自动转码。虽然百度的本意是好的，但是转码效果很多时候却不尽人意。所以可以在head中加入例子中的那句话，就可以避免百度自动转码了。举例：</p>\n</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Cache-Control\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"no-siteapp\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"expires-网页到期时间\"><a href=\"#expires-网页到期时间\" class=\"headerlink\" title=\"expires(网页到期时间)\"></a>expires(网页到期时间)</h3><p>说明:用于设定网页的到期时间，过期后网页必须到服务器上重新传输。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"expires\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"Sunday 26 October 2016 01:00 GMT\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"refresh-自动刷新并指向某页面\"><a href=\"#refresh-自动刷新并指向某页面\" class=\"headerlink\" title=\"refresh(自动刷新并指向某页面)\"></a>refresh(自动刷新并指向某页面)</h3><p>说明：网页将在设定的时间内，自动刷新并调向设定的网址。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"refresh\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"2；URL=http://www.baidu.com/\"</span>&gt;</span> //意思是2秒后跳转向baidu</span><br></pre></td></tr></table></figure>\n<h3 id=\"Set-Cookie-cookie设定\"><a href=\"#Set-Cookie-cookie设定\" class=\"headerlink\" title=\"Set-Cookie(cookie设定)\"></a>Set-Cookie(cookie设定)</h3><p>说明：如果网页过期。那么这个网页存在本地的cookies也会被自动删除。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"set-cookie\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"runoobcookie=myContent;expires=Fri, 30 Dec 2015 12:00:00 GMT; path=http://www.runoob.com\"</span>&gt;</span></span><br></pre></td></tr></table></figure>"},{"layout":"[post]","title":"Promise原理和实现","date":"2019-02-05T01:57:01.000Z","_content":"### 什么是Promise\nPromise 对象用于表示一个异步操作的最终完成 (或失败), 及其结果值.\n<!-- more -->\n### Promise规范\n- ES6中使用[Promise/A+](https://juejin.im/post/5c4b0423e51d4525211c0fbc)规范。\n- Promise的标准理解\n  - promise对象有三种状态**pending**、**fulfilled**和**rejected**。\n  - promise对象的状态必须有并且只有上述三种当中的一种。\n  - 状态的改变只能是从pending到fulfilled或者pending到rejected。\n  - then方法返回一个promise。then 方法可以被同一个 promise 调用多次。\n```\npromise.then(onFulfilled, onRejected)\n```\n### Promise实现\n1. 构造函数\n```js\nfunction Promise(resolver) {}\n```\n2. 原型链\n```js\nPromise.prototype.then = function() {}\nPromise.prototype.catch = function() {}\n```\n3. 静态方法\n```js\nPromise.resolve = function() {}\nPromise.reject = function() {}\nPromise.all = function() {}\nPromise.race = function() {}\n```\n### Promise基本结构\n\n```js\nlet promise=new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve('FULFILLED')\n  }, 1000)\n})\npromise.then(a=> alert(a));\npromise.then(a => alert(a+1));\n```\n### Promise构造函数\n构造函数用法总结：\n1. 构造函数接收一个**executor**立即执行函数\n2. **executor**立即执行函数接收一个**resolve**函数\n3. **promise**对象的**then**方法绑定状态变为**fulfilled**时的回调\n4. **resolve**函数被调用时会触发**then**方法中的回调\n#### 构造函数的初步实现\n\n```js\nfunction Promise(executor) {\n    var self = this;\n    self.status = 'pending'; //promise当前的状态\n    self.data = undefined; //promise的值\n    self.onResolvedCallback = [];\n    //promise状态变为resolve时的回调函数集，可能有多个\n   function resolve(value) {\n       if(self.status === 'pending') {\n           self.status = 'resolved';\n           self.data = value;\n           for(var i = 0; i < self.onResolvedCallback.length; i++) {\n               self.onResolvedCallback[i](value);\n           }\n       }\n   }\n   executor(resolve);\n};\nPromise.prototype.then = function (resolve) {\n    this.onResolvedCallback.push(resolve);\n};\n```\n#### 添加reject结果\n\n```js\nfunction Promise(executor) {\n    var self = this;\n    self.status = 'pending'; //promise当前的状态\n    self.data = undefined; //promise的值\n    self.onResolvedCallback = [];\n    //promise状态变为resolve时的回调函数集，可能有多个\n    self.onRejectedCallback = [];\n    //promise状态变为reject时的回调函数集，可能有多个\n   function resolve(value) {\n       if(self.status === 'pending') {\n           self.status = 'resolved';\n           self.data = value;\n           for(var i = 0; i < self.onResolvedCallback.length; i++) {\n               self.onResolvedCallback[i](value);\n           }\n       }\n   }\n\n   function reject(reason) {\n        if(self.status === 'pending') {\n            self.status = 'rejected';\n            self.data = reason;\n            for(var i = 0; i < self.onRejectedCallback.length; i++) {\n                self.onRejectedCallback[i](reason);\n            }\n        }\n   }\n\n   try {\n       executor(resolve, reject);\n   } catch (e){\n       reject(e);\n   }\n};\nPromise.prototype.then = function (onResolve, onReject) {\n    this.onResolvedCallback.push(onResolve);\n    this.onRejectedCallback.push(onReject);\n};\n```\n小结：\n1. **executor**函数作为实参在创建**Promise**对象时传入**Promise**构造函数。\n2. **resolve**和**reject**函数作为实参传入**executor**函数。\n3. **value**作为实参传入**resolve**和**reject**函数。\n#### 如果executor自执行函数中的resolve函数立即触发时，发现Promise失效\n\n```js\nconst promise = new Promise((resolve) => {\n    resolve(1);\n});\npromise.then((a) => alert(a));\n\n```\n将promise的resolve和reject异步执行\n\n```js\nfunction resolve(value) {\n    setTimeout(function () {\n        if(self.status === 'pending') {\n            self.status = 'resolved';\n            self.data = value;\n            for(var i = 0; i < self.onResolvedCallback.length; i++) {\n                self.onResolvedCallback[i](value);\n            }\n        }\n    })\n}\n\nfunction reject(reason) {\n    setTimeout(function () {\n        if(self.status === 'pending') {\n            self.status = 'rejected';\n            self.data = reason;\n            for(var i = 0; i < self.onRejectedCallback.length; i++) {\n                self.onRejectedCallback[i](reason);\n            }\n        }\n    })\n}\n```\n### then方法\n\n```js\npromise.then(onFulfilled, onRejected)\n```\n1.  **then**方法返回一个新的**promise**对象。\n1.  **executor**自执行函数中的**resolve**参数调用时执行**then**方法的第一个回调函数**onResolved**。\n1.  **executor**自执行函数中的**reject**参数调用时执行**then**方法的第二个回调函数**onRejected**。\n\n```js\nPromise.prototype.then = function (onResolved, onRejected) {\n    var self = this;\n    var promise2;\n    onResolved = typeof onResolved === 'function' \n                ? onResolved \n                : function (value) {return value};\n    onRejected = typeof onRejected === 'function' \n                ? onRejected \n                : function (reason) {throw reason};\n    //promise对象当前状态为resolved\n    if(self.status === 'resolved') {\n        return promise2 = new Promise(function (resolve, reject) {\n            try {\n                //调用onResolve回调函数\n                var x = onResolved(self.data);\n                //如果onResolve回调函数返回值为一个promise对象\n                if(x instanceof  Promise) {\n                    //将它的结果作为promise2的结果\n                    x.then(resolve, reject);\n                } else {\n                    resolve(x);//执行promise2的onResolve回调\n           }        \n            } catch (e) {\n                reject(e); //执行promise2的onReject回调\n            }\n        })\n    }\n    //promise对象当前状态为rejected\n    if(self.status === 'rejected') {\n        return promise2 = new Promise(function (resolve, reject) {\n            try {\n                var x = onRejected(self.data);\n                if (x instanceof Promise) {\n                    x.then(resolve, reject)\n                } else {\n                    resolve(x)\n                }\n            } catch (e) {\n                reject(e)\n            }\n        })\n    }\n    //promise对象当前状态为pending\n    //此时并不能确定调用onResolved还是onRejected，需要等当前Promise状态确定。\n    //所以需要将callBack放入promise1的回调数组中\n    if(self.status === 'pending') {\n        return promise2 = new Promise(function (resolve, reject) {\n            self.onResolvedCallback.push(function (value) {\n                try {\n                    var x = onResolved(self.data);\n                    if (x instanceof Promise) {\n                        x.then(resolve, reject);\n                    } else {\n                        resolve(x);\n          }\n                } catch (e) {\n                    reject(e);\n                }\n            })\n            self.onRejectedCallback.push(function(reason) {\n                try {\n                    var x = onRejected(self.data);\n                    if (x instanceof Promise) {\n                        x.then(resolve, reject)\n                    } else {\n                        resolve(x);\n                    }\n                } catch (e) {\n                    reject(e)\n                }\n            })\n        })\n    }\n};\n```\n### 完整代码\n\n```js\nvar Promise = (function() {\n    function Promise(resolver) {\n        if (typeof resolver !== 'function') { //resolver必须是函数\n            throw new TypeError('Promise resolver ' + resolver + ' is not a function')\n        }\n        if (!(this instanceof Promise)) return new Promise(resolver)\n\n        var self = this //保存this\n        self.callbacks = [] //保存onResolve和onReject函数集合\n        self.status = 'pending' //当前状态\n\n        function resolve(value) {\n            setTimeout(function() { //异步调用\n                if (self.status !== 'pending') {\n                    return\n                }\n                self.status = 'resolved' //修改状态\n                self.data = value\n\n                for (var i = 0; i < self.callbacks.length; i++) {\n                    self.callbacks[i].onResolved(value)\n                }\n            })\n        }\n\n        function reject(reason) {\n            setTimeout(function(){ //异步调用\n                if (self.status !== 'pending') {\n                    return\n                }\n                self.status = 'rejected' //修改状态\n                self.data = reason\n\n                for (var i = 0; i < self.callbacks.length; i++) {\n                    self.callbacks[i].onRejected(reason)\n                }\n            })\n        }\n\n        try{\n            resolver(resolve, reject) //执行resolver函数\n        } catch(e) {\n            reject(e)\n        }\n    }\n\n    function resolvePromise(promise, x, resolve, reject) {\n        var then\n        var thenCalledOrThrow = false\n\n        if (promise === x) {\n            return reject(new TypeError('Chaining cycle detected for promise!'))\n        }\n\n        if ((x !== null) && ((typeof x === 'object') || (typeof x === 'function'))) {\n            try {\n                then = x.then\n                if (typeof then === 'function') {\n                    then.call(x, function rs(y) {\n                        if (thenCalledOrThrow) return\n                        thenCalledOrThrow = true\n                        return resolvePromise(promise, y, resolve, reject)\n                    }, function rj(r) {\n                        if (thenCalledOrThrow) return\n                        thenCalledOrThrow = true\n                        return reject(r)\n                    })\n                } else {\n                    return resolve(x)\n                }\n            } catch(e) {\n                if (thenCalledOrThrow) return\n                thenCalledOrThrow = true\n                return reject(e)\n            }\n        } else {\n            return resolve(x)\n        }\n    }\n\n    Promise.prototype.then = function(onResolved, onRejected) {\n        //健壮性处理，处理点击穿透\n        onResolved = typeof onResolved === 'function' ? onResolved : function(v){return v}\n        onRejected = typeof onRejected === 'function' ? onRejected : function(r){throw r}\n        var self = this\n        var promise2\n\n        //promise状态为resolved\n        if (self.status === 'resolved') {\n            return promise2 = new Promise(function(resolve, reject) {\n                setTimeout(function() {\n                    try {\n                        //调用then方法的onResolved回调\n                        var x = onResolved(self.data)\n                        //根据x的值修改promise2的状态\n                        resolvePromise(promise2, x, resolve, reject)\n                    } catch(e) {\n                        //promise2状态变为rejected\n                        return reject(e)\n                    }\n                })\n            })\n        }\n\n        //promise状态为rejected\n        if (self.status === 'rejected') {\n            return promise2 = new Promise(function(resolve, reject) {\n                setTimeout(function() {\n                    try {\n                        //调用then方法的onReject回调\n                        var x = onRejected(self.data)\n                        //根据x的值修改promise2的状态\n                        resolvePromise(promise2, x, resolve, reject)\n                    } catch(e) {\n                        //promise2状态变为rejected\n                        return reject(e)\n                    }\n                })\n            })\n        }\n\n        //promise状态为pending\n        //需要等待promise的状态改变\n        if (self.status === 'pending') {\n            return promise2 = new Promise(function(resolve, reject) {\n                self.callbacks.push({\n                    onResolved: function(value) {\n                        try {\n                            //调用then方法的onResolved回调\n                            var x = onResolved(value)\n                            //根据x的值修改promise2的状态\n                            resolvePromise(promise2, x, resolve, reject)\n                        } catch(e) {\n                            //promise2状态变为rejected\n                            return reject(e)\n                        }\n                    },\n                    onRejected: function(reason) {\n                        try {\n                            //调用then方法的onResolved回调\n                            var x = onRejected(reason)\n                            //根据x的值修改promise2的状态\n                            resolvePromise(promise2, x, resolve, reject)\n                        } catch(e) {\n                            //promise2状态变为rejected\n                            return reject(e)\n                        }\n                    }\n                })\n            })\n        }\n    }\n\n    //获取当前Promise传递的值\n    Promise.prototype.valueOf = function() {\n        return this.data\n    }\n\n    //由then方法实现catch方法\n    Promise.prototype.catch = function(onRejected) {\n        return this.then(null, onRejected)\n    }\n\n    //finally方法\n    Promise.prototype.finally = function(fn) {\n        return this.then(function(v){\n            setTimeout(fn)\n            return v\n        }, function(r){\n            setTimeout(fn)\n            throw r\n        })\n    }\n\n    Promise.prototype.spread = function(fn, onRejected) {\n        return this.then(function(values) {\n            return fn.apply(null, values)\n        }, onRejected)\n    }\n\n    Promise.prototype.inject = function(fn, onRejected) {\n        return this.then(function(v) {\n            return fn.apply(null, fn.toString().match(/\\((.*?)\\)/)[1].split(',').map(function(key){\n                return v[key];\n            }))\n        }, onRejected)\n    }\n\n    Promise.prototype.delay = function(duration) {\n        return this.then(function(value) {\n            return new Promise(function(resolve, reject) {\n                setTimeout(function() {\n                    resolve(value)\n                }, duration)\n            })\n        }, function(reason) {\n            return new Promise(function(resolve, reject) {\n                setTimeout(function() {\n                    reject(reason)\n                }, duration)\n            })\n        })\n    }\n\n    Promise.all = function(promises) {\n        return new Promise(function(resolve, reject) {\n            var resolvedCounter = 0\n            var promiseNum = promises.length\n            var resolvedValues = new Array(promiseNum)\n            for (var i = 0; i < promiseNum; i++) {\n                (function(i) {\n                    Promise.resolve(promises[i]).then(function(value) {\n                        resolvedCounter++\n                        resolvedValues[i] = value\n                        if (resolvedCounter == promiseNum) {\n                            return resolve(resolvedValues)\n                        }\n                    }, function(reason) {\n                        return reject(reason)\n                    })\n                })(i)\n            }\n        })\n    }\n\n    Promise.race = function(promises) {\n        return new Promise(function(resolve, reject) {\n            for (var i = 0; i < promises.length; i++) {\n                Promise.resolve(promises[i]).then(function(value) {\n                    return resolve(value)\n                }, function(reason) {\n                    return reject(reason)\n                })\n            }\n        })\n    }\n\n    Promise.resolve = function(value) {\n        var promise = new Promise(function(resolve, reject) {\n            resolvePromise(promise, value, resolve, reject)\n        })\n        return promise\n    }\n\n    Promise.reject = function(reason) {\n        return new Promise(function(resolve, reject) {\n            reject(reason)\n        })\n    }\n\n    Promise.fcall = function(fn){\n        // 虽然fn可以接收到上一层then里传来的参数，但是其实是undefined，所以跟没有是一样的，因为resolve没参数啊\n        return Promise.resolve().then(fn)\n    }\n\n    Promise.done = Promise.stop = function(){\n        return new Promise(function(){})\n    }\n\n    Promise.deferred = Promise.defer = function() {\n        var dfd = {}\n        dfd.promise = new Promise(function(resolve, reject) {\n            dfd.resolve = resolve\n            dfd.reject = reject\n        })\n        return dfd\n    }\n\n    try { // CommonJS compliance\n        module.exports = Promise\n    } catch(e) {}\n\n    return Promise\n})()\n```\n### 参考\n[Promise实现原理](https://www.jianshu.com/p/43de678e918a)  \n[Promise原理与实现](https://www.jianshu.com/p/b4f0425b22a1)\n\n\n\n\n\n\n\n","source":"_posts/promise原理和实现.md","raw":"---\nlayout: '[post]'\ntitle: Promise原理和实现\ndate: 2019-02-05 09:57:01\ntags: Promise\n---\n### 什么是Promise\nPromise 对象用于表示一个异步操作的最终完成 (或失败), 及其结果值.\n<!-- more -->\n### Promise规范\n- ES6中使用[Promise/A+](https://juejin.im/post/5c4b0423e51d4525211c0fbc)规范。\n- Promise的标准理解\n  - promise对象有三种状态**pending**、**fulfilled**和**rejected**。\n  - promise对象的状态必须有并且只有上述三种当中的一种。\n  - 状态的改变只能是从pending到fulfilled或者pending到rejected。\n  - then方法返回一个promise。then 方法可以被同一个 promise 调用多次。\n```\npromise.then(onFulfilled, onRejected)\n```\n### Promise实现\n1. 构造函数\n```js\nfunction Promise(resolver) {}\n```\n2. 原型链\n```js\nPromise.prototype.then = function() {}\nPromise.prototype.catch = function() {}\n```\n3. 静态方法\n```js\nPromise.resolve = function() {}\nPromise.reject = function() {}\nPromise.all = function() {}\nPromise.race = function() {}\n```\n### Promise基本结构\n\n```js\nlet promise=new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve('FULFILLED')\n  }, 1000)\n})\npromise.then(a=> alert(a));\npromise.then(a => alert(a+1));\n```\n### Promise构造函数\n构造函数用法总结：\n1. 构造函数接收一个**executor**立即执行函数\n2. **executor**立即执行函数接收一个**resolve**函数\n3. **promise**对象的**then**方法绑定状态变为**fulfilled**时的回调\n4. **resolve**函数被调用时会触发**then**方法中的回调\n#### 构造函数的初步实现\n\n```js\nfunction Promise(executor) {\n    var self = this;\n    self.status = 'pending'; //promise当前的状态\n    self.data = undefined; //promise的值\n    self.onResolvedCallback = [];\n    //promise状态变为resolve时的回调函数集，可能有多个\n   function resolve(value) {\n       if(self.status === 'pending') {\n           self.status = 'resolved';\n           self.data = value;\n           for(var i = 0; i < self.onResolvedCallback.length; i++) {\n               self.onResolvedCallback[i](value);\n           }\n       }\n   }\n   executor(resolve);\n};\nPromise.prototype.then = function (resolve) {\n    this.onResolvedCallback.push(resolve);\n};\n```\n#### 添加reject结果\n\n```js\nfunction Promise(executor) {\n    var self = this;\n    self.status = 'pending'; //promise当前的状态\n    self.data = undefined; //promise的值\n    self.onResolvedCallback = [];\n    //promise状态变为resolve时的回调函数集，可能有多个\n    self.onRejectedCallback = [];\n    //promise状态变为reject时的回调函数集，可能有多个\n   function resolve(value) {\n       if(self.status === 'pending') {\n           self.status = 'resolved';\n           self.data = value;\n           for(var i = 0; i < self.onResolvedCallback.length; i++) {\n               self.onResolvedCallback[i](value);\n           }\n       }\n   }\n\n   function reject(reason) {\n        if(self.status === 'pending') {\n            self.status = 'rejected';\n            self.data = reason;\n            for(var i = 0; i < self.onRejectedCallback.length; i++) {\n                self.onRejectedCallback[i](reason);\n            }\n        }\n   }\n\n   try {\n       executor(resolve, reject);\n   } catch (e){\n       reject(e);\n   }\n};\nPromise.prototype.then = function (onResolve, onReject) {\n    this.onResolvedCallback.push(onResolve);\n    this.onRejectedCallback.push(onReject);\n};\n```\n小结：\n1. **executor**函数作为实参在创建**Promise**对象时传入**Promise**构造函数。\n2. **resolve**和**reject**函数作为实参传入**executor**函数。\n3. **value**作为实参传入**resolve**和**reject**函数。\n#### 如果executor自执行函数中的resolve函数立即触发时，发现Promise失效\n\n```js\nconst promise = new Promise((resolve) => {\n    resolve(1);\n});\npromise.then((a) => alert(a));\n\n```\n将promise的resolve和reject异步执行\n\n```js\nfunction resolve(value) {\n    setTimeout(function () {\n        if(self.status === 'pending') {\n            self.status = 'resolved';\n            self.data = value;\n            for(var i = 0; i < self.onResolvedCallback.length; i++) {\n                self.onResolvedCallback[i](value);\n            }\n        }\n    })\n}\n\nfunction reject(reason) {\n    setTimeout(function () {\n        if(self.status === 'pending') {\n            self.status = 'rejected';\n            self.data = reason;\n            for(var i = 0; i < self.onRejectedCallback.length; i++) {\n                self.onRejectedCallback[i](reason);\n            }\n        }\n    })\n}\n```\n### then方法\n\n```js\npromise.then(onFulfilled, onRejected)\n```\n1.  **then**方法返回一个新的**promise**对象。\n1.  **executor**自执行函数中的**resolve**参数调用时执行**then**方法的第一个回调函数**onResolved**。\n1.  **executor**自执行函数中的**reject**参数调用时执行**then**方法的第二个回调函数**onRejected**。\n\n```js\nPromise.prototype.then = function (onResolved, onRejected) {\n    var self = this;\n    var promise2;\n    onResolved = typeof onResolved === 'function' \n                ? onResolved \n                : function (value) {return value};\n    onRejected = typeof onRejected === 'function' \n                ? onRejected \n                : function (reason) {throw reason};\n    //promise对象当前状态为resolved\n    if(self.status === 'resolved') {\n        return promise2 = new Promise(function (resolve, reject) {\n            try {\n                //调用onResolve回调函数\n                var x = onResolved(self.data);\n                //如果onResolve回调函数返回值为一个promise对象\n                if(x instanceof  Promise) {\n                    //将它的结果作为promise2的结果\n                    x.then(resolve, reject);\n                } else {\n                    resolve(x);//执行promise2的onResolve回调\n           }        \n            } catch (e) {\n                reject(e); //执行promise2的onReject回调\n            }\n        })\n    }\n    //promise对象当前状态为rejected\n    if(self.status === 'rejected') {\n        return promise2 = new Promise(function (resolve, reject) {\n            try {\n                var x = onRejected(self.data);\n                if (x instanceof Promise) {\n                    x.then(resolve, reject)\n                } else {\n                    resolve(x)\n                }\n            } catch (e) {\n                reject(e)\n            }\n        })\n    }\n    //promise对象当前状态为pending\n    //此时并不能确定调用onResolved还是onRejected，需要等当前Promise状态确定。\n    //所以需要将callBack放入promise1的回调数组中\n    if(self.status === 'pending') {\n        return promise2 = new Promise(function (resolve, reject) {\n            self.onResolvedCallback.push(function (value) {\n                try {\n                    var x = onResolved(self.data);\n                    if (x instanceof Promise) {\n                        x.then(resolve, reject);\n                    } else {\n                        resolve(x);\n          }\n                } catch (e) {\n                    reject(e);\n                }\n            })\n            self.onRejectedCallback.push(function(reason) {\n                try {\n                    var x = onRejected(self.data);\n                    if (x instanceof Promise) {\n                        x.then(resolve, reject)\n                    } else {\n                        resolve(x);\n                    }\n                } catch (e) {\n                    reject(e)\n                }\n            })\n        })\n    }\n};\n```\n### 完整代码\n\n```js\nvar Promise = (function() {\n    function Promise(resolver) {\n        if (typeof resolver !== 'function') { //resolver必须是函数\n            throw new TypeError('Promise resolver ' + resolver + ' is not a function')\n        }\n        if (!(this instanceof Promise)) return new Promise(resolver)\n\n        var self = this //保存this\n        self.callbacks = [] //保存onResolve和onReject函数集合\n        self.status = 'pending' //当前状态\n\n        function resolve(value) {\n            setTimeout(function() { //异步调用\n                if (self.status !== 'pending') {\n                    return\n                }\n                self.status = 'resolved' //修改状态\n                self.data = value\n\n                for (var i = 0; i < self.callbacks.length; i++) {\n                    self.callbacks[i].onResolved(value)\n                }\n            })\n        }\n\n        function reject(reason) {\n            setTimeout(function(){ //异步调用\n                if (self.status !== 'pending') {\n                    return\n                }\n                self.status = 'rejected' //修改状态\n                self.data = reason\n\n                for (var i = 0; i < self.callbacks.length; i++) {\n                    self.callbacks[i].onRejected(reason)\n                }\n            })\n        }\n\n        try{\n            resolver(resolve, reject) //执行resolver函数\n        } catch(e) {\n            reject(e)\n        }\n    }\n\n    function resolvePromise(promise, x, resolve, reject) {\n        var then\n        var thenCalledOrThrow = false\n\n        if (promise === x) {\n            return reject(new TypeError('Chaining cycle detected for promise!'))\n        }\n\n        if ((x !== null) && ((typeof x === 'object') || (typeof x === 'function'))) {\n            try {\n                then = x.then\n                if (typeof then === 'function') {\n                    then.call(x, function rs(y) {\n                        if (thenCalledOrThrow) return\n                        thenCalledOrThrow = true\n                        return resolvePromise(promise, y, resolve, reject)\n                    }, function rj(r) {\n                        if (thenCalledOrThrow) return\n                        thenCalledOrThrow = true\n                        return reject(r)\n                    })\n                } else {\n                    return resolve(x)\n                }\n            } catch(e) {\n                if (thenCalledOrThrow) return\n                thenCalledOrThrow = true\n                return reject(e)\n            }\n        } else {\n            return resolve(x)\n        }\n    }\n\n    Promise.prototype.then = function(onResolved, onRejected) {\n        //健壮性处理，处理点击穿透\n        onResolved = typeof onResolved === 'function' ? onResolved : function(v){return v}\n        onRejected = typeof onRejected === 'function' ? onRejected : function(r){throw r}\n        var self = this\n        var promise2\n\n        //promise状态为resolved\n        if (self.status === 'resolved') {\n            return promise2 = new Promise(function(resolve, reject) {\n                setTimeout(function() {\n                    try {\n                        //调用then方法的onResolved回调\n                        var x = onResolved(self.data)\n                        //根据x的值修改promise2的状态\n                        resolvePromise(promise2, x, resolve, reject)\n                    } catch(e) {\n                        //promise2状态变为rejected\n                        return reject(e)\n                    }\n                })\n            })\n        }\n\n        //promise状态为rejected\n        if (self.status === 'rejected') {\n            return promise2 = new Promise(function(resolve, reject) {\n                setTimeout(function() {\n                    try {\n                        //调用then方法的onReject回调\n                        var x = onRejected(self.data)\n                        //根据x的值修改promise2的状态\n                        resolvePromise(promise2, x, resolve, reject)\n                    } catch(e) {\n                        //promise2状态变为rejected\n                        return reject(e)\n                    }\n                })\n            })\n        }\n\n        //promise状态为pending\n        //需要等待promise的状态改变\n        if (self.status === 'pending') {\n            return promise2 = new Promise(function(resolve, reject) {\n                self.callbacks.push({\n                    onResolved: function(value) {\n                        try {\n                            //调用then方法的onResolved回调\n                            var x = onResolved(value)\n                            //根据x的值修改promise2的状态\n                            resolvePromise(promise2, x, resolve, reject)\n                        } catch(e) {\n                            //promise2状态变为rejected\n                            return reject(e)\n                        }\n                    },\n                    onRejected: function(reason) {\n                        try {\n                            //调用then方法的onResolved回调\n                            var x = onRejected(reason)\n                            //根据x的值修改promise2的状态\n                            resolvePromise(promise2, x, resolve, reject)\n                        } catch(e) {\n                            //promise2状态变为rejected\n                            return reject(e)\n                        }\n                    }\n                })\n            })\n        }\n    }\n\n    //获取当前Promise传递的值\n    Promise.prototype.valueOf = function() {\n        return this.data\n    }\n\n    //由then方法实现catch方法\n    Promise.prototype.catch = function(onRejected) {\n        return this.then(null, onRejected)\n    }\n\n    //finally方法\n    Promise.prototype.finally = function(fn) {\n        return this.then(function(v){\n            setTimeout(fn)\n            return v\n        }, function(r){\n            setTimeout(fn)\n            throw r\n        })\n    }\n\n    Promise.prototype.spread = function(fn, onRejected) {\n        return this.then(function(values) {\n            return fn.apply(null, values)\n        }, onRejected)\n    }\n\n    Promise.prototype.inject = function(fn, onRejected) {\n        return this.then(function(v) {\n            return fn.apply(null, fn.toString().match(/\\((.*?)\\)/)[1].split(',').map(function(key){\n                return v[key];\n            }))\n        }, onRejected)\n    }\n\n    Promise.prototype.delay = function(duration) {\n        return this.then(function(value) {\n            return new Promise(function(resolve, reject) {\n                setTimeout(function() {\n                    resolve(value)\n                }, duration)\n            })\n        }, function(reason) {\n            return new Promise(function(resolve, reject) {\n                setTimeout(function() {\n                    reject(reason)\n                }, duration)\n            })\n        })\n    }\n\n    Promise.all = function(promises) {\n        return new Promise(function(resolve, reject) {\n            var resolvedCounter = 0\n            var promiseNum = promises.length\n            var resolvedValues = new Array(promiseNum)\n            for (var i = 0; i < promiseNum; i++) {\n                (function(i) {\n                    Promise.resolve(promises[i]).then(function(value) {\n                        resolvedCounter++\n                        resolvedValues[i] = value\n                        if (resolvedCounter == promiseNum) {\n                            return resolve(resolvedValues)\n                        }\n                    }, function(reason) {\n                        return reject(reason)\n                    })\n                })(i)\n            }\n        })\n    }\n\n    Promise.race = function(promises) {\n        return new Promise(function(resolve, reject) {\n            for (var i = 0; i < promises.length; i++) {\n                Promise.resolve(promises[i]).then(function(value) {\n                    return resolve(value)\n                }, function(reason) {\n                    return reject(reason)\n                })\n            }\n        })\n    }\n\n    Promise.resolve = function(value) {\n        var promise = new Promise(function(resolve, reject) {\n            resolvePromise(promise, value, resolve, reject)\n        })\n        return promise\n    }\n\n    Promise.reject = function(reason) {\n        return new Promise(function(resolve, reject) {\n            reject(reason)\n        })\n    }\n\n    Promise.fcall = function(fn){\n        // 虽然fn可以接收到上一层then里传来的参数，但是其实是undefined，所以跟没有是一样的，因为resolve没参数啊\n        return Promise.resolve().then(fn)\n    }\n\n    Promise.done = Promise.stop = function(){\n        return new Promise(function(){})\n    }\n\n    Promise.deferred = Promise.defer = function() {\n        var dfd = {}\n        dfd.promise = new Promise(function(resolve, reject) {\n            dfd.resolve = resolve\n            dfd.reject = reject\n        })\n        return dfd\n    }\n\n    try { // CommonJS compliance\n        module.exports = Promise\n    } catch(e) {}\n\n    return Promise\n})()\n```\n### 参考\n[Promise实现原理](https://www.jianshu.com/p/43de678e918a)  \n[Promise原理与实现](https://www.jianshu.com/p/b4f0425b22a1)\n\n\n\n\n\n\n\n","slug":"promise原理和实现","published":1,"updated":"2020-01-24T14:55:13.000Z","comments":1,"photos":[],"link":"","_id":"ck65xoth10004d4s6gpsp356u","content":"<h3 id=\"什么是Promise\"><a href=\"#什么是Promise\" class=\"headerlink\" title=\"什么是Promise\"></a>什么是Promise</h3><p>Promise 对象用于表示一个异步操作的最终完成 (或失败), 及其结果值.</p>\n<a id=\"more\"></a>\n<h3 id=\"Promise规范\"><a href=\"#Promise规范\" class=\"headerlink\" title=\"Promise规范\"></a>Promise规范</h3><ul>\n<li>ES6中使用<a href=\"https://juejin.im/post/5c4b0423e51d4525211c0fbc\" target=\"_blank\" rel=\"noopener\">Promise/A+</a>规范。</li>\n<li>Promise的标准理解<ul>\n<li>promise对象有三种状态<strong>pending</strong>、<strong>fulfilled</strong>和<strong>rejected</strong>。</li>\n<li>promise对象的状态必须有并且只有上述三种当中的一种。</li>\n<li>状态的改变只能是从pending到fulfilled或者pending到rejected。</li>\n<li>then方法返回一个promise。then 方法可以被同一个 promise 调用多次。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promise.then(onFulfilled, onRejected)</span><br></pre></td></tr></table></figure>\n<h3 id=\"Promise实现\"><a href=\"#Promise实现\" class=\"headerlink\" title=\"Promise实现\"></a>Promise实现</h3></li>\n</ul>\n</li>\n</ul>\n<ol>\n<li>构造函数<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Promise</span>(<span class=\"params\">resolver</span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure></li>\n<li>原型链<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.then = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.catch = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure></li>\n<li>静态方法<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.reject = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.all = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.race = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Promise基本结构\"><a href=\"#Promise基本结构\" class=\"headerlink\" title=\"Promise基本结构\"></a>Promise基本结构</h3></li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> promise=<span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    resolve(<span class=\"string\">'FULFILLED'</span>)</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">promise.then(<span class=\"function\"><span class=\"params\">a</span>=&gt;</span> alert(a));</span><br><span class=\"line\">promise.then(<span class=\"function\"><span class=\"params\">a</span> =&gt;</span> alert(a+<span class=\"number\">1</span>));</span><br></pre></td></tr></table></figure>\n<h3 id=\"Promise构造函数\"><a href=\"#Promise构造函数\" class=\"headerlink\" title=\"Promise构造函数\"></a>Promise构造函数</h3><p>构造函数用法总结：</p>\n<ol>\n<li>构造函数接收一个<strong>executor</strong>立即执行函数</li>\n<li><strong>executor</strong>立即执行函数接收一个<strong>resolve</strong>函数</li>\n<li><strong>promise</strong>对象的<strong>then</strong>方法绑定状态变为<strong>fulfilled</strong>时的回调</li>\n<li><strong>resolve</strong>函数被调用时会触发<strong>then</strong>方法中的回调<h4 id=\"构造函数的初步实现\"><a href=\"#构造函数的初步实现\" class=\"headerlink\" title=\"构造函数的初步实现\"></a>构造函数的初步实现</h4></li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Promise</span>(<span class=\"params\">executor</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    self.status = <span class=\"string\">'pending'</span>; <span class=\"comment\">//promise当前的状态</span></span><br><span class=\"line\">    self.data = <span class=\"literal\">undefined</span>; <span class=\"comment\">//promise的值</span></span><br><span class=\"line\">    self.onResolvedCallback = [];</span><br><span class=\"line\">    <span class=\"comment\">//promise状态变为resolve时的回调函数集，可能有多个</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolve</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(self.status === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">           self.status = <span class=\"string\">'resolved'</span>;</span><br><span class=\"line\">           self.data = value;</span><br><span class=\"line\">           <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; self.onResolvedCallback.length; i++) &#123;</span><br><span class=\"line\">               self.onResolvedCallback[i](value);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   executor(resolve);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.then = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onResolvedCallback.push(resolve);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"添加reject结果\"><a href=\"#添加reject结果\" class=\"headerlink\" title=\"添加reject结果\"></a>添加reject结果</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Promise</span>(<span class=\"params\">executor</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    self.status = <span class=\"string\">'pending'</span>; <span class=\"comment\">//promise当前的状态</span></span><br><span class=\"line\">    self.data = <span class=\"literal\">undefined</span>; <span class=\"comment\">//promise的值</span></span><br><span class=\"line\">    self.onResolvedCallback = [];</span><br><span class=\"line\">    <span class=\"comment\">//promise状态变为resolve时的回调函数集，可能有多个</span></span><br><span class=\"line\">    self.onRejectedCallback = [];</span><br><span class=\"line\">    <span class=\"comment\">//promise状态变为reject时的回调函数集，可能有多个</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolve</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(self.status === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">           self.status = <span class=\"string\">'resolved'</span>;</span><br><span class=\"line\">           self.data = value;</span><br><span class=\"line\">           <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; self.onResolvedCallback.length; i++) &#123;</span><br><span class=\"line\">               self.onResolvedCallback[i](value);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reject</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(self.status === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">            self.status = <span class=\"string\">'rejected'</span>;</span><br><span class=\"line\">            self.data = reason;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; self.onRejectedCallback.length; i++) &#123;</span><br><span class=\"line\">                self.onRejectedCallback[i](reason);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">       executor(resolve, reject);</span><br><span class=\"line\">   &#125; <span class=\"keyword\">catch</span> (e)&#123;</span><br><span class=\"line\">       reject(e);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.then = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">onResolve, onReject</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onResolvedCallback.push(onResolve);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onRejectedCallback.push(onReject);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>小结：</p>\n<ol>\n<li><strong>executor</strong>函数作为实参在创建<strong>Promise</strong>对象时传入<strong>Promise</strong>构造函数。</li>\n<li><strong>resolve</strong>和<strong>reject</strong>函数作为实参传入<strong>executor</strong>函数。</li>\n<li><strong>value</strong>作为实参传入<strong>resolve</strong>和<strong>reject</strong>函数。<h4 id=\"如果executor自执行函数中的resolve函数立即触发时，发现Promise失效\"><a href=\"#如果executor自执行函数中的resolve函数立即触发时，发现Promise失效\" class=\"headerlink\" title=\"如果executor自执行函数中的resolve函数立即触发时，发现Promise失效\"></a>如果executor自执行函数中的resolve函数立即触发时，发现Promise失效</h4></li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    resolve(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">promise.then(<span class=\"function\">(<span class=\"params\">a</span>) =&gt;</span> alert(a));</span><br></pre></td></tr></table></figure>\n<p>将promise的resolve和reject异步执行</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolve</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(self.status === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">            self.status = <span class=\"string\">'resolved'</span>;</span><br><span class=\"line\">            self.data = value;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; self.onResolvedCallback.length; i++) &#123;</span><br><span class=\"line\">                self.onResolvedCallback[i](value);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reject</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(self.status === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">            self.status = <span class=\"string\">'rejected'</span>;</span><br><span class=\"line\">            self.data = reason;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; self.onRejectedCallback.length; i++) &#123;</span><br><span class=\"line\">                self.onRejectedCallback[i](reason);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"then方法\"><a href=\"#then方法\" class=\"headerlink\" title=\"then方法\"></a>then方法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promise.then(onFulfilled, onRejected)</span><br></pre></td></tr></table></figure>\n<ol>\n<li><strong>then</strong>方法返回一个新的<strong>promise</strong>对象。</li>\n<li><strong>executor</strong>自执行函数中的<strong>resolve</strong>参数调用时执行<strong>then</strong>方法的第一个回调函数<strong>onResolved</strong>。</li>\n<li><strong>executor</strong>自执行函数中的<strong>reject</strong>参数调用时执行<strong>then</strong>方法的第二个回调函数<strong>onRejected</strong>。</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.then = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">onResolved, onRejected</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> promise2;</span><br><span class=\"line\">    onResolved = <span class=\"keyword\">typeof</span> onResolved === <span class=\"string\">'function'</span> </span><br><span class=\"line\">                ? onResolved </span><br><span class=\"line\">                : <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;<span class=\"keyword\">return</span> value&#125;;</span><br><span class=\"line\">    onRejected = <span class=\"keyword\">typeof</span> onRejected === <span class=\"string\">'function'</span> </span><br><span class=\"line\">                ? onRejected </span><br><span class=\"line\">                : <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">reason</span>) </span>&#123;<span class=\"keyword\">throw</span> reason&#125;;</span><br><span class=\"line\">    <span class=\"comment\">//promise对象当前状态为resolved</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(self.status === <span class=\"string\">'resolved'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> promise2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//调用onResolve回调函数</span></span><br><span class=\"line\">                <span class=\"keyword\">var</span> x = onResolved(self.data);</span><br><span class=\"line\">                <span class=\"comment\">//如果onResolve回调函数返回值为一个promise对象</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(x <span class=\"keyword\">instanceof</span>  <span class=\"built_in\">Promise</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//将它的结果作为promise2的结果</span></span><br><span class=\"line\">                    x.then(resolve, reject);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    resolve(x);<span class=\"comment\">//执行promise2的onResolve回调</span></span><br><span class=\"line\">           &#125;        </span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">                reject(e); <span class=\"comment\">//执行promise2的onReject回调</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//promise对象当前状态为rejected</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(self.status === <span class=\"string\">'rejected'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> promise2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> x = onRejected(self.data);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (x <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>) &#123;</span><br><span class=\"line\">                    x.then(resolve, reject)</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    resolve(x)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">                reject(e)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//promise对象当前状态为pending</span></span><br><span class=\"line\">    <span class=\"comment\">//此时并不能确定调用onResolved还是onRejected，需要等当前Promise状态确定。</span></span><br><span class=\"line\">    <span class=\"comment\">//所以需要将callBack放入promise1的回调数组中</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(self.status === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> promise2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">            self.onResolvedCallback.push(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> x = onResolved(self.data);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (x <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>) &#123;</span><br><span class=\"line\">                        x.then(resolve, reject);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        resolve(x);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">                    reject(e);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            self.onRejectedCallback.push(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> x = onRejected(self.data);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (x <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>) &#123;</span><br><span class=\"line\">                        x.then(resolve, reject)</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        resolve(x);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">                    reject(e)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">Promise</span> = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Promise</span>(<span class=\"params\">resolver</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> resolver !== <span class=\"string\">'function'</span>) &#123; <span class=\"comment\">//resolver必须是函数</span></span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'Promise resolver '</span> + resolver + <span class=\"string\">' is not a function'</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!(<span class=\"keyword\">this</span> <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>)) <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(resolver)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span> <span class=\"comment\">//保存this</span></span><br><span class=\"line\">        self.callbacks = [] <span class=\"comment\">//保存onResolve和onReject函数集合</span></span><br><span class=\"line\">        self.status = <span class=\"string\">'pending'</span> <span class=\"comment\">//当前状态</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolve</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">            setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">//异步调用</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (self.status !== <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                self.status = <span class=\"string\">'resolved'</span> <span class=\"comment\">//修改状态</span></span><br><span class=\"line\">                self.data = value</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; self.callbacks.length; i++) &#123;</span><br><span class=\"line\">                    self.callbacks[i].onResolved(value)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reject</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">            setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"comment\">//异步调用</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (self.status !== <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                self.status = <span class=\"string\">'rejected'</span> <span class=\"comment\">//修改状态</span></span><br><span class=\"line\">                self.data = reason</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; self.callbacks.length; i++) &#123;</span><br><span class=\"line\">                    self.callbacks[i].onRejected(reason)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            resolver(resolve, reject) <span class=\"comment\">//执行resolver函数</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">            reject(e)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolvePromise</span>(<span class=\"params\">promise, x, resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> then</span><br><span class=\"line\">        <span class=\"keyword\">var</span> thenCalledOrThrow = <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (promise === x) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> reject(<span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'Chaining cycle detected for promise!'</span>))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((x !== <span class=\"literal\">null</span>) &amp;&amp; ((<span class=\"keyword\">typeof</span> x === <span class=\"string\">'object'</span>) || (<span class=\"keyword\">typeof</span> x === <span class=\"string\">'function'</span>))) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                then = x.then</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> then === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">                    then.call(x, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">rs</span>(<span class=\"params\">y</span>) </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (thenCalledOrThrow) <span class=\"keyword\">return</span></span><br><span class=\"line\">                        thenCalledOrThrow = <span class=\"literal\">true</span></span><br><span class=\"line\">                        <span class=\"keyword\">return</span> resolvePromise(promise, y, resolve, reject)</span><br><span class=\"line\">                    &#125;, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">rj</span>(<span class=\"params\">r</span>) </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (thenCalledOrThrow) <span class=\"keyword\">return</span></span><br><span class=\"line\">                        thenCalledOrThrow = <span class=\"literal\">true</span></span><br><span class=\"line\">                        <span class=\"keyword\">return</span> reject(r)</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> resolve(x)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (thenCalledOrThrow) <span class=\"keyword\">return</span></span><br><span class=\"line\">                thenCalledOrThrow = <span class=\"literal\">true</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> reject(e)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> resolve(x)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.prototype.then = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">onResolved, onRejected</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//健壮性处理，处理点击穿透</span></span><br><span class=\"line\">        onResolved = <span class=\"keyword\">typeof</span> onResolved === <span class=\"string\">'function'</span> ? onResolved : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>)</span>&#123;<span class=\"keyword\">return</span> v&#125;</span><br><span class=\"line\">        onRejected = <span class=\"keyword\">typeof</span> onRejected === <span class=\"string\">'function'</span> ? onRejected : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">r</span>)</span>&#123;<span class=\"keyword\">throw</span> r&#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> promise2</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//promise状态为resolved</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (self.status === <span class=\"string\">'resolved'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> promise2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">                setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//调用then方法的onResolved回调</span></span><br><span class=\"line\">                        <span class=\"keyword\">var</span> x = onResolved(self.data)</span><br><span class=\"line\">                        <span class=\"comment\">//根据x的值修改promise2的状态</span></span><br><span class=\"line\">                        resolvePromise(promise2, x, resolve, reject)</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//promise2状态变为rejected</span></span><br><span class=\"line\">                        <span class=\"keyword\">return</span> reject(e)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//promise状态为rejected</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (self.status === <span class=\"string\">'rejected'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> promise2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">                setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//调用then方法的onReject回调</span></span><br><span class=\"line\">                        <span class=\"keyword\">var</span> x = onRejected(self.data)</span><br><span class=\"line\">                        <span class=\"comment\">//根据x的值修改promise2的状态</span></span><br><span class=\"line\">                        resolvePromise(promise2, x, resolve, reject)</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//promise2状态变为rejected</span></span><br><span class=\"line\">                        <span class=\"keyword\">return</span> reject(e)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//promise状态为pending</span></span><br><span class=\"line\">        <span class=\"comment\">//需要等待promise的状态改变</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (self.status === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> promise2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">                self.callbacks.push(&#123;</span><br><span class=\"line\">                    onResolved: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                            <span class=\"comment\">//调用then方法的onResolved回调</span></span><br><span class=\"line\">                            <span class=\"keyword\">var</span> x = onResolved(value)</span><br><span class=\"line\">                            <span class=\"comment\">//根据x的值修改promise2的状态</span></span><br><span class=\"line\">                            resolvePromise(promise2, x, resolve, reject)</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">                            <span class=\"comment\">//promise2状态变为rejected</span></span><br><span class=\"line\">                            <span class=\"keyword\">return</span> reject(e)</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    onRejected: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                            <span class=\"comment\">//调用then方法的onResolved回调</span></span><br><span class=\"line\">                            <span class=\"keyword\">var</span> x = onRejected(reason)</span><br><span class=\"line\">                            <span class=\"comment\">//根据x的值修改promise2的状态</span></span><br><span class=\"line\">                            resolvePromise(promise2, x, resolve, reject)</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">                            <span class=\"comment\">//promise2状态变为rejected</span></span><br><span class=\"line\">                            <span class=\"keyword\">return</span> reject(e)</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//获取当前Promise传递的值</span></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.prototype.valueOf = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.data</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//由then方法实现catch方法</span></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.prototype.catch = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">onRejected</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.then(<span class=\"literal\">null</span>, onRejected)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//finally方法</span></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.prototype.finally = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>)</span>&#123;</span><br><span class=\"line\">            setTimeout(fn)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> v</span><br><span class=\"line\">        &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">r</span>)</span>&#123;</span><br><span class=\"line\">            setTimeout(fn)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> r</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.prototype.spread = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn, onRejected</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">values</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> fn.apply(<span class=\"literal\">null</span>, values)</span><br><span class=\"line\">        &#125;, onRejected)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.prototype.inject = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn, onRejected</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> fn.apply(<span class=\"literal\">null</span>, fn.toString().match(<span class=\"regexp\">/\\((.*?)\\)/</span>)[<span class=\"number\">1</span>].split(<span class=\"string\">','</span>).map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>)</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> v[key];</span><br><span class=\"line\">            &#125;))</span><br><span class=\"line\">        &#125;, onRejected)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.prototype.delay = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">duration</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">                setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                    resolve(value)</span><br><span class=\"line\">                &#125;, duration)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">                setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                    reject(reason)</span><br><span class=\"line\">                &#125;, duration)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.all = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">promises</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> resolvedCounter = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> promiseNum = promises.length</span><br><span class=\"line\">            <span class=\"keyword\">var</span> resolvedValues = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(promiseNum)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; promiseNum; i++) &#123;</span><br><span class=\"line\">                (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">                    <span class=\"built_in\">Promise</span>.resolve(promises[i]).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">                        resolvedCounter++</span><br><span class=\"line\">                        resolvedValues[i] = value</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (resolvedCounter == promiseNum) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">return</span> resolve(resolvedValues)</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> reject(reason)</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                &#125;)(i)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.race = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">promises</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; promises.length; i++) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">Promise</span>.resolve(promises[i]).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> resolve(value)</span><br><span class=\"line\">                &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> reject(reason)</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.resolve = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">            resolvePromise(promise, value, resolve, reject)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> promise</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.reject = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">            reject(reason)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.fcall = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 虽然fn可以接收到上一层then里传来的参数，但是其实是undefined，所以跟没有是一样的，因为resolve没参数啊</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve().then(fn)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.done = <span class=\"built_in\">Promise</span>.stop = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.deferred = <span class=\"built_in\">Promise</span>.defer = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> dfd = &#123;&#125;</span><br><span class=\"line\">        dfd.promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">            dfd.resolve = resolve</span><br><span class=\"line\">            dfd.reject = reject</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dfd</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123; <span class=\"comment\">// CommonJS compliance</span></span><br><span class=\"line\">        <span class=\"built_in\">module</span>.exports = <span class=\"built_in\">Promise</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span>(e) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span></span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://www.jianshu.com/p/43de678e918a\" target=\"_blank\" rel=\"noopener\">Promise实现原理</a><br><a href=\"https://www.jianshu.com/p/b4f0425b22a1\" target=\"_blank\" rel=\"noopener\">Promise原理与实现</a></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"什么是Promise\"><a href=\"#什么是Promise\" class=\"headerlink\" title=\"什么是Promise\"></a>什么是Promise</h3><p>Promise 对象用于表示一个异步操作的最终完成 (或失败), 及其结果值.</p>","more":"<h3 id=\"Promise规范\"><a href=\"#Promise规范\" class=\"headerlink\" title=\"Promise规范\"></a>Promise规范</h3><ul>\n<li>ES6中使用<a href=\"https://juejin.im/post/5c4b0423e51d4525211c0fbc\" target=\"_blank\" rel=\"noopener\">Promise/A+</a>规范。</li>\n<li>Promise的标准理解<ul>\n<li>promise对象有三种状态<strong>pending</strong>、<strong>fulfilled</strong>和<strong>rejected</strong>。</li>\n<li>promise对象的状态必须有并且只有上述三种当中的一种。</li>\n<li>状态的改变只能是从pending到fulfilled或者pending到rejected。</li>\n<li>then方法返回一个promise。then 方法可以被同一个 promise 调用多次。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promise.then(onFulfilled, onRejected)</span><br></pre></td></tr></table></figure>\n<h3 id=\"Promise实现\"><a href=\"#Promise实现\" class=\"headerlink\" title=\"Promise实现\"></a>Promise实现</h3></li>\n</ul>\n</li>\n</ul>\n<ol>\n<li>构造函数<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Promise</span>(<span class=\"params\">resolver</span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure></li>\n<li>原型链<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.then = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.catch = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure></li>\n<li>静态方法<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.reject = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.all = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.race = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Promise基本结构\"><a href=\"#Promise基本结构\" class=\"headerlink\" title=\"Promise基本结构\"></a>Promise基本结构</h3></li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> promise=<span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    resolve(<span class=\"string\">'FULFILLED'</span>)</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">promise.then(<span class=\"function\"><span class=\"params\">a</span>=&gt;</span> alert(a));</span><br><span class=\"line\">promise.then(<span class=\"function\"><span class=\"params\">a</span> =&gt;</span> alert(a+<span class=\"number\">1</span>));</span><br></pre></td></tr></table></figure>\n<h3 id=\"Promise构造函数\"><a href=\"#Promise构造函数\" class=\"headerlink\" title=\"Promise构造函数\"></a>Promise构造函数</h3><p>构造函数用法总结：</p>\n<ol>\n<li>构造函数接收一个<strong>executor</strong>立即执行函数</li>\n<li><strong>executor</strong>立即执行函数接收一个<strong>resolve</strong>函数</li>\n<li><strong>promise</strong>对象的<strong>then</strong>方法绑定状态变为<strong>fulfilled</strong>时的回调</li>\n<li><strong>resolve</strong>函数被调用时会触发<strong>then</strong>方法中的回调<h4 id=\"构造函数的初步实现\"><a href=\"#构造函数的初步实现\" class=\"headerlink\" title=\"构造函数的初步实现\"></a>构造函数的初步实现</h4></li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Promise</span>(<span class=\"params\">executor</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    self.status = <span class=\"string\">'pending'</span>; <span class=\"comment\">//promise当前的状态</span></span><br><span class=\"line\">    self.data = <span class=\"literal\">undefined</span>; <span class=\"comment\">//promise的值</span></span><br><span class=\"line\">    self.onResolvedCallback = [];</span><br><span class=\"line\">    <span class=\"comment\">//promise状态变为resolve时的回调函数集，可能有多个</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolve</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(self.status === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">           self.status = <span class=\"string\">'resolved'</span>;</span><br><span class=\"line\">           self.data = value;</span><br><span class=\"line\">           <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; self.onResolvedCallback.length; i++) &#123;</span><br><span class=\"line\">               self.onResolvedCallback[i](value);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   executor(resolve);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.then = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onResolvedCallback.push(resolve);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"添加reject结果\"><a href=\"#添加reject结果\" class=\"headerlink\" title=\"添加reject结果\"></a>添加reject结果</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Promise</span>(<span class=\"params\">executor</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    self.status = <span class=\"string\">'pending'</span>; <span class=\"comment\">//promise当前的状态</span></span><br><span class=\"line\">    self.data = <span class=\"literal\">undefined</span>; <span class=\"comment\">//promise的值</span></span><br><span class=\"line\">    self.onResolvedCallback = [];</span><br><span class=\"line\">    <span class=\"comment\">//promise状态变为resolve时的回调函数集，可能有多个</span></span><br><span class=\"line\">    self.onRejectedCallback = [];</span><br><span class=\"line\">    <span class=\"comment\">//promise状态变为reject时的回调函数集，可能有多个</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolve</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(self.status === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">           self.status = <span class=\"string\">'resolved'</span>;</span><br><span class=\"line\">           self.data = value;</span><br><span class=\"line\">           <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; self.onResolvedCallback.length; i++) &#123;</span><br><span class=\"line\">               self.onResolvedCallback[i](value);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reject</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(self.status === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">            self.status = <span class=\"string\">'rejected'</span>;</span><br><span class=\"line\">            self.data = reason;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; self.onRejectedCallback.length; i++) &#123;</span><br><span class=\"line\">                self.onRejectedCallback[i](reason);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">       executor(resolve, reject);</span><br><span class=\"line\">   &#125; <span class=\"keyword\">catch</span> (e)&#123;</span><br><span class=\"line\">       reject(e);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.then = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">onResolve, onReject</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onResolvedCallback.push(onResolve);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onRejectedCallback.push(onReject);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>小结：</p>\n<ol>\n<li><strong>executor</strong>函数作为实参在创建<strong>Promise</strong>对象时传入<strong>Promise</strong>构造函数。</li>\n<li><strong>resolve</strong>和<strong>reject</strong>函数作为实参传入<strong>executor</strong>函数。</li>\n<li><strong>value</strong>作为实参传入<strong>resolve</strong>和<strong>reject</strong>函数。<h4 id=\"如果executor自执行函数中的resolve函数立即触发时，发现Promise失效\"><a href=\"#如果executor自执行函数中的resolve函数立即触发时，发现Promise失效\" class=\"headerlink\" title=\"如果executor自执行函数中的resolve函数立即触发时，发现Promise失效\"></a>如果executor自执行函数中的resolve函数立即触发时，发现Promise失效</h4></li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    resolve(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">promise.then(<span class=\"function\">(<span class=\"params\">a</span>) =&gt;</span> alert(a));</span><br></pre></td></tr></table></figure>\n<p>将promise的resolve和reject异步执行</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolve</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(self.status === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">            self.status = <span class=\"string\">'resolved'</span>;</span><br><span class=\"line\">            self.data = value;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; self.onResolvedCallback.length; i++) &#123;</span><br><span class=\"line\">                self.onResolvedCallback[i](value);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reject</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(self.status === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">            self.status = <span class=\"string\">'rejected'</span>;</span><br><span class=\"line\">            self.data = reason;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; self.onRejectedCallback.length; i++) &#123;</span><br><span class=\"line\">                self.onRejectedCallback[i](reason);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"then方法\"><a href=\"#then方法\" class=\"headerlink\" title=\"then方法\"></a>then方法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promise.then(onFulfilled, onRejected)</span><br></pre></td></tr></table></figure>\n<ol>\n<li><strong>then</strong>方法返回一个新的<strong>promise</strong>对象。</li>\n<li><strong>executor</strong>自执行函数中的<strong>resolve</strong>参数调用时执行<strong>then</strong>方法的第一个回调函数<strong>onResolved</strong>。</li>\n<li><strong>executor</strong>自执行函数中的<strong>reject</strong>参数调用时执行<strong>then</strong>方法的第二个回调函数<strong>onRejected</strong>。</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.then = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">onResolved, onRejected</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> promise2;</span><br><span class=\"line\">    onResolved = <span class=\"keyword\">typeof</span> onResolved === <span class=\"string\">'function'</span> </span><br><span class=\"line\">                ? onResolved </span><br><span class=\"line\">                : <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;<span class=\"keyword\">return</span> value&#125;;</span><br><span class=\"line\">    onRejected = <span class=\"keyword\">typeof</span> onRejected === <span class=\"string\">'function'</span> </span><br><span class=\"line\">                ? onRejected </span><br><span class=\"line\">                : <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">reason</span>) </span>&#123;<span class=\"keyword\">throw</span> reason&#125;;</span><br><span class=\"line\">    <span class=\"comment\">//promise对象当前状态为resolved</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(self.status === <span class=\"string\">'resolved'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> promise2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//调用onResolve回调函数</span></span><br><span class=\"line\">                <span class=\"keyword\">var</span> x = onResolved(self.data);</span><br><span class=\"line\">                <span class=\"comment\">//如果onResolve回调函数返回值为一个promise对象</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(x <span class=\"keyword\">instanceof</span>  <span class=\"built_in\">Promise</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//将它的结果作为promise2的结果</span></span><br><span class=\"line\">                    x.then(resolve, reject);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    resolve(x);<span class=\"comment\">//执行promise2的onResolve回调</span></span><br><span class=\"line\">           &#125;        </span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">                reject(e); <span class=\"comment\">//执行promise2的onReject回调</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//promise对象当前状态为rejected</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(self.status === <span class=\"string\">'rejected'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> promise2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> x = onRejected(self.data);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (x <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>) &#123;</span><br><span class=\"line\">                    x.then(resolve, reject)</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    resolve(x)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">                reject(e)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//promise对象当前状态为pending</span></span><br><span class=\"line\">    <span class=\"comment\">//此时并不能确定调用onResolved还是onRejected，需要等当前Promise状态确定。</span></span><br><span class=\"line\">    <span class=\"comment\">//所以需要将callBack放入promise1的回调数组中</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(self.status === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> promise2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">            self.onResolvedCallback.push(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> x = onResolved(self.data);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (x <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>) &#123;</span><br><span class=\"line\">                        x.then(resolve, reject);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        resolve(x);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">                    reject(e);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            self.onRejectedCallback.push(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> x = onRejected(self.data);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (x <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>) &#123;</span><br><span class=\"line\">                        x.then(resolve, reject)</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        resolve(x);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">                    reject(e)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">Promise</span> = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Promise</span>(<span class=\"params\">resolver</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> resolver !== <span class=\"string\">'function'</span>) &#123; <span class=\"comment\">//resolver必须是函数</span></span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'Promise resolver '</span> + resolver + <span class=\"string\">' is not a function'</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!(<span class=\"keyword\">this</span> <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>)) <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(resolver)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span> <span class=\"comment\">//保存this</span></span><br><span class=\"line\">        self.callbacks = [] <span class=\"comment\">//保存onResolve和onReject函数集合</span></span><br><span class=\"line\">        self.status = <span class=\"string\">'pending'</span> <span class=\"comment\">//当前状态</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolve</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">            setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">//异步调用</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (self.status !== <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                self.status = <span class=\"string\">'resolved'</span> <span class=\"comment\">//修改状态</span></span><br><span class=\"line\">                self.data = value</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; self.callbacks.length; i++) &#123;</span><br><span class=\"line\">                    self.callbacks[i].onResolved(value)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reject</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">            setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"comment\">//异步调用</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (self.status !== <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                self.status = <span class=\"string\">'rejected'</span> <span class=\"comment\">//修改状态</span></span><br><span class=\"line\">                self.data = reason</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; self.callbacks.length; i++) &#123;</span><br><span class=\"line\">                    self.callbacks[i].onRejected(reason)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            resolver(resolve, reject) <span class=\"comment\">//执行resolver函数</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">            reject(e)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolvePromise</span>(<span class=\"params\">promise, x, resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> then</span><br><span class=\"line\">        <span class=\"keyword\">var</span> thenCalledOrThrow = <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (promise === x) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> reject(<span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'Chaining cycle detected for promise!'</span>))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((x !== <span class=\"literal\">null</span>) &amp;&amp; ((<span class=\"keyword\">typeof</span> x === <span class=\"string\">'object'</span>) || (<span class=\"keyword\">typeof</span> x === <span class=\"string\">'function'</span>))) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                then = x.then</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> then === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">                    then.call(x, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">rs</span>(<span class=\"params\">y</span>) </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (thenCalledOrThrow) <span class=\"keyword\">return</span></span><br><span class=\"line\">                        thenCalledOrThrow = <span class=\"literal\">true</span></span><br><span class=\"line\">                        <span class=\"keyword\">return</span> resolvePromise(promise, y, resolve, reject)</span><br><span class=\"line\">                    &#125;, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">rj</span>(<span class=\"params\">r</span>) </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (thenCalledOrThrow) <span class=\"keyword\">return</span></span><br><span class=\"line\">                        thenCalledOrThrow = <span class=\"literal\">true</span></span><br><span class=\"line\">                        <span class=\"keyword\">return</span> reject(r)</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> resolve(x)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (thenCalledOrThrow) <span class=\"keyword\">return</span></span><br><span class=\"line\">                thenCalledOrThrow = <span class=\"literal\">true</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> reject(e)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> resolve(x)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.prototype.then = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">onResolved, onRejected</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//健壮性处理，处理点击穿透</span></span><br><span class=\"line\">        onResolved = <span class=\"keyword\">typeof</span> onResolved === <span class=\"string\">'function'</span> ? onResolved : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>)</span>&#123;<span class=\"keyword\">return</span> v&#125;</span><br><span class=\"line\">        onRejected = <span class=\"keyword\">typeof</span> onRejected === <span class=\"string\">'function'</span> ? onRejected : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">r</span>)</span>&#123;<span class=\"keyword\">throw</span> r&#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> promise2</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//promise状态为resolved</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (self.status === <span class=\"string\">'resolved'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> promise2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">                setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//调用then方法的onResolved回调</span></span><br><span class=\"line\">                        <span class=\"keyword\">var</span> x = onResolved(self.data)</span><br><span class=\"line\">                        <span class=\"comment\">//根据x的值修改promise2的状态</span></span><br><span class=\"line\">                        resolvePromise(promise2, x, resolve, reject)</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//promise2状态变为rejected</span></span><br><span class=\"line\">                        <span class=\"keyword\">return</span> reject(e)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//promise状态为rejected</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (self.status === <span class=\"string\">'rejected'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> promise2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">                setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//调用then方法的onReject回调</span></span><br><span class=\"line\">                        <span class=\"keyword\">var</span> x = onRejected(self.data)</span><br><span class=\"line\">                        <span class=\"comment\">//根据x的值修改promise2的状态</span></span><br><span class=\"line\">                        resolvePromise(promise2, x, resolve, reject)</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//promise2状态变为rejected</span></span><br><span class=\"line\">                        <span class=\"keyword\">return</span> reject(e)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//promise状态为pending</span></span><br><span class=\"line\">        <span class=\"comment\">//需要等待promise的状态改变</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (self.status === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> promise2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">                self.callbacks.push(&#123;</span><br><span class=\"line\">                    onResolved: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                            <span class=\"comment\">//调用then方法的onResolved回调</span></span><br><span class=\"line\">                            <span class=\"keyword\">var</span> x = onResolved(value)</span><br><span class=\"line\">                            <span class=\"comment\">//根据x的值修改promise2的状态</span></span><br><span class=\"line\">                            resolvePromise(promise2, x, resolve, reject)</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">                            <span class=\"comment\">//promise2状态变为rejected</span></span><br><span class=\"line\">                            <span class=\"keyword\">return</span> reject(e)</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    onRejected: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                            <span class=\"comment\">//调用then方法的onResolved回调</span></span><br><span class=\"line\">                            <span class=\"keyword\">var</span> x = onRejected(reason)</span><br><span class=\"line\">                            <span class=\"comment\">//根据x的值修改promise2的状态</span></span><br><span class=\"line\">                            resolvePromise(promise2, x, resolve, reject)</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">                            <span class=\"comment\">//promise2状态变为rejected</span></span><br><span class=\"line\">                            <span class=\"keyword\">return</span> reject(e)</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//获取当前Promise传递的值</span></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.prototype.valueOf = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.data</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//由then方法实现catch方法</span></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.prototype.catch = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">onRejected</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.then(<span class=\"literal\">null</span>, onRejected)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//finally方法</span></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.prototype.finally = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>)</span>&#123;</span><br><span class=\"line\">            setTimeout(fn)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> v</span><br><span class=\"line\">        &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">r</span>)</span>&#123;</span><br><span class=\"line\">            setTimeout(fn)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> r</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.prototype.spread = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn, onRejected</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">values</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> fn.apply(<span class=\"literal\">null</span>, values)</span><br><span class=\"line\">        &#125;, onRejected)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.prototype.inject = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn, onRejected</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> fn.apply(<span class=\"literal\">null</span>, fn.toString().match(<span class=\"regexp\">/\\((.*?)\\)/</span>)[<span class=\"number\">1</span>].split(<span class=\"string\">','</span>).map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>)</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> v[key];</span><br><span class=\"line\">            &#125;))</span><br><span class=\"line\">        &#125;, onRejected)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.prototype.delay = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">duration</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">                setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                    resolve(value)</span><br><span class=\"line\">                &#125;, duration)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">                setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                    reject(reason)</span><br><span class=\"line\">                &#125;, duration)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.all = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">promises</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> resolvedCounter = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> promiseNum = promises.length</span><br><span class=\"line\">            <span class=\"keyword\">var</span> resolvedValues = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(promiseNum)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; promiseNum; i++) &#123;</span><br><span class=\"line\">                (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">                    <span class=\"built_in\">Promise</span>.resolve(promises[i]).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">                        resolvedCounter++</span><br><span class=\"line\">                        resolvedValues[i] = value</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (resolvedCounter == promiseNum) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">return</span> resolve(resolvedValues)</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> reject(reason)</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                &#125;)(i)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.race = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">promises</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; promises.length; i++) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">Promise</span>.resolve(promises[i]).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> resolve(value)</span><br><span class=\"line\">                &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> reject(reason)</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.resolve = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">            resolvePromise(promise, value, resolve, reject)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> promise</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.reject = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">            reject(reason)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.fcall = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 虽然fn可以接收到上一层then里传来的参数，但是其实是undefined，所以跟没有是一样的，因为resolve没参数啊</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve().then(fn)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.done = <span class=\"built_in\">Promise</span>.stop = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.deferred = <span class=\"built_in\">Promise</span>.defer = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> dfd = &#123;&#125;</span><br><span class=\"line\">        dfd.promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">            dfd.resolve = resolve</span><br><span class=\"line\">            dfd.reject = reject</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dfd</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123; <span class=\"comment\">// CommonJS compliance</span></span><br><span class=\"line\">        <span class=\"built_in\">module</span>.exports = <span class=\"built_in\">Promise</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span>(e) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span></span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://www.jianshu.com/p/43de678e918a\" target=\"_blank\" rel=\"noopener\">Promise实现原理</a><br><a href=\"https://www.jianshu.com/p/b4f0425b22a1\" target=\"_blank\" rel=\"noopener\">Promise原理与实现</a></p>"},{"layout":"[post]","title":"promise.all和promise.race","date":"2019-02-17T01:57:01.000Z","_content":"## Promise.all和Promise.race的功能\n### Promise.all\n**Promise.all可以将多个Promise实例包装成一个新的Promise实例。同时，成功和失败的返回值是不同的，成功的时候返回的是一个结果数组，而失败的时候则返回最先被reject失败状态的值。**\n<!-- more -->\n```js\nlet p1 = new Promise((resolve, reject) => {\n  resolve('p1完成')\n})\n\nlet p2 = new Promise((resolve, reject) => {\n  resolve('p2完成')\n})\n\nlet p3 = Promse.reject('p3失败')\n\nPromise.all([p1, p2]).then((result) => {\n  console.log(result)               //['p1完成', 'p2完成']\n}).catch((error) => {\n  console.log(error)\n})\n\nPromise.all([p1,p3,p2]).then((result) => {\n  console.log(result)\n}).catch((error) => {\n  console.log(error)      // 失败了，打出 ''p3失败'\n})\n```\n### Promise.race\n**Promise.race可以将多个Promise实例包装成一个新的Promise实例。同时，成功和失败的返回值是不同的，成功的时候返回的是第一个返回的resolve，而失败的时候则返回最先被reject失败状态的值。（换句话说就是返回最快的那个）**\n\n```js\nlet p1 = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve('success')\n  },1000)\n})\n\nlet p2 = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    reject('failed')\n  }, 500)\n})\n\nPromise.race([p1, p2]).then((result) => {\n  console.log(result)\n}).catch((error) => {\n  console.log(error)  // 打开的是 'failed'\n})\n```\n## 简易实现\n### Promise.all\n```js\nPromise.all = (arr) => {\n    let resultList = [];\n    return new Promise((resolve, reject) => {\n        let i = 0;\n        next();\n        next = () => {\n            arr[i].then((res, rej) => {\n                if (!rej) {\n                    resultList.push(res);\n                    i++;\n                } else {\n                    reject(rej);\n                }\n                if (i == arr.length) {\n                    resolve(resultList);\n                } else {\n                    next();\n                }\n            })\n        }\n    })\n};\n```\n### Promise.race\n```js\nPromise.race = (arr) => {\n    let resultList = [];\n    return new Promise((resolve, reject) => {\n        let i = 0;\n        next();\n        next = () => {\n            arr[i].then((res, rej) => {\n                if (!rej) {\n                    resultList.push(res);\n                    i++;\n                } else {\n                    reject(rej);\n                }\n                if (i == arr.length) {\n                    resolve(resultList);\n                } else {\n                    next();\n                }\n            })\n        }\n    })\n};\n```\n## Promise.all的问题\n**在上面的代码中，Promise.all使用的是循环调用的方式，也就算是链式调用（Promise链），事实上Promise.all是并发，同时进行所有的promise方法。**\n\n```js\nPromise.all = (arr) => {\n    let resultList = new Array(arr.length);\n    return new Promise((resolve, reject) => {\n        let temp = 0;\n        for (let i = 0, len = arr.length; i < len; i++) {\n            arr[i].then((res, rej) => {\n                if (!rej) {\n                    resultList[i] = (res);\n                    if (temp == arr.length) {\n                        resolve(resultList);\n                    }\n                    temp++;\n                } else {\n                    reject(rej);\n                }\n            })\n        }\n    })\n};\n```\n\n","source":"_posts/promose-all和promise-race.md","raw":"---\nlayout: '[post]'\ntitle: promise.all和promise.race\ndate: 2019-02-17 09:57:01\ntags: Promise\n---\n## Promise.all和Promise.race的功能\n### Promise.all\n**Promise.all可以将多个Promise实例包装成一个新的Promise实例。同时，成功和失败的返回值是不同的，成功的时候返回的是一个结果数组，而失败的时候则返回最先被reject失败状态的值。**\n<!-- more -->\n```js\nlet p1 = new Promise((resolve, reject) => {\n  resolve('p1完成')\n})\n\nlet p2 = new Promise((resolve, reject) => {\n  resolve('p2完成')\n})\n\nlet p3 = Promse.reject('p3失败')\n\nPromise.all([p1, p2]).then((result) => {\n  console.log(result)               //['p1完成', 'p2完成']\n}).catch((error) => {\n  console.log(error)\n})\n\nPromise.all([p1,p3,p2]).then((result) => {\n  console.log(result)\n}).catch((error) => {\n  console.log(error)      // 失败了，打出 ''p3失败'\n})\n```\n### Promise.race\n**Promise.race可以将多个Promise实例包装成一个新的Promise实例。同时，成功和失败的返回值是不同的，成功的时候返回的是第一个返回的resolve，而失败的时候则返回最先被reject失败状态的值。（换句话说就是返回最快的那个）**\n\n```js\nlet p1 = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve('success')\n  },1000)\n})\n\nlet p2 = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    reject('failed')\n  }, 500)\n})\n\nPromise.race([p1, p2]).then((result) => {\n  console.log(result)\n}).catch((error) => {\n  console.log(error)  // 打开的是 'failed'\n})\n```\n## 简易实现\n### Promise.all\n```js\nPromise.all = (arr) => {\n    let resultList = [];\n    return new Promise((resolve, reject) => {\n        let i = 0;\n        next();\n        next = () => {\n            arr[i].then((res, rej) => {\n                if (!rej) {\n                    resultList.push(res);\n                    i++;\n                } else {\n                    reject(rej);\n                }\n                if (i == arr.length) {\n                    resolve(resultList);\n                } else {\n                    next();\n                }\n            })\n        }\n    })\n};\n```\n### Promise.race\n```js\nPromise.race = (arr) => {\n    let resultList = [];\n    return new Promise((resolve, reject) => {\n        let i = 0;\n        next();\n        next = () => {\n            arr[i].then((res, rej) => {\n                if (!rej) {\n                    resultList.push(res);\n                    i++;\n                } else {\n                    reject(rej);\n                }\n                if (i == arr.length) {\n                    resolve(resultList);\n                } else {\n                    next();\n                }\n            })\n        }\n    })\n};\n```\n## Promise.all的问题\n**在上面的代码中，Promise.all使用的是循环调用的方式，也就算是链式调用（Promise链），事实上Promise.all是并发，同时进行所有的promise方法。**\n\n```js\nPromise.all = (arr) => {\n    let resultList = new Array(arr.length);\n    return new Promise((resolve, reject) => {\n        let temp = 0;\n        for (let i = 0, len = arr.length; i < len; i++) {\n            arr[i].then((res, rej) => {\n                if (!rej) {\n                    resultList[i] = (res);\n                    if (temp == arr.length) {\n                        resolve(resultList);\n                    }\n                    temp++;\n                } else {\n                    reject(rej);\n                }\n            })\n        }\n    })\n};\n```\n\n","slug":"promose-all和promise-race","published":1,"updated":"2020-01-24T14:55:10.000Z","comments":1,"photos":[],"link":"","_id":"ck65xoth50006d4s6fxgm1nay","content":"<h2 id=\"Promise-all和Promise-race的功能\"><a href=\"#Promise-all和Promise-race的功能\" class=\"headerlink\" title=\"Promise.all和Promise.race的功能\"></a>Promise.all和Promise.race的功能</h2><h3 id=\"Promise-all\"><a href=\"#Promise-all\" class=\"headerlink\" title=\"Promise.all\"></a>Promise.all</h3><p><strong>Promise.all可以将多个Promise实例包装成一个新的Promise实例。同时，成功和失败的返回值是不同的，成功的时候返回的是一个结果数组，而失败的时候则返回最先被reject失败状态的值。</strong></p>\n<a id=\"more\"></a>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  resolve(<span class=\"string\">'p1完成'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  resolve(<span class=\"string\">'p2完成'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p3 = Promse.reject(<span class=\"string\">'p3失败'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.all([p1, p2]).then(<span class=\"function\">(<span class=\"params\">result</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(result)               <span class=\"comment\">//['p1完成', 'p2完成']</span></span><br><span class=\"line\">&#125;).catch(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(error)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.all([p1,p3,p2]).then(<span class=\"function\">(<span class=\"params\">result</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(result)</span><br><span class=\"line\">&#125;).catch(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(error)      <span class=\"comment\">// 失败了，打出 ''p3失败'</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"Promise-race\"><a href=\"#Promise-race\" class=\"headerlink\" title=\"Promise.race\"></a>Promise.race</h3><p><strong>Promise.race可以将多个Promise实例包装成一个新的Promise实例。同时，成功和失败的返回值是不同的，成功的时候返回的是第一个返回的resolve，而失败的时候则返回最先被reject失败状态的值。（换句话说就是返回最快的那个）</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    resolve(<span class=\"string\">'success'</span>)</span><br><span class=\"line\">  &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    reject(<span class=\"string\">'failed'</span>)</span><br><span class=\"line\">  &#125;, <span class=\"number\">500</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.race([p1, p2]).then(<span class=\"function\">(<span class=\"params\">result</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(result)</span><br><span class=\"line\">&#125;).catch(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(error)  <span class=\"comment\">// 打开的是 'failed'</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"简易实现\"><a href=\"#简易实现\" class=\"headerlink\" title=\"简易实现\"></a>简易实现</h2><h3 id=\"Promise-all-1\"><a href=\"#Promise-all-1\" class=\"headerlink\" title=\"Promise.all\"></a>Promise.all</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.all = <span class=\"function\">(<span class=\"params\">arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> resultList = [];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">        next();</span><br><span class=\"line\">        next = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            arr[i].then(<span class=\"function\">(<span class=\"params\">res, rej</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!rej) &#123;</span><br><span class=\"line\">                    resultList.push(res);</span><br><span class=\"line\">                    i++;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    reject(rej);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (i == arr.length) &#123;</span><br><span class=\"line\">                    resolve(resultList);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    next();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Promise-race-1\"><a href=\"#Promise-race-1\" class=\"headerlink\" title=\"Promise.race\"></a>Promise.race</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.race = <span class=\"function\">(<span class=\"params\">arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> resultList = [];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">        next();</span><br><span class=\"line\">        next = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            arr[i].then(<span class=\"function\">(<span class=\"params\">res, rej</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!rej) &#123;</span><br><span class=\"line\">                    resultList.push(res);</span><br><span class=\"line\">                    i++;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    reject(rej);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (i == arr.length) &#123;</span><br><span class=\"line\">                    resolve(resultList);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    next();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Promise-all的问题\"><a href=\"#Promise-all的问题\" class=\"headerlink\" title=\"Promise.all的问题\"></a>Promise.all的问题</h2><p><strong>在上面的代码中，Promise.all使用的是循环调用的方式，也就算是链式调用（Promise链），事实上Promise.all是并发，同时进行所有的promise方法。</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.all = <span class=\"function\">(<span class=\"params\">arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> resultList = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(arr.length);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> temp = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, len = arr.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">            arr[i].then(<span class=\"function\">(<span class=\"params\">res, rej</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!rej) &#123;</span><br><span class=\"line\">                    resultList[i] = (res);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (temp == arr.length) &#123;</span><br><span class=\"line\">                        resolve(resultList);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    temp++;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    reject(rej);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<h2 id=\"Promise-all和Promise-race的功能\"><a href=\"#Promise-all和Promise-race的功能\" class=\"headerlink\" title=\"Promise.all和Promise.race的功能\"></a>Promise.all和Promise.race的功能</h2><h3 id=\"Promise-all\"><a href=\"#Promise-all\" class=\"headerlink\" title=\"Promise.all\"></a>Promise.all</h3><p><strong>Promise.all可以将多个Promise实例包装成一个新的Promise实例。同时，成功和失败的返回值是不同的，成功的时候返回的是一个结果数组，而失败的时候则返回最先被reject失败状态的值。</strong></p>","more":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  resolve(<span class=\"string\">'p1完成'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  resolve(<span class=\"string\">'p2完成'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p3 = Promse.reject(<span class=\"string\">'p3失败'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.all([p1, p2]).then(<span class=\"function\">(<span class=\"params\">result</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(result)               <span class=\"comment\">//['p1完成', 'p2完成']</span></span><br><span class=\"line\">&#125;).catch(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(error)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.all([p1,p3,p2]).then(<span class=\"function\">(<span class=\"params\">result</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(result)</span><br><span class=\"line\">&#125;).catch(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(error)      <span class=\"comment\">// 失败了，打出 ''p3失败'</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"Promise-race\"><a href=\"#Promise-race\" class=\"headerlink\" title=\"Promise.race\"></a>Promise.race</h3><p><strong>Promise.race可以将多个Promise实例包装成一个新的Promise实例。同时，成功和失败的返回值是不同的，成功的时候返回的是第一个返回的resolve，而失败的时候则返回最先被reject失败状态的值。（换句话说就是返回最快的那个）</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    resolve(<span class=\"string\">'success'</span>)</span><br><span class=\"line\">  &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    reject(<span class=\"string\">'failed'</span>)</span><br><span class=\"line\">  &#125;, <span class=\"number\">500</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.race([p1, p2]).then(<span class=\"function\">(<span class=\"params\">result</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(result)</span><br><span class=\"line\">&#125;).catch(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(error)  <span class=\"comment\">// 打开的是 'failed'</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"简易实现\"><a href=\"#简易实现\" class=\"headerlink\" title=\"简易实现\"></a>简易实现</h2><h3 id=\"Promise-all-1\"><a href=\"#Promise-all-1\" class=\"headerlink\" title=\"Promise.all\"></a>Promise.all</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.all = <span class=\"function\">(<span class=\"params\">arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> resultList = [];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">        next();</span><br><span class=\"line\">        next = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            arr[i].then(<span class=\"function\">(<span class=\"params\">res, rej</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!rej) &#123;</span><br><span class=\"line\">                    resultList.push(res);</span><br><span class=\"line\">                    i++;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    reject(rej);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (i == arr.length) &#123;</span><br><span class=\"line\">                    resolve(resultList);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    next();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Promise-race-1\"><a href=\"#Promise-race-1\" class=\"headerlink\" title=\"Promise.race\"></a>Promise.race</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.race = <span class=\"function\">(<span class=\"params\">arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> resultList = [];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">        next();</span><br><span class=\"line\">        next = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            arr[i].then(<span class=\"function\">(<span class=\"params\">res, rej</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!rej) &#123;</span><br><span class=\"line\">                    resultList.push(res);</span><br><span class=\"line\">                    i++;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    reject(rej);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (i == arr.length) &#123;</span><br><span class=\"line\">                    resolve(resultList);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    next();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Promise-all的问题\"><a href=\"#Promise-all的问题\" class=\"headerlink\" title=\"Promise.all的问题\"></a>Promise.all的问题</h2><p><strong>在上面的代码中，Promise.all使用的是循环调用的方式，也就算是链式调用（Promise链），事实上Promise.all是并发，同时进行所有的promise方法。</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.all = <span class=\"function\">(<span class=\"params\">arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> resultList = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(arr.length);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> temp = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, len = arr.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">            arr[i].then(<span class=\"function\">(<span class=\"params\">res, rej</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!rej) &#123;</span><br><span class=\"line\">                    resultList[i] = (res);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (temp == arr.length) &#123;</span><br><span class=\"line\">                        resolve(resultList);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    temp++;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    reject(rej);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"layout":"[post]","title":"webp在项目中的应用","date":"2019-03-22T03:11:26.000Z","_content":"## 什么是webp？\nWebP格式，谷歌开发的一种旨在加快图片加载速度的图片格式。图片压缩体积大约只有JPEG的2/3，并能节省大量的服务器宽带资源和数据空间。\n<!-- more -->\n\n## 为什么要用webp\n1. 减小图片加载资源的大小、节省用户流量资源\n2. 降低服务器流量资源  \n### 压缩率\n![yasuo](yasuo.webp)\n\n## webp兼容性情况\n![yasuo](jianrong.webp)  \n结果：谷歌全面支持、安卓浏览器从4.2开始支持。那么在页面中对于安卓用户中图片资源加载大小会有大幅度下降。\n\n## webp在各大网站的使用\n淘宝中大量使用webp。  \n![yasuo](taobao.webp)  \n各大cdn也是支持webp图片格式输出。\n\n## 项目中的实践\n![yasuo](liucheng.webp) \n### 技术实现\n#### webp兼容性如何检测？\n1. 通过js浏览器端判断是否支持webp\n```js\nfunction check_webp_feature(feature, callback) {\n    var kTestImages = {\n        lossy: \"UklGRiIAAABXRUJQVlA4IBYAAAAwAQCdASoBAAEADsD+JaQAA3AAAAAA\",\n        lossless: \"UklGRhoAAABXRUJQVlA4TA0AAAAvAAAAEAcQERGIiP4HAA==\",\n        alpha: \"UklGRkoAAABXRUJQVlA4WAoAAAAQAAAAAAAAAAAAQUxQSAwAAAARBxAR/Q9ERP8DAABWUDggGAAAABQBAJ0BKgEAAQAAAP4AAA3AAP7mtQAAAA==\",\n        animation: \"UklGRlIAAABXRUJQVlA4WAoAAAASAAAAAAAAAAAAQU5JTQYAAAD/////AABBTk1GJgAAAAAAAAAAAAAAAAAAAGQAAABWUDhMDQAAAC8AAAAQBxAREYiI/gcA\"\n    };\n    var img = new Image();\n    img.onload = function () {\n        var result = (img.width > 0) && (img.height > 0);\n        callback(feature, result);\n    };\n    img.onerror = function () {\n        callback(feature, false);\n    };\n    img.src = \"data:image/webp;base64,\" + kTestImages[feature];\n}\n```\n2. 浏览器向服务端发起请求的时候accept 会带上image/webp 信息，在服务端判断是否支持webp。\n\n```js\nmap $http_accept $webp_suffix {\n        default   \"\";\n        \"~*webp\"  \".webp\";\n}\n```\n通过nginx中map方法，查找是否有webp字段，如果有设置$webp_suffix 为.webp值。通过该值就可以来判断是否支持webp。如果支持写入cookie，前端通过检测cookie做判断，是否加载webp图片。\n\nnginx 中设置cookie代码\n\n```java\nlocation / {\n  if ($webp_suffix ~* webp) {\n    add_header Set-Cookie 'webpAvaile=true; path= /; expires=3153600';\n  }\n}\n```\n\n### 在开发中使用  \n#### sass中使用\n\n```scss\n@mixin webpbg($url) {\n    background-image: url($url);\n    @at-root .webpa & {\n        background-image: url($url+'.webp');\n    }\n}\n```\nscss文件使用  \n\n```scss\n@include webpbg('../image/header.jpg');\n```\n\n#### html中使用\n\n```html\n<picture class=\"img\" >\n    <source class=\"img\" srcset=\"images/banner.jpg.webp\" type=\"image/webp\">\n    <img class=\"img\" id=\"headImg\" src=\"images/banner.jpg\"/>\n</picture>\n```\n\n#### 生成webp资源\n使用webpack的loader\n\n```js\nvar imagemin = require('imagemin');\nvar imageminWebp = require('imagemin-webp');\nvar loaderUtils = require('loader-utils');\n \nmodule.exports = function (content) {\n    this.cacheable && this.cacheable();\n    if (!this.emitFile) throw new Error(\"emitFile is required from module system\");\n    var callback = this.async();\n    var options = loaderUtils.getOptions(this);\n \n    // 写入原文件\n    var url = loaderUtils.interpolateName(this, options.name || \"[hash].[ext]\", {\n        content: content,\n        regExp: options.regExp\n    });\n    this.emitFile(url, content);\n \n    // 如果源文件比较小，则没必要转换为webp格式的图片，直接使用callback传递给下一个loader处理\n    var limit;\n    if (options.limit) {\n        limit = parseInt(options.limit, 10);\n    }\n    if (limit <= 0 || content.length < limit) {\n        callback(null, { buffer: content, url })\n        return;\n    }\n \n    // 根据options内容生成webpOptions\n    var webpOptions = {\n        preset: options.preset || 'default',\n        quality: options.quality || 75,\n        alphaQuality: options.alphaQuality || 100,\n        method: options.method || 1,\n        sns: options.sns || 80,\n        autoFilter: options.autoFilter || false,\n        sharpness: options.sharpness || 0,\n        lossless: options.lossless || false,\n    };\n    if (options.size) {\n        webpOptions.size = options.size;\n    }\n    if (options.filter) {\n        webpOptions.filter = options.filter;\n    }\n \n    // 生成的webp图片的名称为原图片的名称后面追加.webp,\n    // 例如：xxx.jpg.webp, 方便在css预处理器中的使用\n    var webpUrl = url + '.webp';\n    // 原图片异步转换为webp的图片\n    imagemin.buffer(content, { plugins: [imageminWebp(webpOptions)] }).then(file => {\n        // 写入webp图片并调用callback\n        this.emitFile(webpUrl, file);\n        // 传递给svg-placrholder-loader，继续处理成placeholder\n        callback(null, { buffer: content, url, webpUrl });\n \n        /* 如果要单独使用的话，可以使用该注释部分的代码\n        const exportJson = 'module.exports = { ' +\n            '\"originSrc\": __webpack_public_path__ + \"' + url +\n            '\" , \"webpSrc\": __webpack_public_path__ + \"' + webpUrl +\n            '\"' +\n            ' };';\n        callback(null, exportJson);   \n        */  \n    }).catch(err => {\n        callback(err);\n    });\n \n};\n \n// 要求webpack传入原始的buffer，方便处理图片\nmodule.exports.raw = true;\n```\n\nnginx生成  \n实现过程，对支持webp的请求设置cookies。利用nginx检测图片请求是否存在，如果不存在通过lua调用imageMagic创建webp图片并返回。需要注意的是nginx需要安装lua支持的模块。\n\n\n```java\nuser  root; # nginx 用户权限 执行lua创建图片命令需要读写权限\n# ...\nhttp {\n    include       mime.types;\n    server {\n        listen       80;\n        server_name  webp.leewr.com;\n        root         /home/leewr/mono/app/public/december;\n        location / {\n            if ($webp_suffix ~* webp) {\n                add_header Set-Cookie 'webpAvaile=true; path= /;';\n            }\n        }\n        location ~* ^(.+\\.(jpg|png|jpeg|gif))(.webp)$ { # 正则匹配图片 paht/name.jpg.webp 格式的图片请求\n            if (!-f $request_filename) { # 如果图片不存在\n                access_log /usr/local/nginx/logs/december.log main; # 设置日志文件\n                set $request_filepath /home/leewr/mono/app/public/december/$1; # 图片真实路径变量\n                set $ext $3; # 设置图片扩展名$ext变量\n                content_by_lua_file lua/webp.lua; # 调用nginx/lua目录下的webp.lua文件\n            }\n        }\n    }\n}\n```\n\n下面看lua, lua 中代码非常简单。定义command命令，调用系统os.execute(command)执行convert图片转换命令。convert是ImageMagic的命令。.. lua 中字符串连接。ngx.var.ext是nginx中定义的变量。\n\n\n```nginx\nlocal command\ncommand = \"convert \" ..ngx.var.request_filepath.. \" \" ..ngx.var.request_filepath..ngx.var.ext\nos.execute(command)\nngx.exec(ngx.var.request_uri)\n```\n\n[原文地址](https://www.jianshu.com/p/73ca9e8b986a)\n","source":"_posts/webp在项目中的应用.md","raw":"---\nlayout: '[post]'\ntitle: webp在项目中的应用\ndate: 2019-03-22 11:11:26\ntags: html\n---\n## 什么是webp？\nWebP格式，谷歌开发的一种旨在加快图片加载速度的图片格式。图片压缩体积大约只有JPEG的2/3，并能节省大量的服务器宽带资源和数据空间。\n<!-- more -->\n\n## 为什么要用webp\n1. 减小图片加载资源的大小、节省用户流量资源\n2. 降低服务器流量资源  \n### 压缩率\n![yasuo](yasuo.webp)\n\n## webp兼容性情况\n![yasuo](jianrong.webp)  \n结果：谷歌全面支持、安卓浏览器从4.2开始支持。那么在页面中对于安卓用户中图片资源加载大小会有大幅度下降。\n\n## webp在各大网站的使用\n淘宝中大量使用webp。  \n![yasuo](taobao.webp)  \n各大cdn也是支持webp图片格式输出。\n\n## 项目中的实践\n![yasuo](liucheng.webp) \n### 技术实现\n#### webp兼容性如何检测？\n1. 通过js浏览器端判断是否支持webp\n```js\nfunction check_webp_feature(feature, callback) {\n    var kTestImages = {\n        lossy: \"UklGRiIAAABXRUJQVlA4IBYAAAAwAQCdASoBAAEADsD+JaQAA3AAAAAA\",\n        lossless: \"UklGRhoAAABXRUJQVlA4TA0AAAAvAAAAEAcQERGIiP4HAA==\",\n        alpha: \"UklGRkoAAABXRUJQVlA4WAoAAAAQAAAAAAAAAAAAQUxQSAwAAAARBxAR/Q9ERP8DAABWUDggGAAAABQBAJ0BKgEAAQAAAP4AAA3AAP7mtQAAAA==\",\n        animation: \"UklGRlIAAABXRUJQVlA4WAoAAAASAAAAAAAAAAAAQU5JTQYAAAD/////AABBTk1GJgAAAAAAAAAAAAAAAAAAAGQAAABWUDhMDQAAAC8AAAAQBxAREYiI/gcA\"\n    };\n    var img = new Image();\n    img.onload = function () {\n        var result = (img.width > 0) && (img.height > 0);\n        callback(feature, result);\n    };\n    img.onerror = function () {\n        callback(feature, false);\n    };\n    img.src = \"data:image/webp;base64,\" + kTestImages[feature];\n}\n```\n2. 浏览器向服务端发起请求的时候accept 会带上image/webp 信息，在服务端判断是否支持webp。\n\n```js\nmap $http_accept $webp_suffix {\n        default   \"\";\n        \"~*webp\"  \".webp\";\n}\n```\n通过nginx中map方法，查找是否有webp字段，如果有设置$webp_suffix 为.webp值。通过该值就可以来判断是否支持webp。如果支持写入cookie，前端通过检测cookie做判断，是否加载webp图片。\n\nnginx 中设置cookie代码\n\n```java\nlocation / {\n  if ($webp_suffix ~* webp) {\n    add_header Set-Cookie 'webpAvaile=true; path= /; expires=3153600';\n  }\n}\n```\n\n### 在开发中使用  \n#### sass中使用\n\n```scss\n@mixin webpbg($url) {\n    background-image: url($url);\n    @at-root .webpa & {\n        background-image: url($url+'.webp');\n    }\n}\n```\nscss文件使用  \n\n```scss\n@include webpbg('../image/header.jpg');\n```\n\n#### html中使用\n\n```html\n<picture class=\"img\" >\n    <source class=\"img\" srcset=\"images/banner.jpg.webp\" type=\"image/webp\">\n    <img class=\"img\" id=\"headImg\" src=\"images/banner.jpg\"/>\n</picture>\n```\n\n#### 生成webp资源\n使用webpack的loader\n\n```js\nvar imagemin = require('imagemin');\nvar imageminWebp = require('imagemin-webp');\nvar loaderUtils = require('loader-utils');\n \nmodule.exports = function (content) {\n    this.cacheable && this.cacheable();\n    if (!this.emitFile) throw new Error(\"emitFile is required from module system\");\n    var callback = this.async();\n    var options = loaderUtils.getOptions(this);\n \n    // 写入原文件\n    var url = loaderUtils.interpolateName(this, options.name || \"[hash].[ext]\", {\n        content: content,\n        regExp: options.regExp\n    });\n    this.emitFile(url, content);\n \n    // 如果源文件比较小，则没必要转换为webp格式的图片，直接使用callback传递给下一个loader处理\n    var limit;\n    if (options.limit) {\n        limit = parseInt(options.limit, 10);\n    }\n    if (limit <= 0 || content.length < limit) {\n        callback(null, { buffer: content, url })\n        return;\n    }\n \n    // 根据options内容生成webpOptions\n    var webpOptions = {\n        preset: options.preset || 'default',\n        quality: options.quality || 75,\n        alphaQuality: options.alphaQuality || 100,\n        method: options.method || 1,\n        sns: options.sns || 80,\n        autoFilter: options.autoFilter || false,\n        sharpness: options.sharpness || 0,\n        lossless: options.lossless || false,\n    };\n    if (options.size) {\n        webpOptions.size = options.size;\n    }\n    if (options.filter) {\n        webpOptions.filter = options.filter;\n    }\n \n    // 生成的webp图片的名称为原图片的名称后面追加.webp,\n    // 例如：xxx.jpg.webp, 方便在css预处理器中的使用\n    var webpUrl = url + '.webp';\n    // 原图片异步转换为webp的图片\n    imagemin.buffer(content, { plugins: [imageminWebp(webpOptions)] }).then(file => {\n        // 写入webp图片并调用callback\n        this.emitFile(webpUrl, file);\n        // 传递给svg-placrholder-loader，继续处理成placeholder\n        callback(null, { buffer: content, url, webpUrl });\n \n        /* 如果要单独使用的话，可以使用该注释部分的代码\n        const exportJson = 'module.exports = { ' +\n            '\"originSrc\": __webpack_public_path__ + \"' + url +\n            '\" , \"webpSrc\": __webpack_public_path__ + \"' + webpUrl +\n            '\"' +\n            ' };';\n        callback(null, exportJson);   \n        */  \n    }).catch(err => {\n        callback(err);\n    });\n \n};\n \n// 要求webpack传入原始的buffer，方便处理图片\nmodule.exports.raw = true;\n```\n\nnginx生成  \n实现过程，对支持webp的请求设置cookies。利用nginx检测图片请求是否存在，如果不存在通过lua调用imageMagic创建webp图片并返回。需要注意的是nginx需要安装lua支持的模块。\n\n\n```java\nuser  root; # nginx 用户权限 执行lua创建图片命令需要读写权限\n# ...\nhttp {\n    include       mime.types;\n    server {\n        listen       80;\n        server_name  webp.leewr.com;\n        root         /home/leewr/mono/app/public/december;\n        location / {\n            if ($webp_suffix ~* webp) {\n                add_header Set-Cookie 'webpAvaile=true; path= /;';\n            }\n        }\n        location ~* ^(.+\\.(jpg|png|jpeg|gif))(.webp)$ { # 正则匹配图片 paht/name.jpg.webp 格式的图片请求\n            if (!-f $request_filename) { # 如果图片不存在\n                access_log /usr/local/nginx/logs/december.log main; # 设置日志文件\n                set $request_filepath /home/leewr/mono/app/public/december/$1; # 图片真实路径变量\n                set $ext $3; # 设置图片扩展名$ext变量\n                content_by_lua_file lua/webp.lua; # 调用nginx/lua目录下的webp.lua文件\n            }\n        }\n    }\n}\n```\n\n下面看lua, lua 中代码非常简单。定义command命令，调用系统os.execute(command)执行convert图片转换命令。convert是ImageMagic的命令。.. lua 中字符串连接。ngx.var.ext是nginx中定义的变量。\n\n\n```nginx\nlocal command\ncommand = \"convert \" ..ngx.var.request_filepath.. \" \" ..ngx.var.request_filepath..ngx.var.ext\nos.execute(command)\nngx.exec(ngx.var.request_uri)\n```\n\n[原文地址](https://www.jianshu.com/p/73ca9e8b986a)\n","slug":"webp在项目中的应用","published":1,"updated":"2020-02-03T09:29:59.000Z","_id":"ck65xoth70007d4s620ps5s7n","comments":1,"photos":[],"link":"","content":"<h2 id=\"什么是webp？\"><a href=\"#什么是webp？\" class=\"headerlink\" title=\"什么是webp？\"></a>什么是webp？</h2><p>WebP格式，谷歌开发的一种旨在加快图片加载速度的图片格式。图片压缩体积大约只有JPEG的2/3，并能节省大量的服务器宽带资源和数据空间。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"为什么要用webp\"><a href=\"#为什么要用webp\" class=\"headerlink\" title=\"为什么要用webp\"></a>为什么要用webp</h2><ol>\n<li>减小图片加载资源的大小、节省用户流量资源</li>\n<li>降低服务器流量资源  <h3 id=\"压缩率\"><a href=\"#压缩率\" class=\"headerlink\" title=\"压缩率\"></a>压缩率</h3><img src=\"/2019/03/22/webp%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/yasuo.webp\" alt=\"yasuo\"></li>\n</ol>\n<h2 id=\"webp兼容性情况\"><a href=\"#webp兼容性情况\" class=\"headerlink\" title=\"webp兼容性情况\"></a>webp兼容性情况</h2><p><img src=\"/2019/03/22/webp%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/jianrong.webp\" alt=\"yasuo\"><br>结果：谷歌全面支持、安卓浏览器从4.2开始支持。那么在页面中对于安卓用户中图片资源加载大小会有大幅度下降。</p>\n<h2 id=\"webp在各大网站的使用\"><a href=\"#webp在各大网站的使用\" class=\"headerlink\" title=\"webp在各大网站的使用\"></a>webp在各大网站的使用</h2><p>淘宝中大量使用webp。<br><img src=\"/2019/03/22/webp%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/taobao.webp\" alt=\"yasuo\"><br>各大cdn也是支持webp图片格式输出。</p>\n<h2 id=\"项目中的实践\"><a href=\"#项目中的实践\" class=\"headerlink\" title=\"项目中的实践\"></a>项目中的实践</h2><p><img src=\"/2019/03/22/webp%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/liucheng.webp\" alt=\"yasuo\"> </p>\n<h3 id=\"技术实现\"><a href=\"#技术实现\" class=\"headerlink\" title=\"技术实现\"></a>技术实现</h3><h4 id=\"webp兼容性如何检测？\"><a href=\"#webp兼容性如何检测？\" class=\"headerlink\" title=\"webp兼容性如何检测？\"></a>webp兼容性如何检测？</h4><ol>\n<li>通过js浏览器端判断是否支持webp<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">check_webp_feature</span>(<span class=\"params\">feature, callback</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> kTestImages = &#123;</span><br><span class=\"line\">        lossy: <span class=\"string\">\"UklGRiIAAABXRUJQVlA4IBYAAAAwAQCdASoBAAEADsD+JaQAA3AAAAAA\"</span>,</span><br><span class=\"line\">        lossless: <span class=\"string\">\"UklGRhoAAABXRUJQVlA4TA0AAAAvAAAAEAcQERGIiP4HAA==\"</span>,</span><br><span class=\"line\">        alpha: <span class=\"string\">\"UklGRkoAAABXRUJQVlA4WAoAAAAQAAAAAAAAAAAAQUxQSAwAAAARBxAR/Q9ERP8DAABWUDggGAAAABQBAJ0BKgEAAQAAAP4AAA3AAP7mtQAAAA==\"</span>,</span><br><span class=\"line\">        animation: <span class=\"string\">\"UklGRlIAAABXRUJQVlA4WAoAAAASAAAAAAAAAAAAQU5JTQYAAAD/////AABBTk1GJgAAAAAAAAAAAAAAAAAAAGQAAABWUDhMDQAAAC8AAAAQBxAREYiI/gcA\"</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\">    img.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> result = (img.width &gt; <span class=\"number\">0</span>) &amp;&amp; (img.height &gt; <span class=\"number\">0</span>);</span><br><span class=\"line\">        callback(feature, result);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    img.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        callback(feature, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    img.src = <span class=\"string\">\"data:image/webp;base64,\"</span> + kTestImages[feature];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>浏览器向服务端发起请求的时候accept 会带上image/webp 信息，在服务端判断是否支持webp。</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map $http_accept $webp_suffix &#123;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>   <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        <span class=\"string\">\"~*webp\"</span>  <span class=\"string\">\".webp\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过nginx中map方法，查找是否有webp字段，如果有设置$webp_suffix 为.webp值。通过该值就可以来判断是否支持webp。如果支持写入cookie，前端通过检测cookie做判断，是否加载webp图片。</p>\n<p>nginx 中设置cookie代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location / &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ($webp_suffix ~* webp) &#123;</span><br><span class=\"line\">    add_header Set-Cookie <span class=\"string\">'webpAvaile=true; path= /; expires=3153600'</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在开发中使用\"><a href=\"#在开发中使用\" class=\"headerlink\" title=\"在开发中使用\"></a>在开发中使用</h3><h4 id=\"sass中使用\"><a href=\"#sass中使用\" class=\"headerlink\" title=\"sass中使用\"></a>sass中使用</h4><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@mixin</span> webpbg(<span class=\"variable\">$url</span>) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-image</span>: url(<span class=\"variable\">$url</span>);</span><br><span class=\"line\">    <span class=\"keyword\">@at-root</span> .webpa &amp; &#123;</span><br><span class=\"line\">        <span class=\"attribute\">background-image</span>: url(<span class=\"variable\">$url</span>+<span class=\"string\">'.webp'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>scss文件使用  </p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@include</span> webpbg(<span class=\"string\">'../image/header.jpg'</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"html中使用\"><a href=\"#html中使用\" class=\"headerlink\" title=\"html中使用\"></a>html中使用</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">picture</span> <span class=\"attr\">class</span>=<span class=\"string\">\"img\"</span> &gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">class</span>=<span class=\"string\">\"img\"</span> <span class=\"attr\">srcset</span>=<span class=\"string\">\"images/banner.jpg.webp\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"image/webp\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">class</span>=<span class=\"string\">\"img\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"headImg\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"images/banner.jpg\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">picture</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"生成webp资源\"><a href=\"#生成webp资源\" class=\"headerlink\" title=\"生成webp资源\"></a>生成webp资源</h4><p>使用webpack的loader</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> imagemin = <span class=\"built_in\">require</span>(<span class=\"string\">'imagemin'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> imageminWebp = <span class=\"built_in\">require</span>(<span class=\"string\">'imagemin-webp'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> loaderUtils = <span class=\"built_in\">require</span>(<span class=\"string\">'loader-utils'</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">content</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.cacheable &amp;&amp; <span class=\"keyword\">this</span>.cacheable();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.emitFile) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"emitFile is required from module system\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> callback = <span class=\"keyword\">this</span>.async();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> options = loaderUtils.getOptions(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 写入原文件</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> url = loaderUtils.interpolateName(<span class=\"keyword\">this</span>, options.name || <span class=\"string\">\"[hash].[ext]\"</span>, &#123;</span><br><span class=\"line\">        content: content,</span><br><span class=\"line\">        regExp: options.regExp</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.emitFile(url, content);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 如果源文件比较小，则没必要转换为webp格式的图片，直接使用callback传递给下一个loader处理</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> limit;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (options.limit) &#123;</span><br><span class=\"line\">        limit = <span class=\"built_in\">parseInt</span>(options.limit, <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (limit &lt;= <span class=\"number\">0</span> || content.length &lt; limit) &#123;</span><br><span class=\"line\">        callback(<span class=\"literal\">null</span>, &#123; <span class=\"attr\">buffer</span>: content, url &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 根据options内容生成webpOptions</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> webpOptions = &#123;</span><br><span class=\"line\">        preset: options.preset || <span class=\"string\">'default'</span>,</span><br><span class=\"line\">        quality: options.quality || <span class=\"number\">75</span>,</span><br><span class=\"line\">        alphaQuality: options.alphaQuality || <span class=\"number\">100</span>,</span><br><span class=\"line\">        method: options.method || <span class=\"number\">1</span>,</span><br><span class=\"line\">        sns: options.sns || <span class=\"number\">80</span>,</span><br><span class=\"line\">        autoFilter: options.autoFilter || <span class=\"literal\">false</span>,</span><br><span class=\"line\">        sharpness: options.sharpness || <span class=\"number\">0</span>,</span><br><span class=\"line\">        lossless: options.lossless || <span class=\"literal\">false</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (options.size) &#123;</span><br><span class=\"line\">        webpOptions.size = options.size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (options.filter) &#123;</span><br><span class=\"line\">        webpOptions.filter = options.filter;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 生成的webp图片的名称为原图片的名称后面追加.webp,</span></span><br><span class=\"line\">    <span class=\"comment\">// 例如：xxx.jpg.webp, 方便在css预处理器中的使用</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> webpUrl = url + <span class=\"string\">'.webp'</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 原图片异步转换为webp的图片</span></span><br><span class=\"line\">    imagemin.buffer(content, &#123; <span class=\"attr\">plugins</span>: [imageminWebp(webpOptions)] &#125;).then(<span class=\"function\"><span class=\"params\">file</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 写入webp图片并调用callback</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.emitFile(webpUrl, file);</span><br><span class=\"line\">        <span class=\"comment\">// 传递给svg-placrholder-loader，继续处理成placeholder</span></span><br><span class=\"line\">        callback(<span class=\"literal\">null</span>, &#123; <span class=\"attr\">buffer</span>: content, url, webpUrl &#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">/* 如果要单独使用的话，可以使用该注释部分的代码</span></span><br><span class=\"line\"><span class=\"comment\">        const exportJson = 'module.exports = &#123; ' +</span></span><br><span class=\"line\"><span class=\"comment\">            '\"originSrc\": __webpack_public_path__ + \"' + url +</span></span><br><span class=\"line\"><span class=\"comment\">            '\" , \"webpSrc\": __webpack_public_path__ + \"' + webpUrl +</span></span><br><span class=\"line\"><span class=\"comment\">            '\"' +</span></span><br><span class=\"line\"><span class=\"comment\">            ' &#125;;';</span></span><br><span class=\"line\"><span class=\"comment\">        callback(null, exportJson);   </span></span><br><span class=\"line\"><span class=\"comment\">        */</span>  </span><br><span class=\"line\">    &#125;).catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">        callback(err);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 要求webpack传入原始的buffer，方便处理图片</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports.raw = <span class=\"literal\">true</span>;</span><br></pre></td></tr></table></figure>\n\n<p>nginx生成<br>实现过程，对支持webp的请求设置cookies。利用nginx检测图片请求是否存在，如果不存在通过lua调用imageMagic创建webp图片并返回。需要注意的是nginx需要安装lua支持的模块。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user  root; # nginx 用户权限 执行lua创建图片命令需要读写权限</span><br><span class=\"line\"># ...</span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen       <span class=\"number\">80</span>;</span><br><span class=\"line\">        server_name  webp.leewr.com;</span><br><span class=\"line\">        root         /home/leewr/mono/app/<span class=\"keyword\">public</span>/december;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ($webp_suffix ~* webp) &#123;</span><br><span class=\"line\">                add_header Set-Cookie <span class=\"string\">'webpAvaile=true; path= /;'</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        location ~* ^(.+\\.(jpg|png|jpeg|gif))(.webp)$ &#123; # 正则匹配图片 paht/name.jpg.webp 格式的图片请求</span><br><span class=\"line\">            if (!-f $request_filename) &#123; # 如果图片不存在</span><br><span class=\"line\">                access_log /usr/local/nginx/logs/december.log main; # 设置日志文件</span><br><span class=\"line\">                set $request_filepath /home/leewr/mono/app/public/december/$1; # 图片真实路径变量</span><br><span class=\"line\">                set $ext $3; # 设置图片扩展名$ext变量</span><br><span class=\"line\">                content_by_lua_file lua/webp.lua; # 调用nginx/lua目录下的webp.lua文件</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面看lua, lua 中代码非常简单。定义command命令，调用系统os.execute(command)执行convert图片转换命令。convert是ImageMagic的命令。.. lua 中字符串连接。ngx.var.ext是nginx中定义的变量。</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">local</span> command</span><br><span class=\"line\">command = <span class=\"string\">\"convert \"</span> ..ngx.var.request_filepath.. <span class=\"string\">\" \"</span> ..ngx.var.request_filepath..ngx.var.ext</span><br><span class=\"line\">os.execute(command)</span><br><span class=\"line\">ngx.exec(ngx.var.request_uri)</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://www.jianshu.com/p/73ca9e8b986a\" target=\"_blank\" rel=\"noopener\">原文地址</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"什么是webp？\"><a href=\"#什么是webp？\" class=\"headerlink\" title=\"什么是webp？\"></a>什么是webp？</h2><p>WebP格式，谷歌开发的一种旨在加快图片加载速度的图片格式。图片压缩体积大约只有JPEG的2/3，并能节省大量的服务器宽带资源和数据空间。</p>","more":"<h2 id=\"为什么要用webp\"><a href=\"#为什么要用webp\" class=\"headerlink\" title=\"为什么要用webp\"></a>为什么要用webp</h2><ol>\n<li>减小图片加载资源的大小、节省用户流量资源</li>\n<li>降低服务器流量资源  <h3 id=\"压缩率\"><a href=\"#压缩率\" class=\"headerlink\" title=\"压缩率\"></a>压缩率</h3><img src=\"/2019/03/22/webp%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/yasuo.webp\" alt=\"yasuo\"></li>\n</ol>\n<h2 id=\"webp兼容性情况\"><a href=\"#webp兼容性情况\" class=\"headerlink\" title=\"webp兼容性情况\"></a>webp兼容性情况</h2><p><img src=\"/2019/03/22/webp%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/jianrong.webp\" alt=\"yasuo\"><br>结果：谷歌全面支持、安卓浏览器从4.2开始支持。那么在页面中对于安卓用户中图片资源加载大小会有大幅度下降。</p>\n<h2 id=\"webp在各大网站的使用\"><a href=\"#webp在各大网站的使用\" class=\"headerlink\" title=\"webp在各大网站的使用\"></a>webp在各大网站的使用</h2><p>淘宝中大量使用webp。<br><img src=\"/2019/03/22/webp%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/taobao.webp\" alt=\"yasuo\"><br>各大cdn也是支持webp图片格式输出。</p>\n<h2 id=\"项目中的实践\"><a href=\"#项目中的实践\" class=\"headerlink\" title=\"项目中的实践\"></a>项目中的实践</h2><p><img src=\"/2019/03/22/webp%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/liucheng.webp\" alt=\"yasuo\"> </p>\n<h3 id=\"技术实现\"><a href=\"#技术实现\" class=\"headerlink\" title=\"技术实现\"></a>技术实现</h3><h4 id=\"webp兼容性如何检测？\"><a href=\"#webp兼容性如何检测？\" class=\"headerlink\" title=\"webp兼容性如何检测？\"></a>webp兼容性如何检测？</h4><ol>\n<li>通过js浏览器端判断是否支持webp<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">check_webp_feature</span>(<span class=\"params\">feature, callback</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> kTestImages = &#123;</span><br><span class=\"line\">        lossy: <span class=\"string\">\"UklGRiIAAABXRUJQVlA4IBYAAAAwAQCdASoBAAEADsD+JaQAA3AAAAAA\"</span>,</span><br><span class=\"line\">        lossless: <span class=\"string\">\"UklGRhoAAABXRUJQVlA4TA0AAAAvAAAAEAcQERGIiP4HAA==\"</span>,</span><br><span class=\"line\">        alpha: <span class=\"string\">\"UklGRkoAAABXRUJQVlA4WAoAAAAQAAAAAAAAAAAAQUxQSAwAAAARBxAR/Q9ERP8DAABWUDggGAAAABQBAJ0BKgEAAQAAAP4AAA3AAP7mtQAAAA==\"</span>,</span><br><span class=\"line\">        animation: <span class=\"string\">\"UklGRlIAAABXRUJQVlA4WAoAAAASAAAAAAAAAAAAQU5JTQYAAAD/////AABBTk1GJgAAAAAAAAAAAAAAAAAAAGQAAABWUDhMDQAAAC8AAAAQBxAREYiI/gcA\"</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\">    img.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> result = (img.width &gt; <span class=\"number\">0</span>) &amp;&amp; (img.height &gt; <span class=\"number\">0</span>);</span><br><span class=\"line\">        callback(feature, result);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    img.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        callback(feature, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    img.src = <span class=\"string\">\"data:image/webp;base64,\"</span> + kTestImages[feature];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>浏览器向服务端发起请求的时候accept 会带上image/webp 信息，在服务端判断是否支持webp。</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map $http_accept $webp_suffix &#123;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>   <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        <span class=\"string\">\"~*webp\"</span>  <span class=\"string\">\".webp\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过nginx中map方法，查找是否有webp字段，如果有设置$webp_suffix 为.webp值。通过该值就可以来判断是否支持webp。如果支持写入cookie，前端通过检测cookie做判断，是否加载webp图片。</p>\n<p>nginx 中设置cookie代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location / &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ($webp_suffix ~* webp) &#123;</span><br><span class=\"line\">    add_header Set-Cookie <span class=\"string\">'webpAvaile=true; path= /; expires=3153600'</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在开发中使用\"><a href=\"#在开发中使用\" class=\"headerlink\" title=\"在开发中使用\"></a>在开发中使用</h3><h4 id=\"sass中使用\"><a href=\"#sass中使用\" class=\"headerlink\" title=\"sass中使用\"></a>sass中使用</h4><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@mixin</span> webpbg(<span class=\"variable\">$url</span>) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-image</span>: url(<span class=\"variable\">$url</span>);</span><br><span class=\"line\">    <span class=\"keyword\">@at-root</span> .webpa &amp; &#123;</span><br><span class=\"line\">        <span class=\"attribute\">background-image</span>: url(<span class=\"variable\">$url</span>+<span class=\"string\">'.webp'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>scss文件使用  </p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@include</span> webpbg(<span class=\"string\">'../image/header.jpg'</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"html中使用\"><a href=\"#html中使用\" class=\"headerlink\" title=\"html中使用\"></a>html中使用</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">picture</span> <span class=\"attr\">class</span>=<span class=\"string\">\"img\"</span> &gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">class</span>=<span class=\"string\">\"img\"</span> <span class=\"attr\">srcset</span>=<span class=\"string\">\"images/banner.jpg.webp\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"image/webp\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">class</span>=<span class=\"string\">\"img\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"headImg\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"images/banner.jpg\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">picture</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"生成webp资源\"><a href=\"#生成webp资源\" class=\"headerlink\" title=\"生成webp资源\"></a>生成webp资源</h4><p>使用webpack的loader</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> imagemin = <span class=\"built_in\">require</span>(<span class=\"string\">'imagemin'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> imageminWebp = <span class=\"built_in\">require</span>(<span class=\"string\">'imagemin-webp'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> loaderUtils = <span class=\"built_in\">require</span>(<span class=\"string\">'loader-utils'</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">content</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.cacheable &amp;&amp; <span class=\"keyword\">this</span>.cacheable();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.emitFile) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"emitFile is required from module system\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> callback = <span class=\"keyword\">this</span>.async();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> options = loaderUtils.getOptions(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 写入原文件</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> url = loaderUtils.interpolateName(<span class=\"keyword\">this</span>, options.name || <span class=\"string\">\"[hash].[ext]\"</span>, &#123;</span><br><span class=\"line\">        content: content,</span><br><span class=\"line\">        regExp: options.regExp</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.emitFile(url, content);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 如果源文件比较小，则没必要转换为webp格式的图片，直接使用callback传递给下一个loader处理</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> limit;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (options.limit) &#123;</span><br><span class=\"line\">        limit = <span class=\"built_in\">parseInt</span>(options.limit, <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (limit &lt;= <span class=\"number\">0</span> || content.length &lt; limit) &#123;</span><br><span class=\"line\">        callback(<span class=\"literal\">null</span>, &#123; <span class=\"attr\">buffer</span>: content, url &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 根据options内容生成webpOptions</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> webpOptions = &#123;</span><br><span class=\"line\">        preset: options.preset || <span class=\"string\">'default'</span>,</span><br><span class=\"line\">        quality: options.quality || <span class=\"number\">75</span>,</span><br><span class=\"line\">        alphaQuality: options.alphaQuality || <span class=\"number\">100</span>,</span><br><span class=\"line\">        method: options.method || <span class=\"number\">1</span>,</span><br><span class=\"line\">        sns: options.sns || <span class=\"number\">80</span>,</span><br><span class=\"line\">        autoFilter: options.autoFilter || <span class=\"literal\">false</span>,</span><br><span class=\"line\">        sharpness: options.sharpness || <span class=\"number\">0</span>,</span><br><span class=\"line\">        lossless: options.lossless || <span class=\"literal\">false</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (options.size) &#123;</span><br><span class=\"line\">        webpOptions.size = options.size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (options.filter) &#123;</span><br><span class=\"line\">        webpOptions.filter = options.filter;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 生成的webp图片的名称为原图片的名称后面追加.webp,</span></span><br><span class=\"line\">    <span class=\"comment\">// 例如：xxx.jpg.webp, 方便在css预处理器中的使用</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> webpUrl = url + <span class=\"string\">'.webp'</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 原图片异步转换为webp的图片</span></span><br><span class=\"line\">    imagemin.buffer(content, &#123; <span class=\"attr\">plugins</span>: [imageminWebp(webpOptions)] &#125;).then(<span class=\"function\"><span class=\"params\">file</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 写入webp图片并调用callback</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.emitFile(webpUrl, file);</span><br><span class=\"line\">        <span class=\"comment\">// 传递给svg-placrholder-loader，继续处理成placeholder</span></span><br><span class=\"line\">        callback(<span class=\"literal\">null</span>, &#123; <span class=\"attr\">buffer</span>: content, url, webpUrl &#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">/* 如果要单独使用的话，可以使用该注释部分的代码</span></span><br><span class=\"line\"><span class=\"comment\">        const exportJson = 'module.exports = &#123; ' +</span></span><br><span class=\"line\"><span class=\"comment\">            '\"originSrc\": __webpack_public_path__ + \"' + url +</span></span><br><span class=\"line\"><span class=\"comment\">            '\" , \"webpSrc\": __webpack_public_path__ + \"' + webpUrl +</span></span><br><span class=\"line\"><span class=\"comment\">            '\"' +</span></span><br><span class=\"line\"><span class=\"comment\">            ' &#125;;';</span></span><br><span class=\"line\"><span class=\"comment\">        callback(null, exportJson);   </span></span><br><span class=\"line\"><span class=\"comment\">        */</span>  </span><br><span class=\"line\">    &#125;).catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">        callback(err);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 要求webpack传入原始的buffer，方便处理图片</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports.raw = <span class=\"literal\">true</span>;</span><br></pre></td></tr></table></figure>\n\n<p>nginx生成<br>实现过程，对支持webp的请求设置cookies。利用nginx检测图片请求是否存在，如果不存在通过lua调用imageMagic创建webp图片并返回。需要注意的是nginx需要安装lua支持的模块。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user  root; # nginx 用户权限 执行lua创建图片命令需要读写权限</span><br><span class=\"line\"># ...</span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen       <span class=\"number\">80</span>;</span><br><span class=\"line\">        server_name  webp.leewr.com;</span><br><span class=\"line\">        root         /home/leewr/mono/app/<span class=\"keyword\">public</span>/december;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ($webp_suffix ~* webp) &#123;</span><br><span class=\"line\">                add_header Set-Cookie <span class=\"string\">'webpAvaile=true; path= /;'</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        location ~* ^(.+\\.(jpg|png|jpeg|gif))(.webp)$ &#123; # 正则匹配图片 paht/name.jpg.webp 格式的图片请求</span><br><span class=\"line\">            if (!-f $request_filename) &#123; # 如果图片不存在</span><br><span class=\"line\">                access_log /usr/local/nginx/logs/december.log main; # 设置日志文件</span><br><span class=\"line\">                set $request_filepath /home/leewr/mono/app/public/december/$1; # 图片真实路径变量</span><br><span class=\"line\">                set $ext $3; # 设置图片扩展名$ext变量</span><br><span class=\"line\">                content_by_lua_file lua/webp.lua; # 调用nginx/lua目录下的webp.lua文件</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面看lua, lua 中代码非常简单。定义command命令，调用系统os.execute(command)执行convert图片转换命令。convert是ImageMagic的命令。.. lua 中字符串连接。ngx.var.ext是nginx中定义的变量。</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">local</span> command</span><br><span class=\"line\">command = <span class=\"string\">\"convert \"</span> ..ngx.var.request_filepath.. <span class=\"string\">\" \"</span> ..ngx.var.request_filepath..ngx.var.ext</span><br><span class=\"line\">os.execute(command)</span><br><span class=\"line\">ngx.exec(ngx.var.request_uri)</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://www.jianshu.com/p/73ca9e8b986a\" target=\"_blank\" rel=\"noopener\">原文地址</a></p>"},{"layout":"[post]","title":"初次使用hexo","date":"2019-01-14T01:57:01.000Z","_content":"\n偶然间发现了hexo这个博客搭建工具，于是决定将使用多年的云笔记的内容搬迁至这个博客上，分享我的搬迁经历以及踩过的坑吧~。\n<!-- more -->\n\n## 我们开始吧\n\n### 新建仓库\n\n在github新建仓库，如果想要部署在github上，要仓库名为 ==<user-name>.github.io== 而不是user-name ，其中 ==<user-name>== 是你 ==github== 的昵称，要是问为什么，都是眼泪的教训。\n### 安装hexo\n\n```\nnpm install -g hexo-cli\n```\n或者\n```linux\nnpm install hexo\n```\n### 初始化项目\n初始化命令\n```\nhexo init\n```\n运行\n```\nhexo server\n```\n大功告成，访问 ==localhost:4000== 我们就能看到建的博客的效果了！\n### 将Hexo部署到GitHub Pages上\n1. 将[Travis CI](https://github.com/marketplace/travis-ci) 添加到你的 GitHub 账户中。\n2. 前往 GitHub 的 [Applications settings](https://github.com/settings/installations)，配置 Travis CI 权限，使其能够访问你的 repository。\n3. 你应该会被重定向到 Travis CI 的页面。如果没有，请 [手动前往](https://travis-ci.com/)。\n4. 在浏览器新建一个标签页，前往 GitHub [新建 Personal Access Token](https://github.com/settings/tokens) ，只勾选 repo 的权限并生成一个新的 Token。Token 生成后请复制并保存好。\n5. 回到 Travis CI，前往你的 repository 的设置页面，在 **Environment Variables** 下新建一个环境变量，**Name** 为 GH_TOKEN，**Value** 为刚才你在 GitHub 生成的 Token。确保 **DISPLAY VALUE IN BUILD LOG** 保持 **不被勾选** 避免你的 Token 泄漏。点击 Add 保存。\n6. 在你的 Hexo 站点文件夹中新建一个 ==.travis.yml== 文件：\n\n```\nsudo: false\nlanguage: node_js\nnode_js:\n  - 10 # use nodejs v10 LTS\ncache: npm\nbranches:\n  only:\n    - master # build master branch only\nscript:\n  - hexo generate # generate static files\ndeploy:\n  provider: pages\n  skip-cleanup: true\n  github-token: $GH_TOKEN\n  keep-history: true\n  on:\n    branch: master\n  local-dir: public\n```\n\n7. 将.travis.yml 推送到 repository 中。Travis CI 应该会自动开始运行，并将生成的文件推送到同一 repository 下的 gh-pages 分支下\n\n8. 在GitHub中前往你的repository 的设置页面，修改 GitHub Pages 的部署分支为 gh-pages。\n9.  完成以上步骤，我们就能在<user-name>.github.io上看到自己建设的博客了。\n### 其他配置项\n请参考[hexo文档](https://hexo.io/zh-cn/docs)。\n\n\n","source":"_posts/初尝hexo.md","raw":"---\nlayout: '[post]'\ntitle: 初次使用hexo\ndate: 2019-01-14 09:57:01\ntags: hexo\n---\n\n偶然间发现了hexo这个博客搭建工具，于是决定将使用多年的云笔记的内容搬迁至这个博客上，分享我的搬迁经历以及踩过的坑吧~。\n<!-- more -->\n\n## 我们开始吧\n\n### 新建仓库\n\n在github新建仓库，如果想要部署在github上，要仓库名为 ==<user-name>.github.io== 而不是user-name ，其中 ==<user-name>== 是你 ==github== 的昵称，要是问为什么，都是眼泪的教训。\n### 安装hexo\n\n```\nnpm install -g hexo-cli\n```\n或者\n```linux\nnpm install hexo\n```\n### 初始化项目\n初始化命令\n```\nhexo init\n```\n运行\n```\nhexo server\n```\n大功告成，访问 ==localhost:4000== 我们就能看到建的博客的效果了！\n### 将Hexo部署到GitHub Pages上\n1. 将[Travis CI](https://github.com/marketplace/travis-ci) 添加到你的 GitHub 账户中。\n2. 前往 GitHub 的 [Applications settings](https://github.com/settings/installations)，配置 Travis CI 权限，使其能够访问你的 repository。\n3. 你应该会被重定向到 Travis CI 的页面。如果没有，请 [手动前往](https://travis-ci.com/)。\n4. 在浏览器新建一个标签页，前往 GitHub [新建 Personal Access Token](https://github.com/settings/tokens) ，只勾选 repo 的权限并生成一个新的 Token。Token 生成后请复制并保存好。\n5. 回到 Travis CI，前往你的 repository 的设置页面，在 **Environment Variables** 下新建一个环境变量，**Name** 为 GH_TOKEN，**Value** 为刚才你在 GitHub 生成的 Token。确保 **DISPLAY VALUE IN BUILD LOG** 保持 **不被勾选** 避免你的 Token 泄漏。点击 Add 保存。\n6. 在你的 Hexo 站点文件夹中新建一个 ==.travis.yml== 文件：\n\n```\nsudo: false\nlanguage: node_js\nnode_js:\n  - 10 # use nodejs v10 LTS\ncache: npm\nbranches:\n  only:\n    - master # build master branch only\nscript:\n  - hexo generate # generate static files\ndeploy:\n  provider: pages\n  skip-cleanup: true\n  github-token: $GH_TOKEN\n  keep-history: true\n  on:\n    branch: master\n  local-dir: public\n```\n\n7. 将.travis.yml 推送到 repository 中。Travis CI 应该会自动开始运行，并将生成的文件推送到同一 repository 下的 gh-pages 分支下\n\n8. 在GitHub中前往你的repository 的设置页面，修改 GitHub Pages 的部署分支为 gh-pages。\n9.  完成以上步骤，我们就能在<user-name>.github.io上看到自己建设的博客了。\n### 其他配置项\n请参考[hexo文档](https://hexo.io/zh-cn/docs)。\n\n\n","slug":"初尝hexo","published":1,"updated":"2020-01-24T14:58:06.000Z","comments":1,"photos":[],"link":"","_id":"ck65xoth90008d4s6egme4zke","content":"<p>偶然间发现了hexo这个博客搭建工具，于是决定将使用多年的云笔记的内容搬迁至这个博客上，分享我的搬迁经历以及踩过的坑吧~。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"我们开始吧\"><a href=\"#我们开始吧\" class=\"headerlink\" title=\"我们开始吧\"></a>我们开始吧</h2><h3 id=\"新建仓库\"><a href=\"#新建仓库\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3><p>在github新建仓库，如果想要部署在github上，要仓库名为 ==<user-name>.github.io== 而不是user-name ，其中 ==<user-name>== 是你 ==github== 的昵称，要是问为什么，都是眼泪的教训。</user-name></user-name></p>\n<h3 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo</span><br></pre></td></tr></table></figure>\n<h3 id=\"初始化项目\"><a href=\"#初始化项目\" class=\"headerlink\" title=\"初始化项目\"></a>初始化项目</h3><p>初始化命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init</span><br></pre></td></tr></table></figure>\n<p>运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure>\n<p>大功告成，访问 ==localhost:4000== 我们就能看到建的博客的效果了！</p>\n<h3 id=\"将Hexo部署到GitHub-Pages上\"><a href=\"#将Hexo部署到GitHub-Pages上\" class=\"headerlink\" title=\"将Hexo部署到GitHub Pages上\"></a>将Hexo部署到GitHub Pages上</h3><ol>\n<li>将<a href=\"https://github.com/marketplace/travis-ci\" target=\"_blank\" rel=\"noopener\">Travis CI</a> 添加到你的 GitHub 账户中。</li>\n<li>前往 GitHub 的 <a href=\"https://github.com/settings/installations\" target=\"_blank\" rel=\"noopener\">Applications settings</a>，配置 Travis CI 权限，使其能够访问你的 repository。</li>\n<li>你应该会被重定向到 Travis CI 的页面。如果没有，请 <a href=\"https://travis-ci.com/\" target=\"_blank\" rel=\"noopener\">手动前往</a>。</li>\n<li>在浏览器新建一个标签页，前往 GitHub <a href=\"https://github.com/settings/tokens\" target=\"_blank\" rel=\"noopener\">新建 Personal Access Token</a> ，只勾选 repo 的权限并生成一个新的 Token。Token 生成后请复制并保存好。</li>\n<li>回到 Travis CI，前往你的 repository 的设置页面，在 <strong>Environment Variables</strong> 下新建一个环境变量，<strong>Name</strong> 为 GH_TOKEN，<strong>Value</strong> 为刚才你在 GitHub 生成的 Token。确保 <strong>DISPLAY VALUE IN BUILD LOG</strong> 保持 <strong>不被勾选</strong> 避免你的 Token 泄漏。点击 Add 保存。</li>\n<li>在你的 Hexo 站点文件夹中新建一个 ==.travis.yml== 文件：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo: false</span><br><span class=\"line\">language: node_js</span><br><span class=\"line\">node_js:</span><br><span class=\"line\">  - 10 # use nodejs v10 LTS</span><br><span class=\"line\">cache: npm</span><br><span class=\"line\">branches:</span><br><span class=\"line\">  only:</span><br><span class=\"line\">    - master # build master branch only</span><br><span class=\"line\">script:</span><br><span class=\"line\">  - hexo generate # generate static files</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  provider: pages</span><br><span class=\"line\">  skip-cleanup: true</span><br><span class=\"line\">  github-token: $GH_TOKEN</span><br><span class=\"line\">  keep-history: true</span><br><span class=\"line\">  on:</span><br><span class=\"line\">    branch: master</span><br><span class=\"line\">  local-dir: public</span><br></pre></td></tr></table></figure>\n\n<ol start=\"7\">\n<li><p>将.travis.yml 推送到 repository 中。Travis CI 应该会自动开始运行，并将生成的文件推送到同一 repository 下的 gh-pages 分支下</p>\n</li>\n<li><p>在GitHub中前往你的repository 的设置页面，修改 GitHub Pages 的部署分支为 gh-pages。</p>\n</li>\n<li><p>完成以上步骤，我们就能在<user-name>.github.io上看到自己建设的博客了。</user-name></p>\n<h3 id=\"其他配置项\"><a href=\"#其他配置项\" class=\"headerlink\" title=\"其他配置项\"></a>其他配置项</h3><p>请参考<a href=\"https://hexo.io/zh-cn/docs\" target=\"_blank\" rel=\"noopener\">hexo文档</a>。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>偶然间发现了hexo这个博客搭建工具，于是决定将使用多年的云笔记的内容搬迁至这个博客上，分享我的搬迁经历以及踩过的坑吧~。</p>","more":"<h2 id=\"我们开始吧\"><a href=\"#我们开始吧\" class=\"headerlink\" title=\"我们开始吧\"></a>我们开始吧</h2><h3 id=\"新建仓库\"><a href=\"#新建仓库\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3><p>在github新建仓库，如果想要部署在github上，要仓库名为 ==<user-name>.github.io== 而不是user-name ，其中 ==<user-name>== 是你 ==github== 的昵称，要是问为什么，都是眼泪的教训。</user-name></user-name></p>\n<h3 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo</span><br></pre></td></tr></table></figure>\n<h3 id=\"初始化项目\"><a href=\"#初始化项目\" class=\"headerlink\" title=\"初始化项目\"></a>初始化项目</h3><p>初始化命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init</span><br></pre></td></tr></table></figure>\n<p>运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure>\n<p>大功告成，访问 ==localhost:4000== 我们就能看到建的博客的效果了！</p>\n<h3 id=\"将Hexo部署到GitHub-Pages上\"><a href=\"#将Hexo部署到GitHub-Pages上\" class=\"headerlink\" title=\"将Hexo部署到GitHub Pages上\"></a>将Hexo部署到GitHub Pages上</h3><ol>\n<li>将<a href=\"https://github.com/marketplace/travis-ci\" target=\"_blank\" rel=\"noopener\">Travis CI</a> 添加到你的 GitHub 账户中。</li>\n<li>前往 GitHub 的 <a href=\"https://github.com/settings/installations\" target=\"_blank\" rel=\"noopener\">Applications settings</a>，配置 Travis CI 权限，使其能够访问你的 repository。</li>\n<li>你应该会被重定向到 Travis CI 的页面。如果没有，请 <a href=\"https://travis-ci.com/\" target=\"_blank\" rel=\"noopener\">手动前往</a>。</li>\n<li>在浏览器新建一个标签页，前往 GitHub <a href=\"https://github.com/settings/tokens\" target=\"_blank\" rel=\"noopener\">新建 Personal Access Token</a> ，只勾选 repo 的权限并生成一个新的 Token。Token 生成后请复制并保存好。</li>\n<li>回到 Travis CI，前往你的 repository 的设置页面，在 <strong>Environment Variables</strong> 下新建一个环境变量，<strong>Name</strong> 为 GH_TOKEN，<strong>Value</strong> 为刚才你在 GitHub 生成的 Token。确保 <strong>DISPLAY VALUE IN BUILD LOG</strong> 保持 <strong>不被勾选</strong> 避免你的 Token 泄漏。点击 Add 保存。</li>\n<li>在你的 Hexo 站点文件夹中新建一个 ==.travis.yml== 文件：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo: false</span><br><span class=\"line\">language: node_js</span><br><span class=\"line\">node_js:</span><br><span class=\"line\">  - 10 # use nodejs v10 LTS</span><br><span class=\"line\">cache: npm</span><br><span class=\"line\">branches:</span><br><span class=\"line\">  only:</span><br><span class=\"line\">    - master # build master branch only</span><br><span class=\"line\">script:</span><br><span class=\"line\">  - hexo generate # generate static files</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  provider: pages</span><br><span class=\"line\">  skip-cleanup: true</span><br><span class=\"line\">  github-token: $GH_TOKEN</span><br><span class=\"line\">  keep-history: true</span><br><span class=\"line\">  on:</span><br><span class=\"line\">    branch: master</span><br><span class=\"line\">  local-dir: public</span><br></pre></td></tr></table></figure>\n\n<ol start=\"7\">\n<li><p>将.travis.yml 推送到 repository 中。Travis CI 应该会自动开始运行，并将生成的文件推送到同一 repository 下的 gh-pages 分支下</p>\n</li>\n<li><p>在GitHub中前往你的repository 的设置页面，修改 GitHub Pages 的部署分支为 gh-pages。</p>\n</li>\n<li><p>完成以上步骤，我们就能在<user-name>.github.io上看到自己建设的博客了。</user-name></p>\n<h3 id=\"其他配置项\"><a href=\"#其他配置项\" class=\"headerlink\" title=\"其他配置项\"></a>其他配置项</h3><p>请参考<a href=\"https://hexo.io/zh-cn/docs\" target=\"_blank\" rel=\"noopener\">hexo文档</a>。</p>\n</li>\n</ol>"},{"layout":"[post]","title":"前端性能优化——DNS预解析","date":"2019-02-21T08:39:49.000Z","_content":"## 什么是DNS预解析？\n我们在进行前端性能优化时，涉及到DNS方面的优化一般有两点： 一个是减少DNS的请求次数，另一个就是进行DNS预解析 。\n\nDNS 实现域名到IP的映射。通过域名访问站点，每次请求都要做DNS解析。目前每次DNS解析，通常在200ms以下。针对DNS解析耗时问题，一些浏览器通过DNS Prefetch 来提高访问的流畅性。  \n\n**DNS Prefetch** 是一种DNS 预解析技术，当浏览网页时，浏览器会在加载网页时对网页中的域名进行解析缓存，这样在单击当前网页中的连接时就无需进行DNS的解析，减少用户等待时间，提高用户体验。\n#### **DNS Prefetch，即DNS预解析。**  \n<!-- more -->\n\n## 为什么使用DNS预解析？\nDNS 作为互联网的基础协议，其解析的速度似乎很容易被网站优化人员忽视。现在大多数新浏览器已经针对DNS解析进行了优化，典型的一次DNS解析需要耗费 20-120 毫秒，减少DNS解析时间和次数是个很好的优化方式。DNS预解析 是让具有此属性的域名不需要用户点击链接就在后台解析，而域名解析和内容载入是串行的网络操作，所以这个方式能 减少用户的等待时间，提升用户体验 。\n#### DNS解析的运行顺序\n浏览器对网站第一次的域名DNS解析查找流程依次为：  \n**浏览器缓存-系统缓存-路由器缓存-ISP DNS缓存-递归搜索**  \n## 支持DNS Prefetch的浏览器\n- Chrome\n- IE:9+\n- Firefox:3.5+\n- Safari:5+\n- Edge  \n\n## 如何在网站中使用DNS预解析\n因为浏览器的html解析是顺序的，所以DNS Prefetch 应该尽量的放在网页的前面，推荐放在 <meta charset=\"UTF-8\"> 后面：  \n```html\n<meta http-equiv=\"x-dns-prefetch-control\" content=\"on\">\n<!--打开和关闭DNS预预解析-->\n<link rel=\"dns-prefetch\" href=\"//www.baidu.com\">\n<!--解析的DNS的地址-->\n```\n注：dns-prefetch需慎用，多页面重复DNS预解析会增加重复DNS查询次数。\n","source":"_posts/前端性能优化——DNS预解析.md","raw":"---\nlayout: '[post]'\ntitle: 前端性能优化——DNS预解析\ndate: 2019-02-21 16:39:49\ntags: 前端性能优化\n---\n## 什么是DNS预解析？\n我们在进行前端性能优化时，涉及到DNS方面的优化一般有两点： 一个是减少DNS的请求次数，另一个就是进行DNS预解析 。\n\nDNS 实现域名到IP的映射。通过域名访问站点，每次请求都要做DNS解析。目前每次DNS解析，通常在200ms以下。针对DNS解析耗时问题，一些浏览器通过DNS Prefetch 来提高访问的流畅性。  \n\n**DNS Prefetch** 是一种DNS 预解析技术，当浏览网页时，浏览器会在加载网页时对网页中的域名进行解析缓存，这样在单击当前网页中的连接时就无需进行DNS的解析，减少用户等待时间，提高用户体验。\n#### **DNS Prefetch，即DNS预解析。**  \n<!-- more -->\n\n## 为什么使用DNS预解析？\nDNS 作为互联网的基础协议，其解析的速度似乎很容易被网站优化人员忽视。现在大多数新浏览器已经针对DNS解析进行了优化，典型的一次DNS解析需要耗费 20-120 毫秒，减少DNS解析时间和次数是个很好的优化方式。DNS预解析 是让具有此属性的域名不需要用户点击链接就在后台解析，而域名解析和内容载入是串行的网络操作，所以这个方式能 减少用户的等待时间，提升用户体验 。\n#### DNS解析的运行顺序\n浏览器对网站第一次的域名DNS解析查找流程依次为：  \n**浏览器缓存-系统缓存-路由器缓存-ISP DNS缓存-递归搜索**  \n## 支持DNS Prefetch的浏览器\n- Chrome\n- IE:9+\n- Firefox:3.5+\n- Safari:5+\n- Edge  \n\n## 如何在网站中使用DNS预解析\n因为浏览器的html解析是顺序的，所以DNS Prefetch 应该尽量的放在网页的前面，推荐放在 <meta charset=\"UTF-8\"> 后面：  \n```html\n<meta http-equiv=\"x-dns-prefetch-control\" content=\"on\">\n<!--打开和关闭DNS预预解析-->\n<link rel=\"dns-prefetch\" href=\"//www.baidu.com\">\n<!--解析的DNS的地址-->\n```\n注：dns-prefetch需慎用，多页面重复DNS预解析会增加重复DNS查询次数。\n","slug":"前端性能优化——DNS预解析","published":1,"updated":"2020-02-05T02:21:53.000Z","_id":"ck65xothb000bd4s6hxda83uc","comments":1,"photos":[],"link":"","content":"<h2 id=\"什么是DNS预解析？\"><a href=\"#什么是DNS预解析？\" class=\"headerlink\" title=\"什么是DNS预解析？\"></a>什么是DNS预解析？</h2><p>我们在进行前端性能优化时，涉及到DNS方面的优化一般有两点： 一个是减少DNS的请求次数，另一个就是进行DNS预解析 。</p>\n<p>DNS 实现域名到IP的映射。通过域名访问站点，每次请求都要做DNS解析。目前每次DNS解析，通常在200ms以下。针对DNS解析耗时问题，一些浏览器通过DNS Prefetch 来提高访问的流畅性。  </p>\n<p><strong>DNS Prefetch</strong> 是一种DNS 预解析技术，当浏览网页时，浏览器会在加载网页时对网页中的域名进行解析缓存，这样在单击当前网页中的连接时就无需进行DNS的解析，减少用户等待时间，提高用户体验。</p>\n<h4 id=\"DNS-Prefetch，即DNS预解析。\"><a href=\"#DNS-Prefetch，即DNS预解析。\" class=\"headerlink\" title=\"DNS Prefetch，即DNS预解析。\"></a><strong>DNS Prefetch，即DNS预解析。</strong></h4><a id=\"more\"></a>\n\n<h2 id=\"为什么使用DNS预解析？\"><a href=\"#为什么使用DNS预解析？\" class=\"headerlink\" title=\"为什么使用DNS预解析？\"></a>为什么使用DNS预解析？</h2><p>DNS 作为互联网的基础协议，其解析的速度似乎很容易被网站优化人员忽视。现在大多数新浏览器已经针对DNS解析进行了优化，典型的一次DNS解析需要耗费 20-120 毫秒，减少DNS解析时间和次数是个很好的优化方式。DNS预解析 是让具有此属性的域名不需要用户点击链接就在后台解析，而域名解析和内容载入是串行的网络操作，所以这个方式能 减少用户的等待时间，提升用户体验 。</p>\n<h4 id=\"DNS解析的运行顺序\"><a href=\"#DNS解析的运行顺序\" class=\"headerlink\" title=\"DNS解析的运行顺序\"></a>DNS解析的运行顺序</h4><p>浏览器对网站第一次的域名DNS解析查找流程依次为：<br><strong>浏览器缓存-系统缓存-路由器缓存-ISP DNS缓存-递归搜索</strong>  </p>\n<h2 id=\"支持DNS-Prefetch的浏览器\"><a href=\"#支持DNS-Prefetch的浏览器\" class=\"headerlink\" title=\"支持DNS Prefetch的浏览器\"></a>支持DNS Prefetch的浏览器</h2><ul>\n<li>Chrome</li>\n<li>IE:9+</li>\n<li>Firefox:3.5+</li>\n<li>Safari:5+</li>\n<li>Edge  </li>\n</ul>\n<h2 id=\"如何在网站中使用DNS预解析\"><a href=\"#如何在网站中使用DNS预解析\" class=\"headerlink\" title=\"如何在网站中使用DNS预解析\"></a>如何在网站中使用DNS预解析</h2><p>因为浏览器的html解析是顺序的，所以DNS Prefetch 应该尽量的放在网页的前面，推荐放在 <meta charset=\"UTF-8\"> 后面：  </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"x-dns-prefetch-control\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"on\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--打开和关闭DNS预预解析--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"dns-prefetch\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"//www.baidu.com\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--解析的DNS的地址--&gt;</span></span><br></pre></td></tr></table></figure>\n<p>注：dns-prefetch需慎用，多页面重复DNS预解析会增加重复DNS查询次数。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"什么是DNS预解析？\"><a href=\"#什么是DNS预解析？\" class=\"headerlink\" title=\"什么是DNS预解析？\"></a>什么是DNS预解析？</h2><p>我们在进行前端性能优化时，涉及到DNS方面的优化一般有两点： 一个是减少DNS的请求次数，另一个就是进行DNS预解析 。</p>\n<p>DNS 实现域名到IP的映射。通过域名访问站点，每次请求都要做DNS解析。目前每次DNS解析，通常在200ms以下。针对DNS解析耗时问题，一些浏览器通过DNS Prefetch 来提高访问的流畅性。  </p>\n<p><strong>DNS Prefetch</strong> 是一种DNS 预解析技术，当浏览网页时，浏览器会在加载网页时对网页中的域名进行解析缓存，这样在单击当前网页中的连接时就无需进行DNS的解析，减少用户等待时间，提高用户体验。</p>\n<h4 id=\"DNS-Prefetch，即DNS预解析。\"><a href=\"#DNS-Prefetch，即DNS预解析。\" class=\"headerlink\" title=\"DNS Prefetch，即DNS预解析。\"></a><strong>DNS Prefetch，即DNS预解析。</strong></h4>","more":"<h2 id=\"为什么使用DNS预解析？\"><a href=\"#为什么使用DNS预解析？\" class=\"headerlink\" title=\"为什么使用DNS预解析？\"></a>为什么使用DNS预解析？</h2><p>DNS 作为互联网的基础协议，其解析的速度似乎很容易被网站优化人员忽视。现在大多数新浏览器已经针对DNS解析进行了优化，典型的一次DNS解析需要耗费 20-120 毫秒，减少DNS解析时间和次数是个很好的优化方式。DNS预解析 是让具有此属性的域名不需要用户点击链接就在后台解析，而域名解析和内容载入是串行的网络操作，所以这个方式能 减少用户的等待时间，提升用户体验 。</p>\n<h4 id=\"DNS解析的运行顺序\"><a href=\"#DNS解析的运行顺序\" class=\"headerlink\" title=\"DNS解析的运行顺序\"></a>DNS解析的运行顺序</h4><p>浏览器对网站第一次的域名DNS解析查找流程依次为：<br><strong>浏览器缓存-系统缓存-路由器缓存-ISP DNS缓存-递归搜索</strong>  </p>\n<h2 id=\"支持DNS-Prefetch的浏览器\"><a href=\"#支持DNS-Prefetch的浏览器\" class=\"headerlink\" title=\"支持DNS Prefetch的浏览器\"></a>支持DNS Prefetch的浏览器</h2><ul>\n<li>Chrome</li>\n<li>IE:9+</li>\n<li>Firefox:3.5+</li>\n<li>Safari:5+</li>\n<li>Edge  </li>\n</ul>\n<h2 id=\"如何在网站中使用DNS预解析\"><a href=\"#如何在网站中使用DNS预解析\" class=\"headerlink\" title=\"如何在网站中使用DNS预解析\"></a>如何在网站中使用DNS预解析</h2><p>因为浏览器的html解析是顺序的，所以DNS Prefetch 应该尽量的放在网页的前面，推荐放在 <meta charset=\"UTF-8\"> 后面：  </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"x-dns-prefetch-control\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"on\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--打开和关闭DNS预预解析--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"dns-prefetch\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"//www.baidu.com\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--解析的DNS的地址--&gt;</span></span><br></pre></td></tr></table></figure>\n<p>注：dns-prefetch需慎用，多页面重复DNS预解析会增加重复DNS查询次数。</p>"},{"layout":"[post]","title":"vue生命周期以及nextTick应用","date":"2019-04-01T02:14:30.000Z","_content":"## vue的生命周期\n<!-- more -->\n\n![yasuo](shengming.webp)  \n![yasuo](biaoge.webp)\n- **beforeCreate**:在实例初始化之后，数据观测data observer(props、data、computed) 和 event/watcher 事件配置之前被调用。\n- **created**:实例已经创建完成之后被调用。在这一步，实例已完成以下的配置：数据观测(data observer)，属性和方法的运算， watch/event 事件回调。然而，挂载阶段还没开始，$el 属性目前不可见。\n- **beforeMount**:在挂载开始之前被调用：相关的 render 函数首次被调用。\n- **mounted**:el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子。\n- **beforeUpdate**:数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。 你可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。\n- **updated**:无论是组件本身的数据变更，还是从父组件接收到的 props 或者从vuex里面拿到的数据有变更，都会触发虚拟 DOM 重新渲染和打补丁，并在之后调用 updated。\n- **beforeDestroy**:实例销毁之前调用。在这一步，实例仍然完全可用。\n- **destroyed**:Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。 该钩子在服务器端渲染期间不被调用。\n\n##### 注意\ncreated阶段的ajax请求与mounted请求的区别：前者页面视图未出现，如果请求信息过多，页面会长时间处于白屏状态。\n## 单个组件的生命周期\n1. 初始化组件时，仅执行了`beforeCreate/Created/beforeMount/mounted`四个钩子函数\n2. 当改变data中定义的变量（响应式变量）时，会执行`beforeUpdate/updated`钩子函数\n3. 当切换组件（当前组件未缓存）时，会执行`beforeDestory/destroyed`钩子函数\n4. 初始化和销毁时的生命钩子函数均只会执行一次，`beforeUpdate/updated`可多次执行\n\n## Vue.nextTick()\n>  在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。  \n\n获取更新后的DOM言外之意就是什么操作需要用到了更新后的DOM而不能使用之前的DOM或者使用更新前的DOM会出问题，所以就衍生出了这个获取更新后的 DOM的Vue方法。  \n> **Vue.nextTick()回调函数中的执行的应该是会对DOM进行操作的 js代码**\n\n### 什么时候需要用Vue.nextTick()?\n- 你在Vue生命周期的created()钩子函数进行的DOM操作一定要放在Vue.nextTick()的回调函数中。原因是什么呢，原因是在created()钩子函数执行的时候DOM 其实并未进行任何渲染，而此时进行DOM操作无异于徒劳，所以此处一定要将DOM操作的js代码放进Vue.nextTick()的回调函数中。与之对应的就是mounted钩子函数，因为该钩子函数执行时所有的DOM挂载和渲染都已完成，此时在该钩子函数中进行任何DOM操作都不会有问题 。\n- 在数据变化后要执行的某个操作，当你设置 vm.someData = 'new value'，DOM并不会马上更新，而是在异步队列被清除，也就是下一个事件循环开始时执行更新时才会进行必要的DOM更新。如果此时你想要根据更新的 DOM 状态去做某些事情，就会出现问题。。为了在数据变化之后等待 Vue 完成更新 DOM ，可以在数据变化之后立即使用 Vue.nextTick(callback) 。这样回调函数在 DOM 更新完成后就会调用。\n- mounted 不会承诺所有的子组件也都一起被挂载。如果你希望等到整个视图都渲染完毕，可以用 vm.$nextTick 替换掉 mounted.\n```js\nmounted: function () {\nthis.$nextTick(function () {\n\n// Code that will run only after the\n// entire view has been rendered\n})\n}\n```\n[原文地址](https://www.jianshu.com/p/46c9d777cab1)\n","source":"_posts/vue生命周期以及nextTick应用.md","raw":"---\nlayout: '[post]'\ntitle: vue生命周期以及nextTick应用\ndate: 2019-04-01 10:14:30\ntags: vue\n---\n## vue的生命周期\n<!-- more -->\n\n![yasuo](shengming.webp)  \n![yasuo](biaoge.webp)\n- **beforeCreate**:在实例初始化之后，数据观测data observer(props、data、computed) 和 event/watcher 事件配置之前被调用。\n- **created**:实例已经创建完成之后被调用。在这一步，实例已完成以下的配置：数据观测(data observer)，属性和方法的运算， watch/event 事件回调。然而，挂载阶段还没开始，$el 属性目前不可见。\n- **beforeMount**:在挂载开始之前被调用：相关的 render 函数首次被调用。\n- **mounted**:el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子。\n- **beforeUpdate**:数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。 你可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。\n- **updated**:无论是组件本身的数据变更，还是从父组件接收到的 props 或者从vuex里面拿到的数据有变更，都会触发虚拟 DOM 重新渲染和打补丁，并在之后调用 updated。\n- **beforeDestroy**:实例销毁之前调用。在这一步，实例仍然完全可用。\n- **destroyed**:Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。 该钩子在服务器端渲染期间不被调用。\n\n##### 注意\ncreated阶段的ajax请求与mounted请求的区别：前者页面视图未出现，如果请求信息过多，页面会长时间处于白屏状态。\n## 单个组件的生命周期\n1. 初始化组件时，仅执行了`beforeCreate/Created/beforeMount/mounted`四个钩子函数\n2. 当改变data中定义的变量（响应式变量）时，会执行`beforeUpdate/updated`钩子函数\n3. 当切换组件（当前组件未缓存）时，会执行`beforeDestory/destroyed`钩子函数\n4. 初始化和销毁时的生命钩子函数均只会执行一次，`beforeUpdate/updated`可多次执行\n\n## Vue.nextTick()\n>  在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。  \n\n获取更新后的DOM言外之意就是什么操作需要用到了更新后的DOM而不能使用之前的DOM或者使用更新前的DOM会出问题，所以就衍生出了这个获取更新后的 DOM的Vue方法。  \n> **Vue.nextTick()回调函数中的执行的应该是会对DOM进行操作的 js代码**\n\n### 什么时候需要用Vue.nextTick()?\n- 你在Vue生命周期的created()钩子函数进行的DOM操作一定要放在Vue.nextTick()的回调函数中。原因是什么呢，原因是在created()钩子函数执行的时候DOM 其实并未进行任何渲染，而此时进行DOM操作无异于徒劳，所以此处一定要将DOM操作的js代码放进Vue.nextTick()的回调函数中。与之对应的就是mounted钩子函数，因为该钩子函数执行时所有的DOM挂载和渲染都已完成，此时在该钩子函数中进行任何DOM操作都不会有问题 。\n- 在数据变化后要执行的某个操作，当你设置 vm.someData = 'new value'，DOM并不会马上更新，而是在异步队列被清除，也就是下一个事件循环开始时执行更新时才会进行必要的DOM更新。如果此时你想要根据更新的 DOM 状态去做某些事情，就会出现问题。。为了在数据变化之后等待 Vue 完成更新 DOM ，可以在数据变化之后立即使用 Vue.nextTick(callback) 。这样回调函数在 DOM 更新完成后就会调用。\n- mounted 不会承诺所有的子组件也都一起被挂载。如果你希望等到整个视图都渲染完毕，可以用 vm.$nextTick 替换掉 mounted.\n```js\nmounted: function () {\nthis.$nextTick(function () {\n\n// Code that will run only after the\n// entire view has been rendered\n})\n}\n```\n[原文地址](https://www.jianshu.com/p/46c9d777cab1)\n","slug":"vue生命周期以及nextTick应用","published":1,"updated":"2020-02-05T06:22:03.000Z","_id":"ck68xaigi0000sts64cs8dw1w","comments":1,"photos":[],"link":"","content":"<h2 id=\"vue的生命周期\"><a href=\"#vue的生命周期\" class=\"headerlink\" title=\"vue的生命周期\"></a>vue的生命周期</h2><a id=\"more\"></a>\n\n<p><img src=\"/2019/04/01/vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E4%BB%A5%E5%8F%8AnextTick%E5%BA%94%E7%94%A8/shengming.webp\" alt=\"yasuo\"><br><img src=\"/2019/04/01/vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E4%BB%A5%E5%8F%8AnextTick%E5%BA%94%E7%94%A8/biaoge.webp\" alt=\"yasuo\"></p>\n<ul>\n<li><strong>beforeCreate</strong>:在实例初始化之后，数据观测data observer(props、data、computed) 和 event/watcher 事件配置之前被调用。</li>\n<li><strong>created</strong>:实例已经创建完成之后被调用。在这一步，实例已完成以下的配置：数据观测(data observer)，属性和方法的运算， watch/event 事件回调。然而，挂载阶段还没开始，$el 属性目前不可见。</li>\n<li><strong>beforeMount</strong>:在挂载开始之前被调用：相关的 render 函数首次被调用。</li>\n<li><strong>mounted</strong>:el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子。</li>\n<li><strong>beforeUpdate</strong>:数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。 你可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。</li>\n<li><strong>updated</strong>:无论是组件本身的数据变更，还是从父组件接收到的 props 或者从vuex里面拿到的数据有变更，都会触发虚拟 DOM 重新渲染和打补丁，并在之后调用 updated。</li>\n<li><strong>beforeDestroy</strong>:实例销毁之前调用。在这一步，实例仍然完全可用。</li>\n<li><strong>destroyed</strong>:Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。 该钩子在服务器端渲染期间不被调用。</li>\n</ul>\n<h5 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h5><p>created阶段的ajax请求与mounted请求的区别：前者页面视图未出现，如果请求信息过多，页面会长时间处于白屏状态。</p>\n<h2 id=\"单个组件的生命周期\"><a href=\"#单个组件的生命周期\" class=\"headerlink\" title=\"单个组件的生命周期\"></a>单个组件的生命周期</h2><ol>\n<li>初始化组件时，仅执行了<code>beforeCreate/Created/beforeMount/mounted</code>四个钩子函数</li>\n<li>当改变data中定义的变量（响应式变量）时，会执行<code>beforeUpdate/updated</code>钩子函数</li>\n<li>当切换组件（当前组件未缓存）时，会执行<code>beforeDestory/destroyed</code>钩子函数</li>\n<li>初始化和销毁时的生命钩子函数均只会执行一次，<code>beforeUpdate/updated</code>可多次执行</li>\n</ol>\n<h2 id=\"Vue-nextTick\"><a href=\"#Vue-nextTick\" class=\"headerlink\" title=\"Vue.nextTick()\"></a>Vue.nextTick()</h2><blockquote>\n<p> 在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。  </p>\n</blockquote>\n<p>获取更新后的DOM言外之意就是什么操作需要用到了更新后的DOM而不能使用之前的DOM或者使用更新前的DOM会出问题，所以就衍生出了这个获取更新后的 DOM的Vue方法。  </p>\n<blockquote>\n<p><strong>Vue.nextTick()回调函数中的执行的应该是会对DOM进行操作的 js代码</strong></p>\n</blockquote>\n<h3 id=\"什么时候需要用Vue-nextTick\"><a href=\"#什么时候需要用Vue-nextTick\" class=\"headerlink\" title=\"什么时候需要用Vue.nextTick()?\"></a>什么时候需要用Vue.nextTick()?</h3><ul>\n<li>你在Vue生命周期的created()钩子函数进行的DOM操作一定要放在Vue.nextTick()的回调函数中。原因是什么呢，原因是在created()钩子函数执行的时候DOM 其实并未进行任何渲染，而此时进行DOM操作无异于徒劳，所以此处一定要将DOM操作的js代码放进Vue.nextTick()的回调函数中。与之对应的就是mounted钩子函数，因为该钩子函数执行时所有的DOM挂载和渲染都已完成，此时在该钩子函数中进行任何DOM操作都不会有问题 。</li>\n<li>在数据变化后要执行的某个操作，当你设置 vm.someData = ‘new value’，DOM并不会马上更新，而是在异步队列被清除，也就是下一个事件循环开始时执行更新时才会进行必要的DOM更新。如果此时你想要根据更新的 DOM 状态去做某些事情，就会出现问题。。为了在数据变化之后等待 Vue 完成更新 DOM ，可以在数据变化之后立即使用 Vue.nextTick(callback) 。这样回调函数在 DOM 更新完成后就会调用。</li>\n<li>mounted 不会承诺所有的子组件也都一起被挂载。如果你希望等到整个视图都渲染完毕，可以用 vm.$nextTick 替换掉 mounted.<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mounted: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">this</span>.$nextTick(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Code that will run only after the</span></span><br><span class=\"line\"><span class=\"comment\">// entire view has been rendered</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<a href=\"https://www.jianshu.com/p/46c9d777cab1\" target=\"_blank\" rel=\"noopener\">原文地址</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"vue的生命周期\"><a href=\"#vue的生命周期\" class=\"headerlink\" title=\"vue的生命周期\"></a>vue的生命周期</h2>","more":"<p><img src=\"/2019/04/01/vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E4%BB%A5%E5%8F%8AnextTick%E5%BA%94%E7%94%A8/shengming.webp\" alt=\"yasuo\"><br><img src=\"/2019/04/01/vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E4%BB%A5%E5%8F%8AnextTick%E5%BA%94%E7%94%A8/biaoge.webp\" alt=\"yasuo\"></p>\n<ul>\n<li><strong>beforeCreate</strong>:在实例初始化之后，数据观测data observer(props、data、computed) 和 event/watcher 事件配置之前被调用。</li>\n<li><strong>created</strong>:实例已经创建完成之后被调用。在这一步，实例已完成以下的配置：数据观测(data observer)，属性和方法的运算， watch/event 事件回调。然而，挂载阶段还没开始，$el 属性目前不可见。</li>\n<li><strong>beforeMount</strong>:在挂载开始之前被调用：相关的 render 函数首次被调用。</li>\n<li><strong>mounted</strong>:el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子。</li>\n<li><strong>beforeUpdate</strong>:数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。 你可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。</li>\n<li><strong>updated</strong>:无论是组件本身的数据变更，还是从父组件接收到的 props 或者从vuex里面拿到的数据有变更，都会触发虚拟 DOM 重新渲染和打补丁，并在之后调用 updated。</li>\n<li><strong>beforeDestroy</strong>:实例销毁之前调用。在这一步，实例仍然完全可用。</li>\n<li><strong>destroyed</strong>:Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。 该钩子在服务器端渲染期间不被调用。</li>\n</ul>\n<h5 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h5><p>created阶段的ajax请求与mounted请求的区别：前者页面视图未出现，如果请求信息过多，页面会长时间处于白屏状态。</p>\n<h2 id=\"单个组件的生命周期\"><a href=\"#单个组件的生命周期\" class=\"headerlink\" title=\"单个组件的生命周期\"></a>单个组件的生命周期</h2><ol>\n<li>初始化组件时，仅执行了<code>beforeCreate/Created/beforeMount/mounted</code>四个钩子函数</li>\n<li>当改变data中定义的变量（响应式变量）时，会执行<code>beforeUpdate/updated</code>钩子函数</li>\n<li>当切换组件（当前组件未缓存）时，会执行<code>beforeDestory/destroyed</code>钩子函数</li>\n<li>初始化和销毁时的生命钩子函数均只会执行一次，<code>beforeUpdate/updated</code>可多次执行</li>\n</ol>\n<h2 id=\"Vue-nextTick\"><a href=\"#Vue-nextTick\" class=\"headerlink\" title=\"Vue.nextTick()\"></a>Vue.nextTick()</h2><blockquote>\n<p> 在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。  </p>\n</blockquote>\n<p>获取更新后的DOM言外之意就是什么操作需要用到了更新后的DOM而不能使用之前的DOM或者使用更新前的DOM会出问题，所以就衍生出了这个获取更新后的 DOM的Vue方法。  </p>\n<blockquote>\n<p><strong>Vue.nextTick()回调函数中的执行的应该是会对DOM进行操作的 js代码</strong></p>\n</blockquote>\n<h3 id=\"什么时候需要用Vue-nextTick\"><a href=\"#什么时候需要用Vue-nextTick\" class=\"headerlink\" title=\"什么时候需要用Vue.nextTick()?\"></a>什么时候需要用Vue.nextTick()?</h3><ul>\n<li>你在Vue生命周期的created()钩子函数进行的DOM操作一定要放在Vue.nextTick()的回调函数中。原因是什么呢，原因是在created()钩子函数执行的时候DOM 其实并未进行任何渲染，而此时进行DOM操作无异于徒劳，所以此处一定要将DOM操作的js代码放进Vue.nextTick()的回调函数中。与之对应的就是mounted钩子函数，因为该钩子函数执行时所有的DOM挂载和渲染都已完成，此时在该钩子函数中进行任何DOM操作都不会有问题 。</li>\n<li>在数据变化后要执行的某个操作，当你设置 vm.someData = ‘new value’，DOM并不会马上更新，而是在异步队列被清除，也就是下一个事件循环开始时执行更新时才会进行必要的DOM更新。如果此时你想要根据更新的 DOM 状态去做某些事情，就会出现问题。。为了在数据变化之后等待 Vue 完成更新 DOM ，可以在数据变化之后立即使用 Vue.nextTick(callback) 。这样回调函数在 DOM 更新完成后就会调用。</li>\n<li>mounted 不会承诺所有的子组件也都一起被挂载。如果你希望等到整个视图都渲染完毕，可以用 vm.$nextTick 替换掉 mounted.<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mounted: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">this</span>.$nextTick(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Code that will run only after the</span></span><br><span class=\"line\"><span class=\"comment\">// entire view has been rendered</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<a href=\"https://www.jianshu.com/p/46c9d777cab1\" target=\"_blank\" rel=\"noopener\">原文地址</a></li>\n</ul>"}],"PostAsset":[{"_id":"source/_posts/webp在项目中的应用/jianrong.webp","slug":"jianrong.webp","post":"ck65xoth70007d4s620ps5s7n","modified":0,"renderable":0},{"_id":"source/_posts/webp在项目中的应用/liucheng.webp","slug":"liucheng.webp","post":"ck65xoth70007d4s620ps5s7n","modified":0,"renderable":0},{"_id":"source/_posts/webp在项目中的应用/taobao.webp","slug":"taobao.webp","post":"ck65xoth70007d4s620ps5s7n","modified":0,"renderable":0},{"_id":"source/_posts/webp在项目中的应用/yasuo.webp","slug":"yasuo.webp","post":"ck65xoth70007d4s620ps5s7n","modified":0,"renderable":0},{"_id":"source/_posts/vue生命周期以及nextTick应用/shengming.webp","slug":"shengming.webp","post":"ck68xaigi0000sts64cs8dw1w","modified":0,"renderable":0},{"_id":"source/_posts/vue生命周期以及nextTick应用/biaoge.webp","slug":"biaoge.webp","post":"ck68xaigi0000sts64cs8dw1w","modified":0,"renderable":0}],"PostCategory":[],"PostTag":[{"post_id":"ck65xoth70007d4s620ps5s7n","tag_id":"ck65xoth30005d4s65bvl49ij","_id":"ck65xothb000ad4s67uqu3hut"},{"post_id":"ck65xotgx0002d4s6h6n7cs8c","tag_id":"ck65xoth30005d4s65bvl49ij","_id":"ck65xothd000cd4s6253hhoqd"},{"post_id":"ck65xoth10004d4s6gpsp356u","tag_id":"ck65xotha0009d4s65j580vlm","_id":"ck65xothf000ed4s61lmxbkzu"},{"post_id":"ck65xoth50006d4s6fxgm1nay","tag_id":"ck65xotha0009d4s65j580vlm","_id":"ck65xothg000gd4s65y14b437"},{"post_id":"ck65xoth90008d4s6egme4zke","tag_id":"ck65xothf000fd4s61b1sb2va","_id":"ck65xothh000id4s6e4rm282s"},{"post_id":"ck65xothb000bd4s6hxda83uc","tag_id":"ck65xothg000hd4s6at82f34w","_id":"ck65xothi000jd4s63vhg12cn"},{"post_id":"ck68xaigi0000sts64cs8dw1w","tag_id":"ck68xaigo0001sts62e5d9zgl","_id":"ck68xaigu0002sts6c1rsdcd4"}],"Tag":[{"name":"html","_id":"ck65xoth30005d4s65bvl49ij"},{"name":"Promise","_id":"ck65xotha0009d4s65j580vlm"},{"name":"hexo","_id":"ck65xothf000fd4s61b1sb2va"},{"name":"前端性能优化","_id":"ck65xothg000hd4s6at82f34w"},{"name":"vue","_id":"ck68xaigo0001sts62e5d9zgl"}]}}